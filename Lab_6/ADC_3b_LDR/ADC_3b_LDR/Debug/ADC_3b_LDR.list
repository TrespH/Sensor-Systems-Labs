
ADC_3b_LDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800a990  0800a990  0000b990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae28  0800ae28  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae28  0800ae28  0000be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae30  0800ae30  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae30  0800ae30  0000be30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae34  0800ae34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ae38  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  200001e8  0800b020  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  0800b020  0000cd44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4bb  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002359  00000000  00000000  0001b6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  0001da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  0001e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187ca  00000000  00000000  0001f42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011070  00000000  00000000  00037bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc2f  00000000  00000000  00048c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4897  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  000e48dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000e9eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a974 	.word	0x0800a974

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a974 	.word	0x0800a974

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	for(int i = 0; i <= (buffer_length/2) - 1; i++) //process the first half of the data
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e012      	b.n	8001028 <HAL_ADC_ConvHalfCpltCallback+0x34>
	{
		sum = sum + in0_data[i]; //sum of the first half of the data
 8001002:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001014:	edd3 7a00 	vldr	s15, [r3]
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 800101e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i <= (buffer_length/2) - 1; i++) //process the first half of the data
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800102e:	dbe8      	blt.n	8001002 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}

}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200003a4 	.word	0x200003a4
 8001044:	20000b74 	.word	0x20000b74

08001048 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]

	for(int i = buffer_length/2; i <= buffer_length - 1; i++) //process the second half of the data
 8001050:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e012      	b.n	800107e <HAL_ADC_ConvCpltCallback+0x36>
	{
		sum = sum + in0_data[i]; //sum of the first half of the data
 8001058:	4a4f      	ldr	r2, [pc, #316]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x150>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001068:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <HAL_ADC_ConvCpltCallback+0x154>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	4b4a      	ldr	r3, [pc, #296]	@ (800119c <HAL_ADC_ConvCpltCallback+0x154>)
 8001074:	edc3 7a00 	vstr	s15, [r3]
	for(int i = buffer_length/2; i <= buffer_length - 1; i++) //process the second half of the data
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001084:	dbe8      	blt.n	8001058 <HAL_ADC_ConvCpltCallback+0x10>
	}

	average = sum/buffer_length;							  //average of all the data
 8001086:	4b45      	ldr	r3, [pc, #276]	@ (800119c <HAL_ADC_ConvCpltCallback+0x154>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	eddf 6a44 	vldr	s13, [pc, #272]	@ 80011a0 <HAL_ADC_ConvCpltCallback+0x158>
 8001090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001094:	4b43      	ldr	r3, [pc, #268]	@ (80011a4 <HAL_ADC_ConvCpltCallback+0x15c>)
 8001096:	edc3 7a00 	vstr	s15, [r3]

	average_volt = average*FSR/resolution_steps;	  //average value converted in volt
 800109a:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_ADC_ConvCpltCallback+0x160>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a6:	4b3f      	ldr	r3, [pc, #252]	@ (80011a4 <HAL_ADC_ConvCpltCallback+0x15c>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010b0:	4b3e      	ldr	r3, [pc, #248]	@ (80011ac <HAL_ADC_ConvCpltCallback+0x164>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c0:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0x168>)
 80010c2:	edc3 7a00 	vstr	s15, [r3]

	ldr = (average_volt*100000)/(FSR - average_volt); //light detection resistance computation
 80010c6:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0x168>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80011b4 <HAL_ADC_ConvCpltCallback+0x16c>
 80010d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010d4:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <HAL_ADC_ConvCpltCallback+0x160>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0x168>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0x170>)
 80010f0:	edc3 7a00 	vstr	s15, [r3]
	lux = 10*pow((100000/ldr), 1.25);				  //brightness measurements units computation
 80010f4:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0x170>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80011b4 <HAL_ADC_ConvCpltCallback+0x16c>
 80010fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001102:	ee16 0a90 	vmov	r0, s13
 8001106:	f7ff fa27 	bl	8000558 <__aeabi_f2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8001190 <HAL_ADC_ConvCpltCallback+0x148>
 8001112:	ec43 2b10 	vmov	d0, r2, r3
 8001116:	f008 fccd 	bl	8009ab4 <pow>
 800111a:	ec51 0b10 	vmov	r0, r1, d0
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <HAL_ADC_ConvCpltCallback+0x174>)
 8001124:	f7ff fa70 	bl	8000608 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd62 	bl	8000bf8 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a22      	ldr	r2, [pc, #136]	@ (80011c0 <HAL_ADC_ConvCpltCallback+0x178>)
 8001138:	6013      	str	r3, [r2, #0]

	string_length = snprintf(string, sizeof(string), "LDR %.3f, LUX %.3f \n", ldr, lux); //converts the values into strings
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0x170>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa0a 	bl	8000558 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <HAL_ADC_ConvCpltCallback+0x178>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa03 	bl	8000558 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800115a:	e9cd 4500 	strd	r4, r5, [sp]
 800115e:	4a19      	ldr	r2, [pc, #100]	@ (80011c4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001160:	2164      	movs	r1, #100	@ 0x64
 8001162:	4819      	ldr	r0, [pc, #100]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001164:	f005 f83a 	bl	80061dc <sniprintf>
 8001168:	4603      	mov	r3, r0
 800116a:	4a18      	ldr	r2, [pc, #96]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x184>)
 800116c:	6013      	str	r3, [r2, #0]

	sum = 0;	//reset sum to 0, ready to be processed in a new ADC callback
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_ADC_ConvCpltCallback+0x154>)
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

	HAL_UART_Transmit_DMA(&huart2, string, string_length); //send the string to the PC via UART
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x184>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4912      	ldr	r1, [pc, #72]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0x180>)
 8001180:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001182:	f003 f8e9 	bl	8004358 <HAL_UART_Transmit_DMA>

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	3ff40000 	.word	0x3ff40000
 8001198:	200003a4 	.word	0x200003a4
 800119c:	20000b74 	.word	0x20000b74
 80011a0:	447a0000 	.word	0x447a0000
 80011a4:	20000b78 	.word	0x20000b78
 80011a8:	2000039c 	.word	0x2000039c
 80011ac:	200003a0 	.word	0x200003a0
 80011b0:	20000b7c 	.word	0x20000b7c
 80011b4:	47c35000 	.word	0x47c35000
 80011b8:	20000b80 	.word	0x20000b80
 80011bc:	40240000 	.word	0x40240000
 80011c0:	20000b84 	.word	0x20000b84
 80011c4:	0800a990 	.word	0x0800a990
 80011c8:	20000b88 	.word	0x20000b88
 80011cc:	20000bec 	.word	0x20000bec
 80011d0:	200002f4 	.word	0x200002f4

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f000 fcaa 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f826 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f98e 	bl	8001500 <MX_GPIO_Init>
  MX_DMA_Init();
 80011e4:	f000 f956 	bl	8001494 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011e8:	f000 f92a 	bl	8001440 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011ec:	f000 f88a 	bl	8001304 <MX_ADC1_Init>
  MX_TIM2_Init();
 80011f0:	f000 f8da 	bl	80013a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80011f4:	4808      	ldr	r0, [pc, #32]	@ (8001218 <main+0x44>)
 80011f6:	f002 fda9 	bl	8003d4c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, in0_data, buffer_length);
 80011fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011fe:	4907      	ldr	r1, [pc, #28]	@ (800121c <main+0x48>)
 8001200:	4807      	ldr	r0, [pc, #28]	@ (8001220 <main+0x4c>)
 8001202:	f000 fe5b 	bl	8001ebc <HAL_ADC_Start_DMA>

  FSR = VDDA - VSSA; 							//set the full scale range value
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <main+0x50>)
 8001208:	2203      	movs	r2, #3
 800120a:	601a      	str	r2, [r3, #0]
  resolution_steps = (1) << resolution_bits; 	//resolution_step is 2^resolution_bits
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <main+0x54>)
 800120e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001212:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <main+0x40>
 8001218:	200002ac 	.word	0x200002ac
 800121c:	200003a4 	.word	0x200003a4
 8001220:	20000204 	.word	0x20000204
 8001224:	2000039c 	.word	0x2000039c
 8001228:	200003a0 	.word	0x200003a0

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b094      	sub	sp, #80	@ 0x50
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	2230      	movs	r2, #48	@ 0x30
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f005 f865 	bl	800630a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <SystemClock_Config+0xd0>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <SystemClock_Config+0xd0>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <SystemClock_Config+0xd0>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <SystemClock_Config+0xd4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001278:	4a21      	ldr	r2, [pc, #132]	@ (8001300 <SystemClock_Config+0xd4>)
 800127a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <SystemClock_Config+0xd4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012a0:	2310      	movs	r3, #16
 80012a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012aa:	2304      	movs	r3, #4
 80012ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ae:	2307      	movs	r3, #7
 80012b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 f860 	bl	800337c <HAL_RCC_OscConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012c2:	f000 f98b 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c6:	230f      	movs	r3, #15
 80012c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ca:	2302      	movs	r3, #2
 80012cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2102      	movs	r1, #2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fac2 	bl	800386c <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ee:	f000 f975 	bl	80015dc <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	@ 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001318:	4a22      	ldr	r2, [pc, #136]	@ (80013a4 <MX_ADC1_Init+0xa0>)
 800131a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 800131e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001322:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001332:	2200      	movs	r2, #0
 8001334:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001344:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001348:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001356:	2201      	movs	r2, #1
 8001358:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 8001364:	2201      	movs	r2, #1
 8001366:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 800136a:	f000 fc53 	bl	8001c14 <HAL_ADC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001374:	f000 f932 	bl	80015dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001380:	2307      	movs	r3, #7
 8001382:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_ADC1_Init+0x9c>)
 800138a:	f000 fe9b 	bl	80020c4 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001394:	f000 f922 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000204 	.word	0x20000204
 80013a4:	40012000 	.word	0x40012000

080013a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <MX_TIM2_Init+0x94>)
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <MX_TIM2_Init+0x94>)
 80013ce:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <MX_TIM2_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10)-1;
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <MX_TIM2_Init+0x94>)
 80013dc:	2209      	movs	r2, #9
 80013de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_TIM2_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_TIM2_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ec:	4813      	ldr	r0, [pc, #76]	@ (800143c <MX_TIM2_Init+0x94>)
 80013ee:	f002 fc5d 	bl	8003cac <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013f8:	f000 f8f0 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <MX_TIM2_Init+0x94>)
 800140a:	f002 fcf9 	bl	8003e00 <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 f8e2 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001418:	2320      	movs	r3, #32
 800141a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_TIM2_Init+0x94>)
 8001426:	f002 fed9 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001430:	f000 f8d4 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200002ac 	.word	0x200002ac

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_USART2_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001478:	f002 ff1e 	bl	80042b8 <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 f8ab 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002f4 	.word	0x200002f4
 8001490:	40004400 	.word	0x40004400

08001494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_DMA_Init+0x68>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a16      	ldr	r2, [pc, #88]	@ (80014fc <MX_DMA_Init+0x68>)
 80014a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_DMA_Init+0x68>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_DMA_Init+0x68>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <MX_DMA_Init+0x68>)
 80014c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <MX_DMA_Init+0x68>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2011      	movs	r0, #17
 80014d8:	f001 f979 	bl	80027ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014dc:	2011      	movs	r0, #17
 80014de:	f001 f992 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2038      	movs	r0, #56	@ 0x38
 80014e8:	f001 f971 	bl	80027ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014ec:	2038      	movs	r0, #56	@ 0x38
 80014ee:	f001 f98a 	bl	8002806 <HAL_NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a2c      	ldr	r2, [pc, #176]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a25      	ldr	r2, [pc, #148]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 800153c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a1e      	ldr	r2, [pc, #120]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <MX_GPIO_Init+0xd0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2120      	movs	r1, #32
 800158a:	4812      	ldr	r0, [pc, #72]	@ (80015d4 <MX_GPIO_Init+0xd4>)
 800158c:	f001 fedc 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001596:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <MX_GPIO_Init+0xd8>)
 80015a8:	f001 fd4a 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ac:	2320      	movs	r3, #32
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_GPIO_Init+0xd4>)
 80015c4:	f001 fd3c 	bl	8003040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c8:	bf00      	nop
 80015ca:	3728      	adds	r7, #40	@ 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020800 	.word	0x40020800

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <Error_Handler+0x8>

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_MspInit+0x4c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001626:	2007      	movs	r0, #7
 8001628:	f001 f8c6 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a33      	ldr	r2, [pc, #204]	@ (8001724 <HAL_ADC_MspInit+0xec>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d160      	bne.n	800171c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b32      	ldr	r3, [pc, #200]	@ (8001728 <HAL_ADC_MspInit+0xf0>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	4a31      	ldr	r2, [pc, #196]	@ (8001728 <HAL_ADC_MspInit+0xf0>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44
 800166a:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <HAL_ADC_MspInit+0xf0>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_ADC_MspInit+0xf0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a2a      	ldr	r2, [pc, #168]	@ (8001728 <HAL_ADC_MspInit+0xf0>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_ADC_MspInit+0xf0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4821      	ldr	r0, [pc, #132]	@ (800172c <HAL_ADC_MspInit+0xf4>)
 80016a6:	f001 fccb 	bl	8003040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016aa:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	@ (8001734 <HAL_ADC_MspInit+0xfc>)
 80016ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016f0:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 80016f2:	f001 f8a3 	bl	800283c <HAL_DMA_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80016fc:	f7ff ff6e 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 8001704:	639a      	str	r2, [r3, #56]	@ 0x38
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <HAL_ADC_MspInit+0xf8>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2012      	movs	r0, #18
 8001712:	f001 f85c 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001716:	2012      	movs	r0, #18
 8001718:	f001 f875 	bl	8002806 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	@ 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40012000 	.word	0x40012000
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000
 8001730:	2000024c 	.word	0x2000024c
 8001734:	40026410 	.word	0x40026410

08001738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001748:	d10d      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_TIM_Base_MspInit+0x3c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	@ (8001774 <HAL_TIM_Base_MspInit+0x3c>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6413      	str	r3, [r2, #64]	@ 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_TIM_Base_MspInit+0x3c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a34      	ldr	r2, [pc, #208]	@ (8001868 <HAL_UART_MspInit+0xf0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d162      	bne.n	8001860 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b33      	ldr	r3, [pc, #204]	@ (800186c <HAL_UART_MspInit+0xf4>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	4a32      	ldr	r2, [pc, #200]	@ (800186c <HAL_UART_MspInit+0xf4>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017aa:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_UART_MspInit+0xf4>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b2c      	ldr	r3, [pc, #176]	@ (800186c <HAL_UART_MspInit+0xf4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a2b      	ldr	r2, [pc, #172]	@ (800186c <HAL_UART_MspInit+0xf4>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b29      	ldr	r3, [pc, #164]	@ (800186c <HAL_UART_MspInit+0xf4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017d2:	230c      	movs	r3, #12
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e2:	2307      	movs	r3, #7
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4820      	ldr	r0, [pc, #128]	@ (8001870 <HAL_UART_MspInit+0xf8>)
 80017ee:	f001 fc27 	bl	8003040 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 80017f4:	4a20      	ldr	r2, [pc, #128]	@ (8001878 <HAL_UART_MspInit+0x100>)
 80017f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 80017fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001802:	2240      	movs	r2, #64	@ 0x40
 8001804:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 800180e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001812:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001828:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800182c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001834:	480f      	ldr	r0, [pc, #60]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001836:	f001 f801 	bl	800283c <HAL_DMA_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001840:	f7ff fecc 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 8001848:	639a      	str	r2, [r3, #56]	@ 0x38
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_UART_MspInit+0xfc>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2026      	movs	r0, #38	@ 0x26
 8001856:	f000 ffba 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800185a:	2026      	movs	r0, #38	@ 0x26
 800185c:	f000 ffd3 	bl	8002806 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	@ 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40004400 	.word	0x40004400
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000
 8001874:	2000033c 	.word	0x2000033c
 8001878:	400260a0 	.word	0x400260a0

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d2:	f000 f97f 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <DMA1_Stream6_IRQHandler+0x10>)
 80018e2:	f001 f943 	bl	8002b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000033c 	.word	0x2000033c

080018f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <ADC_IRQHandler+0x10>)
 80018f6:	f000 f9d0 	bl	8001c9a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000204 	.word	0x20000204

08001904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <USART2_IRQHandler+0x10>)
 800190a:	f002 fd95 	bl	8004438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002f4 	.word	0x200002f4

08001918 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <DMA2_Stream0_IRQHandler+0x10>)
 800191e:	f001 f925 	bl	8002b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000024c 	.word	0x2000024c

0800192c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_kill>:

int _kill(int pid, int sig)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001946:	f004 fd33 	bl	80063b0 <__errno>
 800194a:	4603      	mov	r3, r0
 800194c:	2216      	movs	r2, #22
 800194e:	601a      	str	r2, [r3, #0]
  return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_exit>:

void _exit (int status)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffe7 	bl	800193c <_kill>
  while (1) {}    /* Make sure we hang here */
 800196e:	bf00      	nop
 8001970:	e7fd      	b.n	800196e <_exit+0x12>

08001972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e00a      	b.n	800199a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001984:	f3af 8000 	nop.w
 8001988:	4601      	mov	r1, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	60ba      	str	r2, [r7, #8]
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbf0      	blt.n	8001984 <_read+0x12>
  }

  return len;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e009      	b.n	80019d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbf1      	blt.n	80019be <_write+0x12>
  }
  return len;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_close>:

int _close(int file)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_isatty>:

int _isatty(int file)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f004 fc98 	bl	80063b0 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20018000 	.word	0x20018000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	20000bf0 	.word	0x20000bf0
 8001ab4:	20000d48 	.word	0x20000d48

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ae0:	f7ff ffea 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae6:	490d      	ldr	r1, [pc, #52]	@ (8001b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001afc:	4c0a      	ldr	r4, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f004 fc57 	bl	80063bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7ff fb61 	bl	80011d4 <main>
  bx  lr    
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b20:	0800ae38 	.word	0x0800ae38
  ldr r2, =_sbss
 8001b24:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001b28:	20000d44 	.word	0x20000d44

08001b2c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <DMA1_Stream0_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b34:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <HAL_Init+0x40>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_Init+0x40>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <HAL_Init+0x40>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 fe2d 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fd40 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fe45 	bl	8002822 <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 fe0d 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	@ (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x20>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000bf4 	.word	0x20000bf4

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_GetTick+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000bf4 	.word	0x20000bf4

08001c14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e033      	b.n	8001c92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fd00 	bl	8001638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c5a:	f023 0302 	bic.w	r3, r3, #2
 8001c5e:	f043 0202 	orr.w	r2, r3, #2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fb4e 	bl	8002308 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f023 0303 	bic.w	r3, r3, #3
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c82:	e001      	b.n	8001c88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d049      	beq.n	8001d64 <HAL_ADC_IRQHandler+0xca>
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d046      	beq.n	8001d64 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d12b      	bne.n	8001d54 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d127      	bne.n	8001d54 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d119      	bne.n	8001d54 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0220 	bic.w	r2, r2, #32
 8001d2e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff f977 	bl	8001048 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f06f 0212 	mvn.w	r2, #18
 8001d62:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d057      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x190>
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d054      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d139      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d12b      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d124      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d11d      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d119      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001df4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fbf2 	bl	8002604 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 020c 	mvn.w	r2, #12
 8001e28:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e38:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x1d6>
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d014      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10d      	bne.n	8001e70 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f91b 	bl	800209c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 0201 	mvn.w	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e7e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d015      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x218>
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	f043 0202 	orr.w	r2, r3, #2
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f904 	bl	80020b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0220 	mvn.w	r2, #32
 8001eb0:	601a      	str	r2, [r3, #0]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Start_DMA+0x1e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0ce      	b.n	8002078 <HAL_ADC_Start_DMA+0x1bc>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d018      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f00:	4b5f      	ldr	r3, [pc, #380]	@ (8002080 <HAL_ADC_Start_DMA+0x1c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5f      	ldr	r2, [pc, #380]	@ (8002084 <HAL_ADC_Start_DMA+0x1c8>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9a      	lsrs	r2, r3, #18
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f30:	d107      	bne.n	8001f42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f40:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f040 8086 	bne.w	800205e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f90:	d106      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f023 0206 	bic.w	r2, r3, #6
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f9e:	e002      	b.n	8001fa6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fae:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_ADC_Start_DMA+0x1cc>)
 8001fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb6:	4a35      	ldr	r2, [pc, #212]	@ (800208c <HAL_ADC_Start_DMA+0x1d0>)
 8001fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbe:	4a34      	ldr	r2, [pc, #208]	@ (8002090 <HAL_ADC_Start_DMA+0x1d4>)
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc6:	4a33      	ldr	r2, [pc, #204]	@ (8002094 <HAL_ADC_Start_DMA+0x1d8>)
 8001fc8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001fe2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	334c      	adds	r3, #76	@ 0x4c
 8001ffe:	4619      	mov	r1, r3
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f000 fcc8 	bl	8002998 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d129      	bne.n	8002076 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	e020      	b.n	8002076 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HAL_ADC_Start_DMA+0x1dc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d11b      	bne.n	8002076 <HAL_ADC_Start_DMA+0x1ba>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d114      	bne.n	8002076 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	e00b      	b.n	8002076 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000000 	.word	0x20000000
 8002084:	431bde83 	.word	0x431bde83
 8002088:	40012300 	.word	0x40012300
 800208c:	08002501 	.word	0x08002501
 8002090:	080025bb 	.word	0x080025bb
 8002094:	080025d7 	.word	0x080025d7
 8002098:	40012000 	.word	0x40012000

0800209c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x1c>
 80020dc:	2302      	movs	r3, #2
 80020de:	e105      	b.n	80022ec <HAL_ADC_ConfigChannel+0x228>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d925      	bls.n	800213c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68d9      	ldr	r1, [r3, #12]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	3b1e      	subs	r3, #30
 8002106:	2207      	movs	r2, #7
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43da      	mvns	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	400a      	ands	r2, r1
 8002114:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68d9      	ldr	r1, [r3, #12]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	4603      	mov	r3, r0
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4403      	add	r3, r0
 800212e:	3b1e      	subs	r3, #30
 8002130:	409a      	lsls	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e022      	b.n	8002182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	2207      	movs	r2, #7
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	400a      	ands	r2, r1
 800215e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6919      	ldr	r1, [r3, #16]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	4603      	mov	r3, r0
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4403      	add	r3, r0
 8002178:	409a      	lsls	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b06      	cmp	r3, #6
 8002188:	d824      	bhi.n	80021d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b05      	subs	r3, #5
 800219c:	221f      	movs	r2, #31
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3b05      	subs	r3, #5
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d2:	e04c      	b.n	800226e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d824      	bhi.n	8002226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b23      	subs	r3, #35	@ 0x23
 80021ee:	221f      	movs	r2, #31
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43da      	mvns	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	400a      	ands	r2, r1
 80021fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	4618      	mov	r0, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b23      	subs	r3, #35	@ 0x23
 8002218:	fa00 f203 	lsl.w	r2, r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
 8002224:	e023      	b.n	800226e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b41      	subs	r3, #65	@ 0x41
 8002238:	221f      	movs	r2, #31
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b41      	subs	r3, #65	@ 0x41
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800226e:	4b22      	ldr	r3, [pc, #136]	@ (80022f8 <HAL_ADC_ConfigChannel+0x234>)
 8002270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a21      	ldr	r2, [pc, #132]	@ (80022fc <HAL_ADC_ConfigChannel+0x238>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d109      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1cc>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b12      	cmp	r3, #18
 8002282:	d105      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_ADC_ConfigChannel+0x238>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d123      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x21e>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d003      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x1e6>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b11      	cmp	r3, #17
 80022a8:	d11b      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	d111      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_ADC_ConfigChannel+0x23c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a10      	ldr	r2, [pc, #64]	@ (8002304 <HAL_ADC_ConfigChannel+0x240>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	0c9a      	lsrs	r2, r3, #18
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022d4:	e002      	b.n	80022dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3b01      	subs	r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f9      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40012300 	.word	0x40012300
 80022fc:	40012000 	.word	0x40012000
 8002300:	20000000 	.word	0x20000000
 8002304:	431bde83 	.word	0x431bde83

08002308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002310:	4b79      	ldr	r3, [pc, #484]	@ (80024f8 <ADC_Init+0x1f0>)
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	431a      	orrs	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800233c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	021a      	lsls	r2, r3, #8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	4a58      	ldr	r2, [pc, #352]	@ (80024fc <ADC_Init+0x1f4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d022      	beq.n	80023e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e00f      	b.n	8002406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002404:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0202 	bic.w	r2, r2, #2
 8002414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e1b      	ldrb	r3, [r3, #24]
 8002420:	005a      	lsls	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002442:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	3b01      	subs	r3, #1
 8002460:	035a      	lsls	r2, r3, #13
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	e007      	b.n	800247c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800247a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800248a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	3b01      	subs	r3, #1
 8002498:	051a      	lsls	r2, r3, #20
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024be:	025a      	lsls	r2, r3, #9
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	029a      	lsls	r2, r3, #10
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40012300 	.word	0x40012300
 80024fc:	0f000001 	.word	0x0f000001

08002500 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d13c      	bne.n	8002594 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d12b      	bne.n	800258c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002538:	2b00      	cmp	r3, #0
 800253a:	d127      	bne.n	800258c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002542:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002554:	2b00      	cmp	r3, #0
 8002556:	d119      	bne.n	800258c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0220 	bic.w	r2, r2, #32
 8002566:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7fe fd5b 	bl	8001048 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002592:	e00e      	b.n	80025b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff fd85 	bl	80020b0 <HAL_ADC_ErrorCallback>
}
 80025a6:	e004      	b.n	80025b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7fe fd13 	bl	8000ff4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2240      	movs	r2, #64	@ 0x40
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff fd5a 	bl	80020b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	@ (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	@ (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	@ (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	@ (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	@ (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff29 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff3e 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff31 	bl	800267c <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffa2 	bl	8002774 <SysTick_Config>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff f9d8 	bl	8001bfc <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e099      	b.n	800298c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002878:	e00f      	b.n	800289a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287a:	f7ff f9bf 	bl	8001bfc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b05      	cmp	r3, #5
 8002886:	d908      	bls.n	800289a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e078      	b.n	800298c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e8      	bne.n	800287a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4b38      	ldr	r3, [pc, #224]	@ (8002994 <HAL_DMA_Init+0x158>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	4313      	orrs	r3, r2
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f023 0307 	bic.w	r3, r3, #7
 800291a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	2b04      	cmp	r3, #4
 800292c:	d117      	bne.n	800295e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fb01 	bl	8002f48 <DMA_CheckFifoParam>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800295a:	2301      	movs	r3, #1
 800295c:	e016      	b.n	800298c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fab8 	bl	8002edc <DMA_CalcBaseAndBitshift>
 800296c:	4603      	mov	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	223f      	movs	r2, #63	@ 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	f010803f 	.word	0xf010803f

08002998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Start_IT+0x26>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e040      	b.n	8002a40 <HAL_DMA_Start_IT+0xa8>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d12f      	bne.n	8002a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fa4a 	bl	8002e80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	223f      	movs	r2, #63	@ 0x3f
 80029f2:	409a      	lsls	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0216 	orr.w	r2, r2, #22
 8002a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0208 	orr.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e005      	b.n	8002a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a56:	f7ff f8d1 	bl	8001bfc <HAL_GetTick>
 8002a5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2280      	movs	r2, #128	@ 0x80
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e052      	b.n	8002b20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0216 	bic.w	r2, r2, #22
 8002a88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_DMA_Abort+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0208 	bic.w	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aca:	e013      	b.n	8002af4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002acc:	f7ff f896 	bl	8001bfc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d90c      	bls.n	8002af4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e015      	b.n	8002b20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e4      	bne.n	8002acc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	223f      	movs	r2, #63	@ 0x3f
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d004      	beq.n	8002b46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2280      	movs	r2, #128	@ 0x80
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00c      	b.n	8002b60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b78:	4b8e      	ldr	r3, [pc, #568]	@ (8002db4 <HAL_DMA_IRQHandler+0x248>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a8e      	ldr	r2, [pc, #568]	@ (8002db8 <HAL_DMA_IRQHandler+0x24c>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0a9b      	lsrs	r3, r3, #10
 8002b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	2208      	movs	r2, #8
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0204 	bic.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	f043 0202 	orr.w	r2, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c12:	2204      	movs	r2, #4
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d012      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c30:	2204      	movs	r2, #4
 8002c32:	409a      	lsls	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	2210      	movs	r2, #16
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d043      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03c      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	2210      	movs	r2, #16
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d018      	beq.n	8002cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d024      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e01f      	b.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e016      	b.n	8002cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0208 	bic.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 808f 	beq.w	8002e0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8087 	beq.w	8002e0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d02:	2220      	movs	r2, #32
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d136      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0216 	bic.w	r2, r2, #22
 8002d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x1da>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5a:	223f      	movs	r2, #63	@ 0x3f
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d07e      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
        }
        return;
 8002d82:	e079      	b.n	8002e78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01d      	beq.n	8002dce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10d      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d031      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
 8002db0:	e02c      	b.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000
 8002db8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d023      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e01e      	b.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10f      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0210 	bic.w	r2, r2, #16
 8002dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d032      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2205      	movs	r2, #5
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d307      	bcc.n	8002e54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f2      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x2cc>
 8002e52:	e000      	b.n	8002e56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
 8002e76:	e000      	b.n	8002e7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e78:	bf00      	nop
    }
  }
}
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b40      	cmp	r3, #64	@ 0x40
 8002eac:	d108      	bne.n	8002ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ebe:	e007      	b.n	8002ed0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3b10      	subs	r3, #16
 8002eec:	4a14      	ldr	r2, [pc, #80]	@ (8002f40 <DMA_CalcBaseAndBitshift+0x64>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ef6:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <DMA_CalcBaseAndBitshift+0x68>)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d909      	bls.n	8002f1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	1d1a      	adds	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f1c:	e007      	b.n	8002f2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	aaaaaaab 	.word	0xaaaaaaab
 8002f44:	0800a9c0 	.word	0x0800a9c0

08002f48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11f      	bne.n	8002fa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d856      	bhi.n	8003016 <DMA_CheckFifoParam+0xce>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <DMA_CheckFifoParam+0x28>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f93 	.word	0x08002f93
 8002f78:	08002f81 	.word	0x08002f81
 8002f7c:	08003017 	.word	0x08003017
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d046      	beq.n	800301a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e043      	b.n	800301a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f9a:	d140      	bne.n	800301e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa0:	e03d      	b.n	800301e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002faa:	d121      	bne.n	8002ff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d837      	bhi.n	8003022 <DMA_CheckFifoParam+0xda>
 8002fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <DMA_CheckFifoParam+0x70>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fcf 	.word	0x08002fcf
 8002fc0:	08002fc9 	.word	0x08002fc9
 8002fc4:	08002fe1 	.word	0x08002fe1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e030      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d025      	beq.n	8003026 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fde:	e022      	b.n	8003026 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fe8:	d11f      	bne.n	800302a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fee:	e01c      	b.n	800302a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d903      	bls.n	8002ffe <DMA_CheckFifoParam+0xb6>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d003      	beq.n	8003004 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ffc:	e018      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      break;
 8003002:	e015      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00e      	beq.n	800302e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      break;
 8003014:	e00b      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      break;
 8003016:	bf00      	nop
 8003018:	e00a      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      break;
 800301a:	bf00      	nop
 800301c:	e008      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
 8003020:	e006      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      break;
 8003022:	bf00      	nop
 8003024:	e004      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
 8003028:	e002      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      break;   
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
    }
  } 
  
  return status; 
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	@ 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e159      	b.n	8003310 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800305c:	2201      	movs	r2, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	f040 8148 	bne.w	800330a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d005      	beq.n	8003092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800308e:	2b02      	cmp	r3, #2
 8003090:	d130      	bne.n	80030f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c8:	2201      	movs	r2, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 0201 	and.w	r2, r3, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d017      	beq.n	8003130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	2203      	movs	r2, #3
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d123      	bne.n	8003184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	08da      	lsrs	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3208      	adds	r2, #8
 8003144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	08da      	lsrs	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3208      	adds	r2, #8
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0203 	and.w	r2, r3, #3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a2 	beq.w	800330a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b57      	ldr	r3, [pc, #348]	@ (8003328 <HAL_GPIO_Init+0x2e8>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	4a56      	ldr	r2, [pc, #344]	@ (8003328 <HAL_GPIO_Init+0x2e8>)
 80031d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d6:	4b54      	ldr	r3, [pc, #336]	@ (8003328 <HAL_GPIO_Init+0x2e8>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031e2:	4a52      	ldr	r2, [pc, #328]	@ (800332c <HAL_GPIO_Init+0x2ec>)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3302      	adds	r3, #2
 80031ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a49      	ldr	r2, [pc, #292]	@ (8003330 <HAL_GPIO_Init+0x2f0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d019      	beq.n	8003242 <HAL_GPIO_Init+0x202>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a48      	ldr	r2, [pc, #288]	@ (8003334 <HAL_GPIO_Init+0x2f4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_GPIO_Init+0x1fe>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a47      	ldr	r2, [pc, #284]	@ (8003338 <HAL_GPIO_Init+0x2f8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00d      	beq.n	800323a <HAL_GPIO_Init+0x1fa>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a46      	ldr	r2, [pc, #280]	@ (800333c <HAL_GPIO_Init+0x2fc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <HAL_GPIO_Init+0x1f6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a45      	ldr	r2, [pc, #276]	@ (8003340 <HAL_GPIO_Init+0x300>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_GPIO_Init+0x1f2>
 800322e:	2304      	movs	r3, #4
 8003230:	e008      	b.n	8003244 <HAL_GPIO_Init+0x204>
 8003232:	2307      	movs	r3, #7
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x204>
 8003236:	2303      	movs	r3, #3
 8003238:	e004      	b.n	8003244 <HAL_GPIO_Init+0x204>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_Init+0x204>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x204>
 8003242:	2300      	movs	r3, #0
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	f002 0203 	and.w	r2, r2, #3
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003254:	4935      	ldr	r1, [pc, #212]	@ (800332c <HAL_GPIO_Init+0x2ec>)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003262:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <HAL_GPIO_Init+0x304>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003286:	4a2f      	ldr	r2, [pc, #188]	@ (8003344 <HAL_GPIO_Init+0x304>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800328c:	4b2d      	ldr	r3, [pc, #180]	@ (8003344 <HAL_GPIO_Init+0x304>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b0:	4a24      	ldr	r2, [pc, #144]	@ (8003344 <HAL_GPIO_Init+0x304>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032b6:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <HAL_GPIO_Init+0x304>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032da:	4a1a      	ldr	r2, [pc, #104]	@ (8003344 <HAL_GPIO_Init+0x304>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e0:	4b18      	ldr	r3, [pc, #96]	@ (8003344 <HAL_GPIO_Init+0x304>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003304:	4a0f      	ldr	r2, [pc, #60]	@ (8003344 <HAL_GPIO_Init+0x304>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b0f      	cmp	r3, #15
 8003314:	f67f aea2 	bls.w	800305c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	3724      	adds	r7, #36	@ 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40013800 	.word	0x40013800
 8003330:	40020000 	.word	0x40020000
 8003334:	40020400 	.word	0x40020400
 8003338:	40020800 	.word	0x40020800
 800333c:	40020c00 	.word	0x40020c00
 8003340:	40021000 	.word	0x40021000
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
 8003354:	4613      	mov	r3, r2
 8003356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003358:	787b      	ldrb	r3, [r7, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003364:	e003      	b.n	800336e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e267      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d075      	beq.n	8003486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800339a:	4b88      	ldr	r3, [pc, #544]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d00c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b85      	ldr	r3, [pc, #532]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d112      	bne.n	80033d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4b82      	ldr	r3, [pc, #520]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033be:	d10b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b7e      	ldr	r3, [pc, #504]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05b      	beq.n	8003484 <HAL_RCC_OscConfig+0x108>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d157      	bne.n	8003484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e242      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x74>
 80033e2:	4b76      	ldr	r3, [pc, #472]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a75      	ldr	r2, [pc, #468]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x98>
 80033fa:	4b70      	ldr	r3, [pc, #448]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6f      	ldr	r2, [pc, #444]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b6d      	ldr	r3, [pc, #436]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6c      	ldr	r2, [pc, #432]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 8003414:	4b69      	ldr	r3, [pc, #420]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a68      	ldr	r2, [pc, #416]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b66      	ldr	r3, [pc, #408]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a65      	ldr	r2, [pc, #404]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fbe2 	bl	8001bfc <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fbde 	bl	8001bfc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e207      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b5b      	ldr	r3, [pc, #364]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xc0>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fbce 	bl	8001bfc <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fbca 	bl	8001bfc <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1f3      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	4b51      	ldr	r3, [pc, #324]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0xe8>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d063      	beq.n	800355a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003492:	4b4a      	ldr	r3, [pc, #296]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b47      	ldr	r3, [pc, #284]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d11c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034aa:	4b44      	ldr	r3, [pc, #272]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d116      	bne.n	80034e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	4b41      	ldr	r3, [pc, #260]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_RCC_OscConfig+0x152>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e1c7      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ce:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4937      	ldr	r1, [pc, #220]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	e03a      	b.n	800355a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ec:	4b34      	ldr	r3, [pc, #208]	@ (80035c0 <HAL_RCC_OscConfig+0x244>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe fb83 	bl	8001bfc <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fe fb7f 	bl	8001bfc <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e1a8      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	4b2b      	ldr	r3, [pc, #172]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003518:	4b28      	ldr	r3, [pc, #160]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4925      	ldr	r1, [pc, #148]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	e015      	b.n	800355a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <HAL_RCC_OscConfig+0x244>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fb62 	bl	8001bfc <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353c:	f7fe fb5e 	bl	8001bfc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e187      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d036      	beq.n	80035d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356e:	4b15      	ldr	r3, [pc, #84]	@ (80035c4 <HAL_RCC_OscConfig+0x248>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fe fb42 	bl	8001bfc <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357c:	f7fe fb3e 	bl	8001bfc <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e167      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <HAL_RCC_OscConfig+0x240>)
 8003590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x200>
 800359a:	e01b      	b.n	80035d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359c:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_RCC_OscConfig+0x248>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a2:	f7fe fb2b 	bl	8001bfc <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	e00e      	b.n	80035c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe fb27 	bl	8001bfc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d907      	bls.n	80035c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e150      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
 80035bc:	40023800 	.word	0x40023800
 80035c0:	42470000 	.word	0x42470000
 80035c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b88      	ldr	r3, [pc, #544]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ea      	bne.n	80035aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8097 	beq.w	8003710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b81      	ldr	r3, [pc, #516]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	4b7d      	ldr	r3, [pc, #500]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	4a7c      	ldr	r2, [pc, #496]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	@ 0x40
 8003602:	4b7a      	ldr	r3, [pc, #488]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b77      	ldr	r3, [pc, #476]	@ (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b74      	ldr	r3, [pc, #464]	@ (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a73      	ldr	r2, [pc, #460]	@ (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fe fae7 	bl	8001bfc <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fe fae3 	bl	8001bfc <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e10c      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b6a      	ldr	r3, [pc, #424]	@ (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x2ea>
 8003658:	4b64      	ldr	r3, [pc, #400]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	4a63      	ldr	r2, [pc, #396]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	@ 0x70
 8003664:	e01c      	b.n	80036a0 <HAL_RCC_OscConfig+0x324>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b05      	cmp	r3, #5
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x30c>
 800366e:	4b5f      	ldr	r3, [pc, #380]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	4a5e      	ldr	r2, [pc, #376]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	6713      	str	r3, [r2, #112]	@ 0x70
 800367a:	4b5c      	ldr	r3, [pc, #368]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367e:	4a5b      	ldr	r2, [pc, #364]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6713      	str	r3, [r2, #112]	@ 0x70
 8003686:	e00b      	b.n	80036a0 <HAL_RCC_OscConfig+0x324>
 8003688:	4b58      	ldr	r3, [pc, #352]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	4a57      	ldr	r2, [pc, #348]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	6713      	str	r3, [r2, #112]	@ 0x70
 8003694:	4b55      	ldr	r3, [pc, #340]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003698:	4a54      	ldr	r2, [pc, #336]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800369a:	f023 0304 	bic.w	r3, r3, #4
 800369e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d015      	beq.n	80036d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe faa8 	bl	8001bfc <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe faa4 	bl	8001bfc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0cb      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	4b49      	ldr	r3, [pc, #292]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0ee      	beq.n	80036b0 <HAL_RCC_OscConfig+0x334>
 80036d2:	e014      	b.n	80036fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d4:	f7fe fa92 	bl	8001bfc <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe fa8e 	bl	8001bfc <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0b5      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f2:	4b3e      	ldr	r3, [pc, #248]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ee      	bne.n	80036dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b39      	ldr	r3, [pc, #228]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	4a38      	ldr	r2, [pc, #224]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80a1 	beq.w	800385c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800371a:	4b34      	ldr	r3, [pc, #208]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b08      	cmp	r3, #8
 8003724:	d05c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d141      	bne.n	80037b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <HAL_RCC_OscConfig+0x478>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fa62 	bl	8001bfc <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fa5e 	bl	8001bfc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e087      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	019b      	lsls	r3, r3, #6
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	3b01      	subs	r3, #1
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	491b      	ldr	r1, [pc, #108]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_RCC_OscConfig+0x478>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe fa37 	bl	8001bfc <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fa33 	bl	8001bfc <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e05c      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a4:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x416>
 80037b0:	e054      	b.n	800385c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b10      	ldr	r3, [pc, #64]	@ (80037f4 <HAL_RCC_OscConfig+0x478>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fa20 	bl	8001bfc <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fa1c 	bl	8001bfc <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e045      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_RCC_OscConfig+0x470>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x444>
 80037de:	e03d      	b.n	800385c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e038      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40007000 	.word	0x40007000
 80037f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <HAL_RCC_OscConfig+0x4ec>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d028      	beq.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d121      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d11a      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800382e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	4293      	cmp	r3, r2
 8003832:	d111      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	3b01      	subs	r3, #1
 8003842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0cc      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b68      	ldr	r3, [pc, #416]	@ (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d90c      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b65      	ldr	r3, [pc, #404]	@ (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b63      	ldr	r3, [pc, #396]	@ (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b8      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d020      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c0:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a58      	ldr	r2, [pc, #352]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d8:	4b53      	ldr	r3, [pc, #332]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a52      	ldr	r2, [pc, #328]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b50      	ldr	r3, [pc, #320]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	494d      	ldr	r1, [pc, #308]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d044      	beq.n	800398c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b47      	ldr	r3, [pc, #284]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d119      	bne.n	800394a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d003      	beq.n	800392a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003926:	2b03      	cmp	r3, #3
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e06f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e067      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394a:	4b37      	ldr	r3, [pc, #220]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4934      	ldr	r1, [pc, #208]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800395c:	f7fe f94e 	bl	8001bfc <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe f94a 	bl	8001bfc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e04f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 020c 	and.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	429a      	cmp	r2, r3
 800398a:	d1eb      	bne.n	8003964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800398c:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d20c      	bcs.n	80039b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b22      	ldr	r3, [pc, #136]	@ (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b20      	ldr	r3, [pc, #128]	@ (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e032      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c0:	4b19      	ldr	r3, [pc, #100]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4916      	ldr	r1, [pc, #88]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039de:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	490e      	ldr	r1, [pc, #56]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f2:	f000 f821 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	490a      	ldr	r1, [pc, #40]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	5ccb      	ldrb	r3, [r1, r3]
 8003a06:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0a:	4a09      	ldr	r2, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a0e:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe f8ae 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023c00 	.word	0x40023c00
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	0800a9a8 	.word	0x0800a9a8
 8003a30:	20000000 	.word	0x20000000
 8003a34:	20000004 	.word	0x20000004

08003a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b094      	sub	sp, #80	@ 0x50
 8003a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a50:	4b79      	ldr	r3, [pc, #484]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d00d      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	f200 80e1 	bhi.w	8003c24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x34>
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a6a:	e0db      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b73      	ldr	r3, [pc, #460]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a70:	e0db      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a72:	4b73      	ldr	r3, [pc, #460]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a76:	e0d8      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a78:	4b6f      	ldr	r3, [pc, #444]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a82:	4b6d      	ldr	r3, [pc, #436]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d063      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	2200      	movs	r2, #0
 8003a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aaa:	4622      	mov	r2, r4
 8003aac:	462b      	mov	r3, r5
 8003aae:	f04f 0000 	mov.w	r0, #0
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	0159      	lsls	r1, r3, #5
 8003ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003abc:	0150      	lsls	r0, r2, #5
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	1a51      	subs	r1, r2, r1
 8003ac6:	6139      	str	r1, [r7, #16]
 8003ac8:	4629      	mov	r1, r5
 8003aca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003adc:	4659      	mov	r1, fp
 8003ade:	018b      	lsls	r3, r1, #6
 8003ae0:	4651      	mov	r1, sl
 8003ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	018a      	lsls	r2, r1, #6
 8003aea:	4651      	mov	r1, sl
 8003aec:	ebb2 0801 	subs.w	r8, r2, r1
 8003af0:	4659      	mov	r1, fp
 8003af2:	eb63 0901 	sbc.w	r9, r3, r1
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b0a:	4690      	mov	r8, r2
 8003b0c:	4699      	mov	r9, r3
 8003b0e:	4623      	mov	r3, r4
 8003b10:	eb18 0303 	adds.w	r3, r8, r3
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	462b      	mov	r3, r5
 8003b18:	eb49 0303 	adc.w	r3, r9, r3
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	024b      	lsls	r3, r1, #9
 8003b2e:	4621      	mov	r1, r4
 8003b30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b34:	4621      	mov	r1, r4
 8003b36:	024a      	lsls	r2, r1, #9
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b3e:	2200      	movs	r2, #0
 8003b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b48:	f7fd f8a6 	bl	8000c98 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b54:	e058      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b38      	ldr	r3, [pc, #224]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	4611      	mov	r1, r2
 8003b62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b66:	623b      	str	r3, [r7, #32]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b70:	4642      	mov	r2, r8
 8003b72:	464b      	mov	r3, r9
 8003b74:	f04f 0000 	mov.w	r0, #0
 8003b78:	f04f 0100 	mov.w	r1, #0
 8003b7c:	0159      	lsls	r1, r3, #5
 8003b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b82:	0150      	lsls	r0, r2, #5
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4641      	mov	r1, r8
 8003b8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b8e:	4649      	mov	r1, r9
 8003b90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ba0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ba4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bac:	eb63 050b 	sbc.w	r5, r3, fp
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	00eb      	lsls	r3, r5, #3
 8003bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bbe:	00e2      	lsls	r2, r4, #3
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	4643      	mov	r3, r8
 8003bc6:	18e3      	adds	r3, r4, r3
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	464b      	mov	r3, r9
 8003bcc:	eb45 0303 	adc.w	r3, r5, r3
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bde:	4629      	mov	r1, r5
 8003be0:	028b      	lsls	r3, r1, #10
 8003be2:	4621      	mov	r1, r4
 8003be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be8:	4621      	mov	r1, r4
 8003bea:	028a      	lsls	r2, r1, #10
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	61fa      	str	r2, [r7, #28]
 8003bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bfc:	f7fd f84c 	bl	8000c98 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c08:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	3301      	adds	r3, #1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3750      	adds	r7, #80	@ 0x50
 8003c30:	46bd      	mov	sp, r7
 8003c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	007a1200 	.word	0x007a1200

08003c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000000 	.word	0x20000000

08003c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c60:	f7ff fff0 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	0a9b      	lsrs	r3, r3, #10
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4903      	ldr	r1, [pc, #12]	@ (8003c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	0800a9b8 	.word	0x0800a9b8

08003c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c88:	f7ff ffdc 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	0b5b      	lsrs	r3, r3, #13
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	@ (8003ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	0800a9b8 	.word	0x0800a9b8

08003cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e041      	b.n	8003d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd fd30 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f000 f950 	bl	8003f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d001      	beq.n	8003d64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e03c      	b.n	8003dde <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1e      	ldr	r2, [pc, #120]	@ (8003dec <HAL_TIM_Base_Start+0xa0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <HAL_TIM_Base_Start+0x5c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7e:	d013      	beq.n	8003da8 <HAL_TIM_Base_Start+0x5c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	@ (8003df0 <HAL_TIM_Base_Start+0xa4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_TIM_Base_Start+0x5c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	@ (8003df4 <HAL_TIM_Base_Start+0xa8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_TIM_Base_Start+0x5c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	@ (8003df8 <HAL_TIM_Base_Start+0xac>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_Base_Start+0x5c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a16      	ldr	r2, [pc, #88]	@ (8003dfc <HAL_TIM_Base_Start+0xb0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d010      	beq.n	8003ddc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	e007      	b.n	8003ddc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40014000 	.word	0x40014000

08003e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIM_ConfigClockSource+0x1c>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0b4      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x186>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e54:	d03e      	beq.n	8003ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e5a:	f200 8087 	bhi.w	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e62:	f000 8086 	beq.w	8003f72 <HAL_TIM_ConfigClockSource+0x172>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6a:	d87f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b70      	cmp	r3, #112	@ 0x70
 8003e6e:	d01a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e70:	2b70      	cmp	r3, #112	@ 0x70
 8003e72:	d87b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b60      	cmp	r3, #96	@ 0x60
 8003e76:	d050      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x11a>
 8003e78:	2b60      	cmp	r3, #96	@ 0x60
 8003e7a:	d877      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b50      	cmp	r3, #80	@ 0x50
 8003e7e:	d03c      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0xfa>
 8003e80:	2b50      	cmp	r3, #80	@ 0x50
 8003e82:	d873      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b40      	cmp	r3, #64	@ 0x40
 8003e86:	d058      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x13a>
 8003e88:	2b40      	cmp	r3, #64	@ 0x40
 8003e8a:	d86f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b30      	cmp	r3, #48	@ 0x30
 8003e8e:	d064      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d86b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d060      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d867      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05c      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d05a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	e062      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	f000 f971 	bl	800419c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	609a      	str	r2, [r3, #8]
      break;
 8003ed2:	e04f      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	f000 f95a 	bl	800419c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ef6:	609a      	str	r2, [r3, #8]
      break;
 8003ef8:	e03c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f06:	461a      	mov	r2, r3
 8003f08:	f000 f8ce 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2150      	movs	r1, #80	@ 0x50
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f927 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003f18:	e02c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f26:	461a      	mov	r2, r3
 8003f28:	f000 f8ed 	bl	8004106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2160      	movs	r1, #96	@ 0x60
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f917 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003f38:	e01c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 f8ae 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2140      	movs	r1, #64	@ 0x40
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f907 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003f58:	e00c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f000 f8fe 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e003      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f70:	e000      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a3a      	ldr	r2, [pc, #232]	@ (800408c <TIM_Base_SetConfig+0xfc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_Base_SetConfig+0x38>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0x38>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a37      	ldr	r2, [pc, #220]	@ (8004090 <TIM_Base_SetConfig+0x100>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a36      	ldr	r2, [pc, #216]	@ (8004094 <TIM_Base_SetConfig+0x104>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	@ (8004098 <TIM_Base_SetConfig+0x108>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800408c <TIM_Base_SetConfig+0xfc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01b      	beq.n	800401a <TIM_Base_SetConfig+0x8a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe8:	d017      	beq.n	800401a <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a28      	ldr	r2, [pc, #160]	@ (8004090 <TIM_Base_SetConfig+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <TIM_Base_SetConfig+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a27      	ldr	r2, [pc, #156]	@ (8004094 <TIM_Base_SetConfig+0x104>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00f      	beq.n	800401a <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	@ (8004098 <TIM_Base_SetConfig+0x108>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a25      	ldr	r2, [pc, #148]	@ (800409c <TIM_Base_SetConfig+0x10c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <TIM_Base_SetConfig+0x110>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a23      	ldr	r2, [pc, #140]	@ (80040a4 <TIM_Base_SetConfig+0x114>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d108      	bne.n	800402c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a0e      	ldr	r2, [pc, #56]	@ (800408c <TIM_Base_SetConfig+0xfc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	611a      	str	r2, [r3, #16]
  }
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800

080040a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 030a 	bic.w	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004106:	b480      	push	{r7}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 0210 	bic.w	r2, r3, #16
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004142:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	f043 0307 	orr.w	r3, r3, #7
 8004188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	431a      	orrs	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e050      	b.n	8004296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1c      	ldr	r2, [pc, #112]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d018      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004240:	d013      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a13      	ldr	r2, [pc, #76]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10c      	bne.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	4313      	orrs	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40014000 	.word	0x40014000

080042b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e042      	b.n	8004350 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fd fa4a 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	@ 0x24
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fdcb 	bl	8004e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08c      	sub	sp, #48	@ 0x30
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	d156      	bne.n	8004420 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_Transmit_DMA+0x26>
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e04f      	b.n	8004422 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2221      	movs	r2, #33	@ 0x21
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	4a21      	ldr	r2, [pc, #132]	@ (800442c <HAL_UART_Transmit_DMA+0xd4>)
 80043a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	4a20      	ldr	r2, [pc, #128]	@ (8004430 <HAL_UART_Transmit_DMA+0xd8>)
 80043b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <HAL_UART_Transmit_DMA+0xdc>)
 80043b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	2200      	movs	r2, #0
 80043c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3304      	adds	r3, #4
 80043d6:	461a      	mov	r2, r3
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	f7fe fadd 	bl	8002998 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	617b      	str	r3, [r7, #20]
   return(result);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004408:	627a      	str	r2, [r7, #36]	@ 0x24
 800440a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6a39      	ldr	r1, [r7, #32]
 800440e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	61fb      	str	r3, [r7, #28]
   return(result);
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3730      	adds	r7, #48	@ 0x30
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	080049c5 	.word	0x080049c5
 8004430:	08004a5f 	.word	0x08004a5f
 8004434:	08004a7b 	.word	0x08004a7b

08004438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b0ba      	sub	sp, #232	@ 0xe8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800445e:	2300      	movs	r3, #0
 8004460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004464:	2300      	movs	r3, #0
 8004466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800446a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_UART_IRQHandler+0x66>
 800448a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fc40 	bl	8004d1c <UART_Receive_IT>
      return;
 800449c:	e25b      	b.n	8004956 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800449e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80de 	beq.w	8004664 <HAL_UART_IRQHandler+0x22c>
 80044a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80d1 	beq.w	8004664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <HAL_UART_IRQHandler+0xae>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044de:	f043 0201 	orr.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <HAL_UART_IRQHandler+0xd2>
 80044f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f043 0202 	orr.w	r2, r3, #2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_UART_IRQHandler+0xf6>
 8004516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	f043 0204 	orr.w	r2, r3, #4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d011      	beq.n	800455e <HAL_UART_IRQHandler+0x126>
 800453a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	f043 0208 	orr.w	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 81f2 	beq.w	800494c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_UART_IRQHandler+0x14e>
 8004574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fbcb 	bl	8004d1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <HAL_UART_IRQHandler+0x17a>
 80045aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d04f      	beq.n	8004652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fad3 	bl	8004b5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c2:	2b40      	cmp	r3, #64	@ 0x40
 80045c4:	d141      	bne.n	800464a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3314      	adds	r3, #20
 80045ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800460a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1d9      	bne.n	80045c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d013      	beq.n	8004642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	4a7e      	ldr	r2, [pc, #504]	@ (8004818 <HAL_UART_IRQHandler+0x3e0>)
 8004620:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fa7e 	bl	8002b28 <HAL_DMA_Abort_IT>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800463c:	4610      	mov	r0, r2
 800463e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	e00e      	b.n	8004660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9a8 	bl	8004998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00a      	b.n	8004660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9a4 	bl	8004998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e006      	b.n	8004660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9a0 	bl	8004998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800465e:	e175      	b.n	800494c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	bf00      	nop
    return;
 8004662:	e173      	b.n	800494c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	2b01      	cmp	r3, #1
 800466a:	f040 814f 	bne.w	800490c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8148 	beq.w	800490c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8141 	beq.w	800490c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b40      	cmp	r3, #64	@ 0x40
 80046ac:	f040 80b6 	bne.w	800481c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8145 	beq.w	8004950 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046ce:	429a      	cmp	r2, r3
 80046d0:	f080 813e 	bcs.w	8004950 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e6:	f000 8088 	beq.w	80047fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800471a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004722:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800472e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1d9      	bne.n	80046ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3314      	adds	r3, #20
 800473c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3314      	adds	r3, #20
 8004756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800475a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800475e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800476c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e1      	bne.n	8004736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3314      	adds	r3, #20
 8004778:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3314      	adds	r3, #20
 8004792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004798:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800479c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e3      	bne.n	8004772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ca:	f023 0310 	bic.w	r3, r3, #16
 80047ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e3      	bne.n	80047b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe f927 	bl	8002a48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004808:	b29b      	uxth	r3, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	b29b      	uxth	r3, r3
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8cb 	bl	80049ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004816:	e09b      	b.n	8004950 <HAL_UART_IRQHandler+0x518>
 8004818:	08004c25 	.word	0x08004c25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004824:	b29b      	uxth	r3, r3
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 808e 	beq.w	8004954 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8089 	beq.w	8004954 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004866:	647a      	str	r2, [r7, #68]	@ 0x44
 8004868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800486c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e3      	bne.n	8004842 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3314      	adds	r3, #20
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	623b      	str	r3, [r7, #32]
   return(result);
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800489e:	633a      	str	r2, [r7, #48]	@ 0x30
 80048a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e3      	bne.n	800487a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0310 	bic.w	r3, r3, #16
 80048d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048e4:	61fa      	str	r2, [r7, #28]
 80048e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	69b9      	ldr	r1, [r7, #24]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	617b      	str	r3, [r7, #20]
   return(result);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e3      	bne.n	80048c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f851 	bl	80049ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800490a:	e023      	b.n	8004954 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_UART_IRQHandler+0x4f4>
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800491c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f991 	bl	8004c4c <UART_Transmit_IT>
    return;
 800492a:	e014      	b.n	8004956 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00e      	beq.n	8004956 <HAL_UART_IRQHandler+0x51e>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f9d1 	bl	8004cec <UART_EndTransmit_IT>
    return;
 800494a:	e004      	b.n	8004956 <HAL_UART_IRQHandler+0x51e>
    return;
 800494c:	bf00      	nop
 800494e:	e002      	b.n	8004956 <HAL_UART_IRQHandler+0x51e>
      return;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <HAL_UART_IRQHandler+0x51e>
      return;
 8004954:	bf00      	nop
  }
}
 8004956:	37e8      	adds	r7, #232	@ 0xe8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b090      	sub	sp, #64	@ 0x40
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d137      	bne.n	8004a50 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80049e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e2:	2200      	movs	r2, #0
 80049e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3314      	adds	r3, #20
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	623b      	str	r3, [r7, #32]
   return(result);
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a06:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e5      	bne.n	80049e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a3a:	61fa      	str	r2, [r7, #28]
 8004a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	69b9      	ldr	r1, [r7, #24]
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	617b      	str	r3, [r7, #20]
   return(result);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a4e:	e002      	b.n	8004a56 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004a50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004a52:	f7ff ff83 	bl	800495c <HAL_UART_TxCpltCallback>
}
 8004a56:	bf00      	nop
 8004a58:	3740      	adds	r7, #64	@ 0x40
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff ff7f 	bl	8004970 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	2b80      	cmp	r3, #128	@ 0x80
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b21      	cmp	r3, #33	@ 0x21
 8004aac:	d108      	bne.n	8004ac0 <UART_DMAError+0x46>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004aba:	68b8      	ldr	r0, [r7, #8]
 8004abc:	f000 f827 	bl	8004b0e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aca:	2b40      	cmp	r3, #64	@ 0x40
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b22      	cmp	r3, #34	@ 0x22
 8004ae0:	d108      	bne.n	8004af4 <UART_DMAError+0x7a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004aee:	68b8      	ldr	r0, [r7, #8]
 8004af0:	f000 f835 	bl	8004b5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af8:	f043 0210 	orr.w	r2, r3, #16
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f7ff ff49 	bl	8004998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b089      	sub	sp, #36	@ 0x24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	61ba      	str	r2, [r7, #24]
 8004b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	613b      	str	r3, [r7, #16]
   return(result);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004b52:	bf00      	nop
 8004b54:	3724      	adds	r7, #36	@ 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b095      	sub	sp, #84	@ 0x54
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b86:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e5      	bne.n	8004b66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3314      	adds	r3, #20
 8004bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d119      	bne.n	8004c0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	330c      	adds	r3, #12
 8004bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f023 0310 	bic.w	r3, r3, #16
 8004bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bf6:	61ba      	str	r2, [r7, #24]
 8004bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	613b      	str	r3, [r7, #16]
   return(result);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e5      	bne.n	8004bd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c18:	bf00      	nop
 8004c1a:	3754      	adds	r7, #84	@ 0x54
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff feaa 	bl	8004998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b21      	cmp	r3, #33	@ 0x21
 8004c5e:	d13e      	bne.n	8004cde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c68:	d114      	bne.n	8004c94 <UART_Transmit_IT+0x48>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d110      	bne.n	8004c94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]
 8004c92:	e008      	b.n	8004ca6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	1c59      	adds	r1, r3, #1
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6211      	str	r1, [r2, #32]
 8004c9e:	781a      	ldrb	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fe25 	bl	800495c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	@ 0x30
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b22      	cmp	r3, #34	@ 0x22
 8004d2e:	f040 80ae 	bne.w	8004e8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3a:	d117      	bne.n	8004d6c <UART_Receive_IT+0x50>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d113      	bne.n	8004d6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	1c9a      	adds	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d6a:	e026      	b.n	8004dba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d7e:	d007      	beq.n	8004d90 <UART_Receive_IT+0x74>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <UART_Receive_IT+0x82>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e008      	b.n	8004db0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d15d      	bne.n	8004e8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0220 	bic.w	r2, r2, #32
 8004ddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d135      	bne.n	8004e80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f023 0310 	bic.w	r3, r3, #16
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3a:	623a      	str	r2, [r7, #32]
 8004e3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	69f9      	ldr	r1, [r7, #28]
 8004e40:	6a3a      	ldr	r2, [r7, #32]
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e5      	bne.n	8004e1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d10a      	bne.n	8004e72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fd97 	bl	80049ac <HAL_UARTEx_RxEventCallback>
 8004e7e:	e002      	b.n	8004e86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fd7f 	bl	8004984 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e002      	b.n	8004e90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e000      	b.n	8004e90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
  }
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3730      	adds	r7, #48	@ 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e9c:	b0c0      	sub	sp, #256	@ 0x100
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	68d9      	ldr	r1, [r3, #12]
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	ea40 0301 	orr.w	r3, r0, r1
 8004ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ef0:	f021 010c 	bic.w	r1, r1, #12
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004efe:	430b      	orrs	r3, r1
 8004f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f12:	6999      	ldr	r1, [r3, #24]
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	ea40 0301 	orr.w	r3, r0, r1
 8004f1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b8f      	ldr	r3, [pc, #572]	@ (8005164 <UART_SetConfig+0x2cc>)
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d005      	beq.n	8004f38 <UART_SetConfig+0xa0>
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b8d      	ldr	r3, [pc, #564]	@ (8005168 <UART_SetConfig+0x2d0>)
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d104      	bne.n	8004f42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f38:	f7fe fea4 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 8004f3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f40:	e003      	b.n	8004f4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f42:	f7fe fe8b 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8004f46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f54:	f040 810c 	bne.w	8005170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	1891      	adds	r1, r2, r2
 8004f70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f72:	415b      	adcs	r3, r3
 8004f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	eb12 0801 	adds.w	r8, r2, r1
 8004f80:	4629      	mov	r1, r5
 8004f82:	eb43 0901 	adc.w	r9, r3, r1
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9a:	4690      	mov	r8, r2
 8004f9c:	4699      	mov	r9, r3
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	eb18 0303 	adds.w	r3, r8, r3
 8004fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	462b      	mov	r3, r5
 8004faa:	eb49 0303 	adc.w	r3, r9, r3
 8004fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	18db      	adds	r3, r3, r3
 8004fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fcc:	4613      	mov	r3, r2
 8004fce:	eb42 0303 	adc.w	r3, r2, r3
 8004fd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fdc:	f7fb fe5c 	bl	8000c98 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4b61      	ldr	r3, [pc, #388]	@ (800516c <UART_SetConfig+0x2d4>)
 8004fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	011c      	lsls	r4, r3, #4
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ff8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	1891      	adds	r1, r2, r2
 8005006:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005008:	415b      	adcs	r3, r3
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005010:	4641      	mov	r1, r8
 8005012:	eb12 0a01 	adds.w	sl, r2, r1
 8005016:	4649      	mov	r1, r9
 8005018:	eb43 0b01 	adc.w	fp, r3, r1
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800502c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005030:	4692      	mov	sl, r2
 8005032:	469b      	mov	fp, r3
 8005034:	4643      	mov	r3, r8
 8005036:	eb1a 0303 	adds.w	r3, sl, r3
 800503a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800503e:	464b      	mov	r3, r9
 8005040:	eb4b 0303 	adc.w	r3, fp, r3
 8005044:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005054:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800505c:	460b      	mov	r3, r1
 800505e:	18db      	adds	r3, r3, r3
 8005060:	643b      	str	r3, [r7, #64]	@ 0x40
 8005062:	4613      	mov	r3, r2
 8005064:	eb42 0303 	adc.w	r3, r2, r3
 8005068:	647b      	str	r3, [r7, #68]	@ 0x44
 800506a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800506e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005072:	f7fb fe11 	bl	8000c98 <__aeabi_uldivmod>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4611      	mov	r1, r2
 800507c:	4b3b      	ldr	r3, [pc, #236]	@ (800516c <UART_SetConfig+0x2d4>)
 800507e:	fba3 2301 	umull	r2, r3, r3, r1
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2264      	movs	r2, #100	@ 0x64
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	1acb      	subs	r3, r1, r3
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005092:	4b36      	ldr	r3, [pc, #216]	@ (800516c <UART_SetConfig+0x2d4>)
 8005094:	fba3 2302 	umull	r2, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050a0:	441c      	add	r4, r3
 80050a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	1891      	adds	r1, r2, r2
 80050ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050bc:	415b      	adcs	r3, r3
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050c4:	4641      	mov	r1, r8
 80050c6:	1851      	adds	r1, r2, r1
 80050c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80050ca:	4649      	mov	r1, r9
 80050cc:	414b      	adcs	r3, r1
 80050ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050dc:	4659      	mov	r1, fp
 80050de:	00cb      	lsls	r3, r1, #3
 80050e0:	4651      	mov	r1, sl
 80050e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e6:	4651      	mov	r1, sl
 80050e8:	00ca      	lsls	r2, r1, #3
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	4642      	mov	r2, r8
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050f8:	464b      	mov	r3, r9
 80050fa:	460a      	mov	r2, r1
 80050fc:	eb42 0303 	adc.w	r3, r2, r3
 8005100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005110:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005118:	460b      	mov	r3, r1
 800511a:	18db      	adds	r3, r3, r3
 800511c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800511e:	4613      	mov	r3, r2
 8005120:	eb42 0303 	adc.w	r3, r2, r3
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800512a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800512e:	f7fb fdb3 	bl	8000c98 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <UART_SetConfig+0x2d4>)
 8005138:	fba3 1302 	umull	r1, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	2164      	movs	r1, #100	@ 0x64
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	3332      	adds	r3, #50	@ 0x32
 800514a:	4a08      	ldr	r2, [pc, #32]	@ (800516c <UART_SetConfig+0x2d4>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f003 0207 	and.w	r2, r3, #7
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4422      	add	r2, r4
 800515e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005160:	e106      	b.n	8005370 <UART_SetConfig+0x4d8>
 8005162:	bf00      	nop
 8005164:	40011000 	.word	0x40011000
 8005168:	40011400 	.word	0x40011400
 800516c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005174:	2200      	movs	r2, #0
 8005176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800517a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800517e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005182:	4642      	mov	r2, r8
 8005184:	464b      	mov	r3, r9
 8005186:	1891      	adds	r1, r2, r2
 8005188:	6239      	str	r1, [r7, #32]
 800518a:	415b      	adcs	r3, r3
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
 800518e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005192:	4641      	mov	r1, r8
 8005194:	1854      	adds	r4, r2, r1
 8005196:	4649      	mov	r1, r9
 8005198:	eb43 0501 	adc.w	r5, r3, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	00eb      	lsls	r3, r5, #3
 80051a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051aa:	00e2      	lsls	r2, r4, #3
 80051ac:	4614      	mov	r4, r2
 80051ae:	461d      	mov	r5, r3
 80051b0:	4643      	mov	r3, r8
 80051b2:	18e3      	adds	r3, r4, r3
 80051b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051b8:	464b      	mov	r3, r9
 80051ba:	eb45 0303 	adc.w	r3, r5, r3
 80051be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051de:	4629      	mov	r1, r5
 80051e0:	008b      	lsls	r3, r1, #2
 80051e2:	4621      	mov	r1, r4
 80051e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e8:	4621      	mov	r1, r4
 80051ea:	008a      	lsls	r2, r1, #2
 80051ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051f0:	f7fb fd52 	bl	8000c98 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4b60      	ldr	r3, [pc, #384]	@ (800537c <UART_SetConfig+0x4e4>)
 80051fa:	fba3 2302 	umull	r2, r3, r3, r2
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	011c      	lsls	r4, r3, #4
 8005202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800520c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	61b9      	str	r1, [r7, #24]
 800521c:	415b      	adcs	r3, r3
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6139      	str	r1, [r7, #16]
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005258:	464b      	mov	r3, r9
 800525a:	460a      	mov	r2, r1
 800525c:	eb42 0303 	adc.w	r3, r2, r3
 8005260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800526e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800527c:	4649      	mov	r1, r9
 800527e:	008b      	lsls	r3, r1, #2
 8005280:	4641      	mov	r1, r8
 8005282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005286:	4641      	mov	r1, r8
 8005288:	008a      	lsls	r2, r1, #2
 800528a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800528e:	f7fb fd03 	bl	8000c98 <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4611      	mov	r1, r2
 8005298:	4b38      	ldr	r3, [pc, #224]	@ (800537c <UART_SetConfig+0x4e4>)
 800529a:	fba3 2301 	umull	r2, r3, r3, r1
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2264      	movs	r2, #100	@ 0x64
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	1acb      	subs	r3, r1, r3
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	3332      	adds	r3, #50	@ 0x32
 80052ac:	4a33      	ldr	r2, [pc, #204]	@ (800537c <UART_SetConfig+0x4e4>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052b8:	441c      	add	r4, r3
 80052ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052be:	2200      	movs	r2, #0
 80052c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80052c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80052c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052c8:	4642      	mov	r2, r8
 80052ca:	464b      	mov	r3, r9
 80052cc:	1891      	adds	r1, r2, r2
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	415b      	adcs	r3, r3
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052d8:	4641      	mov	r1, r8
 80052da:	1851      	adds	r1, r2, r1
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	4649      	mov	r1, r9
 80052e0:	414b      	adcs	r3, r1
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052f0:	4659      	mov	r1, fp
 80052f2:	00cb      	lsls	r3, r1, #3
 80052f4:	4651      	mov	r1, sl
 80052f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052fa:	4651      	mov	r1, sl
 80052fc:	00ca      	lsls	r2, r1, #3
 80052fe:	4610      	mov	r0, r2
 8005300:	4619      	mov	r1, r3
 8005302:	4603      	mov	r3, r0
 8005304:	4642      	mov	r2, r8
 8005306:	189b      	adds	r3, r3, r2
 8005308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800530a:	464b      	mov	r3, r9
 800530c:	460a      	mov	r2, r1
 800530e:	eb42 0303 	adc.w	r3, r2, r3
 8005312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	663b      	str	r3, [r7, #96]	@ 0x60
 800531e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800532c:	4649      	mov	r1, r9
 800532e:	008b      	lsls	r3, r1, #2
 8005330:	4641      	mov	r1, r8
 8005332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005336:	4641      	mov	r1, r8
 8005338:	008a      	lsls	r2, r1, #2
 800533a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800533e:	f7fb fcab 	bl	8000c98 <__aeabi_uldivmod>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <UART_SetConfig+0x4e4>)
 8005348:	fba3 1302 	umull	r1, r3, r3, r2
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	2164      	movs	r1, #100	@ 0x64
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	3332      	adds	r3, #50	@ 0x32
 800535a:	4a08      	ldr	r2, [pc, #32]	@ (800537c <UART_SetConfig+0x4e4>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4422      	add	r2, r4
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005376:	46bd      	mov	sp, r7
 8005378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537c:	51eb851f 	.word	0x51eb851f

08005380 <__cvt>:
 8005380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	ec57 6b10 	vmov	r6, r7, d0
 8005388:	2f00      	cmp	r7, #0
 800538a:	460c      	mov	r4, r1
 800538c:	4619      	mov	r1, r3
 800538e:	463b      	mov	r3, r7
 8005390:	bfbb      	ittet	lt
 8005392:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005396:	461f      	movlt	r7, r3
 8005398:	2300      	movge	r3, #0
 800539a:	232d      	movlt	r3, #45	@ 0x2d
 800539c:	700b      	strb	r3, [r1, #0]
 800539e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80053a4:	4691      	mov	r9, r2
 80053a6:	f023 0820 	bic.w	r8, r3, #32
 80053aa:	bfbc      	itt	lt
 80053ac:	4632      	movlt	r2, r6
 80053ae:	4616      	movlt	r6, r2
 80053b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053b4:	d005      	beq.n	80053c2 <__cvt+0x42>
 80053b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053ba:	d100      	bne.n	80053be <__cvt+0x3e>
 80053bc:	3401      	adds	r4, #1
 80053be:	2102      	movs	r1, #2
 80053c0:	e000      	b.n	80053c4 <__cvt+0x44>
 80053c2:	2103      	movs	r1, #3
 80053c4:	ab03      	add	r3, sp, #12
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	ab02      	add	r3, sp, #8
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	ec47 6b10 	vmov	d0, r6, r7
 80053d0:	4653      	mov	r3, sl
 80053d2:	4622      	mov	r2, r4
 80053d4:	f001 f8a8 	bl	8006528 <_dtoa_r>
 80053d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053dc:	4605      	mov	r5, r0
 80053de:	d119      	bne.n	8005414 <__cvt+0x94>
 80053e0:	f019 0f01 	tst.w	r9, #1
 80053e4:	d00e      	beq.n	8005404 <__cvt+0x84>
 80053e6:	eb00 0904 	add.w	r9, r0, r4
 80053ea:	2200      	movs	r2, #0
 80053ec:	2300      	movs	r3, #0
 80053ee:	4630      	mov	r0, r6
 80053f0:	4639      	mov	r1, r7
 80053f2:	f7fb fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 80053f6:	b108      	cbz	r0, 80053fc <__cvt+0x7c>
 80053f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80053fc:	2230      	movs	r2, #48	@ 0x30
 80053fe:	9b03      	ldr	r3, [sp, #12]
 8005400:	454b      	cmp	r3, r9
 8005402:	d31e      	bcc.n	8005442 <__cvt+0xc2>
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005408:	1b5b      	subs	r3, r3, r5
 800540a:	4628      	mov	r0, r5
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	b004      	add	sp, #16
 8005410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005414:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005418:	eb00 0904 	add.w	r9, r0, r4
 800541c:	d1e5      	bne.n	80053ea <__cvt+0x6a>
 800541e:	7803      	ldrb	r3, [r0, #0]
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d10a      	bne.n	800543a <__cvt+0xba>
 8005424:	2200      	movs	r2, #0
 8005426:	2300      	movs	r3, #0
 8005428:	4630      	mov	r0, r6
 800542a:	4639      	mov	r1, r7
 800542c:	f7fb fb54 	bl	8000ad8 <__aeabi_dcmpeq>
 8005430:	b918      	cbnz	r0, 800543a <__cvt+0xba>
 8005432:	f1c4 0401 	rsb	r4, r4, #1
 8005436:	f8ca 4000 	str.w	r4, [sl]
 800543a:	f8da 3000 	ldr.w	r3, [sl]
 800543e:	4499      	add	r9, r3
 8005440:	e7d3      	b.n	80053ea <__cvt+0x6a>
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	9103      	str	r1, [sp, #12]
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e7d9      	b.n	80053fe <__cvt+0x7e>

0800544a <__exponent>:
 800544a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800544c:	2900      	cmp	r1, #0
 800544e:	bfba      	itte	lt
 8005450:	4249      	neglt	r1, r1
 8005452:	232d      	movlt	r3, #45	@ 0x2d
 8005454:	232b      	movge	r3, #43	@ 0x2b
 8005456:	2909      	cmp	r1, #9
 8005458:	7002      	strb	r2, [r0, #0]
 800545a:	7043      	strb	r3, [r0, #1]
 800545c:	dd29      	ble.n	80054b2 <__exponent+0x68>
 800545e:	f10d 0307 	add.w	r3, sp, #7
 8005462:	461d      	mov	r5, r3
 8005464:	270a      	movs	r7, #10
 8005466:	461a      	mov	r2, r3
 8005468:	fbb1 f6f7 	udiv	r6, r1, r7
 800546c:	fb07 1416 	mls	r4, r7, r6, r1
 8005470:	3430      	adds	r4, #48	@ 0x30
 8005472:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005476:	460c      	mov	r4, r1
 8005478:	2c63      	cmp	r4, #99	@ 0x63
 800547a:	f103 33ff 	add.w	r3, r3, #4294967295
 800547e:	4631      	mov	r1, r6
 8005480:	dcf1      	bgt.n	8005466 <__exponent+0x1c>
 8005482:	3130      	adds	r1, #48	@ 0x30
 8005484:	1e94      	subs	r4, r2, #2
 8005486:	f803 1c01 	strb.w	r1, [r3, #-1]
 800548a:	1c41      	adds	r1, r0, #1
 800548c:	4623      	mov	r3, r4
 800548e:	42ab      	cmp	r3, r5
 8005490:	d30a      	bcc.n	80054a8 <__exponent+0x5e>
 8005492:	f10d 0309 	add.w	r3, sp, #9
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	42ac      	cmp	r4, r5
 800549a:	bf88      	it	hi
 800549c:	2300      	movhi	r3, #0
 800549e:	3302      	adds	r3, #2
 80054a0:	4403      	add	r3, r0
 80054a2:	1a18      	subs	r0, r3, r0
 80054a4:	b003      	add	sp, #12
 80054a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054b0:	e7ed      	b.n	800548e <__exponent+0x44>
 80054b2:	2330      	movs	r3, #48	@ 0x30
 80054b4:	3130      	adds	r1, #48	@ 0x30
 80054b6:	7083      	strb	r3, [r0, #2]
 80054b8:	70c1      	strb	r1, [r0, #3]
 80054ba:	1d03      	adds	r3, r0, #4
 80054bc:	e7f1      	b.n	80054a2 <__exponent+0x58>
	...

080054c0 <_printf_float>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	b08d      	sub	sp, #52	@ 0x34
 80054c6:	460c      	mov	r4, r1
 80054c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80054cc:	4616      	mov	r6, r2
 80054ce:	461f      	mov	r7, r3
 80054d0:	4605      	mov	r5, r0
 80054d2:	f000 ff23 	bl	800631c <_localeconv_r>
 80054d6:	6803      	ldr	r3, [r0, #0]
 80054d8:	9304      	str	r3, [sp, #16]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fa fed0 	bl	8000280 <strlen>
 80054e0:	2300      	movs	r3, #0
 80054e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80054e4:	f8d8 3000 	ldr.w	r3, [r8]
 80054e8:	9005      	str	r0, [sp, #20]
 80054ea:	3307      	adds	r3, #7
 80054ec:	f023 0307 	bic.w	r3, r3, #7
 80054f0:	f103 0208 	add.w	r2, r3, #8
 80054f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054f8:	f8d4 b000 	ldr.w	fp, [r4]
 80054fc:	f8c8 2000 	str.w	r2, [r8]
 8005500:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005504:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005508:	9307      	str	r3, [sp, #28]
 800550a:	f8cd 8018 	str.w	r8, [sp, #24]
 800550e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005516:	4b9c      	ldr	r3, [pc, #624]	@ (8005788 <_printf_float+0x2c8>)
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	f7fb fb0e 	bl	8000b3c <__aeabi_dcmpun>
 8005520:	bb70      	cbnz	r0, 8005580 <_printf_float+0xc0>
 8005522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005526:	4b98      	ldr	r3, [pc, #608]	@ (8005788 <_printf_float+0x2c8>)
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	f7fb fae8 	bl	8000b00 <__aeabi_dcmple>
 8005530:	bb30      	cbnz	r0, 8005580 <_printf_float+0xc0>
 8005532:	2200      	movs	r2, #0
 8005534:	2300      	movs	r3, #0
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f7fb fad7 	bl	8000aec <__aeabi_dcmplt>
 800553e:	b110      	cbz	r0, 8005546 <_printf_float+0x86>
 8005540:	232d      	movs	r3, #45	@ 0x2d
 8005542:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005546:	4a91      	ldr	r2, [pc, #580]	@ (800578c <_printf_float+0x2cc>)
 8005548:	4b91      	ldr	r3, [pc, #580]	@ (8005790 <_printf_float+0x2d0>)
 800554a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800554e:	bf94      	ite	ls
 8005550:	4690      	movls	r8, r2
 8005552:	4698      	movhi	r8, r3
 8005554:	2303      	movs	r3, #3
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	f02b 0304 	bic.w	r3, fp, #4
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	f04f 0900 	mov.w	r9, #0
 8005562:	9700      	str	r7, [sp, #0]
 8005564:	4633      	mov	r3, r6
 8005566:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005568:	4621      	mov	r1, r4
 800556a:	4628      	mov	r0, r5
 800556c:	f000 f9d2 	bl	8005914 <_printf_common>
 8005570:	3001      	adds	r0, #1
 8005572:	f040 808d 	bne.w	8005690 <_printf_float+0x1d0>
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	b00d      	add	sp, #52	@ 0x34
 800557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	4640      	mov	r0, r8
 8005586:	4649      	mov	r1, r9
 8005588:	f7fb fad8 	bl	8000b3c <__aeabi_dcmpun>
 800558c:	b140      	cbz	r0, 80055a0 <_printf_float+0xe0>
 800558e:	464b      	mov	r3, r9
 8005590:	2b00      	cmp	r3, #0
 8005592:	bfbc      	itt	lt
 8005594:	232d      	movlt	r3, #45	@ 0x2d
 8005596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800559a:	4a7e      	ldr	r2, [pc, #504]	@ (8005794 <_printf_float+0x2d4>)
 800559c:	4b7e      	ldr	r3, [pc, #504]	@ (8005798 <_printf_float+0x2d8>)
 800559e:	e7d4      	b.n	800554a <_printf_float+0x8a>
 80055a0:	6863      	ldr	r3, [r4, #4]
 80055a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80055a6:	9206      	str	r2, [sp, #24]
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	d13b      	bne.n	8005624 <_printf_float+0x164>
 80055ac:	2306      	movs	r3, #6
 80055ae:	6063      	str	r3, [r4, #4]
 80055b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80055b4:	2300      	movs	r3, #0
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	9303      	str	r3, [sp, #12]
 80055ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80055bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80055c0:	ab09      	add	r3, sp, #36	@ 0x24
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	6861      	ldr	r1, [r4, #4]
 80055c6:	ec49 8b10 	vmov	d0, r8, r9
 80055ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80055ce:	4628      	mov	r0, r5
 80055d0:	f7ff fed6 	bl	8005380 <__cvt>
 80055d4:	9b06      	ldr	r3, [sp, #24]
 80055d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055d8:	2b47      	cmp	r3, #71	@ 0x47
 80055da:	4680      	mov	r8, r0
 80055dc:	d129      	bne.n	8005632 <_printf_float+0x172>
 80055de:	1cc8      	adds	r0, r1, #3
 80055e0:	db02      	blt.n	80055e8 <_printf_float+0x128>
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	4299      	cmp	r1, r3
 80055e6:	dd41      	ble.n	800566c <_printf_float+0x1ac>
 80055e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80055ec:	fa5f fa8a 	uxtb.w	sl, sl
 80055f0:	3901      	subs	r1, #1
 80055f2:	4652      	mov	r2, sl
 80055f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80055f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80055fa:	f7ff ff26 	bl	800544a <__exponent>
 80055fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005600:	1813      	adds	r3, r2, r0
 8005602:	2a01      	cmp	r2, #1
 8005604:	4681      	mov	r9, r0
 8005606:	6123      	str	r3, [r4, #16]
 8005608:	dc02      	bgt.n	8005610 <_printf_float+0x150>
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	07d2      	lsls	r2, r2, #31
 800560e:	d501      	bpl.n	8005614 <_printf_float+0x154>
 8005610:	3301      	adds	r3, #1
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0a2      	beq.n	8005562 <_printf_float+0xa2>
 800561c:	232d      	movs	r3, #45	@ 0x2d
 800561e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005622:	e79e      	b.n	8005562 <_printf_float+0xa2>
 8005624:	9a06      	ldr	r2, [sp, #24]
 8005626:	2a47      	cmp	r2, #71	@ 0x47
 8005628:	d1c2      	bne.n	80055b0 <_printf_float+0xf0>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1c0      	bne.n	80055b0 <_printf_float+0xf0>
 800562e:	2301      	movs	r3, #1
 8005630:	e7bd      	b.n	80055ae <_printf_float+0xee>
 8005632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005636:	d9db      	bls.n	80055f0 <_printf_float+0x130>
 8005638:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800563c:	d118      	bne.n	8005670 <_printf_float+0x1b0>
 800563e:	2900      	cmp	r1, #0
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	dd0b      	ble.n	800565c <_printf_float+0x19c>
 8005644:	6121      	str	r1, [r4, #16]
 8005646:	b913      	cbnz	r3, 800564e <_printf_float+0x18e>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	07d0      	lsls	r0, r2, #31
 800564c:	d502      	bpl.n	8005654 <_printf_float+0x194>
 800564e:	3301      	adds	r3, #1
 8005650:	440b      	add	r3, r1
 8005652:	6123      	str	r3, [r4, #16]
 8005654:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005656:	f04f 0900 	mov.w	r9, #0
 800565a:	e7db      	b.n	8005614 <_printf_float+0x154>
 800565c:	b913      	cbnz	r3, 8005664 <_printf_float+0x1a4>
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	07d2      	lsls	r2, r2, #31
 8005662:	d501      	bpl.n	8005668 <_printf_float+0x1a8>
 8005664:	3302      	adds	r3, #2
 8005666:	e7f4      	b.n	8005652 <_printf_float+0x192>
 8005668:	2301      	movs	r3, #1
 800566a:	e7f2      	b.n	8005652 <_printf_float+0x192>
 800566c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005672:	4299      	cmp	r1, r3
 8005674:	db05      	blt.n	8005682 <_printf_float+0x1c2>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	6121      	str	r1, [r4, #16]
 800567a:	07d8      	lsls	r0, r3, #31
 800567c:	d5ea      	bpl.n	8005654 <_printf_float+0x194>
 800567e:	1c4b      	adds	r3, r1, #1
 8005680:	e7e7      	b.n	8005652 <_printf_float+0x192>
 8005682:	2900      	cmp	r1, #0
 8005684:	bfd4      	ite	le
 8005686:	f1c1 0202 	rsble	r2, r1, #2
 800568a:	2201      	movgt	r2, #1
 800568c:	4413      	add	r3, r2
 800568e:	e7e0      	b.n	8005652 <_printf_float+0x192>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	055a      	lsls	r2, r3, #21
 8005694:	d407      	bmi.n	80056a6 <_printf_float+0x1e6>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	4642      	mov	r2, r8
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	d12b      	bne.n	80056fc <_printf_float+0x23c>
 80056a4:	e767      	b.n	8005576 <_printf_float+0xb6>
 80056a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056aa:	f240 80dd 	bls.w	8005868 <_printf_float+0x3a8>
 80056ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056b2:	2200      	movs	r2, #0
 80056b4:	2300      	movs	r3, #0
 80056b6:	f7fb fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d033      	beq.n	8005726 <_printf_float+0x266>
 80056be:	4a37      	ldr	r2, [pc, #220]	@ (800579c <_printf_float+0x2dc>)
 80056c0:	2301      	movs	r3, #1
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f af54 	beq.w	8005576 <_printf_float+0xb6>
 80056ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80056d2:	4543      	cmp	r3, r8
 80056d4:	db02      	blt.n	80056dc <_printf_float+0x21c>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	07d8      	lsls	r0, r3, #31
 80056da:	d50f      	bpl.n	80056fc <_printf_float+0x23c>
 80056dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f af45 	beq.w	8005576 <_printf_float+0xb6>
 80056ec:	f04f 0900 	mov.w	r9, #0
 80056f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80056f4:	f104 0a1a 	add.w	sl, r4, #26
 80056f8:	45c8      	cmp	r8, r9
 80056fa:	dc09      	bgt.n	8005710 <_printf_float+0x250>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	079b      	lsls	r3, r3, #30
 8005700:	f100 8103 	bmi.w	800590a <_printf_float+0x44a>
 8005704:	68e0      	ldr	r0, [r4, #12]
 8005706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005708:	4298      	cmp	r0, r3
 800570a:	bfb8      	it	lt
 800570c:	4618      	movlt	r0, r3
 800570e:	e734      	b.n	800557a <_printf_float+0xba>
 8005710:	2301      	movs	r3, #1
 8005712:	4652      	mov	r2, sl
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	f43f af2b 	beq.w	8005576 <_printf_float+0xb6>
 8005720:	f109 0901 	add.w	r9, r9, #1
 8005724:	e7e8      	b.n	80056f8 <_printf_float+0x238>
 8005726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	dc39      	bgt.n	80057a0 <_printf_float+0x2e0>
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <_printf_float+0x2dc>)
 800572e:	2301      	movs	r3, #1
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	f43f af1d 	beq.w	8005576 <_printf_float+0xb6>
 800573c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005740:	ea59 0303 	orrs.w	r3, r9, r3
 8005744:	d102      	bne.n	800574c <_printf_float+0x28c>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	07d9      	lsls	r1, r3, #31
 800574a:	d5d7      	bpl.n	80056fc <_printf_float+0x23c>
 800574c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	f43f af0d 	beq.w	8005576 <_printf_float+0xb6>
 800575c:	f04f 0a00 	mov.w	sl, #0
 8005760:	f104 0b1a 	add.w	fp, r4, #26
 8005764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005766:	425b      	negs	r3, r3
 8005768:	4553      	cmp	r3, sl
 800576a:	dc01      	bgt.n	8005770 <_printf_float+0x2b0>
 800576c:	464b      	mov	r3, r9
 800576e:	e793      	b.n	8005698 <_printf_float+0x1d8>
 8005770:	2301      	movs	r3, #1
 8005772:	465a      	mov	r2, fp
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	f43f aefb 	beq.w	8005576 <_printf_float+0xb6>
 8005780:	f10a 0a01 	add.w	sl, sl, #1
 8005784:	e7ee      	b.n	8005764 <_printf_float+0x2a4>
 8005786:	bf00      	nop
 8005788:	7fefffff 	.word	0x7fefffff
 800578c:	0800a9c8 	.word	0x0800a9c8
 8005790:	0800a9cc 	.word	0x0800a9cc
 8005794:	0800a9d0 	.word	0x0800a9d0
 8005798:	0800a9d4 	.word	0x0800a9d4
 800579c:	0800a9d8 	.word	0x0800a9d8
 80057a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057a6:	4553      	cmp	r3, sl
 80057a8:	bfa8      	it	ge
 80057aa:	4653      	movge	r3, sl
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	4699      	mov	r9, r3
 80057b0:	dc36      	bgt.n	8005820 <_printf_float+0x360>
 80057b2:	f04f 0b00 	mov.w	fp, #0
 80057b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ba:	f104 021a 	add.w	r2, r4, #26
 80057be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057c0:	9306      	str	r3, [sp, #24]
 80057c2:	eba3 0309 	sub.w	r3, r3, r9
 80057c6:	455b      	cmp	r3, fp
 80057c8:	dc31      	bgt.n	800582e <_printf_float+0x36e>
 80057ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057cc:	459a      	cmp	sl, r3
 80057ce:	dc3a      	bgt.n	8005846 <_printf_float+0x386>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	07da      	lsls	r2, r3, #31
 80057d4:	d437      	bmi.n	8005846 <_printf_float+0x386>
 80057d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d8:	ebaa 0903 	sub.w	r9, sl, r3
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	ebaa 0303 	sub.w	r3, sl, r3
 80057e2:	4599      	cmp	r9, r3
 80057e4:	bfa8      	it	ge
 80057e6:	4699      	movge	r9, r3
 80057e8:	f1b9 0f00 	cmp.w	r9, #0
 80057ec:	dc33      	bgt.n	8005856 <_printf_float+0x396>
 80057ee:	f04f 0800 	mov.w	r8, #0
 80057f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057f6:	f104 0b1a 	add.w	fp, r4, #26
 80057fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fc:	ebaa 0303 	sub.w	r3, sl, r3
 8005800:	eba3 0309 	sub.w	r3, r3, r9
 8005804:	4543      	cmp	r3, r8
 8005806:	f77f af79 	ble.w	80056fc <_printf_float+0x23c>
 800580a:	2301      	movs	r3, #1
 800580c:	465a      	mov	r2, fp
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	f43f aeae 	beq.w	8005576 <_printf_float+0xb6>
 800581a:	f108 0801 	add.w	r8, r8, #1
 800581e:	e7ec      	b.n	80057fa <_printf_float+0x33a>
 8005820:	4642      	mov	r2, r8
 8005822:	4631      	mov	r1, r6
 8005824:	4628      	mov	r0, r5
 8005826:	47b8      	blx	r7
 8005828:	3001      	adds	r0, #1
 800582a:	d1c2      	bne.n	80057b2 <_printf_float+0x2f2>
 800582c:	e6a3      	b.n	8005576 <_printf_float+0xb6>
 800582e:	2301      	movs	r3, #1
 8005830:	4631      	mov	r1, r6
 8005832:	4628      	mov	r0, r5
 8005834:	9206      	str	r2, [sp, #24]
 8005836:	47b8      	blx	r7
 8005838:	3001      	adds	r0, #1
 800583a:	f43f ae9c 	beq.w	8005576 <_printf_float+0xb6>
 800583e:	9a06      	ldr	r2, [sp, #24]
 8005840:	f10b 0b01 	add.w	fp, fp, #1
 8005844:	e7bb      	b.n	80057be <_printf_float+0x2fe>
 8005846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	d1c0      	bne.n	80057d6 <_printf_float+0x316>
 8005854:	e68f      	b.n	8005576 <_printf_float+0xb6>
 8005856:	9a06      	ldr	r2, [sp, #24]
 8005858:	464b      	mov	r3, r9
 800585a:	4442      	add	r2, r8
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	d1c3      	bne.n	80057ee <_printf_float+0x32e>
 8005866:	e686      	b.n	8005576 <_printf_float+0xb6>
 8005868:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800586c:	f1ba 0f01 	cmp.w	sl, #1
 8005870:	dc01      	bgt.n	8005876 <_printf_float+0x3b6>
 8005872:	07db      	lsls	r3, r3, #31
 8005874:	d536      	bpl.n	80058e4 <_printf_float+0x424>
 8005876:	2301      	movs	r3, #1
 8005878:	4642      	mov	r2, r8
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f ae78 	beq.w	8005576 <_printf_float+0xb6>
 8005886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800588a:	4631      	mov	r1, r6
 800588c:	4628      	mov	r0, r5
 800588e:	47b8      	blx	r7
 8005890:	3001      	adds	r0, #1
 8005892:	f43f ae70 	beq.w	8005576 <_printf_float+0xb6>
 8005896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800589a:	2200      	movs	r2, #0
 800589c:	2300      	movs	r3, #0
 800589e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058a2:	f7fb f919 	bl	8000ad8 <__aeabi_dcmpeq>
 80058a6:	b9c0      	cbnz	r0, 80058da <_printf_float+0x41a>
 80058a8:	4653      	mov	r3, sl
 80058aa:	f108 0201 	add.w	r2, r8, #1
 80058ae:	4631      	mov	r1, r6
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	d10c      	bne.n	80058d2 <_printf_float+0x412>
 80058b8:	e65d      	b.n	8005576 <_printf_float+0xb6>
 80058ba:	2301      	movs	r3, #1
 80058bc:	465a      	mov	r2, fp
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	f43f ae56 	beq.w	8005576 <_printf_float+0xb6>
 80058ca:	f108 0801 	add.w	r8, r8, #1
 80058ce:	45d0      	cmp	r8, sl
 80058d0:	dbf3      	blt.n	80058ba <_printf_float+0x3fa>
 80058d2:	464b      	mov	r3, r9
 80058d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058d8:	e6df      	b.n	800569a <_printf_float+0x1da>
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	f104 0b1a 	add.w	fp, r4, #26
 80058e2:	e7f4      	b.n	80058ce <_printf_float+0x40e>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4642      	mov	r2, r8
 80058e8:	e7e1      	b.n	80058ae <_printf_float+0x3ee>
 80058ea:	2301      	movs	r3, #1
 80058ec:	464a      	mov	r2, r9
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	f43f ae3e 	beq.w	8005576 <_printf_float+0xb6>
 80058fa:	f108 0801 	add.w	r8, r8, #1
 80058fe:	68e3      	ldr	r3, [r4, #12]
 8005900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005902:	1a5b      	subs	r3, r3, r1
 8005904:	4543      	cmp	r3, r8
 8005906:	dcf0      	bgt.n	80058ea <_printf_float+0x42a>
 8005908:	e6fc      	b.n	8005704 <_printf_float+0x244>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	f104 0919 	add.w	r9, r4, #25
 8005912:	e7f4      	b.n	80058fe <_printf_float+0x43e>

08005914 <_printf_common>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	4616      	mov	r6, r2
 800591a:	4698      	mov	r8, r3
 800591c:	688a      	ldr	r2, [r1, #8]
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005924:	4293      	cmp	r3, r2
 8005926:	bfb8      	it	lt
 8005928:	4613      	movlt	r3, r2
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005930:	4607      	mov	r7, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b10a      	cbz	r2, 800593a <_printf_common+0x26>
 8005936:	3301      	adds	r3, #1
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	6833      	ldrmi	r3, [r6, #0]
 8005942:	3302      	addmi	r3, #2
 8005944:	6033      	strmi	r3, [r6, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	f015 0506 	ands.w	r5, r5, #6
 800594c:	d106      	bne.n	800595c <_printf_common+0x48>
 800594e:	f104 0a19 	add.w	sl, r4, #25
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	42ab      	cmp	r3, r5
 800595a:	dc26      	bgt.n	80059aa <_printf_common+0x96>
 800595c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	3b00      	subs	r3, #0
 8005964:	bf18      	it	ne
 8005966:	2301      	movne	r3, #1
 8005968:	0692      	lsls	r2, r2, #26
 800596a:	d42b      	bmi.n	80059c4 <_printf_common+0xb0>
 800596c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005970:	4641      	mov	r1, r8
 8005972:	4638      	mov	r0, r7
 8005974:	47c8      	blx	r9
 8005976:	3001      	adds	r0, #1
 8005978:	d01e      	beq.n	80059b8 <_printf_common+0xa4>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	6922      	ldr	r2, [r4, #16]
 800597e:	f003 0306 	and.w	r3, r3, #6
 8005982:	2b04      	cmp	r3, #4
 8005984:	bf02      	ittt	eq
 8005986:	68e5      	ldreq	r5, [r4, #12]
 8005988:	6833      	ldreq	r3, [r6, #0]
 800598a:	1aed      	subeq	r5, r5, r3
 800598c:	68a3      	ldr	r3, [r4, #8]
 800598e:	bf0c      	ite	eq
 8005990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005994:	2500      	movne	r5, #0
 8005996:	4293      	cmp	r3, r2
 8005998:	bfc4      	itt	gt
 800599a:	1a9b      	subgt	r3, r3, r2
 800599c:	18ed      	addgt	r5, r5, r3
 800599e:	2600      	movs	r6, #0
 80059a0:	341a      	adds	r4, #26
 80059a2:	42b5      	cmp	r5, r6
 80059a4:	d11a      	bne.n	80059dc <_printf_common+0xc8>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e008      	b.n	80059bc <_printf_common+0xa8>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4652      	mov	r2, sl
 80059ae:	4641      	mov	r1, r8
 80059b0:	4638      	mov	r0, r7
 80059b2:	47c8      	blx	r9
 80059b4:	3001      	adds	r0, #1
 80059b6:	d103      	bne.n	80059c0 <_printf_common+0xac>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	3501      	adds	r5, #1
 80059c2:	e7c6      	b.n	8005952 <_printf_common+0x3e>
 80059c4:	18e1      	adds	r1, r4, r3
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	2030      	movs	r0, #48	@ 0x30
 80059ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059ce:	4422      	add	r2, r4
 80059d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059d8:	3302      	adds	r3, #2
 80059da:	e7c7      	b.n	800596c <_printf_common+0x58>
 80059dc:	2301      	movs	r3, #1
 80059de:	4622      	mov	r2, r4
 80059e0:	4641      	mov	r1, r8
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c8      	blx	r9
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0e6      	beq.n	80059b8 <_printf_common+0xa4>
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7d9      	b.n	80059a2 <_printf_common+0x8e>
	...

080059f0 <_printf_i>:
 80059f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	7e0f      	ldrb	r7, [r1, #24]
 80059f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059f8:	2f78      	cmp	r7, #120	@ 0x78
 80059fa:	4691      	mov	r9, r2
 80059fc:	4680      	mov	r8, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	469a      	mov	sl, r3
 8005a02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a06:	d807      	bhi.n	8005a18 <_printf_i+0x28>
 8005a08:	2f62      	cmp	r7, #98	@ 0x62
 8005a0a:	d80a      	bhi.n	8005a22 <_printf_i+0x32>
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	f000 80d2 	beq.w	8005bb6 <_printf_i+0x1c6>
 8005a12:	2f58      	cmp	r7, #88	@ 0x58
 8005a14:	f000 80b9 	beq.w	8005b8a <_printf_i+0x19a>
 8005a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a20:	e03a      	b.n	8005a98 <_printf_i+0xa8>
 8005a22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a26:	2b15      	cmp	r3, #21
 8005a28:	d8f6      	bhi.n	8005a18 <_printf_i+0x28>
 8005a2a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a30 <_printf_i+0x40>)
 8005a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a19 	.word	0x08005a19
 8005a3c:	08005a19 	.word	0x08005a19
 8005a40:	08005a19 	.word	0x08005a19
 8005a44:	08005a19 	.word	0x08005a19
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a19 	.word	0x08005a19
 8005a50:	08005a19 	.word	0x08005a19
 8005a54:	08005a19 	.word	0x08005a19
 8005a58:	08005a19 	.word	0x08005a19
 8005a5c:	08005b9d 	.word	0x08005b9d
 8005a60:	08005ac7 	.word	0x08005ac7
 8005a64:	08005b57 	.word	0x08005b57
 8005a68:	08005a19 	.word	0x08005a19
 8005a6c:	08005a19 	.word	0x08005a19
 8005a70:	08005bbf 	.word	0x08005bbf
 8005a74:	08005a19 	.word	0x08005a19
 8005a78:	08005ac7 	.word	0x08005ac7
 8005a7c:	08005a19 	.word	0x08005a19
 8005a80:	08005a19 	.word	0x08005a19
 8005a84:	08005b5f 	.word	0x08005b5f
 8005a88:	6833      	ldr	r3, [r6, #0]
 8005a8a:	1d1a      	adds	r2, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6032      	str	r2, [r6, #0]
 8005a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e09d      	b.n	8005bd8 <_printf_i+0x1e8>
 8005a9c:	6833      	ldr	r3, [r6, #0]
 8005a9e:	6820      	ldr	r0, [r4, #0]
 8005aa0:	1d19      	adds	r1, r3, #4
 8005aa2:	6031      	str	r1, [r6, #0]
 8005aa4:	0606      	lsls	r6, r0, #24
 8005aa6:	d501      	bpl.n	8005aac <_printf_i+0xbc>
 8005aa8:	681d      	ldr	r5, [r3, #0]
 8005aaa:	e003      	b.n	8005ab4 <_printf_i+0xc4>
 8005aac:	0645      	lsls	r5, r0, #25
 8005aae:	d5fb      	bpl.n	8005aa8 <_printf_i+0xb8>
 8005ab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	da03      	bge.n	8005ac0 <_printf_i+0xd0>
 8005ab8:	232d      	movs	r3, #45	@ 0x2d
 8005aba:	426d      	negs	r5, r5
 8005abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ac0:	4859      	ldr	r0, [pc, #356]	@ (8005c28 <_printf_i+0x238>)
 8005ac2:	230a      	movs	r3, #10
 8005ac4:	e011      	b.n	8005aea <_printf_i+0xfa>
 8005ac6:	6821      	ldr	r1, [r4, #0]
 8005ac8:	6833      	ldr	r3, [r6, #0]
 8005aca:	0608      	lsls	r0, r1, #24
 8005acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ad0:	d402      	bmi.n	8005ad8 <_printf_i+0xe8>
 8005ad2:	0649      	lsls	r1, r1, #25
 8005ad4:	bf48      	it	mi
 8005ad6:	b2ad      	uxthmi	r5, r5
 8005ad8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ada:	4853      	ldr	r0, [pc, #332]	@ (8005c28 <_printf_i+0x238>)
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	bf14      	ite	ne
 8005ae0:	230a      	movne	r3, #10
 8005ae2:	2308      	moveq	r3, #8
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005aea:	6866      	ldr	r6, [r4, #4]
 8005aec:	60a6      	str	r6, [r4, #8]
 8005aee:	2e00      	cmp	r6, #0
 8005af0:	bfa2      	ittt	ge
 8005af2:	6821      	ldrge	r1, [r4, #0]
 8005af4:	f021 0104 	bicge.w	r1, r1, #4
 8005af8:	6021      	strge	r1, [r4, #0]
 8005afa:	b90d      	cbnz	r5, 8005b00 <_printf_i+0x110>
 8005afc:	2e00      	cmp	r6, #0
 8005afe:	d04b      	beq.n	8005b98 <_printf_i+0x1a8>
 8005b00:	4616      	mov	r6, r2
 8005b02:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b06:	fb03 5711 	mls	r7, r3, r1, r5
 8005b0a:	5dc7      	ldrb	r7, [r0, r7]
 8005b0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b10:	462f      	mov	r7, r5
 8005b12:	42bb      	cmp	r3, r7
 8005b14:	460d      	mov	r5, r1
 8005b16:	d9f4      	bls.n	8005b02 <_printf_i+0x112>
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d10b      	bne.n	8005b34 <_printf_i+0x144>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	07df      	lsls	r7, r3, #31
 8005b20:	d508      	bpl.n	8005b34 <_printf_i+0x144>
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	6861      	ldr	r1, [r4, #4]
 8005b26:	4299      	cmp	r1, r3
 8005b28:	bfde      	ittt	le
 8005b2a:	2330      	movle	r3, #48	@ 0x30
 8005b2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b34:	1b92      	subs	r2, r2, r6
 8005b36:	6122      	str	r2, [r4, #16]
 8005b38:	f8cd a000 	str.w	sl, [sp]
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	aa03      	add	r2, sp, #12
 8005b40:	4621      	mov	r1, r4
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff fee6 	bl	8005914 <_printf_common>
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d14a      	bne.n	8005be2 <_printf_i+0x1f2>
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b004      	add	sp, #16
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f043 0320 	orr.w	r3, r3, #32
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	4833      	ldr	r0, [pc, #204]	@ (8005c2c <_printf_i+0x23c>)
 8005b60:	2778      	movs	r7, #120	@ 0x78
 8005b62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	6831      	ldr	r1, [r6, #0]
 8005b6a:	061f      	lsls	r7, r3, #24
 8005b6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b70:	d402      	bmi.n	8005b78 <_printf_i+0x188>
 8005b72:	065f      	lsls	r7, r3, #25
 8005b74:	bf48      	it	mi
 8005b76:	b2ad      	uxthmi	r5, r5
 8005b78:	6031      	str	r1, [r6, #0]
 8005b7a:	07d9      	lsls	r1, r3, #31
 8005b7c:	bf44      	itt	mi
 8005b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b82:	6023      	strmi	r3, [r4, #0]
 8005b84:	b11d      	cbz	r5, 8005b8e <_printf_i+0x19e>
 8005b86:	2310      	movs	r3, #16
 8005b88:	e7ac      	b.n	8005ae4 <_printf_i+0xf4>
 8005b8a:	4827      	ldr	r0, [pc, #156]	@ (8005c28 <_printf_i+0x238>)
 8005b8c:	e7e9      	b.n	8005b62 <_printf_i+0x172>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	f023 0320 	bic.w	r3, r3, #32
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	e7f6      	b.n	8005b86 <_printf_i+0x196>
 8005b98:	4616      	mov	r6, r2
 8005b9a:	e7bd      	b.n	8005b18 <_printf_i+0x128>
 8005b9c:	6833      	ldr	r3, [r6, #0]
 8005b9e:	6825      	ldr	r5, [r4, #0]
 8005ba0:	6961      	ldr	r1, [r4, #20]
 8005ba2:	1d18      	adds	r0, r3, #4
 8005ba4:	6030      	str	r0, [r6, #0]
 8005ba6:	062e      	lsls	r6, r5, #24
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0x1c0>
 8005bac:	6019      	str	r1, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0x1c6>
 8005bb0:	0668      	lsls	r0, r5, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0x1bc>
 8005bb4:	8019      	strh	r1, [r3, #0]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	4616      	mov	r6, r2
 8005bbc:	e7bc      	b.n	8005b38 <_printf_i+0x148>
 8005bbe:	6833      	ldr	r3, [r6, #0]
 8005bc0:	1d1a      	adds	r2, r3, #4
 8005bc2:	6032      	str	r2, [r6, #0]
 8005bc4:	681e      	ldr	r6, [r3, #0]
 8005bc6:	6862      	ldr	r2, [r4, #4]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7fa fb08 	bl	80001e0 <memchr>
 8005bd0:	b108      	cbz	r0, 8005bd6 <_printf_i+0x1e6>
 8005bd2:	1b80      	subs	r0, r0, r6
 8005bd4:	6060      	str	r0, [r4, #4]
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be0:	e7aa      	b.n	8005b38 <_printf_i+0x148>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	4632      	mov	r2, r6
 8005be6:	4649      	mov	r1, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	47d0      	blx	sl
 8005bec:	3001      	adds	r0, #1
 8005bee:	d0ad      	beq.n	8005b4c <_printf_i+0x15c>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	079b      	lsls	r3, r3, #30
 8005bf4:	d413      	bmi.n	8005c1e <_printf_i+0x22e>
 8005bf6:	68e0      	ldr	r0, [r4, #12]
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	bfb8      	it	lt
 8005bfe:	4618      	movlt	r0, r3
 8005c00:	e7a6      	b.n	8005b50 <_printf_i+0x160>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4632      	mov	r2, r6
 8005c06:	4649      	mov	r1, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	47d0      	blx	sl
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d09d      	beq.n	8005b4c <_printf_i+0x15c>
 8005c10:	3501      	adds	r5, #1
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	9903      	ldr	r1, [sp, #12]
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	dcf2      	bgt.n	8005c02 <_printf_i+0x212>
 8005c1c:	e7eb      	b.n	8005bf6 <_printf_i+0x206>
 8005c1e:	2500      	movs	r5, #0
 8005c20:	f104 0619 	add.w	r6, r4, #25
 8005c24:	e7f5      	b.n	8005c12 <_printf_i+0x222>
 8005c26:	bf00      	nop
 8005c28:	0800a9da 	.word	0x0800a9da
 8005c2c:	0800a9eb 	.word	0x0800a9eb

08005c30 <_scanf_float>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	b087      	sub	sp, #28
 8005c36:	4617      	mov	r7, r2
 8005c38:	9303      	str	r3, [sp, #12]
 8005c3a:	688b      	ldr	r3, [r1, #8]
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c42:	bf81      	itttt	hi
 8005c44:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c48:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c4c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c50:	608b      	strhi	r3, [r1, #8]
 8005c52:	680b      	ldr	r3, [r1, #0]
 8005c54:	460a      	mov	r2, r1
 8005c56:	f04f 0500 	mov.w	r5, #0
 8005c5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c5e:	f842 3b1c 	str.w	r3, [r2], #28
 8005c62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c66:	4680      	mov	r8, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	bf98      	it	ls
 8005c6c:	f04f 0b00 	movls.w	fp, #0
 8005c70:	9201      	str	r2, [sp, #4]
 8005c72:	4616      	mov	r6, r2
 8005c74:	46aa      	mov	sl, r5
 8005c76:	46a9      	mov	r9, r5
 8005c78:	9502      	str	r5, [sp, #8]
 8005c7a:	68a2      	ldr	r2, [r4, #8]
 8005c7c:	b152      	cbz	r2, 8005c94 <_scanf_float+0x64>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c84:	d864      	bhi.n	8005d50 <_scanf_float+0x120>
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	d83c      	bhi.n	8005d04 <_scanf_float+0xd4>
 8005c8a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c8e:	b2c8      	uxtb	r0, r1
 8005c90:	280e      	cmp	r0, #14
 8005c92:	d93a      	bls.n	8005d0a <_scanf_float+0xda>
 8005c94:	f1b9 0f00 	cmp.w	r9, #0
 8005c98:	d003      	beq.n	8005ca2 <_scanf_float+0x72>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ca6:	f1ba 0f01 	cmp.w	sl, #1
 8005caa:	f200 8117 	bhi.w	8005edc <_scanf_float+0x2ac>
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	429e      	cmp	r6, r3
 8005cb2:	f200 8108 	bhi.w	8005ec6 <_scanf_float+0x296>
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	b007      	add	sp, #28
 8005cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005cc2:	2a0d      	cmp	r2, #13
 8005cc4:	d8e6      	bhi.n	8005c94 <_scanf_float+0x64>
 8005cc6:	a101      	add	r1, pc, #4	@ (adr r1, 8005ccc <_scanf_float+0x9c>)
 8005cc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ccc:	08005e13 	.word	0x08005e13
 8005cd0:	08005c95 	.word	0x08005c95
 8005cd4:	08005c95 	.word	0x08005c95
 8005cd8:	08005c95 	.word	0x08005c95
 8005cdc:	08005e73 	.word	0x08005e73
 8005ce0:	08005e4b 	.word	0x08005e4b
 8005ce4:	08005c95 	.word	0x08005c95
 8005ce8:	08005c95 	.word	0x08005c95
 8005cec:	08005e21 	.word	0x08005e21
 8005cf0:	08005c95 	.word	0x08005c95
 8005cf4:	08005c95 	.word	0x08005c95
 8005cf8:	08005c95 	.word	0x08005c95
 8005cfc:	08005c95 	.word	0x08005c95
 8005d00:	08005dd9 	.word	0x08005dd9
 8005d04:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d08:	e7db      	b.n	8005cc2 <_scanf_float+0x92>
 8005d0a:	290e      	cmp	r1, #14
 8005d0c:	d8c2      	bhi.n	8005c94 <_scanf_float+0x64>
 8005d0e:	a001      	add	r0, pc, #4	@ (adr r0, 8005d14 <_scanf_float+0xe4>)
 8005d10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d14:	08005dc9 	.word	0x08005dc9
 8005d18:	08005c95 	.word	0x08005c95
 8005d1c:	08005dc9 	.word	0x08005dc9
 8005d20:	08005e5f 	.word	0x08005e5f
 8005d24:	08005c95 	.word	0x08005c95
 8005d28:	08005d71 	.word	0x08005d71
 8005d2c:	08005daf 	.word	0x08005daf
 8005d30:	08005daf 	.word	0x08005daf
 8005d34:	08005daf 	.word	0x08005daf
 8005d38:	08005daf 	.word	0x08005daf
 8005d3c:	08005daf 	.word	0x08005daf
 8005d40:	08005daf 	.word	0x08005daf
 8005d44:	08005daf 	.word	0x08005daf
 8005d48:	08005daf 	.word	0x08005daf
 8005d4c:	08005daf 	.word	0x08005daf
 8005d50:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d52:	d809      	bhi.n	8005d68 <_scanf_float+0x138>
 8005d54:	2b60      	cmp	r3, #96	@ 0x60
 8005d56:	d8b2      	bhi.n	8005cbe <_scanf_float+0x8e>
 8005d58:	2b54      	cmp	r3, #84	@ 0x54
 8005d5a:	d07b      	beq.n	8005e54 <_scanf_float+0x224>
 8005d5c:	2b59      	cmp	r3, #89	@ 0x59
 8005d5e:	d199      	bne.n	8005c94 <_scanf_float+0x64>
 8005d60:	2d07      	cmp	r5, #7
 8005d62:	d197      	bne.n	8005c94 <_scanf_float+0x64>
 8005d64:	2508      	movs	r5, #8
 8005d66:	e02c      	b.n	8005dc2 <_scanf_float+0x192>
 8005d68:	2b74      	cmp	r3, #116	@ 0x74
 8005d6a:	d073      	beq.n	8005e54 <_scanf_float+0x224>
 8005d6c:	2b79      	cmp	r3, #121	@ 0x79
 8005d6e:	e7f6      	b.n	8005d5e <_scanf_float+0x12e>
 8005d70:	6821      	ldr	r1, [r4, #0]
 8005d72:	05c8      	lsls	r0, r1, #23
 8005d74:	d51b      	bpl.n	8005dae <_scanf_float+0x17e>
 8005d76:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d7a:	6021      	str	r1, [r4, #0]
 8005d7c:	f109 0901 	add.w	r9, r9, #1
 8005d80:	f1bb 0f00 	cmp.w	fp, #0
 8005d84:	d003      	beq.n	8005d8e <_scanf_float+0x15e>
 8005d86:	3201      	adds	r2, #1
 8005d88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d8c:	60a2      	str	r2, [r4, #8]
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	60a3      	str	r3, [r4, #8]
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	3301      	adds	r3, #1
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	f340 8087 	ble.w	8005eb4 <_scanf_float+0x284>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	e765      	b.n	8005c7a <_scanf_float+0x4a>
 8005dae:	eb1a 0105 	adds.w	r1, sl, r5
 8005db2:	f47f af6f 	bne.w	8005c94 <_scanf_float+0x64>
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005dbc:	6022      	str	r2, [r4, #0]
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	468a      	mov	sl, r1
 8005dc2:	f806 3b01 	strb.w	r3, [r6], #1
 8005dc6:	e7e2      	b.n	8005d8e <_scanf_float+0x15e>
 8005dc8:	6822      	ldr	r2, [r4, #0]
 8005dca:	0610      	lsls	r0, r2, #24
 8005dcc:	f57f af62 	bpl.w	8005c94 <_scanf_float+0x64>
 8005dd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dd4:	6022      	str	r2, [r4, #0]
 8005dd6:	e7f4      	b.n	8005dc2 <_scanf_float+0x192>
 8005dd8:	f1ba 0f00 	cmp.w	sl, #0
 8005ddc:	d10e      	bne.n	8005dfc <_scanf_float+0x1cc>
 8005dde:	f1b9 0f00 	cmp.w	r9, #0
 8005de2:	d10e      	bne.n	8005e02 <_scanf_float+0x1d2>
 8005de4:	6822      	ldr	r2, [r4, #0]
 8005de6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005dea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005dee:	d108      	bne.n	8005e02 <_scanf_float+0x1d2>
 8005df0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005df4:	6022      	str	r2, [r4, #0]
 8005df6:	f04f 0a01 	mov.w	sl, #1
 8005dfa:	e7e2      	b.n	8005dc2 <_scanf_float+0x192>
 8005dfc:	f1ba 0f02 	cmp.w	sl, #2
 8005e00:	d055      	beq.n	8005eae <_scanf_float+0x27e>
 8005e02:	2d01      	cmp	r5, #1
 8005e04:	d002      	beq.n	8005e0c <_scanf_float+0x1dc>
 8005e06:	2d04      	cmp	r5, #4
 8005e08:	f47f af44 	bne.w	8005c94 <_scanf_float+0x64>
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	b2ed      	uxtb	r5, r5
 8005e10:	e7d7      	b.n	8005dc2 <_scanf_float+0x192>
 8005e12:	f1ba 0f01 	cmp.w	sl, #1
 8005e16:	f47f af3d 	bne.w	8005c94 <_scanf_float+0x64>
 8005e1a:	f04f 0a02 	mov.w	sl, #2
 8005e1e:	e7d0      	b.n	8005dc2 <_scanf_float+0x192>
 8005e20:	b97d      	cbnz	r5, 8005e42 <_scanf_float+0x212>
 8005e22:	f1b9 0f00 	cmp.w	r9, #0
 8005e26:	f47f af38 	bne.w	8005c9a <_scanf_float+0x6a>
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e34:	f040 8108 	bne.w	8006048 <_scanf_float+0x418>
 8005e38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e3c:	6022      	str	r2, [r4, #0]
 8005e3e:	2501      	movs	r5, #1
 8005e40:	e7bf      	b.n	8005dc2 <_scanf_float+0x192>
 8005e42:	2d03      	cmp	r5, #3
 8005e44:	d0e2      	beq.n	8005e0c <_scanf_float+0x1dc>
 8005e46:	2d05      	cmp	r5, #5
 8005e48:	e7de      	b.n	8005e08 <_scanf_float+0x1d8>
 8005e4a:	2d02      	cmp	r5, #2
 8005e4c:	f47f af22 	bne.w	8005c94 <_scanf_float+0x64>
 8005e50:	2503      	movs	r5, #3
 8005e52:	e7b6      	b.n	8005dc2 <_scanf_float+0x192>
 8005e54:	2d06      	cmp	r5, #6
 8005e56:	f47f af1d 	bne.w	8005c94 <_scanf_float+0x64>
 8005e5a:	2507      	movs	r5, #7
 8005e5c:	e7b1      	b.n	8005dc2 <_scanf_float+0x192>
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	0591      	lsls	r1, r2, #22
 8005e62:	f57f af17 	bpl.w	8005c94 <_scanf_float+0x64>
 8005e66:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005e6a:	6022      	str	r2, [r4, #0]
 8005e6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e70:	e7a7      	b.n	8005dc2 <_scanf_float+0x192>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e7c:	d006      	beq.n	8005e8c <_scanf_float+0x25c>
 8005e7e:	0550      	lsls	r0, r2, #21
 8005e80:	f57f af08 	bpl.w	8005c94 <_scanf_float+0x64>
 8005e84:	f1b9 0f00 	cmp.w	r9, #0
 8005e88:	f000 80de 	beq.w	8006048 <_scanf_float+0x418>
 8005e8c:	0591      	lsls	r1, r2, #22
 8005e8e:	bf58      	it	pl
 8005e90:	9902      	ldrpl	r1, [sp, #8]
 8005e92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e96:	bf58      	it	pl
 8005e98:	eba9 0101 	subpl.w	r1, r9, r1
 8005e9c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005ea0:	bf58      	it	pl
 8005ea2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ea6:	6022      	str	r2, [r4, #0]
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	e789      	b.n	8005dc2 <_scanf_float+0x192>
 8005eae:	f04f 0a03 	mov.w	sl, #3
 8005eb2:	e786      	b.n	8005dc2 <_scanf_float+0x192>
 8005eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4798      	blx	r3
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f43f aedb 	beq.w	8005c7a <_scanf_float+0x4a>
 8005ec4:	e6e6      	b.n	8005c94 <_scanf_float+0x64>
 8005ec6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005eca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ece:	463a      	mov	r2, r7
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4798      	blx	r3
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	6123      	str	r3, [r4, #16]
 8005eda:	e6e8      	b.n	8005cae <_scanf_float+0x7e>
 8005edc:	1e6b      	subs	r3, r5, #1
 8005ede:	2b06      	cmp	r3, #6
 8005ee0:	d824      	bhi.n	8005f2c <_scanf_float+0x2fc>
 8005ee2:	2d02      	cmp	r5, #2
 8005ee4:	d836      	bhi.n	8005f54 <_scanf_float+0x324>
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	429e      	cmp	r6, r3
 8005eea:	f67f aee4 	bls.w	8005cb6 <_scanf_float+0x86>
 8005eee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ef2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4798      	blx	r3
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	e7f0      	b.n	8005ee6 <_scanf_float+0x2b6>
 8005f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f0c:	463a      	mov	r2, r7
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4798      	blx	r3
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f1c:	fa5f fa8a 	uxtb.w	sl, sl
 8005f20:	f1ba 0f02 	cmp.w	sl, #2
 8005f24:	d1ee      	bne.n	8005f04 <_scanf_float+0x2d4>
 8005f26:	3d03      	subs	r5, #3
 8005f28:	b2ed      	uxtb	r5, r5
 8005f2a:	1b76      	subs	r6, r6, r5
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	05da      	lsls	r2, r3, #23
 8005f30:	d530      	bpl.n	8005f94 <_scanf_float+0x364>
 8005f32:	055b      	lsls	r3, r3, #21
 8005f34:	d511      	bpl.n	8005f5a <_scanf_float+0x32a>
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	429e      	cmp	r6, r3
 8005f3a:	f67f aebc 	bls.w	8005cb6 <_scanf_float+0x86>
 8005f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f46:	463a      	mov	r2, r7
 8005f48:	4640      	mov	r0, r8
 8005f4a:	4798      	blx	r3
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	e7f0      	b.n	8005f36 <_scanf_float+0x306>
 8005f54:	46aa      	mov	sl, r5
 8005f56:	46b3      	mov	fp, r6
 8005f58:	e7de      	b.n	8005f18 <_scanf_float+0x2e8>
 8005f5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	2965      	cmp	r1, #101	@ 0x65
 8005f62:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f66:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f6a:	6123      	str	r3, [r4, #16]
 8005f6c:	d00c      	beq.n	8005f88 <_scanf_float+0x358>
 8005f6e:	2945      	cmp	r1, #69	@ 0x45
 8005f70:	d00a      	beq.n	8005f88 <_scanf_float+0x358>
 8005f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f76:	463a      	mov	r2, r7
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4798      	blx	r3
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	1eb5      	subs	r5, r6, #2
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f8c:	463a      	mov	r2, r7
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4798      	blx	r3
 8005f92:	462e      	mov	r6, r5
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	f012 0210 	ands.w	r2, r2, #16
 8005f9a:	d001      	beq.n	8005fa0 <_scanf_float+0x370>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e68b      	b.n	8005cb8 <_scanf_float+0x88>
 8005fa0:	7032      	strb	r2, [r6, #0]
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fac:	d11c      	bne.n	8005fe8 <_scanf_float+0x3b8>
 8005fae:	9b02      	ldr	r3, [sp, #8]
 8005fb0:	454b      	cmp	r3, r9
 8005fb2:	eba3 0209 	sub.w	r2, r3, r9
 8005fb6:	d123      	bne.n	8006000 <_scanf_float+0x3d0>
 8005fb8:	9901      	ldr	r1, [sp, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	f002 fc2b 	bl	8008818 <_strtod_r>
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	6821      	ldr	r1, [r4, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f011 0f02 	tst.w	r1, #2
 8005fcc:	ec57 6b10 	vmov	r6, r7, d0
 8005fd0:	f103 0204 	add.w	r2, r3, #4
 8005fd4:	d01f      	beq.n	8006016 <_scanf_float+0x3e6>
 8005fd6:	9903      	ldr	r1, [sp, #12]
 8005fd8:	600a      	str	r2, [r1, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	e9c3 6700 	strd	r6, r7, [r3]
 8005fe0:	68e3      	ldr	r3, [r4, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60e3      	str	r3, [r4, #12]
 8005fe6:	e7d9      	b.n	8005f9c <_scanf_float+0x36c>
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0e4      	beq.n	8005fb8 <_scanf_float+0x388>
 8005fee:	9905      	ldr	r1, [sp, #20]
 8005ff0:	230a      	movs	r3, #10
 8005ff2:	3101      	adds	r1, #1
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	f002 fc8f 	bl	8008918 <_strtol_r>
 8005ffa:	9b04      	ldr	r3, [sp, #16]
 8005ffc:	9e05      	ldr	r6, [sp, #20]
 8005ffe:	1ac2      	subs	r2, r0, r3
 8006000:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006004:	429e      	cmp	r6, r3
 8006006:	bf28      	it	cs
 8006008:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800600c:	4910      	ldr	r1, [pc, #64]	@ (8006050 <_scanf_float+0x420>)
 800600e:	4630      	mov	r0, r6
 8006010:	f000 f918 	bl	8006244 <siprintf>
 8006014:	e7d0      	b.n	8005fb8 <_scanf_float+0x388>
 8006016:	f011 0f04 	tst.w	r1, #4
 800601a:	9903      	ldr	r1, [sp, #12]
 800601c:	600a      	str	r2, [r1, #0]
 800601e:	d1dc      	bne.n	8005fda <_scanf_float+0x3aa>
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	4632      	mov	r2, r6
 8006024:	463b      	mov	r3, r7
 8006026:	4630      	mov	r0, r6
 8006028:	4639      	mov	r1, r7
 800602a:	f7fa fd87 	bl	8000b3c <__aeabi_dcmpun>
 800602e:	b128      	cbz	r0, 800603c <_scanf_float+0x40c>
 8006030:	4808      	ldr	r0, [pc, #32]	@ (8006054 <_scanf_float+0x424>)
 8006032:	f000 f9eb 	bl	800640c <nanf>
 8006036:	ed85 0a00 	vstr	s0, [r5]
 800603a:	e7d1      	b.n	8005fe0 <_scanf_float+0x3b0>
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa fdda 	bl	8000bf8 <__aeabi_d2f>
 8006044:	6028      	str	r0, [r5, #0]
 8006046:	e7cb      	b.n	8005fe0 <_scanf_float+0x3b0>
 8006048:	f04f 0900 	mov.w	r9, #0
 800604c:	e629      	b.n	8005ca2 <_scanf_float+0x72>
 800604e:	bf00      	nop
 8006050:	0800a9fc 	.word	0x0800a9fc
 8006054:	0800ad95 	.word	0x0800ad95

08006058 <std>:
 8006058:	2300      	movs	r3, #0
 800605a:	b510      	push	{r4, lr}
 800605c:	4604      	mov	r4, r0
 800605e:	e9c0 3300 	strd	r3, r3, [r0]
 8006062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006066:	6083      	str	r3, [r0, #8]
 8006068:	8181      	strh	r1, [r0, #12]
 800606a:	6643      	str	r3, [r0, #100]	@ 0x64
 800606c:	81c2      	strh	r2, [r0, #14]
 800606e:	6183      	str	r3, [r0, #24]
 8006070:	4619      	mov	r1, r3
 8006072:	2208      	movs	r2, #8
 8006074:	305c      	adds	r0, #92	@ 0x5c
 8006076:	f000 f948 	bl	800630a <memset>
 800607a:	4b0d      	ldr	r3, [pc, #52]	@ (80060b0 <std+0x58>)
 800607c:	6263      	str	r3, [r4, #36]	@ 0x24
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <std+0x5c>)
 8006080:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <std+0x60>)
 8006084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006086:	4b0d      	ldr	r3, [pc, #52]	@ (80060bc <std+0x64>)
 8006088:	6323      	str	r3, [r4, #48]	@ 0x30
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <std+0x68>)
 800608c:	6224      	str	r4, [r4, #32]
 800608e:	429c      	cmp	r4, r3
 8006090:	d006      	beq.n	80060a0 <std+0x48>
 8006092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006096:	4294      	cmp	r4, r2
 8006098:	d002      	beq.n	80060a0 <std+0x48>
 800609a:	33d0      	adds	r3, #208	@ 0xd0
 800609c:	429c      	cmp	r4, r3
 800609e:	d105      	bne.n	80060ac <std+0x54>
 80060a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a8:	f000 b9ac 	b.w	8006404 <__retarget_lock_init_recursive>
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	08006285 	.word	0x08006285
 80060b4:	080062a7 	.word	0x080062a7
 80060b8:	080062df 	.word	0x080062df
 80060bc:	08006303 	.word	0x08006303
 80060c0:	20000bf8 	.word	0x20000bf8

080060c4 <stdio_exit_handler>:
 80060c4:	4a02      	ldr	r2, [pc, #8]	@ (80060d0 <stdio_exit_handler+0xc>)
 80060c6:	4903      	ldr	r1, [pc, #12]	@ (80060d4 <stdio_exit_handler+0x10>)
 80060c8:	4803      	ldr	r0, [pc, #12]	@ (80060d8 <stdio_exit_handler+0x14>)
 80060ca:	f000 b869 	b.w	80061a0 <_fwalk_sglue>
 80060ce:	bf00      	nop
 80060d0:	2000000c 	.word	0x2000000c
 80060d4:	08008cd5 	.word	0x08008cd5
 80060d8:	2000001c 	.word	0x2000001c

080060dc <cleanup_stdio>:
 80060dc:	6841      	ldr	r1, [r0, #4]
 80060de:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <cleanup_stdio+0x34>)
 80060e0:	4299      	cmp	r1, r3
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	d001      	beq.n	80060ec <cleanup_stdio+0x10>
 80060e8:	f002 fdf4 	bl	8008cd4 <_fflush_r>
 80060ec:	68a1      	ldr	r1, [r4, #8]
 80060ee:	4b09      	ldr	r3, [pc, #36]	@ (8006114 <cleanup_stdio+0x38>)
 80060f0:	4299      	cmp	r1, r3
 80060f2:	d002      	beq.n	80060fa <cleanup_stdio+0x1e>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f002 fded 	bl	8008cd4 <_fflush_r>
 80060fa:	68e1      	ldr	r1, [r4, #12]
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <cleanup_stdio+0x3c>)
 80060fe:	4299      	cmp	r1, r3
 8006100:	d004      	beq.n	800610c <cleanup_stdio+0x30>
 8006102:	4620      	mov	r0, r4
 8006104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006108:	f002 bde4 	b.w	8008cd4 <_fflush_r>
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	20000bf8 	.word	0x20000bf8
 8006114:	20000c60 	.word	0x20000c60
 8006118:	20000cc8 	.word	0x20000cc8

0800611c <global_stdio_init.part.0>:
 800611c:	b510      	push	{r4, lr}
 800611e:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <global_stdio_init.part.0+0x30>)
 8006120:	4c0b      	ldr	r4, [pc, #44]	@ (8006150 <global_stdio_init.part.0+0x34>)
 8006122:	4a0c      	ldr	r2, [pc, #48]	@ (8006154 <global_stdio_init.part.0+0x38>)
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	4620      	mov	r0, r4
 8006128:	2200      	movs	r2, #0
 800612a:	2104      	movs	r1, #4
 800612c:	f7ff ff94 	bl	8006058 <std>
 8006130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006134:	2201      	movs	r2, #1
 8006136:	2109      	movs	r1, #9
 8006138:	f7ff ff8e 	bl	8006058 <std>
 800613c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006140:	2202      	movs	r2, #2
 8006142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006146:	2112      	movs	r1, #18
 8006148:	f7ff bf86 	b.w	8006058 <std>
 800614c:	20000d30 	.word	0x20000d30
 8006150:	20000bf8 	.word	0x20000bf8
 8006154:	080060c5 	.word	0x080060c5

08006158 <__sfp_lock_acquire>:
 8006158:	4801      	ldr	r0, [pc, #4]	@ (8006160 <__sfp_lock_acquire+0x8>)
 800615a:	f000 b954 	b.w	8006406 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	20000d39 	.word	0x20000d39

08006164 <__sfp_lock_release>:
 8006164:	4801      	ldr	r0, [pc, #4]	@ (800616c <__sfp_lock_release+0x8>)
 8006166:	f000 b94f 	b.w	8006408 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	20000d39 	.word	0x20000d39

08006170 <__sinit>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	f7ff fff0 	bl	8006158 <__sfp_lock_acquire>
 8006178:	6a23      	ldr	r3, [r4, #32]
 800617a:	b11b      	cbz	r3, 8006184 <__sinit+0x14>
 800617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006180:	f7ff bff0 	b.w	8006164 <__sfp_lock_release>
 8006184:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <__sinit+0x28>)
 8006186:	6223      	str	r3, [r4, #32]
 8006188:	4b04      	ldr	r3, [pc, #16]	@ (800619c <__sinit+0x2c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f5      	bne.n	800617c <__sinit+0xc>
 8006190:	f7ff ffc4 	bl	800611c <global_stdio_init.part.0>
 8006194:	e7f2      	b.n	800617c <__sinit+0xc>
 8006196:	bf00      	nop
 8006198:	080060dd 	.word	0x080060dd
 800619c:	20000d30 	.word	0x20000d30

080061a0 <_fwalk_sglue>:
 80061a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	4607      	mov	r7, r0
 80061a6:	4688      	mov	r8, r1
 80061a8:	4614      	mov	r4, r2
 80061aa:	2600      	movs	r6, #0
 80061ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061b0:	f1b9 0901 	subs.w	r9, r9, #1
 80061b4:	d505      	bpl.n	80061c2 <_fwalk_sglue+0x22>
 80061b6:	6824      	ldr	r4, [r4, #0]
 80061b8:	2c00      	cmp	r4, #0
 80061ba:	d1f7      	bne.n	80061ac <_fwalk_sglue+0xc>
 80061bc:	4630      	mov	r0, r6
 80061be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d907      	bls.n	80061d8 <_fwalk_sglue+0x38>
 80061c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061cc:	3301      	adds	r3, #1
 80061ce:	d003      	beq.n	80061d8 <_fwalk_sglue+0x38>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c0      	blx	r8
 80061d6:	4306      	orrs	r6, r0
 80061d8:	3568      	adds	r5, #104	@ 0x68
 80061da:	e7e9      	b.n	80061b0 <_fwalk_sglue+0x10>

080061dc <sniprintf>:
 80061dc:	b40c      	push	{r2, r3}
 80061de:	b530      	push	{r4, r5, lr}
 80061e0:	4b17      	ldr	r3, [pc, #92]	@ (8006240 <sniprintf+0x64>)
 80061e2:	1e0c      	subs	r4, r1, #0
 80061e4:	681d      	ldr	r5, [r3, #0]
 80061e6:	b09d      	sub	sp, #116	@ 0x74
 80061e8:	da08      	bge.n	80061fc <sniprintf+0x20>
 80061ea:	238b      	movs	r3, #139	@ 0x8b
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295
 80061f2:	b01d      	add	sp, #116	@ 0x74
 80061f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f8:	b002      	add	sp, #8
 80061fa:	4770      	bx	lr
 80061fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006204:	bf14      	ite	ne
 8006206:	f104 33ff 	addne.w	r3, r4, #4294967295
 800620a:	4623      	moveq	r3, r4
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	9307      	str	r3, [sp, #28]
 8006210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006214:	9002      	str	r0, [sp, #8]
 8006216:	9006      	str	r0, [sp, #24]
 8006218:	f8ad 3016 	strh.w	r3, [sp, #22]
 800621c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800621e:	ab21      	add	r3, sp, #132	@ 0x84
 8006220:	a902      	add	r1, sp, #8
 8006222:	4628      	mov	r0, r5
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	f002 fbd5 	bl	80089d4 <_svfiprintf_r>
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	bfbc      	itt	lt
 800622e:	238b      	movlt	r3, #139	@ 0x8b
 8006230:	602b      	strlt	r3, [r5, #0]
 8006232:	2c00      	cmp	r4, #0
 8006234:	d0dd      	beq.n	80061f2 <sniprintf+0x16>
 8006236:	9b02      	ldr	r3, [sp, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e7d9      	b.n	80061f2 <sniprintf+0x16>
 800623e:	bf00      	nop
 8006240:	20000018 	.word	0x20000018

08006244 <siprintf>:
 8006244:	b40e      	push	{r1, r2, r3}
 8006246:	b500      	push	{lr}
 8006248:	b09c      	sub	sp, #112	@ 0x70
 800624a:	ab1d      	add	r3, sp, #116	@ 0x74
 800624c:	9002      	str	r0, [sp, #8]
 800624e:	9006      	str	r0, [sp, #24]
 8006250:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006254:	4809      	ldr	r0, [pc, #36]	@ (800627c <siprintf+0x38>)
 8006256:	9107      	str	r1, [sp, #28]
 8006258:	9104      	str	r1, [sp, #16]
 800625a:	4909      	ldr	r1, [pc, #36]	@ (8006280 <siprintf+0x3c>)
 800625c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006260:	9105      	str	r1, [sp, #20]
 8006262:	6800      	ldr	r0, [r0, #0]
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	a902      	add	r1, sp, #8
 8006268:	f002 fbb4 	bl	80089d4 <_svfiprintf_r>
 800626c:	9b02      	ldr	r3, [sp, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	b01c      	add	sp, #112	@ 0x70
 8006274:	f85d eb04 	ldr.w	lr, [sp], #4
 8006278:	b003      	add	sp, #12
 800627a:	4770      	bx	lr
 800627c:	20000018 	.word	0x20000018
 8006280:	ffff0208 	.word	0xffff0208

08006284 <__sread>:
 8006284:	b510      	push	{r4, lr}
 8006286:	460c      	mov	r4, r1
 8006288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628c:	f000 f86c 	bl	8006368 <_read_r>
 8006290:	2800      	cmp	r0, #0
 8006292:	bfab      	itete	ge
 8006294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006296:	89a3      	ldrhlt	r3, [r4, #12]
 8006298:	181b      	addge	r3, r3, r0
 800629a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800629e:	bfac      	ite	ge
 80062a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062a2:	81a3      	strhlt	r3, [r4, #12]
 80062a4:	bd10      	pop	{r4, pc}

080062a6 <__swrite>:
 80062a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062aa:	461f      	mov	r7, r3
 80062ac:	898b      	ldrh	r3, [r1, #12]
 80062ae:	05db      	lsls	r3, r3, #23
 80062b0:	4605      	mov	r5, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	4616      	mov	r6, r2
 80062b6:	d505      	bpl.n	80062c4 <__swrite+0x1e>
 80062b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062bc:	2302      	movs	r3, #2
 80062be:	2200      	movs	r2, #0
 80062c0:	f000 f840 	bl	8006344 <_lseek_r>
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	4632      	mov	r2, r6
 80062d2:	463b      	mov	r3, r7
 80062d4:	4628      	mov	r0, r5
 80062d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062da:	f000 b857 	b.w	800638c <_write_r>

080062de <__sseek>:
 80062de:	b510      	push	{r4, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e6:	f000 f82d 	bl	8006344 <_lseek_r>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	bf15      	itete	ne
 80062f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062fa:	81a3      	strheq	r3, [r4, #12]
 80062fc:	bf18      	it	ne
 80062fe:	81a3      	strhne	r3, [r4, #12]
 8006300:	bd10      	pop	{r4, pc}

08006302 <__sclose>:
 8006302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006306:	f000 b80d 	b.w	8006324 <_close_r>

0800630a <memset>:
 800630a:	4402      	add	r2, r0
 800630c:	4603      	mov	r3, r0
 800630e:	4293      	cmp	r3, r2
 8006310:	d100      	bne.n	8006314 <memset+0xa>
 8006312:	4770      	bx	lr
 8006314:	f803 1b01 	strb.w	r1, [r3], #1
 8006318:	e7f9      	b.n	800630e <memset+0x4>
	...

0800631c <_localeconv_r>:
 800631c:	4800      	ldr	r0, [pc, #0]	@ (8006320 <_localeconv_r+0x4>)
 800631e:	4770      	bx	lr
 8006320:	20000158 	.word	0x20000158

08006324 <_close_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d06      	ldr	r5, [pc, #24]	@ (8006340 <_close_r+0x1c>)
 8006328:	2300      	movs	r3, #0
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	602b      	str	r3, [r5, #0]
 8006330:	f7fb fb58 	bl	80019e4 <_close>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_close_r+0x1a>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	b103      	cbz	r3, 800633e <_close_r+0x1a>
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	20000d34 	.word	0x20000d34

08006344 <_lseek_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4d07      	ldr	r5, [pc, #28]	@ (8006364 <_lseek_r+0x20>)
 8006348:	4604      	mov	r4, r0
 800634a:	4608      	mov	r0, r1
 800634c:	4611      	mov	r1, r2
 800634e:	2200      	movs	r2, #0
 8006350:	602a      	str	r2, [r5, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	f7fb fb6d 	bl	8001a32 <_lseek>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_lseek_r+0x1e>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	b103      	cbz	r3, 8006362 <_lseek_r+0x1e>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	20000d34 	.word	0x20000d34

08006368 <_read_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d07      	ldr	r5, [pc, #28]	@ (8006388 <_read_r+0x20>)
 800636c:	4604      	mov	r4, r0
 800636e:	4608      	mov	r0, r1
 8006370:	4611      	mov	r1, r2
 8006372:	2200      	movs	r2, #0
 8006374:	602a      	str	r2, [r5, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f7fb fafb 	bl	8001972 <_read>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_read_r+0x1e>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_read_r+0x1e>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	20000d34 	.word	0x20000d34

0800638c <_write_r>:
 800638c:	b538      	push	{r3, r4, r5, lr}
 800638e:	4d07      	ldr	r5, [pc, #28]	@ (80063ac <_write_r+0x20>)
 8006390:	4604      	mov	r4, r0
 8006392:	4608      	mov	r0, r1
 8006394:	4611      	mov	r1, r2
 8006396:	2200      	movs	r2, #0
 8006398:	602a      	str	r2, [r5, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	f7fb fb06 	bl	80019ac <_write>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_write_r+0x1e>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_write_r+0x1e>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	20000d34 	.word	0x20000d34

080063b0 <__errno>:
 80063b0:	4b01      	ldr	r3, [pc, #4]	@ (80063b8 <__errno+0x8>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000018 	.word	0x20000018

080063bc <__libc_init_array>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	4d0d      	ldr	r5, [pc, #52]	@ (80063f4 <__libc_init_array+0x38>)
 80063c0:	4c0d      	ldr	r4, [pc, #52]	@ (80063f8 <__libc_init_array+0x3c>)
 80063c2:	1b64      	subs	r4, r4, r5
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	2600      	movs	r6, #0
 80063c8:	42a6      	cmp	r6, r4
 80063ca:	d109      	bne.n	80063e0 <__libc_init_array+0x24>
 80063cc:	4d0b      	ldr	r5, [pc, #44]	@ (80063fc <__libc_init_array+0x40>)
 80063ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006400 <__libc_init_array+0x44>)
 80063d0:	f004 fad0 	bl	800a974 <_init>
 80063d4:	1b64      	subs	r4, r4, r5
 80063d6:	10a4      	asrs	r4, r4, #2
 80063d8:	2600      	movs	r6, #0
 80063da:	42a6      	cmp	r6, r4
 80063dc:	d105      	bne.n	80063ea <__libc_init_array+0x2e>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e4:	4798      	blx	r3
 80063e6:	3601      	adds	r6, #1
 80063e8:	e7ee      	b.n	80063c8 <__libc_init_array+0xc>
 80063ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ee:	4798      	blx	r3
 80063f0:	3601      	adds	r6, #1
 80063f2:	e7f2      	b.n	80063da <__libc_init_array+0x1e>
 80063f4:	0800ae30 	.word	0x0800ae30
 80063f8:	0800ae30 	.word	0x0800ae30
 80063fc:	0800ae30 	.word	0x0800ae30
 8006400:	0800ae34 	.word	0x0800ae34

08006404 <__retarget_lock_init_recursive>:
 8006404:	4770      	bx	lr

08006406 <__retarget_lock_acquire_recursive>:
 8006406:	4770      	bx	lr

08006408 <__retarget_lock_release_recursive>:
 8006408:	4770      	bx	lr
	...

0800640c <nanf>:
 800640c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006414 <nanf+0x8>
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	7fc00000 	.word	0x7fc00000

08006418 <quorem>:
 8006418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	6903      	ldr	r3, [r0, #16]
 800641e:	690c      	ldr	r4, [r1, #16]
 8006420:	42a3      	cmp	r3, r4
 8006422:	4607      	mov	r7, r0
 8006424:	db7e      	blt.n	8006524 <quorem+0x10c>
 8006426:	3c01      	subs	r4, #1
 8006428:	f101 0814 	add.w	r8, r1, #20
 800642c:	00a3      	lsls	r3, r4, #2
 800642e:	f100 0514 	add.w	r5, r0, #20
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800643e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006442:	3301      	adds	r3, #1
 8006444:	429a      	cmp	r2, r3
 8006446:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800644a:	fbb2 f6f3 	udiv	r6, r2, r3
 800644e:	d32e      	bcc.n	80064ae <quorem+0x96>
 8006450:	f04f 0a00 	mov.w	sl, #0
 8006454:	46c4      	mov	ip, r8
 8006456:	46ae      	mov	lr, r5
 8006458:	46d3      	mov	fp, sl
 800645a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800645e:	b298      	uxth	r0, r3
 8006460:	fb06 a000 	mla	r0, r6, r0, sl
 8006464:	0c02      	lsrs	r2, r0, #16
 8006466:	0c1b      	lsrs	r3, r3, #16
 8006468:	fb06 2303 	mla	r3, r6, r3, r2
 800646c:	f8de 2000 	ldr.w	r2, [lr]
 8006470:	b280      	uxth	r0, r0
 8006472:	b292      	uxth	r2, r2
 8006474:	1a12      	subs	r2, r2, r0
 8006476:	445a      	add	r2, fp
 8006478:	f8de 0000 	ldr.w	r0, [lr]
 800647c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006480:	b29b      	uxth	r3, r3
 8006482:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006486:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800648a:	b292      	uxth	r2, r2
 800648c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006490:	45e1      	cmp	r9, ip
 8006492:	f84e 2b04 	str.w	r2, [lr], #4
 8006496:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800649a:	d2de      	bcs.n	800645a <quorem+0x42>
 800649c:	9b00      	ldr	r3, [sp, #0]
 800649e:	58eb      	ldr	r3, [r5, r3]
 80064a0:	b92b      	cbnz	r3, 80064ae <quorem+0x96>
 80064a2:	9b01      	ldr	r3, [sp, #4]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	429d      	cmp	r5, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	d32f      	bcc.n	800650c <quorem+0xf4>
 80064ac:	613c      	str	r4, [r7, #16]
 80064ae:	4638      	mov	r0, r7
 80064b0:	f001 f9c2 	bl	8007838 <__mcmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	db25      	blt.n	8006504 <quorem+0xec>
 80064b8:	4629      	mov	r1, r5
 80064ba:	2000      	movs	r0, #0
 80064bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80064c0:	f8d1 c000 	ldr.w	ip, [r1]
 80064c4:	fa1f fe82 	uxth.w	lr, r2
 80064c8:	fa1f f38c 	uxth.w	r3, ip
 80064cc:	eba3 030e 	sub.w	r3, r3, lr
 80064d0:	4403      	add	r3, r0
 80064d2:	0c12      	lsrs	r2, r2, #16
 80064d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064e2:	45c1      	cmp	r9, r8
 80064e4:	f841 3b04 	str.w	r3, [r1], #4
 80064e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064ec:	d2e6      	bcs.n	80064bc <quorem+0xa4>
 80064ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064f6:	b922      	cbnz	r2, 8006502 <quorem+0xea>
 80064f8:	3b04      	subs	r3, #4
 80064fa:	429d      	cmp	r5, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	d30b      	bcc.n	8006518 <quorem+0x100>
 8006500:	613c      	str	r4, [r7, #16]
 8006502:	3601      	adds	r6, #1
 8006504:	4630      	mov	r0, r6
 8006506:	b003      	add	sp, #12
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	3b04      	subs	r3, #4
 8006510:	2a00      	cmp	r2, #0
 8006512:	d1cb      	bne.n	80064ac <quorem+0x94>
 8006514:	3c01      	subs	r4, #1
 8006516:	e7c6      	b.n	80064a6 <quorem+0x8e>
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	3b04      	subs	r3, #4
 800651c:	2a00      	cmp	r2, #0
 800651e:	d1ef      	bne.n	8006500 <quorem+0xe8>
 8006520:	3c01      	subs	r4, #1
 8006522:	e7ea      	b.n	80064fa <quorem+0xe2>
 8006524:	2000      	movs	r0, #0
 8006526:	e7ee      	b.n	8006506 <quorem+0xee>

08006528 <_dtoa_r>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	69c7      	ldr	r7, [r0, #28]
 800652e:	b099      	sub	sp, #100	@ 0x64
 8006530:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006534:	ec55 4b10 	vmov	r4, r5, d0
 8006538:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800653a:	9109      	str	r1, [sp, #36]	@ 0x24
 800653c:	4683      	mov	fp, r0
 800653e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006540:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006542:	b97f      	cbnz	r7, 8006564 <_dtoa_r+0x3c>
 8006544:	2010      	movs	r0, #16
 8006546:	f000 fdfd 	bl	8007144 <malloc>
 800654a:	4602      	mov	r2, r0
 800654c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006550:	b920      	cbnz	r0, 800655c <_dtoa_r+0x34>
 8006552:	4ba7      	ldr	r3, [pc, #668]	@ (80067f0 <_dtoa_r+0x2c8>)
 8006554:	21ef      	movs	r1, #239	@ 0xef
 8006556:	48a7      	ldr	r0, [pc, #668]	@ (80067f4 <_dtoa_r+0x2cc>)
 8006558:	f002 fc36 	bl	8008dc8 <__assert_func>
 800655c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006560:	6007      	str	r7, [r0, #0]
 8006562:	60c7      	str	r7, [r0, #12]
 8006564:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006568:	6819      	ldr	r1, [r3, #0]
 800656a:	b159      	cbz	r1, 8006584 <_dtoa_r+0x5c>
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	604a      	str	r2, [r1, #4]
 8006570:	2301      	movs	r3, #1
 8006572:	4093      	lsls	r3, r2
 8006574:	608b      	str	r3, [r1, #8]
 8006576:	4658      	mov	r0, fp
 8006578:	f000 feda 	bl	8007330 <_Bfree>
 800657c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	1e2b      	subs	r3, r5, #0
 8006586:	bfb9      	ittee	lt
 8006588:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800658c:	9303      	strlt	r3, [sp, #12]
 800658e:	2300      	movge	r3, #0
 8006590:	6033      	strge	r3, [r6, #0]
 8006592:	9f03      	ldr	r7, [sp, #12]
 8006594:	4b98      	ldr	r3, [pc, #608]	@ (80067f8 <_dtoa_r+0x2d0>)
 8006596:	bfbc      	itt	lt
 8006598:	2201      	movlt	r2, #1
 800659a:	6032      	strlt	r2, [r6, #0]
 800659c:	43bb      	bics	r3, r7
 800659e:	d112      	bne.n	80065c6 <_dtoa_r+0x9e>
 80065a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065ac:	4323      	orrs	r3, r4
 80065ae:	f000 854d 	beq.w	800704c <_dtoa_r+0xb24>
 80065b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800680c <_dtoa_r+0x2e4>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 854f 	beq.w	800705c <_dtoa_r+0xb34>
 80065be:	f10a 0303 	add.w	r3, sl, #3
 80065c2:	f000 bd49 	b.w	8007058 <_dtoa_r+0xb30>
 80065c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	ec51 0b17 	vmov	r0, r1, d7
 80065d0:	2300      	movs	r3, #0
 80065d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80065d6:	f7fa fa7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80065da:	4680      	mov	r8, r0
 80065dc:	b158      	cbz	r0, 80065f6 <_dtoa_r+0xce>
 80065de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065e0:	2301      	movs	r3, #1
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065e6:	b113      	cbz	r3, 80065ee <_dtoa_r+0xc6>
 80065e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065ea:	4b84      	ldr	r3, [pc, #528]	@ (80067fc <_dtoa_r+0x2d4>)
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006810 <_dtoa_r+0x2e8>
 80065f2:	f000 bd33 	b.w	800705c <_dtoa_r+0xb34>
 80065f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80065fa:	aa16      	add	r2, sp, #88	@ 0x58
 80065fc:	a917      	add	r1, sp, #92	@ 0x5c
 80065fe:	4658      	mov	r0, fp
 8006600:	f001 fa3a 	bl	8007a78 <__d2b>
 8006604:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006608:	4681      	mov	r9, r0
 800660a:	2e00      	cmp	r6, #0
 800660c:	d077      	beq.n	80066fe <_dtoa_r+0x1d6>
 800660e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006610:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800661c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006620:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006624:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006628:	4619      	mov	r1, r3
 800662a:	2200      	movs	r2, #0
 800662c:	4b74      	ldr	r3, [pc, #464]	@ (8006800 <_dtoa_r+0x2d8>)
 800662e:	f7f9 fe33 	bl	8000298 <__aeabi_dsub>
 8006632:	a369      	add	r3, pc, #420	@ (adr r3, 80067d8 <_dtoa_r+0x2b0>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 ffe6 	bl	8000608 <__aeabi_dmul>
 800663c:	a368      	add	r3, pc, #416	@ (adr r3, 80067e0 <_dtoa_r+0x2b8>)
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	f7f9 fe2b 	bl	800029c <__adddf3>
 8006646:	4604      	mov	r4, r0
 8006648:	4630      	mov	r0, r6
 800664a:	460d      	mov	r5, r1
 800664c:	f7f9 ff72 	bl	8000534 <__aeabi_i2d>
 8006650:	a365      	add	r3, pc, #404	@ (adr r3, 80067e8 <_dtoa_r+0x2c0>)
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f7f9 ffd7 	bl	8000608 <__aeabi_dmul>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4620      	mov	r0, r4
 8006660:	4629      	mov	r1, r5
 8006662:	f7f9 fe1b 	bl	800029c <__adddf3>
 8006666:	4604      	mov	r4, r0
 8006668:	460d      	mov	r5, r1
 800666a:	f7fa fa7d 	bl	8000b68 <__aeabi_d2iz>
 800666e:	2200      	movs	r2, #0
 8006670:	4607      	mov	r7, r0
 8006672:	2300      	movs	r3, #0
 8006674:	4620      	mov	r0, r4
 8006676:	4629      	mov	r1, r5
 8006678:	f7fa fa38 	bl	8000aec <__aeabi_dcmplt>
 800667c:	b140      	cbz	r0, 8006690 <_dtoa_r+0x168>
 800667e:	4638      	mov	r0, r7
 8006680:	f7f9 ff58 	bl	8000534 <__aeabi_i2d>
 8006684:	4622      	mov	r2, r4
 8006686:	462b      	mov	r3, r5
 8006688:	f7fa fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 800668c:	b900      	cbnz	r0, 8006690 <_dtoa_r+0x168>
 800668e:	3f01      	subs	r7, #1
 8006690:	2f16      	cmp	r7, #22
 8006692:	d851      	bhi.n	8006738 <_dtoa_r+0x210>
 8006694:	4b5b      	ldr	r3, [pc, #364]	@ (8006804 <_dtoa_r+0x2dc>)
 8006696:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066a2:	f7fa fa23 	bl	8000aec <__aeabi_dcmplt>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d048      	beq.n	800673c <_dtoa_r+0x214>
 80066aa:	3f01      	subs	r7, #1
 80066ac:	2300      	movs	r3, #0
 80066ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80066b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066b2:	1b9b      	subs	r3, r3, r6
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	bf44      	itt	mi
 80066b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80066bc:	2300      	movmi	r3, #0
 80066be:	9208      	str	r2, [sp, #32]
 80066c0:	bf54      	ite	pl
 80066c2:	f04f 0800 	movpl.w	r8, #0
 80066c6:	9308      	strmi	r3, [sp, #32]
 80066c8:	2f00      	cmp	r7, #0
 80066ca:	db39      	blt.n	8006740 <_dtoa_r+0x218>
 80066cc:	9b08      	ldr	r3, [sp, #32]
 80066ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80066d0:	443b      	add	r3, r7
 80066d2:	9308      	str	r3, [sp, #32]
 80066d4:	2300      	movs	r3, #0
 80066d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066da:	2b09      	cmp	r3, #9
 80066dc:	d864      	bhi.n	80067a8 <_dtoa_r+0x280>
 80066de:	2b05      	cmp	r3, #5
 80066e0:	bfc4      	itt	gt
 80066e2:	3b04      	subgt	r3, #4
 80066e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e8:	f1a3 0302 	sub.w	r3, r3, #2
 80066ec:	bfcc      	ite	gt
 80066ee:	2400      	movgt	r4, #0
 80066f0:	2401      	movle	r4, #1
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d863      	bhi.n	80067be <_dtoa_r+0x296>
 80066f6:	e8df f003 	tbb	[pc, r3]
 80066fa:	372a      	.short	0x372a
 80066fc:	5535      	.short	0x5535
 80066fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006702:	441e      	add	r6, r3
 8006704:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006708:	2b20      	cmp	r3, #32
 800670a:	bfc1      	itttt	gt
 800670c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006710:	409f      	lslgt	r7, r3
 8006712:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006716:	fa24 f303 	lsrgt.w	r3, r4, r3
 800671a:	bfd6      	itet	le
 800671c:	f1c3 0320 	rsble	r3, r3, #32
 8006720:	ea47 0003 	orrgt.w	r0, r7, r3
 8006724:	fa04 f003 	lslle.w	r0, r4, r3
 8006728:	f7f9 fef4 	bl	8000514 <__aeabi_ui2d>
 800672c:	2201      	movs	r2, #1
 800672e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006732:	3e01      	subs	r6, #1
 8006734:	9214      	str	r2, [sp, #80]	@ 0x50
 8006736:	e777      	b.n	8006628 <_dtoa_r+0x100>
 8006738:	2301      	movs	r3, #1
 800673a:	e7b8      	b.n	80066ae <_dtoa_r+0x186>
 800673c:	9012      	str	r0, [sp, #72]	@ 0x48
 800673e:	e7b7      	b.n	80066b0 <_dtoa_r+0x188>
 8006740:	427b      	negs	r3, r7
 8006742:	930a      	str	r3, [sp, #40]	@ 0x28
 8006744:	2300      	movs	r3, #0
 8006746:	eba8 0807 	sub.w	r8, r8, r7
 800674a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800674c:	e7c4      	b.n	80066d8 <_dtoa_r+0x1b0>
 800674e:	2300      	movs	r3, #0
 8006750:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006754:	2b00      	cmp	r3, #0
 8006756:	dc35      	bgt.n	80067c4 <_dtoa_r+0x29c>
 8006758:	2301      	movs	r3, #1
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	9307      	str	r3, [sp, #28]
 800675e:	461a      	mov	r2, r3
 8006760:	920e      	str	r2, [sp, #56]	@ 0x38
 8006762:	e00b      	b.n	800677c <_dtoa_r+0x254>
 8006764:	2301      	movs	r3, #1
 8006766:	e7f3      	b.n	8006750 <_dtoa_r+0x228>
 8006768:	2300      	movs	r3, #0
 800676a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800676c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	bfb8      	it	lt
 800677a:	2301      	movlt	r3, #1
 800677c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006780:	2100      	movs	r1, #0
 8006782:	2204      	movs	r2, #4
 8006784:	f102 0514 	add.w	r5, r2, #20
 8006788:	429d      	cmp	r5, r3
 800678a:	d91f      	bls.n	80067cc <_dtoa_r+0x2a4>
 800678c:	6041      	str	r1, [r0, #4]
 800678e:	4658      	mov	r0, fp
 8006790:	f000 fd8e 	bl	80072b0 <_Balloc>
 8006794:	4682      	mov	sl, r0
 8006796:	2800      	cmp	r0, #0
 8006798:	d13c      	bne.n	8006814 <_dtoa_r+0x2ec>
 800679a:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <_dtoa_r+0x2e0>)
 800679c:	4602      	mov	r2, r0
 800679e:	f240 11af 	movw	r1, #431	@ 0x1af
 80067a2:	e6d8      	b.n	8006556 <_dtoa_r+0x2e>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e7e0      	b.n	800676a <_dtoa_r+0x242>
 80067a8:	2401      	movs	r4, #1
 80067aa:	2300      	movs	r3, #0
 80067ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80067b0:	f04f 33ff 	mov.w	r3, #4294967295
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	9307      	str	r3, [sp, #28]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2312      	movs	r3, #18
 80067bc:	e7d0      	b.n	8006760 <_dtoa_r+0x238>
 80067be:	2301      	movs	r3, #1
 80067c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067c2:	e7f5      	b.n	80067b0 <_dtoa_r+0x288>
 80067c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	9307      	str	r3, [sp, #28]
 80067ca:	e7d7      	b.n	800677c <_dtoa_r+0x254>
 80067cc:	3101      	adds	r1, #1
 80067ce:	0052      	lsls	r2, r2, #1
 80067d0:	e7d8      	b.n	8006784 <_dtoa_r+0x25c>
 80067d2:	bf00      	nop
 80067d4:	f3af 8000 	nop.w
 80067d8:	636f4361 	.word	0x636f4361
 80067dc:	3fd287a7 	.word	0x3fd287a7
 80067e0:	8b60c8b3 	.word	0x8b60c8b3
 80067e4:	3fc68a28 	.word	0x3fc68a28
 80067e8:	509f79fb 	.word	0x509f79fb
 80067ec:	3fd34413 	.word	0x3fd34413
 80067f0:	0800aa0e 	.word	0x0800aa0e
 80067f4:	0800aa25 	.word	0x0800aa25
 80067f8:	7ff00000 	.word	0x7ff00000
 80067fc:	0800a9d9 	.word	0x0800a9d9
 8006800:	3ff80000 	.word	0x3ff80000
 8006804:	0800ab20 	.word	0x0800ab20
 8006808:	0800aa7d 	.word	0x0800aa7d
 800680c:	0800aa0a 	.word	0x0800aa0a
 8006810:	0800a9d8 	.word	0x0800a9d8
 8006814:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006818:	6018      	str	r0, [r3, #0]
 800681a:	9b07      	ldr	r3, [sp, #28]
 800681c:	2b0e      	cmp	r3, #14
 800681e:	f200 80a4 	bhi.w	800696a <_dtoa_r+0x442>
 8006822:	2c00      	cmp	r4, #0
 8006824:	f000 80a1 	beq.w	800696a <_dtoa_r+0x442>
 8006828:	2f00      	cmp	r7, #0
 800682a:	dd33      	ble.n	8006894 <_dtoa_r+0x36c>
 800682c:	4bad      	ldr	r3, [pc, #692]	@ (8006ae4 <_dtoa_r+0x5bc>)
 800682e:	f007 020f 	and.w	r2, r7, #15
 8006832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006836:	ed93 7b00 	vldr	d7, [r3]
 800683a:	05f8      	lsls	r0, r7, #23
 800683c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006840:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006844:	d516      	bpl.n	8006874 <_dtoa_r+0x34c>
 8006846:	4ba8      	ldr	r3, [pc, #672]	@ (8006ae8 <_dtoa_r+0x5c0>)
 8006848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800684c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006850:	f7fa f804 	bl	800085c <__aeabi_ddiv>
 8006854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006858:	f004 040f 	and.w	r4, r4, #15
 800685c:	2603      	movs	r6, #3
 800685e:	4da2      	ldr	r5, [pc, #648]	@ (8006ae8 <_dtoa_r+0x5c0>)
 8006860:	b954      	cbnz	r4, 8006878 <_dtoa_r+0x350>
 8006862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800686a:	f7f9 fff7 	bl	800085c <__aeabi_ddiv>
 800686e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006872:	e028      	b.n	80068c6 <_dtoa_r+0x39e>
 8006874:	2602      	movs	r6, #2
 8006876:	e7f2      	b.n	800685e <_dtoa_r+0x336>
 8006878:	07e1      	lsls	r1, r4, #31
 800687a:	d508      	bpl.n	800688e <_dtoa_r+0x366>
 800687c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006880:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006884:	f7f9 fec0 	bl	8000608 <__aeabi_dmul>
 8006888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800688c:	3601      	adds	r6, #1
 800688e:	1064      	asrs	r4, r4, #1
 8006890:	3508      	adds	r5, #8
 8006892:	e7e5      	b.n	8006860 <_dtoa_r+0x338>
 8006894:	f000 80d2 	beq.w	8006a3c <_dtoa_r+0x514>
 8006898:	427c      	negs	r4, r7
 800689a:	4b92      	ldr	r3, [pc, #584]	@ (8006ae4 <_dtoa_r+0x5bc>)
 800689c:	4d92      	ldr	r5, [pc, #584]	@ (8006ae8 <_dtoa_r+0x5c0>)
 800689e:	f004 020f 	and.w	r2, r4, #15
 80068a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ae:	f7f9 feab 	bl	8000608 <__aeabi_dmul>
 80068b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b6:	1124      	asrs	r4, r4, #4
 80068b8:	2300      	movs	r3, #0
 80068ba:	2602      	movs	r6, #2
 80068bc:	2c00      	cmp	r4, #0
 80068be:	f040 80b2 	bne.w	8006a26 <_dtoa_r+0x4fe>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1d3      	bne.n	800686e <_dtoa_r+0x346>
 80068c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80b7 	beq.w	8006a40 <_dtoa_r+0x518>
 80068d2:	4b86      	ldr	r3, [pc, #536]	@ (8006aec <_dtoa_r+0x5c4>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	4620      	mov	r0, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	f7fa f907 	bl	8000aec <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f000 80ae 	beq.w	8006a40 <_dtoa_r+0x518>
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80aa 	beq.w	8006a40 <_dtoa_r+0x518>
 80068ec:	9b00      	ldr	r3, [sp, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	dd37      	ble.n	8006962 <_dtoa_r+0x43a>
 80068f2:	1e7b      	subs	r3, r7, #1
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	4620      	mov	r0, r4
 80068f8:	4b7d      	ldr	r3, [pc, #500]	@ (8006af0 <_dtoa_r+0x5c8>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	4629      	mov	r1, r5
 80068fe:	f7f9 fe83 	bl	8000608 <__aeabi_dmul>
 8006902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006906:	9c00      	ldr	r4, [sp, #0]
 8006908:	3601      	adds	r6, #1
 800690a:	4630      	mov	r0, r6
 800690c:	f7f9 fe12 	bl	8000534 <__aeabi_i2d>
 8006910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006914:	f7f9 fe78 	bl	8000608 <__aeabi_dmul>
 8006918:	4b76      	ldr	r3, [pc, #472]	@ (8006af4 <_dtoa_r+0x5cc>)
 800691a:	2200      	movs	r2, #0
 800691c:	f7f9 fcbe 	bl	800029c <__adddf3>
 8006920:	4605      	mov	r5, r0
 8006922:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006926:	2c00      	cmp	r4, #0
 8006928:	f040 808d 	bne.w	8006a46 <_dtoa_r+0x51e>
 800692c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006930:	4b71      	ldr	r3, [pc, #452]	@ (8006af8 <_dtoa_r+0x5d0>)
 8006932:	2200      	movs	r2, #0
 8006934:	f7f9 fcb0 	bl	8000298 <__aeabi_dsub>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006940:	462a      	mov	r2, r5
 8006942:	4633      	mov	r3, r6
 8006944:	f7fa f8f0 	bl	8000b28 <__aeabi_dcmpgt>
 8006948:	2800      	cmp	r0, #0
 800694a:	f040 828b 	bne.w	8006e64 <_dtoa_r+0x93c>
 800694e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006952:	462a      	mov	r2, r5
 8006954:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006958:	f7fa f8c8 	bl	8000aec <__aeabi_dcmplt>
 800695c:	2800      	cmp	r0, #0
 800695e:	f040 8128 	bne.w	8006bb2 <_dtoa_r+0x68a>
 8006962:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006966:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800696a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800696c:	2b00      	cmp	r3, #0
 800696e:	f2c0 815a 	blt.w	8006c26 <_dtoa_r+0x6fe>
 8006972:	2f0e      	cmp	r7, #14
 8006974:	f300 8157 	bgt.w	8006c26 <_dtoa_r+0x6fe>
 8006978:	4b5a      	ldr	r3, [pc, #360]	@ (8006ae4 <_dtoa_r+0x5bc>)
 800697a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800697e:	ed93 7b00 	vldr	d7, [r3]
 8006982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	ed8d 7b00 	vstr	d7, [sp]
 800698a:	da03      	bge.n	8006994 <_dtoa_r+0x46c>
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f340 8101 	ble.w	8006b96 <_dtoa_r+0x66e>
 8006994:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006998:	4656      	mov	r6, sl
 800699a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	f7f9 ff5b 	bl	800085c <__aeabi_ddiv>
 80069a6:	f7fa f8df 	bl	8000b68 <__aeabi_d2iz>
 80069aa:	4680      	mov	r8, r0
 80069ac:	f7f9 fdc2 	bl	8000534 <__aeabi_i2d>
 80069b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069b4:	f7f9 fe28 	bl	8000608 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069c4:	f7f9 fc68 	bl	8000298 <__aeabi_dsub>
 80069c8:	f806 4b01 	strb.w	r4, [r6], #1
 80069cc:	9d07      	ldr	r5, [sp, #28]
 80069ce:	eba6 040a 	sub.w	r4, r6, sl
 80069d2:	42a5      	cmp	r5, r4
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	f040 8117 	bne.w	8006c0a <_dtoa_r+0x6e2>
 80069dc:	f7f9 fc5e 	bl	800029c <__adddf3>
 80069e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	f7fa f89e 	bl	8000b28 <__aeabi_dcmpgt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 80f9 	bne.w	8006be4 <_dtoa_r+0x6bc>
 80069f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7fa f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80069fe:	b118      	cbz	r0, 8006a08 <_dtoa_r+0x4e0>
 8006a00:	f018 0f01 	tst.w	r8, #1
 8006a04:	f040 80ee 	bne.w	8006be4 <_dtoa_r+0x6bc>
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4658      	mov	r0, fp
 8006a0c:	f000 fc90 	bl	8007330 <_Bfree>
 8006a10:	2300      	movs	r3, #0
 8006a12:	7033      	strb	r3, [r6, #0]
 8006a14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a16:	3701      	adds	r7, #1
 8006a18:	601f      	str	r7, [r3, #0]
 8006a1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 831d 	beq.w	800705c <_dtoa_r+0xb34>
 8006a22:	601e      	str	r6, [r3, #0]
 8006a24:	e31a      	b.n	800705c <_dtoa_r+0xb34>
 8006a26:	07e2      	lsls	r2, r4, #31
 8006a28:	d505      	bpl.n	8006a36 <_dtoa_r+0x50e>
 8006a2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a2e:	f7f9 fdeb 	bl	8000608 <__aeabi_dmul>
 8006a32:	3601      	adds	r6, #1
 8006a34:	2301      	movs	r3, #1
 8006a36:	1064      	asrs	r4, r4, #1
 8006a38:	3508      	adds	r5, #8
 8006a3a:	e73f      	b.n	80068bc <_dtoa_r+0x394>
 8006a3c:	2602      	movs	r6, #2
 8006a3e:	e742      	b.n	80068c6 <_dtoa_r+0x39e>
 8006a40:	9c07      	ldr	r4, [sp, #28]
 8006a42:	9704      	str	r7, [sp, #16]
 8006a44:	e761      	b.n	800690a <_dtoa_r+0x3e2>
 8006a46:	4b27      	ldr	r3, [pc, #156]	@ (8006ae4 <_dtoa_r+0x5bc>)
 8006a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a52:	4454      	add	r4, sl
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d053      	beq.n	8006b00 <_dtoa_r+0x5d8>
 8006a58:	4928      	ldr	r1, [pc, #160]	@ (8006afc <_dtoa_r+0x5d4>)
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f7f9 fefe 	bl	800085c <__aeabi_ddiv>
 8006a60:	4633      	mov	r3, r6
 8006a62:	462a      	mov	r2, r5
 8006a64:	f7f9 fc18 	bl	8000298 <__aeabi_dsub>
 8006a68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a6c:	4656      	mov	r6, sl
 8006a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a72:	f7fa f879 	bl	8000b68 <__aeabi_d2iz>
 8006a76:	4605      	mov	r5, r0
 8006a78:	f7f9 fd5c 	bl	8000534 <__aeabi_i2d>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a84:	f7f9 fc08 	bl	8000298 <__aeabi_dsub>
 8006a88:	3530      	adds	r5, #48	@ 0x30
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a92:	f806 5b01 	strb.w	r5, [r6], #1
 8006a96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a9a:	f7fa f827 	bl	8000aec <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d171      	bne.n	8006b86 <_dtoa_r+0x65e>
 8006aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa6:	4911      	ldr	r1, [pc, #68]	@ (8006aec <_dtoa_r+0x5c4>)
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f7f9 fbf5 	bl	8000298 <__aeabi_dsub>
 8006aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ab2:	f7fa f81b 	bl	8000aec <__aeabi_dcmplt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f040 8095 	bne.w	8006be6 <_dtoa_r+0x6be>
 8006abc:	42a6      	cmp	r6, r4
 8006abe:	f43f af50 	beq.w	8006962 <_dtoa_r+0x43a>
 8006ac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8006af0 <_dtoa_r+0x5c8>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f7f9 fd9d 	bl	8000608 <__aeabi_dmul>
 8006ace:	4b08      	ldr	r3, [pc, #32]	@ (8006af0 <_dtoa_r+0x5c8>)
 8006ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ada:	f7f9 fd95 	bl	8000608 <__aeabi_dmul>
 8006ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae2:	e7c4      	b.n	8006a6e <_dtoa_r+0x546>
 8006ae4:	0800ab20 	.word	0x0800ab20
 8006ae8:	0800aaf8 	.word	0x0800aaf8
 8006aec:	3ff00000 	.word	0x3ff00000
 8006af0:	40240000 	.word	0x40240000
 8006af4:	401c0000 	.word	0x401c0000
 8006af8:	40140000 	.word	0x40140000
 8006afc:	3fe00000 	.word	0x3fe00000
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7f9 fd80 	bl	8000608 <__aeabi_dmul>
 8006b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006b0e:	4656      	mov	r6, sl
 8006b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b14:	f7fa f828 	bl	8000b68 <__aeabi_d2iz>
 8006b18:	4605      	mov	r5, r0
 8006b1a:	f7f9 fd0b 	bl	8000534 <__aeabi_i2d>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b26:	f7f9 fbb7 	bl	8000298 <__aeabi_dsub>
 8006b2a:	3530      	adds	r5, #48	@ 0x30
 8006b2c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	42a6      	cmp	r6, r4
 8006b36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	d124      	bne.n	8006b8a <_dtoa_r+0x662>
 8006b40:	4bac      	ldr	r3, [pc, #688]	@ (8006df4 <_dtoa_r+0x8cc>)
 8006b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b46:	f7f9 fba9 	bl	800029c <__adddf3>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b52:	f7f9 ffe9 	bl	8000b28 <__aeabi_dcmpgt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d145      	bne.n	8006be6 <_dtoa_r+0x6be>
 8006b5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b5e:	49a5      	ldr	r1, [pc, #660]	@ (8006df4 <_dtoa_r+0x8cc>)
 8006b60:	2000      	movs	r0, #0
 8006b62:	f7f9 fb99 	bl	8000298 <__aeabi_dsub>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b6e:	f7f9 ffbd 	bl	8000aec <__aeabi_dcmplt>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	f43f aef5 	beq.w	8006962 <_dtoa_r+0x43a>
 8006b78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b7a:	1e73      	subs	r3, r6, #1
 8006b7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b82:	2b30      	cmp	r3, #48	@ 0x30
 8006b84:	d0f8      	beq.n	8006b78 <_dtoa_r+0x650>
 8006b86:	9f04      	ldr	r7, [sp, #16]
 8006b88:	e73e      	b.n	8006a08 <_dtoa_r+0x4e0>
 8006b8a:	4b9b      	ldr	r3, [pc, #620]	@ (8006df8 <_dtoa_r+0x8d0>)
 8006b8c:	f7f9 fd3c 	bl	8000608 <__aeabi_dmul>
 8006b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b94:	e7bc      	b.n	8006b10 <_dtoa_r+0x5e8>
 8006b96:	d10c      	bne.n	8006bb2 <_dtoa_r+0x68a>
 8006b98:	4b98      	ldr	r3, [pc, #608]	@ (8006dfc <_dtoa_r+0x8d4>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ba0:	f7f9 fd32 	bl	8000608 <__aeabi_dmul>
 8006ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ba8:	f7f9 ffb4 	bl	8000b14 <__aeabi_dcmpge>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f000 8157 	beq.w	8006e60 <_dtoa_r+0x938>
 8006bb2:	2400      	movs	r4, #0
 8006bb4:	4625      	mov	r5, r4
 8006bb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	4656      	mov	r6, sl
 8006bbe:	2700      	movs	r7, #0
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4658      	mov	r0, fp
 8006bc4:	f000 fbb4 	bl	8007330 <_Bfree>
 8006bc8:	2d00      	cmp	r5, #0
 8006bca:	d0dc      	beq.n	8006b86 <_dtoa_r+0x65e>
 8006bcc:	b12f      	cbz	r7, 8006bda <_dtoa_r+0x6b2>
 8006bce:	42af      	cmp	r7, r5
 8006bd0:	d003      	beq.n	8006bda <_dtoa_r+0x6b2>
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	4658      	mov	r0, fp
 8006bd6:	f000 fbab 	bl	8007330 <_Bfree>
 8006bda:	4629      	mov	r1, r5
 8006bdc:	4658      	mov	r0, fp
 8006bde:	f000 fba7 	bl	8007330 <_Bfree>
 8006be2:	e7d0      	b.n	8006b86 <_dtoa_r+0x65e>
 8006be4:	9704      	str	r7, [sp, #16]
 8006be6:	4633      	mov	r3, r6
 8006be8:	461e      	mov	r6, r3
 8006bea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bee:	2a39      	cmp	r2, #57	@ 0x39
 8006bf0:	d107      	bne.n	8006c02 <_dtoa_r+0x6da>
 8006bf2:	459a      	cmp	sl, r3
 8006bf4:	d1f8      	bne.n	8006be8 <_dtoa_r+0x6c0>
 8006bf6:	9a04      	ldr	r2, [sp, #16]
 8006bf8:	3201      	adds	r2, #1
 8006bfa:	9204      	str	r2, [sp, #16]
 8006bfc:	2230      	movs	r2, #48	@ 0x30
 8006bfe:	f88a 2000 	strb.w	r2, [sl]
 8006c02:	781a      	ldrb	r2, [r3, #0]
 8006c04:	3201      	adds	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e7bd      	b.n	8006b86 <_dtoa_r+0x65e>
 8006c0a:	4b7b      	ldr	r3, [pc, #492]	@ (8006df8 <_dtoa_r+0x8d0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f7f9 fcfb 	bl	8000608 <__aeabi_dmul>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	460d      	mov	r5, r1
 8006c1a:	f7f9 ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f43f aebb 	beq.w	800699a <_dtoa_r+0x472>
 8006c24:	e6f0      	b.n	8006a08 <_dtoa_r+0x4e0>
 8006c26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	f000 80db 	beq.w	8006de4 <_dtoa_r+0x8bc>
 8006c2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c30:	2a01      	cmp	r2, #1
 8006c32:	f300 80bf 	bgt.w	8006db4 <_dtoa_r+0x88c>
 8006c36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	f000 80b7 	beq.w	8006dac <_dtoa_r+0x884>
 8006c3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c44:	4646      	mov	r6, r8
 8006c46:	9a08      	ldr	r2, [sp, #32]
 8006c48:	2101      	movs	r1, #1
 8006c4a:	441a      	add	r2, r3
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	4498      	add	r8, r3
 8006c50:	9208      	str	r2, [sp, #32]
 8006c52:	f000 fc6b 	bl	800752c <__i2b>
 8006c56:	4605      	mov	r5, r0
 8006c58:	b15e      	cbz	r6, 8006c72 <_dtoa_r+0x74a>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dd08      	ble.n	8006c72 <_dtoa_r+0x74a>
 8006c60:	42b3      	cmp	r3, r6
 8006c62:	9a08      	ldr	r2, [sp, #32]
 8006c64:	bfa8      	it	ge
 8006c66:	4633      	movge	r3, r6
 8006c68:	eba8 0803 	sub.w	r8, r8, r3
 8006c6c:	1af6      	subs	r6, r6, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	9308      	str	r3, [sp, #32]
 8006c72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c74:	b1f3      	cbz	r3, 8006cb4 <_dtoa_r+0x78c>
 8006c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80b7 	beq.w	8006dec <_dtoa_r+0x8c4>
 8006c7e:	b18c      	cbz	r4, 8006ca4 <_dtoa_r+0x77c>
 8006c80:	4629      	mov	r1, r5
 8006c82:	4622      	mov	r2, r4
 8006c84:	4658      	mov	r0, fp
 8006c86:	f000 fd11 	bl	80076ac <__pow5mult>
 8006c8a:	464a      	mov	r2, r9
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	4605      	mov	r5, r0
 8006c90:	4658      	mov	r0, fp
 8006c92:	f000 fc61 	bl	8007558 <__multiply>
 8006c96:	4649      	mov	r1, r9
 8006c98:	9004      	str	r0, [sp, #16]
 8006c9a:	4658      	mov	r0, fp
 8006c9c:	f000 fb48 	bl	8007330 <_Bfree>
 8006ca0:	9b04      	ldr	r3, [sp, #16]
 8006ca2:	4699      	mov	r9, r3
 8006ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ca6:	1b1a      	subs	r2, r3, r4
 8006ca8:	d004      	beq.n	8006cb4 <_dtoa_r+0x78c>
 8006caa:	4649      	mov	r1, r9
 8006cac:	4658      	mov	r0, fp
 8006cae:	f000 fcfd 	bl	80076ac <__pow5mult>
 8006cb2:	4681      	mov	r9, r0
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	4658      	mov	r0, fp
 8006cb8:	f000 fc38 	bl	800752c <__i2b>
 8006cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 81cf 	beq.w	8007064 <_dtoa_r+0xb3c>
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	4601      	mov	r1, r0
 8006cca:	4658      	mov	r0, fp
 8006ccc:	f000 fcee 	bl	80076ac <__pow5mult>
 8006cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	f300 8095 	bgt.w	8006e04 <_dtoa_r+0x8dc>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 8087 	bne.w	8006df0 <_dtoa_r+0x8c8>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 8089 	bne.w	8006e00 <_dtoa_r+0x8d8>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cf4:	0d1b      	lsrs	r3, r3, #20
 8006cf6:	051b      	lsls	r3, r3, #20
 8006cf8:	b12b      	cbz	r3, 8006d06 <_dtoa_r+0x7de>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	9308      	str	r3, [sp, #32]
 8006d00:	f108 0801 	add.w	r8, r8, #1
 8006d04:	2301      	movs	r3, #1
 8006d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 81b0 	beq.w	8007070 <_dtoa_r+0xb48>
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d16:	6918      	ldr	r0, [r3, #16]
 8006d18:	f000 fbbc 	bl	8007494 <__hi0bits>
 8006d1c:	f1c0 0020 	rsb	r0, r0, #32
 8006d20:	9b08      	ldr	r3, [sp, #32]
 8006d22:	4418      	add	r0, r3
 8006d24:	f010 001f 	ands.w	r0, r0, #31
 8006d28:	d077      	beq.n	8006e1a <_dtoa_r+0x8f2>
 8006d2a:	f1c0 0320 	rsb	r3, r0, #32
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	dd6b      	ble.n	8006e0a <_dtoa_r+0x8e2>
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	f1c0 001c 	rsb	r0, r0, #28
 8006d38:	4403      	add	r3, r0
 8006d3a:	4480      	add	r8, r0
 8006d3c:	4406      	add	r6, r0
 8006d3e:	9308      	str	r3, [sp, #32]
 8006d40:	f1b8 0f00 	cmp.w	r8, #0
 8006d44:	dd05      	ble.n	8006d52 <_dtoa_r+0x82a>
 8006d46:	4649      	mov	r1, r9
 8006d48:	4642      	mov	r2, r8
 8006d4a:	4658      	mov	r0, fp
 8006d4c:	f000 fd08 	bl	8007760 <__lshift>
 8006d50:	4681      	mov	r9, r0
 8006d52:	9b08      	ldr	r3, [sp, #32]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dd05      	ble.n	8006d64 <_dtoa_r+0x83c>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	f000 fcff 	bl	8007760 <__lshift>
 8006d62:	4604      	mov	r4, r0
 8006d64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d059      	beq.n	8006e1e <_dtoa_r+0x8f6>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f000 fd63 	bl	8007838 <__mcmp>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	da53      	bge.n	8006e1e <_dtoa_r+0x8f6>
 8006d76:	1e7b      	subs	r3, r7, #1
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	220a      	movs	r2, #10
 8006d80:	4658      	mov	r0, fp
 8006d82:	f000 faf7 	bl	8007374 <__multadd>
 8006d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d88:	4681      	mov	r9, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 8172 	beq.w	8007074 <_dtoa_r+0xb4c>
 8006d90:	2300      	movs	r3, #0
 8006d92:	4629      	mov	r1, r5
 8006d94:	220a      	movs	r2, #10
 8006d96:	4658      	mov	r0, fp
 8006d98:	f000 faec 	bl	8007374 <__multadd>
 8006d9c:	9b00      	ldr	r3, [sp, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	4605      	mov	r5, r0
 8006da2:	dc67      	bgt.n	8006e74 <_dtoa_r+0x94c>
 8006da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dc41      	bgt.n	8006e2e <_dtoa_r+0x906>
 8006daa:	e063      	b.n	8006e74 <_dtoa_r+0x94c>
 8006dac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006db2:	e746      	b.n	8006c42 <_dtoa_r+0x71a>
 8006db4:	9b07      	ldr	r3, [sp, #28]
 8006db6:	1e5c      	subs	r4, r3, #1
 8006db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	bfbf      	itttt	lt
 8006dbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006dc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006dc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006dc4:	1ae3      	sublt	r3, r4, r3
 8006dc6:	bfb4      	ite	lt
 8006dc8:	18d2      	addlt	r2, r2, r3
 8006dca:	1b1c      	subge	r4, r3, r4
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	bfbc      	itt	lt
 8006dd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006dd2:	2400      	movlt	r4, #0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bfb5      	itete	lt
 8006dd8:	eba8 0603 	sublt.w	r6, r8, r3
 8006ddc:	9b07      	ldrge	r3, [sp, #28]
 8006dde:	2300      	movlt	r3, #0
 8006de0:	4646      	movge	r6, r8
 8006de2:	e730      	b.n	8006c46 <_dtoa_r+0x71e>
 8006de4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006de6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006de8:	4646      	mov	r6, r8
 8006dea:	e735      	b.n	8006c58 <_dtoa_r+0x730>
 8006dec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dee:	e75c      	b.n	8006caa <_dtoa_r+0x782>
 8006df0:	2300      	movs	r3, #0
 8006df2:	e788      	b.n	8006d06 <_dtoa_r+0x7de>
 8006df4:	3fe00000 	.word	0x3fe00000
 8006df8:	40240000 	.word	0x40240000
 8006dfc:	40140000 	.word	0x40140000
 8006e00:	9b02      	ldr	r3, [sp, #8]
 8006e02:	e780      	b.n	8006d06 <_dtoa_r+0x7de>
 8006e04:	2300      	movs	r3, #0
 8006e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e08:	e782      	b.n	8006d10 <_dtoa_r+0x7e8>
 8006e0a:	d099      	beq.n	8006d40 <_dtoa_r+0x818>
 8006e0c:	9a08      	ldr	r2, [sp, #32]
 8006e0e:	331c      	adds	r3, #28
 8006e10:	441a      	add	r2, r3
 8006e12:	4498      	add	r8, r3
 8006e14:	441e      	add	r6, r3
 8006e16:	9208      	str	r2, [sp, #32]
 8006e18:	e792      	b.n	8006d40 <_dtoa_r+0x818>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	e7f6      	b.n	8006e0c <_dtoa_r+0x8e4>
 8006e1e:	9b07      	ldr	r3, [sp, #28]
 8006e20:	9704      	str	r7, [sp, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dc20      	bgt.n	8006e68 <_dtoa_r+0x940>
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	dd1e      	ble.n	8006e6c <_dtoa_r+0x944>
 8006e2e:	9b00      	ldr	r3, [sp, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f47f aec0 	bne.w	8006bb6 <_dtoa_r+0x68e>
 8006e36:	4621      	mov	r1, r4
 8006e38:	2205      	movs	r2, #5
 8006e3a:	4658      	mov	r0, fp
 8006e3c:	f000 fa9a 	bl	8007374 <__multadd>
 8006e40:	4601      	mov	r1, r0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4648      	mov	r0, r9
 8006e46:	f000 fcf7 	bl	8007838 <__mcmp>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f77f aeb3 	ble.w	8006bb6 <_dtoa_r+0x68e>
 8006e50:	4656      	mov	r6, sl
 8006e52:	2331      	movs	r3, #49	@ 0x31
 8006e54:	f806 3b01 	strb.w	r3, [r6], #1
 8006e58:	9b04      	ldr	r3, [sp, #16]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	e6ae      	b.n	8006bbe <_dtoa_r+0x696>
 8006e60:	9c07      	ldr	r4, [sp, #28]
 8006e62:	9704      	str	r7, [sp, #16]
 8006e64:	4625      	mov	r5, r4
 8006e66:	e7f3      	b.n	8006e50 <_dtoa_r+0x928>
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8104 	beq.w	800707c <_dtoa_r+0xb54>
 8006e74:	2e00      	cmp	r6, #0
 8006e76:	dd05      	ble.n	8006e84 <_dtoa_r+0x95c>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4632      	mov	r2, r6
 8006e7c:	4658      	mov	r0, fp
 8006e7e:	f000 fc6f 	bl	8007760 <__lshift>
 8006e82:	4605      	mov	r5, r0
 8006e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d05a      	beq.n	8006f40 <_dtoa_r+0xa18>
 8006e8a:	6869      	ldr	r1, [r5, #4]
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	f000 fa0f 	bl	80072b0 <_Balloc>
 8006e92:	4606      	mov	r6, r0
 8006e94:	b928      	cbnz	r0, 8006ea2 <_dtoa_r+0x97a>
 8006e96:	4b84      	ldr	r3, [pc, #528]	@ (80070a8 <_dtoa_r+0xb80>)
 8006e98:	4602      	mov	r2, r0
 8006e9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e9e:	f7ff bb5a 	b.w	8006556 <_dtoa_r+0x2e>
 8006ea2:	692a      	ldr	r2, [r5, #16]
 8006ea4:	3202      	adds	r2, #2
 8006ea6:	0092      	lsls	r2, r2, #2
 8006ea8:	f105 010c 	add.w	r1, r5, #12
 8006eac:	300c      	adds	r0, #12
 8006eae:	f001 ff75 	bl	8008d9c <memcpy>
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	f000 fc52 	bl	8007760 <__lshift>
 8006ebc:	f10a 0301 	add.w	r3, sl, #1
 8006ec0:	9307      	str	r3, [sp, #28]
 8006ec2:	9b00      	ldr	r3, [sp, #0]
 8006ec4:	4453      	add	r3, sl
 8006ec6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ec8:	9b02      	ldr	r3, [sp, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	462f      	mov	r7, r5
 8006ed0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	9b07      	ldr	r3, [sp, #28]
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	4648      	mov	r0, r9
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	f7ff fa9b 	bl	8006418 <quorem>
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	9002      	str	r0, [sp, #8]
 8006ee6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006eea:	4648      	mov	r0, r9
 8006eec:	f000 fca4 	bl	8007838 <__mcmp>
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	9008      	str	r0, [sp, #32]
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	f000 fcba 	bl	8007870 <__mdiff>
 8006efc:	68c2      	ldr	r2, [r0, #12]
 8006efe:	4606      	mov	r6, r0
 8006f00:	bb02      	cbnz	r2, 8006f44 <_dtoa_r+0xa1c>
 8006f02:	4601      	mov	r1, r0
 8006f04:	4648      	mov	r0, r9
 8006f06:	f000 fc97 	bl	8007838 <__mcmp>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4658      	mov	r0, fp
 8006f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f12:	f000 fa0d 	bl	8007330 <_Bfree>
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f1a:	9e07      	ldr	r6, [sp, #28]
 8006f1c:	ea43 0102 	orr.w	r1, r3, r2
 8006f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f22:	4319      	orrs	r1, r3
 8006f24:	d110      	bne.n	8006f48 <_dtoa_r+0xa20>
 8006f26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f2a:	d029      	beq.n	8006f80 <_dtoa_r+0xa58>
 8006f2c:	9b08      	ldr	r3, [sp, #32]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	dd02      	ble.n	8006f38 <_dtoa_r+0xa10>
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f38:	9b00      	ldr	r3, [sp, #0]
 8006f3a:	f883 8000 	strb.w	r8, [r3]
 8006f3e:	e63f      	b.n	8006bc0 <_dtoa_r+0x698>
 8006f40:	4628      	mov	r0, r5
 8006f42:	e7bb      	b.n	8006ebc <_dtoa_r+0x994>
 8006f44:	2201      	movs	r2, #1
 8006f46:	e7e1      	b.n	8006f0c <_dtoa_r+0x9e4>
 8006f48:	9b08      	ldr	r3, [sp, #32]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	db04      	blt.n	8006f58 <_dtoa_r+0xa30>
 8006f4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f50:	430b      	orrs	r3, r1
 8006f52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f54:	430b      	orrs	r3, r1
 8006f56:	d120      	bne.n	8006f9a <_dtoa_r+0xa72>
 8006f58:	2a00      	cmp	r2, #0
 8006f5a:	dded      	ble.n	8006f38 <_dtoa_r+0xa10>
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4658      	mov	r0, fp
 8006f62:	f000 fbfd 	bl	8007760 <__lshift>
 8006f66:	4621      	mov	r1, r4
 8006f68:	4681      	mov	r9, r0
 8006f6a:	f000 fc65 	bl	8007838 <__mcmp>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	dc03      	bgt.n	8006f7a <_dtoa_r+0xa52>
 8006f72:	d1e1      	bne.n	8006f38 <_dtoa_r+0xa10>
 8006f74:	f018 0f01 	tst.w	r8, #1
 8006f78:	d0de      	beq.n	8006f38 <_dtoa_r+0xa10>
 8006f7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f7e:	d1d8      	bne.n	8006f32 <_dtoa_r+0xa0a>
 8006f80:	9a00      	ldr	r2, [sp, #0]
 8006f82:	2339      	movs	r3, #57	@ 0x39
 8006f84:	7013      	strb	r3, [r2, #0]
 8006f86:	4633      	mov	r3, r6
 8006f88:	461e      	mov	r6, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f90:	2a39      	cmp	r2, #57	@ 0x39
 8006f92:	d052      	beq.n	800703a <_dtoa_r+0xb12>
 8006f94:	3201      	adds	r2, #1
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e612      	b.n	8006bc0 <_dtoa_r+0x698>
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	dd07      	ble.n	8006fae <_dtoa_r+0xa86>
 8006f9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006fa2:	d0ed      	beq.n	8006f80 <_dtoa_r+0xa58>
 8006fa4:	9a00      	ldr	r2, [sp, #0]
 8006fa6:	f108 0301 	add.w	r3, r8, #1
 8006faa:	7013      	strb	r3, [r2, #0]
 8006fac:	e608      	b.n	8006bc0 <_dtoa_r+0x698>
 8006fae:	9b07      	ldr	r3, [sp, #28]
 8006fb0:	9a07      	ldr	r2, [sp, #28]
 8006fb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d028      	beq.n	800700e <_dtoa_r+0xae6>
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	4658      	mov	r0, fp
 8006fc4:	f000 f9d6 	bl	8007374 <__multadd>
 8006fc8:	42af      	cmp	r7, r5
 8006fca:	4681      	mov	r9, r0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	f04f 020a 	mov.w	r2, #10
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	4658      	mov	r0, fp
 8006fd8:	d107      	bne.n	8006fea <_dtoa_r+0xac2>
 8006fda:	f000 f9cb 	bl	8007374 <__multadd>
 8006fde:	4607      	mov	r7, r0
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	9b07      	ldr	r3, [sp, #28]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	9307      	str	r3, [sp, #28]
 8006fe8:	e774      	b.n	8006ed4 <_dtoa_r+0x9ac>
 8006fea:	f000 f9c3 	bl	8007374 <__multadd>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	220a      	movs	r2, #10
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f000 f9bc 	bl	8007374 <__multadd>
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	e7f0      	b.n	8006fe2 <_dtoa_r+0xaba>
 8007000:	9b00      	ldr	r3, [sp, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfcc      	ite	gt
 8007006:	461e      	movgt	r6, r3
 8007008:	2601      	movle	r6, #1
 800700a:	4456      	add	r6, sl
 800700c:	2700      	movs	r7, #0
 800700e:	4649      	mov	r1, r9
 8007010:	2201      	movs	r2, #1
 8007012:	4658      	mov	r0, fp
 8007014:	f000 fba4 	bl	8007760 <__lshift>
 8007018:	4621      	mov	r1, r4
 800701a:	4681      	mov	r9, r0
 800701c:	f000 fc0c 	bl	8007838 <__mcmp>
 8007020:	2800      	cmp	r0, #0
 8007022:	dcb0      	bgt.n	8006f86 <_dtoa_r+0xa5e>
 8007024:	d102      	bne.n	800702c <_dtoa_r+0xb04>
 8007026:	f018 0f01 	tst.w	r8, #1
 800702a:	d1ac      	bne.n	8006f86 <_dtoa_r+0xa5e>
 800702c:	4633      	mov	r3, r6
 800702e:	461e      	mov	r6, r3
 8007030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007034:	2a30      	cmp	r2, #48	@ 0x30
 8007036:	d0fa      	beq.n	800702e <_dtoa_r+0xb06>
 8007038:	e5c2      	b.n	8006bc0 <_dtoa_r+0x698>
 800703a:	459a      	cmp	sl, r3
 800703c:	d1a4      	bne.n	8006f88 <_dtoa_r+0xa60>
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	3301      	adds	r3, #1
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	2331      	movs	r3, #49	@ 0x31
 8007046:	f88a 3000 	strb.w	r3, [sl]
 800704a:	e5b9      	b.n	8006bc0 <_dtoa_r+0x698>
 800704c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800704e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80070ac <_dtoa_r+0xb84>
 8007052:	b11b      	cbz	r3, 800705c <_dtoa_r+0xb34>
 8007054:	f10a 0308 	add.w	r3, sl, #8
 8007058:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	4650      	mov	r0, sl
 800705e:	b019      	add	sp, #100	@ 0x64
 8007060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007066:	2b01      	cmp	r3, #1
 8007068:	f77f ae37 	ble.w	8006cda <_dtoa_r+0x7b2>
 800706c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800706e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007070:	2001      	movs	r0, #1
 8007072:	e655      	b.n	8006d20 <_dtoa_r+0x7f8>
 8007074:	9b00      	ldr	r3, [sp, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f77f aed6 	ble.w	8006e28 <_dtoa_r+0x900>
 800707c:	4656      	mov	r6, sl
 800707e:	4621      	mov	r1, r4
 8007080:	4648      	mov	r0, r9
 8007082:	f7ff f9c9 	bl	8006418 <quorem>
 8007086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800708a:	f806 8b01 	strb.w	r8, [r6], #1
 800708e:	9b00      	ldr	r3, [sp, #0]
 8007090:	eba6 020a 	sub.w	r2, r6, sl
 8007094:	4293      	cmp	r3, r2
 8007096:	ddb3      	ble.n	8007000 <_dtoa_r+0xad8>
 8007098:	4649      	mov	r1, r9
 800709a:	2300      	movs	r3, #0
 800709c:	220a      	movs	r2, #10
 800709e:	4658      	mov	r0, fp
 80070a0:	f000 f968 	bl	8007374 <__multadd>
 80070a4:	4681      	mov	r9, r0
 80070a6:	e7ea      	b.n	800707e <_dtoa_r+0xb56>
 80070a8:	0800aa7d 	.word	0x0800aa7d
 80070ac:	0800aa01 	.word	0x0800aa01

080070b0 <_free_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4605      	mov	r5, r0
 80070b4:	2900      	cmp	r1, #0
 80070b6:	d041      	beq.n	800713c <_free_r+0x8c>
 80070b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070bc:	1f0c      	subs	r4, r1, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfb8      	it	lt
 80070c2:	18e4      	addlt	r4, r4, r3
 80070c4:	f000 f8e8 	bl	8007298 <__malloc_lock>
 80070c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007140 <_free_r+0x90>)
 80070ca:	6813      	ldr	r3, [r2, #0]
 80070cc:	b933      	cbnz	r3, 80070dc <_free_r+0x2c>
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	6014      	str	r4, [r2, #0]
 80070d2:	4628      	mov	r0, r5
 80070d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d8:	f000 b8e4 	b.w	80072a4 <__malloc_unlock>
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d908      	bls.n	80070f2 <_free_r+0x42>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	1821      	adds	r1, r4, r0
 80070e4:	428b      	cmp	r3, r1
 80070e6:	bf01      	itttt	eq
 80070e8:	6819      	ldreq	r1, [r3, #0]
 80070ea:	685b      	ldreq	r3, [r3, #4]
 80070ec:	1809      	addeq	r1, r1, r0
 80070ee:	6021      	streq	r1, [r4, #0]
 80070f0:	e7ed      	b.n	80070ce <_free_r+0x1e>
 80070f2:	461a      	mov	r2, r3
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b10b      	cbz	r3, 80070fc <_free_r+0x4c>
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d9fa      	bls.n	80070f2 <_free_r+0x42>
 80070fc:	6811      	ldr	r1, [r2, #0]
 80070fe:	1850      	adds	r0, r2, r1
 8007100:	42a0      	cmp	r0, r4
 8007102:	d10b      	bne.n	800711c <_free_r+0x6c>
 8007104:	6820      	ldr	r0, [r4, #0]
 8007106:	4401      	add	r1, r0
 8007108:	1850      	adds	r0, r2, r1
 800710a:	4283      	cmp	r3, r0
 800710c:	6011      	str	r1, [r2, #0]
 800710e:	d1e0      	bne.n	80070d2 <_free_r+0x22>
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	6053      	str	r3, [r2, #4]
 8007116:	4408      	add	r0, r1
 8007118:	6010      	str	r0, [r2, #0]
 800711a:	e7da      	b.n	80070d2 <_free_r+0x22>
 800711c:	d902      	bls.n	8007124 <_free_r+0x74>
 800711e:	230c      	movs	r3, #12
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	e7d6      	b.n	80070d2 <_free_r+0x22>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	1821      	adds	r1, r4, r0
 8007128:	428b      	cmp	r3, r1
 800712a:	bf04      	itt	eq
 800712c:	6819      	ldreq	r1, [r3, #0]
 800712e:	685b      	ldreq	r3, [r3, #4]
 8007130:	6063      	str	r3, [r4, #4]
 8007132:	bf04      	itt	eq
 8007134:	1809      	addeq	r1, r1, r0
 8007136:	6021      	streq	r1, [r4, #0]
 8007138:	6054      	str	r4, [r2, #4]
 800713a:	e7ca      	b.n	80070d2 <_free_r+0x22>
 800713c:	bd38      	pop	{r3, r4, r5, pc}
 800713e:	bf00      	nop
 8007140:	20000d40 	.word	0x20000d40

08007144 <malloc>:
 8007144:	4b02      	ldr	r3, [pc, #8]	@ (8007150 <malloc+0xc>)
 8007146:	4601      	mov	r1, r0
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f000 b825 	b.w	8007198 <_malloc_r>
 800714e:	bf00      	nop
 8007150:	20000018 	.word	0x20000018

08007154 <sbrk_aligned>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	4e0f      	ldr	r6, [pc, #60]	@ (8007194 <sbrk_aligned+0x40>)
 8007158:	460c      	mov	r4, r1
 800715a:	6831      	ldr	r1, [r6, #0]
 800715c:	4605      	mov	r5, r0
 800715e:	b911      	cbnz	r1, 8007166 <sbrk_aligned+0x12>
 8007160:	f001 fe0c 	bl	8008d7c <_sbrk_r>
 8007164:	6030      	str	r0, [r6, #0]
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	f001 fe07 	bl	8008d7c <_sbrk_r>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	d103      	bne.n	800717a <sbrk_aligned+0x26>
 8007172:	f04f 34ff 	mov.w	r4, #4294967295
 8007176:	4620      	mov	r0, r4
 8007178:	bd70      	pop	{r4, r5, r6, pc}
 800717a:	1cc4      	adds	r4, r0, #3
 800717c:	f024 0403 	bic.w	r4, r4, #3
 8007180:	42a0      	cmp	r0, r4
 8007182:	d0f8      	beq.n	8007176 <sbrk_aligned+0x22>
 8007184:	1a21      	subs	r1, r4, r0
 8007186:	4628      	mov	r0, r5
 8007188:	f001 fdf8 	bl	8008d7c <_sbrk_r>
 800718c:	3001      	adds	r0, #1
 800718e:	d1f2      	bne.n	8007176 <sbrk_aligned+0x22>
 8007190:	e7ef      	b.n	8007172 <sbrk_aligned+0x1e>
 8007192:	bf00      	nop
 8007194:	20000d3c 	.word	0x20000d3c

08007198 <_malloc_r>:
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	1ccd      	adds	r5, r1, #3
 800719e:	f025 0503 	bic.w	r5, r5, #3
 80071a2:	3508      	adds	r5, #8
 80071a4:	2d0c      	cmp	r5, #12
 80071a6:	bf38      	it	cc
 80071a8:	250c      	movcc	r5, #12
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	4606      	mov	r6, r0
 80071ae:	db01      	blt.n	80071b4 <_malloc_r+0x1c>
 80071b0:	42a9      	cmp	r1, r5
 80071b2:	d904      	bls.n	80071be <_malloc_r+0x26>
 80071b4:	230c      	movs	r3, #12
 80071b6:	6033      	str	r3, [r6, #0]
 80071b8:	2000      	movs	r0, #0
 80071ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007294 <_malloc_r+0xfc>
 80071c2:	f000 f869 	bl	8007298 <__malloc_lock>
 80071c6:	f8d8 3000 	ldr.w	r3, [r8]
 80071ca:	461c      	mov	r4, r3
 80071cc:	bb44      	cbnz	r4, 8007220 <_malloc_r+0x88>
 80071ce:	4629      	mov	r1, r5
 80071d0:	4630      	mov	r0, r6
 80071d2:	f7ff ffbf 	bl	8007154 <sbrk_aligned>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	4604      	mov	r4, r0
 80071da:	d158      	bne.n	800728e <_malloc_r+0xf6>
 80071dc:	f8d8 4000 	ldr.w	r4, [r8]
 80071e0:	4627      	mov	r7, r4
 80071e2:	2f00      	cmp	r7, #0
 80071e4:	d143      	bne.n	800726e <_malloc_r+0xd6>
 80071e6:	2c00      	cmp	r4, #0
 80071e8:	d04b      	beq.n	8007282 <_malloc_r+0xea>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	4639      	mov	r1, r7
 80071ee:	4630      	mov	r0, r6
 80071f0:	eb04 0903 	add.w	r9, r4, r3
 80071f4:	f001 fdc2 	bl	8008d7c <_sbrk_r>
 80071f8:	4581      	cmp	r9, r0
 80071fa:	d142      	bne.n	8007282 <_malloc_r+0xea>
 80071fc:	6821      	ldr	r1, [r4, #0]
 80071fe:	1a6d      	subs	r5, r5, r1
 8007200:	4629      	mov	r1, r5
 8007202:	4630      	mov	r0, r6
 8007204:	f7ff ffa6 	bl	8007154 <sbrk_aligned>
 8007208:	3001      	adds	r0, #1
 800720a:	d03a      	beq.n	8007282 <_malloc_r+0xea>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	442b      	add	r3, r5
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	f8d8 3000 	ldr.w	r3, [r8]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	bb62      	cbnz	r2, 8007274 <_malloc_r+0xdc>
 800721a:	f8c8 7000 	str.w	r7, [r8]
 800721e:	e00f      	b.n	8007240 <_malloc_r+0xa8>
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	1b52      	subs	r2, r2, r5
 8007224:	d420      	bmi.n	8007268 <_malloc_r+0xd0>
 8007226:	2a0b      	cmp	r2, #11
 8007228:	d917      	bls.n	800725a <_malloc_r+0xc2>
 800722a:	1961      	adds	r1, r4, r5
 800722c:	42a3      	cmp	r3, r4
 800722e:	6025      	str	r5, [r4, #0]
 8007230:	bf18      	it	ne
 8007232:	6059      	strne	r1, [r3, #4]
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	bf08      	it	eq
 8007238:	f8c8 1000 	streq.w	r1, [r8]
 800723c:	5162      	str	r2, [r4, r5]
 800723e:	604b      	str	r3, [r1, #4]
 8007240:	4630      	mov	r0, r6
 8007242:	f000 f82f 	bl	80072a4 <__malloc_unlock>
 8007246:	f104 000b 	add.w	r0, r4, #11
 800724a:	1d23      	adds	r3, r4, #4
 800724c:	f020 0007 	bic.w	r0, r0, #7
 8007250:	1ac2      	subs	r2, r0, r3
 8007252:	bf1c      	itt	ne
 8007254:	1a1b      	subne	r3, r3, r0
 8007256:	50a3      	strne	r3, [r4, r2]
 8007258:	e7af      	b.n	80071ba <_malloc_r+0x22>
 800725a:	6862      	ldr	r2, [r4, #4]
 800725c:	42a3      	cmp	r3, r4
 800725e:	bf0c      	ite	eq
 8007260:	f8c8 2000 	streq.w	r2, [r8]
 8007264:	605a      	strne	r2, [r3, #4]
 8007266:	e7eb      	b.n	8007240 <_malloc_r+0xa8>
 8007268:	4623      	mov	r3, r4
 800726a:	6864      	ldr	r4, [r4, #4]
 800726c:	e7ae      	b.n	80071cc <_malloc_r+0x34>
 800726e:	463c      	mov	r4, r7
 8007270:	687f      	ldr	r7, [r7, #4]
 8007272:	e7b6      	b.n	80071e2 <_malloc_r+0x4a>
 8007274:	461a      	mov	r2, r3
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	42a3      	cmp	r3, r4
 800727a:	d1fb      	bne.n	8007274 <_malloc_r+0xdc>
 800727c:	2300      	movs	r3, #0
 800727e:	6053      	str	r3, [r2, #4]
 8007280:	e7de      	b.n	8007240 <_malloc_r+0xa8>
 8007282:	230c      	movs	r3, #12
 8007284:	6033      	str	r3, [r6, #0]
 8007286:	4630      	mov	r0, r6
 8007288:	f000 f80c 	bl	80072a4 <__malloc_unlock>
 800728c:	e794      	b.n	80071b8 <_malloc_r+0x20>
 800728e:	6005      	str	r5, [r0, #0]
 8007290:	e7d6      	b.n	8007240 <_malloc_r+0xa8>
 8007292:	bf00      	nop
 8007294:	20000d40 	.word	0x20000d40

08007298 <__malloc_lock>:
 8007298:	4801      	ldr	r0, [pc, #4]	@ (80072a0 <__malloc_lock+0x8>)
 800729a:	f7ff b8b4 	b.w	8006406 <__retarget_lock_acquire_recursive>
 800729e:	bf00      	nop
 80072a0:	20000d38 	.word	0x20000d38

080072a4 <__malloc_unlock>:
 80072a4:	4801      	ldr	r0, [pc, #4]	@ (80072ac <__malloc_unlock+0x8>)
 80072a6:	f7ff b8af 	b.w	8006408 <__retarget_lock_release_recursive>
 80072aa:	bf00      	nop
 80072ac:	20000d38 	.word	0x20000d38

080072b0 <_Balloc>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	69c6      	ldr	r6, [r0, #28]
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	b976      	cbnz	r6, 80072d8 <_Balloc+0x28>
 80072ba:	2010      	movs	r0, #16
 80072bc:	f7ff ff42 	bl	8007144 <malloc>
 80072c0:	4602      	mov	r2, r0
 80072c2:	61e0      	str	r0, [r4, #28]
 80072c4:	b920      	cbnz	r0, 80072d0 <_Balloc+0x20>
 80072c6:	4b18      	ldr	r3, [pc, #96]	@ (8007328 <_Balloc+0x78>)
 80072c8:	4818      	ldr	r0, [pc, #96]	@ (800732c <_Balloc+0x7c>)
 80072ca:	216b      	movs	r1, #107	@ 0x6b
 80072cc:	f001 fd7c 	bl	8008dc8 <__assert_func>
 80072d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d4:	6006      	str	r6, [r0, #0]
 80072d6:	60c6      	str	r6, [r0, #12]
 80072d8:	69e6      	ldr	r6, [r4, #28]
 80072da:	68f3      	ldr	r3, [r6, #12]
 80072dc:	b183      	cbz	r3, 8007300 <_Balloc+0x50>
 80072de:	69e3      	ldr	r3, [r4, #28]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072e6:	b9b8      	cbnz	r0, 8007318 <_Balloc+0x68>
 80072e8:	2101      	movs	r1, #1
 80072ea:	fa01 f605 	lsl.w	r6, r1, r5
 80072ee:	1d72      	adds	r2, r6, #5
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	4620      	mov	r0, r4
 80072f4:	f001 fd86 	bl	8008e04 <_calloc_r>
 80072f8:	b160      	cbz	r0, 8007314 <_Balloc+0x64>
 80072fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072fe:	e00e      	b.n	800731e <_Balloc+0x6e>
 8007300:	2221      	movs	r2, #33	@ 0x21
 8007302:	2104      	movs	r1, #4
 8007304:	4620      	mov	r0, r4
 8007306:	f001 fd7d 	bl	8008e04 <_calloc_r>
 800730a:	69e3      	ldr	r3, [r4, #28]
 800730c:	60f0      	str	r0, [r6, #12]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e4      	bne.n	80072de <_Balloc+0x2e>
 8007314:	2000      	movs	r0, #0
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	6802      	ldr	r2, [r0, #0]
 800731a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800731e:	2300      	movs	r3, #0
 8007320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007324:	e7f7      	b.n	8007316 <_Balloc+0x66>
 8007326:	bf00      	nop
 8007328:	0800aa0e 	.word	0x0800aa0e
 800732c:	0800aa8e 	.word	0x0800aa8e

08007330 <_Bfree>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	69c6      	ldr	r6, [r0, #28]
 8007334:	4605      	mov	r5, r0
 8007336:	460c      	mov	r4, r1
 8007338:	b976      	cbnz	r6, 8007358 <_Bfree+0x28>
 800733a:	2010      	movs	r0, #16
 800733c:	f7ff ff02 	bl	8007144 <malloc>
 8007340:	4602      	mov	r2, r0
 8007342:	61e8      	str	r0, [r5, #28]
 8007344:	b920      	cbnz	r0, 8007350 <_Bfree+0x20>
 8007346:	4b09      	ldr	r3, [pc, #36]	@ (800736c <_Bfree+0x3c>)
 8007348:	4809      	ldr	r0, [pc, #36]	@ (8007370 <_Bfree+0x40>)
 800734a:	218f      	movs	r1, #143	@ 0x8f
 800734c:	f001 fd3c 	bl	8008dc8 <__assert_func>
 8007350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007354:	6006      	str	r6, [r0, #0]
 8007356:	60c6      	str	r6, [r0, #12]
 8007358:	b13c      	cbz	r4, 800736a <_Bfree+0x3a>
 800735a:	69eb      	ldr	r3, [r5, #28]
 800735c:	6862      	ldr	r2, [r4, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007364:	6021      	str	r1, [r4, #0]
 8007366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	0800aa0e 	.word	0x0800aa0e
 8007370:	0800aa8e 	.word	0x0800aa8e

08007374 <__multadd>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	690d      	ldr	r5, [r1, #16]
 800737a:	4607      	mov	r7, r0
 800737c:	460c      	mov	r4, r1
 800737e:	461e      	mov	r6, r3
 8007380:	f101 0c14 	add.w	ip, r1, #20
 8007384:	2000      	movs	r0, #0
 8007386:	f8dc 3000 	ldr.w	r3, [ip]
 800738a:	b299      	uxth	r1, r3
 800738c:	fb02 6101 	mla	r1, r2, r1, r6
 8007390:	0c1e      	lsrs	r6, r3, #16
 8007392:	0c0b      	lsrs	r3, r1, #16
 8007394:	fb02 3306 	mla	r3, r2, r6, r3
 8007398:	b289      	uxth	r1, r1
 800739a:	3001      	adds	r0, #1
 800739c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073a0:	4285      	cmp	r5, r0
 80073a2:	f84c 1b04 	str.w	r1, [ip], #4
 80073a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073aa:	dcec      	bgt.n	8007386 <__multadd+0x12>
 80073ac:	b30e      	cbz	r6, 80073f2 <__multadd+0x7e>
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dc19      	bgt.n	80073e8 <__multadd+0x74>
 80073b4:	6861      	ldr	r1, [r4, #4]
 80073b6:	4638      	mov	r0, r7
 80073b8:	3101      	adds	r1, #1
 80073ba:	f7ff ff79 	bl	80072b0 <_Balloc>
 80073be:	4680      	mov	r8, r0
 80073c0:	b928      	cbnz	r0, 80073ce <__multadd+0x5a>
 80073c2:	4602      	mov	r2, r0
 80073c4:	4b0c      	ldr	r3, [pc, #48]	@ (80073f8 <__multadd+0x84>)
 80073c6:	480d      	ldr	r0, [pc, #52]	@ (80073fc <__multadd+0x88>)
 80073c8:	21ba      	movs	r1, #186	@ 0xba
 80073ca:	f001 fcfd 	bl	8008dc8 <__assert_func>
 80073ce:	6922      	ldr	r2, [r4, #16]
 80073d0:	3202      	adds	r2, #2
 80073d2:	f104 010c 	add.w	r1, r4, #12
 80073d6:	0092      	lsls	r2, r2, #2
 80073d8:	300c      	adds	r0, #12
 80073da:	f001 fcdf 	bl	8008d9c <memcpy>
 80073de:	4621      	mov	r1, r4
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7ff ffa5 	bl	8007330 <_Bfree>
 80073e6:	4644      	mov	r4, r8
 80073e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073ec:	3501      	adds	r5, #1
 80073ee:	615e      	str	r6, [r3, #20]
 80073f0:	6125      	str	r5, [r4, #16]
 80073f2:	4620      	mov	r0, r4
 80073f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f8:	0800aa7d 	.word	0x0800aa7d
 80073fc:	0800aa8e 	.word	0x0800aa8e

08007400 <__s2b>:
 8007400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	4615      	mov	r5, r2
 8007408:	461f      	mov	r7, r3
 800740a:	2209      	movs	r2, #9
 800740c:	3308      	adds	r3, #8
 800740e:	4606      	mov	r6, r0
 8007410:	fb93 f3f2 	sdiv	r3, r3, r2
 8007414:	2100      	movs	r1, #0
 8007416:	2201      	movs	r2, #1
 8007418:	429a      	cmp	r2, r3
 800741a:	db09      	blt.n	8007430 <__s2b+0x30>
 800741c:	4630      	mov	r0, r6
 800741e:	f7ff ff47 	bl	80072b0 <_Balloc>
 8007422:	b940      	cbnz	r0, 8007436 <__s2b+0x36>
 8007424:	4602      	mov	r2, r0
 8007426:	4b19      	ldr	r3, [pc, #100]	@ (800748c <__s2b+0x8c>)
 8007428:	4819      	ldr	r0, [pc, #100]	@ (8007490 <__s2b+0x90>)
 800742a:	21d3      	movs	r1, #211	@ 0xd3
 800742c:	f001 fccc 	bl	8008dc8 <__assert_func>
 8007430:	0052      	lsls	r2, r2, #1
 8007432:	3101      	adds	r1, #1
 8007434:	e7f0      	b.n	8007418 <__s2b+0x18>
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	6143      	str	r3, [r0, #20]
 800743a:	2d09      	cmp	r5, #9
 800743c:	f04f 0301 	mov.w	r3, #1
 8007440:	6103      	str	r3, [r0, #16]
 8007442:	dd16      	ble.n	8007472 <__s2b+0x72>
 8007444:	f104 0909 	add.w	r9, r4, #9
 8007448:	46c8      	mov	r8, r9
 800744a:	442c      	add	r4, r5
 800744c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007450:	4601      	mov	r1, r0
 8007452:	3b30      	subs	r3, #48	@ 0x30
 8007454:	220a      	movs	r2, #10
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ff8c 	bl	8007374 <__multadd>
 800745c:	45a0      	cmp	r8, r4
 800745e:	d1f5      	bne.n	800744c <__s2b+0x4c>
 8007460:	f1a5 0408 	sub.w	r4, r5, #8
 8007464:	444c      	add	r4, r9
 8007466:	1b2d      	subs	r5, r5, r4
 8007468:	1963      	adds	r3, r4, r5
 800746a:	42bb      	cmp	r3, r7
 800746c:	db04      	blt.n	8007478 <__s2b+0x78>
 800746e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007472:	340a      	adds	r4, #10
 8007474:	2509      	movs	r5, #9
 8007476:	e7f6      	b.n	8007466 <__s2b+0x66>
 8007478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800747c:	4601      	mov	r1, r0
 800747e:	3b30      	subs	r3, #48	@ 0x30
 8007480:	220a      	movs	r2, #10
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ff76 	bl	8007374 <__multadd>
 8007488:	e7ee      	b.n	8007468 <__s2b+0x68>
 800748a:	bf00      	nop
 800748c:	0800aa7d 	.word	0x0800aa7d
 8007490:	0800aa8e 	.word	0x0800aa8e

08007494 <__hi0bits>:
 8007494:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007498:	4603      	mov	r3, r0
 800749a:	bf36      	itet	cc
 800749c:	0403      	lslcc	r3, r0, #16
 800749e:	2000      	movcs	r0, #0
 80074a0:	2010      	movcc	r0, #16
 80074a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074a6:	bf3c      	itt	cc
 80074a8:	021b      	lslcc	r3, r3, #8
 80074aa:	3008      	addcc	r0, #8
 80074ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074b0:	bf3c      	itt	cc
 80074b2:	011b      	lslcc	r3, r3, #4
 80074b4:	3004      	addcc	r0, #4
 80074b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ba:	bf3c      	itt	cc
 80074bc:	009b      	lslcc	r3, r3, #2
 80074be:	3002      	addcc	r0, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db05      	blt.n	80074d0 <__hi0bits+0x3c>
 80074c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80074c8:	f100 0001 	add.w	r0, r0, #1
 80074cc:	bf08      	it	eq
 80074ce:	2020      	moveq	r0, #32
 80074d0:	4770      	bx	lr

080074d2 <__lo0bits>:
 80074d2:	6803      	ldr	r3, [r0, #0]
 80074d4:	4602      	mov	r2, r0
 80074d6:	f013 0007 	ands.w	r0, r3, #7
 80074da:	d00b      	beq.n	80074f4 <__lo0bits+0x22>
 80074dc:	07d9      	lsls	r1, r3, #31
 80074de:	d421      	bmi.n	8007524 <__lo0bits+0x52>
 80074e0:	0798      	lsls	r0, r3, #30
 80074e2:	bf49      	itett	mi
 80074e4:	085b      	lsrmi	r3, r3, #1
 80074e6:	089b      	lsrpl	r3, r3, #2
 80074e8:	2001      	movmi	r0, #1
 80074ea:	6013      	strmi	r3, [r2, #0]
 80074ec:	bf5c      	itt	pl
 80074ee:	6013      	strpl	r3, [r2, #0]
 80074f0:	2002      	movpl	r0, #2
 80074f2:	4770      	bx	lr
 80074f4:	b299      	uxth	r1, r3
 80074f6:	b909      	cbnz	r1, 80074fc <__lo0bits+0x2a>
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	2010      	movs	r0, #16
 80074fc:	b2d9      	uxtb	r1, r3
 80074fe:	b909      	cbnz	r1, 8007504 <__lo0bits+0x32>
 8007500:	3008      	adds	r0, #8
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	0719      	lsls	r1, r3, #28
 8007506:	bf04      	itt	eq
 8007508:	091b      	lsreq	r3, r3, #4
 800750a:	3004      	addeq	r0, #4
 800750c:	0799      	lsls	r1, r3, #30
 800750e:	bf04      	itt	eq
 8007510:	089b      	lsreq	r3, r3, #2
 8007512:	3002      	addeq	r0, #2
 8007514:	07d9      	lsls	r1, r3, #31
 8007516:	d403      	bmi.n	8007520 <__lo0bits+0x4e>
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	f100 0001 	add.w	r0, r0, #1
 800751e:	d003      	beq.n	8007528 <__lo0bits+0x56>
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	4770      	bx	lr
 8007524:	2000      	movs	r0, #0
 8007526:	4770      	bx	lr
 8007528:	2020      	movs	r0, #32
 800752a:	4770      	bx	lr

0800752c <__i2b>:
 800752c:	b510      	push	{r4, lr}
 800752e:	460c      	mov	r4, r1
 8007530:	2101      	movs	r1, #1
 8007532:	f7ff febd 	bl	80072b0 <_Balloc>
 8007536:	4602      	mov	r2, r0
 8007538:	b928      	cbnz	r0, 8007546 <__i2b+0x1a>
 800753a:	4b05      	ldr	r3, [pc, #20]	@ (8007550 <__i2b+0x24>)
 800753c:	4805      	ldr	r0, [pc, #20]	@ (8007554 <__i2b+0x28>)
 800753e:	f240 1145 	movw	r1, #325	@ 0x145
 8007542:	f001 fc41 	bl	8008dc8 <__assert_func>
 8007546:	2301      	movs	r3, #1
 8007548:	6144      	str	r4, [r0, #20]
 800754a:	6103      	str	r3, [r0, #16]
 800754c:	bd10      	pop	{r4, pc}
 800754e:	bf00      	nop
 8007550:	0800aa7d 	.word	0x0800aa7d
 8007554:	0800aa8e 	.word	0x0800aa8e

08007558 <__multiply>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	4614      	mov	r4, r2
 800755e:	690a      	ldr	r2, [r1, #16]
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	429a      	cmp	r2, r3
 8007564:	bfa8      	it	ge
 8007566:	4623      	movge	r3, r4
 8007568:	460f      	mov	r7, r1
 800756a:	bfa4      	itt	ge
 800756c:	460c      	movge	r4, r1
 800756e:	461f      	movge	r7, r3
 8007570:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007574:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007578:	68a3      	ldr	r3, [r4, #8]
 800757a:	6861      	ldr	r1, [r4, #4]
 800757c:	eb0a 0609 	add.w	r6, sl, r9
 8007580:	42b3      	cmp	r3, r6
 8007582:	b085      	sub	sp, #20
 8007584:	bfb8      	it	lt
 8007586:	3101      	addlt	r1, #1
 8007588:	f7ff fe92 	bl	80072b0 <_Balloc>
 800758c:	b930      	cbnz	r0, 800759c <__multiply+0x44>
 800758e:	4602      	mov	r2, r0
 8007590:	4b44      	ldr	r3, [pc, #272]	@ (80076a4 <__multiply+0x14c>)
 8007592:	4845      	ldr	r0, [pc, #276]	@ (80076a8 <__multiply+0x150>)
 8007594:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007598:	f001 fc16 	bl	8008dc8 <__assert_func>
 800759c:	f100 0514 	add.w	r5, r0, #20
 80075a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075a4:	462b      	mov	r3, r5
 80075a6:	2200      	movs	r2, #0
 80075a8:	4543      	cmp	r3, r8
 80075aa:	d321      	bcc.n	80075f0 <__multiply+0x98>
 80075ac:	f107 0114 	add.w	r1, r7, #20
 80075b0:	f104 0214 	add.w	r2, r4, #20
 80075b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80075b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80075bc:	9302      	str	r3, [sp, #8]
 80075be:	1b13      	subs	r3, r2, r4
 80075c0:	3b15      	subs	r3, #21
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	3304      	adds	r3, #4
 80075c8:	f104 0715 	add.w	r7, r4, #21
 80075cc:	42ba      	cmp	r2, r7
 80075ce:	bf38      	it	cc
 80075d0:	2304      	movcc	r3, #4
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	9103      	str	r1, [sp, #12]
 80075d8:	428b      	cmp	r3, r1
 80075da:	d80c      	bhi.n	80075f6 <__multiply+0x9e>
 80075dc:	2e00      	cmp	r6, #0
 80075de:	dd03      	ble.n	80075e8 <__multiply+0x90>
 80075e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05b      	beq.n	80076a0 <__multiply+0x148>
 80075e8:	6106      	str	r6, [r0, #16]
 80075ea:	b005      	add	sp, #20
 80075ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f0:	f843 2b04 	str.w	r2, [r3], #4
 80075f4:	e7d8      	b.n	80075a8 <__multiply+0x50>
 80075f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80075fa:	f1ba 0f00 	cmp.w	sl, #0
 80075fe:	d024      	beq.n	800764a <__multiply+0xf2>
 8007600:	f104 0e14 	add.w	lr, r4, #20
 8007604:	46a9      	mov	r9, r5
 8007606:	f04f 0c00 	mov.w	ip, #0
 800760a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800760e:	f8d9 3000 	ldr.w	r3, [r9]
 8007612:	fa1f fb87 	uxth.w	fp, r7
 8007616:	b29b      	uxth	r3, r3
 8007618:	fb0a 330b 	mla	r3, sl, fp, r3
 800761c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007620:	f8d9 7000 	ldr.w	r7, [r9]
 8007624:	4463      	add	r3, ip
 8007626:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800762a:	fb0a c70b 	mla	r7, sl, fp, ip
 800762e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007638:	4572      	cmp	r2, lr
 800763a:	f849 3b04 	str.w	r3, [r9], #4
 800763e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007642:	d8e2      	bhi.n	800760a <__multiply+0xb2>
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	f845 c003 	str.w	ip, [r5, r3]
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007650:	3104      	adds	r1, #4
 8007652:	f1b9 0f00 	cmp.w	r9, #0
 8007656:	d021      	beq.n	800769c <__multiply+0x144>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	f104 0c14 	add.w	ip, r4, #20
 800765e:	46ae      	mov	lr, r5
 8007660:	f04f 0a00 	mov.w	sl, #0
 8007664:	f8bc b000 	ldrh.w	fp, [ip]
 8007668:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800766c:	fb09 770b 	mla	r7, r9, fp, r7
 8007670:	4457      	add	r7, sl
 8007672:	b29b      	uxth	r3, r3
 8007674:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007678:	f84e 3b04 	str.w	r3, [lr], #4
 800767c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007684:	f8be 3000 	ldrh.w	r3, [lr]
 8007688:	fb09 330a 	mla	r3, r9, sl, r3
 800768c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007690:	4562      	cmp	r2, ip
 8007692:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007696:	d8e5      	bhi.n	8007664 <__multiply+0x10c>
 8007698:	9f01      	ldr	r7, [sp, #4]
 800769a:	51eb      	str	r3, [r5, r7]
 800769c:	3504      	adds	r5, #4
 800769e:	e799      	b.n	80075d4 <__multiply+0x7c>
 80076a0:	3e01      	subs	r6, #1
 80076a2:	e79b      	b.n	80075dc <__multiply+0x84>
 80076a4:	0800aa7d 	.word	0x0800aa7d
 80076a8:	0800aa8e 	.word	0x0800aa8e

080076ac <__pow5mult>:
 80076ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b0:	4615      	mov	r5, r2
 80076b2:	f012 0203 	ands.w	r2, r2, #3
 80076b6:	4607      	mov	r7, r0
 80076b8:	460e      	mov	r6, r1
 80076ba:	d007      	beq.n	80076cc <__pow5mult+0x20>
 80076bc:	4c25      	ldr	r4, [pc, #148]	@ (8007754 <__pow5mult+0xa8>)
 80076be:	3a01      	subs	r2, #1
 80076c0:	2300      	movs	r3, #0
 80076c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076c6:	f7ff fe55 	bl	8007374 <__multadd>
 80076ca:	4606      	mov	r6, r0
 80076cc:	10ad      	asrs	r5, r5, #2
 80076ce:	d03d      	beq.n	800774c <__pow5mult+0xa0>
 80076d0:	69fc      	ldr	r4, [r7, #28]
 80076d2:	b97c      	cbnz	r4, 80076f4 <__pow5mult+0x48>
 80076d4:	2010      	movs	r0, #16
 80076d6:	f7ff fd35 	bl	8007144 <malloc>
 80076da:	4602      	mov	r2, r0
 80076dc:	61f8      	str	r0, [r7, #28]
 80076de:	b928      	cbnz	r0, 80076ec <__pow5mult+0x40>
 80076e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007758 <__pow5mult+0xac>)
 80076e2:	481e      	ldr	r0, [pc, #120]	@ (800775c <__pow5mult+0xb0>)
 80076e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80076e8:	f001 fb6e 	bl	8008dc8 <__assert_func>
 80076ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076f0:	6004      	str	r4, [r0, #0]
 80076f2:	60c4      	str	r4, [r0, #12]
 80076f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80076f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076fc:	b94c      	cbnz	r4, 8007712 <__pow5mult+0x66>
 80076fe:	f240 2171 	movw	r1, #625	@ 0x271
 8007702:	4638      	mov	r0, r7
 8007704:	f7ff ff12 	bl	800752c <__i2b>
 8007708:	2300      	movs	r3, #0
 800770a:	f8c8 0008 	str.w	r0, [r8, #8]
 800770e:	4604      	mov	r4, r0
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	07eb      	lsls	r3, r5, #31
 8007718:	d50a      	bpl.n	8007730 <__pow5mult+0x84>
 800771a:	4631      	mov	r1, r6
 800771c:	4622      	mov	r2, r4
 800771e:	4638      	mov	r0, r7
 8007720:	f7ff ff1a 	bl	8007558 <__multiply>
 8007724:	4631      	mov	r1, r6
 8007726:	4680      	mov	r8, r0
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff fe01 	bl	8007330 <_Bfree>
 800772e:	4646      	mov	r6, r8
 8007730:	106d      	asrs	r5, r5, #1
 8007732:	d00b      	beq.n	800774c <__pow5mult+0xa0>
 8007734:	6820      	ldr	r0, [r4, #0]
 8007736:	b938      	cbnz	r0, 8007748 <__pow5mult+0x9c>
 8007738:	4622      	mov	r2, r4
 800773a:	4621      	mov	r1, r4
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ff0b 	bl	8007558 <__multiply>
 8007742:	6020      	str	r0, [r4, #0]
 8007744:	f8c0 9000 	str.w	r9, [r0]
 8007748:	4604      	mov	r4, r0
 800774a:	e7e4      	b.n	8007716 <__pow5mult+0x6a>
 800774c:	4630      	mov	r0, r6
 800774e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007752:	bf00      	nop
 8007754:	0800aae8 	.word	0x0800aae8
 8007758:	0800aa0e 	.word	0x0800aa0e
 800775c:	0800aa8e 	.word	0x0800aa8e

08007760 <__lshift>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	460c      	mov	r4, r1
 8007766:	6849      	ldr	r1, [r1, #4]
 8007768:	6923      	ldr	r3, [r4, #16]
 800776a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	4607      	mov	r7, r0
 8007772:	4691      	mov	r9, r2
 8007774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007778:	f108 0601 	add.w	r6, r8, #1
 800777c:	42b3      	cmp	r3, r6
 800777e:	db0b      	blt.n	8007798 <__lshift+0x38>
 8007780:	4638      	mov	r0, r7
 8007782:	f7ff fd95 	bl	80072b0 <_Balloc>
 8007786:	4605      	mov	r5, r0
 8007788:	b948      	cbnz	r0, 800779e <__lshift+0x3e>
 800778a:	4602      	mov	r2, r0
 800778c:	4b28      	ldr	r3, [pc, #160]	@ (8007830 <__lshift+0xd0>)
 800778e:	4829      	ldr	r0, [pc, #164]	@ (8007834 <__lshift+0xd4>)
 8007790:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007794:	f001 fb18 	bl	8008dc8 <__assert_func>
 8007798:	3101      	adds	r1, #1
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	e7ee      	b.n	800777c <__lshift+0x1c>
 800779e:	2300      	movs	r3, #0
 80077a0:	f100 0114 	add.w	r1, r0, #20
 80077a4:	f100 0210 	add.w	r2, r0, #16
 80077a8:	4618      	mov	r0, r3
 80077aa:	4553      	cmp	r3, sl
 80077ac:	db33      	blt.n	8007816 <__lshift+0xb6>
 80077ae:	6920      	ldr	r0, [r4, #16]
 80077b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077b4:	f104 0314 	add.w	r3, r4, #20
 80077b8:	f019 091f 	ands.w	r9, r9, #31
 80077bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077c4:	d02b      	beq.n	800781e <__lshift+0xbe>
 80077c6:	f1c9 0e20 	rsb	lr, r9, #32
 80077ca:	468a      	mov	sl, r1
 80077cc:	2200      	movs	r2, #0
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	fa00 f009 	lsl.w	r0, r0, r9
 80077d4:	4310      	orrs	r0, r2
 80077d6:	f84a 0b04 	str.w	r0, [sl], #4
 80077da:	f853 2b04 	ldr.w	r2, [r3], #4
 80077de:	459c      	cmp	ip, r3
 80077e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80077e4:	d8f3      	bhi.n	80077ce <__lshift+0x6e>
 80077e6:	ebac 0304 	sub.w	r3, ip, r4
 80077ea:	3b15      	subs	r3, #21
 80077ec:	f023 0303 	bic.w	r3, r3, #3
 80077f0:	3304      	adds	r3, #4
 80077f2:	f104 0015 	add.w	r0, r4, #21
 80077f6:	4584      	cmp	ip, r0
 80077f8:	bf38      	it	cc
 80077fa:	2304      	movcc	r3, #4
 80077fc:	50ca      	str	r2, [r1, r3]
 80077fe:	b10a      	cbz	r2, 8007804 <__lshift+0xa4>
 8007800:	f108 0602 	add.w	r6, r8, #2
 8007804:	3e01      	subs	r6, #1
 8007806:	4638      	mov	r0, r7
 8007808:	612e      	str	r6, [r5, #16]
 800780a:	4621      	mov	r1, r4
 800780c:	f7ff fd90 	bl	8007330 <_Bfree>
 8007810:	4628      	mov	r0, r5
 8007812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007816:	f842 0f04 	str.w	r0, [r2, #4]!
 800781a:	3301      	adds	r3, #1
 800781c:	e7c5      	b.n	80077aa <__lshift+0x4a>
 800781e:	3904      	subs	r1, #4
 8007820:	f853 2b04 	ldr.w	r2, [r3], #4
 8007824:	f841 2f04 	str.w	r2, [r1, #4]!
 8007828:	459c      	cmp	ip, r3
 800782a:	d8f9      	bhi.n	8007820 <__lshift+0xc0>
 800782c:	e7ea      	b.n	8007804 <__lshift+0xa4>
 800782e:	bf00      	nop
 8007830:	0800aa7d 	.word	0x0800aa7d
 8007834:	0800aa8e 	.word	0x0800aa8e

08007838 <__mcmp>:
 8007838:	690a      	ldr	r2, [r1, #16]
 800783a:	4603      	mov	r3, r0
 800783c:	6900      	ldr	r0, [r0, #16]
 800783e:	1a80      	subs	r0, r0, r2
 8007840:	b530      	push	{r4, r5, lr}
 8007842:	d10e      	bne.n	8007862 <__mcmp+0x2a>
 8007844:	3314      	adds	r3, #20
 8007846:	3114      	adds	r1, #20
 8007848:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800784c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007850:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007854:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007858:	4295      	cmp	r5, r2
 800785a:	d003      	beq.n	8007864 <__mcmp+0x2c>
 800785c:	d205      	bcs.n	800786a <__mcmp+0x32>
 800785e:	f04f 30ff 	mov.w	r0, #4294967295
 8007862:	bd30      	pop	{r4, r5, pc}
 8007864:	42a3      	cmp	r3, r4
 8007866:	d3f3      	bcc.n	8007850 <__mcmp+0x18>
 8007868:	e7fb      	b.n	8007862 <__mcmp+0x2a>
 800786a:	2001      	movs	r0, #1
 800786c:	e7f9      	b.n	8007862 <__mcmp+0x2a>
	...

08007870 <__mdiff>:
 8007870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	4689      	mov	r9, r1
 8007876:	4606      	mov	r6, r0
 8007878:	4611      	mov	r1, r2
 800787a:	4648      	mov	r0, r9
 800787c:	4614      	mov	r4, r2
 800787e:	f7ff ffdb 	bl	8007838 <__mcmp>
 8007882:	1e05      	subs	r5, r0, #0
 8007884:	d112      	bne.n	80078ac <__mdiff+0x3c>
 8007886:	4629      	mov	r1, r5
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff fd11 	bl	80072b0 <_Balloc>
 800788e:	4602      	mov	r2, r0
 8007890:	b928      	cbnz	r0, 800789e <__mdiff+0x2e>
 8007892:	4b3f      	ldr	r3, [pc, #252]	@ (8007990 <__mdiff+0x120>)
 8007894:	f240 2137 	movw	r1, #567	@ 0x237
 8007898:	483e      	ldr	r0, [pc, #248]	@ (8007994 <__mdiff+0x124>)
 800789a:	f001 fa95 	bl	8008dc8 <__assert_func>
 800789e:	2301      	movs	r3, #1
 80078a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078a4:	4610      	mov	r0, r2
 80078a6:	b003      	add	sp, #12
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	bfbc      	itt	lt
 80078ae:	464b      	movlt	r3, r9
 80078b0:	46a1      	movlt	r9, r4
 80078b2:	4630      	mov	r0, r6
 80078b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078b8:	bfba      	itte	lt
 80078ba:	461c      	movlt	r4, r3
 80078bc:	2501      	movlt	r5, #1
 80078be:	2500      	movge	r5, #0
 80078c0:	f7ff fcf6 	bl	80072b0 <_Balloc>
 80078c4:	4602      	mov	r2, r0
 80078c6:	b918      	cbnz	r0, 80078d0 <__mdiff+0x60>
 80078c8:	4b31      	ldr	r3, [pc, #196]	@ (8007990 <__mdiff+0x120>)
 80078ca:	f240 2145 	movw	r1, #581	@ 0x245
 80078ce:	e7e3      	b.n	8007898 <__mdiff+0x28>
 80078d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80078d4:	6926      	ldr	r6, [r4, #16]
 80078d6:	60c5      	str	r5, [r0, #12]
 80078d8:	f109 0310 	add.w	r3, r9, #16
 80078dc:	f109 0514 	add.w	r5, r9, #20
 80078e0:	f104 0e14 	add.w	lr, r4, #20
 80078e4:	f100 0b14 	add.w	fp, r0, #20
 80078e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80078ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	46d9      	mov	r9, fp
 80078f4:	f04f 0c00 	mov.w	ip, #0
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	fa1f f38a 	uxth.w	r3, sl
 8007908:	4619      	mov	r1, r3
 800790a:	b283      	uxth	r3, r0
 800790c:	1acb      	subs	r3, r1, r3
 800790e:	0c00      	lsrs	r0, r0, #16
 8007910:	4463      	add	r3, ip
 8007912:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007916:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007920:	4576      	cmp	r6, lr
 8007922:	f849 3b04 	str.w	r3, [r9], #4
 8007926:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800792a:	d8e5      	bhi.n	80078f8 <__mdiff+0x88>
 800792c:	1b33      	subs	r3, r6, r4
 800792e:	3b15      	subs	r3, #21
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	3415      	adds	r4, #21
 8007936:	3304      	adds	r3, #4
 8007938:	42a6      	cmp	r6, r4
 800793a:	bf38      	it	cc
 800793c:	2304      	movcc	r3, #4
 800793e:	441d      	add	r5, r3
 8007940:	445b      	add	r3, fp
 8007942:	461e      	mov	r6, r3
 8007944:	462c      	mov	r4, r5
 8007946:	4544      	cmp	r4, r8
 8007948:	d30e      	bcc.n	8007968 <__mdiff+0xf8>
 800794a:	f108 0103 	add.w	r1, r8, #3
 800794e:	1b49      	subs	r1, r1, r5
 8007950:	f021 0103 	bic.w	r1, r1, #3
 8007954:	3d03      	subs	r5, #3
 8007956:	45a8      	cmp	r8, r5
 8007958:	bf38      	it	cc
 800795a:	2100      	movcc	r1, #0
 800795c:	440b      	add	r3, r1
 800795e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007962:	b191      	cbz	r1, 800798a <__mdiff+0x11a>
 8007964:	6117      	str	r7, [r2, #16]
 8007966:	e79d      	b.n	80078a4 <__mdiff+0x34>
 8007968:	f854 1b04 	ldr.w	r1, [r4], #4
 800796c:	46e6      	mov	lr, ip
 800796e:	0c08      	lsrs	r0, r1, #16
 8007970:	fa1c fc81 	uxtah	ip, ip, r1
 8007974:	4471      	add	r1, lr
 8007976:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800797a:	b289      	uxth	r1, r1
 800797c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007980:	f846 1b04 	str.w	r1, [r6], #4
 8007984:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007988:	e7dd      	b.n	8007946 <__mdiff+0xd6>
 800798a:	3f01      	subs	r7, #1
 800798c:	e7e7      	b.n	800795e <__mdiff+0xee>
 800798e:	bf00      	nop
 8007990:	0800aa7d 	.word	0x0800aa7d
 8007994:	0800aa8e 	.word	0x0800aa8e

08007998 <__ulp>:
 8007998:	b082      	sub	sp, #8
 800799a:	ed8d 0b00 	vstr	d0, [sp]
 800799e:	9a01      	ldr	r2, [sp, #4]
 80079a0:	4b0f      	ldr	r3, [pc, #60]	@ (80079e0 <__ulp+0x48>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc08      	bgt.n	80079be <__ulp+0x26>
 80079ac:	425b      	negs	r3, r3
 80079ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80079b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80079b6:	da04      	bge.n	80079c2 <__ulp+0x2a>
 80079b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80079bc:	4113      	asrs	r3, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	e008      	b.n	80079d4 <__ulp+0x3c>
 80079c2:	f1a2 0314 	sub.w	r3, r2, #20
 80079c6:	2b1e      	cmp	r3, #30
 80079c8:	bfda      	itte	le
 80079ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80079ce:	40da      	lsrle	r2, r3
 80079d0:	2201      	movgt	r2, #1
 80079d2:	2300      	movs	r3, #0
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	ec41 0b10 	vmov	d0, r0, r1
 80079dc:	b002      	add	sp, #8
 80079de:	4770      	bx	lr
 80079e0:	7ff00000 	.word	0x7ff00000

080079e4 <__b2d>:
 80079e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e8:	6906      	ldr	r6, [r0, #16]
 80079ea:	f100 0814 	add.w	r8, r0, #20
 80079ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80079f2:	1f37      	subs	r7, r6, #4
 80079f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80079f8:	4610      	mov	r0, r2
 80079fa:	f7ff fd4b 	bl	8007494 <__hi0bits>
 80079fe:	f1c0 0320 	rsb	r3, r0, #32
 8007a02:	280a      	cmp	r0, #10
 8007a04:	600b      	str	r3, [r1, #0]
 8007a06:	491b      	ldr	r1, [pc, #108]	@ (8007a74 <__b2d+0x90>)
 8007a08:	dc15      	bgt.n	8007a36 <__b2d+0x52>
 8007a0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007a0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007a12:	45b8      	cmp	r8, r7
 8007a14:	ea43 0501 	orr.w	r5, r3, r1
 8007a18:	bf34      	ite	cc
 8007a1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a1e:	2300      	movcs	r3, #0
 8007a20:	3015      	adds	r0, #21
 8007a22:	fa02 f000 	lsl.w	r0, r2, r0
 8007a26:	fa23 f30c 	lsr.w	r3, r3, ip
 8007a2a:	4303      	orrs	r3, r0
 8007a2c:	461c      	mov	r4, r3
 8007a2e:	ec45 4b10 	vmov	d0, r4, r5
 8007a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a36:	45b8      	cmp	r8, r7
 8007a38:	bf3a      	itte	cc
 8007a3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007a42:	2300      	movcs	r3, #0
 8007a44:	380b      	subs	r0, #11
 8007a46:	d012      	beq.n	8007a6e <__b2d+0x8a>
 8007a48:	f1c0 0120 	rsb	r1, r0, #32
 8007a4c:	fa23 f401 	lsr.w	r4, r3, r1
 8007a50:	4082      	lsls	r2, r0
 8007a52:	4322      	orrs	r2, r4
 8007a54:	4547      	cmp	r7, r8
 8007a56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007a5a:	bf8c      	ite	hi
 8007a5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007a60:	2200      	movls	r2, #0
 8007a62:	4083      	lsls	r3, r0
 8007a64:	40ca      	lsrs	r2, r1
 8007a66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	e7de      	b.n	8007a2c <__b2d+0x48>
 8007a6e:	ea42 0501 	orr.w	r5, r2, r1
 8007a72:	e7db      	b.n	8007a2c <__b2d+0x48>
 8007a74:	3ff00000 	.word	0x3ff00000

08007a78 <__d2b>:
 8007a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	2101      	movs	r1, #1
 8007a80:	ec59 8b10 	vmov	r8, r9, d0
 8007a84:	4616      	mov	r6, r2
 8007a86:	f7ff fc13 	bl	80072b0 <_Balloc>
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	b930      	cbnz	r0, 8007a9c <__d2b+0x24>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	4b23      	ldr	r3, [pc, #140]	@ (8007b20 <__d2b+0xa8>)
 8007a92:	4824      	ldr	r0, [pc, #144]	@ (8007b24 <__d2b+0xac>)
 8007a94:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a98:	f001 f996 	bl	8008dc8 <__assert_func>
 8007a9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aa4:	b10d      	cbz	r5, 8007aaa <__d2b+0x32>
 8007aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	f1b8 0300 	subs.w	r3, r8, #0
 8007ab0:	d023      	beq.n	8007afa <__d2b+0x82>
 8007ab2:	4668      	mov	r0, sp
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	f7ff fd0c 	bl	80074d2 <__lo0bits>
 8007aba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007abe:	b1d0      	cbz	r0, 8007af6 <__d2b+0x7e>
 8007ac0:	f1c0 0320 	rsb	r3, r0, #32
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	40c2      	lsrs	r2, r0
 8007acc:	6163      	str	r3, [r4, #20]
 8007ace:	9201      	str	r2, [sp, #4]
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	61a3      	str	r3, [r4, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2201      	moveq	r2, #1
 8007ada:	2202      	movne	r2, #2
 8007adc:	6122      	str	r2, [r4, #16]
 8007ade:	b1a5      	cbz	r5, 8007b0a <__d2b+0x92>
 8007ae0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ae4:	4405      	add	r5, r0
 8007ae6:	603d      	str	r5, [r7, #0]
 8007ae8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007aec:	6030      	str	r0, [r6, #0]
 8007aee:	4620      	mov	r0, r4
 8007af0:	b003      	add	sp, #12
 8007af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007af6:	6161      	str	r1, [r4, #20]
 8007af8:	e7ea      	b.n	8007ad0 <__d2b+0x58>
 8007afa:	a801      	add	r0, sp, #4
 8007afc:	f7ff fce9 	bl	80074d2 <__lo0bits>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	6163      	str	r3, [r4, #20]
 8007b04:	3020      	adds	r0, #32
 8007b06:	2201      	movs	r2, #1
 8007b08:	e7e8      	b.n	8007adc <__d2b+0x64>
 8007b0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b12:	6038      	str	r0, [r7, #0]
 8007b14:	6918      	ldr	r0, [r3, #16]
 8007b16:	f7ff fcbd 	bl	8007494 <__hi0bits>
 8007b1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b1e:	e7e5      	b.n	8007aec <__d2b+0x74>
 8007b20:	0800aa7d 	.word	0x0800aa7d
 8007b24:	0800aa8e 	.word	0x0800aa8e

08007b28 <__ratio>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	e9cd 1000 	strd	r1, r0, [sp]
 8007b32:	a902      	add	r1, sp, #8
 8007b34:	f7ff ff56 	bl	80079e4 <__b2d>
 8007b38:	9800      	ldr	r0, [sp, #0]
 8007b3a:	a903      	add	r1, sp, #12
 8007b3c:	ec55 4b10 	vmov	r4, r5, d0
 8007b40:	f7ff ff50 	bl	80079e4 <__b2d>
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	6919      	ldr	r1, [r3, #16]
 8007b48:	9b00      	ldr	r3, [sp, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	1ac9      	subs	r1, r1, r3
 8007b4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	ec5b ab10 	vmov	sl, fp, d0
 8007b58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bfce      	itee	gt
 8007b60:	462a      	movgt	r2, r5
 8007b62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b66:	465a      	movle	r2, fp
 8007b68:	462f      	mov	r7, r5
 8007b6a:	46d9      	mov	r9, fp
 8007b6c:	bfcc      	ite	gt
 8007b6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007b76:	464b      	mov	r3, r9
 8007b78:	4652      	mov	r2, sl
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	f7f8 fe6d 	bl	800085c <__aeabi_ddiv>
 8007b82:	ec41 0b10 	vmov	d0, r0, r1
 8007b86:	b005      	add	sp, #20
 8007b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b8c <__copybits>:
 8007b8c:	3901      	subs	r1, #1
 8007b8e:	b570      	push	{r4, r5, r6, lr}
 8007b90:	1149      	asrs	r1, r1, #5
 8007b92:	6914      	ldr	r4, [r2, #16]
 8007b94:	3101      	adds	r1, #1
 8007b96:	f102 0314 	add.w	r3, r2, #20
 8007b9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ba2:	1f05      	subs	r5, r0, #4
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	d30c      	bcc.n	8007bc2 <__copybits+0x36>
 8007ba8:	1aa3      	subs	r3, r4, r2
 8007baa:	3b11      	subs	r3, #17
 8007bac:	f023 0303 	bic.w	r3, r3, #3
 8007bb0:	3211      	adds	r2, #17
 8007bb2:	42a2      	cmp	r2, r4
 8007bb4:	bf88      	it	hi
 8007bb6:	2300      	movhi	r3, #0
 8007bb8:	4418      	add	r0, r3
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4288      	cmp	r0, r1
 8007bbe:	d305      	bcc.n	8007bcc <__copybits+0x40>
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
 8007bc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8007bc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8007bca:	e7eb      	b.n	8007ba4 <__copybits+0x18>
 8007bcc:	f840 3b04 	str.w	r3, [r0], #4
 8007bd0:	e7f4      	b.n	8007bbc <__copybits+0x30>

08007bd2 <__any_on>:
 8007bd2:	f100 0214 	add.w	r2, r0, #20
 8007bd6:	6900      	ldr	r0, [r0, #16]
 8007bd8:	114b      	asrs	r3, r1, #5
 8007bda:	4298      	cmp	r0, r3
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	db11      	blt.n	8007c04 <__any_on+0x32>
 8007be0:	dd0a      	ble.n	8007bf8 <__any_on+0x26>
 8007be2:	f011 011f 	ands.w	r1, r1, #31
 8007be6:	d007      	beq.n	8007bf8 <__any_on+0x26>
 8007be8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bec:	fa24 f001 	lsr.w	r0, r4, r1
 8007bf0:	fa00 f101 	lsl.w	r1, r0, r1
 8007bf4:	428c      	cmp	r4, r1
 8007bf6:	d10b      	bne.n	8007c10 <__any_on+0x3e>
 8007bf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d803      	bhi.n	8007c08 <__any_on+0x36>
 8007c00:	2000      	movs	r0, #0
 8007c02:	bd10      	pop	{r4, pc}
 8007c04:	4603      	mov	r3, r0
 8007c06:	e7f7      	b.n	8007bf8 <__any_on+0x26>
 8007c08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d0f5      	beq.n	8007bfc <__any_on+0x2a>
 8007c10:	2001      	movs	r0, #1
 8007c12:	e7f6      	b.n	8007c02 <__any_on+0x30>

08007c14 <sulp>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4604      	mov	r4, r0
 8007c18:	460d      	mov	r5, r1
 8007c1a:	ec45 4b10 	vmov	d0, r4, r5
 8007c1e:	4616      	mov	r6, r2
 8007c20:	f7ff feba 	bl	8007998 <__ulp>
 8007c24:	ec51 0b10 	vmov	r0, r1, d0
 8007c28:	b17e      	cbz	r6, 8007c4a <sulp+0x36>
 8007c2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dd09      	ble.n	8007c4a <sulp+0x36>
 8007c36:	051b      	lsls	r3, r3, #20
 8007c38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007c3c:	2400      	movs	r4, #0
 8007c3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	f7f8 fcdf 	bl	8000608 <__aeabi_dmul>
 8007c4a:	ec41 0b10 	vmov	d0, r0, r1
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}

08007c50 <_strtod_l>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	b09f      	sub	sp, #124	@ 0x7c
 8007c56:	460c      	mov	r4, r1
 8007c58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007c5e:	9005      	str	r0, [sp, #20]
 8007c60:	f04f 0a00 	mov.w	sl, #0
 8007c64:	f04f 0b00 	mov.w	fp, #0
 8007c68:	460a      	mov	r2, r1
 8007c6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c6c:	7811      	ldrb	r1, [r2, #0]
 8007c6e:	292b      	cmp	r1, #43	@ 0x2b
 8007c70:	d04a      	beq.n	8007d08 <_strtod_l+0xb8>
 8007c72:	d838      	bhi.n	8007ce6 <_strtod_l+0x96>
 8007c74:	290d      	cmp	r1, #13
 8007c76:	d832      	bhi.n	8007cde <_strtod_l+0x8e>
 8007c78:	2908      	cmp	r1, #8
 8007c7a:	d832      	bhi.n	8007ce2 <_strtod_l+0x92>
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d03b      	beq.n	8007cf8 <_strtod_l+0xa8>
 8007c80:	2200      	movs	r2, #0
 8007c82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007c84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007c86:	782a      	ldrb	r2, [r5, #0]
 8007c88:	2a30      	cmp	r2, #48	@ 0x30
 8007c8a:	f040 80b3 	bne.w	8007df4 <_strtod_l+0x1a4>
 8007c8e:	786a      	ldrb	r2, [r5, #1]
 8007c90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c94:	2a58      	cmp	r2, #88	@ 0x58
 8007c96:	d16e      	bne.n	8007d76 <_strtod_l+0x126>
 8007c98:	9302      	str	r3, [sp, #8]
 8007c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	4a8e      	ldr	r2, [pc, #568]	@ (8007edc <_strtod_l+0x28c>)
 8007ca4:	9805      	ldr	r0, [sp, #20]
 8007ca6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ca8:	a919      	add	r1, sp, #100	@ 0x64
 8007caa:	f001 f927 	bl	8008efc <__gethex>
 8007cae:	f010 060f 	ands.w	r6, r0, #15
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	d005      	beq.n	8007cc2 <_strtod_l+0x72>
 8007cb6:	2e06      	cmp	r6, #6
 8007cb8:	d128      	bne.n	8007d0c <_strtod_l+0xbc>
 8007cba:	3501      	adds	r5, #1
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9519      	str	r5, [sp, #100]	@ 0x64
 8007cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f040 858e 	bne.w	80087e6 <_strtod_l+0xb96>
 8007cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ccc:	b1cb      	cbz	r3, 8007d02 <_strtod_l+0xb2>
 8007cce:	4652      	mov	r2, sl
 8007cd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007cd4:	ec43 2b10 	vmov	d0, r2, r3
 8007cd8:	b01f      	add	sp, #124	@ 0x7c
 8007cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cde:	2920      	cmp	r1, #32
 8007ce0:	d1ce      	bne.n	8007c80 <_strtod_l+0x30>
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	e7c1      	b.n	8007c6a <_strtod_l+0x1a>
 8007ce6:	292d      	cmp	r1, #45	@ 0x2d
 8007ce8:	d1ca      	bne.n	8007c80 <_strtod_l+0x30>
 8007cea:	2101      	movs	r1, #1
 8007cec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007cee:	1c51      	adds	r1, r2, #1
 8007cf0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007cf2:	7852      	ldrb	r2, [r2, #1]
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d1c5      	bne.n	8007c84 <_strtod_l+0x34>
 8007cf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cfa:	9419      	str	r4, [sp, #100]	@ 0x64
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f040 8570 	bne.w	80087e2 <_strtod_l+0xb92>
 8007d02:	4652      	mov	r2, sl
 8007d04:	465b      	mov	r3, fp
 8007d06:	e7e5      	b.n	8007cd4 <_strtod_l+0x84>
 8007d08:	2100      	movs	r1, #0
 8007d0a:	e7ef      	b.n	8007cec <_strtod_l+0x9c>
 8007d0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d0e:	b13a      	cbz	r2, 8007d20 <_strtod_l+0xd0>
 8007d10:	2135      	movs	r1, #53	@ 0x35
 8007d12:	a81c      	add	r0, sp, #112	@ 0x70
 8007d14:	f7ff ff3a 	bl	8007b8c <__copybits>
 8007d18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d1a:	9805      	ldr	r0, [sp, #20]
 8007d1c:	f7ff fb08 	bl	8007330 <_Bfree>
 8007d20:	3e01      	subs	r6, #1
 8007d22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007d24:	2e04      	cmp	r6, #4
 8007d26:	d806      	bhi.n	8007d36 <_strtod_l+0xe6>
 8007d28:	e8df f006 	tbb	[pc, r6]
 8007d2c:	201d0314 	.word	0x201d0314
 8007d30:	14          	.byte	0x14
 8007d31:	00          	.byte	0x00
 8007d32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007d36:	05e1      	lsls	r1, r4, #23
 8007d38:	bf48      	it	mi
 8007d3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d42:	0d1b      	lsrs	r3, r3, #20
 8007d44:	051b      	lsls	r3, r3, #20
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1bb      	bne.n	8007cc2 <_strtod_l+0x72>
 8007d4a:	f7fe fb31 	bl	80063b0 <__errno>
 8007d4e:	2322      	movs	r3, #34	@ 0x22
 8007d50:	6003      	str	r3, [r0, #0]
 8007d52:	e7b6      	b.n	8007cc2 <_strtod_l+0x72>
 8007d54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007d58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007d5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007d60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d64:	e7e7      	b.n	8007d36 <_strtod_l+0xe6>
 8007d66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007ee4 <_strtod_l+0x294>
 8007d6a:	e7e4      	b.n	8007d36 <_strtod_l+0xe6>
 8007d6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007d70:	f04f 3aff 	mov.w	sl, #4294967295
 8007d74:	e7df      	b.n	8007d36 <_strtod_l+0xe6>
 8007d76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	2b30      	cmp	r3, #48	@ 0x30
 8007d80:	d0f9      	beq.n	8007d76 <_strtod_l+0x126>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d09d      	beq.n	8007cc2 <_strtod_l+0x72>
 8007d86:	2301      	movs	r3, #1
 8007d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9308      	str	r3, [sp, #32]
 8007d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d94:	461f      	mov	r7, r3
 8007d96:	220a      	movs	r2, #10
 8007d98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d9a:	7805      	ldrb	r5, [r0, #0]
 8007d9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007da0:	b2d9      	uxtb	r1, r3
 8007da2:	2909      	cmp	r1, #9
 8007da4:	d928      	bls.n	8007df8 <_strtod_l+0x1a8>
 8007da6:	494e      	ldr	r1, [pc, #312]	@ (8007ee0 <_strtod_l+0x290>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	f000 ffd5 	bl	8008d58 <strncmp>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d032      	beq.n	8007e18 <_strtod_l+0x1c8>
 8007db2:	2000      	movs	r0, #0
 8007db4:	462a      	mov	r2, r5
 8007db6:	4681      	mov	r9, r0
 8007db8:	463d      	mov	r5, r7
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2a65      	cmp	r2, #101	@ 0x65
 8007dbe:	d001      	beq.n	8007dc4 <_strtod_l+0x174>
 8007dc0:	2a45      	cmp	r2, #69	@ 0x45
 8007dc2:	d114      	bne.n	8007dee <_strtod_l+0x19e>
 8007dc4:	b91d      	cbnz	r5, 8007dce <_strtod_l+0x17e>
 8007dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc8:	4302      	orrs	r2, r0
 8007dca:	d095      	beq.n	8007cf8 <_strtod_l+0xa8>
 8007dcc:	2500      	movs	r5, #0
 8007dce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007dd0:	1c62      	adds	r2, r4, #1
 8007dd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dd4:	7862      	ldrb	r2, [r4, #1]
 8007dd6:	2a2b      	cmp	r2, #43	@ 0x2b
 8007dd8:	d077      	beq.n	8007eca <_strtod_l+0x27a>
 8007dda:	2a2d      	cmp	r2, #45	@ 0x2d
 8007ddc:	d07b      	beq.n	8007ed6 <_strtod_l+0x286>
 8007dde:	f04f 0c00 	mov.w	ip, #0
 8007de2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007de6:	2909      	cmp	r1, #9
 8007de8:	f240 8082 	bls.w	8007ef0 <_strtod_l+0x2a0>
 8007dec:	9419      	str	r4, [sp, #100]	@ 0x64
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	e0a2      	b.n	8007f3a <_strtod_l+0x2ea>
 8007df4:	2300      	movs	r3, #0
 8007df6:	e7c7      	b.n	8007d88 <_strtod_l+0x138>
 8007df8:	2f08      	cmp	r7, #8
 8007dfa:	bfd5      	itete	le
 8007dfc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007dfe:	9908      	ldrgt	r1, [sp, #32]
 8007e00:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007e08:	f100 0001 	add.w	r0, r0, #1
 8007e0c:	bfd4      	ite	le
 8007e0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007e10:	9308      	strgt	r3, [sp, #32]
 8007e12:	3701      	adds	r7, #1
 8007e14:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e16:	e7bf      	b.n	8007d98 <_strtod_l+0x148>
 8007e18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e1e:	785a      	ldrb	r2, [r3, #1]
 8007e20:	b37f      	cbz	r7, 8007e82 <_strtod_l+0x232>
 8007e22:	4681      	mov	r9, r0
 8007e24:	463d      	mov	r5, r7
 8007e26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d912      	bls.n	8007e54 <_strtod_l+0x204>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e7c4      	b.n	8007dbc <_strtod_l+0x16c>
 8007e32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e38:	785a      	ldrb	r2, [r3, #1]
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	2a30      	cmp	r2, #48	@ 0x30
 8007e3e:	d0f8      	beq.n	8007e32 <_strtod_l+0x1e2>
 8007e40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	f200 84d3 	bhi.w	80087f0 <_strtod_l+0xba0>
 8007e4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e4e:	4681      	mov	r9, r0
 8007e50:	2000      	movs	r0, #0
 8007e52:	4605      	mov	r5, r0
 8007e54:	3a30      	subs	r2, #48	@ 0x30
 8007e56:	f100 0301 	add.w	r3, r0, #1
 8007e5a:	d02a      	beq.n	8007eb2 <_strtod_l+0x262>
 8007e5c:	4499      	add	r9, r3
 8007e5e:	eb00 0c05 	add.w	ip, r0, r5
 8007e62:	462b      	mov	r3, r5
 8007e64:	210a      	movs	r1, #10
 8007e66:	4563      	cmp	r3, ip
 8007e68:	d10d      	bne.n	8007e86 <_strtod_l+0x236>
 8007e6a:	1c69      	adds	r1, r5, #1
 8007e6c:	4401      	add	r1, r0
 8007e6e:	4428      	add	r0, r5
 8007e70:	2808      	cmp	r0, #8
 8007e72:	dc16      	bgt.n	8007ea2 <_strtod_l+0x252>
 8007e74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e76:	230a      	movs	r3, #10
 8007e78:	fb03 2300 	mla	r3, r3, r0, r2
 8007e7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e018      	b.n	8007eb4 <_strtod_l+0x264>
 8007e82:	4638      	mov	r0, r7
 8007e84:	e7da      	b.n	8007e3c <_strtod_l+0x1ec>
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	f103 0301 	add.w	r3, r3, #1
 8007e8c:	dc03      	bgt.n	8007e96 <_strtod_l+0x246>
 8007e8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007e90:	434e      	muls	r6, r1
 8007e92:	960a      	str	r6, [sp, #40]	@ 0x28
 8007e94:	e7e7      	b.n	8007e66 <_strtod_l+0x216>
 8007e96:	2b10      	cmp	r3, #16
 8007e98:	bfde      	ittt	le
 8007e9a:	9e08      	ldrle	r6, [sp, #32]
 8007e9c:	434e      	mulle	r6, r1
 8007e9e:	9608      	strle	r6, [sp, #32]
 8007ea0:	e7e1      	b.n	8007e66 <_strtod_l+0x216>
 8007ea2:	280f      	cmp	r0, #15
 8007ea4:	dceb      	bgt.n	8007e7e <_strtod_l+0x22e>
 8007ea6:	9808      	ldr	r0, [sp, #32]
 8007ea8:	230a      	movs	r3, #10
 8007eaa:	fb03 2300 	mla	r3, r3, r0, r2
 8007eae:	9308      	str	r3, [sp, #32]
 8007eb0:	e7e5      	b.n	8007e7e <_strtod_l+0x22e>
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007eb6:	1c50      	adds	r0, r2, #1
 8007eb8:	9019      	str	r0, [sp, #100]	@ 0x64
 8007eba:	7852      	ldrb	r2, [r2, #1]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	460d      	mov	r5, r1
 8007ec0:	e7b1      	b.n	8007e26 <_strtod_l+0x1d6>
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e77d      	b.n	8007dc6 <_strtod_l+0x176>
 8007eca:	f04f 0c00 	mov.w	ip, #0
 8007ece:	1ca2      	adds	r2, r4, #2
 8007ed0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ed2:	78a2      	ldrb	r2, [r4, #2]
 8007ed4:	e785      	b.n	8007de2 <_strtod_l+0x192>
 8007ed6:	f04f 0c01 	mov.w	ip, #1
 8007eda:	e7f8      	b.n	8007ece <_strtod_l+0x27e>
 8007edc:	0800ac00 	.word	0x0800ac00
 8007ee0:	0800abe8 	.word	0x0800abe8
 8007ee4:	7ff00000 	.word	0x7ff00000
 8007ee8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007eea:	1c51      	adds	r1, r2, #1
 8007eec:	9119      	str	r1, [sp, #100]	@ 0x64
 8007eee:	7852      	ldrb	r2, [r2, #1]
 8007ef0:	2a30      	cmp	r2, #48	@ 0x30
 8007ef2:	d0f9      	beq.n	8007ee8 <_strtod_l+0x298>
 8007ef4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007ef8:	2908      	cmp	r1, #8
 8007efa:	f63f af78 	bhi.w	8007dee <_strtod_l+0x19e>
 8007efe:	3a30      	subs	r2, #48	@ 0x30
 8007f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007f06:	f04f 080a 	mov.w	r8, #10
 8007f0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007f0c:	1c56      	adds	r6, r2, #1
 8007f0e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007f10:	7852      	ldrb	r2, [r2, #1]
 8007f12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007f16:	f1be 0f09 	cmp.w	lr, #9
 8007f1a:	d939      	bls.n	8007f90 <_strtod_l+0x340>
 8007f1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007f1e:	1a76      	subs	r6, r6, r1
 8007f20:	2e08      	cmp	r6, #8
 8007f22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007f26:	dc03      	bgt.n	8007f30 <_strtod_l+0x2e0>
 8007f28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f2a:	4588      	cmp	r8, r1
 8007f2c:	bfa8      	it	ge
 8007f2e:	4688      	movge	r8, r1
 8007f30:	f1bc 0f00 	cmp.w	ip, #0
 8007f34:	d001      	beq.n	8007f3a <_strtod_l+0x2ea>
 8007f36:	f1c8 0800 	rsb	r8, r8, #0
 8007f3a:	2d00      	cmp	r5, #0
 8007f3c:	d14e      	bne.n	8007fdc <_strtod_l+0x38c>
 8007f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f40:	4308      	orrs	r0, r1
 8007f42:	f47f aebe 	bne.w	8007cc2 <_strtod_l+0x72>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f47f aed6 	bne.w	8007cf8 <_strtod_l+0xa8>
 8007f4c:	2a69      	cmp	r2, #105	@ 0x69
 8007f4e:	d028      	beq.n	8007fa2 <_strtod_l+0x352>
 8007f50:	dc25      	bgt.n	8007f9e <_strtod_l+0x34e>
 8007f52:	2a49      	cmp	r2, #73	@ 0x49
 8007f54:	d025      	beq.n	8007fa2 <_strtod_l+0x352>
 8007f56:	2a4e      	cmp	r2, #78	@ 0x4e
 8007f58:	f47f aece 	bne.w	8007cf8 <_strtod_l+0xa8>
 8007f5c:	499b      	ldr	r1, [pc, #620]	@ (80081cc <_strtod_l+0x57c>)
 8007f5e:	a819      	add	r0, sp, #100	@ 0x64
 8007f60:	f001 f9ee 	bl	8009340 <__match>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	f43f aec7 	beq.w	8007cf8 <_strtod_l+0xa8>
 8007f6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b28      	cmp	r3, #40	@ 0x28
 8007f70:	d12e      	bne.n	8007fd0 <_strtod_l+0x380>
 8007f72:	4997      	ldr	r1, [pc, #604]	@ (80081d0 <_strtod_l+0x580>)
 8007f74:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f76:	a819      	add	r0, sp, #100	@ 0x64
 8007f78:	f001 f9f6 	bl	8009368 <__hexnan>
 8007f7c:	2805      	cmp	r0, #5
 8007f7e:	d127      	bne.n	8007fd0 <_strtod_l+0x380>
 8007f80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007f86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007f8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f8e:	e698      	b.n	8007cc2 <_strtod_l+0x72>
 8007f90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f92:	fb08 2101 	mla	r1, r8, r1, r2
 8007f96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f9c:	e7b5      	b.n	8007f0a <_strtod_l+0x2ba>
 8007f9e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007fa0:	e7da      	b.n	8007f58 <_strtod_l+0x308>
 8007fa2:	498c      	ldr	r1, [pc, #560]	@ (80081d4 <_strtod_l+0x584>)
 8007fa4:	a819      	add	r0, sp, #100	@ 0x64
 8007fa6:	f001 f9cb 	bl	8009340 <__match>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f43f aea4 	beq.w	8007cf8 <_strtod_l+0xa8>
 8007fb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fb2:	4989      	ldr	r1, [pc, #548]	@ (80081d8 <_strtod_l+0x588>)
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	a819      	add	r0, sp, #100	@ 0x64
 8007fb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007fba:	f001 f9c1 	bl	8009340 <__match>
 8007fbe:	b910      	cbnz	r0, 8007fc6 <_strtod_l+0x376>
 8007fc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007fc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80081e8 <_strtod_l+0x598>
 8007fca:	f04f 0a00 	mov.w	sl, #0
 8007fce:	e678      	b.n	8007cc2 <_strtod_l+0x72>
 8007fd0:	4882      	ldr	r0, [pc, #520]	@ (80081dc <_strtod_l+0x58c>)
 8007fd2:	f000 fef1 	bl	8008db8 <nan>
 8007fd6:	ec5b ab10 	vmov	sl, fp, d0
 8007fda:	e672      	b.n	8007cc2 <_strtod_l+0x72>
 8007fdc:	eba8 0309 	sub.w	r3, r8, r9
 8007fe0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe4:	2f00      	cmp	r7, #0
 8007fe6:	bf08      	it	eq
 8007fe8:	462f      	moveq	r7, r5
 8007fea:	2d10      	cmp	r5, #16
 8007fec:	462c      	mov	r4, r5
 8007fee:	bfa8      	it	ge
 8007ff0:	2410      	movge	r4, #16
 8007ff2:	f7f8 fa8f 	bl	8000514 <__aeabi_ui2d>
 8007ff6:	2d09      	cmp	r5, #9
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	468b      	mov	fp, r1
 8007ffc:	dc13      	bgt.n	8008026 <_strtod_l+0x3d6>
 8007ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	f43f ae5e 	beq.w	8007cc2 <_strtod_l+0x72>
 8008006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008008:	dd78      	ble.n	80080fc <_strtod_l+0x4ac>
 800800a:	2b16      	cmp	r3, #22
 800800c:	dc5f      	bgt.n	80080ce <_strtod_l+0x47e>
 800800e:	4974      	ldr	r1, [pc, #464]	@ (80081e0 <_strtod_l+0x590>)
 8008010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008018:	4652      	mov	r2, sl
 800801a:	465b      	mov	r3, fp
 800801c:	f7f8 faf4 	bl	8000608 <__aeabi_dmul>
 8008020:	4682      	mov	sl, r0
 8008022:	468b      	mov	fp, r1
 8008024:	e64d      	b.n	8007cc2 <_strtod_l+0x72>
 8008026:	4b6e      	ldr	r3, [pc, #440]	@ (80081e0 <_strtod_l+0x590>)
 8008028:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800802c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008030:	f7f8 faea 	bl	8000608 <__aeabi_dmul>
 8008034:	4682      	mov	sl, r0
 8008036:	9808      	ldr	r0, [sp, #32]
 8008038:	468b      	mov	fp, r1
 800803a:	f7f8 fa6b 	bl	8000514 <__aeabi_ui2d>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4650      	mov	r0, sl
 8008044:	4659      	mov	r1, fp
 8008046:	f7f8 f929 	bl	800029c <__adddf3>
 800804a:	2d0f      	cmp	r5, #15
 800804c:	4682      	mov	sl, r0
 800804e:	468b      	mov	fp, r1
 8008050:	ddd5      	ble.n	8007ffe <_strtod_l+0x3ae>
 8008052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008054:	1b2c      	subs	r4, r5, r4
 8008056:	441c      	add	r4, r3
 8008058:	2c00      	cmp	r4, #0
 800805a:	f340 8096 	ble.w	800818a <_strtod_l+0x53a>
 800805e:	f014 030f 	ands.w	r3, r4, #15
 8008062:	d00a      	beq.n	800807a <_strtod_l+0x42a>
 8008064:	495e      	ldr	r1, [pc, #376]	@ (80081e0 <_strtod_l+0x590>)
 8008066:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800806a:	4652      	mov	r2, sl
 800806c:	465b      	mov	r3, fp
 800806e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008072:	f7f8 fac9 	bl	8000608 <__aeabi_dmul>
 8008076:	4682      	mov	sl, r0
 8008078:	468b      	mov	fp, r1
 800807a:	f034 040f 	bics.w	r4, r4, #15
 800807e:	d073      	beq.n	8008168 <_strtod_l+0x518>
 8008080:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008084:	dd48      	ble.n	8008118 <_strtod_l+0x4c8>
 8008086:	2400      	movs	r4, #0
 8008088:	46a0      	mov	r8, r4
 800808a:	940a      	str	r4, [sp, #40]	@ 0x28
 800808c:	46a1      	mov	r9, r4
 800808e:	9a05      	ldr	r2, [sp, #20]
 8008090:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80081e8 <_strtod_l+0x598>
 8008094:	2322      	movs	r3, #34	@ 0x22
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	f04f 0a00 	mov.w	sl, #0
 800809c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f43f ae0f 	beq.w	8007cc2 <_strtod_l+0x72>
 80080a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080a6:	9805      	ldr	r0, [sp, #20]
 80080a8:	f7ff f942 	bl	8007330 <_Bfree>
 80080ac:	9805      	ldr	r0, [sp, #20]
 80080ae:	4649      	mov	r1, r9
 80080b0:	f7ff f93e 	bl	8007330 <_Bfree>
 80080b4:	9805      	ldr	r0, [sp, #20]
 80080b6:	4641      	mov	r1, r8
 80080b8:	f7ff f93a 	bl	8007330 <_Bfree>
 80080bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080be:	9805      	ldr	r0, [sp, #20]
 80080c0:	f7ff f936 	bl	8007330 <_Bfree>
 80080c4:	9805      	ldr	r0, [sp, #20]
 80080c6:	4621      	mov	r1, r4
 80080c8:	f7ff f932 	bl	8007330 <_Bfree>
 80080cc:	e5f9      	b.n	8007cc2 <_strtod_l+0x72>
 80080ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80080d4:	4293      	cmp	r3, r2
 80080d6:	dbbc      	blt.n	8008052 <_strtod_l+0x402>
 80080d8:	4c41      	ldr	r4, [pc, #260]	@ (80081e0 <_strtod_l+0x590>)
 80080da:	f1c5 050f 	rsb	r5, r5, #15
 80080de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080e2:	4652      	mov	r2, sl
 80080e4:	465b      	mov	r3, fp
 80080e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ea:	f7f8 fa8d 	bl	8000608 <__aeabi_dmul>
 80080ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f0:	1b5d      	subs	r5, r3, r5
 80080f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80080f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80080fa:	e78f      	b.n	800801c <_strtod_l+0x3cc>
 80080fc:	3316      	adds	r3, #22
 80080fe:	dba8      	blt.n	8008052 <_strtod_l+0x402>
 8008100:	4b37      	ldr	r3, [pc, #220]	@ (80081e0 <_strtod_l+0x590>)
 8008102:	eba9 0808 	sub.w	r8, r9, r8
 8008106:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800810a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800810e:	4650      	mov	r0, sl
 8008110:	4659      	mov	r1, fp
 8008112:	f7f8 fba3 	bl	800085c <__aeabi_ddiv>
 8008116:	e783      	b.n	8008020 <_strtod_l+0x3d0>
 8008118:	4b32      	ldr	r3, [pc, #200]	@ (80081e4 <_strtod_l+0x594>)
 800811a:	9308      	str	r3, [sp, #32]
 800811c:	2300      	movs	r3, #0
 800811e:	1124      	asrs	r4, r4, #4
 8008120:	4650      	mov	r0, sl
 8008122:	4659      	mov	r1, fp
 8008124:	461e      	mov	r6, r3
 8008126:	2c01      	cmp	r4, #1
 8008128:	dc21      	bgt.n	800816e <_strtod_l+0x51e>
 800812a:	b10b      	cbz	r3, 8008130 <_strtod_l+0x4e0>
 800812c:	4682      	mov	sl, r0
 800812e:	468b      	mov	fp, r1
 8008130:	492c      	ldr	r1, [pc, #176]	@ (80081e4 <_strtod_l+0x594>)
 8008132:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008136:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800813a:	4652      	mov	r2, sl
 800813c:	465b      	mov	r3, fp
 800813e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008142:	f7f8 fa61 	bl	8000608 <__aeabi_dmul>
 8008146:	4b28      	ldr	r3, [pc, #160]	@ (80081e8 <_strtod_l+0x598>)
 8008148:	460a      	mov	r2, r1
 800814a:	400b      	ands	r3, r1
 800814c:	4927      	ldr	r1, [pc, #156]	@ (80081ec <_strtod_l+0x59c>)
 800814e:	428b      	cmp	r3, r1
 8008150:	4682      	mov	sl, r0
 8008152:	d898      	bhi.n	8008086 <_strtod_l+0x436>
 8008154:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008158:	428b      	cmp	r3, r1
 800815a:	bf86      	itte	hi
 800815c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80081f0 <_strtod_l+0x5a0>
 8008160:	f04f 3aff 	movhi.w	sl, #4294967295
 8008164:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008168:	2300      	movs	r3, #0
 800816a:	9308      	str	r3, [sp, #32]
 800816c:	e07a      	b.n	8008264 <_strtod_l+0x614>
 800816e:	07e2      	lsls	r2, r4, #31
 8008170:	d505      	bpl.n	800817e <_strtod_l+0x52e>
 8008172:	9b08      	ldr	r3, [sp, #32]
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 fa46 	bl	8000608 <__aeabi_dmul>
 800817c:	2301      	movs	r3, #1
 800817e:	9a08      	ldr	r2, [sp, #32]
 8008180:	3208      	adds	r2, #8
 8008182:	3601      	adds	r6, #1
 8008184:	1064      	asrs	r4, r4, #1
 8008186:	9208      	str	r2, [sp, #32]
 8008188:	e7cd      	b.n	8008126 <_strtod_l+0x4d6>
 800818a:	d0ed      	beq.n	8008168 <_strtod_l+0x518>
 800818c:	4264      	negs	r4, r4
 800818e:	f014 020f 	ands.w	r2, r4, #15
 8008192:	d00a      	beq.n	80081aa <_strtod_l+0x55a>
 8008194:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <_strtod_l+0x590>)
 8008196:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800819a:	4650      	mov	r0, sl
 800819c:	4659      	mov	r1, fp
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 fb5b 	bl	800085c <__aeabi_ddiv>
 80081a6:	4682      	mov	sl, r0
 80081a8:	468b      	mov	fp, r1
 80081aa:	1124      	asrs	r4, r4, #4
 80081ac:	d0dc      	beq.n	8008168 <_strtod_l+0x518>
 80081ae:	2c1f      	cmp	r4, #31
 80081b0:	dd20      	ble.n	80081f4 <_strtod_l+0x5a4>
 80081b2:	2400      	movs	r4, #0
 80081b4:	46a0      	mov	r8, r4
 80081b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80081b8:	46a1      	mov	r9, r4
 80081ba:	9a05      	ldr	r2, [sp, #20]
 80081bc:	2322      	movs	r3, #34	@ 0x22
 80081be:	f04f 0a00 	mov.w	sl, #0
 80081c2:	f04f 0b00 	mov.w	fp, #0
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	e768      	b.n	800809c <_strtod_l+0x44c>
 80081ca:	bf00      	nop
 80081cc:	0800a9d5 	.word	0x0800a9d5
 80081d0:	0800abec 	.word	0x0800abec
 80081d4:	0800a9cd 	.word	0x0800a9cd
 80081d8:	0800aa04 	.word	0x0800aa04
 80081dc:	0800ad95 	.word	0x0800ad95
 80081e0:	0800ab20 	.word	0x0800ab20
 80081e4:	0800aaf8 	.word	0x0800aaf8
 80081e8:	7ff00000 	.word	0x7ff00000
 80081ec:	7ca00000 	.word	0x7ca00000
 80081f0:	7fefffff 	.word	0x7fefffff
 80081f4:	f014 0310 	ands.w	r3, r4, #16
 80081f8:	bf18      	it	ne
 80081fa:	236a      	movne	r3, #106	@ 0x6a
 80081fc:	4ea9      	ldr	r6, [pc, #676]	@ (80084a4 <_strtod_l+0x854>)
 80081fe:	9308      	str	r3, [sp, #32]
 8008200:	4650      	mov	r0, sl
 8008202:	4659      	mov	r1, fp
 8008204:	2300      	movs	r3, #0
 8008206:	07e2      	lsls	r2, r4, #31
 8008208:	d504      	bpl.n	8008214 <_strtod_l+0x5c4>
 800820a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800820e:	f7f8 f9fb 	bl	8000608 <__aeabi_dmul>
 8008212:	2301      	movs	r3, #1
 8008214:	1064      	asrs	r4, r4, #1
 8008216:	f106 0608 	add.w	r6, r6, #8
 800821a:	d1f4      	bne.n	8008206 <_strtod_l+0x5b6>
 800821c:	b10b      	cbz	r3, 8008222 <_strtod_l+0x5d2>
 800821e:	4682      	mov	sl, r0
 8008220:	468b      	mov	fp, r1
 8008222:	9b08      	ldr	r3, [sp, #32]
 8008224:	b1b3      	cbz	r3, 8008254 <_strtod_l+0x604>
 8008226:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800822a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800822e:	2b00      	cmp	r3, #0
 8008230:	4659      	mov	r1, fp
 8008232:	dd0f      	ble.n	8008254 <_strtod_l+0x604>
 8008234:	2b1f      	cmp	r3, #31
 8008236:	dd55      	ble.n	80082e4 <_strtod_l+0x694>
 8008238:	2b34      	cmp	r3, #52	@ 0x34
 800823a:	bfde      	ittt	le
 800823c:	f04f 33ff 	movle.w	r3, #4294967295
 8008240:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008244:	4093      	lslle	r3, r2
 8008246:	f04f 0a00 	mov.w	sl, #0
 800824a:	bfcc      	ite	gt
 800824c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008250:	ea03 0b01 	andle.w	fp, r3, r1
 8008254:	2200      	movs	r2, #0
 8008256:	2300      	movs	r3, #0
 8008258:	4650      	mov	r0, sl
 800825a:	4659      	mov	r1, fp
 800825c:	f7f8 fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008260:	2800      	cmp	r0, #0
 8008262:	d1a6      	bne.n	80081b2 <_strtod_l+0x562>
 8008264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800826a:	9805      	ldr	r0, [sp, #20]
 800826c:	462b      	mov	r3, r5
 800826e:	463a      	mov	r2, r7
 8008270:	f7ff f8c6 	bl	8007400 <__s2b>
 8008274:	900a      	str	r0, [sp, #40]	@ 0x28
 8008276:	2800      	cmp	r0, #0
 8008278:	f43f af05 	beq.w	8008086 <_strtod_l+0x436>
 800827c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800827e:	2a00      	cmp	r2, #0
 8008280:	eba9 0308 	sub.w	r3, r9, r8
 8008284:	bfa8      	it	ge
 8008286:	2300      	movge	r3, #0
 8008288:	9312      	str	r3, [sp, #72]	@ 0x48
 800828a:	2400      	movs	r4, #0
 800828c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008290:	9316      	str	r3, [sp, #88]	@ 0x58
 8008292:	46a0      	mov	r8, r4
 8008294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008296:	9805      	ldr	r0, [sp, #20]
 8008298:	6859      	ldr	r1, [r3, #4]
 800829a:	f7ff f809 	bl	80072b0 <_Balloc>
 800829e:	4681      	mov	r9, r0
 80082a0:	2800      	cmp	r0, #0
 80082a2:	f43f aef4 	beq.w	800808e <_strtod_l+0x43e>
 80082a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	3202      	adds	r2, #2
 80082ac:	f103 010c 	add.w	r1, r3, #12
 80082b0:	0092      	lsls	r2, r2, #2
 80082b2:	300c      	adds	r0, #12
 80082b4:	f000 fd72 	bl	8008d9c <memcpy>
 80082b8:	ec4b ab10 	vmov	d0, sl, fp
 80082bc:	9805      	ldr	r0, [sp, #20]
 80082be:	aa1c      	add	r2, sp, #112	@ 0x70
 80082c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80082c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80082c6:	f7ff fbd7 	bl	8007a78 <__d2b>
 80082ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f43f aede 	beq.w	800808e <_strtod_l+0x43e>
 80082d2:	9805      	ldr	r0, [sp, #20]
 80082d4:	2101      	movs	r1, #1
 80082d6:	f7ff f929 	bl	800752c <__i2b>
 80082da:	4680      	mov	r8, r0
 80082dc:	b948      	cbnz	r0, 80082f2 <_strtod_l+0x6a2>
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	e6d4      	b.n	800808e <_strtod_l+0x43e>
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	ea03 0a0a 	and.w	sl, r3, sl
 80082f0:	e7b0      	b.n	8008254 <_strtod_l+0x604>
 80082f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80082f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	bfab      	itete	ge
 80082fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80082fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80082fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008300:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008302:	bfac      	ite	ge
 8008304:	18ef      	addge	r7, r5, r3
 8008306:	1b5e      	sublt	r6, r3, r5
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	1aed      	subs	r5, r5, r3
 800830c:	4415      	add	r5, r2
 800830e:	4b66      	ldr	r3, [pc, #408]	@ (80084a8 <_strtod_l+0x858>)
 8008310:	3d01      	subs	r5, #1
 8008312:	429d      	cmp	r5, r3
 8008314:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008318:	da50      	bge.n	80083bc <_strtod_l+0x76c>
 800831a:	1b5b      	subs	r3, r3, r5
 800831c:	2b1f      	cmp	r3, #31
 800831e:	eba2 0203 	sub.w	r2, r2, r3
 8008322:	f04f 0101 	mov.w	r1, #1
 8008326:	dc3d      	bgt.n	80083a4 <_strtod_l+0x754>
 8008328:	fa01 f303 	lsl.w	r3, r1, r3
 800832c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800832e:	2300      	movs	r3, #0
 8008330:	9310      	str	r3, [sp, #64]	@ 0x40
 8008332:	18bd      	adds	r5, r7, r2
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	42af      	cmp	r7, r5
 8008338:	4416      	add	r6, r2
 800833a:	441e      	add	r6, r3
 800833c:	463b      	mov	r3, r7
 800833e:	bfa8      	it	ge
 8008340:	462b      	movge	r3, r5
 8008342:	42b3      	cmp	r3, r6
 8008344:	bfa8      	it	ge
 8008346:	4633      	movge	r3, r6
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfc2      	ittt	gt
 800834c:	1aed      	subgt	r5, r5, r3
 800834e:	1af6      	subgt	r6, r6, r3
 8008350:	1aff      	subgt	r7, r7, r3
 8008352:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd16      	ble.n	8008386 <_strtod_l+0x736>
 8008358:	4641      	mov	r1, r8
 800835a:	9805      	ldr	r0, [sp, #20]
 800835c:	461a      	mov	r2, r3
 800835e:	f7ff f9a5 	bl	80076ac <__pow5mult>
 8008362:	4680      	mov	r8, r0
 8008364:	2800      	cmp	r0, #0
 8008366:	d0ba      	beq.n	80082de <_strtod_l+0x68e>
 8008368:	4601      	mov	r1, r0
 800836a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800836c:	9805      	ldr	r0, [sp, #20]
 800836e:	f7ff f8f3 	bl	8007558 <__multiply>
 8008372:	900e      	str	r0, [sp, #56]	@ 0x38
 8008374:	2800      	cmp	r0, #0
 8008376:	f43f ae8a 	beq.w	800808e <_strtod_l+0x43e>
 800837a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800837c:	9805      	ldr	r0, [sp, #20]
 800837e:	f7fe ffd7 	bl	8007330 <_Bfree>
 8008382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008384:	931a      	str	r3, [sp, #104]	@ 0x68
 8008386:	2d00      	cmp	r5, #0
 8008388:	dc1d      	bgt.n	80083c6 <_strtod_l+0x776>
 800838a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd23      	ble.n	80083d8 <_strtod_l+0x788>
 8008390:	4649      	mov	r1, r9
 8008392:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008394:	9805      	ldr	r0, [sp, #20]
 8008396:	f7ff f989 	bl	80076ac <__pow5mult>
 800839a:	4681      	mov	r9, r0
 800839c:	b9e0      	cbnz	r0, 80083d8 <_strtod_l+0x788>
 800839e:	f04f 0900 	mov.w	r9, #0
 80083a2:	e674      	b.n	800808e <_strtod_l+0x43e>
 80083a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80083a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80083ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80083b0:	35e2      	adds	r5, #226	@ 0xe2
 80083b2:	fa01 f305 	lsl.w	r3, r1, r5
 80083b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80083b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80083ba:	e7ba      	b.n	8008332 <_strtod_l+0x6e2>
 80083bc:	2300      	movs	r3, #0
 80083be:	9310      	str	r3, [sp, #64]	@ 0x40
 80083c0:	2301      	movs	r3, #1
 80083c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083c4:	e7b5      	b.n	8008332 <_strtod_l+0x6e2>
 80083c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083c8:	9805      	ldr	r0, [sp, #20]
 80083ca:	462a      	mov	r2, r5
 80083cc:	f7ff f9c8 	bl	8007760 <__lshift>
 80083d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d1d9      	bne.n	800838a <_strtod_l+0x73a>
 80083d6:	e65a      	b.n	800808e <_strtod_l+0x43e>
 80083d8:	2e00      	cmp	r6, #0
 80083da:	dd07      	ble.n	80083ec <_strtod_l+0x79c>
 80083dc:	4649      	mov	r1, r9
 80083de:	9805      	ldr	r0, [sp, #20]
 80083e0:	4632      	mov	r2, r6
 80083e2:	f7ff f9bd 	bl	8007760 <__lshift>
 80083e6:	4681      	mov	r9, r0
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d0d8      	beq.n	800839e <_strtod_l+0x74e>
 80083ec:	2f00      	cmp	r7, #0
 80083ee:	dd08      	ble.n	8008402 <_strtod_l+0x7b2>
 80083f0:	4641      	mov	r1, r8
 80083f2:	9805      	ldr	r0, [sp, #20]
 80083f4:	463a      	mov	r2, r7
 80083f6:	f7ff f9b3 	bl	8007760 <__lshift>
 80083fa:	4680      	mov	r8, r0
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f43f ae46 	beq.w	800808e <_strtod_l+0x43e>
 8008402:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008404:	9805      	ldr	r0, [sp, #20]
 8008406:	464a      	mov	r2, r9
 8008408:	f7ff fa32 	bl	8007870 <__mdiff>
 800840c:	4604      	mov	r4, r0
 800840e:	2800      	cmp	r0, #0
 8008410:	f43f ae3d 	beq.w	800808e <_strtod_l+0x43e>
 8008414:	68c3      	ldr	r3, [r0, #12]
 8008416:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008418:	2300      	movs	r3, #0
 800841a:	60c3      	str	r3, [r0, #12]
 800841c:	4641      	mov	r1, r8
 800841e:	f7ff fa0b 	bl	8007838 <__mcmp>
 8008422:	2800      	cmp	r0, #0
 8008424:	da46      	bge.n	80084b4 <_strtod_l+0x864>
 8008426:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008428:	ea53 030a 	orrs.w	r3, r3, sl
 800842c:	d16c      	bne.n	8008508 <_strtod_l+0x8b8>
 800842e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008432:	2b00      	cmp	r3, #0
 8008434:	d168      	bne.n	8008508 <_strtod_l+0x8b8>
 8008436:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800843a:	0d1b      	lsrs	r3, r3, #20
 800843c:	051b      	lsls	r3, r3, #20
 800843e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008442:	d961      	bls.n	8008508 <_strtod_l+0x8b8>
 8008444:	6963      	ldr	r3, [r4, #20]
 8008446:	b913      	cbnz	r3, 800844e <_strtod_l+0x7fe>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	2b01      	cmp	r3, #1
 800844c:	dd5c      	ble.n	8008508 <_strtod_l+0x8b8>
 800844e:	4621      	mov	r1, r4
 8008450:	2201      	movs	r2, #1
 8008452:	9805      	ldr	r0, [sp, #20]
 8008454:	f7ff f984 	bl	8007760 <__lshift>
 8008458:	4641      	mov	r1, r8
 800845a:	4604      	mov	r4, r0
 800845c:	f7ff f9ec 	bl	8007838 <__mcmp>
 8008460:	2800      	cmp	r0, #0
 8008462:	dd51      	ble.n	8008508 <_strtod_l+0x8b8>
 8008464:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008468:	9a08      	ldr	r2, [sp, #32]
 800846a:	0d1b      	lsrs	r3, r3, #20
 800846c:	051b      	lsls	r3, r3, #20
 800846e:	2a00      	cmp	r2, #0
 8008470:	d06b      	beq.n	800854a <_strtod_l+0x8fa>
 8008472:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008476:	d868      	bhi.n	800854a <_strtod_l+0x8fa>
 8008478:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800847c:	f67f ae9d 	bls.w	80081ba <_strtod_l+0x56a>
 8008480:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <_strtod_l+0x85c>)
 8008482:	4650      	mov	r0, sl
 8008484:	4659      	mov	r1, fp
 8008486:	2200      	movs	r2, #0
 8008488:	f7f8 f8be 	bl	8000608 <__aeabi_dmul>
 800848c:	4b08      	ldr	r3, [pc, #32]	@ (80084b0 <_strtod_l+0x860>)
 800848e:	400b      	ands	r3, r1
 8008490:	4682      	mov	sl, r0
 8008492:	468b      	mov	fp, r1
 8008494:	2b00      	cmp	r3, #0
 8008496:	f47f ae05 	bne.w	80080a4 <_strtod_l+0x454>
 800849a:	9a05      	ldr	r2, [sp, #20]
 800849c:	2322      	movs	r3, #34	@ 0x22
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	e600      	b.n	80080a4 <_strtod_l+0x454>
 80084a2:	bf00      	nop
 80084a4:	0800ac18 	.word	0x0800ac18
 80084a8:	fffffc02 	.word	0xfffffc02
 80084ac:	39500000 	.word	0x39500000
 80084b0:	7ff00000 	.word	0x7ff00000
 80084b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80084b8:	d165      	bne.n	8008586 <_strtod_l+0x936>
 80084ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80084bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084c0:	b35a      	cbz	r2, 800851a <_strtod_l+0x8ca>
 80084c2:	4a9f      	ldr	r2, [pc, #636]	@ (8008740 <_strtod_l+0xaf0>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d12b      	bne.n	8008520 <_strtod_l+0x8d0>
 80084c8:	9b08      	ldr	r3, [sp, #32]
 80084ca:	4651      	mov	r1, sl
 80084cc:	b303      	cbz	r3, 8008510 <_strtod_l+0x8c0>
 80084ce:	4b9d      	ldr	r3, [pc, #628]	@ (8008744 <_strtod_l+0xaf4>)
 80084d0:	465a      	mov	r2, fp
 80084d2:	4013      	ands	r3, r2
 80084d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80084d8:	f04f 32ff 	mov.w	r2, #4294967295
 80084dc:	d81b      	bhi.n	8008516 <_strtod_l+0x8c6>
 80084de:	0d1b      	lsrs	r3, r3, #20
 80084e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80084e4:	fa02 f303 	lsl.w	r3, r2, r3
 80084e8:	4299      	cmp	r1, r3
 80084ea:	d119      	bne.n	8008520 <_strtod_l+0x8d0>
 80084ec:	4b96      	ldr	r3, [pc, #600]	@ (8008748 <_strtod_l+0xaf8>)
 80084ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d102      	bne.n	80084fa <_strtod_l+0x8aa>
 80084f4:	3101      	adds	r1, #1
 80084f6:	f43f adca 	beq.w	800808e <_strtod_l+0x43e>
 80084fa:	4b92      	ldr	r3, [pc, #584]	@ (8008744 <_strtod_l+0xaf4>)
 80084fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084fe:	401a      	ands	r2, r3
 8008500:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008504:	f04f 0a00 	mov.w	sl, #0
 8008508:	9b08      	ldr	r3, [sp, #32]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1b8      	bne.n	8008480 <_strtod_l+0x830>
 800850e:	e5c9      	b.n	80080a4 <_strtod_l+0x454>
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	e7e8      	b.n	80084e8 <_strtod_l+0x898>
 8008516:	4613      	mov	r3, r2
 8008518:	e7e6      	b.n	80084e8 <_strtod_l+0x898>
 800851a:	ea53 030a 	orrs.w	r3, r3, sl
 800851e:	d0a1      	beq.n	8008464 <_strtod_l+0x814>
 8008520:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008522:	b1db      	cbz	r3, 800855c <_strtod_l+0x90c>
 8008524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008526:	4213      	tst	r3, r2
 8008528:	d0ee      	beq.n	8008508 <_strtod_l+0x8b8>
 800852a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800852c:	9a08      	ldr	r2, [sp, #32]
 800852e:	4650      	mov	r0, sl
 8008530:	4659      	mov	r1, fp
 8008532:	b1bb      	cbz	r3, 8008564 <_strtod_l+0x914>
 8008534:	f7ff fb6e 	bl	8007c14 <sulp>
 8008538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800853c:	ec53 2b10 	vmov	r2, r3, d0
 8008540:	f7f7 feac 	bl	800029c <__adddf3>
 8008544:	4682      	mov	sl, r0
 8008546:	468b      	mov	fp, r1
 8008548:	e7de      	b.n	8008508 <_strtod_l+0x8b8>
 800854a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800854e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008552:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008556:	f04f 3aff 	mov.w	sl, #4294967295
 800855a:	e7d5      	b.n	8008508 <_strtod_l+0x8b8>
 800855c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800855e:	ea13 0f0a 	tst.w	r3, sl
 8008562:	e7e1      	b.n	8008528 <_strtod_l+0x8d8>
 8008564:	f7ff fb56 	bl	8007c14 <sulp>
 8008568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800856c:	ec53 2b10 	vmov	r2, r3, d0
 8008570:	f7f7 fe92 	bl	8000298 <__aeabi_dsub>
 8008574:	2200      	movs	r2, #0
 8008576:	2300      	movs	r3, #0
 8008578:	4682      	mov	sl, r0
 800857a:	468b      	mov	fp, r1
 800857c:	f7f8 faac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008580:	2800      	cmp	r0, #0
 8008582:	d0c1      	beq.n	8008508 <_strtod_l+0x8b8>
 8008584:	e619      	b.n	80081ba <_strtod_l+0x56a>
 8008586:	4641      	mov	r1, r8
 8008588:	4620      	mov	r0, r4
 800858a:	f7ff facd 	bl	8007b28 <__ratio>
 800858e:	ec57 6b10 	vmov	r6, r7, d0
 8008592:	2200      	movs	r2, #0
 8008594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f8 fab0 	bl	8000b00 <__aeabi_dcmple>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d06f      	beq.n	8008684 <_strtod_l+0xa34>
 80085a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d17a      	bne.n	80086a0 <_strtod_l+0xa50>
 80085aa:	f1ba 0f00 	cmp.w	sl, #0
 80085ae:	d158      	bne.n	8008662 <_strtod_l+0xa12>
 80085b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d15a      	bne.n	8008670 <_strtod_l+0xa20>
 80085ba:	4b64      	ldr	r3, [pc, #400]	@ (800874c <_strtod_l+0xafc>)
 80085bc:	2200      	movs	r2, #0
 80085be:	4630      	mov	r0, r6
 80085c0:	4639      	mov	r1, r7
 80085c2:	f7f8 fa93 	bl	8000aec <__aeabi_dcmplt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d159      	bne.n	800867e <_strtod_l+0xa2e>
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	4b60      	ldr	r3, [pc, #384]	@ (8008750 <_strtod_l+0xb00>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	4606      	mov	r6, r0
 80085d8:	460f      	mov	r7, r1
 80085da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80085de:	9606      	str	r6, [sp, #24]
 80085e0:	9307      	str	r3, [sp, #28]
 80085e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085e6:	4d57      	ldr	r5, [pc, #348]	@ (8008744 <_strtod_l+0xaf4>)
 80085e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ee:	401d      	ands	r5, r3
 80085f0:	4b58      	ldr	r3, [pc, #352]	@ (8008754 <_strtod_l+0xb04>)
 80085f2:	429d      	cmp	r5, r3
 80085f4:	f040 80b2 	bne.w	800875c <_strtod_l+0xb0c>
 80085f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80085fe:	ec4b ab10 	vmov	d0, sl, fp
 8008602:	f7ff f9c9 	bl	8007998 <__ulp>
 8008606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800860a:	ec51 0b10 	vmov	r0, r1, d0
 800860e:	f7f7 fffb 	bl	8000608 <__aeabi_dmul>
 8008612:	4652      	mov	r2, sl
 8008614:	465b      	mov	r3, fp
 8008616:	f7f7 fe41 	bl	800029c <__adddf3>
 800861a:	460b      	mov	r3, r1
 800861c:	4949      	ldr	r1, [pc, #292]	@ (8008744 <_strtod_l+0xaf4>)
 800861e:	4a4e      	ldr	r2, [pc, #312]	@ (8008758 <_strtod_l+0xb08>)
 8008620:	4019      	ands	r1, r3
 8008622:	4291      	cmp	r1, r2
 8008624:	4682      	mov	sl, r0
 8008626:	d942      	bls.n	80086ae <_strtod_l+0xa5e>
 8008628:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800862a:	4b47      	ldr	r3, [pc, #284]	@ (8008748 <_strtod_l+0xaf8>)
 800862c:	429a      	cmp	r2, r3
 800862e:	d103      	bne.n	8008638 <_strtod_l+0x9e8>
 8008630:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008632:	3301      	adds	r3, #1
 8008634:	f43f ad2b 	beq.w	800808e <_strtod_l+0x43e>
 8008638:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008748 <_strtod_l+0xaf8>
 800863c:	f04f 3aff 	mov.w	sl, #4294967295
 8008640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008642:	9805      	ldr	r0, [sp, #20]
 8008644:	f7fe fe74 	bl	8007330 <_Bfree>
 8008648:	9805      	ldr	r0, [sp, #20]
 800864a:	4649      	mov	r1, r9
 800864c:	f7fe fe70 	bl	8007330 <_Bfree>
 8008650:	9805      	ldr	r0, [sp, #20]
 8008652:	4641      	mov	r1, r8
 8008654:	f7fe fe6c 	bl	8007330 <_Bfree>
 8008658:	9805      	ldr	r0, [sp, #20]
 800865a:	4621      	mov	r1, r4
 800865c:	f7fe fe68 	bl	8007330 <_Bfree>
 8008660:	e618      	b.n	8008294 <_strtod_l+0x644>
 8008662:	f1ba 0f01 	cmp.w	sl, #1
 8008666:	d103      	bne.n	8008670 <_strtod_l+0xa20>
 8008668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800866a:	2b00      	cmp	r3, #0
 800866c:	f43f ada5 	beq.w	80081ba <_strtod_l+0x56a>
 8008670:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008720 <_strtod_l+0xad0>
 8008674:	4f35      	ldr	r7, [pc, #212]	@ (800874c <_strtod_l+0xafc>)
 8008676:	ed8d 7b06 	vstr	d7, [sp, #24]
 800867a:	2600      	movs	r6, #0
 800867c:	e7b1      	b.n	80085e2 <_strtod_l+0x992>
 800867e:	4f34      	ldr	r7, [pc, #208]	@ (8008750 <_strtod_l+0xb00>)
 8008680:	2600      	movs	r6, #0
 8008682:	e7aa      	b.n	80085da <_strtod_l+0x98a>
 8008684:	4b32      	ldr	r3, [pc, #200]	@ (8008750 <_strtod_l+0xb00>)
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	2200      	movs	r2, #0
 800868c:	f7f7 ffbc 	bl	8000608 <__aeabi_dmul>
 8008690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008692:	4606      	mov	r6, r0
 8008694:	460f      	mov	r7, r1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d09f      	beq.n	80085da <_strtod_l+0x98a>
 800869a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800869e:	e7a0      	b.n	80085e2 <_strtod_l+0x992>
 80086a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008728 <_strtod_l+0xad8>
 80086a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086a8:	ec57 6b17 	vmov	r6, r7, d7
 80086ac:	e799      	b.n	80085e2 <_strtod_l+0x992>
 80086ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1c1      	bne.n	8008640 <_strtod_l+0x9f0>
 80086bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086c0:	0d1b      	lsrs	r3, r3, #20
 80086c2:	051b      	lsls	r3, r3, #20
 80086c4:	429d      	cmp	r5, r3
 80086c6:	d1bb      	bne.n	8008640 <_strtod_l+0x9f0>
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f8 fafc 	bl	8000cc8 <__aeabi_d2lz>
 80086d0:	f7f7 ff6c 	bl	80005ac <__aeabi_l2d>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4630      	mov	r0, r6
 80086da:	4639      	mov	r1, r7
 80086dc:	f7f7 fddc 	bl	8000298 <__aeabi_dsub>
 80086e0:	460b      	mov	r3, r1
 80086e2:	4602      	mov	r2, r0
 80086e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80086e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80086ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ee:	ea46 060a 	orr.w	r6, r6, sl
 80086f2:	431e      	orrs	r6, r3
 80086f4:	d06f      	beq.n	80087d6 <_strtod_l+0xb86>
 80086f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008730 <_strtod_l+0xae0>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f7f8 f9f6 	bl	8000aec <__aeabi_dcmplt>
 8008700:	2800      	cmp	r0, #0
 8008702:	f47f accf 	bne.w	80080a4 <_strtod_l+0x454>
 8008706:	a30c      	add	r3, pc, #48	@ (adr r3, 8008738 <_strtod_l+0xae8>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008710:	f7f8 fa0a 	bl	8000b28 <__aeabi_dcmpgt>
 8008714:	2800      	cmp	r0, #0
 8008716:	d093      	beq.n	8008640 <_strtod_l+0x9f0>
 8008718:	e4c4      	b.n	80080a4 <_strtod_l+0x454>
 800871a:	bf00      	nop
 800871c:	f3af 8000 	nop.w
 8008720:	00000000 	.word	0x00000000
 8008724:	bff00000 	.word	0xbff00000
 8008728:	00000000 	.word	0x00000000
 800872c:	3ff00000 	.word	0x3ff00000
 8008730:	94a03595 	.word	0x94a03595
 8008734:	3fdfffff 	.word	0x3fdfffff
 8008738:	35afe535 	.word	0x35afe535
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	000fffff 	.word	0x000fffff
 8008744:	7ff00000 	.word	0x7ff00000
 8008748:	7fefffff 	.word	0x7fefffff
 800874c:	3ff00000 	.word	0x3ff00000
 8008750:	3fe00000 	.word	0x3fe00000
 8008754:	7fe00000 	.word	0x7fe00000
 8008758:	7c9fffff 	.word	0x7c9fffff
 800875c:	9b08      	ldr	r3, [sp, #32]
 800875e:	b323      	cbz	r3, 80087aa <_strtod_l+0xb5a>
 8008760:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008764:	d821      	bhi.n	80087aa <_strtod_l+0xb5a>
 8008766:	a328      	add	r3, pc, #160	@ (adr r3, 8008808 <_strtod_l+0xbb8>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	4630      	mov	r0, r6
 800876e:	4639      	mov	r1, r7
 8008770:	f7f8 f9c6 	bl	8000b00 <__aeabi_dcmple>
 8008774:	b1a0      	cbz	r0, 80087a0 <_strtod_l+0xb50>
 8008776:	4639      	mov	r1, r7
 8008778:	4630      	mov	r0, r6
 800877a:	f7f8 fa1d 	bl	8000bb8 <__aeabi_d2uiz>
 800877e:	2801      	cmp	r0, #1
 8008780:	bf38      	it	cc
 8008782:	2001      	movcc	r0, #1
 8008784:	f7f7 fec6 	bl	8000514 <__aeabi_ui2d>
 8008788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800878a:	4606      	mov	r6, r0
 800878c:	460f      	mov	r7, r1
 800878e:	b9fb      	cbnz	r3, 80087d0 <_strtod_l+0xb80>
 8008790:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008794:	9014      	str	r0, [sp, #80]	@ 0x50
 8008796:	9315      	str	r3, [sp, #84]	@ 0x54
 8008798:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800879c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80087a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80087a6:	1b5b      	subs	r3, r3, r5
 80087a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80087aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80087ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80087b2:	f7ff f8f1 	bl	8007998 <__ulp>
 80087b6:	4650      	mov	r0, sl
 80087b8:	ec53 2b10 	vmov	r2, r3, d0
 80087bc:	4659      	mov	r1, fp
 80087be:	f7f7 ff23 	bl	8000608 <__aeabi_dmul>
 80087c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80087c6:	f7f7 fd69 	bl	800029c <__adddf3>
 80087ca:	4682      	mov	sl, r0
 80087cc:	468b      	mov	fp, r1
 80087ce:	e770      	b.n	80086b2 <_strtod_l+0xa62>
 80087d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80087d4:	e7e0      	b.n	8008798 <_strtod_l+0xb48>
 80087d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008810 <_strtod_l+0xbc0>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f7f8 f986 	bl	8000aec <__aeabi_dcmplt>
 80087e0:	e798      	b.n	8008714 <_strtod_l+0xac4>
 80087e2:	2300      	movs	r3, #0
 80087e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80087e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	f7ff ba6d 	b.w	8007cca <_strtod_l+0x7a>
 80087f0:	2a65      	cmp	r2, #101	@ 0x65
 80087f2:	f43f ab66 	beq.w	8007ec2 <_strtod_l+0x272>
 80087f6:	2a45      	cmp	r2, #69	@ 0x45
 80087f8:	f43f ab63 	beq.w	8007ec2 <_strtod_l+0x272>
 80087fc:	2301      	movs	r3, #1
 80087fe:	f7ff bb9e 	b.w	8007f3e <_strtod_l+0x2ee>
 8008802:	bf00      	nop
 8008804:	f3af 8000 	nop.w
 8008808:	ffc00000 	.word	0xffc00000
 800880c:	41dfffff 	.word	0x41dfffff
 8008810:	94a03595 	.word	0x94a03595
 8008814:	3fcfffff 	.word	0x3fcfffff

08008818 <_strtod_r>:
 8008818:	4b01      	ldr	r3, [pc, #4]	@ (8008820 <_strtod_r+0x8>)
 800881a:	f7ff ba19 	b.w	8007c50 <_strtod_l>
 800881e:	bf00      	nop
 8008820:	20000068 	.word	0x20000068

08008824 <_strtol_l.constprop.0>:
 8008824:	2b24      	cmp	r3, #36	@ 0x24
 8008826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800882a:	4686      	mov	lr, r0
 800882c:	4690      	mov	r8, r2
 800882e:	d801      	bhi.n	8008834 <_strtol_l.constprop.0+0x10>
 8008830:	2b01      	cmp	r3, #1
 8008832:	d106      	bne.n	8008842 <_strtol_l.constprop.0+0x1e>
 8008834:	f7fd fdbc 	bl	80063b0 <__errno>
 8008838:	2316      	movs	r3, #22
 800883a:	6003      	str	r3, [r0, #0]
 800883c:	2000      	movs	r0, #0
 800883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008842:	4834      	ldr	r0, [pc, #208]	@ (8008914 <_strtol_l.constprop.0+0xf0>)
 8008844:	460d      	mov	r5, r1
 8008846:	462a      	mov	r2, r5
 8008848:	f815 4b01 	ldrb.w	r4, [r5], #1
 800884c:	5d06      	ldrb	r6, [r0, r4]
 800884e:	f016 0608 	ands.w	r6, r6, #8
 8008852:	d1f8      	bne.n	8008846 <_strtol_l.constprop.0+0x22>
 8008854:	2c2d      	cmp	r4, #45	@ 0x2d
 8008856:	d12d      	bne.n	80088b4 <_strtol_l.constprop.0+0x90>
 8008858:	782c      	ldrb	r4, [r5, #0]
 800885a:	2601      	movs	r6, #1
 800885c:	1c95      	adds	r5, r2, #2
 800885e:	f033 0210 	bics.w	r2, r3, #16
 8008862:	d109      	bne.n	8008878 <_strtol_l.constprop.0+0x54>
 8008864:	2c30      	cmp	r4, #48	@ 0x30
 8008866:	d12a      	bne.n	80088be <_strtol_l.constprop.0+0x9a>
 8008868:	782a      	ldrb	r2, [r5, #0]
 800886a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800886e:	2a58      	cmp	r2, #88	@ 0x58
 8008870:	d125      	bne.n	80088be <_strtol_l.constprop.0+0x9a>
 8008872:	786c      	ldrb	r4, [r5, #1]
 8008874:	2310      	movs	r3, #16
 8008876:	3502      	adds	r5, #2
 8008878:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800887c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008880:	2200      	movs	r2, #0
 8008882:	fbbc f9f3 	udiv	r9, ip, r3
 8008886:	4610      	mov	r0, r2
 8008888:	fb03 ca19 	mls	sl, r3, r9, ip
 800888c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008890:	2f09      	cmp	r7, #9
 8008892:	d81b      	bhi.n	80088cc <_strtol_l.constprop.0+0xa8>
 8008894:	463c      	mov	r4, r7
 8008896:	42a3      	cmp	r3, r4
 8008898:	dd27      	ble.n	80088ea <_strtol_l.constprop.0+0xc6>
 800889a:	1c57      	adds	r7, r2, #1
 800889c:	d007      	beq.n	80088ae <_strtol_l.constprop.0+0x8a>
 800889e:	4581      	cmp	r9, r0
 80088a0:	d320      	bcc.n	80088e4 <_strtol_l.constprop.0+0xc0>
 80088a2:	d101      	bne.n	80088a8 <_strtol_l.constprop.0+0x84>
 80088a4:	45a2      	cmp	sl, r4
 80088a6:	db1d      	blt.n	80088e4 <_strtol_l.constprop.0+0xc0>
 80088a8:	fb00 4003 	mla	r0, r0, r3, r4
 80088ac:	2201      	movs	r2, #1
 80088ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088b2:	e7eb      	b.n	800888c <_strtol_l.constprop.0+0x68>
 80088b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80088b6:	bf04      	itt	eq
 80088b8:	782c      	ldrbeq	r4, [r5, #0]
 80088ba:	1c95      	addeq	r5, r2, #2
 80088bc:	e7cf      	b.n	800885e <_strtol_l.constprop.0+0x3a>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1da      	bne.n	8008878 <_strtol_l.constprop.0+0x54>
 80088c2:	2c30      	cmp	r4, #48	@ 0x30
 80088c4:	bf0c      	ite	eq
 80088c6:	2308      	moveq	r3, #8
 80088c8:	230a      	movne	r3, #10
 80088ca:	e7d5      	b.n	8008878 <_strtol_l.constprop.0+0x54>
 80088cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80088d0:	2f19      	cmp	r7, #25
 80088d2:	d801      	bhi.n	80088d8 <_strtol_l.constprop.0+0xb4>
 80088d4:	3c37      	subs	r4, #55	@ 0x37
 80088d6:	e7de      	b.n	8008896 <_strtol_l.constprop.0+0x72>
 80088d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80088dc:	2f19      	cmp	r7, #25
 80088de:	d804      	bhi.n	80088ea <_strtol_l.constprop.0+0xc6>
 80088e0:	3c57      	subs	r4, #87	@ 0x57
 80088e2:	e7d8      	b.n	8008896 <_strtol_l.constprop.0+0x72>
 80088e4:	f04f 32ff 	mov.w	r2, #4294967295
 80088e8:	e7e1      	b.n	80088ae <_strtol_l.constprop.0+0x8a>
 80088ea:	1c53      	adds	r3, r2, #1
 80088ec:	d108      	bne.n	8008900 <_strtol_l.constprop.0+0xdc>
 80088ee:	2322      	movs	r3, #34	@ 0x22
 80088f0:	f8ce 3000 	str.w	r3, [lr]
 80088f4:	4660      	mov	r0, ip
 80088f6:	f1b8 0f00 	cmp.w	r8, #0
 80088fa:	d0a0      	beq.n	800883e <_strtol_l.constprop.0+0x1a>
 80088fc:	1e69      	subs	r1, r5, #1
 80088fe:	e006      	b.n	800890e <_strtol_l.constprop.0+0xea>
 8008900:	b106      	cbz	r6, 8008904 <_strtol_l.constprop.0+0xe0>
 8008902:	4240      	negs	r0, r0
 8008904:	f1b8 0f00 	cmp.w	r8, #0
 8008908:	d099      	beq.n	800883e <_strtol_l.constprop.0+0x1a>
 800890a:	2a00      	cmp	r2, #0
 800890c:	d1f6      	bne.n	80088fc <_strtol_l.constprop.0+0xd8>
 800890e:	f8c8 1000 	str.w	r1, [r8]
 8008912:	e794      	b.n	800883e <_strtol_l.constprop.0+0x1a>
 8008914:	0800ac41 	.word	0x0800ac41

08008918 <_strtol_r>:
 8008918:	f7ff bf84 	b.w	8008824 <_strtol_l.constprop.0>

0800891c <__ssputs_r>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	688e      	ldr	r6, [r1, #8]
 8008922:	461f      	mov	r7, r3
 8008924:	42be      	cmp	r6, r7
 8008926:	680b      	ldr	r3, [r1, #0]
 8008928:	4682      	mov	sl, r0
 800892a:	460c      	mov	r4, r1
 800892c:	4690      	mov	r8, r2
 800892e:	d82d      	bhi.n	800898c <__ssputs_r+0x70>
 8008930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008938:	d026      	beq.n	8008988 <__ssputs_r+0x6c>
 800893a:	6965      	ldr	r5, [r4, #20]
 800893c:	6909      	ldr	r1, [r1, #16]
 800893e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008942:	eba3 0901 	sub.w	r9, r3, r1
 8008946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800894a:	1c7b      	adds	r3, r7, #1
 800894c:	444b      	add	r3, r9
 800894e:	106d      	asrs	r5, r5, #1
 8008950:	429d      	cmp	r5, r3
 8008952:	bf38      	it	cc
 8008954:	461d      	movcc	r5, r3
 8008956:	0553      	lsls	r3, r2, #21
 8008958:	d527      	bpl.n	80089aa <__ssputs_r+0x8e>
 800895a:	4629      	mov	r1, r5
 800895c:	f7fe fc1c 	bl	8007198 <_malloc_r>
 8008960:	4606      	mov	r6, r0
 8008962:	b360      	cbz	r0, 80089be <__ssputs_r+0xa2>
 8008964:	6921      	ldr	r1, [r4, #16]
 8008966:	464a      	mov	r2, r9
 8008968:	f000 fa18 	bl	8008d9c <memcpy>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	6126      	str	r6, [r4, #16]
 800897a:	6165      	str	r5, [r4, #20]
 800897c:	444e      	add	r6, r9
 800897e:	eba5 0509 	sub.w	r5, r5, r9
 8008982:	6026      	str	r6, [r4, #0]
 8008984:	60a5      	str	r5, [r4, #8]
 8008986:	463e      	mov	r6, r7
 8008988:	42be      	cmp	r6, r7
 800898a:	d900      	bls.n	800898e <__ssputs_r+0x72>
 800898c:	463e      	mov	r6, r7
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	4632      	mov	r2, r6
 8008992:	4641      	mov	r1, r8
 8008994:	f000 f9c6 	bl	8008d24 <memmove>
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	1b9b      	subs	r3, r3, r6
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	4433      	add	r3, r6
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	2000      	movs	r0, #0
 80089a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089aa:	462a      	mov	r2, r5
 80089ac:	f000 fd89 	bl	80094c2 <_realloc_r>
 80089b0:	4606      	mov	r6, r0
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d1e0      	bne.n	8008978 <__ssputs_r+0x5c>
 80089b6:	6921      	ldr	r1, [r4, #16]
 80089b8:	4650      	mov	r0, sl
 80089ba:	f7fe fb79 	bl	80070b0 <_free_r>
 80089be:	230c      	movs	r3, #12
 80089c0:	f8ca 3000 	str.w	r3, [sl]
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	e7e9      	b.n	80089a6 <__ssputs_r+0x8a>
	...

080089d4 <_svfiprintf_r>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	4698      	mov	r8, r3
 80089da:	898b      	ldrh	r3, [r1, #12]
 80089dc:	061b      	lsls	r3, r3, #24
 80089de:	b09d      	sub	sp, #116	@ 0x74
 80089e0:	4607      	mov	r7, r0
 80089e2:	460d      	mov	r5, r1
 80089e4:	4614      	mov	r4, r2
 80089e6:	d510      	bpl.n	8008a0a <_svfiprintf_r+0x36>
 80089e8:	690b      	ldr	r3, [r1, #16]
 80089ea:	b973      	cbnz	r3, 8008a0a <_svfiprintf_r+0x36>
 80089ec:	2140      	movs	r1, #64	@ 0x40
 80089ee:	f7fe fbd3 	bl	8007198 <_malloc_r>
 80089f2:	6028      	str	r0, [r5, #0]
 80089f4:	6128      	str	r0, [r5, #16]
 80089f6:	b930      	cbnz	r0, 8008a06 <_svfiprintf_r+0x32>
 80089f8:	230c      	movs	r3, #12
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008a00:	b01d      	add	sp, #116	@ 0x74
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a06:	2340      	movs	r3, #64	@ 0x40
 8008a08:	616b      	str	r3, [r5, #20]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a0e:	2320      	movs	r3, #32
 8008a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a18:	2330      	movs	r3, #48	@ 0x30
 8008a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008bb8 <_svfiprintf_r+0x1e4>
 8008a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a22:	f04f 0901 	mov.w	r9, #1
 8008a26:	4623      	mov	r3, r4
 8008a28:	469a      	mov	sl, r3
 8008a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2e:	b10a      	cbz	r2, 8008a34 <_svfiprintf_r+0x60>
 8008a30:	2a25      	cmp	r2, #37	@ 0x25
 8008a32:	d1f9      	bne.n	8008a28 <_svfiprintf_r+0x54>
 8008a34:	ebba 0b04 	subs.w	fp, sl, r4
 8008a38:	d00b      	beq.n	8008a52 <_svfiprintf_r+0x7e>
 8008a3a:	465b      	mov	r3, fp
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7ff ff6b 	bl	800891c <__ssputs_r>
 8008a46:	3001      	adds	r0, #1
 8008a48:	f000 80a7 	beq.w	8008b9a <_svfiprintf_r+0x1c6>
 8008a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a4e:	445a      	add	r2, fp
 8008a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a52:	f89a 3000 	ldrb.w	r3, [sl]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 809f 	beq.w	8008b9a <_svfiprintf_r+0x1c6>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a66:	f10a 0a01 	add.w	sl, sl, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a74:	4654      	mov	r4, sl
 8008a76:	2205      	movs	r2, #5
 8008a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7c:	484e      	ldr	r0, [pc, #312]	@ (8008bb8 <_svfiprintf_r+0x1e4>)
 8008a7e:	f7f7 fbaf 	bl	80001e0 <memchr>
 8008a82:	9a04      	ldr	r2, [sp, #16]
 8008a84:	b9d8      	cbnz	r0, 8008abe <_svfiprintf_r+0xea>
 8008a86:	06d0      	lsls	r0, r2, #27
 8008a88:	bf44      	itt	mi
 8008a8a:	2320      	movmi	r3, #32
 8008a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a90:	0711      	lsls	r1, r2, #28
 8008a92:	bf44      	itt	mi
 8008a94:	232b      	movmi	r3, #43	@ 0x2b
 8008a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa0:	d015      	beq.n	8008ace <_svfiprintf_r+0xfa>
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	4654      	mov	r4, sl
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	f04f 0c0a 	mov.w	ip, #10
 8008aac:	4621      	mov	r1, r4
 8008aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab2:	3b30      	subs	r3, #48	@ 0x30
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d94b      	bls.n	8008b50 <_svfiprintf_r+0x17c>
 8008ab8:	b1b0      	cbz	r0, 8008ae8 <_svfiprintf_r+0x114>
 8008aba:	9207      	str	r2, [sp, #28]
 8008abc:	e014      	b.n	8008ae8 <_svfiprintf_r+0x114>
 8008abe:	eba0 0308 	sub.w	r3, r0, r8
 8008ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	46a2      	mov	sl, r4
 8008acc:	e7d2      	b.n	8008a74 <_svfiprintf_r+0xa0>
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	1d19      	adds	r1, r3, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	9103      	str	r1, [sp, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfbb      	ittet	lt
 8008ada:	425b      	neglt	r3, r3
 8008adc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae0:	9307      	strge	r3, [sp, #28]
 8008ae2:	9307      	strlt	r3, [sp, #28]
 8008ae4:	bfb8      	it	lt
 8008ae6:	9204      	strlt	r2, [sp, #16]
 8008ae8:	7823      	ldrb	r3, [r4, #0]
 8008aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aec:	d10a      	bne.n	8008b04 <_svfiprintf_r+0x130>
 8008aee:	7863      	ldrb	r3, [r4, #1]
 8008af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af2:	d132      	bne.n	8008b5a <_svfiprintf_r+0x186>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	1d1a      	adds	r2, r3, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	9203      	str	r2, [sp, #12]
 8008afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b00:	3402      	adds	r4, #2
 8008b02:	9305      	str	r3, [sp, #20]
 8008b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008bc8 <_svfiprintf_r+0x1f4>
 8008b08:	7821      	ldrb	r1, [r4, #0]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	4650      	mov	r0, sl
 8008b0e:	f7f7 fb67 	bl	80001e0 <memchr>
 8008b12:	b138      	cbz	r0, 8008b24 <_svfiprintf_r+0x150>
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	eba0 000a 	sub.w	r0, r0, sl
 8008b1a:	2240      	movs	r2, #64	@ 0x40
 8008b1c:	4082      	lsls	r2, r0
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	3401      	adds	r4, #1
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b28:	4824      	ldr	r0, [pc, #144]	@ (8008bbc <_svfiprintf_r+0x1e8>)
 8008b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b2e:	2206      	movs	r2, #6
 8008b30:	f7f7 fb56 	bl	80001e0 <memchr>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d036      	beq.n	8008ba6 <_svfiprintf_r+0x1d2>
 8008b38:	4b21      	ldr	r3, [pc, #132]	@ (8008bc0 <_svfiprintf_r+0x1ec>)
 8008b3a:	bb1b      	cbnz	r3, 8008b84 <_svfiprintf_r+0x1b0>
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	3307      	adds	r3, #7
 8008b40:	f023 0307 	bic.w	r3, r3, #7
 8008b44:	3308      	adds	r3, #8
 8008b46:	9303      	str	r3, [sp, #12]
 8008b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4a:	4433      	add	r3, r6
 8008b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4e:	e76a      	b.n	8008a26 <_svfiprintf_r+0x52>
 8008b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b54:	460c      	mov	r4, r1
 8008b56:	2001      	movs	r0, #1
 8008b58:	e7a8      	b.n	8008aac <_svfiprintf_r+0xd8>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	3401      	adds	r4, #1
 8008b5e:	9305      	str	r3, [sp, #20]
 8008b60:	4619      	mov	r1, r3
 8008b62:	f04f 0c0a 	mov.w	ip, #10
 8008b66:	4620      	mov	r0, r4
 8008b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6c:	3a30      	subs	r2, #48	@ 0x30
 8008b6e:	2a09      	cmp	r2, #9
 8008b70:	d903      	bls.n	8008b7a <_svfiprintf_r+0x1a6>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0c6      	beq.n	8008b04 <_svfiprintf_r+0x130>
 8008b76:	9105      	str	r1, [sp, #20]
 8008b78:	e7c4      	b.n	8008b04 <_svfiprintf_r+0x130>
 8008b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b7e:	4604      	mov	r4, r0
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7f0      	b.n	8008b66 <_svfiprintf_r+0x192>
 8008b84:	ab03      	add	r3, sp, #12
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc4 <_svfiprintf_r+0x1f0>)
 8008b8c:	a904      	add	r1, sp, #16
 8008b8e:	4638      	mov	r0, r7
 8008b90:	f7fc fc96 	bl	80054c0 <_printf_float>
 8008b94:	1c42      	adds	r2, r0, #1
 8008b96:	4606      	mov	r6, r0
 8008b98:	d1d6      	bne.n	8008b48 <_svfiprintf_r+0x174>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	065b      	lsls	r3, r3, #25
 8008b9e:	f53f af2d 	bmi.w	80089fc <_svfiprintf_r+0x28>
 8008ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ba4:	e72c      	b.n	8008a00 <_svfiprintf_r+0x2c>
 8008ba6:	ab03      	add	r3, sp, #12
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	462a      	mov	r2, r5
 8008bac:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <_svfiprintf_r+0x1f0>)
 8008bae:	a904      	add	r1, sp, #16
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7fc ff1d 	bl	80059f0 <_printf_i>
 8008bb6:	e7ed      	b.n	8008b94 <_svfiprintf_r+0x1c0>
 8008bb8:	0800ad41 	.word	0x0800ad41
 8008bbc:	0800ad4b 	.word	0x0800ad4b
 8008bc0:	080054c1 	.word	0x080054c1
 8008bc4:	0800891d 	.word	0x0800891d
 8008bc8:	0800ad47 	.word	0x0800ad47

08008bcc <__sflush_r>:
 8008bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	0716      	lsls	r6, r2, #28
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	d454      	bmi.n	8008c86 <__sflush_r+0xba>
 8008bdc:	684b      	ldr	r3, [r1, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dc02      	bgt.n	8008be8 <__sflush_r+0x1c>
 8008be2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd48      	ble.n	8008c7a <__sflush_r+0xae>
 8008be8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bea:	2e00      	cmp	r6, #0
 8008bec:	d045      	beq.n	8008c7a <__sflush_r+0xae>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bf4:	682f      	ldr	r7, [r5, #0]
 8008bf6:	6a21      	ldr	r1, [r4, #32]
 8008bf8:	602b      	str	r3, [r5, #0]
 8008bfa:	d030      	beq.n	8008c5e <__sflush_r+0x92>
 8008bfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	0759      	lsls	r1, r3, #29
 8008c02:	d505      	bpl.n	8008c10 <__sflush_r+0x44>
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c0a:	b10b      	cbz	r3, 8008c10 <__sflush_r+0x44>
 8008c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b0      	blx	r6
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	d106      	bne.n	8008c2e <__sflush_r+0x62>
 8008c20:	6829      	ldr	r1, [r5, #0]
 8008c22:	291d      	cmp	r1, #29
 8008c24:	d82b      	bhi.n	8008c7e <__sflush_r+0xb2>
 8008c26:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd0 <__sflush_r+0x104>)
 8008c28:	410a      	asrs	r2, r1
 8008c2a:	07d6      	lsls	r6, r2, #31
 8008c2c:	d427      	bmi.n	8008c7e <__sflush_r+0xb2>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	6062      	str	r2, [r4, #4]
 8008c32:	04d9      	lsls	r1, r3, #19
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	d504      	bpl.n	8008c44 <__sflush_r+0x78>
 8008c3a:	1c42      	adds	r2, r0, #1
 8008c3c:	d101      	bne.n	8008c42 <__sflush_r+0x76>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b903      	cbnz	r3, 8008c44 <__sflush_r+0x78>
 8008c42:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c46:	602f      	str	r7, [r5, #0]
 8008c48:	b1b9      	cbz	r1, 8008c7a <__sflush_r+0xae>
 8008c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c4e:	4299      	cmp	r1, r3
 8008c50:	d002      	beq.n	8008c58 <__sflush_r+0x8c>
 8008c52:	4628      	mov	r0, r5
 8008c54:	f7fe fa2c 	bl	80070b0 <_free_r>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c5c:	e00d      	b.n	8008c7a <__sflush_r+0xae>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b0      	blx	r6
 8008c64:	4602      	mov	r2, r0
 8008c66:	1c50      	adds	r0, r2, #1
 8008c68:	d1c9      	bne.n	8008bfe <__sflush_r+0x32>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0c6      	beq.n	8008bfe <__sflush_r+0x32>
 8008c70:	2b1d      	cmp	r3, #29
 8008c72:	d001      	beq.n	8008c78 <__sflush_r+0xac>
 8008c74:	2b16      	cmp	r3, #22
 8008c76:	d11e      	bne.n	8008cb6 <__sflush_r+0xea>
 8008c78:	602f      	str	r7, [r5, #0]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e022      	b.n	8008cc4 <__sflush_r+0xf8>
 8008c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c82:	b21b      	sxth	r3, r3
 8008c84:	e01b      	b.n	8008cbe <__sflush_r+0xf2>
 8008c86:	690f      	ldr	r7, [r1, #16]
 8008c88:	2f00      	cmp	r7, #0
 8008c8a:	d0f6      	beq.n	8008c7a <__sflush_r+0xae>
 8008c8c:	0793      	lsls	r3, r2, #30
 8008c8e:	680e      	ldr	r6, [r1, #0]
 8008c90:	bf08      	it	eq
 8008c92:	694b      	ldreq	r3, [r1, #20]
 8008c94:	600f      	str	r7, [r1, #0]
 8008c96:	bf18      	it	ne
 8008c98:	2300      	movne	r3, #0
 8008c9a:	eba6 0807 	sub.w	r8, r6, r7
 8008c9e:	608b      	str	r3, [r1, #8]
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	dde9      	ble.n	8008c7a <__sflush_r+0xae>
 8008ca6:	6a21      	ldr	r1, [r4, #32]
 8008ca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008caa:	4643      	mov	r3, r8
 8008cac:	463a      	mov	r2, r7
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b0      	blx	r6
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	dc08      	bgt.n	8008cc8 <__sflush_r+0xfc>
 8008cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	4407      	add	r7, r0
 8008cca:	eba8 0800 	sub.w	r8, r8, r0
 8008cce:	e7e7      	b.n	8008ca0 <__sflush_r+0xd4>
 8008cd0:	dfbffffe 	.word	0xdfbffffe

08008cd4 <_fflush_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	690b      	ldr	r3, [r1, #16]
 8008cd8:	4605      	mov	r5, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	b913      	cbnz	r3, 8008ce4 <_fflush_r+0x10>
 8008cde:	2500      	movs	r5, #0
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	b118      	cbz	r0, 8008cee <_fflush_r+0x1a>
 8008ce6:	6a03      	ldr	r3, [r0, #32]
 8008ce8:	b90b      	cbnz	r3, 8008cee <_fflush_r+0x1a>
 8008cea:	f7fd fa41 	bl	8006170 <__sinit>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0f3      	beq.n	8008cde <_fflush_r+0xa>
 8008cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cf8:	07d0      	lsls	r0, r2, #31
 8008cfa:	d404      	bmi.n	8008d06 <_fflush_r+0x32>
 8008cfc:	0599      	lsls	r1, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <_fflush_r+0x32>
 8008d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d02:	f7fd fb80 	bl	8006406 <__retarget_lock_acquire_recursive>
 8008d06:	4628      	mov	r0, r5
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f7ff ff5f 	bl	8008bcc <__sflush_r>
 8008d0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d10:	07da      	lsls	r2, r3, #31
 8008d12:	4605      	mov	r5, r0
 8008d14:	d4e4      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	059b      	lsls	r3, r3, #22
 8008d1a:	d4e1      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d1e:	f7fd fb73 	bl	8006408 <__retarget_lock_release_recursive>
 8008d22:	e7dd      	b.n	8008ce0 <_fflush_r+0xc>

08008d24 <memmove>:
 8008d24:	4288      	cmp	r0, r1
 8008d26:	b510      	push	{r4, lr}
 8008d28:	eb01 0402 	add.w	r4, r1, r2
 8008d2c:	d902      	bls.n	8008d34 <memmove+0x10>
 8008d2e:	4284      	cmp	r4, r0
 8008d30:	4623      	mov	r3, r4
 8008d32:	d807      	bhi.n	8008d44 <memmove+0x20>
 8008d34:	1e43      	subs	r3, r0, #1
 8008d36:	42a1      	cmp	r1, r4
 8008d38:	d008      	beq.n	8008d4c <memmove+0x28>
 8008d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d42:	e7f8      	b.n	8008d36 <memmove+0x12>
 8008d44:	4402      	add	r2, r0
 8008d46:	4601      	mov	r1, r0
 8008d48:	428a      	cmp	r2, r1
 8008d4a:	d100      	bne.n	8008d4e <memmove+0x2a>
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d56:	e7f7      	b.n	8008d48 <memmove+0x24>

08008d58 <strncmp>:
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	b16a      	cbz	r2, 8008d78 <strncmp+0x20>
 8008d5c:	3901      	subs	r1, #1
 8008d5e:	1884      	adds	r4, r0, r2
 8008d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d103      	bne.n	8008d74 <strncmp+0x1c>
 8008d6c:	42a0      	cmp	r0, r4
 8008d6e:	d001      	beq.n	8008d74 <strncmp+0x1c>
 8008d70:	2a00      	cmp	r2, #0
 8008d72:	d1f5      	bne.n	8008d60 <strncmp+0x8>
 8008d74:	1ad0      	subs	r0, r2, r3
 8008d76:	bd10      	pop	{r4, pc}
 8008d78:	4610      	mov	r0, r2
 8008d7a:	e7fc      	b.n	8008d76 <strncmp+0x1e>

08008d7c <_sbrk_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d06      	ldr	r5, [pc, #24]	@ (8008d98 <_sbrk_r+0x1c>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	602b      	str	r3, [r5, #0]
 8008d88:	f7f8 fe60 	bl	8001a4c <_sbrk>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_sbrk_r+0x1a>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_sbrk_r+0x1a>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20000d34 	.word	0x20000d34

08008d9c <memcpy>:
 8008d9c:	440a      	add	r2, r1
 8008d9e:	4291      	cmp	r1, r2
 8008da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008da4:	d100      	bne.n	8008da8 <memcpy+0xc>
 8008da6:	4770      	bx	lr
 8008da8:	b510      	push	{r4, lr}
 8008daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008db2:	4291      	cmp	r1, r2
 8008db4:	d1f9      	bne.n	8008daa <memcpy+0xe>
 8008db6:	bd10      	pop	{r4, pc}

08008db8 <nan>:
 8008db8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008dc0 <nan+0x8>
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	00000000 	.word	0x00000000
 8008dc4:	7ff80000 	.word	0x7ff80000

08008dc8 <__assert_func>:
 8008dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dca:	4614      	mov	r4, r2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4b09      	ldr	r3, [pc, #36]	@ (8008df4 <__assert_func+0x2c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	68d8      	ldr	r0, [r3, #12]
 8008dd6:	b954      	cbnz	r4, 8008dee <__assert_func+0x26>
 8008dd8:	4b07      	ldr	r3, [pc, #28]	@ (8008df8 <__assert_func+0x30>)
 8008dda:	461c      	mov	r4, r3
 8008ddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008de0:	9100      	str	r1, [sp, #0]
 8008de2:	462b      	mov	r3, r5
 8008de4:	4905      	ldr	r1, [pc, #20]	@ (8008dfc <__assert_func+0x34>)
 8008de6:	f000 fba7 	bl	8009538 <fiprintf>
 8008dea:	f000 fbb7 	bl	800955c <abort>
 8008dee:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <__assert_func+0x38>)
 8008df0:	e7f4      	b.n	8008ddc <__assert_func+0x14>
 8008df2:	bf00      	nop
 8008df4:	20000018 	.word	0x20000018
 8008df8:	0800ad95 	.word	0x0800ad95
 8008dfc:	0800ad67 	.word	0x0800ad67
 8008e00:	0800ad5a 	.word	0x0800ad5a

08008e04 <_calloc_r>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	fba1 5402 	umull	r5, r4, r1, r2
 8008e0a:	b93c      	cbnz	r4, 8008e1c <_calloc_r+0x18>
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7fe f9c3 	bl	8007198 <_malloc_r>
 8008e12:	4606      	mov	r6, r0
 8008e14:	b928      	cbnz	r0, 8008e22 <_calloc_r+0x1e>
 8008e16:	2600      	movs	r6, #0
 8008e18:	4630      	mov	r0, r6
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	220c      	movs	r2, #12
 8008e1e:	6002      	str	r2, [r0, #0]
 8008e20:	e7f9      	b.n	8008e16 <_calloc_r+0x12>
 8008e22:	462a      	mov	r2, r5
 8008e24:	4621      	mov	r1, r4
 8008e26:	f7fd fa70 	bl	800630a <memset>
 8008e2a:	e7f5      	b.n	8008e18 <_calloc_r+0x14>

08008e2c <rshift>:
 8008e2c:	6903      	ldr	r3, [r0, #16]
 8008e2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e3a:	f100 0414 	add.w	r4, r0, #20
 8008e3e:	dd45      	ble.n	8008ecc <rshift+0xa0>
 8008e40:	f011 011f 	ands.w	r1, r1, #31
 8008e44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e4c:	d10c      	bne.n	8008e68 <rshift+0x3c>
 8008e4e:	f100 0710 	add.w	r7, r0, #16
 8008e52:	4629      	mov	r1, r5
 8008e54:	42b1      	cmp	r1, r6
 8008e56:	d334      	bcc.n	8008ec2 <rshift+0x96>
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	1eea      	subs	r2, r5, #3
 8008e5e:	4296      	cmp	r6, r2
 8008e60:	bf38      	it	cc
 8008e62:	2300      	movcc	r3, #0
 8008e64:	4423      	add	r3, r4
 8008e66:	e015      	b.n	8008e94 <rshift+0x68>
 8008e68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e6c:	f1c1 0820 	rsb	r8, r1, #32
 8008e70:	40cf      	lsrs	r7, r1
 8008e72:	f105 0e04 	add.w	lr, r5, #4
 8008e76:	46a1      	mov	r9, r4
 8008e78:	4576      	cmp	r6, lr
 8008e7a:	46f4      	mov	ip, lr
 8008e7c:	d815      	bhi.n	8008eaa <rshift+0x7e>
 8008e7e:	1a9a      	subs	r2, r3, r2
 8008e80:	0092      	lsls	r2, r2, #2
 8008e82:	3a04      	subs	r2, #4
 8008e84:	3501      	adds	r5, #1
 8008e86:	42ae      	cmp	r6, r5
 8008e88:	bf38      	it	cc
 8008e8a:	2200      	movcc	r2, #0
 8008e8c:	18a3      	adds	r3, r4, r2
 8008e8e:	50a7      	str	r7, [r4, r2]
 8008e90:	b107      	cbz	r7, 8008e94 <rshift+0x68>
 8008e92:	3304      	adds	r3, #4
 8008e94:	1b1a      	subs	r2, r3, r4
 8008e96:	42a3      	cmp	r3, r4
 8008e98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e9c:	bf08      	it	eq
 8008e9e:	2300      	moveq	r3, #0
 8008ea0:	6102      	str	r2, [r0, #16]
 8008ea2:	bf08      	it	eq
 8008ea4:	6143      	streq	r3, [r0, #20]
 8008ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eaa:	f8dc c000 	ldr.w	ip, [ip]
 8008eae:	fa0c fc08 	lsl.w	ip, ip, r8
 8008eb2:	ea4c 0707 	orr.w	r7, ip, r7
 8008eb6:	f849 7b04 	str.w	r7, [r9], #4
 8008eba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ebe:	40cf      	lsrs	r7, r1
 8008ec0:	e7da      	b.n	8008e78 <rshift+0x4c>
 8008ec2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ec6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008eca:	e7c3      	b.n	8008e54 <rshift+0x28>
 8008ecc:	4623      	mov	r3, r4
 8008ece:	e7e1      	b.n	8008e94 <rshift+0x68>

08008ed0 <__hexdig_fun>:
 8008ed0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008ed4:	2b09      	cmp	r3, #9
 8008ed6:	d802      	bhi.n	8008ede <__hexdig_fun+0xe>
 8008ed8:	3820      	subs	r0, #32
 8008eda:	b2c0      	uxtb	r0, r0
 8008edc:	4770      	bx	lr
 8008ede:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008ee2:	2b05      	cmp	r3, #5
 8008ee4:	d801      	bhi.n	8008eea <__hexdig_fun+0x1a>
 8008ee6:	3847      	subs	r0, #71	@ 0x47
 8008ee8:	e7f7      	b.n	8008eda <__hexdig_fun+0xa>
 8008eea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d801      	bhi.n	8008ef6 <__hexdig_fun+0x26>
 8008ef2:	3827      	subs	r0, #39	@ 0x27
 8008ef4:	e7f1      	b.n	8008eda <__hexdig_fun+0xa>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	4770      	bx	lr
	...

08008efc <__gethex>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	b085      	sub	sp, #20
 8008f02:	468a      	mov	sl, r1
 8008f04:	9302      	str	r3, [sp, #8]
 8008f06:	680b      	ldr	r3, [r1, #0]
 8008f08:	9001      	str	r0, [sp, #4]
 8008f0a:	4690      	mov	r8, r2
 8008f0c:	1c9c      	adds	r4, r3, #2
 8008f0e:	46a1      	mov	r9, r4
 8008f10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008f14:	2830      	cmp	r0, #48	@ 0x30
 8008f16:	d0fa      	beq.n	8008f0e <__gethex+0x12>
 8008f18:	eba9 0303 	sub.w	r3, r9, r3
 8008f1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008f20:	f7ff ffd6 	bl	8008ed0 <__hexdig_fun>
 8008f24:	4605      	mov	r5, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d168      	bne.n	8008ffc <__gethex+0x100>
 8008f2a:	49a0      	ldr	r1, [pc, #640]	@ (80091ac <__gethex+0x2b0>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	4648      	mov	r0, r9
 8008f30:	f7ff ff12 	bl	8008d58 <strncmp>
 8008f34:	4607      	mov	r7, r0
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d167      	bne.n	800900a <__gethex+0x10e>
 8008f3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008f3e:	4626      	mov	r6, r4
 8008f40:	f7ff ffc6 	bl	8008ed0 <__hexdig_fun>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d062      	beq.n	800900e <__gethex+0x112>
 8008f48:	4623      	mov	r3, r4
 8008f4a:	7818      	ldrb	r0, [r3, #0]
 8008f4c:	2830      	cmp	r0, #48	@ 0x30
 8008f4e:	4699      	mov	r9, r3
 8008f50:	f103 0301 	add.w	r3, r3, #1
 8008f54:	d0f9      	beq.n	8008f4a <__gethex+0x4e>
 8008f56:	f7ff ffbb 	bl	8008ed0 <__hexdig_fun>
 8008f5a:	fab0 f580 	clz	r5, r0
 8008f5e:	096d      	lsrs	r5, r5, #5
 8008f60:	f04f 0b01 	mov.w	fp, #1
 8008f64:	464a      	mov	r2, r9
 8008f66:	4616      	mov	r6, r2
 8008f68:	3201      	adds	r2, #1
 8008f6a:	7830      	ldrb	r0, [r6, #0]
 8008f6c:	f7ff ffb0 	bl	8008ed0 <__hexdig_fun>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d1f8      	bne.n	8008f66 <__gethex+0x6a>
 8008f74:	498d      	ldr	r1, [pc, #564]	@ (80091ac <__gethex+0x2b0>)
 8008f76:	2201      	movs	r2, #1
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7ff feed 	bl	8008d58 <strncmp>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d13f      	bne.n	8009002 <__gethex+0x106>
 8008f82:	b944      	cbnz	r4, 8008f96 <__gethex+0x9a>
 8008f84:	1c74      	adds	r4, r6, #1
 8008f86:	4622      	mov	r2, r4
 8008f88:	4616      	mov	r6, r2
 8008f8a:	3201      	adds	r2, #1
 8008f8c:	7830      	ldrb	r0, [r6, #0]
 8008f8e:	f7ff ff9f 	bl	8008ed0 <__hexdig_fun>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d1f8      	bne.n	8008f88 <__gethex+0x8c>
 8008f96:	1ba4      	subs	r4, r4, r6
 8008f98:	00a7      	lsls	r7, r4, #2
 8008f9a:	7833      	ldrb	r3, [r6, #0]
 8008f9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008fa0:	2b50      	cmp	r3, #80	@ 0x50
 8008fa2:	d13e      	bne.n	8009022 <__gethex+0x126>
 8008fa4:	7873      	ldrb	r3, [r6, #1]
 8008fa6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008fa8:	d033      	beq.n	8009012 <__gethex+0x116>
 8008faa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008fac:	d034      	beq.n	8009018 <__gethex+0x11c>
 8008fae:	1c71      	adds	r1, r6, #1
 8008fb0:	2400      	movs	r4, #0
 8008fb2:	7808      	ldrb	r0, [r1, #0]
 8008fb4:	f7ff ff8c 	bl	8008ed0 <__hexdig_fun>
 8008fb8:	1e43      	subs	r3, r0, #1
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b18      	cmp	r3, #24
 8008fbe:	d830      	bhi.n	8009022 <__gethex+0x126>
 8008fc0:	f1a0 0210 	sub.w	r2, r0, #16
 8008fc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fc8:	f7ff ff82 	bl	8008ed0 <__hexdig_fun>
 8008fcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008fd0:	fa5f fc8c 	uxtb.w	ip, ip
 8008fd4:	f1bc 0f18 	cmp.w	ip, #24
 8008fd8:	f04f 030a 	mov.w	r3, #10
 8008fdc:	d91e      	bls.n	800901c <__gethex+0x120>
 8008fde:	b104      	cbz	r4, 8008fe2 <__gethex+0xe6>
 8008fe0:	4252      	negs	r2, r2
 8008fe2:	4417      	add	r7, r2
 8008fe4:	f8ca 1000 	str.w	r1, [sl]
 8008fe8:	b1ed      	cbz	r5, 8009026 <__gethex+0x12a>
 8008fea:	f1bb 0f00 	cmp.w	fp, #0
 8008fee:	bf0c      	ite	eq
 8008ff0:	2506      	moveq	r5, #6
 8008ff2:	2500      	movne	r5, #0
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	b005      	add	sp, #20
 8008ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffc:	2500      	movs	r5, #0
 8008ffe:	462c      	mov	r4, r5
 8009000:	e7b0      	b.n	8008f64 <__gethex+0x68>
 8009002:	2c00      	cmp	r4, #0
 8009004:	d1c7      	bne.n	8008f96 <__gethex+0x9a>
 8009006:	4627      	mov	r7, r4
 8009008:	e7c7      	b.n	8008f9a <__gethex+0x9e>
 800900a:	464e      	mov	r6, r9
 800900c:	462f      	mov	r7, r5
 800900e:	2501      	movs	r5, #1
 8009010:	e7c3      	b.n	8008f9a <__gethex+0x9e>
 8009012:	2400      	movs	r4, #0
 8009014:	1cb1      	adds	r1, r6, #2
 8009016:	e7cc      	b.n	8008fb2 <__gethex+0xb6>
 8009018:	2401      	movs	r4, #1
 800901a:	e7fb      	b.n	8009014 <__gethex+0x118>
 800901c:	fb03 0002 	mla	r0, r3, r2, r0
 8009020:	e7ce      	b.n	8008fc0 <__gethex+0xc4>
 8009022:	4631      	mov	r1, r6
 8009024:	e7de      	b.n	8008fe4 <__gethex+0xe8>
 8009026:	eba6 0309 	sub.w	r3, r6, r9
 800902a:	3b01      	subs	r3, #1
 800902c:	4629      	mov	r1, r5
 800902e:	2b07      	cmp	r3, #7
 8009030:	dc0a      	bgt.n	8009048 <__gethex+0x14c>
 8009032:	9801      	ldr	r0, [sp, #4]
 8009034:	f7fe f93c 	bl	80072b0 <_Balloc>
 8009038:	4604      	mov	r4, r0
 800903a:	b940      	cbnz	r0, 800904e <__gethex+0x152>
 800903c:	4b5c      	ldr	r3, [pc, #368]	@ (80091b0 <__gethex+0x2b4>)
 800903e:	4602      	mov	r2, r0
 8009040:	21e4      	movs	r1, #228	@ 0xe4
 8009042:	485c      	ldr	r0, [pc, #368]	@ (80091b4 <__gethex+0x2b8>)
 8009044:	f7ff fec0 	bl	8008dc8 <__assert_func>
 8009048:	3101      	adds	r1, #1
 800904a:	105b      	asrs	r3, r3, #1
 800904c:	e7ef      	b.n	800902e <__gethex+0x132>
 800904e:	f100 0a14 	add.w	sl, r0, #20
 8009052:	2300      	movs	r3, #0
 8009054:	4655      	mov	r5, sl
 8009056:	469b      	mov	fp, r3
 8009058:	45b1      	cmp	r9, r6
 800905a:	d337      	bcc.n	80090cc <__gethex+0x1d0>
 800905c:	f845 bb04 	str.w	fp, [r5], #4
 8009060:	eba5 050a 	sub.w	r5, r5, sl
 8009064:	10ad      	asrs	r5, r5, #2
 8009066:	6125      	str	r5, [r4, #16]
 8009068:	4658      	mov	r0, fp
 800906a:	f7fe fa13 	bl	8007494 <__hi0bits>
 800906e:	016d      	lsls	r5, r5, #5
 8009070:	f8d8 6000 	ldr.w	r6, [r8]
 8009074:	1a2d      	subs	r5, r5, r0
 8009076:	42b5      	cmp	r5, r6
 8009078:	dd54      	ble.n	8009124 <__gethex+0x228>
 800907a:	1bad      	subs	r5, r5, r6
 800907c:	4629      	mov	r1, r5
 800907e:	4620      	mov	r0, r4
 8009080:	f7fe fda7 	bl	8007bd2 <__any_on>
 8009084:	4681      	mov	r9, r0
 8009086:	b178      	cbz	r0, 80090a8 <__gethex+0x1ac>
 8009088:	1e6b      	subs	r3, r5, #1
 800908a:	1159      	asrs	r1, r3, #5
 800908c:	f003 021f 	and.w	r2, r3, #31
 8009090:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009094:	f04f 0901 	mov.w	r9, #1
 8009098:	fa09 f202 	lsl.w	r2, r9, r2
 800909c:	420a      	tst	r2, r1
 800909e:	d003      	beq.n	80090a8 <__gethex+0x1ac>
 80090a0:	454b      	cmp	r3, r9
 80090a2:	dc36      	bgt.n	8009112 <__gethex+0x216>
 80090a4:	f04f 0902 	mov.w	r9, #2
 80090a8:	4629      	mov	r1, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	f7ff febe 	bl	8008e2c <rshift>
 80090b0:	442f      	add	r7, r5
 80090b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090b6:	42bb      	cmp	r3, r7
 80090b8:	da42      	bge.n	8009140 <__gethex+0x244>
 80090ba:	9801      	ldr	r0, [sp, #4]
 80090bc:	4621      	mov	r1, r4
 80090be:	f7fe f937 	bl	8007330 <_Bfree>
 80090c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090c4:	2300      	movs	r3, #0
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	25a3      	movs	r5, #163	@ 0xa3
 80090ca:	e793      	b.n	8008ff4 <__gethex+0xf8>
 80090cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80090d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80090d2:	d012      	beq.n	80090fa <__gethex+0x1fe>
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	d104      	bne.n	80090e2 <__gethex+0x1e6>
 80090d8:	f845 bb04 	str.w	fp, [r5], #4
 80090dc:	f04f 0b00 	mov.w	fp, #0
 80090e0:	465b      	mov	r3, fp
 80090e2:	7830      	ldrb	r0, [r6, #0]
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	f7ff fef3 	bl	8008ed0 <__hexdig_fun>
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	f000 000f 	and.w	r0, r0, #15
 80090f0:	4098      	lsls	r0, r3
 80090f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80090f6:	3304      	adds	r3, #4
 80090f8:	e7ae      	b.n	8009058 <__gethex+0x15c>
 80090fa:	45b1      	cmp	r9, r6
 80090fc:	d8ea      	bhi.n	80090d4 <__gethex+0x1d8>
 80090fe:	492b      	ldr	r1, [pc, #172]	@ (80091ac <__gethex+0x2b0>)
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	4630      	mov	r0, r6
 8009106:	f7ff fe27 	bl	8008d58 <strncmp>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	2800      	cmp	r0, #0
 800910e:	d1e1      	bne.n	80090d4 <__gethex+0x1d8>
 8009110:	e7a2      	b.n	8009058 <__gethex+0x15c>
 8009112:	1ea9      	subs	r1, r5, #2
 8009114:	4620      	mov	r0, r4
 8009116:	f7fe fd5c 	bl	8007bd2 <__any_on>
 800911a:	2800      	cmp	r0, #0
 800911c:	d0c2      	beq.n	80090a4 <__gethex+0x1a8>
 800911e:	f04f 0903 	mov.w	r9, #3
 8009122:	e7c1      	b.n	80090a8 <__gethex+0x1ac>
 8009124:	da09      	bge.n	800913a <__gethex+0x23e>
 8009126:	1b75      	subs	r5, r6, r5
 8009128:	4621      	mov	r1, r4
 800912a:	9801      	ldr	r0, [sp, #4]
 800912c:	462a      	mov	r2, r5
 800912e:	f7fe fb17 	bl	8007760 <__lshift>
 8009132:	1b7f      	subs	r7, r7, r5
 8009134:	4604      	mov	r4, r0
 8009136:	f100 0a14 	add.w	sl, r0, #20
 800913a:	f04f 0900 	mov.w	r9, #0
 800913e:	e7b8      	b.n	80090b2 <__gethex+0x1b6>
 8009140:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009144:	42bd      	cmp	r5, r7
 8009146:	dd6f      	ble.n	8009228 <__gethex+0x32c>
 8009148:	1bed      	subs	r5, r5, r7
 800914a:	42ae      	cmp	r6, r5
 800914c:	dc34      	bgt.n	80091b8 <__gethex+0x2bc>
 800914e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d022      	beq.n	800919c <__gethex+0x2a0>
 8009156:	2b03      	cmp	r3, #3
 8009158:	d024      	beq.n	80091a4 <__gethex+0x2a8>
 800915a:	2b01      	cmp	r3, #1
 800915c:	d115      	bne.n	800918a <__gethex+0x28e>
 800915e:	42ae      	cmp	r6, r5
 8009160:	d113      	bne.n	800918a <__gethex+0x28e>
 8009162:	2e01      	cmp	r6, #1
 8009164:	d10b      	bne.n	800917e <__gethex+0x282>
 8009166:	9a02      	ldr	r2, [sp, #8]
 8009168:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	2301      	movs	r3, #1
 8009170:	6123      	str	r3, [r4, #16]
 8009172:	f8ca 3000 	str.w	r3, [sl]
 8009176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009178:	2562      	movs	r5, #98	@ 0x62
 800917a:	601c      	str	r4, [r3, #0]
 800917c:	e73a      	b.n	8008ff4 <__gethex+0xf8>
 800917e:	1e71      	subs	r1, r6, #1
 8009180:	4620      	mov	r0, r4
 8009182:	f7fe fd26 	bl	8007bd2 <__any_on>
 8009186:	2800      	cmp	r0, #0
 8009188:	d1ed      	bne.n	8009166 <__gethex+0x26a>
 800918a:	9801      	ldr	r0, [sp, #4]
 800918c:	4621      	mov	r1, r4
 800918e:	f7fe f8cf 	bl	8007330 <_Bfree>
 8009192:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009194:	2300      	movs	r3, #0
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	2550      	movs	r5, #80	@ 0x50
 800919a:	e72b      	b.n	8008ff4 <__gethex+0xf8>
 800919c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f3      	bne.n	800918a <__gethex+0x28e>
 80091a2:	e7e0      	b.n	8009166 <__gethex+0x26a>
 80091a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1dd      	bne.n	8009166 <__gethex+0x26a>
 80091aa:	e7ee      	b.n	800918a <__gethex+0x28e>
 80091ac:	0800abe8 	.word	0x0800abe8
 80091b0:	0800aa7d 	.word	0x0800aa7d
 80091b4:	0800ad96 	.word	0x0800ad96
 80091b8:	1e6f      	subs	r7, r5, #1
 80091ba:	f1b9 0f00 	cmp.w	r9, #0
 80091be:	d130      	bne.n	8009222 <__gethex+0x326>
 80091c0:	b127      	cbz	r7, 80091cc <__gethex+0x2d0>
 80091c2:	4639      	mov	r1, r7
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7fe fd04 	bl	8007bd2 <__any_on>
 80091ca:	4681      	mov	r9, r0
 80091cc:	117a      	asrs	r2, r7, #5
 80091ce:	2301      	movs	r3, #1
 80091d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80091d4:	f007 071f 	and.w	r7, r7, #31
 80091d8:	40bb      	lsls	r3, r7
 80091da:	4213      	tst	r3, r2
 80091dc:	4629      	mov	r1, r5
 80091de:	4620      	mov	r0, r4
 80091e0:	bf18      	it	ne
 80091e2:	f049 0902 	orrne.w	r9, r9, #2
 80091e6:	f7ff fe21 	bl	8008e2c <rshift>
 80091ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80091ee:	1b76      	subs	r6, r6, r5
 80091f0:	2502      	movs	r5, #2
 80091f2:	f1b9 0f00 	cmp.w	r9, #0
 80091f6:	d047      	beq.n	8009288 <__gethex+0x38c>
 80091f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d015      	beq.n	800922c <__gethex+0x330>
 8009200:	2b03      	cmp	r3, #3
 8009202:	d017      	beq.n	8009234 <__gethex+0x338>
 8009204:	2b01      	cmp	r3, #1
 8009206:	d109      	bne.n	800921c <__gethex+0x320>
 8009208:	f019 0f02 	tst.w	r9, #2
 800920c:	d006      	beq.n	800921c <__gethex+0x320>
 800920e:	f8da 3000 	ldr.w	r3, [sl]
 8009212:	ea49 0903 	orr.w	r9, r9, r3
 8009216:	f019 0f01 	tst.w	r9, #1
 800921a:	d10e      	bne.n	800923a <__gethex+0x33e>
 800921c:	f045 0510 	orr.w	r5, r5, #16
 8009220:	e032      	b.n	8009288 <__gethex+0x38c>
 8009222:	f04f 0901 	mov.w	r9, #1
 8009226:	e7d1      	b.n	80091cc <__gethex+0x2d0>
 8009228:	2501      	movs	r5, #1
 800922a:	e7e2      	b.n	80091f2 <__gethex+0x2f6>
 800922c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800922e:	f1c3 0301 	rsb	r3, r3, #1
 8009232:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0f0      	beq.n	800921c <__gethex+0x320>
 800923a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800923e:	f104 0314 	add.w	r3, r4, #20
 8009242:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009246:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800924a:	f04f 0c00 	mov.w	ip, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f853 2b04 	ldr.w	r2, [r3], #4
 8009254:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009258:	d01b      	beq.n	8009292 <__gethex+0x396>
 800925a:	3201      	adds	r2, #1
 800925c:	6002      	str	r2, [r0, #0]
 800925e:	2d02      	cmp	r5, #2
 8009260:	f104 0314 	add.w	r3, r4, #20
 8009264:	d13c      	bne.n	80092e0 <__gethex+0x3e4>
 8009266:	f8d8 2000 	ldr.w	r2, [r8]
 800926a:	3a01      	subs	r2, #1
 800926c:	42b2      	cmp	r2, r6
 800926e:	d109      	bne.n	8009284 <__gethex+0x388>
 8009270:	1171      	asrs	r1, r6, #5
 8009272:	2201      	movs	r2, #1
 8009274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009278:	f006 061f 	and.w	r6, r6, #31
 800927c:	fa02 f606 	lsl.w	r6, r2, r6
 8009280:	421e      	tst	r6, r3
 8009282:	d13a      	bne.n	80092fa <__gethex+0x3fe>
 8009284:	f045 0520 	orr.w	r5, r5, #32
 8009288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800928a:	601c      	str	r4, [r3, #0]
 800928c:	9b02      	ldr	r3, [sp, #8]
 800928e:	601f      	str	r7, [r3, #0]
 8009290:	e6b0      	b.n	8008ff4 <__gethex+0xf8>
 8009292:	4299      	cmp	r1, r3
 8009294:	f843 cc04 	str.w	ip, [r3, #-4]
 8009298:	d8d9      	bhi.n	800924e <__gethex+0x352>
 800929a:	68a3      	ldr	r3, [r4, #8]
 800929c:	459b      	cmp	fp, r3
 800929e:	db17      	blt.n	80092d0 <__gethex+0x3d4>
 80092a0:	6861      	ldr	r1, [r4, #4]
 80092a2:	9801      	ldr	r0, [sp, #4]
 80092a4:	3101      	adds	r1, #1
 80092a6:	f7fe f803 	bl	80072b0 <_Balloc>
 80092aa:	4681      	mov	r9, r0
 80092ac:	b918      	cbnz	r0, 80092b6 <__gethex+0x3ba>
 80092ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009318 <__gethex+0x41c>)
 80092b0:	4602      	mov	r2, r0
 80092b2:	2184      	movs	r1, #132	@ 0x84
 80092b4:	e6c5      	b.n	8009042 <__gethex+0x146>
 80092b6:	6922      	ldr	r2, [r4, #16]
 80092b8:	3202      	adds	r2, #2
 80092ba:	f104 010c 	add.w	r1, r4, #12
 80092be:	0092      	lsls	r2, r2, #2
 80092c0:	300c      	adds	r0, #12
 80092c2:	f7ff fd6b 	bl	8008d9c <memcpy>
 80092c6:	4621      	mov	r1, r4
 80092c8:	9801      	ldr	r0, [sp, #4]
 80092ca:	f7fe f831 	bl	8007330 <_Bfree>
 80092ce:	464c      	mov	r4, r9
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092d8:	6122      	str	r2, [r4, #16]
 80092da:	2201      	movs	r2, #1
 80092dc:	615a      	str	r2, [r3, #20]
 80092de:	e7be      	b.n	800925e <__gethex+0x362>
 80092e0:	6922      	ldr	r2, [r4, #16]
 80092e2:	455a      	cmp	r2, fp
 80092e4:	dd0b      	ble.n	80092fe <__gethex+0x402>
 80092e6:	2101      	movs	r1, #1
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7ff fd9f 	bl	8008e2c <rshift>
 80092ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092f2:	3701      	adds	r7, #1
 80092f4:	42bb      	cmp	r3, r7
 80092f6:	f6ff aee0 	blt.w	80090ba <__gethex+0x1be>
 80092fa:	2501      	movs	r5, #1
 80092fc:	e7c2      	b.n	8009284 <__gethex+0x388>
 80092fe:	f016 061f 	ands.w	r6, r6, #31
 8009302:	d0fa      	beq.n	80092fa <__gethex+0x3fe>
 8009304:	4453      	add	r3, sl
 8009306:	f1c6 0620 	rsb	r6, r6, #32
 800930a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800930e:	f7fe f8c1 	bl	8007494 <__hi0bits>
 8009312:	42b0      	cmp	r0, r6
 8009314:	dbe7      	blt.n	80092e6 <__gethex+0x3ea>
 8009316:	e7f0      	b.n	80092fa <__gethex+0x3fe>
 8009318:	0800aa7d 	.word	0x0800aa7d

0800931c <L_shift>:
 800931c:	f1c2 0208 	rsb	r2, r2, #8
 8009320:	0092      	lsls	r2, r2, #2
 8009322:	b570      	push	{r4, r5, r6, lr}
 8009324:	f1c2 0620 	rsb	r6, r2, #32
 8009328:	6843      	ldr	r3, [r0, #4]
 800932a:	6804      	ldr	r4, [r0, #0]
 800932c:	fa03 f506 	lsl.w	r5, r3, r6
 8009330:	432c      	orrs	r4, r5
 8009332:	40d3      	lsrs	r3, r2
 8009334:	6004      	str	r4, [r0, #0]
 8009336:	f840 3f04 	str.w	r3, [r0, #4]!
 800933a:	4288      	cmp	r0, r1
 800933c:	d3f4      	bcc.n	8009328 <L_shift+0xc>
 800933e:	bd70      	pop	{r4, r5, r6, pc}

08009340 <__match>:
 8009340:	b530      	push	{r4, r5, lr}
 8009342:	6803      	ldr	r3, [r0, #0]
 8009344:	3301      	adds	r3, #1
 8009346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800934a:	b914      	cbnz	r4, 8009352 <__match+0x12>
 800934c:	6003      	str	r3, [r0, #0]
 800934e:	2001      	movs	r0, #1
 8009350:	bd30      	pop	{r4, r5, pc}
 8009352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009356:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800935a:	2d19      	cmp	r5, #25
 800935c:	bf98      	it	ls
 800935e:	3220      	addls	r2, #32
 8009360:	42a2      	cmp	r2, r4
 8009362:	d0f0      	beq.n	8009346 <__match+0x6>
 8009364:	2000      	movs	r0, #0
 8009366:	e7f3      	b.n	8009350 <__match+0x10>

08009368 <__hexnan>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	680b      	ldr	r3, [r1, #0]
 800936e:	6801      	ldr	r1, [r0, #0]
 8009370:	115e      	asrs	r6, r3, #5
 8009372:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009376:	f013 031f 	ands.w	r3, r3, #31
 800937a:	b087      	sub	sp, #28
 800937c:	bf18      	it	ne
 800937e:	3604      	addne	r6, #4
 8009380:	2500      	movs	r5, #0
 8009382:	1f37      	subs	r7, r6, #4
 8009384:	4682      	mov	sl, r0
 8009386:	4690      	mov	r8, r2
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	f846 5c04 	str.w	r5, [r6, #-4]
 800938e:	46b9      	mov	r9, r7
 8009390:	463c      	mov	r4, r7
 8009392:	9502      	str	r5, [sp, #8]
 8009394:	46ab      	mov	fp, r5
 8009396:	784a      	ldrb	r2, [r1, #1]
 8009398:	1c4b      	adds	r3, r1, #1
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	b342      	cbz	r2, 80093f0 <__hexnan+0x88>
 800939e:	4610      	mov	r0, r2
 80093a0:	9105      	str	r1, [sp, #20]
 80093a2:	9204      	str	r2, [sp, #16]
 80093a4:	f7ff fd94 	bl	8008ed0 <__hexdig_fun>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d151      	bne.n	8009450 <__hexnan+0xe8>
 80093ac:	9a04      	ldr	r2, [sp, #16]
 80093ae:	9905      	ldr	r1, [sp, #20]
 80093b0:	2a20      	cmp	r2, #32
 80093b2:	d818      	bhi.n	80093e6 <__hexnan+0x7e>
 80093b4:	9b02      	ldr	r3, [sp, #8]
 80093b6:	459b      	cmp	fp, r3
 80093b8:	dd13      	ble.n	80093e2 <__hexnan+0x7a>
 80093ba:	454c      	cmp	r4, r9
 80093bc:	d206      	bcs.n	80093cc <__hexnan+0x64>
 80093be:	2d07      	cmp	r5, #7
 80093c0:	dc04      	bgt.n	80093cc <__hexnan+0x64>
 80093c2:	462a      	mov	r2, r5
 80093c4:	4649      	mov	r1, r9
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7ff ffa8 	bl	800931c <L_shift>
 80093cc:	4544      	cmp	r4, r8
 80093ce:	d952      	bls.n	8009476 <__hexnan+0x10e>
 80093d0:	2300      	movs	r3, #0
 80093d2:	f1a4 0904 	sub.w	r9, r4, #4
 80093d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80093da:	f8cd b008 	str.w	fp, [sp, #8]
 80093de:	464c      	mov	r4, r9
 80093e0:	461d      	mov	r5, r3
 80093e2:	9903      	ldr	r1, [sp, #12]
 80093e4:	e7d7      	b.n	8009396 <__hexnan+0x2e>
 80093e6:	2a29      	cmp	r2, #41	@ 0x29
 80093e8:	d157      	bne.n	800949a <__hexnan+0x132>
 80093ea:	3102      	adds	r1, #2
 80093ec:	f8ca 1000 	str.w	r1, [sl]
 80093f0:	f1bb 0f00 	cmp.w	fp, #0
 80093f4:	d051      	beq.n	800949a <__hexnan+0x132>
 80093f6:	454c      	cmp	r4, r9
 80093f8:	d206      	bcs.n	8009408 <__hexnan+0xa0>
 80093fa:	2d07      	cmp	r5, #7
 80093fc:	dc04      	bgt.n	8009408 <__hexnan+0xa0>
 80093fe:	462a      	mov	r2, r5
 8009400:	4649      	mov	r1, r9
 8009402:	4620      	mov	r0, r4
 8009404:	f7ff ff8a 	bl	800931c <L_shift>
 8009408:	4544      	cmp	r4, r8
 800940a:	d936      	bls.n	800947a <__hexnan+0x112>
 800940c:	f1a8 0204 	sub.w	r2, r8, #4
 8009410:	4623      	mov	r3, r4
 8009412:	f853 1b04 	ldr.w	r1, [r3], #4
 8009416:	f842 1f04 	str.w	r1, [r2, #4]!
 800941a:	429f      	cmp	r7, r3
 800941c:	d2f9      	bcs.n	8009412 <__hexnan+0xaa>
 800941e:	1b3b      	subs	r3, r7, r4
 8009420:	f023 0303 	bic.w	r3, r3, #3
 8009424:	3304      	adds	r3, #4
 8009426:	3401      	adds	r4, #1
 8009428:	3e03      	subs	r6, #3
 800942a:	42b4      	cmp	r4, r6
 800942c:	bf88      	it	hi
 800942e:	2304      	movhi	r3, #4
 8009430:	4443      	add	r3, r8
 8009432:	2200      	movs	r2, #0
 8009434:	f843 2b04 	str.w	r2, [r3], #4
 8009438:	429f      	cmp	r7, r3
 800943a:	d2fb      	bcs.n	8009434 <__hexnan+0xcc>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	b91b      	cbnz	r3, 8009448 <__hexnan+0xe0>
 8009440:	4547      	cmp	r7, r8
 8009442:	d128      	bne.n	8009496 <__hexnan+0x12e>
 8009444:	2301      	movs	r3, #1
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	2005      	movs	r0, #5
 800944a:	b007      	add	sp, #28
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	3501      	adds	r5, #1
 8009452:	2d08      	cmp	r5, #8
 8009454:	f10b 0b01 	add.w	fp, fp, #1
 8009458:	dd06      	ble.n	8009468 <__hexnan+0x100>
 800945a:	4544      	cmp	r4, r8
 800945c:	d9c1      	bls.n	80093e2 <__hexnan+0x7a>
 800945e:	2300      	movs	r3, #0
 8009460:	f844 3c04 	str.w	r3, [r4, #-4]
 8009464:	2501      	movs	r5, #1
 8009466:	3c04      	subs	r4, #4
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	f000 000f 	and.w	r0, r0, #15
 800946e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009472:	6020      	str	r0, [r4, #0]
 8009474:	e7b5      	b.n	80093e2 <__hexnan+0x7a>
 8009476:	2508      	movs	r5, #8
 8009478:	e7b3      	b.n	80093e2 <__hexnan+0x7a>
 800947a:	9b01      	ldr	r3, [sp, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0dd      	beq.n	800943c <__hexnan+0xd4>
 8009480:	f1c3 0320 	rsb	r3, r3, #32
 8009484:	f04f 32ff 	mov.w	r2, #4294967295
 8009488:	40da      	lsrs	r2, r3
 800948a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800948e:	4013      	ands	r3, r2
 8009490:	f846 3c04 	str.w	r3, [r6, #-4]
 8009494:	e7d2      	b.n	800943c <__hexnan+0xd4>
 8009496:	3f04      	subs	r7, #4
 8009498:	e7d0      	b.n	800943c <__hexnan+0xd4>
 800949a:	2004      	movs	r0, #4
 800949c:	e7d5      	b.n	800944a <__hexnan+0xe2>

0800949e <__ascii_mbtowc>:
 800949e:	b082      	sub	sp, #8
 80094a0:	b901      	cbnz	r1, 80094a4 <__ascii_mbtowc+0x6>
 80094a2:	a901      	add	r1, sp, #4
 80094a4:	b142      	cbz	r2, 80094b8 <__ascii_mbtowc+0x1a>
 80094a6:	b14b      	cbz	r3, 80094bc <__ascii_mbtowc+0x1e>
 80094a8:	7813      	ldrb	r3, [r2, #0]
 80094aa:	600b      	str	r3, [r1, #0]
 80094ac:	7812      	ldrb	r2, [r2, #0]
 80094ae:	1e10      	subs	r0, r2, #0
 80094b0:	bf18      	it	ne
 80094b2:	2001      	movne	r0, #1
 80094b4:	b002      	add	sp, #8
 80094b6:	4770      	bx	lr
 80094b8:	4610      	mov	r0, r2
 80094ba:	e7fb      	b.n	80094b4 <__ascii_mbtowc+0x16>
 80094bc:	f06f 0001 	mvn.w	r0, #1
 80094c0:	e7f8      	b.n	80094b4 <__ascii_mbtowc+0x16>

080094c2 <_realloc_r>:
 80094c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c6:	4680      	mov	r8, r0
 80094c8:	4615      	mov	r5, r2
 80094ca:	460c      	mov	r4, r1
 80094cc:	b921      	cbnz	r1, 80094d8 <_realloc_r+0x16>
 80094ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	4611      	mov	r1, r2
 80094d4:	f7fd be60 	b.w	8007198 <_malloc_r>
 80094d8:	b92a      	cbnz	r2, 80094e6 <_realloc_r+0x24>
 80094da:	f7fd fde9 	bl	80070b0 <_free_r>
 80094de:	2400      	movs	r4, #0
 80094e0:	4620      	mov	r0, r4
 80094e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e6:	f000 f840 	bl	800956a <_malloc_usable_size_r>
 80094ea:	4285      	cmp	r5, r0
 80094ec:	4606      	mov	r6, r0
 80094ee:	d802      	bhi.n	80094f6 <_realloc_r+0x34>
 80094f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80094f4:	d8f4      	bhi.n	80094e0 <_realloc_r+0x1e>
 80094f6:	4629      	mov	r1, r5
 80094f8:	4640      	mov	r0, r8
 80094fa:	f7fd fe4d 	bl	8007198 <_malloc_r>
 80094fe:	4607      	mov	r7, r0
 8009500:	2800      	cmp	r0, #0
 8009502:	d0ec      	beq.n	80094de <_realloc_r+0x1c>
 8009504:	42b5      	cmp	r5, r6
 8009506:	462a      	mov	r2, r5
 8009508:	4621      	mov	r1, r4
 800950a:	bf28      	it	cs
 800950c:	4632      	movcs	r2, r6
 800950e:	f7ff fc45 	bl	8008d9c <memcpy>
 8009512:	4621      	mov	r1, r4
 8009514:	4640      	mov	r0, r8
 8009516:	f7fd fdcb 	bl	80070b0 <_free_r>
 800951a:	463c      	mov	r4, r7
 800951c:	e7e0      	b.n	80094e0 <_realloc_r+0x1e>

0800951e <__ascii_wctomb>:
 800951e:	4603      	mov	r3, r0
 8009520:	4608      	mov	r0, r1
 8009522:	b141      	cbz	r1, 8009536 <__ascii_wctomb+0x18>
 8009524:	2aff      	cmp	r2, #255	@ 0xff
 8009526:	d904      	bls.n	8009532 <__ascii_wctomb+0x14>
 8009528:	228a      	movs	r2, #138	@ 0x8a
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	4770      	bx	lr
 8009532:	700a      	strb	r2, [r1, #0]
 8009534:	2001      	movs	r0, #1
 8009536:	4770      	bx	lr

08009538 <fiprintf>:
 8009538:	b40e      	push	{r1, r2, r3}
 800953a:	b503      	push	{r0, r1, lr}
 800953c:	4601      	mov	r1, r0
 800953e:	ab03      	add	r3, sp, #12
 8009540:	4805      	ldr	r0, [pc, #20]	@ (8009558 <fiprintf+0x20>)
 8009542:	f853 2b04 	ldr.w	r2, [r3], #4
 8009546:	6800      	ldr	r0, [r0, #0]
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	f000 f83f 	bl	80095cc <_vfiprintf_r>
 800954e:	b002      	add	sp, #8
 8009550:	f85d eb04 	ldr.w	lr, [sp], #4
 8009554:	b003      	add	sp, #12
 8009556:	4770      	bx	lr
 8009558:	20000018 	.word	0x20000018

0800955c <abort>:
 800955c:	b508      	push	{r3, lr}
 800955e:	2006      	movs	r0, #6
 8009560:	f000 fa08 	bl	8009974 <raise>
 8009564:	2001      	movs	r0, #1
 8009566:	f7f8 f9f9 	bl	800195c <_exit>

0800956a <_malloc_usable_size_r>:
 800956a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800956e:	1f18      	subs	r0, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	bfbc      	itt	lt
 8009574:	580b      	ldrlt	r3, [r1, r0]
 8009576:	18c0      	addlt	r0, r0, r3
 8009578:	4770      	bx	lr

0800957a <__sfputc_r>:
 800957a:	6893      	ldr	r3, [r2, #8]
 800957c:	3b01      	subs	r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	b410      	push	{r4}
 8009582:	6093      	str	r3, [r2, #8]
 8009584:	da08      	bge.n	8009598 <__sfputc_r+0x1e>
 8009586:	6994      	ldr	r4, [r2, #24]
 8009588:	42a3      	cmp	r3, r4
 800958a:	db01      	blt.n	8009590 <__sfputc_r+0x16>
 800958c:	290a      	cmp	r1, #10
 800958e:	d103      	bne.n	8009598 <__sfputc_r+0x1e>
 8009590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009594:	f000 b932 	b.w	80097fc <__swbuf_r>
 8009598:	6813      	ldr	r3, [r2, #0]
 800959a:	1c58      	adds	r0, r3, #1
 800959c:	6010      	str	r0, [r2, #0]
 800959e:	7019      	strb	r1, [r3, #0]
 80095a0:	4608      	mov	r0, r1
 80095a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <__sfputs_r>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	4606      	mov	r6, r0
 80095ac:	460f      	mov	r7, r1
 80095ae:	4614      	mov	r4, r2
 80095b0:	18d5      	adds	r5, r2, r3
 80095b2:	42ac      	cmp	r4, r5
 80095b4:	d101      	bne.n	80095ba <__sfputs_r+0x12>
 80095b6:	2000      	movs	r0, #0
 80095b8:	e007      	b.n	80095ca <__sfputs_r+0x22>
 80095ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095be:	463a      	mov	r2, r7
 80095c0:	4630      	mov	r0, r6
 80095c2:	f7ff ffda 	bl	800957a <__sfputc_r>
 80095c6:	1c43      	adds	r3, r0, #1
 80095c8:	d1f3      	bne.n	80095b2 <__sfputs_r+0xa>
 80095ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095cc <_vfiprintf_r>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	460d      	mov	r5, r1
 80095d2:	b09d      	sub	sp, #116	@ 0x74
 80095d4:	4614      	mov	r4, r2
 80095d6:	4698      	mov	r8, r3
 80095d8:	4606      	mov	r6, r0
 80095da:	b118      	cbz	r0, 80095e4 <_vfiprintf_r+0x18>
 80095dc:	6a03      	ldr	r3, [r0, #32]
 80095de:	b90b      	cbnz	r3, 80095e4 <_vfiprintf_r+0x18>
 80095e0:	f7fc fdc6 	bl	8006170 <__sinit>
 80095e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095e6:	07d9      	lsls	r1, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_vfiprintf_r+0x2a>
 80095ea:	89ab      	ldrh	r3, [r5, #12]
 80095ec:	059a      	lsls	r2, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_vfiprintf_r+0x2a>
 80095f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095f2:	f7fc ff08 	bl	8006406 <__retarget_lock_acquire_recursive>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	071b      	lsls	r3, r3, #28
 80095fa:	d501      	bpl.n	8009600 <_vfiprintf_r+0x34>
 80095fc:	692b      	ldr	r3, [r5, #16]
 80095fe:	b99b      	cbnz	r3, 8009628 <_vfiprintf_r+0x5c>
 8009600:	4629      	mov	r1, r5
 8009602:	4630      	mov	r0, r6
 8009604:	f000 f938 	bl	8009878 <__swsetup_r>
 8009608:	b170      	cbz	r0, 8009628 <_vfiprintf_r+0x5c>
 800960a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800960c:	07dc      	lsls	r4, r3, #31
 800960e:	d504      	bpl.n	800961a <_vfiprintf_r+0x4e>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	b01d      	add	sp, #116	@ 0x74
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	89ab      	ldrh	r3, [r5, #12]
 800961c:	0598      	lsls	r0, r3, #22
 800961e:	d4f7      	bmi.n	8009610 <_vfiprintf_r+0x44>
 8009620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009622:	f7fc fef1 	bl	8006408 <__retarget_lock_release_recursive>
 8009626:	e7f3      	b.n	8009610 <_vfiprintf_r+0x44>
 8009628:	2300      	movs	r3, #0
 800962a:	9309      	str	r3, [sp, #36]	@ 0x24
 800962c:	2320      	movs	r3, #32
 800962e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009632:	f8cd 800c 	str.w	r8, [sp, #12]
 8009636:	2330      	movs	r3, #48	@ 0x30
 8009638:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80097e8 <_vfiprintf_r+0x21c>
 800963c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009640:	f04f 0901 	mov.w	r9, #1
 8009644:	4623      	mov	r3, r4
 8009646:	469a      	mov	sl, r3
 8009648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964c:	b10a      	cbz	r2, 8009652 <_vfiprintf_r+0x86>
 800964e:	2a25      	cmp	r2, #37	@ 0x25
 8009650:	d1f9      	bne.n	8009646 <_vfiprintf_r+0x7a>
 8009652:	ebba 0b04 	subs.w	fp, sl, r4
 8009656:	d00b      	beq.n	8009670 <_vfiprintf_r+0xa4>
 8009658:	465b      	mov	r3, fp
 800965a:	4622      	mov	r2, r4
 800965c:	4629      	mov	r1, r5
 800965e:	4630      	mov	r0, r6
 8009660:	f7ff ffa2 	bl	80095a8 <__sfputs_r>
 8009664:	3001      	adds	r0, #1
 8009666:	f000 80a7 	beq.w	80097b8 <_vfiprintf_r+0x1ec>
 800966a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800966c:	445a      	add	r2, fp
 800966e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009670:	f89a 3000 	ldrb.w	r3, [sl]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 809f 	beq.w	80097b8 <_vfiprintf_r+0x1ec>
 800967a:	2300      	movs	r3, #0
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009684:	f10a 0a01 	add.w	sl, sl, #1
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009690:	931a      	str	r3, [sp, #104]	@ 0x68
 8009692:	4654      	mov	r4, sl
 8009694:	2205      	movs	r2, #5
 8009696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969a:	4853      	ldr	r0, [pc, #332]	@ (80097e8 <_vfiprintf_r+0x21c>)
 800969c:	f7f6 fda0 	bl	80001e0 <memchr>
 80096a0:	9a04      	ldr	r2, [sp, #16]
 80096a2:	b9d8      	cbnz	r0, 80096dc <_vfiprintf_r+0x110>
 80096a4:	06d1      	lsls	r1, r2, #27
 80096a6:	bf44      	itt	mi
 80096a8:	2320      	movmi	r3, #32
 80096aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ae:	0713      	lsls	r3, r2, #28
 80096b0:	bf44      	itt	mi
 80096b2:	232b      	movmi	r3, #43	@ 0x2b
 80096b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096b8:	f89a 3000 	ldrb.w	r3, [sl]
 80096bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80096be:	d015      	beq.n	80096ec <_vfiprintf_r+0x120>
 80096c0:	9a07      	ldr	r2, [sp, #28]
 80096c2:	4654      	mov	r4, sl
 80096c4:	2000      	movs	r0, #0
 80096c6:	f04f 0c0a 	mov.w	ip, #10
 80096ca:	4621      	mov	r1, r4
 80096cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096d0:	3b30      	subs	r3, #48	@ 0x30
 80096d2:	2b09      	cmp	r3, #9
 80096d4:	d94b      	bls.n	800976e <_vfiprintf_r+0x1a2>
 80096d6:	b1b0      	cbz	r0, 8009706 <_vfiprintf_r+0x13a>
 80096d8:	9207      	str	r2, [sp, #28]
 80096da:	e014      	b.n	8009706 <_vfiprintf_r+0x13a>
 80096dc:	eba0 0308 	sub.w	r3, r0, r8
 80096e0:	fa09 f303 	lsl.w	r3, r9, r3
 80096e4:	4313      	orrs	r3, r2
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	46a2      	mov	sl, r4
 80096ea:	e7d2      	b.n	8009692 <_vfiprintf_r+0xc6>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	1d19      	adds	r1, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9103      	str	r1, [sp, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfbb      	ittet	lt
 80096f8:	425b      	neglt	r3, r3
 80096fa:	f042 0202 	orrlt.w	r2, r2, #2
 80096fe:	9307      	strge	r3, [sp, #28]
 8009700:	9307      	strlt	r3, [sp, #28]
 8009702:	bfb8      	it	lt
 8009704:	9204      	strlt	r2, [sp, #16]
 8009706:	7823      	ldrb	r3, [r4, #0]
 8009708:	2b2e      	cmp	r3, #46	@ 0x2e
 800970a:	d10a      	bne.n	8009722 <_vfiprintf_r+0x156>
 800970c:	7863      	ldrb	r3, [r4, #1]
 800970e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009710:	d132      	bne.n	8009778 <_vfiprintf_r+0x1ac>
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	1d1a      	adds	r2, r3, #4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	9203      	str	r2, [sp, #12]
 800971a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800971e:	3402      	adds	r4, #2
 8009720:	9305      	str	r3, [sp, #20]
 8009722:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097f8 <_vfiprintf_r+0x22c>
 8009726:	7821      	ldrb	r1, [r4, #0]
 8009728:	2203      	movs	r2, #3
 800972a:	4650      	mov	r0, sl
 800972c:	f7f6 fd58 	bl	80001e0 <memchr>
 8009730:	b138      	cbz	r0, 8009742 <_vfiprintf_r+0x176>
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	eba0 000a 	sub.w	r0, r0, sl
 8009738:	2240      	movs	r2, #64	@ 0x40
 800973a:	4082      	lsls	r2, r0
 800973c:	4313      	orrs	r3, r2
 800973e:	3401      	adds	r4, #1
 8009740:	9304      	str	r3, [sp, #16]
 8009742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009746:	4829      	ldr	r0, [pc, #164]	@ (80097ec <_vfiprintf_r+0x220>)
 8009748:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800974c:	2206      	movs	r2, #6
 800974e:	f7f6 fd47 	bl	80001e0 <memchr>
 8009752:	2800      	cmp	r0, #0
 8009754:	d03f      	beq.n	80097d6 <_vfiprintf_r+0x20a>
 8009756:	4b26      	ldr	r3, [pc, #152]	@ (80097f0 <_vfiprintf_r+0x224>)
 8009758:	bb1b      	cbnz	r3, 80097a2 <_vfiprintf_r+0x1d6>
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	3307      	adds	r3, #7
 800975e:	f023 0307 	bic.w	r3, r3, #7
 8009762:	3308      	adds	r3, #8
 8009764:	9303      	str	r3, [sp, #12]
 8009766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009768:	443b      	add	r3, r7
 800976a:	9309      	str	r3, [sp, #36]	@ 0x24
 800976c:	e76a      	b.n	8009644 <_vfiprintf_r+0x78>
 800976e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009772:	460c      	mov	r4, r1
 8009774:	2001      	movs	r0, #1
 8009776:	e7a8      	b.n	80096ca <_vfiprintf_r+0xfe>
 8009778:	2300      	movs	r3, #0
 800977a:	3401      	adds	r4, #1
 800977c:	9305      	str	r3, [sp, #20]
 800977e:	4619      	mov	r1, r3
 8009780:	f04f 0c0a 	mov.w	ip, #10
 8009784:	4620      	mov	r0, r4
 8009786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800978a:	3a30      	subs	r2, #48	@ 0x30
 800978c:	2a09      	cmp	r2, #9
 800978e:	d903      	bls.n	8009798 <_vfiprintf_r+0x1cc>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0c6      	beq.n	8009722 <_vfiprintf_r+0x156>
 8009794:	9105      	str	r1, [sp, #20]
 8009796:	e7c4      	b.n	8009722 <_vfiprintf_r+0x156>
 8009798:	fb0c 2101 	mla	r1, ip, r1, r2
 800979c:	4604      	mov	r4, r0
 800979e:	2301      	movs	r3, #1
 80097a0:	e7f0      	b.n	8009784 <_vfiprintf_r+0x1b8>
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	462a      	mov	r2, r5
 80097a8:	4b12      	ldr	r3, [pc, #72]	@ (80097f4 <_vfiprintf_r+0x228>)
 80097aa:	a904      	add	r1, sp, #16
 80097ac:	4630      	mov	r0, r6
 80097ae:	f7fb fe87 	bl	80054c0 <_printf_float>
 80097b2:	4607      	mov	r7, r0
 80097b4:	1c78      	adds	r0, r7, #1
 80097b6:	d1d6      	bne.n	8009766 <_vfiprintf_r+0x19a>
 80097b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ba:	07d9      	lsls	r1, r3, #31
 80097bc:	d405      	bmi.n	80097ca <_vfiprintf_r+0x1fe>
 80097be:	89ab      	ldrh	r3, [r5, #12]
 80097c0:	059a      	lsls	r2, r3, #22
 80097c2:	d402      	bmi.n	80097ca <_vfiprintf_r+0x1fe>
 80097c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097c6:	f7fc fe1f 	bl	8006408 <__retarget_lock_release_recursive>
 80097ca:	89ab      	ldrh	r3, [r5, #12]
 80097cc:	065b      	lsls	r3, r3, #25
 80097ce:	f53f af1f 	bmi.w	8009610 <_vfiprintf_r+0x44>
 80097d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097d4:	e71e      	b.n	8009614 <_vfiprintf_r+0x48>
 80097d6:	ab03      	add	r3, sp, #12
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	462a      	mov	r2, r5
 80097dc:	4b05      	ldr	r3, [pc, #20]	@ (80097f4 <_vfiprintf_r+0x228>)
 80097de:	a904      	add	r1, sp, #16
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7fc f905 	bl	80059f0 <_printf_i>
 80097e6:	e7e4      	b.n	80097b2 <_vfiprintf_r+0x1e6>
 80097e8:	0800ad41 	.word	0x0800ad41
 80097ec:	0800ad4b 	.word	0x0800ad4b
 80097f0:	080054c1 	.word	0x080054c1
 80097f4:	080095a9 	.word	0x080095a9
 80097f8:	0800ad47 	.word	0x0800ad47

080097fc <__swbuf_r>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	460e      	mov	r6, r1
 8009800:	4614      	mov	r4, r2
 8009802:	4605      	mov	r5, r0
 8009804:	b118      	cbz	r0, 800980e <__swbuf_r+0x12>
 8009806:	6a03      	ldr	r3, [r0, #32]
 8009808:	b90b      	cbnz	r3, 800980e <__swbuf_r+0x12>
 800980a:	f7fc fcb1 	bl	8006170 <__sinit>
 800980e:	69a3      	ldr	r3, [r4, #24]
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	071a      	lsls	r2, r3, #28
 8009816:	d501      	bpl.n	800981c <__swbuf_r+0x20>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	b943      	cbnz	r3, 800982e <__swbuf_r+0x32>
 800981c:	4621      	mov	r1, r4
 800981e:	4628      	mov	r0, r5
 8009820:	f000 f82a 	bl	8009878 <__swsetup_r>
 8009824:	b118      	cbz	r0, 800982e <__swbuf_r+0x32>
 8009826:	f04f 37ff 	mov.w	r7, #4294967295
 800982a:	4638      	mov	r0, r7
 800982c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	6922      	ldr	r2, [r4, #16]
 8009832:	1a98      	subs	r0, r3, r2
 8009834:	6963      	ldr	r3, [r4, #20]
 8009836:	b2f6      	uxtb	r6, r6
 8009838:	4283      	cmp	r3, r0
 800983a:	4637      	mov	r7, r6
 800983c:	dc05      	bgt.n	800984a <__swbuf_r+0x4e>
 800983e:	4621      	mov	r1, r4
 8009840:	4628      	mov	r0, r5
 8009842:	f7ff fa47 	bl	8008cd4 <_fflush_r>
 8009846:	2800      	cmp	r0, #0
 8009848:	d1ed      	bne.n	8009826 <__swbuf_r+0x2a>
 800984a:	68a3      	ldr	r3, [r4, #8]
 800984c:	3b01      	subs	r3, #1
 800984e:	60a3      	str	r3, [r4, #8]
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	6022      	str	r2, [r4, #0]
 8009856:	701e      	strb	r6, [r3, #0]
 8009858:	6962      	ldr	r2, [r4, #20]
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	429a      	cmp	r2, r3
 800985e:	d004      	beq.n	800986a <__swbuf_r+0x6e>
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	07db      	lsls	r3, r3, #31
 8009864:	d5e1      	bpl.n	800982a <__swbuf_r+0x2e>
 8009866:	2e0a      	cmp	r6, #10
 8009868:	d1df      	bne.n	800982a <__swbuf_r+0x2e>
 800986a:	4621      	mov	r1, r4
 800986c:	4628      	mov	r0, r5
 800986e:	f7ff fa31 	bl	8008cd4 <_fflush_r>
 8009872:	2800      	cmp	r0, #0
 8009874:	d0d9      	beq.n	800982a <__swbuf_r+0x2e>
 8009876:	e7d6      	b.n	8009826 <__swbuf_r+0x2a>

08009878 <__swsetup_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <__swsetup_r+0xa8>)
 800987c:	4605      	mov	r5, r0
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	460c      	mov	r4, r1
 8009882:	b118      	cbz	r0, 800988c <__swsetup_r+0x14>
 8009884:	6a03      	ldr	r3, [r0, #32]
 8009886:	b90b      	cbnz	r3, 800988c <__swsetup_r+0x14>
 8009888:	f7fc fc72 	bl	8006170 <__sinit>
 800988c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009890:	0719      	lsls	r1, r3, #28
 8009892:	d422      	bmi.n	80098da <__swsetup_r+0x62>
 8009894:	06da      	lsls	r2, r3, #27
 8009896:	d407      	bmi.n	80098a8 <__swsetup_r+0x30>
 8009898:	2209      	movs	r2, #9
 800989a:	602a      	str	r2, [r5, #0]
 800989c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	e033      	b.n	8009910 <__swsetup_r+0x98>
 80098a8:	0758      	lsls	r0, r3, #29
 80098aa:	d512      	bpl.n	80098d2 <__swsetup_r+0x5a>
 80098ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ae:	b141      	cbz	r1, 80098c2 <__swsetup_r+0x4a>
 80098b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098b4:	4299      	cmp	r1, r3
 80098b6:	d002      	beq.n	80098be <__swsetup_r+0x46>
 80098b8:	4628      	mov	r0, r5
 80098ba:	f7fd fbf9 	bl	80070b0 <_free_r>
 80098be:	2300      	movs	r3, #0
 80098c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	2300      	movs	r3, #0
 80098cc:	6063      	str	r3, [r4, #4]
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	f043 0308 	orr.w	r3, r3, #8
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	b94b      	cbnz	r3, 80098f2 <__swsetup_r+0x7a>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e8:	d003      	beq.n	80098f2 <__swsetup_r+0x7a>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 f883 	bl	80099f8 <__smakebuf_r>
 80098f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f6:	f013 0201 	ands.w	r2, r3, #1
 80098fa:	d00a      	beq.n	8009912 <__swsetup_r+0x9a>
 80098fc:	2200      	movs	r2, #0
 80098fe:	60a2      	str	r2, [r4, #8]
 8009900:	6962      	ldr	r2, [r4, #20]
 8009902:	4252      	negs	r2, r2
 8009904:	61a2      	str	r2, [r4, #24]
 8009906:	6922      	ldr	r2, [r4, #16]
 8009908:	b942      	cbnz	r2, 800991c <__swsetup_r+0xa4>
 800990a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800990e:	d1c5      	bne.n	800989c <__swsetup_r+0x24>
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	0799      	lsls	r1, r3, #30
 8009914:	bf58      	it	pl
 8009916:	6962      	ldrpl	r2, [r4, #20]
 8009918:	60a2      	str	r2, [r4, #8]
 800991a:	e7f4      	b.n	8009906 <__swsetup_r+0x8e>
 800991c:	2000      	movs	r0, #0
 800991e:	e7f7      	b.n	8009910 <__swsetup_r+0x98>
 8009920:	20000018 	.word	0x20000018

08009924 <_raise_r>:
 8009924:	291f      	cmp	r1, #31
 8009926:	b538      	push	{r3, r4, r5, lr}
 8009928:	4605      	mov	r5, r0
 800992a:	460c      	mov	r4, r1
 800992c:	d904      	bls.n	8009938 <_raise_r+0x14>
 800992e:	2316      	movs	r3, #22
 8009930:	6003      	str	r3, [r0, #0]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800993a:	b112      	cbz	r2, 8009942 <_raise_r+0x1e>
 800993c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009940:	b94b      	cbnz	r3, 8009956 <_raise_r+0x32>
 8009942:	4628      	mov	r0, r5
 8009944:	f000 f830 	bl	80099a8 <_getpid_r>
 8009948:	4622      	mov	r2, r4
 800994a:	4601      	mov	r1, r0
 800994c:	4628      	mov	r0, r5
 800994e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009952:	f000 b817 	b.w	8009984 <_kill_r>
 8009956:	2b01      	cmp	r3, #1
 8009958:	d00a      	beq.n	8009970 <_raise_r+0x4c>
 800995a:	1c59      	adds	r1, r3, #1
 800995c:	d103      	bne.n	8009966 <_raise_r+0x42>
 800995e:	2316      	movs	r3, #22
 8009960:	6003      	str	r3, [r0, #0]
 8009962:	2001      	movs	r0, #1
 8009964:	e7e7      	b.n	8009936 <_raise_r+0x12>
 8009966:	2100      	movs	r1, #0
 8009968:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800996c:	4620      	mov	r0, r4
 800996e:	4798      	blx	r3
 8009970:	2000      	movs	r0, #0
 8009972:	e7e0      	b.n	8009936 <_raise_r+0x12>

08009974 <raise>:
 8009974:	4b02      	ldr	r3, [pc, #8]	@ (8009980 <raise+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f7ff bfd3 	b.w	8009924 <_raise_r>
 800997e:	bf00      	nop
 8009980:	20000018 	.word	0x20000018

08009984 <_kill_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d07      	ldr	r5, [pc, #28]	@ (80099a4 <_kill_r+0x20>)
 8009988:	2300      	movs	r3, #0
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	f7f7 ffd3 	bl	800193c <_kill>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d102      	bne.n	80099a0 <_kill_r+0x1c>
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	b103      	cbz	r3, 80099a0 <_kill_r+0x1c>
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	bd38      	pop	{r3, r4, r5, pc}
 80099a2:	bf00      	nop
 80099a4:	20000d34 	.word	0x20000d34

080099a8 <_getpid_r>:
 80099a8:	f7f7 bfc0 	b.w	800192c <_getpid>

080099ac <__swhatbuf_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	460c      	mov	r4, r1
 80099b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b4:	2900      	cmp	r1, #0
 80099b6:	b096      	sub	sp, #88	@ 0x58
 80099b8:	4615      	mov	r5, r2
 80099ba:	461e      	mov	r6, r3
 80099bc:	da0d      	bge.n	80099da <__swhatbuf_r+0x2e>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099c4:	f04f 0100 	mov.w	r1, #0
 80099c8:	bf14      	ite	ne
 80099ca:	2340      	movne	r3, #64	@ 0x40
 80099cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099d0:	2000      	movs	r0, #0
 80099d2:	6031      	str	r1, [r6, #0]
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	b016      	add	sp, #88	@ 0x58
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
 80099da:	466a      	mov	r2, sp
 80099dc:	f000 f848 	bl	8009a70 <_fstat_r>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	dbec      	blt.n	80099be <__swhatbuf_r+0x12>
 80099e4:	9901      	ldr	r1, [sp, #4]
 80099e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099ee:	4259      	negs	r1, r3
 80099f0:	4159      	adcs	r1, r3
 80099f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099f6:	e7eb      	b.n	80099d0 <__swhatbuf_r+0x24>

080099f8 <__smakebuf_r>:
 80099f8:	898b      	ldrh	r3, [r1, #12]
 80099fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099fc:	079d      	lsls	r5, r3, #30
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d507      	bpl.n	8009a14 <__smakebuf_r+0x1c>
 8009a04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	b003      	add	sp, #12
 8009a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a14:	ab01      	add	r3, sp, #4
 8009a16:	466a      	mov	r2, sp
 8009a18:	f7ff ffc8 	bl	80099ac <__swhatbuf_r>
 8009a1c:	9f00      	ldr	r7, [sp, #0]
 8009a1e:	4605      	mov	r5, r0
 8009a20:	4639      	mov	r1, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7fd fbb8 	bl	8007198 <_malloc_r>
 8009a28:	b948      	cbnz	r0, 8009a3e <__smakebuf_r+0x46>
 8009a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2e:	059a      	lsls	r2, r3, #22
 8009a30:	d4ee      	bmi.n	8009a10 <__smakebuf_r+0x18>
 8009a32:	f023 0303 	bic.w	r3, r3, #3
 8009a36:	f043 0302 	orr.w	r3, r3, #2
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	e7e2      	b.n	8009a04 <__smakebuf_r+0xc>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	6020      	str	r0, [r4, #0]
 8009a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a4e:	b15b      	cbz	r3, 8009a68 <__smakebuf_r+0x70>
 8009a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 f81d 	bl	8009a94 <_isatty_r>
 8009a5a:	b128      	cbz	r0, 8009a68 <__smakebuf_r+0x70>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	431d      	orrs	r5, r3
 8009a6c:	81a5      	strh	r5, [r4, #12]
 8009a6e:	e7cf      	b.n	8009a10 <__smakebuf_r+0x18>

08009a70 <_fstat_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d07      	ldr	r5, [pc, #28]	@ (8009a90 <_fstat_r+0x20>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	f7f7 ffbd 	bl	80019fc <_fstat>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d102      	bne.n	8009a8c <_fstat_r+0x1c>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	b103      	cbz	r3, 8009a8c <_fstat_r+0x1c>
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000d34 	.word	0x20000d34

08009a94 <_isatty_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	@ (8009ab0 <_isatty_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f7 ffbc 	bl	8001a1c <_isatty>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_isatty_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_isatty_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	20000d34 	.word	0x20000d34

08009ab4 <pow>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	ed2d 8b02 	vpush	{d8}
 8009aba:	eeb0 8a40 	vmov.f32	s16, s0
 8009abe:	eef0 8a60 	vmov.f32	s17, s1
 8009ac2:	ec55 4b11 	vmov	r4, r5, d1
 8009ac6:	f000 f873 	bl	8009bb0 <__ieee754_pow>
 8009aca:	4622      	mov	r2, r4
 8009acc:	462b      	mov	r3, r5
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	ec57 6b10 	vmov	r6, r7, d0
 8009ad6:	f7f7 f831 	bl	8000b3c <__aeabi_dcmpun>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d13b      	bne.n	8009b56 <pow+0xa2>
 8009ade:	ec51 0b18 	vmov	r0, r1, d8
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f7f6 fff7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aea:	b1b8      	cbz	r0, 8009b1c <pow+0x68>
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	4620      	mov	r0, r4
 8009af2:	4629      	mov	r1, r5
 8009af4:	f7f6 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d146      	bne.n	8009b8a <pow+0xd6>
 8009afc:	ec45 4b10 	vmov	d0, r4, r5
 8009b00:	f000 f848 	bl	8009b94 <finite>
 8009b04:	b338      	cbz	r0, 8009b56 <pow+0xa2>
 8009b06:	2200      	movs	r2, #0
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	f7f6 ffed 	bl	8000aec <__aeabi_dcmplt>
 8009b12:	b300      	cbz	r0, 8009b56 <pow+0xa2>
 8009b14:	f7fc fc4c 	bl	80063b0 <__errno>
 8009b18:	2322      	movs	r3, #34	@ 0x22
 8009b1a:	e01b      	b.n	8009b54 <pow+0xa0>
 8009b1c:	ec47 6b10 	vmov	d0, r6, r7
 8009b20:	f000 f838 	bl	8009b94 <finite>
 8009b24:	b9e0      	cbnz	r0, 8009b60 <pow+0xac>
 8009b26:	eeb0 0a48 	vmov.f32	s0, s16
 8009b2a:	eef0 0a68 	vmov.f32	s1, s17
 8009b2e:	f000 f831 	bl	8009b94 <finite>
 8009b32:	b1a8      	cbz	r0, 8009b60 <pow+0xac>
 8009b34:	ec45 4b10 	vmov	d0, r4, r5
 8009b38:	f000 f82c 	bl	8009b94 <finite>
 8009b3c:	b180      	cbz	r0, 8009b60 <pow+0xac>
 8009b3e:	4632      	mov	r2, r6
 8009b40:	463b      	mov	r3, r7
 8009b42:	4630      	mov	r0, r6
 8009b44:	4639      	mov	r1, r7
 8009b46:	f7f6 fff9 	bl	8000b3c <__aeabi_dcmpun>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d0e2      	beq.n	8009b14 <pow+0x60>
 8009b4e:	f7fc fc2f 	bl	80063b0 <__errno>
 8009b52:	2321      	movs	r3, #33	@ 0x21
 8009b54:	6003      	str	r3, [r0, #0]
 8009b56:	ecbd 8b02 	vpop	{d8}
 8009b5a:	ec47 6b10 	vmov	d0, r6, r7
 8009b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b60:	2200      	movs	r2, #0
 8009b62:	2300      	movs	r3, #0
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d0f2      	beq.n	8009b56 <pow+0xa2>
 8009b70:	eeb0 0a48 	vmov.f32	s0, s16
 8009b74:	eef0 0a68 	vmov.f32	s1, s17
 8009b78:	f000 f80c 	bl	8009b94 <finite>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d0ea      	beq.n	8009b56 <pow+0xa2>
 8009b80:	ec45 4b10 	vmov	d0, r4, r5
 8009b84:	f000 f806 	bl	8009b94 <finite>
 8009b88:	e7c3      	b.n	8009b12 <pow+0x5e>
 8009b8a:	4f01      	ldr	r7, [pc, #4]	@ (8009b90 <pow+0xdc>)
 8009b8c:	2600      	movs	r6, #0
 8009b8e:	e7e2      	b.n	8009b56 <pow+0xa2>
 8009b90:	3ff00000 	.word	0x3ff00000

08009b94 <finite>:
 8009b94:	b082      	sub	sp, #8
 8009b96:	ed8d 0b00 	vstr	d0, [sp]
 8009b9a:	9801      	ldr	r0, [sp, #4]
 8009b9c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009ba0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009ba4:	0fc0      	lsrs	r0, r0, #31
 8009ba6:	b002      	add	sp, #8
 8009ba8:	4770      	bx	lr
 8009baa:	0000      	movs	r0, r0
 8009bac:	0000      	movs	r0, r0
	...

08009bb0 <__ieee754_pow>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	b091      	sub	sp, #68	@ 0x44
 8009bb6:	ed8d 1b00 	vstr	d1, [sp]
 8009bba:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009bbe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009bc2:	ea5a 0001 	orrs.w	r0, sl, r1
 8009bc6:	ec57 6b10 	vmov	r6, r7, d0
 8009bca:	d113      	bne.n	8009bf4 <__ieee754_pow+0x44>
 8009bcc:	19b3      	adds	r3, r6, r6
 8009bce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009bd2:	4152      	adcs	r2, r2
 8009bd4:	4298      	cmp	r0, r3
 8009bd6:	4b98      	ldr	r3, [pc, #608]	@ (8009e38 <__ieee754_pow+0x288>)
 8009bd8:	4193      	sbcs	r3, r2
 8009bda:	f080 84ea 	bcs.w	800a5b2 <__ieee754_pow+0xa02>
 8009bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be2:	4630      	mov	r0, r6
 8009be4:	4639      	mov	r1, r7
 8009be6:	f7f6 fb59 	bl	800029c <__adddf3>
 8009bea:	ec41 0b10 	vmov	d0, r0, r1
 8009bee:	b011      	add	sp, #68	@ 0x44
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	4a91      	ldr	r2, [pc, #580]	@ (8009e3c <__ieee754_pow+0x28c>)
 8009bf6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009bfa:	4590      	cmp	r8, r2
 8009bfc:	463d      	mov	r5, r7
 8009bfe:	4633      	mov	r3, r6
 8009c00:	d806      	bhi.n	8009c10 <__ieee754_pow+0x60>
 8009c02:	d101      	bne.n	8009c08 <__ieee754_pow+0x58>
 8009c04:	2e00      	cmp	r6, #0
 8009c06:	d1ea      	bne.n	8009bde <__ieee754_pow+0x2e>
 8009c08:	4592      	cmp	sl, r2
 8009c0a:	d801      	bhi.n	8009c10 <__ieee754_pow+0x60>
 8009c0c:	d10e      	bne.n	8009c2c <__ieee754_pow+0x7c>
 8009c0e:	b169      	cbz	r1, 8009c2c <__ieee754_pow+0x7c>
 8009c10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009c14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009c18:	431d      	orrs	r5, r3
 8009c1a:	d1e0      	bne.n	8009bde <__ieee754_pow+0x2e>
 8009c1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c20:	18db      	adds	r3, r3, r3
 8009c22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009c26:	4152      	adcs	r2, r2
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	e7d4      	b.n	8009bd6 <__ieee754_pow+0x26>
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	46c3      	mov	fp, r8
 8009c30:	da3a      	bge.n	8009ca8 <__ieee754_pow+0xf8>
 8009c32:	4a83      	ldr	r2, [pc, #524]	@ (8009e40 <__ieee754_pow+0x290>)
 8009c34:	4592      	cmp	sl, r2
 8009c36:	d84d      	bhi.n	8009cd4 <__ieee754_pow+0x124>
 8009c38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009c3c:	4592      	cmp	sl, r2
 8009c3e:	f240 84c7 	bls.w	800a5d0 <__ieee754_pow+0xa20>
 8009c42:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009c46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009c4a:	2a14      	cmp	r2, #20
 8009c4c:	dd0f      	ble.n	8009c6e <__ieee754_pow+0xbe>
 8009c4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009c52:	fa21 f402 	lsr.w	r4, r1, r2
 8009c56:	fa04 f202 	lsl.w	r2, r4, r2
 8009c5a:	428a      	cmp	r2, r1
 8009c5c:	f040 84b8 	bne.w	800a5d0 <__ieee754_pow+0xa20>
 8009c60:	f004 0401 	and.w	r4, r4, #1
 8009c64:	f1c4 0402 	rsb	r4, r4, #2
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d158      	bne.n	8009d1e <__ieee754_pow+0x16e>
 8009c6c:	e00e      	b.n	8009c8c <__ieee754_pow+0xdc>
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	d154      	bne.n	8009d1c <__ieee754_pow+0x16c>
 8009c72:	f1c2 0214 	rsb	r2, r2, #20
 8009c76:	fa4a f402 	asr.w	r4, sl, r2
 8009c7a:	fa04 f202 	lsl.w	r2, r4, r2
 8009c7e:	4552      	cmp	r2, sl
 8009c80:	f040 84a3 	bne.w	800a5ca <__ieee754_pow+0xa1a>
 8009c84:	f004 0401 	and.w	r4, r4, #1
 8009c88:	f1c4 0402 	rsb	r4, r4, #2
 8009c8c:	4a6d      	ldr	r2, [pc, #436]	@ (8009e44 <__ieee754_pow+0x294>)
 8009c8e:	4592      	cmp	sl, r2
 8009c90:	d12e      	bne.n	8009cf0 <__ieee754_pow+0x140>
 8009c92:	f1b9 0f00 	cmp.w	r9, #0
 8009c96:	f280 8494 	bge.w	800a5c2 <__ieee754_pow+0xa12>
 8009c9a:	496a      	ldr	r1, [pc, #424]	@ (8009e44 <__ieee754_pow+0x294>)
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	f7f6 fddb 	bl	800085c <__aeabi_ddiv>
 8009ca6:	e7a0      	b.n	8009bea <__ieee754_pow+0x3a>
 8009ca8:	2400      	movs	r4, #0
 8009caa:	bbc1      	cbnz	r1, 8009d1e <__ieee754_pow+0x16e>
 8009cac:	4a63      	ldr	r2, [pc, #396]	@ (8009e3c <__ieee754_pow+0x28c>)
 8009cae:	4592      	cmp	sl, r2
 8009cb0:	d1ec      	bne.n	8009c8c <__ieee754_pow+0xdc>
 8009cb2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009cb6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	f000 8479 	beq.w	800a5b2 <__ieee754_pow+0xa02>
 8009cc0:	4b61      	ldr	r3, [pc, #388]	@ (8009e48 <__ieee754_pow+0x298>)
 8009cc2:	4598      	cmp	r8, r3
 8009cc4:	d908      	bls.n	8009cd8 <__ieee754_pow+0x128>
 8009cc6:	f1b9 0f00 	cmp.w	r9, #0
 8009cca:	f2c0 8476 	blt.w	800a5ba <__ieee754_pow+0xa0a>
 8009cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cd2:	e78a      	b.n	8009bea <__ieee754_pow+0x3a>
 8009cd4:	2402      	movs	r4, #2
 8009cd6:	e7e8      	b.n	8009caa <__ieee754_pow+0xfa>
 8009cd8:	f1b9 0f00 	cmp.w	r9, #0
 8009cdc:	f04f 0000 	mov.w	r0, #0
 8009ce0:	f04f 0100 	mov.w	r1, #0
 8009ce4:	da81      	bge.n	8009bea <__ieee754_pow+0x3a>
 8009ce6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009cea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009cee:	e77c      	b.n	8009bea <__ieee754_pow+0x3a>
 8009cf0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009cf4:	d106      	bne.n	8009d04 <__ieee754_pow+0x154>
 8009cf6:	4632      	mov	r2, r6
 8009cf8:	463b      	mov	r3, r7
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	f7f6 fc83 	bl	8000608 <__aeabi_dmul>
 8009d02:	e772      	b.n	8009bea <__ieee754_pow+0x3a>
 8009d04:	4a51      	ldr	r2, [pc, #324]	@ (8009e4c <__ieee754_pow+0x29c>)
 8009d06:	4591      	cmp	r9, r2
 8009d08:	d109      	bne.n	8009d1e <__ieee754_pow+0x16e>
 8009d0a:	2d00      	cmp	r5, #0
 8009d0c:	db07      	blt.n	8009d1e <__ieee754_pow+0x16e>
 8009d0e:	ec47 6b10 	vmov	d0, r6, r7
 8009d12:	b011      	add	sp, #68	@ 0x44
 8009d14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	f000 bd52 	b.w	800a7c0 <__ieee754_sqrt>
 8009d1c:	2400      	movs	r4, #0
 8009d1e:	ec47 6b10 	vmov	d0, r6, r7
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	f000 fc88 	bl	800a638 <fabs>
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	ec51 0b10 	vmov	r0, r1, d0
 8009d2e:	bb53      	cbnz	r3, 8009d86 <__ieee754_pow+0x1d6>
 8009d30:	4b44      	ldr	r3, [pc, #272]	@ (8009e44 <__ieee754_pow+0x294>)
 8009d32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d002      	beq.n	8009d40 <__ieee754_pow+0x190>
 8009d3a:	f1b8 0f00 	cmp.w	r8, #0
 8009d3e:	d122      	bne.n	8009d86 <__ieee754_pow+0x1d6>
 8009d40:	f1b9 0f00 	cmp.w	r9, #0
 8009d44:	da05      	bge.n	8009d52 <__ieee754_pow+0x1a2>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	493d      	ldr	r1, [pc, #244]	@ (8009e44 <__ieee754_pow+0x294>)
 8009d4e:	f7f6 fd85 	bl	800085c <__aeabi_ddiv>
 8009d52:	2d00      	cmp	r5, #0
 8009d54:	f6bf af49 	bge.w	8009bea <__ieee754_pow+0x3a>
 8009d58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009d5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009d60:	ea58 0804 	orrs.w	r8, r8, r4
 8009d64:	d108      	bne.n	8009d78 <__ieee754_pow+0x1c8>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	f7f6 fa93 	bl	8000298 <__aeabi_dsub>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	e794      	b.n	8009ca2 <__ieee754_pow+0xf2>
 8009d78:	2c01      	cmp	r4, #1
 8009d7a:	f47f af36 	bne.w	8009bea <__ieee754_pow+0x3a>
 8009d7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d82:	4619      	mov	r1, r3
 8009d84:	e731      	b.n	8009bea <__ieee754_pow+0x3a>
 8009d86:	0feb      	lsrs	r3, r5, #31
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	ea53 0204 	orrs.w	r2, r3, r4
 8009d8e:	d102      	bne.n	8009d96 <__ieee754_pow+0x1e6>
 8009d90:	4632      	mov	r2, r6
 8009d92:	463b      	mov	r3, r7
 8009d94:	e7e9      	b.n	8009d6a <__ieee754_pow+0x1ba>
 8009d96:	3c01      	subs	r4, #1
 8009d98:	431c      	orrs	r4, r3
 8009d9a:	d016      	beq.n	8009dca <__ieee754_pow+0x21a>
 8009d9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009e28 <__ieee754_pow+0x278>
 8009da0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009da4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009da8:	f240 8112 	bls.w	8009fd0 <__ieee754_pow+0x420>
 8009dac:	4b28      	ldr	r3, [pc, #160]	@ (8009e50 <__ieee754_pow+0x2a0>)
 8009dae:	459a      	cmp	sl, r3
 8009db0:	4b25      	ldr	r3, [pc, #148]	@ (8009e48 <__ieee754_pow+0x298>)
 8009db2:	d916      	bls.n	8009de2 <__ieee754_pow+0x232>
 8009db4:	4598      	cmp	r8, r3
 8009db6:	d80b      	bhi.n	8009dd0 <__ieee754_pow+0x220>
 8009db8:	f1b9 0f00 	cmp.w	r9, #0
 8009dbc:	da0b      	bge.n	8009dd6 <__ieee754_pow+0x226>
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	b011      	add	sp, #68	@ 0x44
 8009dc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc6:	f000 bcf3 	b.w	800a7b0 <__math_oflow>
 8009dca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009e30 <__ieee754_pow+0x280>
 8009dce:	e7e7      	b.n	8009da0 <__ieee754_pow+0x1f0>
 8009dd0:	f1b9 0f00 	cmp.w	r9, #0
 8009dd4:	dcf3      	bgt.n	8009dbe <__ieee754_pow+0x20e>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	b011      	add	sp, #68	@ 0x44
 8009dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dde:	f000 bcdf 	b.w	800a7a0 <__math_uflow>
 8009de2:	4598      	cmp	r8, r3
 8009de4:	d20c      	bcs.n	8009e00 <__ieee754_pow+0x250>
 8009de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dea:	2200      	movs	r2, #0
 8009dec:	2300      	movs	r3, #0
 8009dee:	f7f6 fe7d 	bl	8000aec <__aeabi_dcmplt>
 8009df2:	3800      	subs	r0, #0
 8009df4:	bf18      	it	ne
 8009df6:	2001      	movne	r0, #1
 8009df8:	f1b9 0f00 	cmp.w	r9, #0
 8009dfc:	daec      	bge.n	8009dd8 <__ieee754_pow+0x228>
 8009dfe:	e7df      	b.n	8009dc0 <__ieee754_pow+0x210>
 8009e00:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <__ieee754_pow+0x294>)
 8009e02:	4598      	cmp	r8, r3
 8009e04:	f04f 0200 	mov.w	r2, #0
 8009e08:	d924      	bls.n	8009e54 <__ieee754_pow+0x2a4>
 8009e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f7f6 fe6c 	bl	8000aec <__aeabi_dcmplt>
 8009e14:	3800      	subs	r0, #0
 8009e16:	bf18      	it	ne
 8009e18:	2001      	movne	r0, #1
 8009e1a:	f1b9 0f00 	cmp.w	r9, #0
 8009e1e:	dccf      	bgt.n	8009dc0 <__ieee754_pow+0x210>
 8009e20:	e7da      	b.n	8009dd8 <__ieee754_pow+0x228>
 8009e22:	bf00      	nop
 8009e24:	f3af 8000 	nop.w
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	3ff00000 	.word	0x3ff00000
 8009e30:	00000000 	.word	0x00000000
 8009e34:	bff00000 	.word	0xbff00000
 8009e38:	fff00000 	.word	0xfff00000
 8009e3c:	7ff00000 	.word	0x7ff00000
 8009e40:	433fffff 	.word	0x433fffff
 8009e44:	3ff00000 	.word	0x3ff00000
 8009e48:	3fefffff 	.word	0x3fefffff
 8009e4c:	3fe00000 	.word	0x3fe00000
 8009e50:	43f00000 	.word	0x43f00000
 8009e54:	4b5a      	ldr	r3, [pc, #360]	@ (8009fc0 <__ieee754_pow+0x410>)
 8009e56:	f7f6 fa1f 	bl	8000298 <__aeabi_dsub>
 8009e5a:	a351      	add	r3, pc, #324	@ (adr r3, 8009fa0 <__ieee754_pow+0x3f0>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	f7f6 fbd0 	bl	8000608 <__aeabi_dmul>
 8009e68:	a34f      	add	r3, pc, #316	@ (adr r3, 8009fa8 <__ieee754_pow+0x3f8>)
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	4606      	mov	r6, r0
 8009e70:	460f      	mov	r7, r1
 8009e72:	4620      	mov	r0, r4
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7f6 fbc7 	bl	8000608 <__aeabi_dmul>
 8009e7a:	4b52      	ldr	r3, [pc, #328]	@ (8009fc4 <__ieee754_pow+0x414>)
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	468b      	mov	fp, r1
 8009e80:	2200      	movs	r2, #0
 8009e82:	4620      	mov	r0, r4
 8009e84:	4629      	mov	r1, r5
 8009e86:	f7f6 fbbf 	bl	8000608 <__aeabi_dmul>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	a148      	add	r1, pc, #288	@ (adr r1, 8009fb0 <__ieee754_pow+0x400>)
 8009e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e94:	f7f6 fa00 	bl	8000298 <__aeabi_dsub>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	f7f6 fbb4 	bl	8000608 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	4948      	ldr	r1, [pc, #288]	@ (8009fc8 <__ieee754_pow+0x418>)
 8009ea8:	f7f6 f9f6 	bl	8000298 <__aeabi_dsub>
 8009eac:	4622      	mov	r2, r4
 8009eae:	4680      	mov	r8, r0
 8009eb0:	4689      	mov	r9, r1
 8009eb2:	462b      	mov	r3, r5
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f7f6 fba6 	bl	8000608 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	f7f6 fba0 	bl	8000608 <__aeabi_dmul>
 8009ec8:	a33b      	add	r3, pc, #236	@ (adr r3, 8009fb8 <__ieee754_pow+0x408>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 fb9b 	bl	8000608 <__aeabi_dmul>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	4659      	mov	r1, fp
 8009eda:	f7f6 f9dd 	bl	8000298 <__aeabi_dsub>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	4689      	mov	r9, r1
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 f9d7 	bl	800029c <__adddf3>
 8009eee:	2400      	movs	r4, #0
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	463b      	mov	r3, r7
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	f7f6 f9ce 	bl	8000298 <__aeabi_dsub>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7f6 f9c8 	bl	8000298 <__aeabi_dsub>
 8009f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f10:	2300      	movs	r3, #0
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009f18:	4606      	mov	r6, r0
 8009f1a:	460f      	mov	r7, r1
 8009f1c:	4652      	mov	r2, sl
 8009f1e:	465b      	mov	r3, fp
 8009f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f24:	f7f6 f9b8 	bl	8000298 <__aeabi_dsub>
 8009f28:	4622      	mov	r2, r4
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	f7f6 fb6c 	bl	8000608 <__aeabi_dmul>
 8009f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f34:	4680      	mov	r8, r0
 8009f36:	4689      	mov	r9, r1
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fb64 	bl	8000608 <__aeabi_dmul>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4640      	mov	r0, r8
 8009f46:	4649      	mov	r1, r9
 8009f48:	f7f6 f9a8 	bl	800029c <__adddf3>
 8009f4c:	4652      	mov	r2, sl
 8009f4e:	465b      	mov	r3, fp
 8009f50:	4606      	mov	r6, r0
 8009f52:	460f      	mov	r7, r1
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 fb56 	bl	8000608 <__aeabi_dmul>
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4602      	mov	r2, r0
 8009f60:	4680      	mov	r8, r0
 8009f62:	4689      	mov	r9, r1
 8009f64:	4630      	mov	r0, r6
 8009f66:	4639      	mov	r1, r7
 8009f68:	f7f6 f998 	bl	800029c <__adddf3>
 8009f6c:	4b17      	ldr	r3, [pc, #92]	@ (8009fcc <__ieee754_pow+0x41c>)
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	4604      	mov	r4, r0
 8009f72:	460d      	mov	r5, r1
 8009f74:	468a      	mov	sl, r1
 8009f76:	468b      	mov	fp, r1
 8009f78:	f340 82ef 	ble.w	800a55a <__ieee754_pow+0x9aa>
 8009f7c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009f80:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009f84:	4303      	orrs	r3, r0
 8009f86:	f000 81e8 	beq.w	800a35a <__ieee754_pow+0x7aa>
 8009f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2300      	movs	r3, #0
 8009f92:	f7f6 fdab 	bl	8000aec <__aeabi_dcmplt>
 8009f96:	3800      	subs	r0, #0
 8009f98:	bf18      	it	ne
 8009f9a:	2001      	movne	r0, #1
 8009f9c:	e710      	b.n	8009dc0 <__ieee754_pow+0x210>
 8009f9e:	bf00      	nop
 8009fa0:	60000000 	.word	0x60000000
 8009fa4:	3ff71547 	.word	0x3ff71547
 8009fa8:	f85ddf44 	.word	0xf85ddf44
 8009fac:	3e54ae0b 	.word	0x3e54ae0b
 8009fb0:	55555555 	.word	0x55555555
 8009fb4:	3fd55555 	.word	0x3fd55555
 8009fb8:	652b82fe 	.word	0x652b82fe
 8009fbc:	3ff71547 	.word	0x3ff71547
 8009fc0:	3ff00000 	.word	0x3ff00000
 8009fc4:	3fd00000 	.word	0x3fd00000
 8009fc8:	3fe00000 	.word	0x3fe00000
 8009fcc:	408fffff 	.word	0x408fffff
 8009fd0:	4bd5      	ldr	r3, [pc, #852]	@ (800a328 <__ieee754_pow+0x778>)
 8009fd2:	402b      	ands	r3, r5
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	b92b      	cbnz	r3, 8009fe4 <__ieee754_pow+0x434>
 8009fd8:	4bd4      	ldr	r3, [pc, #848]	@ (800a32c <__ieee754_pow+0x77c>)
 8009fda:	f7f6 fb15 	bl	8000608 <__aeabi_dmul>
 8009fde:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009fe2:	468b      	mov	fp, r1
 8009fe4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009fe8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009fec:	4413      	add	r3, r2
 8009fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff0:	4bcf      	ldr	r3, [pc, #828]	@ (800a330 <__ieee754_pow+0x780>)
 8009ff2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009ff6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009ffa:	459b      	cmp	fp, r3
 8009ffc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a000:	dd08      	ble.n	800a014 <__ieee754_pow+0x464>
 800a002:	4bcc      	ldr	r3, [pc, #816]	@ (800a334 <__ieee754_pow+0x784>)
 800a004:	459b      	cmp	fp, r3
 800a006:	f340 81a5 	ble.w	800a354 <__ieee754_pow+0x7a4>
 800a00a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a00c:	3301      	adds	r3, #1
 800a00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a010:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a014:	f04f 0a00 	mov.w	sl, #0
 800a018:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a01c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a01e:	4bc6      	ldr	r3, [pc, #792]	@ (800a338 <__ieee754_pow+0x788>)
 800a020:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a024:	ed93 7b00 	vldr	d7, [r3]
 800a028:	4629      	mov	r1, r5
 800a02a:	ec53 2b17 	vmov	r2, r3, d7
 800a02e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a032:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a036:	f7f6 f92f 	bl	8000298 <__aeabi_dsub>
 800a03a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a046:	f7f6 f929 	bl	800029c <__adddf3>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	2000      	movs	r0, #0
 800a050:	49ba      	ldr	r1, [pc, #744]	@ (800a33c <__ieee754_pow+0x78c>)
 800a052:	f7f6 fc03 	bl	800085c <__aeabi_ddiv>
 800a056:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 fad1 	bl	8000608 <__aeabi_dmul>
 800a066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a06a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a06e:	106d      	asrs	r5, r5, #1
 800a070:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a074:	f04f 0b00 	mov.w	fp, #0
 800a078:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a07c:	4661      	mov	r1, ip
 800a07e:	2200      	movs	r2, #0
 800a080:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a084:	4658      	mov	r0, fp
 800a086:	46e1      	mov	r9, ip
 800a088:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a08c:	4614      	mov	r4, r2
 800a08e:	461d      	mov	r5, r3
 800a090:	f7f6 faba 	bl	8000608 <__aeabi_dmul>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4630      	mov	r0, r6
 800a09a:	4639      	mov	r1, r7
 800a09c:	f7f6 f8fc 	bl	8000298 <__aeabi_dsub>
 800a0a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	f7f6 f8f4 	bl	8000298 <__aeabi_dsub>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0b8:	f7f6 f8ee 	bl	8000298 <__aeabi_dsub>
 800a0bc:	465a      	mov	r2, fp
 800a0be:	464b      	mov	r3, r9
 800a0c0:	f7f6 faa2 	bl	8000608 <__aeabi_dmul>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 f8e4 	bl	8000298 <__aeabi_dsub>
 800a0d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0d4:	f7f6 fa98 	bl	8000608 <__aeabi_dmul>
 800a0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	f7f6 fa90 	bl	8000608 <__aeabi_dmul>
 800a0e8:	a37d      	add	r3, pc, #500	@ (adr r3, 800a2e0 <__ieee754_pow+0x730>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	f7f6 fa89 	bl	8000608 <__aeabi_dmul>
 800a0f6:	a37c      	add	r3, pc, #496	@ (adr r3, 800a2e8 <__ieee754_pow+0x738>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	f7f6 f8ce 	bl	800029c <__adddf3>
 800a100:	4622      	mov	r2, r4
 800a102:	462b      	mov	r3, r5
 800a104:	f7f6 fa80 	bl	8000608 <__aeabi_dmul>
 800a108:	a379      	add	r3, pc, #484	@ (adr r3, 800a2f0 <__ieee754_pow+0x740>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 f8c5 	bl	800029c <__adddf3>
 800a112:	4622      	mov	r2, r4
 800a114:	462b      	mov	r3, r5
 800a116:	f7f6 fa77 	bl	8000608 <__aeabi_dmul>
 800a11a:	a377      	add	r3, pc, #476	@ (adr r3, 800a2f8 <__ieee754_pow+0x748>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f7f6 f8bc 	bl	800029c <__adddf3>
 800a124:	4622      	mov	r2, r4
 800a126:	462b      	mov	r3, r5
 800a128:	f7f6 fa6e 	bl	8000608 <__aeabi_dmul>
 800a12c:	a374      	add	r3, pc, #464	@ (adr r3, 800a300 <__ieee754_pow+0x750>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 f8b3 	bl	800029c <__adddf3>
 800a136:	4622      	mov	r2, r4
 800a138:	462b      	mov	r3, r5
 800a13a:	f7f6 fa65 	bl	8000608 <__aeabi_dmul>
 800a13e:	a372      	add	r3, pc, #456	@ (adr r3, 800a308 <__ieee754_pow+0x758>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	f7f6 f8aa 	bl	800029c <__adddf3>
 800a148:	4622      	mov	r2, r4
 800a14a:	4606      	mov	r6, r0
 800a14c:	460f      	mov	r7, r1
 800a14e:	462b      	mov	r3, r5
 800a150:	4620      	mov	r0, r4
 800a152:	4629      	mov	r1, r5
 800a154:	f7f6 fa58 	bl	8000608 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 fa52 	bl	8000608 <__aeabi_dmul>
 800a164:	465a      	mov	r2, fp
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	464b      	mov	r3, r9
 800a16c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a170:	f7f6 f894 	bl	800029c <__adddf3>
 800a174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a178:	f7f6 fa46 	bl	8000608 <__aeabi_dmul>
 800a17c:	4622      	mov	r2, r4
 800a17e:	462b      	mov	r3, r5
 800a180:	f7f6 f88c 	bl	800029c <__adddf3>
 800a184:	465a      	mov	r2, fp
 800a186:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a18a:	464b      	mov	r3, r9
 800a18c:	4658      	mov	r0, fp
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 fa3a 	bl	8000608 <__aeabi_dmul>
 800a194:	4b6a      	ldr	r3, [pc, #424]	@ (800a340 <__ieee754_pow+0x790>)
 800a196:	2200      	movs	r2, #0
 800a198:	4606      	mov	r6, r0
 800a19a:	460f      	mov	r7, r1
 800a19c:	f7f6 f87e 	bl	800029c <__adddf3>
 800a1a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1a4:	f7f6 f87a 	bl	800029c <__adddf3>
 800a1a8:	46d8      	mov	r8, fp
 800a1aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	465a      	mov	r2, fp
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a1bc:	f7f6 fa24 	bl	8000608 <__aeabi_dmul>
 800a1c0:	465c      	mov	r4, fp
 800a1c2:	4680      	mov	r8, r0
 800a1c4:	4689      	mov	r9, r1
 800a1c6:	4b5e      	ldr	r3, [pc, #376]	@ (800a340 <__ieee754_pow+0x790>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	f7f6 f863 	bl	8000298 <__aeabi_dsub>
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	f7f6 f85f 	bl	8000298 <__aeabi_dsub>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1e2:	f7f6 f859 	bl	8000298 <__aeabi_dsub>
 800a1e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1ea:	f7f6 fa0d 	bl	8000608 <__aeabi_dmul>
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	460f      	mov	r7, r1
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1fa:	f7f6 fa05 	bl	8000608 <__aeabi_dmul>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4630      	mov	r0, r6
 800a204:	4639      	mov	r1, r7
 800a206:	f7f6 f849 	bl	800029c <__adddf3>
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4640      	mov	r0, r8
 800a214:	4649      	mov	r1, r9
 800a216:	f7f6 f841 	bl	800029c <__adddf3>
 800a21a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a21e:	a33c      	add	r3, pc, #240	@ (adr r3, 800a310 <__ieee754_pow+0x760>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	4658      	mov	r0, fp
 800a226:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a22a:	460d      	mov	r5, r1
 800a22c:	f7f6 f9ec 	bl	8000608 <__aeabi_dmul>
 800a230:	465c      	mov	r4, fp
 800a232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a236:	4642      	mov	r2, r8
 800a238:	464b      	mov	r3, r9
 800a23a:	4620      	mov	r0, r4
 800a23c:	4629      	mov	r1, r5
 800a23e:	f7f6 f82b 	bl	8000298 <__aeabi_dsub>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4630      	mov	r0, r6
 800a248:	4639      	mov	r1, r7
 800a24a:	f7f6 f825 	bl	8000298 <__aeabi_dsub>
 800a24e:	a332      	add	r3, pc, #200	@ (adr r3, 800a318 <__ieee754_pow+0x768>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f6 f9d8 	bl	8000608 <__aeabi_dmul>
 800a258:	a331      	add	r3, pc, #196	@ (adr r3, 800a320 <__ieee754_pow+0x770>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	4606      	mov	r6, r0
 800a260:	460f      	mov	r7, r1
 800a262:	4620      	mov	r0, r4
 800a264:	4629      	mov	r1, r5
 800a266:	f7f6 f9cf 	bl	8000608 <__aeabi_dmul>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4630      	mov	r0, r6
 800a270:	4639      	mov	r1, r7
 800a272:	f7f6 f813 	bl	800029c <__adddf3>
 800a276:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a278:	4b32      	ldr	r3, [pc, #200]	@ (800a344 <__ieee754_pow+0x794>)
 800a27a:	4413      	add	r3, r2
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f7f6 f80c 	bl	800029c <__adddf3>
 800a284:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a28a:	f7f6 f953 	bl	8000534 <__aeabi_i2d>
 800a28e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a290:	4b2d      	ldr	r3, [pc, #180]	@ (800a348 <__ieee754_pow+0x798>)
 800a292:	4413      	add	r3, r2
 800a294:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a298:	4606      	mov	r6, r0
 800a29a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a29e:	460f      	mov	r7, r1
 800a2a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2a4:	f7f5 fffa 	bl	800029c <__adddf3>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	f7f5 fff6 	bl	800029c <__adddf3>
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	463b      	mov	r3, r7
 800a2b4:	f7f5 fff2 	bl	800029c <__adddf3>
 800a2b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	4658      	mov	r0, fp
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	f7f5 ffe8 	bl	8000298 <__aeabi_dsub>
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	f7f5 ffe4 	bl	8000298 <__aeabi_dsub>
 800a2d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2d4:	f7f5 ffe0 	bl	8000298 <__aeabi_dsub>
 800a2d8:	465c      	mov	r4, fp
 800a2da:	4602      	mov	r2, r0
 800a2dc:	e036      	b.n	800a34c <__ieee754_pow+0x79c>
 800a2de:	bf00      	nop
 800a2e0:	4a454eef 	.word	0x4a454eef
 800a2e4:	3fca7e28 	.word	0x3fca7e28
 800a2e8:	93c9db65 	.word	0x93c9db65
 800a2ec:	3fcd864a 	.word	0x3fcd864a
 800a2f0:	a91d4101 	.word	0xa91d4101
 800a2f4:	3fd17460 	.word	0x3fd17460
 800a2f8:	518f264d 	.word	0x518f264d
 800a2fc:	3fd55555 	.word	0x3fd55555
 800a300:	db6fabff 	.word	0xdb6fabff
 800a304:	3fdb6db6 	.word	0x3fdb6db6
 800a308:	33333303 	.word	0x33333303
 800a30c:	3fe33333 	.word	0x3fe33333
 800a310:	e0000000 	.word	0xe0000000
 800a314:	3feec709 	.word	0x3feec709
 800a318:	dc3a03fd 	.word	0xdc3a03fd
 800a31c:	3feec709 	.word	0x3feec709
 800a320:	145b01f5 	.word	0x145b01f5
 800a324:	be3e2fe0 	.word	0xbe3e2fe0
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	43400000 	.word	0x43400000
 800a330:	0003988e 	.word	0x0003988e
 800a334:	000bb679 	.word	0x000bb679
 800a338:	0800ae18 	.word	0x0800ae18
 800a33c:	3ff00000 	.word	0x3ff00000
 800a340:	40080000 	.word	0x40080000
 800a344:	0800adf8 	.word	0x0800adf8
 800a348:	0800ae08 	.word	0x0800ae08
 800a34c:	460b      	mov	r3, r1
 800a34e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a352:	e5d7      	b.n	8009f04 <__ieee754_pow+0x354>
 800a354:	f04f 0a01 	mov.w	sl, #1
 800a358:	e65e      	b.n	800a018 <__ieee754_pow+0x468>
 800a35a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a62c <__ieee754_pow+0xa7c>)
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f7f5 ff9a 	bl	800029c <__adddf3>
 800a368:	4642      	mov	r2, r8
 800a36a:	e9cd 0100 	strd	r0, r1, [sp]
 800a36e:	464b      	mov	r3, r9
 800a370:	4620      	mov	r0, r4
 800a372:	4629      	mov	r1, r5
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a380:	f7f6 fbd2 	bl	8000b28 <__aeabi_dcmpgt>
 800a384:	2800      	cmp	r0, #0
 800a386:	f47f ae00 	bne.w	8009f8a <__ieee754_pow+0x3da>
 800a38a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a38e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a392:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a396:	fa43 fa0a 	asr.w	sl, r3, sl
 800a39a:	44da      	add	sl, fp
 800a39c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a3a0:	489d      	ldr	r0, [pc, #628]	@ (800a618 <__ieee754_pow+0xa68>)
 800a3a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a3a6:	4108      	asrs	r0, r1
 800a3a8:	ea00 030a 	and.w	r3, r0, sl
 800a3ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a3b0:	f1c1 0114 	rsb	r1, r1, #20
 800a3b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a3b8:	fa4a fa01 	asr.w	sl, sl, r1
 800a3bc:	f1bb 0f00 	cmp.w	fp, #0
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	bfb8      	it	lt
 800a3ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800a3ce:	f7f5 ff63 	bl	8000298 <__aeabi_dsub>
 800a3d2:	4680      	mov	r8, r0
 800a3d4:	4689      	mov	r9, r1
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	463b      	mov	r3, r7
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	f7f5 ff5d 	bl	800029c <__adddf3>
 800a3e2:	2400      	movs	r4, #0
 800a3e4:	a37c      	add	r3, pc, #496	@ (adr r3, 800a5d8 <__ieee754_pow+0xa28>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	f7f6 f90b 	bl	8000608 <__aeabi_dmul>
 800a3f2:	4642      	mov	r2, r8
 800a3f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7f5 ff4b 	bl	8000298 <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4630      	mov	r0, r6
 800a408:	4639      	mov	r1, r7
 800a40a:	f7f5 ff45 	bl	8000298 <__aeabi_dsub>
 800a40e:	a374      	add	r3, pc, #464	@ (adr r3, 800a5e0 <__ieee754_pow+0xa30>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f7f6 f8f8 	bl	8000608 <__aeabi_dmul>
 800a418:	a373      	add	r3, pc, #460	@ (adr r3, 800a5e8 <__ieee754_pow+0xa38>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	4680      	mov	r8, r0
 800a420:	4689      	mov	r9, r1
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	f7f6 f8ef 	bl	8000608 <__aeabi_dmul>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	f7f5 ff33 	bl	800029c <__adddf3>
 800a436:	4604      	mov	r4, r0
 800a438:	460d      	mov	r5, r1
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a442:	f7f5 ff2b 	bl	800029c <__adddf3>
 800a446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a44a:	4680      	mov	r8, r0
 800a44c:	4689      	mov	r9, r1
 800a44e:	f7f5 ff23 	bl	8000298 <__aeabi_dsub>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4620      	mov	r0, r4
 800a458:	4629      	mov	r1, r5
 800a45a:	f7f5 ff1d 	bl	8000298 <__aeabi_dsub>
 800a45e:	4642      	mov	r2, r8
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	464b      	mov	r3, r9
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f6 f8cd 	bl	8000608 <__aeabi_dmul>
 800a46e:	a360      	add	r3, pc, #384	@ (adr r3, 800a5f0 <__ieee754_pow+0xa40>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	4604      	mov	r4, r0
 800a476:	460d      	mov	r5, r1
 800a478:	f7f6 f8c6 	bl	8000608 <__aeabi_dmul>
 800a47c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a5f8 <__ieee754_pow+0xa48>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f7f5 ff09 	bl	8000298 <__aeabi_dsub>
 800a486:	4622      	mov	r2, r4
 800a488:	462b      	mov	r3, r5
 800a48a:	f7f6 f8bd 	bl	8000608 <__aeabi_dmul>
 800a48e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a600 <__ieee754_pow+0xa50>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f5 ff02 	bl	800029c <__adddf3>
 800a498:	4622      	mov	r2, r4
 800a49a:	462b      	mov	r3, r5
 800a49c:	f7f6 f8b4 	bl	8000608 <__aeabi_dmul>
 800a4a0:	a359      	add	r3, pc, #356	@ (adr r3, 800a608 <__ieee754_pow+0xa58>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	f7f5 fef7 	bl	8000298 <__aeabi_dsub>
 800a4aa:	4622      	mov	r2, r4
 800a4ac:	462b      	mov	r3, r5
 800a4ae:	f7f6 f8ab 	bl	8000608 <__aeabi_dmul>
 800a4b2:	a357      	add	r3, pc, #348	@ (adr r3, 800a610 <__ieee754_pow+0xa60>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f5 fef0 	bl	800029c <__adddf3>
 800a4bc:	4622      	mov	r2, r4
 800a4be:	462b      	mov	r3, r5
 800a4c0:	f7f6 f8a2 	bl	8000608 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	f7f5 fee4 	bl	8000298 <__aeabi_dsub>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4649      	mov	r1, r9
 800a4dc:	f7f6 f894 	bl	8000608 <__aeabi_dmul>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	e9cd 0100 	strd	r0, r1, [sp]
 800a4e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f7f5 fed3 	bl	8000298 <__aeabi_dsub>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4fa:	f7f6 f9af 	bl	800085c <__aeabi_ddiv>
 800a4fe:	4632      	mov	r2, r6
 800a500:	4604      	mov	r4, r0
 800a502:	460d      	mov	r5, r1
 800a504:	463b      	mov	r3, r7
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f6 f87d 	bl	8000608 <__aeabi_dmul>
 800a50e:	4632      	mov	r2, r6
 800a510:	463b      	mov	r3, r7
 800a512:	f7f5 fec3 	bl	800029c <__adddf3>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4620      	mov	r0, r4
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7f5 febb 	bl	8000298 <__aeabi_dsub>
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	f7f5 feb7 	bl	8000298 <__aeabi_dsub>
 800a52a:	460b      	mov	r3, r1
 800a52c:	4602      	mov	r2, r0
 800a52e:	493b      	ldr	r1, [pc, #236]	@ (800a61c <__ieee754_pow+0xa6c>)
 800a530:	2000      	movs	r0, #0
 800a532:	f7f5 feb1 	bl	8000298 <__aeabi_dsub>
 800a536:	ec41 0b10 	vmov	d0, r0, r1
 800a53a:	ee10 3a90 	vmov	r3, s1
 800a53e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a546:	da30      	bge.n	800a5aa <__ieee754_pow+0x9fa>
 800a548:	4650      	mov	r0, sl
 800a54a:	f000 f87d 	bl	800a648 <scalbn>
 800a54e:	ec51 0b10 	vmov	r0, r1, d0
 800a552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a556:	f7ff bbd2 	b.w	8009cfe <__ieee754_pow+0x14e>
 800a55a:	4c31      	ldr	r4, [pc, #196]	@ (800a620 <__ieee754_pow+0xa70>)
 800a55c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a560:	42a3      	cmp	r3, r4
 800a562:	d91a      	bls.n	800a59a <__ieee754_pow+0x9ea>
 800a564:	4b2f      	ldr	r3, [pc, #188]	@ (800a624 <__ieee754_pow+0xa74>)
 800a566:	440b      	add	r3, r1
 800a568:	4303      	orrs	r3, r0
 800a56a:	d009      	beq.n	800a580 <__ieee754_pow+0x9d0>
 800a56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a570:	2200      	movs	r2, #0
 800a572:	2300      	movs	r3, #0
 800a574:	f7f6 faba 	bl	8000aec <__aeabi_dcmplt>
 800a578:	3800      	subs	r0, #0
 800a57a:	bf18      	it	ne
 800a57c:	2001      	movne	r0, #1
 800a57e:	e42b      	b.n	8009dd8 <__ieee754_pow+0x228>
 800a580:	4642      	mov	r2, r8
 800a582:	464b      	mov	r3, r9
 800a584:	f7f5 fe88 	bl	8000298 <__aeabi_dsub>
 800a588:	4632      	mov	r2, r6
 800a58a:	463b      	mov	r3, r7
 800a58c:	f7f6 fac2 	bl	8000b14 <__aeabi_dcmpge>
 800a590:	2800      	cmp	r0, #0
 800a592:	d1eb      	bne.n	800a56c <__ieee754_pow+0x9bc>
 800a594:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a634 <__ieee754_pow+0xa84>
 800a598:	e6f7      	b.n	800a38a <__ieee754_pow+0x7da>
 800a59a:	469a      	mov	sl, r3
 800a59c:	4b22      	ldr	r3, [pc, #136]	@ (800a628 <__ieee754_pow+0xa78>)
 800a59e:	459a      	cmp	sl, r3
 800a5a0:	f63f aef3 	bhi.w	800a38a <__ieee754_pow+0x7da>
 800a5a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a5a8:	e715      	b.n	800a3d6 <__ieee754_pow+0x826>
 800a5aa:	ec51 0b10 	vmov	r0, r1, d0
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	e7cf      	b.n	800a552 <__ieee754_pow+0x9a2>
 800a5b2:	491a      	ldr	r1, [pc, #104]	@ (800a61c <__ieee754_pow+0xa6c>)
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	f7ff bb18 	b.w	8009bea <__ieee754_pow+0x3a>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	2100      	movs	r1, #0
 800a5be:	f7ff bb14 	b.w	8009bea <__ieee754_pow+0x3a>
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	f7ff bb10 	b.w	8009bea <__ieee754_pow+0x3a>
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	f7ff bb5e 	b.w	8009c8c <__ieee754_pow+0xdc>
 800a5d0:	2400      	movs	r4, #0
 800a5d2:	f7ff bb49 	b.w	8009c68 <__ieee754_pow+0xb8>
 800a5d6:	bf00      	nop
 800a5d8:	00000000 	.word	0x00000000
 800a5dc:	3fe62e43 	.word	0x3fe62e43
 800a5e0:	fefa39ef 	.word	0xfefa39ef
 800a5e4:	3fe62e42 	.word	0x3fe62e42
 800a5e8:	0ca86c39 	.word	0x0ca86c39
 800a5ec:	be205c61 	.word	0xbe205c61
 800a5f0:	72bea4d0 	.word	0x72bea4d0
 800a5f4:	3e663769 	.word	0x3e663769
 800a5f8:	c5d26bf1 	.word	0xc5d26bf1
 800a5fc:	3ebbbd41 	.word	0x3ebbbd41
 800a600:	af25de2c 	.word	0xaf25de2c
 800a604:	3f11566a 	.word	0x3f11566a
 800a608:	16bebd93 	.word	0x16bebd93
 800a60c:	3f66c16c 	.word	0x3f66c16c
 800a610:	5555553e 	.word	0x5555553e
 800a614:	3fc55555 	.word	0x3fc55555
 800a618:	fff00000 	.word	0xfff00000
 800a61c:	3ff00000 	.word	0x3ff00000
 800a620:	4090cbff 	.word	0x4090cbff
 800a624:	3f6f3400 	.word	0x3f6f3400
 800a628:	3fe00000 	.word	0x3fe00000
 800a62c:	652b82fe 	.word	0x652b82fe
 800a630:	3c971547 	.word	0x3c971547
 800a634:	4090cc00 	.word	0x4090cc00

0800a638 <fabs>:
 800a638:	ec51 0b10 	vmov	r0, r1, d0
 800a63c:	4602      	mov	r2, r0
 800a63e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a642:	ec43 2b10 	vmov	d0, r2, r3
 800a646:	4770      	bx	lr

0800a648 <scalbn>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	ec55 4b10 	vmov	r4, r5, d0
 800a64e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a652:	4606      	mov	r6, r0
 800a654:	462b      	mov	r3, r5
 800a656:	b991      	cbnz	r1, 800a67e <scalbn+0x36>
 800a658:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a65c:	4323      	orrs	r3, r4
 800a65e:	d03d      	beq.n	800a6dc <scalbn+0x94>
 800a660:	4b35      	ldr	r3, [pc, #212]	@ (800a738 <scalbn+0xf0>)
 800a662:	4620      	mov	r0, r4
 800a664:	4629      	mov	r1, r5
 800a666:	2200      	movs	r2, #0
 800a668:	f7f5 ffce 	bl	8000608 <__aeabi_dmul>
 800a66c:	4b33      	ldr	r3, [pc, #204]	@ (800a73c <scalbn+0xf4>)
 800a66e:	429e      	cmp	r6, r3
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	da0f      	bge.n	800a696 <scalbn+0x4e>
 800a676:	a328      	add	r3, pc, #160	@ (adr r3, 800a718 <scalbn+0xd0>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	e01e      	b.n	800a6bc <scalbn+0x74>
 800a67e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a682:	4291      	cmp	r1, r2
 800a684:	d10b      	bne.n	800a69e <scalbn+0x56>
 800a686:	4622      	mov	r2, r4
 800a688:	4620      	mov	r0, r4
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7f5 fe06 	bl	800029c <__adddf3>
 800a690:	4604      	mov	r4, r0
 800a692:	460d      	mov	r5, r1
 800a694:	e022      	b.n	800a6dc <scalbn+0x94>
 800a696:	460b      	mov	r3, r1
 800a698:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a69c:	3936      	subs	r1, #54	@ 0x36
 800a69e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a6a2:	4296      	cmp	r6, r2
 800a6a4:	dd0d      	ble.n	800a6c2 <scalbn+0x7a>
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a720 <scalbn+0xd8>)
 800a6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ae:	da02      	bge.n	800a6b6 <scalbn+0x6e>
 800a6b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a728 <scalbn+0xe0>)
 800a6b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b6:	a31a      	add	r3, pc, #104	@ (adr r3, 800a720 <scalbn+0xd8>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f7f5 ffa4 	bl	8000608 <__aeabi_dmul>
 800a6c0:	e7e6      	b.n	800a690 <scalbn+0x48>
 800a6c2:	1872      	adds	r2, r6, r1
 800a6c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a6c8:	428a      	cmp	r2, r1
 800a6ca:	dcec      	bgt.n	800a6a6 <scalbn+0x5e>
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	dd08      	ble.n	800a6e2 <scalbn+0x9a>
 800a6d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a6d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a6d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6dc:	ec45 4b10 	vmov	d0, r4, r5
 800a6e0:	bd70      	pop	{r4, r5, r6, pc}
 800a6e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a6e6:	da08      	bge.n	800a6fa <scalbn+0xb2>
 800a6e8:	2d00      	cmp	r5, #0
 800a6ea:	a10b      	add	r1, pc, #44	@ (adr r1, 800a718 <scalbn+0xd0>)
 800a6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f0:	dac1      	bge.n	800a676 <scalbn+0x2e>
 800a6f2:	a10f      	add	r1, pc, #60	@ (adr r1, 800a730 <scalbn+0xe8>)
 800a6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f8:	e7bd      	b.n	800a676 <scalbn+0x2e>
 800a6fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a6fe:	3236      	adds	r2, #54	@ 0x36
 800a700:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a704:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a708:	4620      	mov	r0, r4
 800a70a:	4b0d      	ldr	r3, [pc, #52]	@ (800a740 <scalbn+0xf8>)
 800a70c:	4629      	mov	r1, r5
 800a70e:	2200      	movs	r2, #0
 800a710:	e7d4      	b.n	800a6bc <scalbn+0x74>
 800a712:	bf00      	nop
 800a714:	f3af 8000 	nop.w
 800a718:	c2f8f359 	.word	0xc2f8f359
 800a71c:	01a56e1f 	.word	0x01a56e1f
 800a720:	8800759c 	.word	0x8800759c
 800a724:	7e37e43c 	.word	0x7e37e43c
 800a728:	8800759c 	.word	0x8800759c
 800a72c:	fe37e43c 	.word	0xfe37e43c
 800a730:	c2f8f359 	.word	0xc2f8f359
 800a734:	81a56e1f 	.word	0x81a56e1f
 800a738:	43500000 	.word	0x43500000
 800a73c:	ffff3cb0 	.word	0xffff3cb0
 800a740:	3c900000 	.word	0x3c900000

0800a744 <with_errno>:
 800a744:	b510      	push	{r4, lr}
 800a746:	ed2d 8b02 	vpush	{d8}
 800a74a:	eeb0 8a40 	vmov.f32	s16, s0
 800a74e:	eef0 8a60 	vmov.f32	s17, s1
 800a752:	4604      	mov	r4, r0
 800a754:	f7fb fe2c 	bl	80063b0 <__errno>
 800a758:	eeb0 0a48 	vmov.f32	s0, s16
 800a75c:	eef0 0a68 	vmov.f32	s1, s17
 800a760:	ecbd 8b02 	vpop	{d8}
 800a764:	6004      	str	r4, [r0, #0]
 800a766:	bd10      	pop	{r4, pc}

0800a768 <xflow>:
 800a768:	4603      	mov	r3, r0
 800a76a:	b507      	push	{r0, r1, r2, lr}
 800a76c:	ec51 0b10 	vmov	r0, r1, d0
 800a770:	b183      	cbz	r3, 800a794 <xflow+0x2c>
 800a772:	4602      	mov	r2, r0
 800a774:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a778:	e9cd 2300 	strd	r2, r3, [sp]
 800a77c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a780:	f7f5 ff42 	bl	8000608 <__aeabi_dmul>
 800a784:	ec41 0b10 	vmov	d0, r0, r1
 800a788:	2022      	movs	r0, #34	@ 0x22
 800a78a:	b003      	add	sp, #12
 800a78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a790:	f7ff bfd8 	b.w	800a744 <with_errno>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	e7ee      	b.n	800a778 <xflow+0x10>
 800a79a:	0000      	movs	r0, r0
 800a79c:	0000      	movs	r0, r0
	...

0800a7a0 <__math_uflow>:
 800a7a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a7a8 <__math_uflow+0x8>
 800a7a4:	f7ff bfe0 	b.w	800a768 <xflow>
 800a7a8:	00000000 	.word	0x00000000
 800a7ac:	10000000 	.word	0x10000000

0800a7b0 <__math_oflow>:
 800a7b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a7b8 <__math_oflow+0x8>
 800a7b4:	f7ff bfd8 	b.w	800a768 <xflow>
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	70000000 	.word	0x70000000

0800a7c0 <__ieee754_sqrt>:
 800a7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	4a68      	ldr	r2, [pc, #416]	@ (800a968 <__ieee754_sqrt+0x1a8>)
 800a7c6:	ec55 4b10 	vmov	r4, r5, d0
 800a7ca:	43aa      	bics	r2, r5
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	d110      	bne.n	800a7f4 <__ieee754_sqrt+0x34>
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7f5 ff16 	bl	8000608 <__aeabi_dmul>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7f5 fd5a 	bl	800029c <__adddf3>
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	ec45 4b10 	vmov	d0, r4, r5
 800a7f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	dc0e      	bgt.n	800a816 <__ieee754_sqrt+0x56>
 800a7f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a7fc:	4322      	orrs	r2, r4
 800a7fe:	d0f5      	beq.n	800a7ec <__ieee754_sqrt+0x2c>
 800a800:	b19d      	cbz	r5, 800a82a <__ieee754_sqrt+0x6a>
 800a802:	4622      	mov	r2, r4
 800a804:	4620      	mov	r0, r4
 800a806:	4629      	mov	r1, r5
 800a808:	f7f5 fd46 	bl	8000298 <__aeabi_dsub>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	f7f6 f824 	bl	800085c <__aeabi_ddiv>
 800a814:	e7e8      	b.n	800a7e8 <__ieee754_sqrt+0x28>
 800a816:	152a      	asrs	r2, r5, #20
 800a818:	d115      	bne.n	800a846 <__ieee754_sqrt+0x86>
 800a81a:	2000      	movs	r0, #0
 800a81c:	e009      	b.n	800a832 <__ieee754_sqrt+0x72>
 800a81e:	0acb      	lsrs	r3, r1, #11
 800a820:	3a15      	subs	r2, #21
 800a822:	0549      	lsls	r1, r1, #21
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0fa      	beq.n	800a81e <__ieee754_sqrt+0x5e>
 800a828:	e7f7      	b.n	800a81a <__ieee754_sqrt+0x5a>
 800a82a:	462a      	mov	r2, r5
 800a82c:	e7fa      	b.n	800a824 <__ieee754_sqrt+0x64>
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	3001      	adds	r0, #1
 800a832:	02dc      	lsls	r4, r3, #11
 800a834:	d5fb      	bpl.n	800a82e <__ieee754_sqrt+0x6e>
 800a836:	1e44      	subs	r4, r0, #1
 800a838:	1b12      	subs	r2, r2, r4
 800a83a:	f1c0 0420 	rsb	r4, r0, #32
 800a83e:	fa21 f404 	lsr.w	r4, r1, r4
 800a842:	4323      	orrs	r3, r4
 800a844:	4081      	lsls	r1, r0
 800a846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a84a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a84e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a852:	07d2      	lsls	r2, r2, #31
 800a854:	bf5c      	itt	pl
 800a856:	005b      	lslpl	r3, r3, #1
 800a858:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a85c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a860:	bf58      	it	pl
 800a862:	0049      	lslpl	r1, r1, #1
 800a864:	2600      	movs	r6, #0
 800a866:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a86a:	106d      	asrs	r5, r5, #1
 800a86c:	0049      	lsls	r1, r1, #1
 800a86e:	2016      	movs	r0, #22
 800a870:	4632      	mov	r2, r6
 800a872:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a876:	1917      	adds	r7, r2, r4
 800a878:	429f      	cmp	r7, r3
 800a87a:	bfde      	ittt	le
 800a87c:	193a      	addle	r2, r7, r4
 800a87e:	1bdb      	suble	r3, r3, r7
 800a880:	1936      	addle	r6, r6, r4
 800a882:	0fcf      	lsrs	r7, r1, #31
 800a884:	3801      	subs	r0, #1
 800a886:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a88a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a88e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a892:	d1f0      	bne.n	800a876 <__ieee754_sqrt+0xb6>
 800a894:	4604      	mov	r4, r0
 800a896:	2720      	movs	r7, #32
 800a898:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a89c:	429a      	cmp	r2, r3
 800a89e:	eb00 0e0c 	add.w	lr, r0, ip
 800a8a2:	db02      	blt.n	800a8aa <__ieee754_sqrt+0xea>
 800a8a4:	d113      	bne.n	800a8ce <__ieee754_sqrt+0x10e>
 800a8a6:	458e      	cmp	lr, r1
 800a8a8:	d811      	bhi.n	800a8ce <__ieee754_sqrt+0x10e>
 800a8aa:	f1be 0f00 	cmp.w	lr, #0
 800a8ae:	eb0e 000c 	add.w	r0, lr, ip
 800a8b2:	da42      	bge.n	800a93a <__ieee754_sqrt+0x17a>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	db40      	blt.n	800a93a <__ieee754_sqrt+0x17a>
 800a8b8:	f102 0801 	add.w	r8, r2, #1
 800a8bc:	1a9b      	subs	r3, r3, r2
 800a8be:	458e      	cmp	lr, r1
 800a8c0:	bf88      	it	hi
 800a8c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a8c6:	eba1 010e 	sub.w	r1, r1, lr
 800a8ca:	4464      	add	r4, ip
 800a8cc:	4642      	mov	r2, r8
 800a8ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a8d2:	3f01      	subs	r7, #1
 800a8d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a8d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a8dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a8e0:	d1dc      	bne.n	800a89c <__ieee754_sqrt+0xdc>
 800a8e2:	4319      	orrs	r1, r3
 800a8e4:	d01b      	beq.n	800a91e <__ieee754_sqrt+0x15e>
 800a8e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a96c <__ieee754_sqrt+0x1ac>
 800a8ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a970 <__ieee754_sqrt+0x1b0>
 800a8ee:	e9da 0100 	ldrd	r0, r1, [sl]
 800a8f2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a8f6:	f7f5 fccf 	bl	8000298 <__aeabi_dsub>
 800a8fa:	e9da 8900 	ldrd	r8, r9, [sl]
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f6 f8fb 	bl	8000b00 <__aeabi_dcmple>
 800a90a:	b140      	cbz	r0, 800a91e <__ieee754_sqrt+0x15e>
 800a90c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a910:	e9da 0100 	ldrd	r0, r1, [sl]
 800a914:	e9db 2300 	ldrd	r2, r3, [fp]
 800a918:	d111      	bne.n	800a93e <__ieee754_sqrt+0x17e>
 800a91a:	3601      	adds	r6, #1
 800a91c:	463c      	mov	r4, r7
 800a91e:	1072      	asrs	r2, r6, #1
 800a920:	0863      	lsrs	r3, r4, #1
 800a922:	07f1      	lsls	r1, r6, #31
 800a924:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a928:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a92c:	bf48      	it	mi
 800a92e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a932:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a936:	4618      	mov	r0, r3
 800a938:	e756      	b.n	800a7e8 <__ieee754_sqrt+0x28>
 800a93a:	4690      	mov	r8, r2
 800a93c:	e7be      	b.n	800a8bc <__ieee754_sqrt+0xfc>
 800a93e:	f7f5 fcad 	bl	800029c <__adddf3>
 800a942:	e9da 8900 	ldrd	r8, r9, [sl]
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4640      	mov	r0, r8
 800a94c:	4649      	mov	r1, r9
 800a94e:	f7f6 f8cd 	bl	8000aec <__aeabi_dcmplt>
 800a952:	b120      	cbz	r0, 800a95e <__ieee754_sqrt+0x19e>
 800a954:	1ca0      	adds	r0, r4, #2
 800a956:	bf08      	it	eq
 800a958:	3601      	addeq	r6, #1
 800a95a:	3402      	adds	r4, #2
 800a95c:	e7df      	b.n	800a91e <__ieee754_sqrt+0x15e>
 800a95e:	1c63      	adds	r3, r4, #1
 800a960:	f023 0401 	bic.w	r4, r3, #1
 800a964:	e7db      	b.n	800a91e <__ieee754_sqrt+0x15e>
 800a966:	bf00      	nop
 800a968:	7ff00000 	.word	0x7ff00000
 800a96c:	200001e0 	.word	0x200001e0
 800a970:	200001d8 	.word	0x200001d8

0800a974 <_init>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	bf00      	nop
 800a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97a:	bc08      	pop	{r3}
 800a97c:	469e      	mov	lr, r3
 800a97e:	4770      	bx	lr

0800a980 <_fini>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	bf00      	nop
 800a984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a986:	bc08      	pop	{r3}
 800a988:	469e      	mov	lr, r3
 800a98a:	4770      	bx	lr
