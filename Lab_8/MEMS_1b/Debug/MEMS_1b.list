
MEMS_1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a12c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800a2d0  0800a2d0  0000b2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a760  0800a760  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a760  0800a760  0000b760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a768  0800a768  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a768  0800a768  0000b768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a76c  0800a76c  0000b76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800a770  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001f0  0800a960  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800a960  0000c4cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010218  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219a  00000000  00000000  0001c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  0001f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017571  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001277e  00000000  00000000  00037771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ce4  00000000  00000000  00049eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbbd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058fc  00000000  00000000  000dbc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e1514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2b4 	.word	0x0800a2b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800a2b4 	.word	0x0800a2b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
		{
 8000ff4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff8:	b08c      	sub	sp, #48	@ 0x30
 8000ffa:	af06      	add	r7, sp, #24
 8000ffc:	6078      	str	r0, [r7, #4]

	 	 x = 0;
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
	   	 HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, &MEMS_REGISTER_X, size, timeout);
 8001004:	4b5c      	ldr	r3, [pc, #368]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001006:	8819      	ldrh	r1, [r3, #0]
 8001008:	4b5c      	ldr	r3, [pc, #368]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	4b5c      	ldr	r3, [pc, #368]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	4a5b      	ldr	r2, [pc, #364]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001016:	485c      	ldr	r0, [pc, #368]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001018:	f001 fdc6 	bl	8002ba8 <HAL_I2C_Master_Transmit>
	  	 HAL_I2C_Master_Receive(&hi2c1, MEMS_WR_ADDRESS+1, &x, size, timeout);
 800101c:	4b56      	ldr	r3, [pc, #344]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b299      	uxth	r1, r3
 8001024:	4b55      	ldr	r3, [pc, #340]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	4b55      	ldr	r3, [pc, #340]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4613      	mov	r3, r2
 8001030:	4a50      	ldr	r2, [pc, #320]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001032:	4855      	ldr	r0, [pc, #340]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001034:	f001 feb6 	bl	8002da4 <HAL_I2C_Master_Receive>

	  	 y = 0;
 8001038:	4b54      	ldr	r3, [pc, #336]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	  	 HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, &MEMS_REGISTER_Y, size, timeout);
 800103e:	4b4e      	ldr	r3, [pc, #312]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001040:	8819      	ldrh	r1, [r3, #0]
 8001042:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	4b4e      	ldr	r3, [pc, #312]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	4a50      	ldr	r2, [pc, #320]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001050:	484d      	ldr	r0, [pc, #308]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001052:	f001 fda9 	bl	8002ba8 <HAL_I2C_Master_Transmit>
	  	 HAL_I2C_Master_Receive(&hi2c1, MEMS_WR_ADDRESS+1, &y, size, timeout);
 8001056:	4b48      	ldr	r3, [pc, #288]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	b299      	uxth	r1, r3
 800105e:	4b47      	ldr	r3, [pc, #284]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	4b47      	ldr	r3, [pc, #284]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	4613      	mov	r3, r2
 800106a:	4a48      	ldr	r2, [pc, #288]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800106c:	4846      	ldr	r0, [pc, #280]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800106e:	f001 fe99 	bl	8002da4 <HAL_I2C_Master_Receive>

	  	 z = 0;
 8001072:	4b48      	ldr	r3, [pc, #288]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	  	 HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, &MEMS_REGISTER_Z, size, timeout);
 8001078:	4b3f      	ldr	r3, [pc, #252]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800107a:	8819      	ldrh	r1, [r3, #0]
 800107c:	4b3f      	ldr	r3, [pc, #252]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800107e:	881a      	ldrh	r2, [r3, #0]
 8001080:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4613      	mov	r3, r2
 8001088:	4a43      	ldr	r2, [pc, #268]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800108a:	483f      	ldr	r0, [pc, #252]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800108c:	f001 fd8c 	bl	8002ba8 <HAL_I2C_Master_Transmit>
	  	 HAL_I2C_Master_Receive(&hi2c1, MEMS_WR_ADDRESS+1, &z, size, timeout);
 8001090:	4b39      	ldr	r3, [pc, #228]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b299      	uxth	r1, r3
 8001098:	4b38      	ldr	r3, [pc, #224]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	4613      	mov	r3, r2
 80010a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010a6:	4838      	ldr	r0, [pc, #224]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010a8:	f001 fe7c 	bl	8002da4 <HAL_I2C_Master_Receive>

	  	 float acc_g_x = x / 64.0;
 80010ac:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80010ae:	f993 3000 	ldrsb.w	r3, [r3]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa3e 	bl	8000534 <__aeabi_i2d>
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b37      	ldr	r3, [pc, #220]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010be:	f7ff fbcd 	bl	800085c <__aeabi_ddiv>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fd95 	bl	8000bf8 <__aeabi_d2f>
 80010ce:	4603      	mov	r3, r0
 80010d0:	617b      	str	r3, [r7, #20]
	     float acc_g_y = y / 64.0;
 80010d2:	4b2e      	ldr	r3, [pc, #184]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80010d4:	f993 3000 	ldrsb.w	r3, [r3]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa2b 	bl	8000534 <__aeabi_i2d>
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010e4:	f7ff fbba 	bl	800085c <__aeabi_ddiv>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fd82 	bl	8000bf8 <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	613b      	str	r3, [r7, #16]
	     float acc_g_z = z / 64.0;
 80010f8:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010fa:	f993 3000 	ldrsb.w	r3, [r3]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa18 	bl	8000534 <__aeabi_i2d>
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800110a:	f7ff fba7 	bl	800085c <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fd6f 	bl	8000bf8 <__aeabi_d2f>
 800111a:	4603      	mov	r3, r0
 800111c:	60fb      	str	r3, [r7, #12]

	     string_length = snprintf(string, sizeof(string), "X: %.2f, Y: %.2f, Z: %.2f\n", acc_g_x, acc_g_y, acc_g_z);
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff fa1a 	bl	8000558 <__aeabi_f2d>
 8001124:	4604      	mov	r4, r0
 8001126:	460d      	mov	r5, r1
 8001128:	6938      	ldr	r0, [r7, #16]
 800112a:	f7ff fa15 	bl	8000558 <__aeabi_f2d>
 800112e:	4680      	mov	r8, r0
 8001130:	4689      	mov	r9, r1
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fa10 	bl	8000558 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001140:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001144:	e9cd 4500 	strd	r4, r5, [sp]
 8001148:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800114a:	2120      	movs	r1, #32
 800114c:	4815      	ldr	r0, [pc, #84]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800114e:	f005 fc45 	bl	80069dc <sniprintf>
 8001152:	4603      	mov	r3, r0
 8001154:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001156:	6013      	str	r3, [r2, #0]

	     HAL_UART_Transmit_DMA(&huart2, string, string_length);
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4910      	ldr	r1, [pc, #64]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001162:	4812      	ldr	r0, [pc, #72]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001164:	f003 fcf8 	bl	8004b58 <HAL_UART_Transmit_DMA>
   }
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001172:	bf00      	nop
 8001174:	20000374 	.word	0x20000374
 8001178:	20000000 	.word	0x20000000
 800117c:	20000014 	.word	0x20000014
 8001180:	20000018 	.word	0x20000018
 8001184:	2000000e 	.word	0x2000000e
 8001188:	2000020c 	.word	0x2000020c
 800118c:	20000375 	.word	0x20000375
 8001190:	20000010 	.word	0x20000010
 8001194:	20000376 	.word	0x20000376
 8001198:	20000012 	.word	0x20000012
 800119c:	40500000 	.word	0x40500000
 80011a0:	0800a2d0 	.word	0x0800a2d0
 80011a4:	20000350 	.word	0x20000350
 80011a8:	20000370 	.word	0x20000370
 80011ac:	200002a8 	.word	0x200002a8

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f000 fc8f 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f87f 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f000 f9af 	bl	8001520 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c2:	f000 f98d 	bl	80014e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c6:	f000 f961 	bl	800148c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011ca:	f000 f8e3 	bl	8001394 <MX_I2C1_Init>
  MX_TIM2_Init();
 80011ce:	f000 f90f 	bl	80013f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80011d2:	482c      	ldr	r0, [pc, #176]	@ (8001284 <main+0xd4>)
 80011d4:	f003 f886 	bl	80042e4 <HAL_TIM_Base_Start_IT>

  if(HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK)
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <main+0xd8>)
 80011da:	8819      	ldrh	r1, [r3, #0]
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <main+0xdc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2302      	movs	r3, #2
 80011e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001290 <main+0xe0>)
 80011e6:	482b      	ldr	r0, [pc, #172]	@ (8001294 <main+0xe4>)
 80011e8:	f001 fcde 	bl	8002ba8 <HAL_I2C_Master_Transmit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <main+0x54>
   {
       string_length = snprintf(string, sizeof(string), "LIS2DE found!");
 80011f2:	4a29      	ldr	r2, [pc, #164]	@ (8001298 <main+0xe8>)
 80011f4:	2120      	movs	r1, #32
 80011f6:	4829      	ldr	r0, [pc, #164]	@ (800129c <main+0xec>)
 80011f8:	f005 fbf0 	bl	80069dc <sniprintf>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a28      	ldr	r2, [pc, #160]	@ (80012a0 <main+0xf0>)
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e021      	b.n	8001248 <main+0x98>
   }
   else
   {
       MEMS_WR_ADDRESS = LIS2_WR_ADDRESS;
 8001204:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <main+0xf4>)
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <main+0xd8>)
 800120a:	801a      	strh	r2, [r3, #0]

       if(HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK)
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <main+0xd8>)
 800120e:	8819      	ldrh	r1, [r3, #0]
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <main+0xdc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2302      	movs	r3, #2
 8001218:	4a1d      	ldr	r2, [pc, #116]	@ (8001290 <main+0xe0>)
 800121a:	481e      	ldr	r0, [pc, #120]	@ (8001294 <main+0xe4>)
 800121c:	f001 fcc4 	bl	8002ba8 <HAL_I2C_Master_Transmit>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d108      	bne.n	8001238 <main+0x88>
       {

           string_length = snprintf(string, sizeof(string), "LIS2DE12 found!");
 8001226:	4a20      	ldr	r2, [pc, #128]	@ (80012a8 <main+0xf8>)
 8001228:	2120      	movs	r1, #32
 800122a:	481c      	ldr	r0, [pc, #112]	@ (800129c <main+0xec>)
 800122c:	f005 fbd6 	bl	80069dc <sniprintf>
 8001230:	4603      	mov	r3, r0
 8001232:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <main+0xf0>)
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e007      	b.n	8001248 <main+0x98>
       }
       else
       {
           string_length = snprintf(string, sizeof(string), "Error!");
 8001238:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <main+0xfc>)
 800123a:	2120      	movs	r1, #32
 800123c:	4817      	ldr	r0, [pc, #92]	@ (800129c <main+0xec>)
 800123e:	f005 fbcd 	bl	80069dc <sniprintf>
 8001242:	4603      	mov	r3, r0
 8001244:	4a16      	ldr	r2, [pc, #88]	@ (80012a0 <main+0xf0>)
 8001246:	6013      	str	r3, [r2, #0]
       }
   }

   HAL_UART_Transmit_DMA(&huart2, string, string_length);
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <main+0xf0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	4912      	ldr	r1, [pc, #72]	@ (800129c <main+0xec>)
 8001252:	4817      	ldr	r0, [pc, #92]	@ (80012b0 <main+0x100>)
 8001254:	f003 fc80 	bl	8004b58 <HAL_UART_Transmit_DMA>

   HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG2, sizeof(CTRL_REG2), timeout);
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <main+0xd8>)
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <main+0xdc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <main+0x104>)
 8001266:	480b      	ldr	r0, [pc, #44]	@ (8001294 <main+0xe4>)
 8001268:	f001 fc9e 	bl	8002ba8 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG4, sizeof(CTRL_REG4), timeout);
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <main+0xd8>)
 800126e:	8819      	ldrh	r1, [r3, #0]
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <main+0xdc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <main+0x108>)
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <main+0xe4>)
 800127c:	f001 fc94 	bl	8002ba8 <HAL_I2C_Master_Transmit>

     /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <main+0xd0>
 8001284:	20000260 	.word	0x20000260
 8001288:	20000000 	.word	0x20000000
 800128c:	20000018 	.word	0x20000018
 8001290:	20000004 	.word	0x20000004
 8001294:	2000020c 	.word	0x2000020c
 8001298:	0800a2ec 	.word	0x0800a2ec
 800129c:	20000350 	.word	0x20000350
 80012a0:	20000370 	.word	0x20000370
 80012a4:	20000002 	.word	0x20000002
 80012a8:	0800a2fc 	.word	0x0800a2fc
 80012ac:	0800a30c 	.word	0x0800a30c
 80012b0:	200002a8 	.word	0x200002a8
 80012b4:	20000008 	.word	0x20000008
 80012b8:	2000000c 	.word	0x2000000c

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	@ 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	@ 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fc1d 	bl	8006b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <SystemClock_Config+0xd0>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	4a28      	ldr	r2, [pc, #160]	@ (800138c <SystemClock_Config+0xd0>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f0:	4b26      	ldr	r3, [pc, #152]	@ (800138c <SystemClock_Config+0xd0>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <SystemClock_Config+0xd4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001308:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <SystemClock_Config+0xd4>)
 800130a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <SystemClock_Config+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001320:	2301      	movs	r3, #1
 8001322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001324:	2310      	movs	r3, #16
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001328:	2302      	movs	r3, #2
 800132a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132c:	2300      	movs	r3, #0
 800132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001330:	2310      	movs	r3, #16
 8001332:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001334:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800133a:	2304      	movs	r3, #4
 800133c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800133e:	2307      	movs	r3, #7
 8001340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fae4 	bl	8003914 <HAL_RCC_OscConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001352:	f000 f953 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001356:	230f      	movs	r3, #15
 8001358:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135a:	2302      	movs	r3, #2
 800135c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2102      	movs	r1, #2
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fd46 	bl	8003e04 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800137e:	f000 f93d 	bl	80015fc <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	@ 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_I2C1_Init+0x50>)
 800139a:	4a13      	ldr	r2, [pc, #76]	@ (80013e8 <MX_I2C1_Init+0x54>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <MX_I2C1_Init+0x58>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013d2:	f001 faa5 	bl	8002920 <HAL_I2C_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 f90e 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000020c 	.word	0x2000020c
 80013e8:	40005400 	.word	0x40005400
 80013ec:	000186a0 	.word	0x000186a0

080013f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM2_Init+0x98>)
 800140e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_TIM2_Init+0x98>)
 8001416:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800141a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_TIM2_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10)-1;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_TIM2_Init+0x98>)
 8001424:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001428:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_TIM2_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_TIM2_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001436:	4814      	ldr	r0, [pc, #80]	@ (8001488 <MX_TIM2_Init+0x98>)
 8001438:	f002 ff04 	bl	8004244 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001442:	f000 f8db 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	@ (8001488 <MX_TIM2_Init+0x98>)
 8001454:	f003 f898 	bl	8004588 <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800145e:	f000 f8cd 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	@ (8001488 <MX_TIM2_Init+0x98>)
 8001470:	f003 faa0 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800147a:	f000 f8bf 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000260 	.word	0x20000260

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <MX_USART2_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f003 faf8 	bl	8004ab8 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f895 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200002a8 	.word	0x200002a8
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_DMA_Init+0x3c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <MX_DMA_Init+0x3c>)
 80014f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_DMA_Init+0x3c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2011      	movs	r0, #17
 8001508:	f000 fc33 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800150c:	2011      	movs	r0, #17
 800150e:	f000 fc4c 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a2c      	ldr	r2, [pc, #176]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 800155c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_GPIO_Init+0xd0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2120      	movs	r1, #32
 80015aa:	4812      	ldr	r0, [pc, #72]	@ (80015f4 <MX_GPIO_Init+0xd4>)
 80015ac:	f001 f99e 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <MX_GPIO_Init+0xd8>)
 80015c8:	f001 f80c 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015cc:	2320      	movs	r3, #32
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_GPIO_Init+0xd4>)
 80015e4:	f000 fffe 	bl	80025e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	@ 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020800 	.word	0x40020800

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <Error_Handler+0x8>

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <HAL_MspInit+0x4c>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <HAL_MspInit+0x4c>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001646:	2007      	movs	r0, #7
 8001648:	f000 fb88 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	@ (80016dc <HAL_I2C_MspInit+0x84>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12c      	bne.n	80016d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_I2C_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a17      	ldr	r2, [pc, #92]	@ (80016e0 <HAL_I2C_MspInit+0x88>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_I2C_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001696:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169c:	2312      	movs	r3, #18
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a8:	2304      	movs	r3, #4
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <HAL_I2C_MspInit+0x8c>)
 80016b4:	f000 ff96 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_I2C_MspInit+0x88>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <HAL_I2C_MspInit+0x88>)
 80016c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_I2C_MspInit+0x88>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020400 	.word	0x40020400

080016e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f8:	d115      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_TIM_Base_MspInit+0x48>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <HAL_TIM_Base_MspInit+0x48>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6413      	str	r3, [r2, #64]	@ 0x40
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_TIM_Base_MspInit+0x48>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	201c      	movs	r0, #28
 800171c:	f000 fb29 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001720:	201c      	movs	r0, #28
 8001722:	f000 fb42 	bl	8001daa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a34      	ldr	r2, [pc, #208]	@ (8001824 <HAL_UART_MspInit+0xf0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d161      	bne.n	800181a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <HAL_UART_MspInit+0xf4>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	4a32      	ldr	r2, [pc, #200]	@ (8001828 <HAL_UART_MspInit+0xf4>)
 8001760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001764:	6413      	str	r3, [r2, #64]	@ 0x40
 8001766:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <HAL_UART_MspInit+0xf4>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <HAL_UART_MspInit+0xf4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a2b      	ldr	r2, [pc, #172]	@ (8001828 <HAL_UART_MspInit+0xf4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <HAL_UART_MspInit+0xf4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800178e:	230c      	movs	r3, #12
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179e:	2307      	movs	r3, #7
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4820      	ldr	r0, [pc, #128]	@ (800182c <HAL_UART_MspInit+0xf8>)
 80017aa:	f000 ff1b 	bl	80025e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017b0:	4a20      	ldr	r2, [pc, #128]	@ (8001834 <HAL_UART_MspInit+0x100>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017be:	2240      	movs	r2, #64	@ 0x40
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017ee:	4810      	ldr	r0, [pc, #64]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 80017f0:	f000 faf6 	bl	8001de0 <HAL_DMA_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80017fa:	f7ff feff 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 8001802:	639a      	str	r2, [r3, #56]	@ 0x38
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_UART_MspInit+0xfc>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2026      	movs	r0, #38	@ 0x26
 8001810:	f000 faaf 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001814:	2026      	movs	r0, #38	@ 0x26
 8001816:	f000 fac8 	bl	8001daa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40004400 	.word	0x40004400
 8001828:	40023800 	.word	0x40023800
 800182c:	40020000 	.word	0x40020000
 8001830:	200002f0 	.word	0x200002f0
 8001834:	400260a0 	.word	0x400260a0

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <NMI_Handler+0x4>

08001840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <MemManage_Handler+0x4>

08001850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <UsageFault_Handler+0x4>

08001860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188e:	f000 f975 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <DMA1_Stream6_IRQHandler+0x10>)
 800189e:	f000 fc37 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002f0 	.word	0x200002f0

080018ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b0:	4802      	ldr	r0, [pc, #8]	@ (80018bc <TIM2_IRQHandler+0x10>)
 80018b2:	f002 fd79 	bl	80043a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000260 	.word	0x20000260

080018c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <USART2_IRQHandler+0x10>)
 80018c6:	f003 f9b7 	bl	8004c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002a8 	.word	0x200002a8

080018d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_kill>:

int _kill(int pid, int sig)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ee:	f005 f95f 	bl	8006bb0 <__errno>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2216      	movs	r2, #22
 80018f6:	601a      	str	r2, [r3, #0]
  return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_exit>:

void _exit (int status)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffe7 	bl	80018e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001916:	bf00      	nop
 8001918:	e7fd      	b.n	8001916 <_exit+0x12>

0800191a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e00a      	b.n	8001942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192c:	f3af 8000 	nop.w
 8001930:	4601      	mov	r1, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbf0      	blt.n	800192c <_read+0x12>
  }

  return len;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e009      	b.n	800197a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbf1      	blt.n	8001966 <_write+0x12>
  }
  return len;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_close>:

int _close(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b4:	605a      	str	r2, [r3, #4]
  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_isatty>:

int _isatty(int file)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f005 f8c4 	bl	8006bb0 <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20018000 	.word	0x20018000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	20000378 	.word	0x20000378
 8001a5c:	200004d0 	.word	0x200004d0

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001abc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a88:	f7ff ffea 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f005 f883 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fb7b 	bl	80011b0 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001abc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001ac8:	0800a770 	.word	0x0800a770
  ldr r2, =_sbss
 8001acc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001ad0:	200004cc 	.word	0x200004cc

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f92b 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fd7c 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f943 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f90b 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000001c 	.word	0x2000001c
 8001b74:	20000024 	.word	0x20000024
 8001b78:	20000020 	.word	0x20000020

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000024 	.word	0x20000024
 8001ba0:	2000037c 	.word	0x2000037c

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000037c 	.word	0x2000037c

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	@ (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	@ (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff feda 	bl	8001ba4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e099      	b.n	8001f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1e:	f7ff fec1 	bl	8001ba4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d908      	bls.n	8001e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e078      	b.n	8001f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <HAL_DMA_Init+0x158>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d117      	bne.n	8001f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fb01 	bl	80024ec <DMA_CheckFifoParam>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	@ 0x40
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001efe:	2301      	movs	r3, #1
 8001f00:	e016      	b.n	8001f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fab8 	bl	8002480 <DMA_CalcBaseAndBitshift>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f18:	223f      	movs	r2, #63	@ 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	f010803f 	.word	0xf010803f

08001f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Start_IT+0x26>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e040      	b.n	8001fe4 <HAL_DMA_Start_IT+0xa8>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12f      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fa4a 	bl	8002424 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	223f      	movs	r2, #63	@ 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0216 	orr.w	r2, r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ffa:	f7ff fdd3 	bl	8001ba4 <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d008      	beq.n	800201e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	@ 0x80
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e052      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0216 	bic.w	r2, r2, #22
 800202c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800203c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_DMA_Abort+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0208 	bic.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206e:	e013      	b.n	8002098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002070:	f7ff fd98 	bl	8001ba4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d90c      	bls.n	8002098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e015      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e4      	bne.n	8002070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	223f      	movs	r2, #63	@ 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d004      	beq.n	80020ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	@ 0x80
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00c      	b.n	8002104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800211c:	4b8e      	ldr	r3, [pc, #568]	@ (8002358 <HAL_DMA_IRQHandler+0x248>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a8e      	ldr	r2, [pc, #568]	@ (800235c <HAL_DMA_IRQHandler+0x24c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a9b      	lsrs	r3, r3, #10
 8002128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213a:	2208      	movs	r2, #8
 800213c:	409a      	lsls	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01a      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	2208      	movs	r2, #8
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	2201      	movs	r2, #1
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2204      	movs	r2, #4
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	2204      	movs	r2, #4
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	2210      	movs	r2, #16
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d043      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	2210      	movs	r2, #16
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d018      	beq.n	8002252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d024      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4798      	blx	r3
 800223e:	e01f      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e016      	b.n	8002280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0208 	bic.w	r2, r2, #8
 800226e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	2220      	movs	r2, #32
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 808f 	beq.w	80023b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8087 	beq.w	80023b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	2220      	movs	r2, #32
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d136      	bne.n	8002328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0216 	bic.w	r2, r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_DMA_IRQHandler+0x1da>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fe:	223f      	movs	r2, #63	@ 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d07e      	beq.n	800241c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
        }
        return;
 8002326:	e079      	b.n	800241c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10d      	bne.n	8002360 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	d031      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
 8002354:	e02c      	b.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
 8002356:	bf00      	nop
 8002358:	2000001c 	.word	0x2000001c
 800235c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	4798      	blx	r3
 8002370:	e01e      	b.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0210 	bic.w	r2, r2, #16
 800238e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d032      	beq.n	800241e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d022      	beq.n	800240a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2205      	movs	r2, #5
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3301      	adds	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d307      	bcc.n	80023f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f2      	bne.n	80023dc <HAL_DMA_IRQHandler+0x2cc>
 80023f6:	e000      	b.n	80023fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
 800241a:	e000      	b.n	800241e <HAL_DMA_IRQHandler+0x30e>
        return;
 800241c:	bf00      	nop
    }
  }
}
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002440:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b40      	cmp	r3, #64	@ 0x40
 8002450:	d108      	bne.n	8002464 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002462:	e007      	b.n	8002474 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3b10      	subs	r3, #16
 8002490:	4a14      	ldr	r2, [pc, #80]	@ (80024e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800249a:	4a13      	ldr	r2, [pc, #76]	@ (80024e8 <DMA_CalcBaseAndBitshift+0x68>)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d909      	bls.n	80024c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	@ 0x58
 80024c0:	e007      	b.n	80024d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	aaaaaaab 	.word	0xaaaaaaab
 80024e8:	0800a32c 	.word	0x0800a32c

080024ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11f      	bne.n	8002546 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d856      	bhi.n	80025ba <DMA_CheckFifoParam+0xce>
 800250c:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <DMA_CheckFifoParam+0x28>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002525 	.word	0x08002525
 8002518:	08002537 	.word	0x08002537
 800251c:	08002525 	.word	0x08002525
 8002520:	080025bb 	.word	0x080025bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d046      	beq.n	80025be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002534:	e043      	b.n	80025be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800253e:	d140      	bne.n	80025c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e03d      	b.n	80025c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800254e:	d121      	bne.n	8002594 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d837      	bhi.n	80025c6 <DMA_CheckFifoParam+0xda>
 8002556:	a201      	add	r2, pc, #4	@ (adr r2, 800255c <DMA_CheckFifoParam+0x70>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002573 	.word	0x08002573
 8002564:	0800256d 	.word	0x0800256d
 8002568:	08002585 	.word	0x08002585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      break;
 8002570:	e030      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d025      	beq.n	80025ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002582:	e022      	b.n	80025ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800258c:	d11f      	bne.n	80025ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002592:	e01c      	b.n	80025ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d903      	bls.n	80025a2 <DMA_CheckFifoParam+0xb6>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d003      	beq.n	80025a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025a0:	e018      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      break;
 80025a6:	e015      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e00b      	b.n	80025d2 <DMA_CheckFifoParam+0xe6>
      break;
 80025ba:	bf00      	nop
 80025bc:	e00a      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
 80025c0:	e008      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025c2:	bf00      	nop
 80025c4:	e006      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025c6:	bf00      	nop
 80025c8:	e004      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
 80025cc:	e002      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
    }
  } 
  
  return status; 
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e159      	b.n	80028b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8148 	bne.w	80028ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a2 	beq.w	80028ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b57      	ldr	r3, [pc, #348]	@ (80028cc <HAL_GPIO_Init+0x2e8>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	4a56      	ldr	r2, [pc, #344]	@ (80028cc <HAL_GPIO_Init+0x2e8>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002778:	6453      	str	r3, [r2, #68]	@ 0x44
 800277a:	4b54      	ldr	r3, [pc, #336]	@ (80028cc <HAL_GPIO_Init+0x2e8>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a52      	ldr	r2, [pc, #328]	@ (80028d0 <HAL_GPIO_Init+0x2ec>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a49      	ldr	r2, [pc, #292]	@ (80028d4 <HAL_GPIO_Init+0x2f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x202>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a48      	ldr	r2, [pc, #288]	@ (80028d8 <HAL_GPIO_Init+0x2f4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x1fe>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a47      	ldr	r2, [pc, #284]	@ (80028dc <HAL_GPIO_Init+0x2f8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x1fa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a46      	ldr	r2, [pc, #280]	@ (80028e0 <HAL_GPIO_Init+0x2fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x1f6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a45      	ldr	r2, [pc, #276]	@ (80028e4 <HAL_GPIO_Init+0x300>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x1f2>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	@ (80028d0 <HAL_GPIO_Init+0x2ec>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b38      	ldr	r3, [pc, #224]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a2f      	ldr	r2, [pc, #188]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b2d      	ldr	r3, [pc, #180]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a24      	ldr	r2, [pc, #144]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285a:	4b23      	ldr	r3, [pc, #140]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287e:	4a1a      	ldr	r2, [pc, #104]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002884:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a8:	4a0f      	ldr	r2, [pc, #60]	@ (80028e8 <HAL_GPIO_Init+0x304>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f aea2 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	@ 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e12b      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fe86 	bl	8001658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	@ 0x24
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002984:	f001 fc36 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a81      	ldr	r2, [pc, #516]	@ (8002b94 <HAL_I2C_Init+0x274>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d807      	bhi.n	80029a4 <HAL_I2C_Init+0x84>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a80      	ldr	r2, [pc, #512]	@ (8002b98 <HAL_I2C_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e006      	b.n	80029b2 <HAL_I2C_Init+0x92>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a7d      	ldr	r2, [pc, #500]	@ (8002b9c <HAL_I2C_Init+0x27c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0e7      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a78      	ldr	r2, [pc, #480]	@ (8002ba0 <HAL_I2C_Init+0x280>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b94 <HAL_I2C_Init+0x274>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d802      	bhi.n	80029f4 <HAL_I2C_Init+0xd4>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3301      	adds	r3, #1
 80029f2:	e009      	b.n	8002a08 <HAL_I2C_Init+0xe8>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	4a69      	ldr	r2, [pc, #420]	@ (8002ba4 <HAL_I2C_Init+0x284>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	495c      	ldr	r1, [pc, #368]	@ (8002b94 <HAL_I2C_Init+0x274>)
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d819      	bhi.n	8002a5c <HAL_I2C_Init+0x13c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e59      	subs	r1, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a36:	1c59      	adds	r1, r3, #1
 8002a38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_I2C_Init+0x138>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e59      	subs	r1, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	e051      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e04f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <HAL_I2C_Init+0x168>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e012      	b.n	8002aae <HAL_I2C_Init+0x18e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x196>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e022      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <HAL_I2C_Init+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e58      	subs	r0, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	0099      	lsls	r1, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6809      	ldr	r1, [r1, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6911      	ldr	r1, [r2, #16]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	000186a0 	.word	0x000186a0
 8002b98:	001e847f 	.word	0x001e847f
 8002b9c:	003d08ff 	.word	0x003d08ff
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	10624dd3 	.word	0x10624dd3

08002ba8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	817b      	strh	r3, [r7, #10]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7fe fff2 	bl	8001ba4 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 80e0 	bne.w	8002d90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2319      	movs	r3, #25
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4970      	ldr	r1, [pc, #448]	@ (8002d9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fc64 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0d3      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_I2C_Master_Transmit+0x50>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0cc      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d007      	beq.n	8002c1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	@ 0x21
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	893a      	ldrh	r2, [r7, #8]
 8002c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a50      	ldr	r2, [pc, #320]	@ (8002da0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c60:	8979      	ldrh	r1, [r7, #10]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 face 	bl	8003208 <I2C_MasterRequestWrite>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e08d      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c8c:	e066      	b.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fd22 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11b      	bne.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	6a39      	ldr	r1, [r7, #32]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fd19 	bl	800376c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01a      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d194      	bne.n	8002c8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	@ 0x30
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	461a      	mov	r2, r3
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
 8002db4:	4613      	mov	r3, r2
 8002db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7fe fef4 	bl	8001ba4 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	f040 8217 	bne.w	80031fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	497c      	ldr	r1, [pc, #496]	@ (8002fc8 <HAL_I2C_Master_Receive+0x224>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb66 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	e20a      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_I2C_Master_Receive+0x50>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e203      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d007      	beq.n	8002e1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2222      	movs	r2, #34	@ 0x22
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2210      	movs	r2, #16
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a5c      	ldr	r2, [pc, #368]	@ (8002fcc <HAL_I2C_Master_Receive+0x228>)
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e5c:	8979      	ldrh	r1, [r7, #10]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa52 	bl	800330c <I2C_MasterRequestRead>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c4      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e198      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e178      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d11b      	bne.n	8002f22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	e158      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f48:	e144      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	f200 80f1 	bhi.w	8003136 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d123      	bne.n	8002fa4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fc4b 	bl	80037fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e145      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fa2:	e117      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d14e      	bne.n	800304a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4906      	ldr	r1, [pc, #24]	@ (8002fd0 <HAL_I2C_Master_Receive+0x22c>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa76 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e11a      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
 8002fc6:	bf00      	nop
 8002fc8:	00100002 	.word	0x00100002
 8002fcc:	ffff0000 	.word	0xffff0000
 8002fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003048:	e0c4      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	496c      	ldr	r1, [pc, #432]	@ (8003204 <HAL_I2C_Master_Receive+0x460>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fa27 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0cb      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	4955      	ldr	r1, [pc, #340]	@ (8003204 <HAL_I2C_Master_Receive+0x460>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f9f9 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e09d      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003134:	e04e      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb5e 	bl	80037fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e058      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d124      	bne.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f aeb6 	bne.w	8002f4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	@ 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010004 	.word	0x00010004

08003208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d006      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d003      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003230:	d108      	bne.n	8003244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e00b      	b.n	800325c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	2b12      	cmp	r3, #18
 800324a:	d107      	bne.n	800325c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800325a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f91d 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003282:	d103      	bne.n	800328c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e035      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032a8:	611a      	str	r2, [r3, #16]
 80032aa:	e01b      	b.n	80032e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032ac:	897b      	ldrh	r3, [r7, #10]
 80032ae:	11db      	asrs	r3, r3, #7
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0306 	and.w	r3, r3, #6
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f063 030f 	orn	r3, r3, #15
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	490e      	ldr	r1, [pc, #56]	@ (8003304 <I2C_MasterRequestWrite+0xfc>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f966 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e010      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4907      	ldr	r1, [pc, #28]	@ (8003308 <I2C_MasterRequestWrite+0x100>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f956 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	00010008 	.word	0x00010008
 8003308:	00010002 	.word	0x00010002

0800330c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	460b      	mov	r3, r1
 800331a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003330:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d006      	beq.n	8003346 <I2C_MasterRequestRead+0x3a>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d003      	beq.n	8003346 <I2C_MasterRequestRead+0x3a>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003344:	d108      	bne.n	8003358 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e00b      	b.n	8003370 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	2b11      	cmp	r3, #17
 800335e:	d107      	bne.n	8003370 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800336e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f893 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003396:	d103      	bne.n	80033a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e079      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ac:	d108      	bne.n	80033c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	e05f      	b.n	8003480 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033c0:	897b      	ldrh	r3, [r7, #10]
 80033c2:	11db      	asrs	r3, r3, #7
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0306 	and.w	r3, r3, #6
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f063 030f 	orn	r3, r3, #15
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4930      	ldr	r1, [pc, #192]	@ (80034a0 <I2C_MasterRequestRead+0x194>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8dc 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e054      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4929      	ldr	r1, [pc, #164]	@ (80034a4 <I2C_MasterRequestRead+0x198>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f8cc 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e044      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003432:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f831 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345a:	d103      	bne.n	8003464 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e017      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	11db      	asrs	r3, r3, #7
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f063 030e 	orn	r3, r3, #14
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4907      	ldr	r1, [pc, #28]	@ (80034a4 <I2C_MasterRequestRead+0x198>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f888 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	00010008 	.word	0x00010008
 80034a4:	00010002 	.word	0x00010002

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e048      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d044      	beq.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fe fb6f 	bl	8001ba4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d139      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10d      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	e00c      	b.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d116      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e023      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10d      	bne.n	8003572 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	e00c      	b.n	800358c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	429a      	cmp	r2, r3
 8003590:	d093      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035aa:	e071      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ba:	d123      	bne.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0204 	orr.w	r2, r3, #4
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e067      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d041      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fe faca 	bl	8001ba4 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d136      	bne.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10c      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e00b      	b.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	43da      	mvns	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e021      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10c      	bne.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e00b      	b.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f af6d 	bne.w	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e034      	b.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8e3 	bl	80038b6 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e034      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d028      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fa4f 	bl	8001ba4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11d      	bne.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b80      	cmp	r3, #128	@ 0x80
 8003724:	d016      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375e:	2b80      	cmp	r3, #128	@ 0x80
 8003760:	d1c3      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003778:	e034      	b.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f89b 	bl	80038b6 <I2C_IsAcknowledgeFailed>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e034      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d028      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fa07 	bl	8001ba4 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11d      	bne.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d016      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d1c3      	bne.n	800377a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003808:	e049      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b10      	cmp	r3, #16
 8003816:	d119      	bne.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0210 	mvn.w	r2, #16
 8003820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e030      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384c:	f7fe f9aa 	bl	8001ba4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11d      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d016      	beq.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d1ae      	bne.n	800380a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d11b      	bne.n	8003906 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	f043 0204 	orr.w	r2, r3, #4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e267      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d075      	beq.n	8003a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003932:	4b88      	ldr	r3, [pc, #544]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b04      	cmp	r3, #4
 800393c:	d00c      	beq.n	8003958 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b85      	ldr	r3, [pc, #532]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003946:	2b08      	cmp	r3, #8
 8003948:	d112      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4b82      	ldr	r3, [pc, #520]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003956:	d10b      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	4b7e      	ldr	r3, [pc, #504]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05b      	beq.n	8003a1c <HAL_RCC_OscConfig+0x108>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d157      	bne.n	8003a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e242      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x74>
 800397a:	4b76      	ldr	r3, [pc, #472]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a75      	ldr	r2, [pc, #468]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e01d      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x98>
 8003992:	4b70      	ldr	r3, [pc, #448]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6f      	ldr	r2, [pc, #444]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 80039ac:	4b69      	ldr	r3, [pc, #420]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a68      	ldr	r2, [pc, #416]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b66      	ldr	r3, [pc, #408]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a65      	ldr	r2, [pc, #404]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe f8ea 	bl	8001ba4 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fe f8e6 	bl	8001ba4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e207      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0xc0>
 80039f2:	e014      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe f8d6 	bl	8001ba4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe f8d2 	bl	8001ba4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	@ 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1f3      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	4b51      	ldr	r3, [pc, #324]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0xe8>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d063      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b47      	ldr	r3, [pc, #284]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d11c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a42:	4b44      	ldr	r3, [pc, #272]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d116      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4e:	4b41      	ldr	r3, [pc, #260]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e1c7      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4937      	ldr	r1, [pc, #220]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7a:	e03a      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a84:	4b34      	ldr	r3, [pc, #208]	@ (8003b58 <HAL_RCC_OscConfig+0x244>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fe f88b 	bl	8001ba4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fe f887 	bl	8001ba4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1a8      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b28      	ldr	r3, [pc, #160]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4925      	ldr	r1, [pc, #148]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b24      	ldr	r3, [pc, #144]	@ (8003b58 <HAL_RCC_OscConfig+0x244>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe f86a 	bl	8001ba4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fe f866 	bl	8001ba4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e187      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d036      	beq.n	8003b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b06:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <HAL_RCC_OscConfig+0x248>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fe f84a 	bl	8001ba4 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fe f846 	bl	8001ba4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e167      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x200>
 8003b32:	e01b      	b.n	8003b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <HAL_RCC_OscConfig+0x248>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe f833 	bl	8001ba4 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	e00e      	b.n	8003b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b42:	f7fe f82f 	bl	8001ba4 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d907      	bls.n	8003b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e150      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	42470000 	.word	0x42470000
 8003b5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ea      	bne.n	8003b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8097 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b81      	ldr	r3, [pc, #516]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	4a7c      	ldr	r2, [pc, #496]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b77      	ldr	r3, [pc, #476]	@ (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb6:	4b74      	ldr	r3, [pc, #464]	@ (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a73      	ldr	r2, [pc, #460]	@ (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fd ffef 	bl	8001ba4 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fd ffeb 	bl	8001ba4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e10c      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x2ea>
 8003bf0:	4b64      	ldr	r3, [pc, #400]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	4a63      	ldr	r2, [pc, #396]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x324>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x30c>
 8003c06:	4b5f      	ldr	r3, [pc, #380]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c12:	4b5c      	ldr	r3, [pc, #368]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c16:	4a5b      	ldr	r2, [pc, #364]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0x324>
 8003c20:	4b58      	ldr	r3, [pc, #352]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	4a57      	ldr	r2, [pc, #348]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2c:	4b55      	ldr	r3, [pc, #340]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c30:	4a54      	ldr	r2, [pc, #336]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f023 0304 	bic.w	r3, r3, #4
 8003c36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d015      	beq.n	8003c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fd ffb0 	bl	8001ba4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fd ffac 	bl	8001ba4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e0cb      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	4b49      	ldr	r3, [pc, #292]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ee      	beq.n	8003c48 <HAL_RCC_OscConfig+0x334>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fd ff9a 	bl	8001ba4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fd ff96 	bl	8001ba4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0b5      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ee      	bne.n	8003c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b39      	ldr	r3, [pc, #228]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	4a38      	ldr	r2, [pc, #224]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a1 	beq.w	8003df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb2:	4b34      	ldr	r3, [pc, #208]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d05c      	beq.n	8003d78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d141      	bne.n	8003d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd ff6a 	bl	8001ba4 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fd ff66 	bl	8001ba4 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e087      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	4b27      	ldr	r3, [pc, #156]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	491b      	ldr	r1, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fd ff3f 	bl	8001ba4 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fd ff3b 	bl	8001ba4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e05c      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3c:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x416>
 8003d48:	e054      	b.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd ff28 	bl	8001ba4 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fd ff24 	bl	8001ba4 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e045      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x444>
 8003d76:	e03d      	b.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e038      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d121      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d111      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0cc      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b68      	ldr	r3, [pc, #416]	@ (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d90c      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b65      	ldr	r3, [pc, #404]	@ (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b63      	ldr	r3, [pc, #396]	@ (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0b8      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e58:	4b59      	ldr	r3, [pc, #356]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a58      	ldr	r2, [pc, #352]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e70:	4b53      	ldr	r3, [pc, #332]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a52      	ldr	r2, [pc, #328]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b50      	ldr	r3, [pc, #320]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	494d      	ldr	r1, [pc, #308]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d044      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b47      	ldr	r3, [pc, #284]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d119      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e067      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b37      	ldr	r3, [pc, #220]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4934      	ldr	r1, [pc, #208]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fe56 	bl	8001ba4 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fd fe52 	bl	8001ba4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e04f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b25      	ldr	r3, [pc, #148]	@ (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d20c      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b20      	ldr	r3, [pc, #128]	@ (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e032      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b19      	ldr	r3, [pc, #100]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4916      	ldr	r1, [pc, #88]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	490e      	ldr	r1, [pc, #56]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f8a:	f000 f821 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490a      	ldr	r1, [pc, #40]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa2:	4a09      	ldr	r2, [pc, #36]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fdb6 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023c00 	.word	0x40023c00
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	0800a314 	.word	0x0800a314
 8003fc8:	2000001c 	.word	0x2000001c
 8003fcc:	20000020 	.word	0x20000020

08003fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b094      	sub	sp, #80	@ 0x50
 8003fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe8:	4b79      	ldr	r3, [pc, #484]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d00d      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x40>
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	f200 80e1 	bhi.w	80041bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d003      	beq.n	800400a <HAL_RCC_GetSysClockFreq+0x3a>
 8004002:	e0db      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004004:	4b73      	ldr	r3, [pc, #460]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004008:	e0db      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800400a:	4b73      	ldr	r3, [pc, #460]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800400c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400e:	e0d8      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004010:	4b6f      	ldr	r3, [pc, #444]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004018:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401a:	4b6d      	ldr	r3, [pc, #436]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d063      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004026:	4b6a      	ldr	r3, [pc, #424]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	2200      	movs	r2, #0
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004030:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004038:	633b      	str	r3, [r7, #48]	@ 0x30
 800403a:	2300      	movs	r3, #0
 800403c:	637b      	str	r3, [r7, #52]	@ 0x34
 800403e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004042:	4622      	mov	r2, r4
 8004044:	462b      	mov	r3, r5
 8004046:	f04f 0000 	mov.w	r0, #0
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	0159      	lsls	r1, r3, #5
 8004050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004054:	0150      	lsls	r0, r2, #5
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4621      	mov	r1, r4
 800405c:	1a51      	subs	r1, r2, r1
 800405e:	6139      	str	r1, [r7, #16]
 8004060:	4629      	mov	r1, r5
 8004062:	eb63 0301 	sbc.w	r3, r3, r1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004074:	4659      	mov	r1, fp
 8004076:	018b      	lsls	r3, r1, #6
 8004078:	4651      	mov	r1, sl
 800407a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407e:	4651      	mov	r1, sl
 8004080:	018a      	lsls	r2, r1, #6
 8004082:	4651      	mov	r1, sl
 8004084:	ebb2 0801 	subs.w	r8, r2, r1
 8004088:	4659      	mov	r1, fp
 800408a:	eb63 0901 	sbc.w	r9, r3, r1
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800409a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800409e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040a2:	4690      	mov	r8, r2
 80040a4:	4699      	mov	r9, r3
 80040a6:	4623      	mov	r3, r4
 80040a8:	eb18 0303 	adds.w	r3, r8, r3
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	462b      	mov	r3, r5
 80040b0:	eb49 0303 	adc.w	r3, r9, r3
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040c2:	4629      	mov	r1, r5
 80040c4:	024b      	lsls	r3, r1, #9
 80040c6:	4621      	mov	r1, r4
 80040c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040cc:	4621      	mov	r1, r4
 80040ce:	024a      	lsls	r2, r1, #9
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d6:	2200      	movs	r2, #0
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040e0:	f7fc fdda 	bl	8000c98 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4613      	mov	r3, r2
 80040ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040ec:	e058      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ee:	4b38      	ldr	r3, [pc, #224]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	2200      	movs	r2, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	4611      	mov	r1, r2
 80040fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040fe:	623b      	str	r3, [r7, #32]
 8004100:	2300      	movs	r3, #0
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
 8004104:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	f04f 0000 	mov.w	r0, #0
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	0159      	lsls	r1, r3, #5
 8004116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800411a:	0150      	lsls	r0, r2, #5
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4641      	mov	r1, r8
 8004122:	ebb2 0a01 	subs.w	sl, r2, r1
 8004126:	4649      	mov	r1, r9
 8004128:	eb63 0b01 	sbc.w	fp, r3, r1
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800413c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004140:	ebb2 040a 	subs.w	r4, r2, sl
 8004144:	eb63 050b 	sbc.w	r5, r3, fp
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	00eb      	lsls	r3, r5, #3
 8004152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004156:	00e2      	lsls	r2, r4, #3
 8004158:	4614      	mov	r4, r2
 800415a:	461d      	mov	r5, r3
 800415c:	4643      	mov	r3, r8
 800415e:	18e3      	adds	r3, r4, r3
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	464b      	mov	r3, r9
 8004164:	eb45 0303 	adc.w	r3, r5, r3
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004176:	4629      	mov	r1, r5
 8004178:	028b      	lsls	r3, r1, #10
 800417a:	4621      	mov	r1, r4
 800417c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004180:	4621      	mov	r1, r4
 8004182:	028a      	lsls	r2, r1, #10
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800418a:	2200      	movs	r2, #0
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	61fa      	str	r2, [r7, #28]
 8004190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004194:	f7fc fd80 	bl	8000c98 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4613      	mov	r3, r2
 800419e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	3301      	adds	r3, #1
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ba:	e002      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3750      	adds	r7, #80	@ 0x50
 80041c8:	46bd      	mov	sp, r7
 80041ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	00f42400 	.word	0x00f42400
 80041d8:	007a1200 	.word	0x007a1200

080041dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041e2:	681b      	ldr	r3, [r3, #0]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2000001c 	.word	0x2000001c

080041f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f8:	f7ff fff0 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0a9b      	lsrs	r3, r3, #10
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800
 8004218:	0800a324 	.word	0x0800a324

0800421c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004220:	f7ff ffdc 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	@ (800423c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0b5b      	lsrs	r3, r3, #13
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4903      	ldr	r1, [pc, #12]	@ (8004240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	0800a324 	.word	0x0800a324

08004244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e041      	b.n	80042da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd fa3c 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 fa70 	bl	8004768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e044      	b.n	8004386 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1e      	ldr	r2, [pc, #120]	@ (8004394 <HAL_TIM_Base_Start_IT+0xb0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x6c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004326:	d013      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x6c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <HAL_TIM_Base_Start_IT+0xb4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x6c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a19      	ldr	r2, [pc, #100]	@ (800439c <HAL_TIM_Base_Start_IT+0xb8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x6c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x6c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d111      	bne.n	8004374 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b06      	cmp	r3, #6
 8004360:	d010      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	e007      	b.n	8004384 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40014000 	.word	0x40014000

080043a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d020      	beq.n	800440c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01b      	beq.n	800440c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0202 	mvn.w	r2, #2
 80043dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f999 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f98b 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f99c 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d020      	beq.n	8004458 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01b      	beq.n	8004458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0204 	mvn.w	r2, #4
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f973 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f965 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f976 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d020      	beq.n	80044a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0208 	mvn.w	r2, #8
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2204      	movs	r2, #4
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f94d 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f93f 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f950 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d020      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01b      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0210 	mvn.w	r2, #16
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2208      	movs	r2, #8
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f927 	bl	800472a <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f919 	bl	8004716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f92a 	bl	800473e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0201 	mvn.w	r2, #1
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc fd70 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00c      	beq.n	8004538 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fab6 	bl	8004aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00c      	beq.n	800455c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8fb 	bl	8004752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00c      	beq.n	8004580 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0220 	mvn.w	r2, #32
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa88 	bl	8004a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIM_ConfigClockSource+0x1c>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e0b4      	b.n	800470e <HAL_TIM_ConfigClockSource+0x186>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045dc:	d03e      	beq.n	800465c <HAL_TIM_ConfigClockSource+0xd4>
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e2:	f200 8087 	bhi.w	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ea:	f000 8086 	beq.w	80046fa <HAL_TIM_ConfigClockSource+0x172>
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f2:	d87f      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b70      	cmp	r3, #112	@ 0x70
 80045f6:	d01a      	beq.n	800462e <HAL_TIM_ConfigClockSource+0xa6>
 80045f8:	2b70      	cmp	r3, #112	@ 0x70
 80045fa:	d87b      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b60      	cmp	r3, #96	@ 0x60
 80045fe:	d050      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004600:	2b60      	cmp	r3, #96	@ 0x60
 8004602:	d877      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b50      	cmp	r3, #80	@ 0x50
 8004606:	d03c      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0xfa>
 8004608:	2b50      	cmp	r3, #80	@ 0x50
 800460a:	d873      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b40      	cmp	r3, #64	@ 0x40
 800460e:	d058      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d86f      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b30      	cmp	r3, #48	@ 0x30
 8004616:	d064      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004618:	2b30      	cmp	r3, #48	@ 0x30
 800461a:	d86b      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b20      	cmp	r3, #32
 800461e:	d060      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004620:	2b20      	cmp	r3, #32
 8004622:	d867      	bhi.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d05c      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004628:	2b10      	cmp	r3, #16
 800462a:	d05a      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x15a>
 800462c:	e062      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800463e:	f000 f999 	bl	8004974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	609a      	str	r2, [r3, #8]
      break;
 800465a:	e04f      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800466c:	f000 f982 	bl	8004974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800467e:	609a      	str	r2, [r3, #8]
      break;
 8004680:	e03c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800468e:	461a      	mov	r2, r3
 8004690:	f000 f8f6 	bl	8004880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2150      	movs	r1, #80	@ 0x50
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f94f 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046a0:	e02c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 f915 	bl	80048de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2160      	movs	r1, #96	@ 0x60
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f93f 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046c0:	e01c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	461a      	mov	r2, r3
 80046d0:	f000 f8d6 	bl	8004880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2140      	movs	r1, #64	@ 0x40
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f92f 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046e0:	e00c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f000 f926 	bl	800493e <TIM_ITRx_SetConfig>
      break;
 80046f2:	e003      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
      break;
 80046f8:	e000      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3a      	ldr	r2, [pc, #232]	@ (8004864 <TIM_Base_SetConfig+0xfc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00f      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004786:	d00b      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a37      	ldr	r2, [pc, #220]	@ (8004868 <TIM_Base_SetConfig+0x100>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a36      	ldr	r2, [pc, #216]	@ (800486c <TIM_Base_SetConfig+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a35      	ldr	r2, [pc, #212]	@ (8004870 <TIM_Base_SetConfig+0x108>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d108      	bne.n	80047b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004864 <TIM_Base_SetConfig+0xfc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01b      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c0:	d017      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a28      	ldr	r2, [pc, #160]	@ (8004868 <TIM_Base_SetConfig+0x100>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a27      	ldr	r2, [pc, #156]	@ (800486c <TIM_Base_SetConfig+0x104>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a26      	ldr	r2, [pc, #152]	@ (8004870 <TIM_Base_SetConfig+0x108>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a25      	ldr	r2, [pc, #148]	@ (8004874 <TIM_Base_SetConfig+0x10c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a24      	ldr	r2, [pc, #144]	@ (8004878 <TIM_Base_SetConfig+0x110>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a23      	ldr	r2, [pc, #140]	@ (800487c <TIM_Base_SetConfig+0x114>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d108      	bne.n	8004804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0e      	ldr	r2, [pc, #56]	@ (8004864 <TIM_Base_SetConfig+0xfc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d103      	bne.n	8004838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f023 0201 	bic.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	611a      	str	r2, [r3, #16]
  }
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40010000 	.word	0x40010000
 8004868:	40000400 	.word	0x40000400
 800486c:	40000800 	.word	0x40000800
 8004870:	40000c00 	.word	0x40000c00
 8004874:	40014000 	.word	0x40014000
 8004878:	40014400 	.word	0x40014400
 800487c:	40014800 	.word	0x40014800

08004880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 030a 	bic.w	r3, r3, #10
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048de:	b480      	push	{r7}
 80048e0:	b087      	sub	sp, #28
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800491a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	f043 0307 	orr.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800498e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	431a      	orrs	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e050      	b.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a18:	d013      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a15      	ldr	r2, [pc, #84]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a13      	ldr	r2, [pc, #76]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10c      	bne.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40014000 	.word	0x40014000

08004a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e042      	b.n	8004b50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fe28 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	@ 0x24
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fdcb 	bl	8005698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	@ 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d156      	bne.n	8004c20 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_Transmit_DMA+0x26>
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e04f      	b.n	8004c22 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2221      	movs	r2, #33	@ 0x21
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	4a21      	ldr	r2, [pc, #132]	@ (8004c2c <HAL_UART_Transmit_DMA+0xd4>)
 8004ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	4a20      	ldr	r2, [pc, #128]	@ (8004c30 <HAL_UART_Transmit_DMA+0xd8>)
 8004bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c34 <HAL_UART_Transmit_DMA+0xdc>)
 8004bb8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	f7fd f9af 	bl	8001f3c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004be6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c08:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6a39      	ldr	r1, [r7, #32]
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	@ 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	080051c5 	.word	0x080051c5
 8004c30:	0800525f 	.word	0x0800525f
 8004c34:	0800527b 	.word	0x0800527b

08004c38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b0ba      	sub	sp, #232	@ 0xe8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10f      	bne.n	8004c9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_UART_IRQHandler+0x66>
 8004c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fc40 	bl	800551c <UART_Receive_IT>
      return;
 8004c9c:	e25b      	b.n	8005156 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80de 	beq.w	8004e64 <HAL_UART_IRQHandler+0x22c>
 8004ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80d1 	beq.w	8004e64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xae>
 8004cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_UART_IRQHandler+0xd2>
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	f043 0202 	orr.w	r2, r3, #2
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <HAL_UART_IRQHandler+0xf6>
 8004d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d011      	beq.n	8004d5e <HAL_UART_IRQHandler+0x126>
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f043 0208 	orr.w	r2, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 81f2 	beq.w	800514c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_UART_IRQHandler+0x14e>
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fbcb 	bl	800551c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_UART_IRQHandler+0x17a>
 8004daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d04f      	beq.n	8004e52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fad3 	bl	800535e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc2:	2b40      	cmp	r3, #64	@ 0x40
 8004dc4:	d141      	bne.n	8004e4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004df2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1d9      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d013      	beq.n	8004e42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005018 <HAL_UART_IRQHandler+0x3e0>)
 8004e20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd f950 	bl	80020cc <HAL_DMA_Abort_IT>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	e00e      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9a8 	bl	8005198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	e00a      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f9a4 	bl	8005198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	e006      	b.n	8004e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f9a0 	bl	8005198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e5e:	e175      	b.n	800514c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	bf00      	nop
    return;
 8004e62:	e173      	b.n	800514c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 814f 	bne.w	800510c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8148 	beq.w	800510c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8141 	beq.w	800510c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eaa:	2b40      	cmp	r3, #64	@ 0x40
 8004eac:	f040 80b6 	bne.w	800501c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ebc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8145 	beq.w	8005150 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f080 813e 	bcs.w	8005150 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee6:	f000 8088 	beq.w	8004ffa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1d9      	bne.n	8004eea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3314      	adds	r3, #20
 8004f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e1      	bne.n	8004f36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3314      	adds	r3, #20
 8004f78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e3      	bne.n	8004f72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e3      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fc fff9 	bl	8001fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005008:	b29b      	uxth	r3, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	b29b      	uxth	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f8cb 	bl	80051ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005016:	e09b      	b.n	8005150 <HAL_UART_IRQHandler+0x518>
 8005018:	08005425 	.word	0x08005425
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005024:	b29b      	uxth	r3, r3
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 808e 	beq.w	8005154 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8089 	beq.w	8005154 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005058:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005066:	647a      	str	r2, [r7, #68]	@ 0x44
 8005068:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800506c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e3      	bne.n	8005042 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3314      	adds	r3, #20
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	623b      	str	r3, [r7, #32]
   return(result);
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800509e:	633a      	str	r2, [r7, #48]	@ 0x30
 80050a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e3      	bne.n	800507a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0310 	bic.w	r3, r3, #16
 80050d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050e4:	61fa      	str	r2, [r7, #28]
 80050e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	617b      	str	r3, [r7, #20]
   return(result);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e3      	bne.n	80050c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f851 	bl	80051ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800510a:	e023      	b.n	8005154 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <HAL_UART_IRQHandler+0x4f4>
 8005118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800511c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f991 	bl	800544c <UART_Transmit_IT>
    return;
 800512a:	e014      	b.n	8005156 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800512c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <HAL_UART_IRQHandler+0x51e>
 8005138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800513c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f9d1 	bl	80054ec <UART_EndTransmit_IT>
    return;
 800514a:	e004      	b.n	8005156 <HAL_UART_IRQHandler+0x51e>
    return;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <HAL_UART_IRQHandler+0x51e>
      return;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <HAL_UART_IRQHandler+0x51e>
      return;
 8005154:	bf00      	nop
  }
}
 8005156:	37e8      	adds	r7, #232	@ 0xe8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b090      	sub	sp, #64	@ 0x40
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d137      	bne.n	8005250 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80051e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e2:	2200      	movs	r2, #0
 80051e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3314      	adds	r3, #20
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	623b      	str	r3, [r7, #32]
   return(result);
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005206:	633a      	str	r2, [r7, #48]	@ 0x30
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800520c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e5      	bne.n	80051e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800521a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	60fb      	str	r3, [r7, #12]
   return(result);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
 8005232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800523a:	61fa      	str	r2, [r7, #28]
 800523c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	69b9      	ldr	r1, [r7, #24]
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	617b      	str	r3, [r7, #20]
   return(result);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800524e:	e002      	b.n	8005256 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005250:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005252:	f7ff ff83 	bl	800515c <HAL_UART_TxCpltCallback>
}
 8005256:	bf00      	nop
 8005258:	3740      	adds	r7, #64	@ 0x40
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff ff7f 	bl	8005170 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b21      	cmp	r3, #33	@ 0x21
 80052ac:	d108      	bne.n	80052c0 <UART_DMAError+0x46>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2200      	movs	r2, #0
 80052b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80052ba:	68b8      	ldr	r0, [r7, #8]
 80052bc:	f000 f827 	bl	800530e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ca:	2b40      	cmp	r3, #64	@ 0x40
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b22      	cmp	r3, #34	@ 0x22
 80052e0:	d108      	bne.n	80052f4 <UART_DMAError+0x7a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2200      	movs	r2, #0
 80052ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80052ee:	68b8      	ldr	r0, [r7, #8]
 80052f0:	f000 f835 	bl	800535e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	f043 0210 	orr.w	r2, r3, #16
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005300:	68b8      	ldr	r0, [r7, #8]
 8005302:	f7ff ff49 	bl	8005198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800530e:	b480      	push	{r7}
 8005310:	b089      	sub	sp, #36	@ 0x24
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	61ba      	str	r2, [r7, #24]
 8005338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005352:	bf00      	nop
 8005354:	3724      	adds	r7, #36	@ 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800535e:	b480      	push	{r7}
 8005360:	b095      	sub	sp, #84	@ 0x54
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	330c      	adds	r3, #12
 800536c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800537c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005386:	643a      	str	r2, [r7, #64]	@ 0x40
 8005388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800538c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e5      	bne.n	8005366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3314      	adds	r3, #20
 80053a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d119      	bne.n	800540a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053f6:	61ba      	str	r2, [r7, #24]
 80053f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6979      	ldr	r1, [r7, #20]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005418:	bf00      	nop
 800541a:	3754      	adds	r7, #84	@ 0x54
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff feaa 	bl	8005198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b21      	cmp	r3, #33	@ 0x21
 800545e:	d13e      	bne.n	80054de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005468:	d114      	bne.n	8005494 <UART_Transmit_IT+0x48>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d110      	bne.n	8005494 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005486:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	1c9a      	adds	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]
 8005492:	e008      	b.n	80054a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	1c59      	adds	r1, r3, #1
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6211      	str	r1, [r2, #32]
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4619      	mov	r1, r3
 80054b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
  }
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005502:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff fe25 	bl	800515c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08c      	sub	sp, #48	@ 0x30
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b22      	cmp	r3, #34	@ 0x22
 800552e:	f040 80ae 	bne.w	800568e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553a:	d117      	bne.n	800556c <UART_Receive_IT+0x50>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d113      	bne.n	800556c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	b29a      	uxth	r2, r3
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	1c9a      	adds	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
 800556a:	e026      	b.n	80055ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557e:	d007      	beq.n	8005590 <UART_Receive_IT+0x74>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <UART_Receive_IT+0x82>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e008      	b.n	80055b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4619      	mov	r1, r3
 80055c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d15d      	bne.n	800568a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0220 	bic.w	r2, r2, #32
 80055dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005610:	2b01      	cmp	r3, #1
 8005612:	d135      	bne.n	8005680 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	613b      	str	r3, [r7, #16]
   return(result);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800563a:	623a      	str	r2, [r7, #32]
 800563c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	69f9      	ldr	r1, [r7, #28]
 8005640:	6a3a      	ldr	r2, [r7, #32]
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	61bb      	str	r3, [r7, #24]
   return(result);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e5      	bne.n	800561a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b10      	cmp	r3, #16
 800565a:	d10a      	bne.n	8005672 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff fd97 	bl	80051ac <HAL_UARTEx_RxEventCallback>
 800567e:	e002      	b.n	8005686 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fd7f 	bl	8005184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e002      	b.n	8005690 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e000      	b.n	8005690 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800568e:	2302      	movs	r3, #2
  }
}
 8005690:	4618      	mov	r0, r3
 8005692:	3730      	adds	r7, #48	@ 0x30
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800569c:	b0c0      	sub	sp, #256	@ 0x100
 800569e:	af00      	add	r7, sp, #0
 80056a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	68d9      	ldr	r1, [r3, #12]
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	ea40 0301 	orr.w	r3, r0, r1
 80056c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056f0:	f021 010c 	bic.w	r1, r1, #12
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056fe:	430b      	orrs	r3, r1
 8005700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005712:	6999      	ldr	r1, [r3, #24]
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	ea40 0301 	orr.w	r3, r0, r1
 800571e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b8f      	ldr	r3, [pc, #572]	@ (8005964 <UART_SetConfig+0x2cc>)
 8005728:	429a      	cmp	r2, r3
 800572a:	d005      	beq.n	8005738 <UART_SetConfig+0xa0>
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b8d      	ldr	r3, [pc, #564]	@ (8005968 <UART_SetConfig+0x2d0>)
 8005734:	429a      	cmp	r2, r3
 8005736:	d104      	bne.n	8005742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7fe fd70 	bl	800421c <HAL_RCC_GetPCLK2Freq>
 800573c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005740:	e003      	b.n	800574a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005742:	f7fe fd57 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8005746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005754:	f040 810c 	bne.w	8005970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575c:	2200      	movs	r2, #0
 800575e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800576a:	4622      	mov	r2, r4
 800576c:	462b      	mov	r3, r5
 800576e:	1891      	adds	r1, r2, r2
 8005770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005772:	415b      	adcs	r3, r3
 8005774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800577a:	4621      	mov	r1, r4
 800577c:	eb12 0801 	adds.w	r8, r2, r1
 8005780:	4629      	mov	r1, r5
 8005782:	eb43 0901 	adc.w	r9, r3, r1
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800579a:	4690      	mov	r8, r2
 800579c:	4699      	mov	r9, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	eb18 0303 	adds.w	r3, r8, r3
 80057a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057a8:	462b      	mov	r3, r5
 80057aa:	eb49 0303 	adc.w	r3, r9, r3
 80057ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057c6:	460b      	mov	r3, r1
 80057c8:	18db      	adds	r3, r3, r3
 80057ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80057cc:	4613      	mov	r3, r2
 80057ce:	eb42 0303 	adc.w	r3, r2, r3
 80057d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057dc:	f7fb fa5c 	bl	8000c98 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4b61      	ldr	r3, [pc, #388]	@ (800596c <UART_SetConfig+0x2d4>)
 80057e6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	011c      	lsls	r4, r3, #4
 80057ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	1891      	adds	r1, r2, r2
 8005806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005808:	415b      	adcs	r3, r3
 800580a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800580c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005810:	4641      	mov	r1, r8
 8005812:	eb12 0a01 	adds.w	sl, r2, r1
 8005816:	4649      	mov	r1, r9
 8005818:	eb43 0b01 	adc.w	fp, r3, r1
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800582c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005830:	4692      	mov	sl, r2
 8005832:	469b      	mov	fp, r3
 8005834:	4643      	mov	r3, r8
 8005836:	eb1a 0303 	adds.w	r3, sl, r3
 800583a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800583e:	464b      	mov	r3, r9
 8005840:	eb4b 0303 	adc.w	r3, fp, r3
 8005844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	643b      	str	r3, [r7, #64]	@ 0x40
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	647b      	str	r3, [r7, #68]	@ 0x44
 800586a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800586e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005872:	f7fb fa11 	bl	8000c98 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4611      	mov	r1, r2
 800587c:	4b3b      	ldr	r3, [pc, #236]	@ (800596c <UART_SetConfig+0x2d4>)
 800587e:	fba3 2301 	umull	r2, r3, r3, r1
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2264      	movs	r2, #100	@ 0x64
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	1acb      	subs	r3, r1, r3
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005892:	4b36      	ldr	r3, [pc, #216]	@ (800596c <UART_SetConfig+0x2d4>)
 8005894:	fba3 2302 	umull	r2, r3, r3, r2
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058a0:	441c      	add	r4, r3
 80058a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	1891      	adds	r1, r2, r2
 80058ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058bc:	415b      	adcs	r3, r3
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058c4:	4641      	mov	r1, r8
 80058c6:	1851      	adds	r1, r2, r1
 80058c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80058ca:	4649      	mov	r1, r9
 80058cc:	414b      	adcs	r3, r1
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058dc:	4659      	mov	r1, fp
 80058de:	00cb      	lsls	r3, r1, #3
 80058e0:	4651      	mov	r1, sl
 80058e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058e6:	4651      	mov	r1, sl
 80058e8:	00ca      	lsls	r2, r1, #3
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	4642      	mov	r2, r8
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058f8:	464b      	mov	r3, r9
 80058fa:	460a      	mov	r2, r1
 80058fc:	eb42 0303 	adc.w	r3, r2, r3
 8005900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005918:	460b      	mov	r3, r1
 800591a:	18db      	adds	r3, r3, r3
 800591c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800591e:	4613      	mov	r3, r2
 8005920:	eb42 0303 	adc.w	r3, r2, r3
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800592a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800592e:	f7fb f9b3 	bl	8000c98 <__aeabi_uldivmod>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <UART_SetConfig+0x2d4>)
 8005938:	fba3 1302 	umull	r1, r3, r3, r2
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	2164      	movs	r1, #100	@ 0x64
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	3332      	adds	r3, #50	@ 0x32
 800594a:	4a08      	ldr	r2, [pc, #32]	@ (800596c <UART_SetConfig+0x2d4>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f003 0207 	and.w	r2, r3, #7
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4422      	add	r2, r4
 800595e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005960:	e106      	b.n	8005b70 <UART_SetConfig+0x4d8>
 8005962:	bf00      	nop
 8005964:	40011000 	.word	0x40011000
 8005968:	40011400 	.word	0x40011400
 800596c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005974:	2200      	movs	r2, #0
 8005976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800597a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800597e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005982:	4642      	mov	r2, r8
 8005984:	464b      	mov	r3, r9
 8005986:	1891      	adds	r1, r2, r2
 8005988:	6239      	str	r1, [r7, #32]
 800598a:	415b      	adcs	r3, r3
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
 800598e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005992:	4641      	mov	r1, r8
 8005994:	1854      	adds	r4, r2, r1
 8005996:	4649      	mov	r1, r9
 8005998:	eb43 0501 	adc.w	r5, r3, r1
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	00eb      	lsls	r3, r5, #3
 80059a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059aa:	00e2      	lsls	r2, r4, #3
 80059ac:	4614      	mov	r4, r2
 80059ae:	461d      	mov	r5, r3
 80059b0:	4643      	mov	r3, r8
 80059b2:	18e3      	adds	r3, r4, r3
 80059b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059b8:	464b      	mov	r3, r9
 80059ba:	eb45 0303 	adc.w	r3, r5, r3
 80059be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059de:	4629      	mov	r1, r5
 80059e0:	008b      	lsls	r3, r1, #2
 80059e2:	4621      	mov	r1, r4
 80059e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059e8:	4621      	mov	r1, r4
 80059ea:	008a      	lsls	r2, r1, #2
 80059ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059f0:	f7fb f952 	bl	8000c98 <__aeabi_uldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4b60      	ldr	r3, [pc, #384]	@ (8005b7c <UART_SetConfig+0x4e4>)
 80059fa:	fba3 2302 	umull	r2, r3, r3, r2
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	011c      	lsls	r4, r3, #4
 8005a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a14:	4642      	mov	r2, r8
 8005a16:	464b      	mov	r3, r9
 8005a18:	1891      	adds	r1, r2, r2
 8005a1a:	61b9      	str	r1, [r7, #24]
 8005a1c:	415b      	adcs	r3, r3
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a24:	4641      	mov	r1, r8
 8005a26:	1851      	adds	r1, r2, r1
 8005a28:	6139      	str	r1, [r7, #16]
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	414b      	adcs	r3, r1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	00cb      	lsls	r3, r1, #3
 8005a40:	4651      	mov	r1, sl
 8005a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a46:	4651      	mov	r1, sl
 8005a48:	00ca      	lsls	r2, r1, #3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4642      	mov	r2, r8
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a58:	464b      	mov	r3, r9
 8005a5a:	460a      	mov	r2, r1
 8005a5c:	eb42 0303 	adc.w	r3, r2, r3
 8005a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	008b      	lsls	r3, r1, #2
 8005a80:	4641      	mov	r1, r8
 8005a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a86:	4641      	mov	r1, r8
 8005a88:	008a      	lsls	r2, r1, #2
 8005a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a8e:	f7fb f903 	bl	8000c98 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	4b38      	ldr	r3, [pc, #224]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2264      	movs	r2, #100	@ 0x64
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	1acb      	subs	r3, r1, r3
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	3332      	adds	r3, #50	@ 0x32
 8005aac:	4a33      	ldr	r2, [pc, #204]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ab8:	441c      	add	r4, r3
 8005aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005abe:	2200      	movs	r2, #0
 8005ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ac8:	4642      	mov	r2, r8
 8005aca:	464b      	mov	r3, r9
 8005acc:	1891      	adds	r1, r2, r2
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	415b      	adcs	r3, r3
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ad8:	4641      	mov	r1, r8
 8005ada:	1851      	adds	r1, r2, r1
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	4649      	mov	r1, r9
 8005ae0:	414b      	adcs	r3, r1
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005af0:	4659      	mov	r1, fp
 8005af2:	00cb      	lsls	r3, r1, #3
 8005af4:	4651      	mov	r1, sl
 8005af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005afa:	4651      	mov	r1, sl
 8005afc:	00ca      	lsls	r2, r1, #3
 8005afe:	4610      	mov	r0, r2
 8005b00:	4619      	mov	r1, r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	4642      	mov	r2, r8
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	460a      	mov	r2, r1
 8005b0e:	eb42 0303 	adc.w	r3, r2, r3
 8005b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	008b      	lsls	r3, r1, #2
 8005b30:	4641      	mov	r1, r8
 8005b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b36:	4641      	mov	r1, r8
 8005b38:	008a      	lsls	r2, r1, #2
 8005b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b3e:	f7fb f8ab 	bl	8000c98 <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005b48:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	2164      	movs	r1, #100	@ 0x64
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	3332      	adds	r3, #50	@ 0x32
 8005b5a:	4a08      	ldr	r2, [pc, #32]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	f003 020f 	and.w	r2, r3, #15
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4422      	add	r2, r4
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b76:	46bd      	mov	sp, r7
 8005b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7c:	51eb851f 	.word	0x51eb851f

08005b80 <__cvt>:
 8005b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	ec57 6b10 	vmov	r6, r7, d0
 8005b88:	2f00      	cmp	r7, #0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	463b      	mov	r3, r7
 8005b90:	bfbb      	ittet	lt
 8005b92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b96:	461f      	movlt	r7, r3
 8005b98:	2300      	movge	r3, #0
 8005b9a:	232d      	movlt	r3, #45	@ 0x2d
 8005b9c:	700b      	strb	r3, [r1, #0]
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ba4:	4691      	mov	r9, r2
 8005ba6:	f023 0820 	bic.w	r8, r3, #32
 8005baa:	bfbc      	itt	lt
 8005bac:	4632      	movlt	r2, r6
 8005bae:	4616      	movlt	r6, r2
 8005bb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bb4:	d005      	beq.n	8005bc2 <__cvt+0x42>
 8005bb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bba:	d100      	bne.n	8005bbe <__cvt+0x3e>
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	e000      	b.n	8005bc4 <__cvt+0x44>
 8005bc2:	2103      	movs	r1, #3
 8005bc4:	ab03      	add	r3, sp, #12
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	ab02      	add	r3, sp, #8
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	ec47 6b10 	vmov	d0, r6, r7
 8005bd0:	4653      	mov	r3, sl
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	f001 f8a8 	bl	8006d28 <_dtoa_r>
 8005bd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bdc:	4605      	mov	r5, r0
 8005bde:	d119      	bne.n	8005c14 <__cvt+0x94>
 8005be0:	f019 0f01 	tst.w	r9, #1
 8005be4:	d00e      	beq.n	8005c04 <__cvt+0x84>
 8005be6:	eb00 0904 	add.w	r9, r0, r4
 8005bea:	2200      	movs	r2, #0
 8005bec:	2300      	movs	r3, #0
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa ff71 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bf6:	b108      	cbz	r0, 8005bfc <__cvt+0x7c>
 8005bf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bfc:	2230      	movs	r2, #48	@ 0x30
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	454b      	cmp	r3, r9
 8005c02:	d31e      	bcc.n	8005c42 <__cvt+0xc2>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c08:	1b5b      	subs	r3, r3, r5
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	b004      	add	sp, #16
 8005c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c18:	eb00 0904 	add.w	r9, r0, r4
 8005c1c:	d1e5      	bne.n	8005bea <__cvt+0x6a>
 8005c1e:	7803      	ldrb	r3, [r0, #0]
 8005c20:	2b30      	cmp	r3, #48	@ 0x30
 8005c22:	d10a      	bne.n	8005c3a <__cvt+0xba>
 8005c24:	2200      	movs	r2, #0
 8005c26:	2300      	movs	r3, #0
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa ff54 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c30:	b918      	cbnz	r0, 8005c3a <__cvt+0xba>
 8005c32:	f1c4 0401 	rsb	r4, r4, #1
 8005c36:	f8ca 4000 	str.w	r4, [sl]
 8005c3a:	f8da 3000 	ldr.w	r3, [sl]
 8005c3e:	4499      	add	r9, r3
 8005c40:	e7d3      	b.n	8005bea <__cvt+0x6a>
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	9103      	str	r1, [sp, #12]
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e7d9      	b.n	8005bfe <__cvt+0x7e>

08005c4a <__exponent>:
 8005c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c4c:	2900      	cmp	r1, #0
 8005c4e:	bfba      	itte	lt
 8005c50:	4249      	neglt	r1, r1
 8005c52:	232d      	movlt	r3, #45	@ 0x2d
 8005c54:	232b      	movge	r3, #43	@ 0x2b
 8005c56:	2909      	cmp	r1, #9
 8005c58:	7002      	strb	r2, [r0, #0]
 8005c5a:	7043      	strb	r3, [r0, #1]
 8005c5c:	dd29      	ble.n	8005cb2 <__exponent+0x68>
 8005c5e:	f10d 0307 	add.w	r3, sp, #7
 8005c62:	461d      	mov	r5, r3
 8005c64:	270a      	movs	r7, #10
 8005c66:	461a      	mov	r2, r3
 8005c68:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c6c:	fb07 1416 	mls	r4, r7, r6, r1
 8005c70:	3430      	adds	r4, #48	@ 0x30
 8005c72:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c76:	460c      	mov	r4, r1
 8005c78:	2c63      	cmp	r4, #99	@ 0x63
 8005c7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c7e:	4631      	mov	r1, r6
 8005c80:	dcf1      	bgt.n	8005c66 <__exponent+0x1c>
 8005c82:	3130      	adds	r1, #48	@ 0x30
 8005c84:	1e94      	subs	r4, r2, #2
 8005c86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c8a:	1c41      	adds	r1, r0, #1
 8005c8c:	4623      	mov	r3, r4
 8005c8e:	42ab      	cmp	r3, r5
 8005c90:	d30a      	bcc.n	8005ca8 <__exponent+0x5e>
 8005c92:	f10d 0309 	add.w	r3, sp, #9
 8005c96:	1a9b      	subs	r3, r3, r2
 8005c98:	42ac      	cmp	r4, r5
 8005c9a:	bf88      	it	hi
 8005c9c:	2300      	movhi	r3, #0
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	4403      	add	r3, r0
 8005ca2:	1a18      	subs	r0, r3, r0
 8005ca4:	b003      	add	sp, #12
 8005ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005cac:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005cb0:	e7ed      	b.n	8005c8e <__exponent+0x44>
 8005cb2:	2330      	movs	r3, #48	@ 0x30
 8005cb4:	3130      	adds	r1, #48	@ 0x30
 8005cb6:	7083      	strb	r3, [r0, #2]
 8005cb8:	70c1      	strb	r1, [r0, #3]
 8005cba:	1d03      	adds	r3, r0, #4
 8005cbc:	e7f1      	b.n	8005ca2 <__exponent+0x58>
	...

08005cc0 <_printf_float>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b08d      	sub	sp, #52	@ 0x34
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ccc:	4616      	mov	r6, r2
 8005cce:	461f      	mov	r7, r3
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f000 ff23 	bl	8006b1c <_localeconv_r>
 8005cd6:	6803      	ldr	r3, [r0, #0]
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fa fad0 	bl	8000280 <strlen>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce8:	9005      	str	r0, [sp, #20]
 8005cea:	3307      	adds	r3, #7
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	f103 0208 	add.w	r2, r3, #8
 8005cf4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cf8:	f8d4 b000 	ldr.w	fp, [r4]
 8005cfc:	f8c8 2000 	str.w	r2, [r8]
 8005d00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d08:	9307      	str	r3, [sp, #28]
 8005d0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d16:	4b9c      	ldr	r3, [pc, #624]	@ (8005f88 <_printf_float+0x2c8>)
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	f7fa ff0e 	bl	8000b3c <__aeabi_dcmpun>
 8005d20:	bb70      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d26:	4b98      	ldr	r3, [pc, #608]	@ (8005f88 <_printf_float+0x2c8>)
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	f7fa fee8 	bl	8000b00 <__aeabi_dcmple>
 8005d30:	bb30      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	f7fa fed7 	bl	8000aec <__aeabi_dcmplt>
 8005d3e:	b110      	cbz	r0, 8005d46 <_printf_float+0x86>
 8005d40:	232d      	movs	r3, #45	@ 0x2d
 8005d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d46:	4a91      	ldr	r2, [pc, #580]	@ (8005f8c <_printf_float+0x2cc>)
 8005d48:	4b91      	ldr	r3, [pc, #580]	@ (8005f90 <_printf_float+0x2d0>)
 8005d4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d4e:	bf94      	ite	ls
 8005d50:	4690      	movls	r8, r2
 8005d52:	4698      	movhi	r8, r3
 8005d54:	2303      	movs	r3, #3
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	f02b 0304 	bic.w	r3, fp, #4
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	f04f 0900 	mov.w	r9, #0
 8005d62:	9700      	str	r7, [sp, #0]
 8005d64:	4633      	mov	r3, r6
 8005d66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 f9d2 	bl	8006114 <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f040 808d 	bne.w	8005e90 <_printf_float+0x1d0>
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	b00d      	add	sp, #52	@ 0x34
 8005d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa fed8 	bl	8000b3c <__aeabi_dcmpun>
 8005d8c:	b140      	cbz	r0, 8005da0 <_printf_float+0xe0>
 8005d8e:	464b      	mov	r3, r9
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bfbc      	itt	lt
 8005d94:	232d      	movlt	r3, #45	@ 0x2d
 8005d96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f94 <_printf_float+0x2d4>)
 8005d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f98 <_printf_float+0x2d8>)
 8005d9e:	e7d4      	b.n	8005d4a <_printf_float+0x8a>
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005da6:	9206      	str	r2, [sp, #24]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	d13b      	bne.n	8005e24 <_printf_float+0x164>
 8005dac:	2306      	movs	r3, #6
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005db4:	2300      	movs	r3, #0
 8005db6:	6022      	str	r2, [r4, #0]
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	ab0a      	add	r3, sp, #40	@ 0x28
 8005dbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005dc0:	ab09      	add	r3, sp, #36	@ 0x24
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	ec49 8b10 	vmov	d0, r8, r9
 8005dca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f7ff fed6 	bl	8005b80 <__cvt>
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dd8:	2b47      	cmp	r3, #71	@ 0x47
 8005dda:	4680      	mov	r8, r0
 8005ddc:	d129      	bne.n	8005e32 <_printf_float+0x172>
 8005dde:	1cc8      	adds	r0, r1, #3
 8005de0:	db02      	blt.n	8005de8 <_printf_float+0x128>
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	4299      	cmp	r1, r3
 8005de6:	dd41      	ble.n	8005e6c <_printf_float+0x1ac>
 8005de8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005dec:	fa5f fa8a 	uxtb.w	sl, sl
 8005df0:	3901      	subs	r1, #1
 8005df2:	4652      	mov	r2, sl
 8005df4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005df8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dfa:	f7ff ff26 	bl	8005c4a <__exponent>
 8005dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e00:	1813      	adds	r3, r2, r0
 8005e02:	2a01      	cmp	r2, #1
 8005e04:	4681      	mov	r9, r0
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	dc02      	bgt.n	8005e10 <_printf_float+0x150>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	07d2      	lsls	r2, r2, #31
 8005e0e:	d501      	bpl.n	8005e14 <_printf_float+0x154>
 8005e10:	3301      	adds	r3, #1
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0a2      	beq.n	8005d62 <_printf_float+0xa2>
 8005e1c:	232d      	movs	r3, #45	@ 0x2d
 8005e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e22:	e79e      	b.n	8005d62 <_printf_float+0xa2>
 8005e24:	9a06      	ldr	r2, [sp, #24]
 8005e26:	2a47      	cmp	r2, #71	@ 0x47
 8005e28:	d1c2      	bne.n	8005db0 <_printf_float+0xf0>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c0      	bne.n	8005db0 <_printf_float+0xf0>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e7bd      	b.n	8005dae <_printf_float+0xee>
 8005e32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e36:	d9db      	bls.n	8005df0 <_printf_float+0x130>
 8005e38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e3c:	d118      	bne.n	8005e70 <_printf_float+0x1b0>
 8005e3e:	2900      	cmp	r1, #0
 8005e40:	6863      	ldr	r3, [r4, #4]
 8005e42:	dd0b      	ble.n	8005e5c <_printf_float+0x19c>
 8005e44:	6121      	str	r1, [r4, #16]
 8005e46:	b913      	cbnz	r3, 8005e4e <_printf_float+0x18e>
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	07d0      	lsls	r0, r2, #31
 8005e4c:	d502      	bpl.n	8005e54 <_printf_float+0x194>
 8005e4e:	3301      	adds	r3, #1
 8005e50:	440b      	add	r3, r1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e56:	f04f 0900 	mov.w	r9, #0
 8005e5a:	e7db      	b.n	8005e14 <_printf_float+0x154>
 8005e5c:	b913      	cbnz	r3, 8005e64 <_printf_float+0x1a4>
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	07d2      	lsls	r2, r2, #31
 8005e62:	d501      	bpl.n	8005e68 <_printf_float+0x1a8>
 8005e64:	3302      	adds	r3, #2
 8005e66:	e7f4      	b.n	8005e52 <_printf_float+0x192>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e7f2      	b.n	8005e52 <_printf_float+0x192>
 8005e6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e72:	4299      	cmp	r1, r3
 8005e74:	db05      	blt.n	8005e82 <_printf_float+0x1c2>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	6121      	str	r1, [r4, #16]
 8005e7a:	07d8      	lsls	r0, r3, #31
 8005e7c:	d5ea      	bpl.n	8005e54 <_printf_float+0x194>
 8005e7e:	1c4b      	adds	r3, r1, #1
 8005e80:	e7e7      	b.n	8005e52 <_printf_float+0x192>
 8005e82:	2900      	cmp	r1, #0
 8005e84:	bfd4      	ite	le
 8005e86:	f1c1 0202 	rsble	r2, r1, #2
 8005e8a:	2201      	movgt	r2, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	e7e0      	b.n	8005e52 <_printf_float+0x192>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	055a      	lsls	r2, r3, #21
 8005e94:	d407      	bmi.n	8005ea6 <_printf_float+0x1e6>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d12b      	bne.n	8005efc <_printf_float+0x23c>
 8005ea4:	e767      	b.n	8005d76 <_printf_float+0xb6>
 8005ea6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005eaa:	f240 80dd 	bls.w	8006068 <_printf_float+0x3a8>
 8005eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f7fa fe0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d033      	beq.n	8005f26 <_printf_float+0x266>
 8005ebe:	4a37      	ldr	r2, [pc, #220]	@ (8005f9c <_printf_float+0x2dc>)
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f af54 	beq.w	8005d76 <_printf_float+0xb6>
 8005ece:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ed2:	4543      	cmp	r3, r8
 8005ed4:	db02      	blt.n	8005edc <_printf_float+0x21c>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	07d8      	lsls	r0, r3, #31
 8005eda:	d50f      	bpl.n	8005efc <_printf_float+0x23c>
 8005edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f af45 	beq.w	8005d76 <_printf_float+0xb6>
 8005eec:	f04f 0900 	mov.w	r9, #0
 8005ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ef4:	f104 0a1a 	add.w	sl, r4, #26
 8005ef8:	45c8      	cmp	r8, r9
 8005efa:	dc09      	bgt.n	8005f10 <_printf_float+0x250>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	079b      	lsls	r3, r3, #30
 8005f00:	f100 8103 	bmi.w	800610a <_printf_float+0x44a>
 8005f04:	68e0      	ldr	r0, [r4, #12]
 8005f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f08:	4298      	cmp	r0, r3
 8005f0a:	bfb8      	it	lt
 8005f0c:	4618      	movlt	r0, r3
 8005f0e:	e734      	b.n	8005d7a <_printf_float+0xba>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4652      	mov	r2, sl
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af2b 	beq.w	8005d76 <_printf_float+0xb6>
 8005f20:	f109 0901 	add.w	r9, r9, #1
 8005f24:	e7e8      	b.n	8005ef8 <_printf_float+0x238>
 8005f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc39      	bgt.n	8005fa0 <_printf_float+0x2e0>
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <_printf_float+0x2dc>)
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f af1d 	beq.w	8005d76 <_printf_float+0xb6>
 8005f3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f40:	ea59 0303 	orrs.w	r3, r9, r3
 8005f44:	d102      	bne.n	8005f4c <_printf_float+0x28c>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	07d9      	lsls	r1, r3, #31
 8005f4a:	d5d7      	bpl.n	8005efc <_printf_float+0x23c>
 8005f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f af0d 	beq.w	8005d76 <_printf_float+0xb6>
 8005f5c:	f04f 0a00 	mov.w	sl, #0
 8005f60:	f104 0b1a 	add.w	fp, r4, #26
 8005f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f66:	425b      	negs	r3, r3
 8005f68:	4553      	cmp	r3, sl
 8005f6a:	dc01      	bgt.n	8005f70 <_printf_float+0x2b0>
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	e793      	b.n	8005e98 <_printf_float+0x1d8>
 8005f70:	2301      	movs	r3, #1
 8005f72:	465a      	mov	r2, fp
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f aefb 	beq.w	8005d76 <_printf_float+0xb6>
 8005f80:	f10a 0a01 	add.w	sl, sl, #1
 8005f84:	e7ee      	b.n	8005f64 <_printf_float+0x2a4>
 8005f86:	bf00      	nop
 8005f88:	7fefffff 	.word	0x7fefffff
 8005f8c:	0800a334 	.word	0x0800a334
 8005f90:	0800a338 	.word	0x0800a338
 8005f94:	0800a33c 	.word	0x0800a33c
 8005f98:	0800a340 	.word	0x0800a340
 8005f9c:	0800a344 	.word	0x0800a344
 8005fa0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fa2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fa6:	4553      	cmp	r3, sl
 8005fa8:	bfa8      	it	ge
 8005faa:	4653      	movge	r3, sl
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	4699      	mov	r9, r3
 8005fb0:	dc36      	bgt.n	8006020 <_printf_float+0x360>
 8005fb2:	f04f 0b00 	mov.w	fp, #0
 8005fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fba:	f104 021a 	add.w	r2, r4, #26
 8005fbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fc0:	9306      	str	r3, [sp, #24]
 8005fc2:	eba3 0309 	sub.w	r3, r3, r9
 8005fc6:	455b      	cmp	r3, fp
 8005fc8:	dc31      	bgt.n	800602e <_printf_float+0x36e>
 8005fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fcc:	459a      	cmp	sl, r3
 8005fce:	dc3a      	bgt.n	8006046 <_printf_float+0x386>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	07da      	lsls	r2, r3, #31
 8005fd4:	d437      	bmi.n	8006046 <_printf_float+0x386>
 8005fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd8:	ebaa 0903 	sub.w	r9, sl, r3
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	ebaa 0303 	sub.w	r3, sl, r3
 8005fe2:	4599      	cmp	r9, r3
 8005fe4:	bfa8      	it	ge
 8005fe6:	4699      	movge	r9, r3
 8005fe8:	f1b9 0f00 	cmp.w	r9, #0
 8005fec:	dc33      	bgt.n	8006056 <_printf_float+0x396>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ff6:	f104 0b1a 	add.w	fp, r4, #26
 8005ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffc:	ebaa 0303 	sub.w	r3, sl, r3
 8006000:	eba3 0309 	sub.w	r3, r3, r9
 8006004:	4543      	cmp	r3, r8
 8006006:	f77f af79 	ble.w	8005efc <_printf_float+0x23c>
 800600a:	2301      	movs	r3, #1
 800600c:	465a      	mov	r2, fp
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f aeae 	beq.w	8005d76 <_printf_float+0xb6>
 800601a:	f108 0801 	add.w	r8, r8, #1
 800601e:	e7ec      	b.n	8005ffa <_printf_float+0x33a>
 8006020:	4642      	mov	r2, r8
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	d1c2      	bne.n	8005fb2 <_printf_float+0x2f2>
 800602c:	e6a3      	b.n	8005d76 <_printf_float+0xb6>
 800602e:	2301      	movs	r3, #1
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	9206      	str	r2, [sp, #24]
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae9c 	beq.w	8005d76 <_printf_float+0xb6>
 800603e:	9a06      	ldr	r2, [sp, #24]
 8006040:	f10b 0b01 	add.w	fp, fp, #1
 8006044:	e7bb      	b.n	8005fbe <_printf_float+0x2fe>
 8006046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	d1c0      	bne.n	8005fd6 <_printf_float+0x316>
 8006054:	e68f      	b.n	8005d76 <_printf_float+0xb6>
 8006056:	9a06      	ldr	r2, [sp, #24]
 8006058:	464b      	mov	r3, r9
 800605a:	4442      	add	r2, r8
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	d1c3      	bne.n	8005fee <_printf_float+0x32e>
 8006066:	e686      	b.n	8005d76 <_printf_float+0xb6>
 8006068:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800606c:	f1ba 0f01 	cmp.w	sl, #1
 8006070:	dc01      	bgt.n	8006076 <_printf_float+0x3b6>
 8006072:	07db      	lsls	r3, r3, #31
 8006074:	d536      	bpl.n	80060e4 <_printf_float+0x424>
 8006076:	2301      	movs	r3, #1
 8006078:	4642      	mov	r2, r8
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f ae78 	beq.w	8005d76 <_printf_float+0xb6>
 8006086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	f43f ae70 	beq.w	8005d76 <_printf_float+0xb6>
 8006096:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800609a:	2200      	movs	r2, #0
 800609c:	2300      	movs	r3, #0
 800609e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060a2:	f7fa fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 80060a6:	b9c0      	cbnz	r0, 80060da <_printf_float+0x41a>
 80060a8:	4653      	mov	r3, sl
 80060aa:	f108 0201 	add.w	r2, r8, #1
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	d10c      	bne.n	80060d2 <_printf_float+0x412>
 80060b8:	e65d      	b.n	8005d76 <_printf_float+0xb6>
 80060ba:	2301      	movs	r3, #1
 80060bc:	465a      	mov	r2, fp
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f ae56 	beq.w	8005d76 <_printf_float+0xb6>
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	45d0      	cmp	r8, sl
 80060d0:	dbf3      	blt.n	80060ba <_printf_float+0x3fa>
 80060d2:	464b      	mov	r3, r9
 80060d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060d8:	e6df      	b.n	8005e9a <_printf_float+0x1da>
 80060da:	f04f 0800 	mov.w	r8, #0
 80060de:	f104 0b1a 	add.w	fp, r4, #26
 80060e2:	e7f4      	b.n	80060ce <_printf_float+0x40e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4642      	mov	r2, r8
 80060e8:	e7e1      	b.n	80060ae <_printf_float+0x3ee>
 80060ea:	2301      	movs	r3, #1
 80060ec:	464a      	mov	r2, r9
 80060ee:	4631      	mov	r1, r6
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b8      	blx	r7
 80060f4:	3001      	adds	r0, #1
 80060f6:	f43f ae3e 	beq.w	8005d76 <_printf_float+0xb6>
 80060fa:	f108 0801 	add.w	r8, r8, #1
 80060fe:	68e3      	ldr	r3, [r4, #12]
 8006100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006102:	1a5b      	subs	r3, r3, r1
 8006104:	4543      	cmp	r3, r8
 8006106:	dcf0      	bgt.n	80060ea <_printf_float+0x42a>
 8006108:	e6fc      	b.n	8005f04 <_printf_float+0x244>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	f104 0919 	add.w	r9, r4, #25
 8006112:	e7f4      	b.n	80060fe <_printf_float+0x43e>

08006114 <_printf_common>:
 8006114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	4616      	mov	r6, r2
 800611a:	4698      	mov	r8, r3
 800611c:	688a      	ldr	r2, [r1, #8]
 800611e:	690b      	ldr	r3, [r1, #16]
 8006120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006124:	4293      	cmp	r3, r2
 8006126:	bfb8      	it	lt
 8006128:	4613      	movlt	r3, r2
 800612a:	6033      	str	r3, [r6, #0]
 800612c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006130:	4607      	mov	r7, r0
 8006132:	460c      	mov	r4, r1
 8006134:	b10a      	cbz	r2, 800613a <_printf_common+0x26>
 8006136:	3301      	adds	r3, #1
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	0699      	lsls	r1, r3, #26
 800613e:	bf42      	ittt	mi
 8006140:	6833      	ldrmi	r3, [r6, #0]
 8006142:	3302      	addmi	r3, #2
 8006144:	6033      	strmi	r3, [r6, #0]
 8006146:	6825      	ldr	r5, [r4, #0]
 8006148:	f015 0506 	ands.w	r5, r5, #6
 800614c:	d106      	bne.n	800615c <_printf_common+0x48>
 800614e:	f104 0a19 	add.w	sl, r4, #25
 8006152:	68e3      	ldr	r3, [r4, #12]
 8006154:	6832      	ldr	r2, [r6, #0]
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	42ab      	cmp	r3, r5
 800615a:	dc26      	bgt.n	80061aa <_printf_common+0x96>
 800615c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	3b00      	subs	r3, #0
 8006164:	bf18      	it	ne
 8006166:	2301      	movne	r3, #1
 8006168:	0692      	lsls	r2, r2, #26
 800616a:	d42b      	bmi.n	80061c4 <_printf_common+0xb0>
 800616c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006170:	4641      	mov	r1, r8
 8006172:	4638      	mov	r0, r7
 8006174:	47c8      	blx	r9
 8006176:	3001      	adds	r0, #1
 8006178:	d01e      	beq.n	80061b8 <_printf_common+0xa4>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	f003 0306 	and.w	r3, r3, #6
 8006182:	2b04      	cmp	r3, #4
 8006184:	bf02      	ittt	eq
 8006186:	68e5      	ldreq	r5, [r4, #12]
 8006188:	6833      	ldreq	r3, [r6, #0]
 800618a:	1aed      	subeq	r5, r5, r3
 800618c:	68a3      	ldr	r3, [r4, #8]
 800618e:	bf0c      	ite	eq
 8006190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006194:	2500      	movne	r5, #0
 8006196:	4293      	cmp	r3, r2
 8006198:	bfc4      	itt	gt
 800619a:	1a9b      	subgt	r3, r3, r2
 800619c:	18ed      	addgt	r5, r5, r3
 800619e:	2600      	movs	r6, #0
 80061a0:	341a      	adds	r4, #26
 80061a2:	42b5      	cmp	r5, r6
 80061a4:	d11a      	bne.n	80061dc <_printf_common+0xc8>
 80061a6:	2000      	movs	r0, #0
 80061a8:	e008      	b.n	80061bc <_printf_common+0xa8>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4652      	mov	r2, sl
 80061ae:	4641      	mov	r1, r8
 80061b0:	4638      	mov	r0, r7
 80061b2:	47c8      	blx	r9
 80061b4:	3001      	adds	r0, #1
 80061b6:	d103      	bne.n	80061c0 <_printf_common+0xac>
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c0:	3501      	adds	r5, #1
 80061c2:	e7c6      	b.n	8006152 <_printf_common+0x3e>
 80061c4:	18e1      	adds	r1, r4, r3
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	2030      	movs	r0, #48	@ 0x30
 80061ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ce:	4422      	add	r2, r4
 80061d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061d8:	3302      	adds	r3, #2
 80061da:	e7c7      	b.n	800616c <_printf_common+0x58>
 80061dc:	2301      	movs	r3, #1
 80061de:	4622      	mov	r2, r4
 80061e0:	4641      	mov	r1, r8
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c8      	blx	r9
 80061e6:	3001      	adds	r0, #1
 80061e8:	d0e6      	beq.n	80061b8 <_printf_common+0xa4>
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7d9      	b.n	80061a2 <_printf_common+0x8e>
	...

080061f0 <_printf_i>:
 80061f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	7e0f      	ldrb	r7, [r1, #24]
 80061f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061f8:	2f78      	cmp	r7, #120	@ 0x78
 80061fa:	4691      	mov	r9, r2
 80061fc:	4680      	mov	r8, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	469a      	mov	sl, r3
 8006202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006206:	d807      	bhi.n	8006218 <_printf_i+0x28>
 8006208:	2f62      	cmp	r7, #98	@ 0x62
 800620a:	d80a      	bhi.n	8006222 <_printf_i+0x32>
 800620c:	2f00      	cmp	r7, #0
 800620e:	f000 80d2 	beq.w	80063b6 <_printf_i+0x1c6>
 8006212:	2f58      	cmp	r7, #88	@ 0x58
 8006214:	f000 80b9 	beq.w	800638a <_printf_i+0x19a>
 8006218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800621c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006220:	e03a      	b.n	8006298 <_printf_i+0xa8>
 8006222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006226:	2b15      	cmp	r3, #21
 8006228:	d8f6      	bhi.n	8006218 <_printf_i+0x28>
 800622a:	a101      	add	r1, pc, #4	@ (adr r1, 8006230 <_printf_i+0x40>)
 800622c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006230:	08006289 	.word	0x08006289
 8006234:	0800629d 	.word	0x0800629d
 8006238:	08006219 	.word	0x08006219
 800623c:	08006219 	.word	0x08006219
 8006240:	08006219 	.word	0x08006219
 8006244:	08006219 	.word	0x08006219
 8006248:	0800629d 	.word	0x0800629d
 800624c:	08006219 	.word	0x08006219
 8006250:	08006219 	.word	0x08006219
 8006254:	08006219 	.word	0x08006219
 8006258:	08006219 	.word	0x08006219
 800625c:	0800639d 	.word	0x0800639d
 8006260:	080062c7 	.word	0x080062c7
 8006264:	08006357 	.word	0x08006357
 8006268:	08006219 	.word	0x08006219
 800626c:	08006219 	.word	0x08006219
 8006270:	080063bf 	.word	0x080063bf
 8006274:	08006219 	.word	0x08006219
 8006278:	080062c7 	.word	0x080062c7
 800627c:	08006219 	.word	0x08006219
 8006280:	08006219 	.word	0x08006219
 8006284:	0800635f 	.word	0x0800635f
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6032      	str	r2, [r6, #0]
 8006290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006298:	2301      	movs	r3, #1
 800629a:	e09d      	b.n	80063d8 <_printf_i+0x1e8>
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	6820      	ldr	r0, [r4, #0]
 80062a0:	1d19      	adds	r1, r3, #4
 80062a2:	6031      	str	r1, [r6, #0]
 80062a4:	0606      	lsls	r6, r0, #24
 80062a6:	d501      	bpl.n	80062ac <_printf_i+0xbc>
 80062a8:	681d      	ldr	r5, [r3, #0]
 80062aa:	e003      	b.n	80062b4 <_printf_i+0xc4>
 80062ac:	0645      	lsls	r5, r0, #25
 80062ae:	d5fb      	bpl.n	80062a8 <_printf_i+0xb8>
 80062b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_i+0xd0>
 80062b8:	232d      	movs	r3, #45	@ 0x2d
 80062ba:	426d      	negs	r5, r5
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c0:	4859      	ldr	r0, [pc, #356]	@ (8006428 <_printf_i+0x238>)
 80062c2:	230a      	movs	r3, #10
 80062c4:	e011      	b.n	80062ea <_printf_i+0xfa>
 80062c6:	6821      	ldr	r1, [r4, #0]
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	0608      	lsls	r0, r1, #24
 80062cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80062d0:	d402      	bmi.n	80062d8 <_printf_i+0xe8>
 80062d2:	0649      	lsls	r1, r1, #25
 80062d4:	bf48      	it	mi
 80062d6:	b2ad      	uxthmi	r5, r5
 80062d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80062da:	4853      	ldr	r0, [pc, #332]	@ (8006428 <_printf_i+0x238>)
 80062dc:	6033      	str	r3, [r6, #0]
 80062de:	bf14      	ite	ne
 80062e0:	230a      	movne	r3, #10
 80062e2:	2308      	moveq	r3, #8
 80062e4:	2100      	movs	r1, #0
 80062e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ea:	6866      	ldr	r6, [r4, #4]
 80062ec:	60a6      	str	r6, [r4, #8]
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	bfa2      	ittt	ge
 80062f2:	6821      	ldrge	r1, [r4, #0]
 80062f4:	f021 0104 	bicge.w	r1, r1, #4
 80062f8:	6021      	strge	r1, [r4, #0]
 80062fa:	b90d      	cbnz	r5, 8006300 <_printf_i+0x110>
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	d04b      	beq.n	8006398 <_printf_i+0x1a8>
 8006300:	4616      	mov	r6, r2
 8006302:	fbb5 f1f3 	udiv	r1, r5, r3
 8006306:	fb03 5711 	mls	r7, r3, r1, r5
 800630a:	5dc7      	ldrb	r7, [r0, r7]
 800630c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006310:	462f      	mov	r7, r5
 8006312:	42bb      	cmp	r3, r7
 8006314:	460d      	mov	r5, r1
 8006316:	d9f4      	bls.n	8006302 <_printf_i+0x112>
 8006318:	2b08      	cmp	r3, #8
 800631a:	d10b      	bne.n	8006334 <_printf_i+0x144>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	07df      	lsls	r7, r3, #31
 8006320:	d508      	bpl.n	8006334 <_printf_i+0x144>
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	6861      	ldr	r1, [r4, #4]
 8006326:	4299      	cmp	r1, r3
 8006328:	bfde      	ittt	le
 800632a:	2330      	movle	r3, #48	@ 0x30
 800632c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006334:	1b92      	subs	r2, r2, r6
 8006336:	6122      	str	r2, [r4, #16]
 8006338:	f8cd a000 	str.w	sl, [sp]
 800633c:	464b      	mov	r3, r9
 800633e:	aa03      	add	r2, sp, #12
 8006340:	4621      	mov	r1, r4
 8006342:	4640      	mov	r0, r8
 8006344:	f7ff fee6 	bl	8006114 <_printf_common>
 8006348:	3001      	adds	r0, #1
 800634a:	d14a      	bne.n	80063e2 <_printf_i+0x1f2>
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	b004      	add	sp, #16
 8006352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	f043 0320 	orr.w	r3, r3, #32
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	4833      	ldr	r0, [pc, #204]	@ (800642c <_printf_i+0x23c>)
 8006360:	2778      	movs	r7, #120	@ 0x78
 8006362:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	6831      	ldr	r1, [r6, #0]
 800636a:	061f      	lsls	r7, r3, #24
 800636c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006370:	d402      	bmi.n	8006378 <_printf_i+0x188>
 8006372:	065f      	lsls	r7, r3, #25
 8006374:	bf48      	it	mi
 8006376:	b2ad      	uxthmi	r5, r5
 8006378:	6031      	str	r1, [r6, #0]
 800637a:	07d9      	lsls	r1, r3, #31
 800637c:	bf44      	itt	mi
 800637e:	f043 0320 	orrmi.w	r3, r3, #32
 8006382:	6023      	strmi	r3, [r4, #0]
 8006384:	b11d      	cbz	r5, 800638e <_printf_i+0x19e>
 8006386:	2310      	movs	r3, #16
 8006388:	e7ac      	b.n	80062e4 <_printf_i+0xf4>
 800638a:	4827      	ldr	r0, [pc, #156]	@ (8006428 <_printf_i+0x238>)
 800638c:	e7e9      	b.n	8006362 <_printf_i+0x172>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	f023 0320 	bic.w	r3, r3, #32
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	e7f6      	b.n	8006386 <_printf_i+0x196>
 8006398:	4616      	mov	r6, r2
 800639a:	e7bd      	b.n	8006318 <_printf_i+0x128>
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	6825      	ldr	r5, [r4, #0]
 80063a0:	6961      	ldr	r1, [r4, #20]
 80063a2:	1d18      	adds	r0, r3, #4
 80063a4:	6030      	str	r0, [r6, #0]
 80063a6:	062e      	lsls	r6, r5, #24
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0x1c0>
 80063ac:	6019      	str	r1, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <_printf_i+0x1c6>
 80063b0:	0668      	lsls	r0, r5, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0x1bc>
 80063b4:	8019      	strh	r1, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	4616      	mov	r6, r2
 80063bc:	e7bc      	b.n	8006338 <_printf_i+0x148>
 80063be:	6833      	ldr	r3, [r6, #0]
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	6032      	str	r2, [r6, #0]
 80063c4:	681e      	ldr	r6, [r3, #0]
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7f9 ff08 	bl	80001e0 <memchr>
 80063d0:	b108      	cbz	r0, 80063d6 <_printf_i+0x1e6>
 80063d2:	1b80      	subs	r0, r0, r6
 80063d4:	6060      	str	r0, [r4, #4]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	2300      	movs	r3, #0
 80063dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e0:	e7aa      	b.n	8006338 <_printf_i+0x148>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	4632      	mov	r2, r6
 80063e6:	4649      	mov	r1, r9
 80063e8:	4640      	mov	r0, r8
 80063ea:	47d0      	blx	sl
 80063ec:	3001      	adds	r0, #1
 80063ee:	d0ad      	beq.n	800634c <_printf_i+0x15c>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	079b      	lsls	r3, r3, #30
 80063f4:	d413      	bmi.n	800641e <_printf_i+0x22e>
 80063f6:	68e0      	ldr	r0, [r4, #12]
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	4298      	cmp	r0, r3
 80063fc:	bfb8      	it	lt
 80063fe:	4618      	movlt	r0, r3
 8006400:	e7a6      	b.n	8006350 <_printf_i+0x160>
 8006402:	2301      	movs	r3, #1
 8006404:	4632      	mov	r2, r6
 8006406:	4649      	mov	r1, r9
 8006408:	4640      	mov	r0, r8
 800640a:	47d0      	blx	sl
 800640c:	3001      	adds	r0, #1
 800640e:	d09d      	beq.n	800634c <_printf_i+0x15c>
 8006410:	3501      	adds	r5, #1
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	9903      	ldr	r1, [sp, #12]
 8006416:	1a5b      	subs	r3, r3, r1
 8006418:	42ab      	cmp	r3, r5
 800641a:	dcf2      	bgt.n	8006402 <_printf_i+0x212>
 800641c:	e7eb      	b.n	80063f6 <_printf_i+0x206>
 800641e:	2500      	movs	r5, #0
 8006420:	f104 0619 	add.w	r6, r4, #25
 8006424:	e7f5      	b.n	8006412 <_printf_i+0x222>
 8006426:	bf00      	nop
 8006428:	0800a346 	.word	0x0800a346
 800642c:	0800a357 	.word	0x0800a357

08006430 <_scanf_float>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	b087      	sub	sp, #28
 8006436:	4617      	mov	r7, r2
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	688b      	ldr	r3, [r1, #8]
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006442:	bf81      	itttt	hi
 8006444:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006448:	eb03 0b05 	addhi.w	fp, r3, r5
 800644c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006450:	608b      	strhi	r3, [r1, #8]
 8006452:	680b      	ldr	r3, [r1, #0]
 8006454:	460a      	mov	r2, r1
 8006456:	f04f 0500 	mov.w	r5, #0
 800645a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800645e:	f842 3b1c 	str.w	r3, [r2], #28
 8006462:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006466:	4680      	mov	r8, r0
 8006468:	460c      	mov	r4, r1
 800646a:	bf98      	it	ls
 800646c:	f04f 0b00 	movls.w	fp, #0
 8006470:	9201      	str	r2, [sp, #4]
 8006472:	4616      	mov	r6, r2
 8006474:	46aa      	mov	sl, r5
 8006476:	46a9      	mov	r9, r5
 8006478:	9502      	str	r5, [sp, #8]
 800647a:	68a2      	ldr	r2, [r4, #8]
 800647c:	b152      	cbz	r2, 8006494 <_scanf_float+0x64>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b4e      	cmp	r3, #78	@ 0x4e
 8006484:	d864      	bhi.n	8006550 <_scanf_float+0x120>
 8006486:	2b40      	cmp	r3, #64	@ 0x40
 8006488:	d83c      	bhi.n	8006504 <_scanf_float+0xd4>
 800648a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800648e:	b2c8      	uxtb	r0, r1
 8006490:	280e      	cmp	r0, #14
 8006492:	d93a      	bls.n	800650a <_scanf_float+0xda>
 8006494:	f1b9 0f00 	cmp.w	r9, #0
 8006498:	d003      	beq.n	80064a2 <_scanf_float+0x72>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064a6:	f1ba 0f01 	cmp.w	sl, #1
 80064aa:	f200 8117 	bhi.w	80066dc <_scanf_float+0x2ac>
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	429e      	cmp	r6, r3
 80064b2:	f200 8108 	bhi.w	80066c6 <_scanf_float+0x296>
 80064b6:	2001      	movs	r0, #1
 80064b8:	b007      	add	sp, #28
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064be:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80064c2:	2a0d      	cmp	r2, #13
 80064c4:	d8e6      	bhi.n	8006494 <_scanf_float+0x64>
 80064c6:	a101      	add	r1, pc, #4	@ (adr r1, 80064cc <_scanf_float+0x9c>)
 80064c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064cc:	08006613 	.word	0x08006613
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	08006495 	.word	0x08006495
 80064dc:	08006673 	.word	0x08006673
 80064e0:	0800664b 	.word	0x0800664b
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	08006621 	.word	0x08006621
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006495 	.word	0x08006495
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	080065d9 	.word	0x080065d9
 8006504:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006508:	e7db      	b.n	80064c2 <_scanf_float+0x92>
 800650a:	290e      	cmp	r1, #14
 800650c:	d8c2      	bhi.n	8006494 <_scanf_float+0x64>
 800650e:	a001      	add	r0, pc, #4	@ (adr r0, 8006514 <_scanf_float+0xe4>)
 8006510:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006514:	080065c9 	.word	0x080065c9
 8006518:	08006495 	.word	0x08006495
 800651c:	080065c9 	.word	0x080065c9
 8006520:	0800665f 	.word	0x0800665f
 8006524:	08006495 	.word	0x08006495
 8006528:	08006571 	.word	0x08006571
 800652c:	080065af 	.word	0x080065af
 8006530:	080065af 	.word	0x080065af
 8006534:	080065af 	.word	0x080065af
 8006538:	080065af 	.word	0x080065af
 800653c:	080065af 	.word	0x080065af
 8006540:	080065af 	.word	0x080065af
 8006544:	080065af 	.word	0x080065af
 8006548:	080065af 	.word	0x080065af
 800654c:	080065af 	.word	0x080065af
 8006550:	2b6e      	cmp	r3, #110	@ 0x6e
 8006552:	d809      	bhi.n	8006568 <_scanf_float+0x138>
 8006554:	2b60      	cmp	r3, #96	@ 0x60
 8006556:	d8b2      	bhi.n	80064be <_scanf_float+0x8e>
 8006558:	2b54      	cmp	r3, #84	@ 0x54
 800655a:	d07b      	beq.n	8006654 <_scanf_float+0x224>
 800655c:	2b59      	cmp	r3, #89	@ 0x59
 800655e:	d199      	bne.n	8006494 <_scanf_float+0x64>
 8006560:	2d07      	cmp	r5, #7
 8006562:	d197      	bne.n	8006494 <_scanf_float+0x64>
 8006564:	2508      	movs	r5, #8
 8006566:	e02c      	b.n	80065c2 <_scanf_float+0x192>
 8006568:	2b74      	cmp	r3, #116	@ 0x74
 800656a:	d073      	beq.n	8006654 <_scanf_float+0x224>
 800656c:	2b79      	cmp	r3, #121	@ 0x79
 800656e:	e7f6      	b.n	800655e <_scanf_float+0x12e>
 8006570:	6821      	ldr	r1, [r4, #0]
 8006572:	05c8      	lsls	r0, r1, #23
 8006574:	d51b      	bpl.n	80065ae <_scanf_float+0x17e>
 8006576:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800657a:	6021      	str	r1, [r4, #0]
 800657c:	f109 0901 	add.w	r9, r9, #1
 8006580:	f1bb 0f00 	cmp.w	fp, #0
 8006584:	d003      	beq.n	800658e <_scanf_float+0x15e>
 8006586:	3201      	adds	r2, #1
 8006588:	f10b 3bff 	add.w	fp, fp, #4294967295
 800658c:	60a2      	str	r2, [r4, #8]
 800658e:	68a3      	ldr	r3, [r4, #8]
 8006590:	3b01      	subs	r3, #1
 8006592:	60a3      	str	r3, [r4, #8]
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	3301      	adds	r3, #1
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3b01      	subs	r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
 80065a2:	f340 8087 	ble.w	80066b4 <_scanf_float+0x284>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	e765      	b.n	800647a <_scanf_float+0x4a>
 80065ae:	eb1a 0105 	adds.w	r1, sl, r5
 80065b2:	f47f af6f 	bne.w	8006494 <_scanf_float+0x64>
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80065bc:	6022      	str	r2, [r4, #0]
 80065be:	460d      	mov	r5, r1
 80065c0:	468a      	mov	sl, r1
 80065c2:	f806 3b01 	strb.w	r3, [r6], #1
 80065c6:	e7e2      	b.n	800658e <_scanf_float+0x15e>
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	0610      	lsls	r0, r2, #24
 80065cc:	f57f af62 	bpl.w	8006494 <_scanf_float+0x64>
 80065d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	e7f4      	b.n	80065c2 <_scanf_float+0x192>
 80065d8:	f1ba 0f00 	cmp.w	sl, #0
 80065dc:	d10e      	bne.n	80065fc <_scanf_float+0x1cc>
 80065de:	f1b9 0f00 	cmp.w	r9, #0
 80065e2:	d10e      	bne.n	8006602 <_scanf_float+0x1d2>
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065ea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065ee:	d108      	bne.n	8006602 <_scanf_float+0x1d2>
 80065f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	f04f 0a01 	mov.w	sl, #1
 80065fa:	e7e2      	b.n	80065c2 <_scanf_float+0x192>
 80065fc:	f1ba 0f02 	cmp.w	sl, #2
 8006600:	d055      	beq.n	80066ae <_scanf_float+0x27e>
 8006602:	2d01      	cmp	r5, #1
 8006604:	d002      	beq.n	800660c <_scanf_float+0x1dc>
 8006606:	2d04      	cmp	r5, #4
 8006608:	f47f af44 	bne.w	8006494 <_scanf_float+0x64>
 800660c:	3501      	adds	r5, #1
 800660e:	b2ed      	uxtb	r5, r5
 8006610:	e7d7      	b.n	80065c2 <_scanf_float+0x192>
 8006612:	f1ba 0f01 	cmp.w	sl, #1
 8006616:	f47f af3d 	bne.w	8006494 <_scanf_float+0x64>
 800661a:	f04f 0a02 	mov.w	sl, #2
 800661e:	e7d0      	b.n	80065c2 <_scanf_float+0x192>
 8006620:	b97d      	cbnz	r5, 8006642 <_scanf_float+0x212>
 8006622:	f1b9 0f00 	cmp.w	r9, #0
 8006626:	f47f af38 	bne.w	800649a <_scanf_float+0x6a>
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006630:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006634:	f040 8108 	bne.w	8006848 <_scanf_float+0x418>
 8006638:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800663c:	6022      	str	r2, [r4, #0]
 800663e:	2501      	movs	r5, #1
 8006640:	e7bf      	b.n	80065c2 <_scanf_float+0x192>
 8006642:	2d03      	cmp	r5, #3
 8006644:	d0e2      	beq.n	800660c <_scanf_float+0x1dc>
 8006646:	2d05      	cmp	r5, #5
 8006648:	e7de      	b.n	8006608 <_scanf_float+0x1d8>
 800664a:	2d02      	cmp	r5, #2
 800664c:	f47f af22 	bne.w	8006494 <_scanf_float+0x64>
 8006650:	2503      	movs	r5, #3
 8006652:	e7b6      	b.n	80065c2 <_scanf_float+0x192>
 8006654:	2d06      	cmp	r5, #6
 8006656:	f47f af1d 	bne.w	8006494 <_scanf_float+0x64>
 800665a:	2507      	movs	r5, #7
 800665c:	e7b1      	b.n	80065c2 <_scanf_float+0x192>
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	0591      	lsls	r1, r2, #22
 8006662:	f57f af17 	bpl.w	8006494 <_scanf_float+0x64>
 8006666:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006670:	e7a7      	b.n	80065c2 <_scanf_float+0x192>
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006678:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800667c:	d006      	beq.n	800668c <_scanf_float+0x25c>
 800667e:	0550      	lsls	r0, r2, #21
 8006680:	f57f af08 	bpl.w	8006494 <_scanf_float+0x64>
 8006684:	f1b9 0f00 	cmp.w	r9, #0
 8006688:	f000 80de 	beq.w	8006848 <_scanf_float+0x418>
 800668c:	0591      	lsls	r1, r2, #22
 800668e:	bf58      	it	pl
 8006690:	9902      	ldrpl	r1, [sp, #8]
 8006692:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006696:	bf58      	it	pl
 8006698:	eba9 0101 	subpl.w	r1, r9, r1
 800669c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80066a0:	bf58      	it	pl
 80066a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80066a6:	6022      	str	r2, [r4, #0]
 80066a8:	f04f 0900 	mov.w	r9, #0
 80066ac:	e789      	b.n	80065c2 <_scanf_float+0x192>
 80066ae:	f04f 0a03 	mov.w	sl, #3
 80066b2:	e786      	b.n	80065c2 <_scanf_float+0x192>
 80066b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80066b8:	4639      	mov	r1, r7
 80066ba:	4640      	mov	r0, r8
 80066bc:	4798      	blx	r3
 80066be:	2800      	cmp	r0, #0
 80066c0:	f43f aedb 	beq.w	800647a <_scanf_float+0x4a>
 80066c4:	e6e6      	b.n	8006494 <_scanf_float+0x64>
 80066c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066ce:	463a      	mov	r2, r7
 80066d0:	4640      	mov	r0, r8
 80066d2:	4798      	blx	r3
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	6123      	str	r3, [r4, #16]
 80066da:	e6e8      	b.n	80064ae <_scanf_float+0x7e>
 80066dc:	1e6b      	subs	r3, r5, #1
 80066de:	2b06      	cmp	r3, #6
 80066e0:	d824      	bhi.n	800672c <_scanf_float+0x2fc>
 80066e2:	2d02      	cmp	r5, #2
 80066e4:	d836      	bhi.n	8006754 <_scanf_float+0x324>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	429e      	cmp	r6, r3
 80066ea:	f67f aee4 	bls.w	80064b6 <_scanf_float+0x86>
 80066ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066f6:	463a      	mov	r2, r7
 80066f8:	4640      	mov	r0, r8
 80066fa:	4798      	blx	r3
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	e7f0      	b.n	80066e6 <_scanf_float+0x2b6>
 8006704:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006708:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800670c:	463a      	mov	r2, r7
 800670e:	4640      	mov	r0, r8
 8006710:	4798      	blx	r3
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	3b01      	subs	r3, #1
 8006716:	6123      	str	r3, [r4, #16]
 8006718:	f10a 3aff 	add.w	sl, sl, #4294967295
 800671c:	fa5f fa8a 	uxtb.w	sl, sl
 8006720:	f1ba 0f02 	cmp.w	sl, #2
 8006724:	d1ee      	bne.n	8006704 <_scanf_float+0x2d4>
 8006726:	3d03      	subs	r5, #3
 8006728:	b2ed      	uxtb	r5, r5
 800672a:	1b76      	subs	r6, r6, r5
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	05da      	lsls	r2, r3, #23
 8006730:	d530      	bpl.n	8006794 <_scanf_float+0x364>
 8006732:	055b      	lsls	r3, r3, #21
 8006734:	d511      	bpl.n	800675a <_scanf_float+0x32a>
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	429e      	cmp	r6, r3
 800673a:	f67f aebc 	bls.w	80064b6 <_scanf_float+0x86>
 800673e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006746:	463a      	mov	r2, r7
 8006748:	4640      	mov	r0, r8
 800674a:	4798      	blx	r3
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	3b01      	subs	r3, #1
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	e7f0      	b.n	8006736 <_scanf_float+0x306>
 8006754:	46aa      	mov	sl, r5
 8006756:	46b3      	mov	fp, r6
 8006758:	e7de      	b.n	8006718 <_scanf_float+0x2e8>
 800675a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	2965      	cmp	r1, #101	@ 0x65
 8006762:	f103 33ff 	add.w	r3, r3, #4294967295
 8006766:	f106 35ff 	add.w	r5, r6, #4294967295
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	d00c      	beq.n	8006788 <_scanf_float+0x358>
 800676e:	2945      	cmp	r1, #69	@ 0x45
 8006770:	d00a      	beq.n	8006788 <_scanf_float+0x358>
 8006772:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006776:	463a      	mov	r2, r7
 8006778:	4640      	mov	r0, r8
 800677a:	4798      	blx	r3
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006782:	3b01      	subs	r3, #1
 8006784:	1eb5      	subs	r5, r6, #2
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800678c:	463a      	mov	r2, r7
 800678e:	4640      	mov	r0, r8
 8006790:	4798      	blx	r3
 8006792:	462e      	mov	r6, r5
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	f012 0210 	ands.w	r2, r2, #16
 800679a:	d001      	beq.n	80067a0 <_scanf_float+0x370>
 800679c:	2000      	movs	r0, #0
 800679e:	e68b      	b.n	80064b8 <_scanf_float+0x88>
 80067a0:	7032      	strb	r2, [r6, #0]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ac:	d11c      	bne.n	80067e8 <_scanf_float+0x3b8>
 80067ae:	9b02      	ldr	r3, [sp, #8]
 80067b0:	454b      	cmp	r3, r9
 80067b2:	eba3 0209 	sub.w	r2, r3, r9
 80067b6:	d123      	bne.n	8006800 <_scanf_float+0x3d0>
 80067b8:	9901      	ldr	r1, [sp, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	4640      	mov	r0, r8
 80067be:	f002 fc2b 	bl	8009018 <_strtod_r>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	6821      	ldr	r1, [r4, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f011 0f02 	tst.w	r1, #2
 80067cc:	ec57 6b10 	vmov	r6, r7, d0
 80067d0:	f103 0204 	add.w	r2, r3, #4
 80067d4:	d01f      	beq.n	8006816 <_scanf_float+0x3e6>
 80067d6:	9903      	ldr	r1, [sp, #12]
 80067d8:	600a      	str	r2, [r1, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	e9c3 6700 	strd	r6, r7, [r3]
 80067e0:	68e3      	ldr	r3, [r4, #12]
 80067e2:	3301      	adds	r3, #1
 80067e4:	60e3      	str	r3, [r4, #12]
 80067e6:	e7d9      	b.n	800679c <_scanf_float+0x36c>
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0e4      	beq.n	80067b8 <_scanf_float+0x388>
 80067ee:	9905      	ldr	r1, [sp, #20]
 80067f0:	230a      	movs	r3, #10
 80067f2:	3101      	adds	r1, #1
 80067f4:	4640      	mov	r0, r8
 80067f6:	f002 fc8f 	bl	8009118 <_strtol_r>
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	9e05      	ldr	r6, [sp, #20]
 80067fe:	1ac2      	subs	r2, r0, r3
 8006800:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006804:	429e      	cmp	r6, r3
 8006806:	bf28      	it	cs
 8006808:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800680c:	4910      	ldr	r1, [pc, #64]	@ (8006850 <_scanf_float+0x420>)
 800680e:	4630      	mov	r0, r6
 8006810:	f000 f918 	bl	8006a44 <siprintf>
 8006814:	e7d0      	b.n	80067b8 <_scanf_float+0x388>
 8006816:	f011 0f04 	tst.w	r1, #4
 800681a:	9903      	ldr	r1, [sp, #12]
 800681c:	600a      	str	r2, [r1, #0]
 800681e:	d1dc      	bne.n	80067da <_scanf_float+0x3aa>
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	4632      	mov	r2, r6
 8006824:	463b      	mov	r3, r7
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f987 	bl	8000b3c <__aeabi_dcmpun>
 800682e:	b128      	cbz	r0, 800683c <_scanf_float+0x40c>
 8006830:	4808      	ldr	r0, [pc, #32]	@ (8006854 <_scanf_float+0x424>)
 8006832:	f000 f9eb 	bl	8006c0c <nanf>
 8006836:	ed85 0a00 	vstr	s0, [r5]
 800683a:	e7d1      	b.n	80067e0 <_scanf_float+0x3b0>
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7fa f9da 	bl	8000bf8 <__aeabi_d2f>
 8006844:	6028      	str	r0, [r5, #0]
 8006846:	e7cb      	b.n	80067e0 <_scanf_float+0x3b0>
 8006848:	f04f 0900 	mov.w	r9, #0
 800684c:	e629      	b.n	80064a2 <_scanf_float+0x72>
 800684e:	bf00      	nop
 8006850:	0800a368 	.word	0x0800a368
 8006854:	0800a6fd 	.word	0x0800a6fd

08006858 <std>:
 8006858:	2300      	movs	r3, #0
 800685a:	b510      	push	{r4, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	e9c0 3300 	strd	r3, r3, [r0]
 8006862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006866:	6083      	str	r3, [r0, #8]
 8006868:	8181      	strh	r1, [r0, #12]
 800686a:	6643      	str	r3, [r0, #100]	@ 0x64
 800686c:	81c2      	strh	r2, [r0, #14]
 800686e:	6183      	str	r3, [r0, #24]
 8006870:	4619      	mov	r1, r3
 8006872:	2208      	movs	r2, #8
 8006874:	305c      	adds	r0, #92	@ 0x5c
 8006876:	f000 f948 	bl	8006b0a <memset>
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <std+0x58>)
 800687c:	6263      	str	r3, [r4, #36]	@ 0x24
 800687e:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <std+0x5c>)
 8006880:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <std+0x60>)
 8006884:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <std+0x64>)
 8006888:	6323      	str	r3, [r4, #48]	@ 0x30
 800688a:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <std+0x68>)
 800688c:	6224      	str	r4, [r4, #32]
 800688e:	429c      	cmp	r4, r3
 8006890:	d006      	beq.n	80068a0 <std+0x48>
 8006892:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006896:	4294      	cmp	r4, r2
 8006898:	d002      	beq.n	80068a0 <std+0x48>
 800689a:	33d0      	adds	r3, #208	@ 0xd0
 800689c:	429c      	cmp	r4, r3
 800689e:	d105      	bne.n	80068ac <std+0x54>
 80068a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a8:	f000 b9ac 	b.w	8006c04 <__retarget_lock_init_recursive>
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	bf00      	nop
 80068b0:	08006a85 	.word	0x08006a85
 80068b4:	08006aa7 	.word	0x08006aa7
 80068b8:	08006adf 	.word	0x08006adf
 80068bc:	08006b03 	.word	0x08006b03
 80068c0:	20000380 	.word	0x20000380

080068c4 <stdio_exit_handler>:
 80068c4:	4a02      	ldr	r2, [pc, #8]	@ (80068d0 <stdio_exit_handler+0xc>)
 80068c6:	4903      	ldr	r1, [pc, #12]	@ (80068d4 <stdio_exit_handler+0x10>)
 80068c8:	4803      	ldr	r0, [pc, #12]	@ (80068d8 <stdio_exit_handler+0x14>)
 80068ca:	f000 b869 	b.w	80069a0 <_fwalk_sglue>
 80068ce:	bf00      	nop
 80068d0:	20000028 	.word	0x20000028
 80068d4:	080094d5 	.word	0x080094d5
 80068d8:	20000038 	.word	0x20000038

080068dc <cleanup_stdio>:
 80068dc:	6841      	ldr	r1, [r0, #4]
 80068de:	4b0c      	ldr	r3, [pc, #48]	@ (8006910 <cleanup_stdio+0x34>)
 80068e0:	4299      	cmp	r1, r3
 80068e2:	b510      	push	{r4, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	d001      	beq.n	80068ec <cleanup_stdio+0x10>
 80068e8:	f002 fdf4 	bl	80094d4 <_fflush_r>
 80068ec:	68a1      	ldr	r1, [r4, #8]
 80068ee:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <cleanup_stdio+0x38>)
 80068f0:	4299      	cmp	r1, r3
 80068f2:	d002      	beq.n	80068fa <cleanup_stdio+0x1e>
 80068f4:	4620      	mov	r0, r4
 80068f6:	f002 fded 	bl	80094d4 <_fflush_r>
 80068fa:	68e1      	ldr	r1, [r4, #12]
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <cleanup_stdio+0x3c>)
 80068fe:	4299      	cmp	r1, r3
 8006900:	d004      	beq.n	800690c <cleanup_stdio+0x30>
 8006902:	4620      	mov	r0, r4
 8006904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006908:	f002 bde4 	b.w	80094d4 <_fflush_r>
 800690c:	bd10      	pop	{r4, pc}
 800690e:	bf00      	nop
 8006910:	20000380 	.word	0x20000380
 8006914:	200003e8 	.word	0x200003e8
 8006918:	20000450 	.word	0x20000450

0800691c <global_stdio_init.part.0>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <global_stdio_init.part.0+0x30>)
 8006920:	4c0b      	ldr	r4, [pc, #44]	@ (8006950 <global_stdio_init.part.0+0x34>)
 8006922:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <global_stdio_init.part.0+0x38>)
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	4620      	mov	r0, r4
 8006928:	2200      	movs	r2, #0
 800692a:	2104      	movs	r1, #4
 800692c:	f7ff ff94 	bl	8006858 <std>
 8006930:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006934:	2201      	movs	r2, #1
 8006936:	2109      	movs	r1, #9
 8006938:	f7ff ff8e 	bl	8006858 <std>
 800693c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006940:	2202      	movs	r2, #2
 8006942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006946:	2112      	movs	r1, #18
 8006948:	f7ff bf86 	b.w	8006858 <std>
 800694c:	200004b8 	.word	0x200004b8
 8006950:	20000380 	.word	0x20000380
 8006954:	080068c5 	.word	0x080068c5

08006958 <__sfp_lock_acquire>:
 8006958:	4801      	ldr	r0, [pc, #4]	@ (8006960 <__sfp_lock_acquire+0x8>)
 800695a:	f000 b954 	b.w	8006c06 <__retarget_lock_acquire_recursive>
 800695e:	bf00      	nop
 8006960:	200004c1 	.word	0x200004c1

08006964 <__sfp_lock_release>:
 8006964:	4801      	ldr	r0, [pc, #4]	@ (800696c <__sfp_lock_release+0x8>)
 8006966:	f000 b94f 	b.w	8006c08 <__retarget_lock_release_recursive>
 800696a:	bf00      	nop
 800696c:	200004c1 	.word	0x200004c1

08006970 <__sinit>:
 8006970:	b510      	push	{r4, lr}
 8006972:	4604      	mov	r4, r0
 8006974:	f7ff fff0 	bl	8006958 <__sfp_lock_acquire>
 8006978:	6a23      	ldr	r3, [r4, #32]
 800697a:	b11b      	cbz	r3, 8006984 <__sinit+0x14>
 800697c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006980:	f7ff bff0 	b.w	8006964 <__sfp_lock_release>
 8006984:	4b04      	ldr	r3, [pc, #16]	@ (8006998 <__sinit+0x28>)
 8006986:	6223      	str	r3, [r4, #32]
 8006988:	4b04      	ldr	r3, [pc, #16]	@ (800699c <__sinit+0x2c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f5      	bne.n	800697c <__sinit+0xc>
 8006990:	f7ff ffc4 	bl	800691c <global_stdio_init.part.0>
 8006994:	e7f2      	b.n	800697c <__sinit+0xc>
 8006996:	bf00      	nop
 8006998:	080068dd 	.word	0x080068dd
 800699c:	200004b8 	.word	0x200004b8

080069a0 <_fwalk_sglue>:
 80069a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a4:	4607      	mov	r7, r0
 80069a6:	4688      	mov	r8, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	2600      	movs	r6, #0
 80069ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069b0:	f1b9 0901 	subs.w	r9, r9, #1
 80069b4:	d505      	bpl.n	80069c2 <_fwalk_sglue+0x22>
 80069b6:	6824      	ldr	r4, [r4, #0]
 80069b8:	2c00      	cmp	r4, #0
 80069ba:	d1f7      	bne.n	80069ac <_fwalk_sglue+0xc>
 80069bc:	4630      	mov	r0, r6
 80069be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c2:	89ab      	ldrh	r3, [r5, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d907      	bls.n	80069d8 <_fwalk_sglue+0x38>
 80069c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069cc:	3301      	adds	r3, #1
 80069ce:	d003      	beq.n	80069d8 <_fwalk_sglue+0x38>
 80069d0:	4629      	mov	r1, r5
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c0      	blx	r8
 80069d6:	4306      	orrs	r6, r0
 80069d8:	3568      	adds	r5, #104	@ 0x68
 80069da:	e7e9      	b.n	80069b0 <_fwalk_sglue+0x10>

080069dc <sniprintf>:
 80069dc:	b40c      	push	{r2, r3}
 80069de:	b530      	push	{r4, r5, lr}
 80069e0:	4b17      	ldr	r3, [pc, #92]	@ (8006a40 <sniprintf+0x64>)
 80069e2:	1e0c      	subs	r4, r1, #0
 80069e4:	681d      	ldr	r5, [r3, #0]
 80069e6:	b09d      	sub	sp, #116	@ 0x74
 80069e8:	da08      	bge.n	80069fc <sniprintf+0x20>
 80069ea:	238b      	movs	r3, #139	@ 0x8b
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	f04f 30ff 	mov.w	r0, #4294967295
 80069f2:	b01d      	add	sp, #116	@ 0x74
 80069f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069f8:	b002      	add	sp, #8
 80069fa:	4770      	bx	lr
 80069fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a04:	bf14      	ite	ne
 8006a06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a0a:	4623      	moveq	r3, r4
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	9307      	str	r3, [sp, #28]
 8006a10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a14:	9002      	str	r0, [sp, #8]
 8006a16:	9006      	str	r0, [sp, #24]
 8006a18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a1e:	ab21      	add	r3, sp, #132	@ 0x84
 8006a20:	a902      	add	r1, sp, #8
 8006a22:	4628      	mov	r0, r5
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	f002 fbd5 	bl	80091d4 <_svfiprintf_r>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	bfbc      	itt	lt
 8006a2e:	238b      	movlt	r3, #139	@ 0x8b
 8006a30:	602b      	strlt	r3, [r5, #0]
 8006a32:	2c00      	cmp	r4, #0
 8006a34:	d0dd      	beq.n	80069f2 <sniprintf+0x16>
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e7d9      	b.n	80069f2 <sniprintf+0x16>
 8006a3e:	bf00      	nop
 8006a40:	20000034 	.word	0x20000034

08006a44 <siprintf>:
 8006a44:	b40e      	push	{r1, r2, r3}
 8006a46:	b500      	push	{lr}
 8006a48:	b09c      	sub	sp, #112	@ 0x70
 8006a4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a4c:	9002      	str	r0, [sp, #8]
 8006a4e:	9006      	str	r0, [sp, #24]
 8006a50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a54:	4809      	ldr	r0, [pc, #36]	@ (8006a7c <siprintf+0x38>)
 8006a56:	9107      	str	r1, [sp, #28]
 8006a58:	9104      	str	r1, [sp, #16]
 8006a5a:	4909      	ldr	r1, [pc, #36]	@ (8006a80 <siprintf+0x3c>)
 8006a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a60:	9105      	str	r1, [sp, #20]
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	a902      	add	r1, sp, #8
 8006a68:	f002 fbb4 	bl	80091d4 <_svfiprintf_r>
 8006a6c:	9b02      	ldr	r3, [sp, #8]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	b01c      	add	sp, #112	@ 0x70
 8006a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a78:	b003      	add	sp, #12
 8006a7a:	4770      	bx	lr
 8006a7c:	20000034 	.word	0x20000034
 8006a80:	ffff0208 	.word	0xffff0208

08006a84 <__sread>:
 8006a84:	b510      	push	{r4, lr}
 8006a86:	460c      	mov	r4, r1
 8006a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8c:	f000 f86c 	bl	8006b68 <_read_r>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	bfab      	itete	ge
 8006a94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a96:	89a3      	ldrhlt	r3, [r4, #12]
 8006a98:	181b      	addge	r3, r3, r0
 8006a9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a9e:	bfac      	ite	ge
 8006aa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006aa2:	81a3      	strhlt	r3, [r4, #12]
 8006aa4:	bd10      	pop	{r4, pc}

08006aa6 <__swrite>:
 8006aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aaa:	461f      	mov	r7, r3
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	05db      	lsls	r3, r3, #23
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	4616      	mov	r6, r2
 8006ab6:	d505      	bpl.n	8006ac4 <__swrite+0x1e>
 8006ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abc:	2302      	movs	r3, #2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f000 f840 	bl	8006b44 <_lseek_r>
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ada:	f000 b857 	b.w	8006b8c <_write_r>

08006ade <__sseek>:
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae6:	f000 f82d 	bl	8006b44 <_lseek_r>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	bf15      	itete	ne
 8006af0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006af2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006af6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006afa:	81a3      	strheq	r3, [r4, #12]
 8006afc:	bf18      	it	ne
 8006afe:	81a3      	strhne	r3, [r4, #12]
 8006b00:	bd10      	pop	{r4, pc}

08006b02 <__sclose>:
 8006b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b06:	f000 b80d 	b.w	8006b24 <_close_r>

08006b0a <memset>:
 8006b0a:	4402      	add	r2, r0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d100      	bne.n	8006b14 <memset+0xa>
 8006b12:	4770      	bx	lr
 8006b14:	f803 1b01 	strb.w	r1, [r3], #1
 8006b18:	e7f9      	b.n	8006b0e <memset+0x4>
	...

08006b1c <_localeconv_r>:
 8006b1c:	4800      	ldr	r0, [pc, #0]	@ (8006b20 <_localeconv_r+0x4>)
 8006b1e:	4770      	bx	lr
 8006b20:	20000174 	.word	0x20000174

08006b24 <_close_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d06      	ldr	r5, [pc, #24]	@ (8006b40 <_close_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	f7fa ff2c 	bl	800198c <_close>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_close_r+0x1a>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_close_r+0x1a>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	200004bc 	.word	0x200004bc

08006b44 <_lseek_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d07      	ldr	r5, [pc, #28]	@ (8006b64 <_lseek_r+0x20>)
 8006b48:	4604      	mov	r4, r0
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	602a      	str	r2, [r5, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f7fa ff41 	bl	80019da <_lseek>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_lseek_r+0x1e>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_lseek_r+0x1e>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	200004bc 	.word	0x200004bc

08006b68 <_read_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	@ (8006b88 <_read_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7fa fecf 	bl	800191a <_read>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_read_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_read_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	200004bc 	.word	0x200004bc

08006b8c <_write_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	@ (8006bac <_write_r+0x20>)
 8006b90:	4604      	mov	r4, r0
 8006b92:	4608      	mov	r0, r1
 8006b94:	4611      	mov	r1, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7fa feda 	bl	8001954 <_write>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_write_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_write_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	200004bc 	.word	0x200004bc

08006bb0 <__errno>:
 8006bb0:	4b01      	ldr	r3, [pc, #4]	@ (8006bb8 <__errno+0x8>)
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000034 	.word	0x20000034

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8006bf4 <__libc_init_array+0x38>)
 8006bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8006bf8 <__libc_init_array+0x3c>)
 8006bc2:	1b64      	subs	r4, r4, r5
 8006bc4:	10a4      	asrs	r4, r4, #2
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	42a6      	cmp	r6, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8006bfc <__libc_init_array+0x40>)
 8006bce:	4c0c      	ldr	r4, [pc, #48]	@ (8006c00 <__libc_init_array+0x44>)
 8006bd0:	f003 fb70 	bl	800a2b4 <_init>
 8006bd4:	1b64      	subs	r4, r4, r5
 8006bd6:	10a4      	asrs	r4, r4, #2
 8006bd8:	2600      	movs	r6, #0
 8006bda:	42a6      	cmp	r6, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be4:	4798      	blx	r3
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bee:	4798      	blx	r3
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	0800a768 	.word	0x0800a768
 8006bf8:	0800a768 	.word	0x0800a768
 8006bfc:	0800a768 	.word	0x0800a768
 8006c00:	0800a76c 	.word	0x0800a76c

08006c04 <__retarget_lock_init_recursive>:
 8006c04:	4770      	bx	lr

08006c06 <__retarget_lock_acquire_recursive>:
 8006c06:	4770      	bx	lr

08006c08 <__retarget_lock_release_recursive>:
 8006c08:	4770      	bx	lr
	...

08006c0c <nanf>:
 8006c0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006c14 <nanf+0x8>
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	7fc00000 	.word	0x7fc00000

08006c18 <quorem>:
 8006c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	6903      	ldr	r3, [r0, #16]
 8006c1e:	690c      	ldr	r4, [r1, #16]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	4607      	mov	r7, r0
 8006c24:	db7e      	blt.n	8006d24 <quorem+0x10c>
 8006c26:	3c01      	subs	r4, #1
 8006c28:	f101 0814 	add.w	r8, r1, #20
 8006c2c:	00a3      	lsls	r3, r4, #2
 8006c2e:	f100 0514 	add.w	r5, r0, #20
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c42:	3301      	adds	r3, #1
 8006c44:	429a      	cmp	r2, r3
 8006c46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c4e:	d32e      	bcc.n	8006cae <quorem+0x96>
 8006c50:	f04f 0a00 	mov.w	sl, #0
 8006c54:	46c4      	mov	ip, r8
 8006c56:	46ae      	mov	lr, r5
 8006c58:	46d3      	mov	fp, sl
 8006c5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c5e:	b298      	uxth	r0, r3
 8006c60:	fb06 a000 	mla	r0, r6, r0, sl
 8006c64:	0c02      	lsrs	r2, r0, #16
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	fb06 2303 	mla	r3, r6, r3, r2
 8006c6c:	f8de 2000 	ldr.w	r2, [lr]
 8006c70:	b280      	uxth	r0, r0
 8006c72:	b292      	uxth	r2, r2
 8006c74:	1a12      	subs	r2, r2, r0
 8006c76:	445a      	add	r2, fp
 8006c78:	f8de 0000 	ldr.w	r0, [lr]
 8006c7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c90:	45e1      	cmp	r9, ip
 8006c92:	f84e 2b04 	str.w	r2, [lr], #4
 8006c96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c9a:	d2de      	bcs.n	8006c5a <quorem+0x42>
 8006c9c:	9b00      	ldr	r3, [sp, #0]
 8006c9e:	58eb      	ldr	r3, [r5, r3]
 8006ca0:	b92b      	cbnz	r3, 8006cae <quorem+0x96>
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	3b04      	subs	r3, #4
 8006ca6:	429d      	cmp	r5, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	d32f      	bcc.n	8006d0c <quorem+0xf4>
 8006cac:	613c      	str	r4, [r7, #16]
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f001 f9c2 	bl	8008038 <__mcmp>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	db25      	blt.n	8006d04 <quorem+0xec>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	2000      	movs	r0, #0
 8006cbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cc0:	f8d1 c000 	ldr.w	ip, [r1]
 8006cc4:	fa1f fe82 	uxth.w	lr, r2
 8006cc8:	fa1f f38c 	uxth.w	r3, ip
 8006ccc:	eba3 030e 	sub.w	r3, r3, lr
 8006cd0:	4403      	add	r3, r0
 8006cd2:	0c12      	lsrs	r2, r2, #16
 8006cd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006cd8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce2:	45c1      	cmp	r9, r8
 8006ce4:	f841 3b04 	str.w	r3, [r1], #4
 8006ce8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cec:	d2e6      	bcs.n	8006cbc <quorem+0xa4>
 8006cee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cf6:	b922      	cbnz	r2, 8006d02 <quorem+0xea>
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	429d      	cmp	r5, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	d30b      	bcc.n	8006d18 <quorem+0x100>
 8006d00:	613c      	str	r4, [r7, #16]
 8006d02:	3601      	adds	r6, #1
 8006d04:	4630      	mov	r0, r6
 8006d06:	b003      	add	sp, #12
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	d1cb      	bne.n	8006cac <quorem+0x94>
 8006d14:	3c01      	subs	r4, #1
 8006d16:	e7c6      	b.n	8006ca6 <quorem+0x8e>
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	3b04      	subs	r3, #4
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	d1ef      	bne.n	8006d00 <quorem+0xe8>
 8006d20:	3c01      	subs	r4, #1
 8006d22:	e7ea      	b.n	8006cfa <quorem+0xe2>
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7ee      	b.n	8006d06 <quorem+0xee>

08006d28 <_dtoa_r>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	69c7      	ldr	r7, [r0, #28]
 8006d2e:	b099      	sub	sp, #100	@ 0x64
 8006d30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d34:	ec55 4b10 	vmov	r4, r5, d0
 8006d38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006d3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d3c:	4683      	mov	fp, r0
 8006d3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d42:	b97f      	cbnz	r7, 8006d64 <_dtoa_r+0x3c>
 8006d44:	2010      	movs	r0, #16
 8006d46:	f000 fdfd 	bl	8007944 <malloc>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d50:	b920      	cbnz	r0, 8006d5c <_dtoa_r+0x34>
 8006d52:	4ba7      	ldr	r3, [pc, #668]	@ (8006ff0 <_dtoa_r+0x2c8>)
 8006d54:	21ef      	movs	r1, #239	@ 0xef
 8006d56:	48a7      	ldr	r0, [pc, #668]	@ (8006ff4 <_dtoa_r+0x2cc>)
 8006d58:	f002 fc36 	bl	80095c8 <__assert_func>
 8006d5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d60:	6007      	str	r7, [r0, #0]
 8006d62:	60c7      	str	r7, [r0, #12]
 8006d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d68:	6819      	ldr	r1, [r3, #0]
 8006d6a:	b159      	cbz	r1, 8006d84 <_dtoa_r+0x5c>
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	604a      	str	r2, [r1, #4]
 8006d70:	2301      	movs	r3, #1
 8006d72:	4093      	lsls	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
 8006d76:	4658      	mov	r0, fp
 8006d78:	f000 feda 	bl	8007b30 <_Bfree>
 8006d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	1e2b      	subs	r3, r5, #0
 8006d86:	bfb9      	ittee	lt
 8006d88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d8c:	9303      	strlt	r3, [sp, #12]
 8006d8e:	2300      	movge	r3, #0
 8006d90:	6033      	strge	r3, [r6, #0]
 8006d92:	9f03      	ldr	r7, [sp, #12]
 8006d94:	4b98      	ldr	r3, [pc, #608]	@ (8006ff8 <_dtoa_r+0x2d0>)
 8006d96:	bfbc      	itt	lt
 8006d98:	2201      	movlt	r2, #1
 8006d9a:	6032      	strlt	r2, [r6, #0]
 8006d9c:	43bb      	bics	r3, r7
 8006d9e:	d112      	bne.n	8006dc6 <_dtoa_r+0x9e>
 8006da0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006da2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006dac:	4323      	orrs	r3, r4
 8006dae:	f000 854d 	beq.w	800784c <_dtoa_r+0xb24>
 8006db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006db4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800700c <_dtoa_r+0x2e4>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 854f 	beq.w	800785c <_dtoa_r+0xb34>
 8006dbe:	f10a 0303 	add.w	r3, sl, #3
 8006dc2:	f000 bd49 	b.w	8007858 <_dtoa_r+0xb30>
 8006dc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	ec51 0b17 	vmov	r0, r1, d7
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006dd6:	f7f9 fe7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dda:	4680      	mov	r8, r0
 8006ddc:	b158      	cbz	r0, 8006df6 <_dtoa_r+0xce>
 8006dde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006de0:	2301      	movs	r3, #1
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006de6:	b113      	cbz	r3, 8006dee <_dtoa_r+0xc6>
 8006de8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006dea:	4b84      	ldr	r3, [pc, #528]	@ (8006ffc <_dtoa_r+0x2d4>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007010 <_dtoa_r+0x2e8>
 8006df2:	f000 bd33 	b.w	800785c <_dtoa_r+0xb34>
 8006df6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006dfa:	aa16      	add	r2, sp, #88	@ 0x58
 8006dfc:	a917      	add	r1, sp, #92	@ 0x5c
 8006dfe:	4658      	mov	r0, fp
 8006e00:	f001 fa3a 	bl	8008278 <__d2b>
 8006e04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e08:	4681      	mov	r9, r0
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d077      	beq.n	8006efe <_dtoa_r+0x1d6>
 8006e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4b74      	ldr	r3, [pc, #464]	@ (8007000 <_dtoa_r+0x2d8>)
 8006e2e:	f7f9 fa33 	bl	8000298 <__aeabi_dsub>
 8006e32:	a369      	add	r3, pc, #420	@ (adr r3, 8006fd8 <_dtoa_r+0x2b0>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fbe6 	bl	8000608 <__aeabi_dmul>
 8006e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8006fe0 <_dtoa_r+0x2b8>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fa2b 	bl	800029c <__adddf3>
 8006e46:	4604      	mov	r4, r0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	f7f9 fb72 	bl	8000534 <__aeabi_i2d>
 8006e50:	a365      	add	r3, pc, #404	@ (adr r3, 8006fe8 <_dtoa_r+0x2c0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fbd7 	bl	8000608 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7f9 fa1b 	bl	800029c <__adddf3>
 8006e66:	4604      	mov	r4, r0
 8006e68:	460d      	mov	r5, r1
 8006e6a:	f7f9 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4607      	mov	r7, r0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	f7f9 fe38 	bl	8000aec <__aeabi_dcmplt>
 8006e7c:	b140      	cbz	r0, 8006e90 <_dtoa_r+0x168>
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f7f9 fb58 	bl	8000534 <__aeabi_i2d>
 8006e84:	4622      	mov	r2, r4
 8006e86:	462b      	mov	r3, r5
 8006e88:	f7f9 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e8c:	b900      	cbnz	r0, 8006e90 <_dtoa_r+0x168>
 8006e8e:	3f01      	subs	r7, #1
 8006e90:	2f16      	cmp	r7, #22
 8006e92:	d851      	bhi.n	8006f38 <_dtoa_r+0x210>
 8006e94:	4b5b      	ldr	r3, [pc, #364]	@ (8007004 <_dtoa_r+0x2dc>)
 8006e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ea2:	f7f9 fe23 	bl	8000aec <__aeabi_dcmplt>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d048      	beq.n	8006f3c <_dtoa_r+0x214>
 8006eaa:	3f01      	subs	r7, #1
 8006eac:	2300      	movs	r3, #0
 8006eae:	9312      	str	r3, [sp, #72]	@ 0x48
 8006eb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006eb2:	1b9b      	subs	r3, r3, r6
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	bf44      	itt	mi
 8006eb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ebc:	2300      	movmi	r3, #0
 8006ebe:	9208      	str	r2, [sp, #32]
 8006ec0:	bf54      	ite	pl
 8006ec2:	f04f 0800 	movpl.w	r8, #0
 8006ec6:	9308      	strmi	r3, [sp, #32]
 8006ec8:	2f00      	cmp	r7, #0
 8006eca:	db39      	blt.n	8006f40 <_dtoa_r+0x218>
 8006ecc:	9b08      	ldr	r3, [sp, #32]
 8006ece:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ed0:	443b      	add	r3, r7
 8006ed2:	9308      	str	r3, [sp, #32]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d864      	bhi.n	8006fa8 <_dtoa_r+0x280>
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	bfc4      	itt	gt
 8006ee2:	3b04      	subgt	r3, #4
 8006ee4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8006eec:	bfcc      	ite	gt
 8006eee:	2400      	movgt	r4, #0
 8006ef0:	2401      	movle	r4, #1
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d863      	bhi.n	8006fbe <_dtoa_r+0x296>
 8006ef6:	e8df f003 	tbb	[pc, r3]
 8006efa:	372a      	.short	0x372a
 8006efc:	5535      	.short	0x5535
 8006efe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006f02:	441e      	add	r6, r3
 8006f04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	bfc1      	itttt	gt
 8006f0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f10:	409f      	lslgt	r7, r3
 8006f12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f1a:	bfd6      	itet	le
 8006f1c:	f1c3 0320 	rsble	r3, r3, #32
 8006f20:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f24:	fa04 f003 	lslle.w	r0, r4, r3
 8006f28:	f7f9 faf4 	bl	8000514 <__aeabi_ui2d>
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f32:	3e01      	subs	r6, #1
 8006f34:	9214      	str	r2, [sp, #80]	@ 0x50
 8006f36:	e777      	b.n	8006e28 <_dtoa_r+0x100>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e7b8      	b.n	8006eae <_dtoa_r+0x186>
 8006f3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006f3e:	e7b7      	b.n	8006eb0 <_dtoa_r+0x188>
 8006f40:	427b      	negs	r3, r7
 8006f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f44:	2300      	movs	r3, #0
 8006f46:	eba8 0807 	sub.w	r8, r8, r7
 8006f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f4c:	e7c4      	b.n	8006ed8 <_dtoa_r+0x1b0>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	dc35      	bgt.n	8006fc4 <_dtoa_r+0x29c>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	9307      	str	r3, [sp, #28]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f62:	e00b      	b.n	8006f7c <_dtoa_r+0x254>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e7f3      	b.n	8006f50 <_dtoa_r+0x228>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	bfb8      	it	lt
 8006f7a:	2301      	movlt	r3, #1
 8006f7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f80:	2100      	movs	r1, #0
 8006f82:	2204      	movs	r2, #4
 8006f84:	f102 0514 	add.w	r5, r2, #20
 8006f88:	429d      	cmp	r5, r3
 8006f8a:	d91f      	bls.n	8006fcc <_dtoa_r+0x2a4>
 8006f8c:	6041      	str	r1, [r0, #4]
 8006f8e:	4658      	mov	r0, fp
 8006f90:	f000 fd8e 	bl	8007ab0 <_Balloc>
 8006f94:	4682      	mov	sl, r0
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d13c      	bne.n	8007014 <_dtoa_r+0x2ec>
 8006f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <_dtoa_r+0x2e0>)
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006fa2:	e6d8      	b.n	8006d56 <_dtoa_r+0x2e>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e7e0      	b.n	8006f6a <_dtoa_r+0x242>
 8006fa8:	2401      	movs	r4, #1
 8006faa:	2300      	movs	r3, #0
 8006fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	9307      	str	r3, [sp, #28]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2312      	movs	r3, #18
 8006fbc:	e7d0      	b.n	8006f60 <_dtoa_r+0x238>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fc2:	e7f5      	b.n	8006fb0 <_dtoa_r+0x288>
 8006fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	9307      	str	r3, [sp, #28]
 8006fca:	e7d7      	b.n	8006f7c <_dtoa_r+0x254>
 8006fcc:	3101      	adds	r1, #1
 8006fce:	0052      	lsls	r2, r2, #1
 8006fd0:	e7d8      	b.n	8006f84 <_dtoa_r+0x25c>
 8006fd2:	bf00      	nop
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	636f4361 	.word	0x636f4361
 8006fdc:	3fd287a7 	.word	0x3fd287a7
 8006fe0:	8b60c8b3 	.word	0x8b60c8b3
 8006fe4:	3fc68a28 	.word	0x3fc68a28
 8006fe8:	509f79fb 	.word	0x509f79fb
 8006fec:	3fd34413 	.word	0x3fd34413
 8006ff0:	0800a37a 	.word	0x0800a37a
 8006ff4:	0800a391 	.word	0x0800a391
 8006ff8:	7ff00000 	.word	0x7ff00000
 8006ffc:	0800a345 	.word	0x0800a345
 8007000:	3ff80000 	.word	0x3ff80000
 8007004:	0800a488 	.word	0x0800a488
 8007008:	0800a3e9 	.word	0x0800a3e9
 800700c:	0800a376 	.word	0x0800a376
 8007010:	0800a344 	.word	0x0800a344
 8007014:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007018:	6018      	str	r0, [r3, #0]
 800701a:	9b07      	ldr	r3, [sp, #28]
 800701c:	2b0e      	cmp	r3, #14
 800701e:	f200 80a4 	bhi.w	800716a <_dtoa_r+0x442>
 8007022:	2c00      	cmp	r4, #0
 8007024:	f000 80a1 	beq.w	800716a <_dtoa_r+0x442>
 8007028:	2f00      	cmp	r7, #0
 800702a:	dd33      	ble.n	8007094 <_dtoa_r+0x36c>
 800702c:	4bad      	ldr	r3, [pc, #692]	@ (80072e4 <_dtoa_r+0x5bc>)
 800702e:	f007 020f 	and.w	r2, r7, #15
 8007032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007036:	ed93 7b00 	vldr	d7, [r3]
 800703a:	05f8      	lsls	r0, r7, #23
 800703c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007040:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007044:	d516      	bpl.n	8007074 <_dtoa_r+0x34c>
 8007046:	4ba8      	ldr	r3, [pc, #672]	@ (80072e8 <_dtoa_r+0x5c0>)
 8007048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800704c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007050:	f7f9 fc04 	bl	800085c <__aeabi_ddiv>
 8007054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007058:	f004 040f 	and.w	r4, r4, #15
 800705c:	2603      	movs	r6, #3
 800705e:	4da2      	ldr	r5, [pc, #648]	@ (80072e8 <_dtoa_r+0x5c0>)
 8007060:	b954      	cbnz	r4, 8007078 <_dtoa_r+0x350>
 8007062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706a:	f7f9 fbf7 	bl	800085c <__aeabi_ddiv>
 800706e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007072:	e028      	b.n	80070c6 <_dtoa_r+0x39e>
 8007074:	2602      	movs	r6, #2
 8007076:	e7f2      	b.n	800705e <_dtoa_r+0x336>
 8007078:	07e1      	lsls	r1, r4, #31
 800707a:	d508      	bpl.n	800708e <_dtoa_r+0x366>
 800707c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007080:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007084:	f7f9 fac0 	bl	8000608 <__aeabi_dmul>
 8007088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800708c:	3601      	adds	r6, #1
 800708e:	1064      	asrs	r4, r4, #1
 8007090:	3508      	adds	r5, #8
 8007092:	e7e5      	b.n	8007060 <_dtoa_r+0x338>
 8007094:	f000 80d2 	beq.w	800723c <_dtoa_r+0x514>
 8007098:	427c      	negs	r4, r7
 800709a:	4b92      	ldr	r3, [pc, #584]	@ (80072e4 <_dtoa_r+0x5bc>)
 800709c:	4d92      	ldr	r5, [pc, #584]	@ (80072e8 <_dtoa_r+0x5c0>)
 800709e:	f004 020f 	and.w	r2, r4, #15
 80070a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ae:	f7f9 faab 	bl	8000608 <__aeabi_dmul>
 80070b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b6:	1124      	asrs	r4, r4, #4
 80070b8:	2300      	movs	r3, #0
 80070ba:	2602      	movs	r6, #2
 80070bc:	2c00      	cmp	r4, #0
 80070be:	f040 80b2 	bne.w	8007226 <_dtoa_r+0x4fe>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1d3      	bne.n	800706e <_dtoa_r+0x346>
 80070c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80b7 	beq.w	8007240 <_dtoa_r+0x518>
 80070d2:	4b86      	ldr	r3, [pc, #536]	@ (80072ec <_dtoa_r+0x5c4>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fd07 	bl	8000aec <__aeabi_dcmplt>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f000 80ae 	beq.w	8007240 <_dtoa_r+0x518>
 80070e4:	9b07      	ldr	r3, [sp, #28]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 80aa 	beq.w	8007240 <_dtoa_r+0x518>
 80070ec:	9b00      	ldr	r3, [sp, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dd37      	ble.n	8007162 <_dtoa_r+0x43a>
 80070f2:	1e7b      	subs	r3, r7, #1
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	4620      	mov	r0, r4
 80070f8:	4b7d      	ldr	r3, [pc, #500]	@ (80072f0 <_dtoa_r+0x5c8>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 fa83 	bl	8000608 <__aeabi_dmul>
 8007102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007106:	9c00      	ldr	r4, [sp, #0]
 8007108:	3601      	adds	r6, #1
 800710a:	4630      	mov	r0, r6
 800710c:	f7f9 fa12 	bl	8000534 <__aeabi_i2d>
 8007110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007114:	f7f9 fa78 	bl	8000608 <__aeabi_dmul>
 8007118:	4b76      	ldr	r3, [pc, #472]	@ (80072f4 <_dtoa_r+0x5cc>)
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 f8be 	bl	800029c <__adddf3>
 8007120:	4605      	mov	r5, r0
 8007122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007126:	2c00      	cmp	r4, #0
 8007128:	f040 808d 	bne.w	8007246 <_dtoa_r+0x51e>
 800712c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007130:	4b71      	ldr	r3, [pc, #452]	@ (80072f8 <_dtoa_r+0x5d0>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 f8b0 	bl	8000298 <__aeabi_dsub>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007140:	462a      	mov	r2, r5
 8007142:	4633      	mov	r3, r6
 8007144:	f7f9 fcf0 	bl	8000b28 <__aeabi_dcmpgt>
 8007148:	2800      	cmp	r0, #0
 800714a:	f040 828b 	bne.w	8007664 <_dtoa_r+0x93c>
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	462a      	mov	r2, r5
 8007154:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007158:	f7f9 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800715c:	2800      	cmp	r0, #0
 800715e:	f040 8128 	bne.w	80073b2 <_dtoa_r+0x68a>
 8007162:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007166:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800716a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800716c:	2b00      	cmp	r3, #0
 800716e:	f2c0 815a 	blt.w	8007426 <_dtoa_r+0x6fe>
 8007172:	2f0e      	cmp	r7, #14
 8007174:	f300 8157 	bgt.w	8007426 <_dtoa_r+0x6fe>
 8007178:	4b5a      	ldr	r3, [pc, #360]	@ (80072e4 <_dtoa_r+0x5bc>)
 800717a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800717e:	ed93 7b00 	vldr	d7, [r3]
 8007182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007184:	2b00      	cmp	r3, #0
 8007186:	ed8d 7b00 	vstr	d7, [sp]
 800718a:	da03      	bge.n	8007194 <_dtoa_r+0x46c>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f340 8101 	ble.w	8007396 <_dtoa_r+0x66e>
 8007194:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007198:	4656      	mov	r6, sl
 800719a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 fb5b 	bl	800085c <__aeabi_ddiv>
 80071a6:	f7f9 fcdf 	bl	8000b68 <__aeabi_d2iz>
 80071aa:	4680      	mov	r8, r0
 80071ac:	f7f9 f9c2 	bl	8000534 <__aeabi_i2d>
 80071b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b4:	f7f9 fa28 	bl	8000608 <__aeabi_dmul>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4620      	mov	r0, r4
 80071be:	4629      	mov	r1, r5
 80071c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80071c4:	f7f9 f868 	bl	8000298 <__aeabi_dsub>
 80071c8:	f806 4b01 	strb.w	r4, [r6], #1
 80071cc:	9d07      	ldr	r5, [sp, #28]
 80071ce:	eba6 040a 	sub.w	r4, r6, sl
 80071d2:	42a5      	cmp	r5, r4
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	f040 8117 	bne.w	800740a <_dtoa_r+0x6e2>
 80071dc:	f7f9 f85e 	bl	800029c <__adddf3>
 80071e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071e4:	4604      	mov	r4, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	f7f9 fc9e 	bl	8000b28 <__aeabi_dcmpgt>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f040 80f9 	bne.w	80073e4 <_dtoa_r+0x6bc>
 80071f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071f6:	4620      	mov	r0, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	f7f9 fc6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80071fe:	b118      	cbz	r0, 8007208 <_dtoa_r+0x4e0>
 8007200:	f018 0f01 	tst.w	r8, #1
 8007204:	f040 80ee 	bne.w	80073e4 <_dtoa_r+0x6bc>
 8007208:	4649      	mov	r1, r9
 800720a:	4658      	mov	r0, fp
 800720c:	f000 fc90 	bl	8007b30 <_Bfree>
 8007210:	2300      	movs	r3, #0
 8007212:	7033      	strb	r3, [r6, #0]
 8007214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007216:	3701      	adds	r7, #1
 8007218:	601f      	str	r7, [r3, #0]
 800721a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 831d 	beq.w	800785c <_dtoa_r+0xb34>
 8007222:	601e      	str	r6, [r3, #0]
 8007224:	e31a      	b.n	800785c <_dtoa_r+0xb34>
 8007226:	07e2      	lsls	r2, r4, #31
 8007228:	d505      	bpl.n	8007236 <_dtoa_r+0x50e>
 800722a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800722e:	f7f9 f9eb 	bl	8000608 <__aeabi_dmul>
 8007232:	3601      	adds	r6, #1
 8007234:	2301      	movs	r3, #1
 8007236:	1064      	asrs	r4, r4, #1
 8007238:	3508      	adds	r5, #8
 800723a:	e73f      	b.n	80070bc <_dtoa_r+0x394>
 800723c:	2602      	movs	r6, #2
 800723e:	e742      	b.n	80070c6 <_dtoa_r+0x39e>
 8007240:	9c07      	ldr	r4, [sp, #28]
 8007242:	9704      	str	r7, [sp, #16]
 8007244:	e761      	b.n	800710a <_dtoa_r+0x3e2>
 8007246:	4b27      	ldr	r3, [pc, #156]	@ (80072e4 <_dtoa_r+0x5bc>)
 8007248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800724a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800724e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007252:	4454      	add	r4, sl
 8007254:	2900      	cmp	r1, #0
 8007256:	d053      	beq.n	8007300 <_dtoa_r+0x5d8>
 8007258:	4928      	ldr	r1, [pc, #160]	@ (80072fc <_dtoa_r+0x5d4>)
 800725a:	2000      	movs	r0, #0
 800725c:	f7f9 fafe 	bl	800085c <__aeabi_ddiv>
 8007260:	4633      	mov	r3, r6
 8007262:	462a      	mov	r2, r5
 8007264:	f7f9 f818 	bl	8000298 <__aeabi_dsub>
 8007268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800726c:	4656      	mov	r6, sl
 800726e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007272:	f7f9 fc79 	bl	8000b68 <__aeabi_d2iz>
 8007276:	4605      	mov	r5, r0
 8007278:	f7f9 f95c 	bl	8000534 <__aeabi_i2d>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007284:	f7f9 f808 	bl	8000298 <__aeabi_dsub>
 8007288:	3530      	adds	r5, #48	@ 0x30
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007292:	f806 5b01 	strb.w	r5, [r6], #1
 8007296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800729a:	f7f9 fc27 	bl	8000aec <__aeabi_dcmplt>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d171      	bne.n	8007386 <_dtoa_r+0x65e>
 80072a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072a6:	4911      	ldr	r1, [pc, #68]	@ (80072ec <_dtoa_r+0x5c4>)
 80072a8:	2000      	movs	r0, #0
 80072aa:	f7f8 fff5 	bl	8000298 <__aeabi_dsub>
 80072ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072b2:	f7f9 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f040 8095 	bne.w	80073e6 <_dtoa_r+0x6be>
 80072bc:	42a6      	cmp	r6, r4
 80072be:	f43f af50 	beq.w	8007162 <_dtoa_r+0x43a>
 80072c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <_dtoa_r+0x5c8>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7f9 f99d 	bl	8000608 <__aeabi_dmul>
 80072ce:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <_dtoa_r+0x5c8>)
 80072d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072d4:	2200      	movs	r2, #0
 80072d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072da:	f7f9 f995 	bl	8000608 <__aeabi_dmul>
 80072de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e2:	e7c4      	b.n	800726e <_dtoa_r+0x546>
 80072e4:	0800a488 	.word	0x0800a488
 80072e8:	0800a460 	.word	0x0800a460
 80072ec:	3ff00000 	.word	0x3ff00000
 80072f0:	40240000 	.word	0x40240000
 80072f4:	401c0000 	.word	0x401c0000
 80072f8:	40140000 	.word	0x40140000
 80072fc:	3fe00000 	.word	0x3fe00000
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	f7f9 f980 	bl	8000608 <__aeabi_dmul>
 8007308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800730c:	9415      	str	r4, [sp, #84]	@ 0x54
 800730e:	4656      	mov	r6, sl
 8007310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007314:	f7f9 fc28 	bl	8000b68 <__aeabi_d2iz>
 8007318:	4605      	mov	r5, r0
 800731a:	f7f9 f90b 	bl	8000534 <__aeabi_i2d>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007326:	f7f8 ffb7 	bl	8000298 <__aeabi_dsub>
 800732a:	3530      	adds	r5, #48	@ 0x30
 800732c:	f806 5b01 	strb.w	r5, [r6], #1
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	42a6      	cmp	r6, r4
 8007336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	d124      	bne.n	800738a <_dtoa_r+0x662>
 8007340:	4bac      	ldr	r3, [pc, #688]	@ (80075f4 <_dtoa_r+0x8cc>)
 8007342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007346:	f7f8 ffa9 	bl	800029c <__adddf3>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007352:	f7f9 fbe9 	bl	8000b28 <__aeabi_dcmpgt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d145      	bne.n	80073e6 <_dtoa_r+0x6be>
 800735a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800735e:	49a5      	ldr	r1, [pc, #660]	@ (80075f4 <_dtoa_r+0x8cc>)
 8007360:	2000      	movs	r0, #0
 8007362:	f7f8 ff99 	bl	8000298 <__aeabi_dsub>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800736e:	f7f9 fbbd 	bl	8000aec <__aeabi_dcmplt>
 8007372:	2800      	cmp	r0, #0
 8007374:	f43f aef5 	beq.w	8007162 <_dtoa_r+0x43a>
 8007378:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800737a:	1e73      	subs	r3, r6, #1
 800737c:	9315      	str	r3, [sp, #84]	@ 0x54
 800737e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007382:	2b30      	cmp	r3, #48	@ 0x30
 8007384:	d0f8      	beq.n	8007378 <_dtoa_r+0x650>
 8007386:	9f04      	ldr	r7, [sp, #16]
 8007388:	e73e      	b.n	8007208 <_dtoa_r+0x4e0>
 800738a:	4b9b      	ldr	r3, [pc, #620]	@ (80075f8 <_dtoa_r+0x8d0>)
 800738c:	f7f9 f93c 	bl	8000608 <__aeabi_dmul>
 8007390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007394:	e7bc      	b.n	8007310 <_dtoa_r+0x5e8>
 8007396:	d10c      	bne.n	80073b2 <_dtoa_r+0x68a>
 8007398:	4b98      	ldr	r3, [pc, #608]	@ (80075fc <_dtoa_r+0x8d4>)
 800739a:	2200      	movs	r2, #0
 800739c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073a0:	f7f9 f932 	bl	8000608 <__aeabi_dmul>
 80073a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073a8:	f7f9 fbb4 	bl	8000b14 <__aeabi_dcmpge>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	f000 8157 	beq.w	8007660 <_dtoa_r+0x938>
 80073b2:	2400      	movs	r4, #0
 80073b4:	4625      	mov	r5, r4
 80073b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073b8:	43db      	mvns	r3, r3
 80073ba:	9304      	str	r3, [sp, #16]
 80073bc:	4656      	mov	r6, sl
 80073be:	2700      	movs	r7, #0
 80073c0:	4621      	mov	r1, r4
 80073c2:	4658      	mov	r0, fp
 80073c4:	f000 fbb4 	bl	8007b30 <_Bfree>
 80073c8:	2d00      	cmp	r5, #0
 80073ca:	d0dc      	beq.n	8007386 <_dtoa_r+0x65e>
 80073cc:	b12f      	cbz	r7, 80073da <_dtoa_r+0x6b2>
 80073ce:	42af      	cmp	r7, r5
 80073d0:	d003      	beq.n	80073da <_dtoa_r+0x6b2>
 80073d2:	4639      	mov	r1, r7
 80073d4:	4658      	mov	r0, fp
 80073d6:	f000 fbab 	bl	8007b30 <_Bfree>
 80073da:	4629      	mov	r1, r5
 80073dc:	4658      	mov	r0, fp
 80073de:	f000 fba7 	bl	8007b30 <_Bfree>
 80073e2:	e7d0      	b.n	8007386 <_dtoa_r+0x65e>
 80073e4:	9704      	str	r7, [sp, #16]
 80073e6:	4633      	mov	r3, r6
 80073e8:	461e      	mov	r6, r3
 80073ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ee:	2a39      	cmp	r2, #57	@ 0x39
 80073f0:	d107      	bne.n	8007402 <_dtoa_r+0x6da>
 80073f2:	459a      	cmp	sl, r3
 80073f4:	d1f8      	bne.n	80073e8 <_dtoa_r+0x6c0>
 80073f6:	9a04      	ldr	r2, [sp, #16]
 80073f8:	3201      	adds	r2, #1
 80073fa:	9204      	str	r2, [sp, #16]
 80073fc:	2230      	movs	r2, #48	@ 0x30
 80073fe:	f88a 2000 	strb.w	r2, [sl]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	3201      	adds	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e7bd      	b.n	8007386 <_dtoa_r+0x65e>
 800740a:	4b7b      	ldr	r3, [pc, #492]	@ (80075f8 <_dtoa_r+0x8d0>)
 800740c:	2200      	movs	r2, #0
 800740e:	f7f9 f8fb 	bl	8000608 <__aeabi_dmul>
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	f7f9 fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f aebb 	beq.w	800719a <_dtoa_r+0x472>
 8007424:	e6f0      	b.n	8007208 <_dtoa_r+0x4e0>
 8007426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007428:	2a00      	cmp	r2, #0
 800742a:	f000 80db 	beq.w	80075e4 <_dtoa_r+0x8bc>
 800742e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007430:	2a01      	cmp	r2, #1
 8007432:	f300 80bf 	bgt.w	80075b4 <_dtoa_r+0x88c>
 8007436:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007438:	2a00      	cmp	r2, #0
 800743a:	f000 80b7 	beq.w	80075ac <_dtoa_r+0x884>
 800743e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007442:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007444:	4646      	mov	r6, r8
 8007446:	9a08      	ldr	r2, [sp, #32]
 8007448:	2101      	movs	r1, #1
 800744a:	441a      	add	r2, r3
 800744c:	4658      	mov	r0, fp
 800744e:	4498      	add	r8, r3
 8007450:	9208      	str	r2, [sp, #32]
 8007452:	f000 fc6b 	bl	8007d2c <__i2b>
 8007456:	4605      	mov	r5, r0
 8007458:	b15e      	cbz	r6, 8007472 <_dtoa_r+0x74a>
 800745a:	9b08      	ldr	r3, [sp, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd08      	ble.n	8007472 <_dtoa_r+0x74a>
 8007460:	42b3      	cmp	r3, r6
 8007462:	9a08      	ldr	r2, [sp, #32]
 8007464:	bfa8      	it	ge
 8007466:	4633      	movge	r3, r6
 8007468:	eba8 0803 	sub.w	r8, r8, r3
 800746c:	1af6      	subs	r6, r6, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	9308      	str	r3, [sp, #32]
 8007472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007474:	b1f3      	cbz	r3, 80074b4 <_dtoa_r+0x78c>
 8007476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80b7 	beq.w	80075ec <_dtoa_r+0x8c4>
 800747e:	b18c      	cbz	r4, 80074a4 <_dtoa_r+0x77c>
 8007480:	4629      	mov	r1, r5
 8007482:	4622      	mov	r2, r4
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fd11 	bl	8007eac <__pow5mult>
 800748a:	464a      	mov	r2, r9
 800748c:	4601      	mov	r1, r0
 800748e:	4605      	mov	r5, r0
 8007490:	4658      	mov	r0, fp
 8007492:	f000 fc61 	bl	8007d58 <__multiply>
 8007496:	4649      	mov	r1, r9
 8007498:	9004      	str	r0, [sp, #16]
 800749a:	4658      	mov	r0, fp
 800749c:	f000 fb48 	bl	8007b30 <_Bfree>
 80074a0:	9b04      	ldr	r3, [sp, #16]
 80074a2:	4699      	mov	r9, r3
 80074a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a6:	1b1a      	subs	r2, r3, r4
 80074a8:	d004      	beq.n	80074b4 <_dtoa_r+0x78c>
 80074aa:	4649      	mov	r1, r9
 80074ac:	4658      	mov	r0, fp
 80074ae:	f000 fcfd 	bl	8007eac <__pow5mult>
 80074b2:	4681      	mov	r9, r0
 80074b4:	2101      	movs	r1, #1
 80074b6:	4658      	mov	r0, fp
 80074b8:	f000 fc38 	bl	8007d2c <__i2b>
 80074bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074be:	4604      	mov	r4, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 81cf 	beq.w	8007864 <_dtoa_r+0xb3c>
 80074c6:	461a      	mov	r2, r3
 80074c8:	4601      	mov	r1, r0
 80074ca:	4658      	mov	r0, fp
 80074cc:	f000 fcee 	bl	8007eac <__pow5mult>
 80074d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	4604      	mov	r4, r0
 80074d6:	f300 8095 	bgt.w	8007604 <_dtoa_r+0x8dc>
 80074da:	9b02      	ldr	r3, [sp, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 8087 	bne.w	80075f0 <_dtoa_r+0x8c8>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f040 8089 	bne.w	8007600 <_dtoa_r+0x8d8>
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074f4:	0d1b      	lsrs	r3, r3, #20
 80074f6:	051b      	lsls	r3, r3, #20
 80074f8:	b12b      	cbz	r3, 8007506 <_dtoa_r+0x7de>
 80074fa:	9b08      	ldr	r3, [sp, #32]
 80074fc:	3301      	adds	r3, #1
 80074fe:	9308      	str	r3, [sp, #32]
 8007500:	f108 0801 	add.w	r8, r8, #1
 8007504:	2301      	movs	r3, #1
 8007506:	930a      	str	r3, [sp, #40]	@ 0x28
 8007508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 81b0 	beq.w	8007870 <_dtoa_r+0xb48>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007516:	6918      	ldr	r0, [r3, #16]
 8007518:	f000 fbbc 	bl	8007c94 <__hi0bits>
 800751c:	f1c0 0020 	rsb	r0, r0, #32
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	4418      	add	r0, r3
 8007524:	f010 001f 	ands.w	r0, r0, #31
 8007528:	d077      	beq.n	800761a <_dtoa_r+0x8f2>
 800752a:	f1c0 0320 	rsb	r3, r0, #32
 800752e:	2b04      	cmp	r3, #4
 8007530:	dd6b      	ble.n	800760a <_dtoa_r+0x8e2>
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	f1c0 001c 	rsb	r0, r0, #28
 8007538:	4403      	add	r3, r0
 800753a:	4480      	add	r8, r0
 800753c:	4406      	add	r6, r0
 800753e:	9308      	str	r3, [sp, #32]
 8007540:	f1b8 0f00 	cmp.w	r8, #0
 8007544:	dd05      	ble.n	8007552 <_dtoa_r+0x82a>
 8007546:	4649      	mov	r1, r9
 8007548:	4642      	mov	r2, r8
 800754a:	4658      	mov	r0, fp
 800754c:	f000 fd08 	bl	8007f60 <__lshift>
 8007550:	4681      	mov	r9, r0
 8007552:	9b08      	ldr	r3, [sp, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dd05      	ble.n	8007564 <_dtoa_r+0x83c>
 8007558:	4621      	mov	r1, r4
 800755a:	461a      	mov	r2, r3
 800755c:	4658      	mov	r0, fp
 800755e:	f000 fcff 	bl	8007f60 <__lshift>
 8007562:	4604      	mov	r4, r0
 8007564:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007566:	2b00      	cmp	r3, #0
 8007568:	d059      	beq.n	800761e <_dtoa_r+0x8f6>
 800756a:	4621      	mov	r1, r4
 800756c:	4648      	mov	r0, r9
 800756e:	f000 fd63 	bl	8008038 <__mcmp>
 8007572:	2800      	cmp	r0, #0
 8007574:	da53      	bge.n	800761e <_dtoa_r+0x8f6>
 8007576:	1e7b      	subs	r3, r7, #1
 8007578:	9304      	str	r3, [sp, #16]
 800757a:	4649      	mov	r1, r9
 800757c:	2300      	movs	r3, #0
 800757e:	220a      	movs	r2, #10
 8007580:	4658      	mov	r0, fp
 8007582:	f000 faf7 	bl	8007b74 <__multadd>
 8007586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007588:	4681      	mov	r9, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8172 	beq.w	8007874 <_dtoa_r+0xb4c>
 8007590:	2300      	movs	r3, #0
 8007592:	4629      	mov	r1, r5
 8007594:	220a      	movs	r2, #10
 8007596:	4658      	mov	r0, fp
 8007598:	f000 faec 	bl	8007b74 <__multadd>
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	4605      	mov	r5, r0
 80075a2:	dc67      	bgt.n	8007674 <_dtoa_r+0x94c>
 80075a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	dc41      	bgt.n	800762e <_dtoa_r+0x906>
 80075aa:	e063      	b.n	8007674 <_dtoa_r+0x94c>
 80075ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80075b2:	e746      	b.n	8007442 <_dtoa_r+0x71a>
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	1e5c      	subs	r4, r3, #1
 80075b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	bfbf      	itttt	lt
 80075be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80075c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80075c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80075c4:	1ae3      	sublt	r3, r4, r3
 80075c6:	bfb4      	ite	lt
 80075c8:	18d2      	addlt	r2, r2, r3
 80075ca:	1b1c      	subge	r4, r3, r4
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	bfbc      	itt	lt
 80075d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80075d2:	2400      	movlt	r4, #0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bfb5      	itete	lt
 80075d8:	eba8 0603 	sublt.w	r6, r8, r3
 80075dc:	9b07      	ldrge	r3, [sp, #28]
 80075de:	2300      	movlt	r3, #0
 80075e0:	4646      	movge	r6, r8
 80075e2:	e730      	b.n	8007446 <_dtoa_r+0x71e>
 80075e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075e8:	4646      	mov	r6, r8
 80075ea:	e735      	b.n	8007458 <_dtoa_r+0x730>
 80075ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075ee:	e75c      	b.n	80074aa <_dtoa_r+0x782>
 80075f0:	2300      	movs	r3, #0
 80075f2:	e788      	b.n	8007506 <_dtoa_r+0x7de>
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	40140000 	.word	0x40140000
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	e780      	b.n	8007506 <_dtoa_r+0x7de>
 8007604:	2300      	movs	r3, #0
 8007606:	930a      	str	r3, [sp, #40]	@ 0x28
 8007608:	e782      	b.n	8007510 <_dtoa_r+0x7e8>
 800760a:	d099      	beq.n	8007540 <_dtoa_r+0x818>
 800760c:	9a08      	ldr	r2, [sp, #32]
 800760e:	331c      	adds	r3, #28
 8007610:	441a      	add	r2, r3
 8007612:	4498      	add	r8, r3
 8007614:	441e      	add	r6, r3
 8007616:	9208      	str	r2, [sp, #32]
 8007618:	e792      	b.n	8007540 <_dtoa_r+0x818>
 800761a:	4603      	mov	r3, r0
 800761c:	e7f6      	b.n	800760c <_dtoa_r+0x8e4>
 800761e:	9b07      	ldr	r3, [sp, #28]
 8007620:	9704      	str	r7, [sp, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	dc20      	bgt.n	8007668 <_dtoa_r+0x940>
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762a:	2b02      	cmp	r3, #2
 800762c:	dd1e      	ble.n	800766c <_dtoa_r+0x944>
 800762e:	9b00      	ldr	r3, [sp, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f aec0 	bne.w	80073b6 <_dtoa_r+0x68e>
 8007636:	4621      	mov	r1, r4
 8007638:	2205      	movs	r2, #5
 800763a:	4658      	mov	r0, fp
 800763c:	f000 fa9a 	bl	8007b74 <__multadd>
 8007640:	4601      	mov	r1, r0
 8007642:	4604      	mov	r4, r0
 8007644:	4648      	mov	r0, r9
 8007646:	f000 fcf7 	bl	8008038 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	f77f aeb3 	ble.w	80073b6 <_dtoa_r+0x68e>
 8007650:	4656      	mov	r6, sl
 8007652:	2331      	movs	r3, #49	@ 0x31
 8007654:	f806 3b01 	strb.w	r3, [r6], #1
 8007658:	9b04      	ldr	r3, [sp, #16]
 800765a:	3301      	adds	r3, #1
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	e6ae      	b.n	80073be <_dtoa_r+0x696>
 8007660:	9c07      	ldr	r4, [sp, #28]
 8007662:	9704      	str	r7, [sp, #16]
 8007664:	4625      	mov	r5, r4
 8007666:	e7f3      	b.n	8007650 <_dtoa_r+0x928>
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8104 	beq.w	800787c <_dtoa_r+0xb54>
 8007674:	2e00      	cmp	r6, #0
 8007676:	dd05      	ble.n	8007684 <_dtoa_r+0x95c>
 8007678:	4629      	mov	r1, r5
 800767a:	4632      	mov	r2, r6
 800767c:	4658      	mov	r0, fp
 800767e:	f000 fc6f 	bl	8007f60 <__lshift>
 8007682:	4605      	mov	r5, r0
 8007684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d05a      	beq.n	8007740 <_dtoa_r+0xa18>
 800768a:	6869      	ldr	r1, [r5, #4]
 800768c:	4658      	mov	r0, fp
 800768e:	f000 fa0f 	bl	8007ab0 <_Balloc>
 8007692:	4606      	mov	r6, r0
 8007694:	b928      	cbnz	r0, 80076a2 <_dtoa_r+0x97a>
 8007696:	4b84      	ldr	r3, [pc, #528]	@ (80078a8 <_dtoa_r+0xb80>)
 8007698:	4602      	mov	r2, r0
 800769a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800769e:	f7ff bb5a 	b.w	8006d56 <_dtoa_r+0x2e>
 80076a2:	692a      	ldr	r2, [r5, #16]
 80076a4:	3202      	adds	r2, #2
 80076a6:	0092      	lsls	r2, r2, #2
 80076a8:	f105 010c 	add.w	r1, r5, #12
 80076ac:	300c      	adds	r0, #12
 80076ae:	f001 ff75 	bl	800959c <memcpy>
 80076b2:	2201      	movs	r2, #1
 80076b4:	4631      	mov	r1, r6
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 fc52 	bl	8007f60 <__lshift>
 80076bc:	f10a 0301 	add.w	r3, sl, #1
 80076c0:	9307      	str	r3, [sp, #28]
 80076c2:	9b00      	ldr	r3, [sp, #0]
 80076c4:	4453      	add	r3, sl
 80076c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076c8:	9b02      	ldr	r3, [sp, #8]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	462f      	mov	r7, r5
 80076d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d2:	4605      	mov	r5, r0
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	4621      	mov	r1, r4
 80076d8:	3b01      	subs	r3, #1
 80076da:	4648      	mov	r0, r9
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	f7ff fa9b 	bl	8006c18 <quorem>
 80076e2:	4639      	mov	r1, r7
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076ea:	4648      	mov	r0, r9
 80076ec:	f000 fca4 	bl	8008038 <__mcmp>
 80076f0:	462a      	mov	r2, r5
 80076f2:	9008      	str	r0, [sp, #32]
 80076f4:	4621      	mov	r1, r4
 80076f6:	4658      	mov	r0, fp
 80076f8:	f000 fcba 	bl	8008070 <__mdiff>
 80076fc:	68c2      	ldr	r2, [r0, #12]
 80076fe:	4606      	mov	r6, r0
 8007700:	bb02      	cbnz	r2, 8007744 <_dtoa_r+0xa1c>
 8007702:	4601      	mov	r1, r0
 8007704:	4648      	mov	r0, r9
 8007706:	f000 fc97 	bl	8008038 <__mcmp>
 800770a:	4602      	mov	r2, r0
 800770c:	4631      	mov	r1, r6
 800770e:	4658      	mov	r0, fp
 8007710:	920e      	str	r2, [sp, #56]	@ 0x38
 8007712:	f000 fa0d 	bl	8007b30 <_Bfree>
 8007716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800771a:	9e07      	ldr	r6, [sp, #28]
 800771c:	ea43 0102 	orr.w	r1, r3, r2
 8007720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007722:	4319      	orrs	r1, r3
 8007724:	d110      	bne.n	8007748 <_dtoa_r+0xa20>
 8007726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800772a:	d029      	beq.n	8007780 <_dtoa_r+0xa58>
 800772c:	9b08      	ldr	r3, [sp, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd02      	ble.n	8007738 <_dtoa_r+0xa10>
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007738:	9b00      	ldr	r3, [sp, #0]
 800773a:	f883 8000 	strb.w	r8, [r3]
 800773e:	e63f      	b.n	80073c0 <_dtoa_r+0x698>
 8007740:	4628      	mov	r0, r5
 8007742:	e7bb      	b.n	80076bc <_dtoa_r+0x994>
 8007744:	2201      	movs	r2, #1
 8007746:	e7e1      	b.n	800770c <_dtoa_r+0x9e4>
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	db04      	blt.n	8007758 <_dtoa_r+0xa30>
 800774e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007750:	430b      	orrs	r3, r1
 8007752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007754:	430b      	orrs	r3, r1
 8007756:	d120      	bne.n	800779a <_dtoa_r+0xa72>
 8007758:	2a00      	cmp	r2, #0
 800775a:	dded      	ble.n	8007738 <_dtoa_r+0xa10>
 800775c:	4649      	mov	r1, r9
 800775e:	2201      	movs	r2, #1
 8007760:	4658      	mov	r0, fp
 8007762:	f000 fbfd 	bl	8007f60 <__lshift>
 8007766:	4621      	mov	r1, r4
 8007768:	4681      	mov	r9, r0
 800776a:	f000 fc65 	bl	8008038 <__mcmp>
 800776e:	2800      	cmp	r0, #0
 8007770:	dc03      	bgt.n	800777a <_dtoa_r+0xa52>
 8007772:	d1e1      	bne.n	8007738 <_dtoa_r+0xa10>
 8007774:	f018 0f01 	tst.w	r8, #1
 8007778:	d0de      	beq.n	8007738 <_dtoa_r+0xa10>
 800777a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800777e:	d1d8      	bne.n	8007732 <_dtoa_r+0xa0a>
 8007780:	9a00      	ldr	r2, [sp, #0]
 8007782:	2339      	movs	r3, #57	@ 0x39
 8007784:	7013      	strb	r3, [r2, #0]
 8007786:	4633      	mov	r3, r6
 8007788:	461e      	mov	r6, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007790:	2a39      	cmp	r2, #57	@ 0x39
 8007792:	d052      	beq.n	800783a <_dtoa_r+0xb12>
 8007794:	3201      	adds	r2, #1
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	e612      	b.n	80073c0 <_dtoa_r+0x698>
 800779a:	2a00      	cmp	r2, #0
 800779c:	dd07      	ble.n	80077ae <_dtoa_r+0xa86>
 800779e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077a2:	d0ed      	beq.n	8007780 <_dtoa_r+0xa58>
 80077a4:	9a00      	ldr	r2, [sp, #0]
 80077a6:	f108 0301 	add.w	r3, r8, #1
 80077aa:	7013      	strb	r3, [r2, #0]
 80077ac:	e608      	b.n	80073c0 <_dtoa_r+0x698>
 80077ae:	9b07      	ldr	r3, [sp, #28]
 80077b0:	9a07      	ldr	r2, [sp, #28]
 80077b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80077b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d028      	beq.n	800780e <_dtoa_r+0xae6>
 80077bc:	4649      	mov	r1, r9
 80077be:	2300      	movs	r3, #0
 80077c0:	220a      	movs	r2, #10
 80077c2:	4658      	mov	r0, fp
 80077c4:	f000 f9d6 	bl	8007b74 <__multadd>
 80077c8:	42af      	cmp	r7, r5
 80077ca:	4681      	mov	r9, r0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	f04f 020a 	mov.w	r2, #10
 80077d4:	4639      	mov	r1, r7
 80077d6:	4658      	mov	r0, fp
 80077d8:	d107      	bne.n	80077ea <_dtoa_r+0xac2>
 80077da:	f000 f9cb 	bl	8007b74 <__multadd>
 80077de:	4607      	mov	r7, r0
 80077e0:	4605      	mov	r5, r0
 80077e2:	9b07      	ldr	r3, [sp, #28]
 80077e4:	3301      	adds	r3, #1
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	e774      	b.n	80076d4 <_dtoa_r+0x9ac>
 80077ea:	f000 f9c3 	bl	8007b74 <__multadd>
 80077ee:	4629      	mov	r1, r5
 80077f0:	4607      	mov	r7, r0
 80077f2:	2300      	movs	r3, #0
 80077f4:	220a      	movs	r2, #10
 80077f6:	4658      	mov	r0, fp
 80077f8:	f000 f9bc 	bl	8007b74 <__multadd>
 80077fc:	4605      	mov	r5, r0
 80077fe:	e7f0      	b.n	80077e2 <_dtoa_r+0xaba>
 8007800:	9b00      	ldr	r3, [sp, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	bfcc      	ite	gt
 8007806:	461e      	movgt	r6, r3
 8007808:	2601      	movle	r6, #1
 800780a:	4456      	add	r6, sl
 800780c:	2700      	movs	r7, #0
 800780e:	4649      	mov	r1, r9
 8007810:	2201      	movs	r2, #1
 8007812:	4658      	mov	r0, fp
 8007814:	f000 fba4 	bl	8007f60 <__lshift>
 8007818:	4621      	mov	r1, r4
 800781a:	4681      	mov	r9, r0
 800781c:	f000 fc0c 	bl	8008038 <__mcmp>
 8007820:	2800      	cmp	r0, #0
 8007822:	dcb0      	bgt.n	8007786 <_dtoa_r+0xa5e>
 8007824:	d102      	bne.n	800782c <_dtoa_r+0xb04>
 8007826:	f018 0f01 	tst.w	r8, #1
 800782a:	d1ac      	bne.n	8007786 <_dtoa_r+0xa5e>
 800782c:	4633      	mov	r3, r6
 800782e:	461e      	mov	r6, r3
 8007830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007834:	2a30      	cmp	r2, #48	@ 0x30
 8007836:	d0fa      	beq.n	800782e <_dtoa_r+0xb06>
 8007838:	e5c2      	b.n	80073c0 <_dtoa_r+0x698>
 800783a:	459a      	cmp	sl, r3
 800783c:	d1a4      	bne.n	8007788 <_dtoa_r+0xa60>
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	3301      	adds	r3, #1
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	2331      	movs	r3, #49	@ 0x31
 8007846:	f88a 3000 	strb.w	r3, [sl]
 800784a:	e5b9      	b.n	80073c0 <_dtoa_r+0x698>
 800784c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800784e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80078ac <_dtoa_r+0xb84>
 8007852:	b11b      	cbz	r3, 800785c <_dtoa_r+0xb34>
 8007854:	f10a 0308 	add.w	r3, sl, #8
 8007858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	4650      	mov	r0, sl
 800785e:	b019      	add	sp, #100	@ 0x64
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007866:	2b01      	cmp	r3, #1
 8007868:	f77f ae37 	ble.w	80074da <_dtoa_r+0x7b2>
 800786c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007870:	2001      	movs	r0, #1
 8007872:	e655      	b.n	8007520 <_dtoa_r+0x7f8>
 8007874:	9b00      	ldr	r3, [sp, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f77f aed6 	ble.w	8007628 <_dtoa_r+0x900>
 800787c:	4656      	mov	r6, sl
 800787e:	4621      	mov	r1, r4
 8007880:	4648      	mov	r0, r9
 8007882:	f7ff f9c9 	bl	8006c18 <quorem>
 8007886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800788a:	f806 8b01 	strb.w	r8, [r6], #1
 800788e:	9b00      	ldr	r3, [sp, #0]
 8007890:	eba6 020a 	sub.w	r2, r6, sl
 8007894:	4293      	cmp	r3, r2
 8007896:	ddb3      	ble.n	8007800 <_dtoa_r+0xad8>
 8007898:	4649      	mov	r1, r9
 800789a:	2300      	movs	r3, #0
 800789c:	220a      	movs	r2, #10
 800789e:	4658      	mov	r0, fp
 80078a0:	f000 f968 	bl	8007b74 <__multadd>
 80078a4:	4681      	mov	r9, r0
 80078a6:	e7ea      	b.n	800787e <_dtoa_r+0xb56>
 80078a8:	0800a3e9 	.word	0x0800a3e9
 80078ac:	0800a36d 	.word	0x0800a36d

080078b0 <_free_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4605      	mov	r5, r0
 80078b4:	2900      	cmp	r1, #0
 80078b6:	d041      	beq.n	800793c <_free_r+0x8c>
 80078b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078bc:	1f0c      	subs	r4, r1, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfb8      	it	lt
 80078c2:	18e4      	addlt	r4, r4, r3
 80078c4:	f000 f8e8 	bl	8007a98 <__malloc_lock>
 80078c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007940 <_free_r+0x90>)
 80078ca:	6813      	ldr	r3, [r2, #0]
 80078cc:	b933      	cbnz	r3, 80078dc <_free_r+0x2c>
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	6014      	str	r4, [r2, #0]
 80078d2:	4628      	mov	r0, r5
 80078d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d8:	f000 b8e4 	b.w	8007aa4 <__malloc_unlock>
 80078dc:	42a3      	cmp	r3, r4
 80078de:	d908      	bls.n	80078f2 <_free_r+0x42>
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	1821      	adds	r1, r4, r0
 80078e4:	428b      	cmp	r3, r1
 80078e6:	bf01      	itttt	eq
 80078e8:	6819      	ldreq	r1, [r3, #0]
 80078ea:	685b      	ldreq	r3, [r3, #4]
 80078ec:	1809      	addeq	r1, r1, r0
 80078ee:	6021      	streq	r1, [r4, #0]
 80078f0:	e7ed      	b.n	80078ce <_free_r+0x1e>
 80078f2:	461a      	mov	r2, r3
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	b10b      	cbz	r3, 80078fc <_free_r+0x4c>
 80078f8:	42a3      	cmp	r3, r4
 80078fa:	d9fa      	bls.n	80078f2 <_free_r+0x42>
 80078fc:	6811      	ldr	r1, [r2, #0]
 80078fe:	1850      	adds	r0, r2, r1
 8007900:	42a0      	cmp	r0, r4
 8007902:	d10b      	bne.n	800791c <_free_r+0x6c>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	4401      	add	r1, r0
 8007908:	1850      	adds	r0, r2, r1
 800790a:	4283      	cmp	r3, r0
 800790c:	6011      	str	r1, [r2, #0]
 800790e:	d1e0      	bne.n	80078d2 <_free_r+0x22>
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	6053      	str	r3, [r2, #4]
 8007916:	4408      	add	r0, r1
 8007918:	6010      	str	r0, [r2, #0]
 800791a:	e7da      	b.n	80078d2 <_free_r+0x22>
 800791c:	d902      	bls.n	8007924 <_free_r+0x74>
 800791e:	230c      	movs	r3, #12
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	e7d6      	b.n	80078d2 <_free_r+0x22>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	1821      	adds	r1, r4, r0
 8007928:	428b      	cmp	r3, r1
 800792a:	bf04      	itt	eq
 800792c:	6819      	ldreq	r1, [r3, #0]
 800792e:	685b      	ldreq	r3, [r3, #4]
 8007930:	6063      	str	r3, [r4, #4]
 8007932:	bf04      	itt	eq
 8007934:	1809      	addeq	r1, r1, r0
 8007936:	6021      	streq	r1, [r4, #0]
 8007938:	6054      	str	r4, [r2, #4]
 800793a:	e7ca      	b.n	80078d2 <_free_r+0x22>
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	200004c8 	.word	0x200004c8

08007944 <malloc>:
 8007944:	4b02      	ldr	r3, [pc, #8]	@ (8007950 <malloc+0xc>)
 8007946:	4601      	mov	r1, r0
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	f000 b825 	b.w	8007998 <_malloc_r>
 800794e:	bf00      	nop
 8007950:	20000034 	.word	0x20000034

08007954 <sbrk_aligned>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4e0f      	ldr	r6, [pc, #60]	@ (8007994 <sbrk_aligned+0x40>)
 8007958:	460c      	mov	r4, r1
 800795a:	6831      	ldr	r1, [r6, #0]
 800795c:	4605      	mov	r5, r0
 800795e:	b911      	cbnz	r1, 8007966 <sbrk_aligned+0x12>
 8007960:	f001 fe0c 	bl	800957c <_sbrk_r>
 8007964:	6030      	str	r0, [r6, #0]
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f001 fe07 	bl	800957c <_sbrk_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d103      	bne.n	800797a <sbrk_aligned+0x26>
 8007972:	f04f 34ff 	mov.w	r4, #4294967295
 8007976:	4620      	mov	r0, r4
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	1cc4      	adds	r4, r0, #3
 800797c:	f024 0403 	bic.w	r4, r4, #3
 8007980:	42a0      	cmp	r0, r4
 8007982:	d0f8      	beq.n	8007976 <sbrk_aligned+0x22>
 8007984:	1a21      	subs	r1, r4, r0
 8007986:	4628      	mov	r0, r5
 8007988:	f001 fdf8 	bl	800957c <_sbrk_r>
 800798c:	3001      	adds	r0, #1
 800798e:	d1f2      	bne.n	8007976 <sbrk_aligned+0x22>
 8007990:	e7ef      	b.n	8007972 <sbrk_aligned+0x1e>
 8007992:	bf00      	nop
 8007994:	200004c4 	.word	0x200004c4

08007998 <_malloc_r>:
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799c:	1ccd      	adds	r5, r1, #3
 800799e:	f025 0503 	bic.w	r5, r5, #3
 80079a2:	3508      	adds	r5, #8
 80079a4:	2d0c      	cmp	r5, #12
 80079a6:	bf38      	it	cc
 80079a8:	250c      	movcc	r5, #12
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	4606      	mov	r6, r0
 80079ae:	db01      	blt.n	80079b4 <_malloc_r+0x1c>
 80079b0:	42a9      	cmp	r1, r5
 80079b2:	d904      	bls.n	80079be <_malloc_r+0x26>
 80079b4:	230c      	movs	r3, #12
 80079b6:	6033      	str	r3, [r6, #0]
 80079b8:	2000      	movs	r0, #0
 80079ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a94 <_malloc_r+0xfc>
 80079c2:	f000 f869 	bl	8007a98 <__malloc_lock>
 80079c6:	f8d8 3000 	ldr.w	r3, [r8]
 80079ca:	461c      	mov	r4, r3
 80079cc:	bb44      	cbnz	r4, 8007a20 <_malloc_r+0x88>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7ff ffbf 	bl	8007954 <sbrk_aligned>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	4604      	mov	r4, r0
 80079da:	d158      	bne.n	8007a8e <_malloc_r+0xf6>
 80079dc:	f8d8 4000 	ldr.w	r4, [r8]
 80079e0:	4627      	mov	r7, r4
 80079e2:	2f00      	cmp	r7, #0
 80079e4:	d143      	bne.n	8007a6e <_malloc_r+0xd6>
 80079e6:	2c00      	cmp	r4, #0
 80079e8:	d04b      	beq.n	8007a82 <_malloc_r+0xea>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	4639      	mov	r1, r7
 80079ee:	4630      	mov	r0, r6
 80079f0:	eb04 0903 	add.w	r9, r4, r3
 80079f4:	f001 fdc2 	bl	800957c <_sbrk_r>
 80079f8:	4581      	cmp	r9, r0
 80079fa:	d142      	bne.n	8007a82 <_malloc_r+0xea>
 80079fc:	6821      	ldr	r1, [r4, #0]
 80079fe:	1a6d      	subs	r5, r5, r1
 8007a00:	4629      	mov	r1, r5
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ffa6 	bl	8007954 <sbrk_aligned>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d03a      	beq.n	8007a82 <_malloc_r+0xea>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	442b      	add	r3, r5
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	f8d8 3000 	ldr.w	r3, [r8]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	bb62      	cbnz	r2, 8007a74 <_malloc_r+0xdc>
 8007a1a:	f8c8 7000 	str.w	r7, [r8]
 8007a1e:	e00f      	b.n	8007a40 <_malloc_r+0xa8>
 8007a20:	6822      	ldr	r2, [r4, #0]
 8007a22:	1b52      	subs	r2, r2, r5
 8007a24:	d420      	bmi.n	8007a68 <_malloc_r+0xd0>
 8007a26:	2a0b      	cmp	r2, #11
 8007a28:	d917      	bls.n	8007a5a <_malloc_r+0xc2>
 8007a2a:	1961      	adds	r1, r4, r5
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	6025      	str	r5, [r4, #0]
 8007a30:	bf18      	it	ne
 8007a32:	6059      	strne	r1, [r3, #4]
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	bf08      	it	eq
 8007a38:	f8c8 1000 	streq.w	r1, [r8]
 8007a3c:	5162      	str	r2, [r4, r5]
 8007a3e:	604b      	str	r3, [r1, #4]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f000 f82f 	bl	8007aa4 <__malloc_unlock>
 8007a46:	f104 000b 	add.w	r0, r4, #11
 8007a4a:	1d23      	adds	r3, r4, #4
 8007a4c:	f020 0007 	bic.w	r0, r0, #7
 8007a50:	1ac2      	subs	r2, r0, r3
 8007a52:	bf1c      	itt	ne
 8007a54:	1a1b      	subne	r3, r3, r0
 8007a56:	50a3      	strne	r3, [r4, r2]
 8007a58:	e7af      	b.n	80079ba <_malloc_r+0x22>
 8007a5a:	6862      	ldr	r2, [r4, #4]
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	bf0c      	ite	eq
 8007a60:	f8c8 2000 	streq.w	r2, [r8]
 8007a64:	605a      	strne	r2, [r3, #4]
 8007a66:	e7eb      	b.n	8007a40 <_malloc_r+0xa8>
 8007a68:	4623      	mov	r3, r4
 8007a6a:	6864      	ldr	r4, [r4, #4]
 8007a6c:	e7ae      	b.n	80079cc <_malloc_r+0x34>
 8007a6e:	463c      	mov	r4, r7
 8007a70:	687f      	ldr	r7, [r7, #4]
 8007a72:	e7b6      	b.n	80079e2 <_malloc_r+0x4a>
 8007a74:	461a      	mov	r2, r3
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d1fb      	bne.n	8007a74 <_malloc_r+0xdc>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	6053      	str	r3, [r2, #4]
 8007a80:	e7de      	b.n	8007a40 <_malloc_r+0xa8>
 8007a82:	230c      	movs	r3, #12
 8007a84:	6033      	str	r3, [r6, #0]
 8007a86:	4630      	mov	r0, r6
 8007a88:	f000 f80c 	bl	8007aa4 <__malloc_unlock>
 8007a8c:	e794      	b.n	80079b8 <_malloc_r+0x20>
 8007a8e:	6005      	str	r5, [r0, #0]
 8007a90:	e7d6      	b.n	8007a40 <_malloc_r+0xa8>
 8007a92:	bf00      	nop
 8007a94:	200004c8 	.word	0x200004c8

08007a98 <__malloc_lock>:
 8007a98:	4801      	ldr	r0, [pc, #4]	@ (8007aa0 <__malloc_lock+0x8>)
 8007a9a:	f7ff b8b4 	b.w	8006c06 <__retarget_lock_acquire_recursive>
 8007a9e:	bf00      	nop
 8007aa0:	200004c0 	.word	0x200004c0

08007aa4 <__malloc_unlock>:
 8007aa4:	4801      	ldr	r0, [pc, #4]	@ (8007aac <__malloc_unlock+0x8>)
 8007aa6:	f7ff b8af 	b.w	8006c08 <__retarget_lock_release_recursive>
 8007aaa:	bf00      	nop
 8007aac:	200004c0 	.word	0x200004c0

08007ab0 <_Balloc>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	69c6      	ldr	r6, [r0, #28]
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	b976      	cbnz	r6, 8007ad8 <_Balloc+0x28>
 8007aba:	2010      	movs	r0, #16
 8007abc:	f7ff ff42 	bl	8007944 <malloc>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	61e0      	str	r0, [r4, #28]
 8007ac4:	b920      	cbnz	r0, 8007ad0 <_Balloc+0x20>
 8007ac6:	4b18      	ldr	r3, [pc, #96]	@ (8007b28 <_Balloc+0x78>)
 8007ac8:	4818      	ldr	r0, [pc, #96]	@ (8007b2c <_Balloc+0x7c>)
 8007aca:	216b      	movs	r1, #107	@ 0x6b
 8007acc:	f001 fd7c 	bl	80095c8 <__assert_func>
 8007ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad4:	6006      	str	r6, [r0, #0]
 8007ad6:	60c6      	str	r6, [r0, #12]
 8007ad8:	69e6      	ldr	r6, [r4, #28]
 8007ada:	68f3      	ldr	r3, [r6, #12]
 8007adc:	b183      	cbz	r3, 8007b00 <_Balloc+0x50>
 8007ade:	69e3      	ldr	r3, [r4, #28]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ae6:	b9b8      	cbnz	r0, 8007b18 <_Balloc+0x68>
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f605 	lsl.w	r6, r1, r5
 8007aee:	1d72      	adds	r2, r6, #5
 8007af0:	0092      	lsls	r2, r2, #2
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 fd86 	bl	8009604 <_calloc_r>
 8007af8:	b160      	cbz	r0, 8007b14 <_Balloc+0x64>
 8007afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007afe:	e00e      	b.n	8007b1e <_Balloc+0x6e>
 8007b00:	2221      	movs	r2, #33	@ 0x21
 8007b02:	2104      	movs	r1, #4
 8007b04:	4620      	mov	r0, r4
 8007b06:	f001 fd7d 	bl	8009604 <_calloc_r>
 8007b0a:	69e3      	ldr	r3, [r4, #28]
 8007b0c:	60f0      	str	r0, [r6, #12]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e4      	bne.n	8007ade <_Balloc+0x2e>
 8007b14:	2000      	movs	r0, #0
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	6802      	ldr	r2, [r0, #0]
 8007b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b24:	e7f7      	b.n	8007b16 <_Balloc+0x66>
 8007b26:	bf00      	nop
 8007b28:	0800a37a 	.word	0x0800a37a
 8007b2c:	0800a3fa 	.word	0x0800a3fa

08007b30 <_Bfree>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	69c6      	ldr	r6, [r0, #28]
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b976      	cbnz	r6, 8007b58 <_Bfree+0x28>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ff02 	bl	8007944 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	61e8      	str	r0, [r5, #28]
 8007b44:	b920      	cbnz	r0, 8007b50 <_Bfree+0x20>
 8007b46:	4b09      	ldr	r3, [pc, #36]	@ (8007b6c <_Bfree+0x3c>)
 8007b48:	4809      	ldr	r0, [pc, #36]	@ (8007b70 <_Bfree+0x40>)
 8007b4a:	218f      	movs	r1, #143	@ 0x8f
 8007b4c:	f001 fd3c 	bl	80095c8 <__assert_func>
 8007b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b54:	6006      	str	r6, [r0, #0]
 8007b56:	60c6      	str	r6, [r0, #12]
 8007b58:	b13c      	cbz	r4, 8007b6a <_Bfree+0x3a>
 8007b5a:	69eb      	ldr	r3, [r5, #28]
 8007b5c:	6862      	ldr	r2, [r4, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b64:	6021      	str	r1, [r4, #0]
 8007b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	0800a37a 	.word	0x0800a37a
 8007b70:	0800a3fa 	.word	0x0800a3fa

08007b74 <__multadd>:
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	690d      	ldr	r5, [r1, #16]
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	461e      	mov	r6, r3
 8007b80:	f101 0c14 	add.w	ip, r1, #20
 8007b84:	2000      	movs	r0, #0
 8007b86:	f8dc 3000 	ldr.w	r3, [ip]
 8007b8a:	b299      	uxth	r1, r3
 8007b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b90:	0c1e      	lsrs	r6, r3, #16
 8007b92:	0c0b      	lsrs	r3, r1, #16
 8007b94:	fb02 3306 	mla	r3, r2, r6, r3
 8007b98:	b289      	uxth	r1, r1
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ba0:	4285      	cmp	r5, r0
 8007ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007baa:	dcec      	bgt.n	8007b86 <__multadd+0x12>
 8007bac:	b30e      	cbz	r6, 8007bf2 <__multadd+0x7e>
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	dc19      	bgt.n	8007be8 <__multadd+0x74>
 8007bb4:	6861      	ldr	r1, [r4, #4]
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	3101      	adds	r1, #1
 8007bba:	f7ff ff79 	bl	8007ab0 <_Balloc>
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <__multadd+0x5a>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf8 <__multadd+0x84>)
 8007bc6:	480d      	ldr	r0, [pc, #52]	@ (8007bfc <__multadd+0x88>)
 8007bc8:	21ba      	movs	r1, #186	@ 0xba
 8007bca:	f001 fcfd 	bl	80095c8 <__assert_func>
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	f104 010c 	add.w	r1, r4, #12
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f001 fcdf 	bl	800959c <memcpy>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ffa5 	bl	8007b30 <_Bfree>
 8007be6:	4644      	mov	r4, r8
 8007be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bec:	3501      	adds	r5, #1
 8007bee:	615e      	str	r6, [r3, #20]
 8007bf0:	6125      	str	r5, [r4, #16]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	0800a3e9 	.word	0x0800a3e9
 8007bfc:	0800a3fa 	.word	0x0800a3fa

08007c00 <__s2b>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	4615      	mov	r5, r2
 8007c08:	461f      	mov	r7, r3
 8007c0a:	2209      	movs	r2, #9
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	4606      	mov	r6, r0
 8007c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c14:	2100      	movs	r1, #0
 8007c16:	2201      	movs	r2, #1
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	db09      	blt.n	8007c30 <__s2b+0x30>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7ff ff47 	bl	8007ab0 <_Balloc>
 8007c22:	b940      	cbnz	r0, 8007c36 <__s2b+0x36>
 8007c24:	4602      	mov	r2, r0
 8007c26:	4b19      	ldr	r3, [pc, #100]	@ (8007c8c <__s2b+0x8c>)
 8007c28:	4819      	ldr	r0, [pc, #100]	@ (8007c90 <__s2b+0x90>)
 8007c2a:	21d3      	movs	r1, #211	@ 0xd3
 8007c2c:	f001 fccc 	bl	80095c8 <__assert_func>
 8007c30:	0052      	lsls	r2, r2, #1
 8007c32:	3101      	adds	r1, #1
 8007c34:	e7f0      	b.n	8007c18 <__s2b+0x18>
 8007c36:	9b08      	ldr	r3, [sp, #32]
 8007c38:	6143      	str	r3, [r0, #20]
 8007c3a:	2d09      	cmp	r5, #9
 8007c3c:	f04f 0301 	mov.w	r3, #1
 8007c40:	6103      	str	r3, [r0, #16]
 8007c42:	dd16      	ble.n	8007c72 <__s2b+0x72>
 8007c44:	f104 0909 	add.w	r9, r4, #9
 8007c48:	46c8      	mov	r8, r9
 8007c4a:	442c      	add	r4, r5
 8007c4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c50:	4601      	mov	r1, r0
 8007c52:	3b30      	subs	r3, #48	@ 0x30
 8007c54:	220a      	movs	r2, #10
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff ff8c 	bl	8007b74 <__multadd>
 8007c5c:	45a0      	cmp	r8, r4
 8007c5e:	d1f5      	bne.n	8007c4c <__s2b+0x4c>
 8007c60:	f1a5 0408 	sub.w	r4, r5, #8
 8007c64:	444c      	add	r4, r9
 8007c66:	1b2d      	subs	r5, r5, r4
 8007c68:	1963      	adds	r3, r4, r5
 8007c6a:	42bb      	cmp	r3, r7
 8007c6c:	db04      	blt.n	8007c78 <__s2b+0x78>
 8007c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c72:	340a      	adds	r4, #10
 8007c74:	2509      	movs	r5, #9
 8007c76:	e7f6      	b.n	8007c66 <__s2b+0x66>
 8007c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	3b30      	subs	r3, #48	@ 0x30
 8007c80:	220a      	movs	r2, #10
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ff76 	bl	8007b74 <__multadd>
 8007c88:	e7ee      	b.n	8007c68 <__s2b+0x68>
 8007c8a:	bf00      	nop
 8007c8c:	0800a3e9 	.word	0x0800a3e9
 8007c90:	0800a3fa 	.word	0x0800a3fa

08007c94 <__hi0bits>:
 8007c94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c98:	4603      	mov	r3, r0
 8007c9a:	bf36      	itet	cc
 8007c9c:	0403      	lslcc	r3, r0, #16
 8007c9e:	2000      	movcs	r0, #0
 8007ca0:	2010      	movcc	r0, #16
 8007ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ca6:	bf3c      	itt	cc
 8007ca8:	021b      	lslcc	r3, r3, #8
 8007caa:	3008      	addcc	r0, #8
 8007cac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cb0:	bf3c      	itt	cc
 8007cb2:	011b      	lslcc	r3, r3, #4
 8007cb4:	3004      	addcc	r0, #4
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cba:	bf3c      	itt	cc
 8007cbc:	009b      	lslcc	r3, r3, #2
 8007cbe:	3002      	addcc	r0, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	db05      	blt.n	8007cd0 <__hi0bits+0x3c>
 8007cc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007cc8:	f100 0001 	add.w	r0, r0, #1
 8007ccc:	bf08      	it	eq
 8007cce:	2020      	moveq	r0, #32
 8007cd0:	4770      	bx	lr

08007cd2 <__lo0bits>:
 8007cd2:	6803      	ldr	r3, [r0, #0]
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f013 0007 	ands.w	r0, r3, #7
 8007cda:	d00b      	beq.n	8007cf4 <__lo0bits+0x22>
 8007cdc:	07d9      	lsls	r1, r3, #31
 8007cde:	d421      	bmi.n	8007d24 <__lo0bits+0x52>
 8007ce0:	0798      	lsls	r0, r3, #30
 8007ce2:	bf49      	itett	mi
 8007ce4:	085b      	lsrmi	r3, r3, #1
 8007ce6:	089b      	lsrpl	r3, r3, #2
 8007ce8:	2001      	movmi	r0, #1
 8007cea:	6013      	strmi	r3, [r2, #0]
 8007cec:	bf5c      	itt	pl
 8007cee:	6013      	strpl	r3, [r2, #0]
 8007cf0:	2002      	movpl	r0, #2
 8007cf2:	4770      	bx	lr
 8007cf4:	b299      	uxth	r1, r3
 8007cf6:	b909      	cbnz	r1, 8007cfc <__lo0bits+0x2a>
 8007cf8:	0c1b      	lsrs	r3, r3, #16
 8007cfa:	2010      	movs	r0, #16
 8007cfc:	b2d9      	uxtb	r1, r3
 8007cfe:	b909      	cbnz	r1, 8007d04 <__lo0bits+0x32>
 8007d00:	3008      	adds	r0, #8
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	0719      	lsls	r1, r3, #28
 8007d06:	bf04      	itt	eq
 8007d08:	091b      	lsreq	r3, r3, #4
 8007d0a:	3004      	addeq	r0, #4
 8007d0c:	0799      	lsls	r1, r3, #30
 8007d0e:	bf04      	itt	eq
 8007d10:	089b      	lsreq	r3, r3, #2
 8007d12:	3002      	addeq	r0, #2
 8007d14:	07d9      	lsls	r1, r3, #31
 8007d16:	d403      	bmi.n	8007d20 <__lo0bits+0x4e>
 8007d18:	085b      	lsrs	r3, r3, #1
 8007d1a:	f100 0001 	add.w	r0, r0, #1
 8007d1e:	d003      	beq.n	8007d28 <__lo0bits+0x56>
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	4770      	bx	lr
 8007d24:	2000      	movs	r0, #0
 8007d26:	4770      	bx	lr
 8007d28:	2020      	movs	r0, #32
 8007d2a:	4770      	bx	lr

08007d2c <__i2b>:
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	460c      	mov	r4, r1
 8007d30:	2101      	movs	r1, #1
 8007d32:	f7ff febd 	bl	8007ab0 <_Balloc>
 8007d36:	4602      	mov	r2, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <__i2b+0x1a>
 8007d3a:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <__i2b+0x24>)
 8007d3c:	4805      	ldr	r0, [pc, #20]	@ (8007d54 <__i2b+0x28>)
 8007d3e:	f240 1145 	movw	r1, #325	@ 0x145
 8007d42:	f001 fc41 	bl	80095c8 <__assert_func>
 8007d46:	2301      	movs	r3, #1
 8007d48:	6144      	str	r4, [r0, #20]
 8007d4a:	6103      	str	r3, [r0, #16]
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	bf00      	nop
 8007d50:	0800a3e9 	.word	0x0800a3e9
 8007d54:	0800a3fa 	.word	0x0800a3fa

08007d58 <__multiply>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	690a      	ldr	r2, [r1, #16]
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	bfa8      	it	ge
 8007d66:	4623      	movge	r3, r4
 8007d68:	460f      	mov	r7, r1
 8007d6a:	bfa4      	itt	ge
 8007d6c:	460c      	movge	r4, r1
 8007d6e:	461f      	movge	r7, r3
 8007d70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	6861      	ldr	r1, [r4, #4]
 8007d7c:	eb0a 0609 	add.w	r6, sl, r9
 8007d80:	42b3      	cmp	r3, r6
 8007d82:	b085      	sub	sp, #20
 8007d84:	bfb8      	it	lt
 8007d86:	3101      	addlt	r1, #1
 8007d88:	f7ff fe92 	bl	8007ab0 <_Balloc>
 8007d8c:	b930      	cbnz	r0, 8007d9c <__multiply+0x44>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	4b44      	ldr	r3, [pc, #272]	@ (8007ea4 <__multiply+0x14c>)
 8007d92:	4845      	ldr	r0, [pc, #276]	@ (8007ea8 <__multiply+0x150>)
 8007d94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d98:	f001 fc16 	bl	80095c8 <__assert_func>
 8007d9c:	f100 0514 	add.w	r5, r0, #20
 8007da0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007da4:	462b      	mov	r3, r5
 8007da6:	2200      	movs	r2, #0
 8007da8:	4543      	cmp	r3, r8
 8007daa:	d321      	bcc.n	8007df0 <__multiply+0x98>
 8007dac:	f107 0114 	add.w	r1, r7, #20
 8007db0:	f104 0214 	add.w	r2, r4, #20
 8007db4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007db8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007dbc:	9302      	str	r3, [sp, #8]
 8007dbe:	1b13      	subs	r3, r2, r4
 8007dc0:	3b15      	subs	r3, #21
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	f104 0715 	add.w	r7, r4, #21
 8007dcc:	42ba      	cmp	r2, r7
 8007dce:	bf38      	it	cc
 8007dd0:	2304      	movcc	r3, #4
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	9b02      	ldr	r3, [sp, #8]
 8007dd6:	9103      	str	r1, [sp, #12]
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	d80c      	bhi.n	8007df6 <__multiply+0x9e>
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	dd03      	ble.n	8007de8 <__multiply+0x90>
 8007de0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d05b      	beq.n	8007ea0 <__multiply+0x148>
 8007de8:	6106      	str	r6, [r0, #16]
 8007dea:	b005      	add	sp, #20
 8007dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	f843 2b04 	str.w	r2, [r3], #4
 8007df4:	e7d8      	b.n	8007da8 <__multiply+0x50>
 8007df6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dfa:	f1ba 0f00 	cmp.w	sl, #0
 8007dfe:	d024      	beq.n	8007e4a <__multiply+0xf2>
 8007e00:	f104 0e14 	add.w	lr, r4, #20
 8007e04:	46a9      	mov	r9, r5
 8007e06:	f04f 0c00 	mov.w	ip, #0
 8007e0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e0e:	f8d9 3000 	ldr.w	r3, [r9]
 8007e12:	fa1f fb87 	uxth.w	fp, r7
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e20:	f8d9 7000 	ldr.w	r7, [r9]
 8007e24:	4463      	add	r3, ip
 8007e26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e38:	4572      	cmp	r2, lr
 8007e3a:	f849 3b04 	str.w	r3, [r9], #4
 8007e3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e42:	d8e2      	bhi.n	8007e0a <__multiply+0xb2>
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	f845 c003 	str.w	ip, [r5, r3]
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e50:	3104      	adds	r1, #4
 8007e52:	f1b9 0f00 	cmp.w	r9, #0
 8007e56:	d021      	beq.n	8007e9c <__multiply+0x144>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	f104 0c14 	add.w	ip, r4, #20
 8007e5e:	46ae      	mov	lr, r5
 8007e60:	f04f 0a00 	mov.w	sl, #0
 8007e64:	f8bc b000 	ldrh.w	fp, [ip]
 8007e68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e6c:	fb09 770b 	mla	r7, r9, fp, r7
 8007e70:	4457      	add	r7, sl
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e78:	f84e 3b04 	str.w	r3, [lr], #4
 8007e7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e84:	f8be 3000 	ldrh.w	r3, [lr]
 8007e88:	fb09 330a 	mla	r3, r9, sl, r3
 8007e8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e90:	4562      	cmp	r2, ip
 8007e92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e96:	d8e5      	bhi.n	8007e64 <__multiply+0x10c>
 8007e98:	9f01      	ldr	r7, [sp, #4]
 8007e9a:	51eb      	str	r3, [r5, r7]
 8007e9c:	3504      	adds	r5, #4
 8007e9e:	e799      	b.n	8007dd4 <__multiply+0x7c>
 8007ea0:	3e01      	subs	r6, #1
 8007ea2:	e79b      	b.n	8007ddc <__multiply+0x84>
 8007ea4:	0800a3e9 	.word	0x0800a3e9
 8007ea8:	0800a3fa 	.word	0x0800a3fa

08007eac <__pow5mult>:
 8007eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	f012 0203 	ands.w	r2, r2, #3
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	460e      	mov	r6, r1
 8007eba:	d007      	beq.n	8007ecc <__pow5mult+0x20>
 8007ebc:	4c25      	ldr	r4, [pc, #148]	@ (8007f54 <__pow5mult+0xa8>)
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ec6:	f7ff fe55 	bl	8007b74 <__multadd>
 8007eca:	4606      	mov	r6, r0
 8007ecc:	10ad      	asrs	r5, r5, #2
 8007ece:	d03d      	beq.n	8007f4c <__pow5mult+0xa0>
 8007ed0:	69fc      	ldr	r4, [r7, #28]
 8007ed2:	b97c      	cbnz	r4, 8007ef4 <__pow5mult+0x48>
 8007ed4:	2010      	movs	r0, #16
 8007ed6:	f7ff fd35 	bl	8007944 <malloc>
 8007eda:	4602      	mov	r2, r0
 8007edc:	61f8      	str	r0, [r7, #28]
 8007ede:	b928      	cbnz	r0, 8007eec <__pow5mult+0x40>
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f58 <__pow5mult+0xac>)
 8007ee2:	481e      	ldr	r0, [pc, #120]	@ (8007f5c <__pow5mult+0xb0>)
 8007ee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ee8:	f001 fb6e 	bl	80095c8 <__assert_func>
 8007eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef0:	6004      	str	r4, [r0, #0]
 8007ef2:	60c4      	str	r4, [r0, #12]
 8007ef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007efc:	b94c      	cbnz	r4, 8007f12 <__pow5mult+0x66>
 8007efe:	f240 2171 	movw	r1, #625	@ 0x271
 8007f02:	4638      	mov	r0, r7
 8007f04:	f7ff ff12 	bl	8007d2c <__i2b>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f0e:	4604      	mov	r4, r0
 8007f10:	6003      	str	r3, [r0, #0]
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	07eb      	lsls	r3, r5, #31
 8007f18:	d50a      	bpl.n	8007f30 <__pow5mult+0x84>
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff ff1a 	bl	8007d58 <__multiply>
 8007f24:	4631      	mov	r1, r6
 8007f26:	4680      	mov	r8, r0
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff fe01 	bl	8007b30 <_Bfree>
 8007f2e:	4646      	mov	r6, r8
 8007f30:	106d      	asrs	r5, r5, #1
 8007f32:	d00b      	beq.n	8007f4c <__pow5mult+0xa0>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	b938      	cbnz	r0, 8007f48 <__pow5mult+0x9c>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ff0b 	bl	8007d58 <__multiply>
 8007f42:	6020      	str	r0, [r4, #0]
 8007f44:	f8c0 9000 	str.w	r9, [r0]
 8007f48:	4604      	mov	r4, r0
 8007f4a:	e7e4      	b.n	8007f16 <__pow5mult+0x6a>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f52:	bf00      	nop
 8007f54:	0800a454 	.word	0x0800a454
 8007f58:	0800a37a 	.word	0x0800a37a
 8007f5c:	0800a3fa 	.word	0x0800a3fa

08007f60 <__lshift>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	460c      	mov	r4, r1
 8007f66:	6849      	ldr	r1, [r1, #4]
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	4607      	mov	r7, r0
 8007f72:	4691      	mov	r9, r2
 8007f74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f78:	f108 0601 	add.w	r6, r8, #1
 8007f7c:	42b3      	cmp	r3, r6
 8007f7e:	db0b      	blt.n	8007f98 <__lshift+0x38>
 8007f80:	4638      	mov	r0, r7
 8007f82:	f7ff fd95 	bl	8007ab0 <_Balloc>
 8007f86:	4605      	mov	r5, r0
 8007f88:	b948      	cbnz	r0, 8007f9e <__lshift+0x3e>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b28      	ldr	r3, [pc, #160]	@ (8008030 <__lshift+0xd0>)
 8007f8e:	4829      	ldr	r0, [pc, #164]	@ (8008034 <__lshift+0xd4>)
 8007f90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f94:	f001 fb18 	bl	80095c8 <__assert_func>
 8007f98:	3101      	adds	r1, #1
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	e7ee      	b.n	8007f7c <__lshift+0x1c>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f100 0114 	add.w	r1, r0, #20
 8007fa4:	f100 0210 	add.w	r2, r0, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	4553      	cmp	r3, sl
 8007fac:	db33      	blt.n	8008016 <__lshift+0xb6>
 8007fae:	6920      	ldr	r0, [r4, #16]
 8007fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fb4:	f104 0314 	add.w	r3, r4, #20
 8007fb8:	f019 091f 	ands.w	r9, r9, #31
 8007fbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fc4:	d02b      	beq.n	800801e <__lshift+0xbe>
 8007fc6:	f1c9 0e20 	rsb	lr, r9, #32
 8007fca:	468a      	mov	sl, r1
 8007fcc:	2200      	movs	r2, #0
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	fa00 f009 	lsl.w	r0, r0, r9
 8007fd4:	4310      	orrs	r0, r2
 8007fd6:	f84a 0b04 	str.w	r0, [sl], #4
 8007fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fde:	459c      	cmp	ip, r3
 8007fe0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fe4:	d8f3      	bhi.n	8007fce <__lshift+0x6e>
 8007fe6:	ebac 0304 	sub.w	r3, ip, r4
 8007fea:	3b15      	subs	r3, #21
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	f104 0015 	add.w	r0, r4, #21
 8007ff6:	4584      	cmp	ip, r0
 8007ff8:	bf38      	it	cc
 8007ffa:	2304      	movcc	r3, #4
 8007ffc:	50ca      	str	r2, [r1, r3]
 8007ffe:	b10a      	cbz	r2, 8008004 <__lshift+0xa4>
 8008000:	f108 0602 	add.w	r6, r8, #2
 8008004:	3e01      	subs	r6, #1
 8008006:	4638      	mov	r0, r7
 8008008:	612e      	str	r6, [r5, #16]
 800800a:	4621      	mov	r1, r4
 800800c:	f7ff fd90 	bl	8007b30 <_Bfree>
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	f842 0f04 	str.w	r0, [r2, #4]!
 800801a:	3301      	adds	r3, #1
 800801c:	e7c5      	b.n	8007faa <__lshift+0x4a>
 800801e:	3904      	subs	r1, #4
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	f841 2f04 	str.w	r2, [r1, #4]!
 8008028:	459c      	cmp	ip, r3
 800802a:	d8f9      	bhi.n	8008020 <__lshift+0xc0>
 800802c:	e7ea      	b.n	8008004 <__lshift+0xa4>
 800802e:	bf00      	nop
 8008030:	0800a3e9 	.word	0x0800a3e9
 8008034:	0800a3fa 	.word	0x0800a3fa

08008038 <__mcmp>:
 8008038:	690a      	ldr	r2, [r1, #16]
 800803a:	4603      	mov	r3, r0
 800803c:	6900      	ldr	r0, [r0, #16]
 800803e:	1a80      	subs	r0, r0, r2
 8008040:	b530      	push	{r4, r5, lr}
 8008042:	d10e      	bne.n	8008062 <__mcmp+0x2a>
 8008044:	3314      	adds	r3, #20
 8008046:	3114      	adds	r1, #20
 8008048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800804c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008058:	4295      	cmp	r5, r2
 800805a:	d003      	beq.n	8008064 <__mcmp+0x2c>
 800805c:	d205      	bcs.n	800806a <__mcmp+0x32>
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	bd30      	pop	{r4, r5, pc}
 8008064:	42a3      	cmp	r3, r4
 8008066:	d3f3      	bcc.n	8008050 <__mcmp+0x18>
 8008068:	e7fb      	b.n	8008062 <__mcmp+0x2a>
 800806a:	2001      	movs	r0, #1
 800806c:	e7f9      	b.n	8008062 <__mcmp+0x2a>
	...

08008070 <__mdiff>:
 8008070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4689      	mov	r9, r1
 8008076:	4606      	mov	r6, r0
 8008078:	4611      	mov	r1, r2
 800807a:	4648      	mov	r0, r9
 800807c:	4614      	mov	r4, r2
 800807e:	f7ff ffdb 	bl	8008038 <__mcmp>
 8008082:	1e05      	subs	r5, r0, #0
 8008084:	d112      	bne.n	80080ac <__mdiff+0x3c>
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff fd11 	bl	8007ab0 <_Balloc>
 800808e:	4602      	mov	r2, r0
 8008090:	b928      	cbnz	r0, 800809e <__mdiff+0x2e>
 8008092:	4b3f      	ldr	r3, [pc, #252]	@ (8008190 <__mdiff+0x120>)
 8008094:	f240 2137 	movw	r1, #567	@ 0x237
 8008098:	483e      	ldr	r0, [pc, #248]	@ (8008194 <__mdiff+0x124>)
 800809a:	f001 fa95 	bl	80095c8 <__assert_func>
 800809e:	2301      	movs	r3, #1
 80080a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080a4:	4610      	mov	r0, r2
 80080a6:	b003      	add	sp, #12
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	bfbc      	itt	lt
 80080ae:	464b      	movlt	r3, r9
 80080b0:	46a1      	movlt	r9, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080b8:	bfba      	itte	lt
 80080ba:	461c      	movlt	r4, r3
 80080bc:	2501      	movlt	r5, #1
 80080be:	2500      	movge	r5, #0
 80080c0:	f7ff fcf6 	bl	8007ab0 <_Balloc>
 80080c4:	4602      	mov	r2, r0
 80080c6:	b918      	cbnz	r0, 80080d0 <__mdiff+0x60>
 80080c8:	4b31      	ldr	r3, [pc, #196]	@ (8008190 <__mdiff+0x120>)
 80080ca:	f240 2145 	movw	r1, #581	@ 0x245
 80080ce:	e7e3      	b.n	8008098 <__mdiff+0x28>
 80080d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080d4:	6926      	ldr	r6, [r4, #16]
 80080d6:	60c5      	str	r5, [r0, #12]
 80080d8:	f109 0310 	add.w	r3, r9, #16
 80080dc:	f109 0514 	add.w	r5, r9, #20
 80080e0:	f104 0e14 	add.w	lr, r4, #20
 80080e4:	f100 0b14 	add.w	fp, r0, #20
 80080e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	46d9      	mov	r9, fp
 80080f4:	f04f 0c00 	mov.w	ip, #0
 80080f8:	9b01      	ldr	r3, [sp, #4]
 80080fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	fa1f f38a 	uxth.w	r3, sl
 8008108:	4619      	mov	r1, r3
 800810a:	b283      	uxth	r3, r0
 800810c:	1acb      	subs	r3, r1, r3
 800810e:	0c00      	lsrs	r0, r0, #16
 8008110:	4463      	add	r3, ip
 8008112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800811a:	b29b      	uxth	r3, r3
 800811c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008120:	4576      	cmp	r6, lr
 8008122:	f849 3b04 	str.w	r3, [r9], #4
 8008126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800812a:	d8e5      	bhi.n	80080f8 <__mdiff+0x88>
 800812c:	1b33      	subs	r3, r6, r4
 800812e:	3b15      	subs	r3, #21
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	3415      	adds	r4, #21
 8008136:	3304      	adds	r3, #4
 8008138:	42a6      	cmp	r6, r4
 800813a:	bf38      	it	cc
 800813c:	2304      	movcc	r3, #4
 800813e:	441d      	add	r5, r3
 8008140:	445b      	add	r3, fp
 8008142:	461e      	mov	r6, r3
 8008144:	462c      	mov	r4, r5
 8008146:	4544      	cmp	r4, r8
 8008148:	d30e      	bcc.n	8008168 <__mdiff+0xf8>
 800814a:	f108 0103 	add.w	r1, r8, #3
 800814e:	1b49      	subs	r1, r1, r5
 8008150:	f021 0103 	bic.w	r1, r1, #3
 8008154:	3d03      	subs	r5, #3
 8008156:	45a8      	cmp	r8, r5
 8008158:	bf38      	it	cc
 800815a:	2100      	movcc	r1, #0
 800815c:	440b      	add	r3, r1
 800815e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008162:	b191      	cbz	r1, 800818a <__mdiff+0x11a>
 8008164:	6117      	str	r7, [r2, #16]
 8008166:	e79d      	b.n	80080a4 <__mdiff+0x34>
 8008168:	f854 1b04 	ldr.w	r1, [r4], #4
 800816c:	46e6      	mov	lr, ip
 800816e:	0c08      	lsrs	r0, r1, #16
 8008170:	fa1c fc81 	uxtah	ip, ip, r1
 8008174:	4471      	add	r1, lr
 8008176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800817a:	b289      	uxth	r1, r1
 800817c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008180:	f846 1b04 	str.w	r1, [r6], #4
 8008184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008188:	e7dd      	b.n	8008146 <__mdiff+0xd6>
 800818a:	3f01      	subs	r7, #1
 800818c:	e7e7      	b.n	800815e <__mdiff+0xee>
 800818e:	bf00      	nop
 8008190:	0800a3e9 	.word	0x0800a3e9
 8008194:	0800a3fa 	.word	0x0800a3fa

08008198 <__ulp>:
 8008198:	b082      	sub	sp, #8
 800819a:	ed8d 0b00 	vstr	d0, [sp]
 800819e:	9a01      	ldr	r2, [sp, #4]
 80081a0:	4b0f      	ldr	r3, [pc, #60]	@ (80081e0 <__ulp+0x48>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	dc08      	bgt.n	80081be <__ulp+0x26>
 80081ac:	425b      	negs	r3, r3
 80081ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80081b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80081b6:	da04      	bge.n	80081c2 <__ulp+0x2a>
 80081b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80081bc:	4113      	asrs	r3, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	e008      	b.n	80081d4 <__ulp+0x3c>
 80081c2:	f1a2 0314 	sub.w	r3, r2, #20
 80081c6:	2b1e      	cmp	r3, #30
 80081c8:	bfda      	itte	le
 80081ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80081ce:	40da      	lsrle	r2, r3
 80081d0:	2201      	movgt	r2, #1
 80081d2:	2300      	movs	r3, #0
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	ec41 0b10 	vmov	d0, r0, r1
 80081dc:	b002      	add	sp, #8
 80081de:	4770      	bx	lr
 80081e0:	7ff00000 	.word	0x7ff00000

080081e4 <__b2d>:
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	6906      	ldr	r6, [r0, #16]
 80081ea:	f100 0814 	add.w	r8, r0, #20
 80081ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80081f2:	1f37      	subs	r7, r6, #4
 80081f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081f8:	4610      	mov	r0, r2
 80081fa:	f7ff fd4b 	bl	8007c94 <__hi0bits>
 80081fe:	f1c0 0320 	rsb	r3, r0, #32
 8008202:	280a      	cmp	r0, #10
 8008204:	600b      	str	r3, [r1, #0]
 8008206:	491b      	ldr	r1, [pc, #108]	@ (8008274 <__b2d+0x90>)
 8008208:	dc15      	bgt.n	8008236 <__b2d+0x52>
 800820a:	f1c0 0c0b 	rsb	ip, r0, #11
 800820e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008212:	45b8      	cmp	r8, r7
 8008214:	ea43 0501 	orr.w	r5, r3, r1
 8008218:	bf34      	ite	cc
 800821a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800821e:	2300      	movcs	r3, #0
 8008220:	3015      	adds	r0, #21
 8008222:	fa02 f000 	lsl.w	r0, r2, r0
 8008226:	fa23 f30c 	lsr.w	r3, r3, ip
 800822a:	4303      	orrs	r3, r0
 800822c:	461c      	mov	r4, r3
 800822e:	ec45 4b10 	vmov	d0, r4, r5
 8008232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008236:	45b8      	cmp	r8, r7
 8008238:	bf3a      	itte	cc
 800823a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800823e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008242:	2300      	movcs	r3, #0
 8008244:	380b      	subs	r0, #11
 8008246:	d012      	beq.n	800826e <__b2d+0x8a>
 8008248:	f1c0 0120 	rsb	r1, r0, #32
 800824c:	fa23 f401 	lsr.w	r4, r3, r1
 8008250:	4082      	lsls	r2, r0
 8008252:	4322      	orrs	r2, r4
 8008254:	4547      	cmp	r7, r8
 8008256:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800825a:	bf8c      	ite	hi
 800825c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008260:	2200      	movls	r2, #0
 8008262:	4083      	lsls	r3, r0
 8008264:	40ca      	lsrs	r2, r1
 8008266:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800826a:	4313      	orrs	r3, r2
 800826c:	e7de      	b.n	800822c <__b2d+0x48>
 800826e:	ea42 0501 	orr.w	r5, r2, r1
 8008272:	e7db      	b.n	800822c <__b2d+0x48>
 8008274:	3ff00000 	.word	0x3ff00000

08008278 <__d2b>:
 8008278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800827c:	460f      	mov	r7, r1
 800827e:	2101      	movs	r1, #1
 8008280:	ec59 8b10 	vmov	r8, r9, d0
 8008284:	4616      	mov	r6, r2
 8008286:	f7ff fc13 	bl	8007ab0 <_Balloc>
 800828a:	4604      	mov	r4, r0
 800828c:	b930      	cbnz	r0, 800829c <__d2b+0x24>
 800828e:	4602      	mov	r2, r0
 8008290:	4b23      	ldr	r3, [pc, #140]	@ (8008320 <__d2b+0xa8>)
 8008292:	4824      	ldr	r0, [pc, #144]	@ (8008324 <__d2b+0xac>)
 8008294:	f240 310f 	movw	r1, #783	@ 0x30f
 8008298:	f001 f996 	bl	80095c8 <__assert_func>
 800829c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082a4:	b10d      	cbz	r5, 80082aa <__d2b+0x32>
 80082a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	f1b8 0300 	subs.w	r3, r8, #0
 80082b0:	d023      	beq.n	80082fa <__d2b+0x82>
 80082b2:	4668      	mov	r0, sp
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	f7ff fd0c 	bl	8007cd2 <__lo0bits>
 80082ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082be:	b1d0      	cbz	r0, 80082f6 <__d2b+0x7e>
 80082c0:	f1c0 0320 	rsb	r3, r0, #32
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	430b      	orrs	r3, r1
 80082ca:	40c2      	lsrs	r2, r0
 80082cc:	6163      	str	r3, [r4, #20]
 80082ce:	9201      	str	r2, [sp, #4]
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	61a3      	str	r3, [r4, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bf0c      	ite	eq
 80082d8:	2201      	moveq	r2, #1
 80082da:	2202      	movne	r2, #2
 80082dc:	6122      	str	r2, [r4, #16]
 80082de:	b1a5      	cbz	r5, 800830a <__d2b+0x92>
 80082e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082e4:	4405      	add	r5, r0
 80082e6:	603d      	str	r5, [r7, #0]
 80082e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082ec:	6030      	str	r0, [r6, #0]
 80082ee:	4620      	mov	r0, r4
 80082f0:	b003      	add	sp, #12
 80082f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f6:	6161      	str	r1, [r4, #20]
 80082f8:	e7ea      	b.n	80082d0 <__d2b+0x58>
 80082fa:	a801      	add	r0, sp, #4
 80082fc:	f7ff fce9 	bl	8007cd2 <__lo0bits>
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	3020      	adds	r0, #32
 8008306:	2201      	movs	r2, #1
 8008308:	e7e8      	b.n	80082dc <__d2b+0x64>
 800830a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800830e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008312:	6038      	str	r0, [r7, #0]
 8008314:	6918      	ldr	r0, [r3, #16]
 8008316:	f7ff fcbd 	bl	8007c94 <__hi0bits>
 800831a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800831e:	e7e5      	b.n	80082ec <__d2b+0x74>
 8008320:	0800a3e9 	.word	0x0800a3e9
 8008324:	0800a3fa 	.word	0x0800a3fa

08008328 <__ratio>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	b085      	sub	sp, #20
 800832e:	e9cd 1000 	strd	r1, r0, [sp]
 8008332:	a902      	add	r1, sp, #8
 8008334:	f7ff ff56 	bl	80081e4 <__b2d>
 8008338:	9800      	ldr	r0, [sp, #0]
 800833a:	a903      	add	r1, sp, #12
 800833c:	ec55 4b10 	vmov	r4, r5, d0
 8008340:	f7ff ff50 	bl	80081e4 <__b2d>
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	6919      	ldr	r1, [r3, #16]
 8008348:	9b00      	ldr	r3, [sp, #0]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	1ac9      	subs	r1, r1, r3
 800834e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	ec5b ab10 	vmov	sl, fp, d0
 8008358:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfce      	itee	gt
 8008360:	462a      	movgt	r2, r5
 8008362:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008366:	465a      	movle	r2, fp
 8008368:	462f      	mov	r7, r5
 800836a:	46d9      	mov	r9, fp
 800836c:	bfcc      	ite	gt
 800836e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008372:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008376:	464b      	mov	r3, r9
 8008378:	4652      	mov	r2, sl
 800837a:	4620      	mov	r0, r4
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 fa6d 	bl	800085c <__aeabi_ddiv>
 8008382:	ec41 0b10 	vmov	d0, r0, r1
 8008386:	b005      	add	sp, #20
 8008388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800838c <__copybits>:
 800838c:	3901      	subs	r1, #1
 800838e:	b570      	push	{r4, r5, r6, lr}
 8008390:	1149      	asrs	r1, r1, #5
 8008392:	6914      	ldr	r4, [r2, #16]
 8008394:	3101      	adds	r1, #1
 8008396:	f102 0314 	add.w	r3, r2, #20
 800839a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800839e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083a2:	1f05      	subs	r5, r0, #4
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	d30c      	bcc.n	80083c2 <__copybits+0x36>
 80083a8:	1aa3      	subs	r3, r4, r2
 80083aa:	3b11      	subs	r3, #17
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	3211      	adds	r2, #17
 80083b2:	42a2      	cmp	r2, r4
 80083b4:	bf88      	it	hi
 80083b6:	2300      	movhi	r3, #0
 80083b8:	4418      	add	r0, r3
 80083ba:	2300      	movs	r3, #0
 80083bc:	4288      	cmp	r0, r1
 80083be:	d305      	bcc.n	80083cc <__copybits+0x40>
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
 80083c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80083c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80083ca:	e7eb      	b.n	80083a4 <__copybits+0x18>
 80083cc:	f840 3b04 	str.w	r3, [r0], #4
 80083d0:	e7f4      	b.n	80083bc <__copybits+0x30>

080083d2 <__any_on>:
 80083d2:	f100 0214 	add.w	r2, r0, #20
 80083d6:	6900      	ldr	r0, [r0, #16]
 80083d8:	114b      	asrs	r3, r1, #5
 80083da:	4298      	cmp	r0, r3
 80083dc:	b510      	push	{r4, lr}
 80083de:	db11      	blt.n	8008404 <__any_on+0x32>
 80083e0:	dd0a      	ble.n	80083f8 <__any_on+0x26>
 80083e2:	f011 011f 	ands.w	r1, r1, #31
 80083e6:	d007      	beq.n	80083f8 <__any_on+0x26>
 80083e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083ec:	fa24 f001 	lsr.w	r0, r4, r1
 80083f0:	fa00 f101 	lsl.w	r1, r0, r1
 80083f4:	428c      	cmp	r4, r1
 80083f6:	d10b      	bne.n	8008410 <__any_on+0x3e>
 80083f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d803      	bhi.n	8008408 <__any_on+0x36>
 8008400:	2000      	movs	r0, #0
 8008402:	bd10      	pop	{r4, pc}
 8008404:	4603      	mov	r3, r0
 8008406:	e7f7      	b.n	80083f8 <__any_on+0x26>
 8008408:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800840c:	2900      	cmp	r1, #0
 800840e:	d0f5      	beq.n	80083fc <__any_on+0x2a>
 8008410:	2001      	movs	r0, #1
 8008412:	e7f6      	b.n	8008402 <__any_on+0x30>

08008414 <sulp>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
 800841a:	ec45 4b10 	vmov	d0, r4, r5
 800841e:	4616      	mov	r6, r2
 8008420:	f7ff feba 	bl	8008198 <__ulp>
 8008424:	ec51 0b10 	vmov	r0, r1, d0
 8008428:	b17e      	cbz	r6, 800844a <sulp+0x36>
 800842a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800842e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008432:	2b00      	cmp	r3, #0
 8008434:	dd09      	ble.n	800844a <sulp+0x36>
 8008436:	051b      	lsls	r3, r3, #20
 8008438:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800843c:	2400      	movs	r4, #0
 800843e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008442:	4622      	mov	r2, r4
 8008444:	462b      	mov	r3, r5
 8008446:	f7f8 f8df 	bl	8000608 <__aeabi_dmul>
 800844a:	ec41 0b10 	vmov	d0, r0, r1
 800844e:	bd70      	pop	{r4, r5, r6, pc}

08008450 <_strtod_l>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	b09f      	sub	sp, #124	@ 0x7c
 8008456:	460c      	mov	r4, r1
 8008458:	9217      	str	r2, [sp, #92]	@ 0x5c
 800845a:	2200      	movs	r2, #0
 800845c:	921a      	str	r2, [sp, #104]	@ 0x68
 800845e:	9005      	str	r0, [sp, #20]
 8008460:	f04f 0a00 	mov.w	sl, #0
 8008464:	f04f 0b00 	mov.w	fp, #0
 8008468:	460a      	mov	r2, r1
 800846a:	9219      	str	r2, [sp, #100]	@ 0x64
 800846c:	7811      	ldrb	r1, [r2, #0]
 800846e:	292b      	cmp	r1, #43	@ 0x2b
 8008470:	d04a      	beq.n	8008508 <_strtod_l+0xb8>
 8008472:	d838      	bhi.n	80084e6 <_strtod_l+0x96>
 8008474:	290d      	cmp	r1, #13
 8008476:	d832      	bhi.n	80084de <_strtod_l+0x8e>
 8008478:	2908      	cmp	r1, #8
 800847a:	d832      	bhi.n	80084e2 <_strtod_l+0x92>
 800847c:	2900      	cmp	r1, #0
 800847e:	d03b      	beq.n	80084f8 <_strtod_l+0xa8>
 8008480:	2200      	movs	r2, #0
 8008482:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008486:	782a      	ldrb	r2, [r5, #0]
 8008488:	2a30      	cmp	r2, #48	@ 0x30
 800848a:	f040 80b3 	bne.w	80085f4 <_strtod_l+0x1a4>
 800848e:	786a      	ldrb	r2, [r5, #1]
 8008490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008494:	2a58      	cmp	r2, #88	@ 0x58
 8008496:	d16e      	bne.n	8008576 <_strtod_l+0x126>
 8008498:	9302      	str	r3, [sp, #8]
 800849a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	ab1a      	add	r3, sp, #104	@ 0x68
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4a8e      	ldr	r2, [pc, #568]	@ (80086dc <_strtod_l+0x28c>)
 80084a4:	9805      	ldr	r0, [sp, #20]
 80084a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80084a8:	a919      	add	r1, sp, #100	@ 0x64
 80084aa:	f001 f927 	bl	80096fc <__gethex>
 80084ae:	f010 060f 	ands.w	r6, r0, #15
 80084b2:	4604      	mov	r4, r0
 80084b4:	d005      	beq.n	80084c2 <_strtod_l+0x72>
 80084b6:	2e06      	cmp	r6, #6
 80084b8:	d128      	bne.n	800850c <_strtod_l+0xbc>
 80084ba:	3501      	adds	r5, #1
 80084bc:	2300      	movs	r3, #0
 80084be:	9519      	str	r5, [sp, #100]	@ 0x64
 80084c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f040 858e 	bne.w	8008fe6 <_strtod_l+0xb96>
 80084ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084cc:	b1cb      	cbz	r3, 8008502 <_strtod_l+0xb2>
 80084ce:	4652      	mov	r2, sl
 80084d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80084d4:	ec43 2b10 	vmov	d0, r2, r3
 80084d8:	b01f      	add	sp, #124	@ 0x7c
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	2920      	cmp	r1, #32
 80084e0:	d1ce      	bne.n	8008480 <_strtod_l+0x30>
 80084e2:	3201      	adds	r2, #1
 80084e4:	e7c1      	b.n	800846a <_strtod_l+0x1a>
 80084e6:	292d      	cmp	r1, #45	@ 0x2d
 80084e8:	d1ca      	bne.n	8008480 <_strtod_l+0x30>
 80084ea:	2101      	movs	r1, #1
 80084ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80084ee:	1c51      	adds	r1, r2, #1
 80084f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80084f2:	7852      	ldrb	r2, [r2, #1]
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	d1c5      	bne.n	8008484 <_strtod_l+0x34>
 80084f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8570 	bne.w	8008fe2 <_strtod_l+0xb92>
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	e7e5      	b.n	80084d4 <_strtod_l+0x84>
 8008508:	2100      	movs	r1, #0
 800850a:	e7ef      	b.n	80084ec <_strtod_l+0x9c>
 800850c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800850e:	b13a      	cbz	r2, 8008520 <_strtod_l+0xd0>
 8008510:	2135      	movs	r1, #53	@ 0x35
 8008512:	a81c      	add	r0, sp, #112	@ 0x70
 8008514:	f7ff ff3a 	bl	800838c <__copybits>
 8008518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800851a:	9805      	ldr	r0, [sp, #20]
 800851c:	f7ff fb08 	bl	8007b30 <_Bfree>
 8008520:	3e01      	subs	r6, #1
 8008522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008524:	2e04      	cmp	r6, #4
 8008526:	d806      	bhi.n	8008536 <_strtod_l+0xe6>
 8008528:	e8df f006 	tbb	[pc, r6]
 800852c:	201d0314 	.word	0x201d0314
 8008530:	14          	.byte	0x14
 8008531:	00          	.byte	0x00
 8008532:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008536:	05e1      	lsls	r1, r4, #23
 8008538:	bf48      	it	mi
 800853a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800853e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008542:	0d1b      	lsrs	r3, r3, #20
 8008544:	051b      	lsls	r3, r3, #20
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1bb      	bne.n	80084c2 <_strtod_l+0x72>
 800854a:	f7fe fb31 	bl	8006bb0 <__errno>
 800854e:	2322      	movs	r3, #34	@ 0x22
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	e7b6      	b.n	80084c2 <_strtod_l+0x72>
 8008554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008558:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800855c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008560:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008564:	e7e7      	b.n	8008536 <_strtod_l+0xe6>
 8008566:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80086e4 <_strtod_l+0x294>
 800856a:	e7e4      	b.n	8008536 <_strtod_l+0xe6>
 800856c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008570:	f04f 3aff 	mov.w	sl, #4294967295
 8008574:	e7df      	b.n	8008536 <_strtod_l+0xe6>
 8008576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	9219      	str	r2, [sp, #100]	@ 0x64
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b30      	cmp	r3, #48	@ 0x30
 8008580:	d0f9      	beq.n	8008576 <_strtod_l+0x126>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d09d      	beq.n	80084c2 <_strtod_l+0x72>
 8008586:	2301      	movs	r3, #1
 8008588:	9309      	str	r3, [sp, #36]	@ 0x24
 800858a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800858c:	930c      	str	r3, [sp, #48]	@ 0x30
 800858e:	2300      	movs	r3, #0
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	930a      	str	r3, [sp, #40]	@ 0x28
 8008594:	461f      	mov	r7, r3
 8008596:	220a      	movs	r2, #10
 8008598:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800859a:	7805      	ldrb	r5, [r0, #0]
 800859c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80085a0:	b2d9      	uxtb	r1, r3
 80085a2:	2909      	cmp	r1, #9
 80085a4:	d928      	bls.n	80085f8 <_strtod_l+0x1a8>
 80085a6:	494e      	ldr	r1, [pc, #312]	@ (80086e0 <_strtod_l+0x290>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	f000 ffd5 	bl	8009558 <strncmp>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d032      	beq.n	8008618 <_strtod_l+0x1c8>
 80085b2:	2000      	movs	r0, #0
 80085b4:	462a      	mov	r2, r5
 80085b6:	4681      	mov	r9, r0
 80085b8:	463d      	mov	r5, r7
 80085ba:	4603      	mov	r3, r0
 80085bc:	2a65      	cmp	r2, #101	@ 0x65
 80085be:	d001      	beq.n	80085c4 <_strtod_l+0x174>
 80085c0:	2a45      	cmp	r2, #69	@ 0x45
 80085c2:	d114      	bne.n	80085ee <_strtod_l+0x19e>
 80085c4:	b91d      	cbnz	r5, 80085ce <_strtod_l+0x17e>
 80085c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c8:	4302      	orrs	r2, r0
 80085ca:	d095      	beq.n	80084f8 <_strtod_l+0xa8>
 80085cc:	2500      	movs	r5, #0
 80085ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80085d0:	1c62      	adds	r2, r4, #1
 80085d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80085d4:	7862      	ldrb	r2, [r4, #1]
 80085d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80085d8:	d077      	beq.n	80086ca <_strtod_l+0x27a>
 80085da:	2a2d      	cmp	r2, #45	@ 0x2d
 80085dc:	d07b      	beq.n	80086d6 <_strtod_l+0x286>
 80085de:	f04f 0c00 	mov.w	ip, #0
 80085e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80085e6:	2909      	cmp	r1, #9
 80085e8:	f240 8082 	bls.w	80086f0 <_strtod_l+0x2a0>
 80085ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	e0a2      	b.n	800873a <_strtod_l+0x2ea>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7c7      	b.n	8008588 <_strtod_l+0x138>
 80085f8:	2f08      	cmp	r7, #8
 80085fa:	bfd5      	itete	le
 80085fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80085fe:	9908      	ldrgt	r1, [sp, #32]
 8008600:	fb02 3301 	mlale	r3, r2, r1, r3
 8008604:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008608:	f100 0001 	add.w	r0, r0, #1
 800860c:	bfd4      	ite	le
 800860e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008610:	9308      	strgt	r3, [sp, #32]
 8008612:	3701      	adds	r7, #1
 8008614:	9019      	str	r0, [sp, #100]	@ 0x64
 8008616:	e7bf      	b.n	8008598 <_strtod_l+0x148>
 8008618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	9219      	str	r2, [sp, #100]	@ 0x64
 800861e:	785a      	ldrb	r2, [r3, #1]
 8008620:	b37f      	cbz	r7, 8008682 <_strtod_l+0x232>
 8008622:	4681      	mov	r9, r0
 8008624:	463d      	mov	r5, r7
 8008626:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800862a:	2b09      	cmp	r3, #9
 800862c:	d912      	bls.n	8008654 <_strtod_l+0x204>
 800862e:	2301      	movs	r3, #1
 8008630:	e7c4      	b.n	80085bc <_strtod_l+0x16c>
 8008632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	9219      	str	r2, [sp, #100]	@ 0x64
 8008638:	785a      	ldrb	r2, [r3, #1]
 800863a:	3001      	adds	r0, #1
 800863c:	2a30      	cmp	r2, #48	@ 0x30
 800863e:	d0f8      	beq.n	8008632 <_strtod_l+0x1e2>
 8008640:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008644:	2b08      	cmp	r3, #8
 8008646:	f200 84d3 	bhi.w	8008ff0 <_strtod_l+0xba0>
 800864a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800864c:	930c      	str	r3, [sp, #48]	@ 0x30
 800864e:	4681      	mov	r9, r0
 8008650:	2000      	movs	r0, #0
 8008652:	4605      	mov	r5, r0
 8008654:	3a30      	subs	r2, #48	@ 0x30
 8008656:	f100 0301 	add.w	r3, r0, #1
 800865a:	d02a      	beq.n	80086b2 <_strtod_l+0x262>
 800865c:	4499      	add	r9, r3
 800865e:	eb00 0c05 	add.w	ip, r0, r5
 8008662:	462b      	mov	r3, r5
 8008664:	210a      	movs	r1, #10
 8008666:	4563      	cmp	r3, ip
 8008668:	d10d      	bne.n	8008686 <_strtod_l+0x236>
 800866a:	1c69      	adds	r1, r5, #1
 800866c:	4401      	add	r1, r0
 800866e:	4428      	add	r0, r5
 8008670:	2808      	cmp	r0, #8
 8008672:	dc16      	bgt.n	80086a2 <_strtod_l+0x252>
 8008674:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008676:	230a      	movs	r3, #10
 8008678:	fb03 2300 	mla	r3, r3, r0, r2
 800867c:	930a      	str	r3, [sp, #40]	@ 0x28
 800867e:	2300      	movs	r3, #0
 8008680:	e018      	b.n	80086b4 <_strtod_l+0x264>
 8008682:	4638      	mov	r0, r7
 8008684:	e7da      	b.n	800863c <_strtod_l+0x1ec>
 8008686:	2b08      	cmp	r3, #8
 8008688:	f103 0301 	add.w	r3, r3, #1
 800868c:	dc03      	bgt.n	8008696 <_strtod_l+0x246>
 800868e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008690:	434e      	muls	r6, r1
 8008692:	960a      	str	r6, [sp, #40]	@ 0x28
 8008694:	e7e7      	b.n	8008666 <_strtod_l+0x216>
 8008696:	2b10      	cmp	r3, #16
 8008698:	bfde      	ittt	le
 800869a:	9e08      	ldrle	r6, [sp, #32]
 800869c:	434e      	mulle	r6, r1
 800869e:	9608      	strle	r6, [sp, #32]
 80086a0:	e7e1      	b.n	8008666 <_strtod_l+0x216>
 80086a2:	280f      	cmp	r0, #15
 80086a4:	dceb      	bgt.n	800867e <_strtod_l+0x22e>
 80086a6:	9808      	ldr	r0, [sp, #32]
 80086a8:	230a      	movs	r3, #10
 80086aa:	fb03 2300 	mla	r3, r3, r0, r2
 80086ae:	9308      	str	r3, [sp, #32]
 80086b0:	e7e5      	b.n	800867e <_strtod_l+0x22e>
 80086b2:	4629      	mov	r1, r5
 80086b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086b6:	1c50      	adds	r0, r2, #1
 80086b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80086ba:	7852      	ldrb	r2, [r2, #1]
 80086bc:	4618      	mov	r0, r3
 80086be:	460d      	mov	r5, r1
 80086c0:	e7b1      	b.n	8008626 <_strtod_l+0x1d6>
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	2301      	movs	r3, #1
 80086c8:	e77d      	b.n	80085c6 <_strtod_l+0x176>
 80086ca:	f04f 0c00 	mov.w	ip, #0
 80086ce:	1ca2      	adds	r2, r4, #2
 80086d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80086d2:	78a2      	ldrb	r2, [r4, #2]
 80086d4:	e785      	b.n	80085e2 <_strtod_l+0x192>
 80086d6:	f04f 0c01 	mov.w	ip, #1
 80086da:	e7f8      	b.n	80086ce <_strtod_l+0x27e>
 80086dc:	0800a568 	.word	0x0800a568
 80086e0:	0800a550 	.word	0x0800a550
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086ea:	1c51      	adds	r1, r2, #1
 80086ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80086ee:	7852      	ldrb	r2, [r2, #1]
 80086f0:	2a30      	cmp	r2, #48	@ 0x30
 80086f2:	d0f9      	beq.n	80086e8 <_strtod_l+0x298>
 80086f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80086f8:	2908      	cmp	r1, #8
 80086fa:	f63f af78 	bhi.w	80085ee <_strtod_l+0x19e>
 80086fe:	3a30      	subs	r2, #48	@ 0x30
 8008700:	920e      	str	r2, [sp, #56]	@ 0x38
 8008702:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008704:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008706:	f04f 080a 	mov.w	r8, #10
 800870a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800870c:	1c56      	adds	r6, r2, #1
 800870e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008710:	7852      	ldrb	r2, [r2, #1]
 8008712:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008716:	f1be 0f09 	cmp.w	lr, #9
 800871a:	d939      	bls.n	8008790 <_strtod_l+0x340>
 800871c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800871e:	1a76      	subs	r6, r6, r1
 8008720:	2e08      	cmp	r6, #8
 8008722:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008726:	dc03      	bgt.n	8008730 <_strtod_l+0x2e0>
 8008728:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800872a:	4588      	cmp	r8, r1
 800872c:	bfa8      	it	ge
 800872e:	4688      	movge	r8, r1
 8008730:	f1bc 0f00 	cmp.w	ip, #0
 8008734:	d001      	beq.n	800873a <_strtod_l+0x2ea>
 8008736:	f1c8 0800 	rsb	r8, r8, #0
 800873a:	2d00      	cmp	r5, #0
 800873c:	d14e      	bne.n	80087dc <_strtod_l+0x38c>
 800873e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008740:	4308      	orrs	r0, r1
 8008742:	f47f aebe 	bne.w	80084c2 <_strtod_l+0x72>
 8008746:	2b00      	cmp	r3, #0
 8008748:	f47f aed6 	bne.w	80084f8 <_strtod_l+0xa8>
 800874c:	2a69      	cmp	r2, #105	@ 0x69
 800874e:	d028      	beq.n	80087a2 <_strtod_l+0x352>
 8008750:	dc25      	bgt.n	800879e <_strtod_l+0x34e>
 8008752:	2a49      	cmp	r2, #73	@ 0x49
 8008754:	d025      	beq.n	80087a2 <_strtod_l+0x352>
 8008756:	2a4e      	cmp	r2, #78	@ 0x4e
 8008758:	f47f aece 	bne.w	80084f8 <_strtod_l+0xa8>
 800875c:	499b      	ldr	r1, [pc, #620]	@ (80089cc <_strtod_l+0x57c>)
 800875e:	a819      	add	r0, sp, #100	@ 0x64
 8008760:	f001 f9ee 	bl	8009b40 <__match>
 8008764:	2800      	cmp	r0, #0
 8008766:	f43f aec7 	beq.w	80084f8 <_strtod_l+0xa8>
 800876a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b28      	cmp	r3, #40	@ 0x28
 8008770:	d12e      	bne.n	80087d0 <_strtod_l+0x380>
 8008772:	4997      	ldr	r1, [pc, #604]	@ (80089d0 <_strtod_l+0x580>)
 8008774:	aa1c      	add	r2, sp, #112	@ 0x70
 8008776:	a819      	add	r0, sp, #100	@ 0x64
 8008778:	f001 f9f6 	bl	8009b68 <__hexnan>
 800877c:	2805      	cmp	r0, #5
 800877e:	d127      	bne.n	80087d0 <_strtod_l+0x380>
 8008780:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008782:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008786:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800878a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800878e:	e698      	b.n	80084c2 <_strtod_l+0x72>
 8008790:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008792:	fb08 2101 	mla	r1, r8, r1, r2
 8008796:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800879a:	920e      	str	r2, [sp, #56]	@ 0x38
 800879c:	e7b5      	b.n	800870a <_strtod_l+0x2ba>
 800879e:	2a6e      	cmp	r2, #110	@ 0x6e
 80087a0:	e7da      	b.n	8008758 <_strtod_l+0x308>
 80087a2:	498c      	ldr	r1, [pc, #560]	@ (80089d4 <_strtod_l+0x584>)
 80087a4:	a819      	add	r0, sp, #100	@ 0x64
 80087a6:	f001 f9cb 	bl	8009b40 <__match>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f43f aea4 	beq.w	80084f8 <_strtod_l+0xa8>
 80087b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087b2:	4989      	ldr	r1, [pc, #548]	@ (80089d8 <_strtod_l+0x588>)
 80087b4:	3b01      	subs	r3, #1
 80087b6:	a819      	add	r0, sp, #100	@ 0x64
 80087b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80087ba:	f001 f9c1 	bl	8009b40 <__match>
 80087be:	b910      	cbnz	r0, 80087c6 <_strtod_l+0x376>
 80087c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087c2:	3301      	adds	r3, #1
 80087c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80087c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80089e8 <_strtod_l+0x598>
 80087ca:	f04f 0a00 	mov.w	sl, #0
 80087ce:	e678      	b.n	80084c2 <_strtod_l+0x72>
 80087d0:	4882      	ldr	r0, [pc, #520]	@ (80089dc <_strtod_l+0x58c>)
 80087d2:	f000 fef1 	bl	80095b8 <nan>
 80087d6:	ec5b ab10 	vmov	sl, fp, d0
 80087da:	e672      	b.n	80084c2 <_strtod_l+0x72>
 80087dc:	eba8 0309 	sub.w	r3, r8, r9
 80087e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e4:	2f00      	cmp	r7, #0
 80087e6:	bf08      	it	eq
 80087e8:	462f      	moveq	r7, r5
 80087ea:	2d10      	cmp	r5, #16
 80087ec:	462c      	mov	r4, r5
 80087ee:	bfa8      	it	ge
 80087f0:	2410      	movge	r4, #16
 80087f2:	f7f7 fe8f 	bl	8000514 <__aeabi_ui2d>
 80087f6:	2d09      	cmp	r5, #9
 80087f8:	4682      	mov	sl, r0
 80087fa:	468b      	mov	fp, r1
 80087fc:	dc13      	bgt.n	8008826 <_strtod_l+0x3d6>
 80087fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	f43f ae5e 	beq.w	80084c2 <_strtod_l+0x72>
 8008806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008808:	dd78      	ble.n	80088fc <_strtod_l+0x4ac>
 800880a:	2b16      	cmp	r3, #22
 800880c:	dc5f      	bgt.n	80088ce <_strtod_l+0x47e>
 800880e:	4974      	ldr	r1, [pc, #464]	@ (80089e0 <_strtod_l+0x590>)
 8008810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008818:	4652      	mov	r2, sl
 800881a:	465b      	mov	r3, fp
 800881c:	f7f7 fef4 	bl	8000608 <__aeabi_dmul>
 8008820:	4682      	mov	sl, r0
 8008822:	468b      	mov	fp, r1
 8008824:	e64d      	b.n	80084c2 <_strtod_l+0x72>
 8008826:	4b6e      	ldr	r3, [pc, #440]	@ (80089e0 <_strtod_l+0x590>)
 8008828:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800882c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008830:	f7f7 feea 	bl	8000608 <__aeabi_dmul>
 8008834:	4682      	mov	sl, r0
 8008836:	9808      	ldr	r0, [sp, #32]
 8008838:	468b      	mov	fp, r1
 800883a:	f7f7 fe6b 	bl	8000514 <__aeabi_ui2d>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4650      	mov	r0, sl
 8008844:	4659      	mov	r1, fp
 8008846:	f7f7 fd29 	bl	800029c <__adddf3>
 800884a:	2d0f      	cmp	r5, #15
 800884c:	4682      	mov	sl, r0
 800884e:	468b      	mov	fp, r1
 8008850:	ddd5      	ble.n	80087fe <_strtod_l+0x3ae>
 8008852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008854:	1b2c      	subs	r4, r5, r4
 8008856:	441c      	add	r4, r3
 8008858:	2c00      	cmp	r4, #0
 800885a:	f340 8096 	ble.w	800898a <_strtod_l+0x53a>
 800885e:	f014 030f 	ands.w	r3, r4, #15
 8008862:	d00a      	beq.n	800887a <_strtod_l+0x42a>
 8008864:	495e      	ldr	r1, [pc, #376]	@ (80089e0 <_strtod_l+0x590>)
 8008866:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800886a:	4652      	mov	r2, sl
 800886c:	465b      	mov	r3, fp
 800886e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008872:	f7f7 fec9 	bl	8000608 <__aeabi_dmul>
 8008876:	4682      	mov	sl, r0
 8008878:	468b      	mov	fp, r1
 800887a:	f034 040f 	bics.w	r4, r4, #15
 800887e:	d073      	beq.n	8008968 <_strtod_l+0x518>
 8008880:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008884:	dd48      	ble.n	8008918 <_strtod_l+0x4c8>
 8008886:	2400      	movs	r4, #0
 8008888:	46a0      	mov	r8, r4
 800888a:	940a      	str	r4, [sp, #40]	@ 0x28
 800888c:	46a1      	mov	r9, r4
 800888e:	9a05      	ldr	r2, [sp, #20]
 8008890:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80089e8 <_strtod_l+0x598>
 8008894:	2322      	movs	r3, #34	@ 0x22
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f04f 0a00 	mov.w	sl, #0
 800889c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f43f ae0f 	beq.w	80084c2 <_strtod_l+0x72>
 80088a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088a6:	9805      	ldr	r0, [sp, #20]
 80088a8:	f7ff f942 	bl	8007b30 <_Bfree>
 80088ac:	9805      	ldr	r0, [sp, #20]
 80088ae:	4649      	mov	r1, r9
 80088b0:	f7ff f93e 	bl	8007b30 <_Bfree>
 80088b4:	9805      	ldr	r0, [sp, #20]
 80088b6:	4641      	mov	r1, r8
 80088b8:	f7ff f93a 	bl	8007b30 <_Bfree>
 80088bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	f7ff f936 	bl	8007b30 <_Bfree>
 80088c4:	9805      	ldr	r0, [sp, #20]
 80088c6:	4621      	mov	r1, r4
 80088c8:	f7ff f932 	bl	8007b30 <_Bfree>
 80088cc:	e5f9      	b.n	80084c2 <_strtod_l+0x72>
 80088ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80088d4:	4293      	cmp	r3, r2
 80088d6:	dbbc      	blt.n	8008852 <_strtod_l+0x402>
 80088d8:	4c41      	ldr	r4, [pc, #260]	@ (80089e0 <_strtod_l+0x590>)
 80088da:	f1c5 050f 	rsb	r5, r5, #15
 80088de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80088e2:	4652      	mov	r2, sl
 80088e4:	465b      	mov	r3, fp
 80088e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ea:	f7f7 fe8d 	bl	8000608 <__aeabi_dmul>
 80088ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f0:	1b5d      	subs	r5, r3, r5
 80088f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088fa:	e78f      	b.n	800881c <_strtod_l+0x3cc>
 80088fc:	3316      	adds	r3, #22
 80088fe:	dba8      	blt.n	8008852 <_strtod_l+0x402>
 8008900:	4b37      	ldr	r3, [pc, #220]	@ (80089e0 <_strtod_l+0x590>)
 8008902:	eba9 0808 	sub.w	r8, r9, r8
 8008906:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800890a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800890e:	4650      	mov	r0, sl
 8008910:	4659      	mov	r1, fp
 8008912:	f7f7 ffa3 	bl	800085c <__aeabi_ddiv>
 8008916:	e783      	b.n	8008820 <_strtod_l+0x3d0>
 8008918:	4b32      	ldr	r3, [pc, #200]	@ (80089e4 <_strtod_l+0x594>)
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	2300      	movs	r3, #0
 800891e:	1124      	asrs	r4, r4, #4
 8008920:	4650      	mov	r0, sl
 8008922:	4659      	mov	r1, fp
 8008924:	461e      	mov	r6, r3
 8008926:	2c01      	cmp	r4, #1
 8008928:	dc21      	bgt.n	800896e <_strtod_l+0x51e>
 800892a:	b10b      	cbz	r3, 8008930 <_strtod_l+0x4e0>
 800892c:	4682      	mov	sl, r0
 800892e:	468b      	mov	fp, r1
 8008930:	492c      	ldr	r1, [pc, #176]	@ (80089e4 <_strtod_l+0x594>)
 8008932:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008936:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008942:	f7f7 fe61 	bl	8000608 <__aeabi_dmul>
 8008946:	4b28      	ldr	r3, [pc, #160]	@ (80089e8 <_strtod_l+0x598>)
 8008948:	460a      	mov	r2, r1
 800894a:	400b      	ands	r3, r1
 800894c:	4927      	ldr	r1, [pc, #156]	@ (80089ec <_strtod_l+0x59c>)
 800894e:	428b      	cmp	r3, r1
 8008950:	4682      	mov	sl, r0
 8008952:	d898      	bhi.n	8008886 <_strtod_l+0x436>
 8008954:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008958:	428b      	cmp	r3, r1
 800895a:	bf86      	itte	hi
 800895c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80089f0 <_strtod_l+0x5a0>
 8008960:	f04f 3aff 	movhi.w	sl, #4294967295
 8008964:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008968:	2300      	movs	r3, #0
 800896a:	9308      	str	r3, [sp, #32]
 800896c:	e07a      	b.n	8008a64 <_strtod_l+0x614>
 800896e:	07e2      	lsls	r2, r4, #31
 8008970:	d505      	bpl.n	800897e <_strtod_l+0x52e>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fe46 	bl	8000608 <__aeabi_dmul>
 800897c:	2301      	movs	r3, #1
 800897e:	9a08      	ldr	r2, [sp, #32]
 8008980:	3208      	adds	r2, #8
 8008982:	3601      	adds	r6, #1
 8008984:	1064      	asrs	r4, r4, #1
 8008986:	9208      	str	r2, [sp, #32]
 8008988:	e7cd      	b.n	8008926 <_strtod_l+0x4d6>
 800898a:	d0ed      	beq.n	8008968 <_strtod_l+0x518>
 800898c:	4264      	negs	r4, r4
 800898e:	f014 020f 	ands.w	r2, r4, #15
 8008992:	d00a      	beq.n	80089aa <_strtod_l+0x55a>
 8008994:	4b12      	ldr	r3, [pc, #72]	@ (80089e0 <_strtod_l+0x590>)
 8008996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800899a:	4650      	mov	r0, sl
 800899c:	4659      	mov	r1, fp
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f7f7 ff5b 	bl	800085c <__aeabi_ddiv>
 80089a6:	4682      	mov	sl, r0
 80089a8:	468b      	mov	fp, r1
 80089aa:	1124      	asrs	r4, r4, #4
 80089ac:	d0dc      	beq.n	8008968 <_strtod_l+0x518>
 80089ae:	2c1f      	cmp	r4, #31
 80089b0:	dd20      	ble.n	80089f4 <_strtod_l+0x5a4>
 80089b2:	2400      	movs	r4, #0
 80089b4:	46a0      	mov	r8, r4
 80089b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80089b8:	46a1      	mov	r9, r4
 80089ba:	9a05      	ldr	r2, [sp, #20]
 80089bc:	2322      	movs	r3, #34	@ 0x22
 80089be:	f04f 0a00 	mov.w	sl, #0
 80089c2:	f04f 0b00 	mov.w	fp, #0
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	e768      	b.n	800889c <_strtod_l+0x44c>
 80089ca:	bf00      	nop
 80089cc:	0800a341 	.word	0x0800a341
 80089d0:	0800a554 	.word	0x0800a554
 80089d4:	0800a339 	.word	0x0800a339
 80089d8:	0800a370 	.word	0x0800a370
 80089dc:	0800a6fd 	.word	0x0800a6fd
 80089e0:	0800a488 	.word	0x0800a488
 80089e4:	0800a460 	.word	0x0800a460
 80089e8:	7ff00000 	.word	0x7ff00000
 80089ec:	7ca00000 	.word	0x7ca00000
 80089f0:	7fefffff 	.word	0x7fefffff
 80089f4:	f014 0310 	ands.w	r3, r4, #16
 80089f8:	bf18      	it	ne
 80089fa:	236a      	movne	r3, #106	@ 0x6a
 80089fc:	4ea9      	ldr	r6, [pc, #676]	@ (8008ca4 <_strtod_l+0x854>)
 80089fe:	9308      	str	r3, [sp, #32]
 8008a00:	4650      	mov	r0, sl
 8008a02:	4659      	mov	r1, fp
 8008a04:	2300      	movs	r3, #0
 8008a06:	07e2      	lsls	r2, r4, #31
 8008a08:	d504      	bpl.n	8008a14 <_strtod_l+0x5c4>
 8008a0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a0e:	f7f7 fdfb 	bl	8000608 <__aeabi_dmul>
 8008a12:	2301      	movs	r3, #1
 8008a14:	1064      	asrs	r4, r4, #1
 8008a16:	f106 0608 	add.w	r6, r6, #8
 8008a1a:	d1f4      	bne.n	8008a06 <_strtod_l+0x5b6>
 8008a1c:	b10b      	cbz	r3, 8008a22 <_strtod_l+0x5d2>
 8008a1e:	4682      	mov	sl, r0
 8008a20:	468b      	mov	fp, r1
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	b1b3      	cbz	r3, 8008a54 <_strtod_l+0x604>
 8008a26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	4659      	mov	r1, fp
 8008a32:	dd0f      	ble.n	8008a54 <_strtod_l+0x604>
 8008a34:	2b1f      	cmp	r3, #31
 8008a36:	dd55      	ble.n	8008ae4 <_strtod_l+0x694>
 8008a38:	2b34      	cmp	r3, #52	@ 0x34
 8008a3a:	bfde      	ittt	le
 8008a3c:	f04f 33ff 	movle.w	r3, #4294967295
 8008a40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008a44:	4093      	lslle	r3, r2
 8008a46:	f04f 0a00 	mov.w	sl, #0
 8008a4a:	bfcc      	ite	gt
 8008a4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008a50:	ea03 0b01 	andle.w	fp, r3, r1
 8008a54:	2200      	movs	r2, #0
 8008a56:	2300      	movs	r3, #0
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	f7f8 f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d1a6      	bne.n	80089b2 <_strtod_l+0x562>
 8008a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a6a:	9805      	ldr	r0, [sp, #20]
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	463a      	mov	r2, r7
 8008a70:	f7ff f8c6 	bl	8007c00 <__s2b>
 8008a74:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f af05 	beq.w	8008886 <_strtod_l+0x436>
 8008a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	eba9 0308 	sub.w	r3, r9, r8
 8008a84:	bfa8      	it	ge
 8008a86:	2300      	movge	r3, #0
 8008a88:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a8a:	2400      	movs	r4, #0
 8008a8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a90:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a92:	46a0      	mov	r8, r4
 8008a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a96:	9805      	ldr	r0, [sp, #20]
 8008a98:	6859      	ldr	r1, [r3, #4]
 8008a9a:	f7ff f809 	bl	8007ab0 <_Balloc>
 8008a9e:	4681      	mov	r9, r0
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	f43f aef4 	beq.w	800888e <_strtod_l+0x43e>
 8008aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	3202      	adds	r2, #2
 8008aac:	f103 010c 	add.w	r1, r3, #12
 8008ab0:	0092      	lsls	r2, r2, #2
 8008ab2:	300c      	adds	r0, #12
 8008ab4:	f000 fd72 	bl	800959c <memcpy>
 8008ab8:	ec4b ab10 	vmov	d0, sl, fp
 8008abc:	9805      	ldr	r0, [sp, #20]
 8008abe:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ac0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008ac2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008ac6:	f7ff fbd7 	bl	8008278 <__d2b>
 8008aca:	901a      	str	r0, [sp, #104]	@ 0x68
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f43f aede 	beq.w	800888e <_strtod_l+0x43e>
 8008ad2:	9805      	ldr	r0, [sp, #20]
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	f7ff f929 	bl	8007d2c <__i2b>
 8008ada:	4680      	mov	r8, r0
 8008adc:	b948      	cbnz	r0, 8008af2 <_strtod_l+0x6a2>
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	e6d4      	b.n	800888e <_strtod_l+0x43e>
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	ea03 0a0a 	and.w	sl, r3, sl
 8008af0:	e7b0      	b.n	8008a54 <_strtod_l+0x604>
 8008af2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008af4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	bfab      	itete	ge
 8008afa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008afc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008afe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008b00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008b02:	bfac      	ite	ge
 8008b04:	18ef      	addge	r7, r5, r3
 8008b06:	1b5e      	sublt	r6, r3, r5
 8008b08:	9b08      	ldr	r3, [sp, #32]
 8008b0a:	1aed      	subs	r5, r5, r3
 8008b0c:	4415      	add	r5, r2
 8008b0e:	4b66      	ldr	r3, [pc, #408]	@ (8008ca8 <_strtod_l+0x858>)
 8008b10:	3d01      	subs	r5, #1
 8008b12:	429d      	cmp	r5, r3
 8008b14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008b18:	da50      	bge.n	8008bbc <_strtod_l+0x76c>
 8008b1a:	1b5b      	subs	r3, r3, r5
 8008b1c:	2b1f      	cmp	r3, #31
 8008b1e:	eba2 0203 	sub.w	r2, r2, r3
 8008b22:	f04f 0101 	mov.w	r1, #1
 8008b26:	dc3d      	bgt.n	8008ba4 <_strtod_l+0x754>
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b2e:	2300      	movs	r3, #0
 8008b30:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b32:	18bd      	adds	r5, r7, r2
 8008b34:	9b08      	ldr	r3, [sp, #32]
 8008b36:	42af      	cmp	r7, r5
 8008b38:	4416      	add	r6, r2
 8008b3a:	441e      	add	r6, r3
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	bfa8      	it	ge
 8008b40:	462b      	movge	r3, r5
 8008b42:	42b3      	cmp	r3, r6
 8008b44:	bfa8      	it	ge
 8008b46:	4633      	movge	r3, r6
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	bfc2      	ittt	gt
 8008b4c:	1aed      	subgt	r5, r5, r3
 8008b4e:	1af6      	subgt	r6, r6, r3
 8008b50:	1aff      	subgt	r7, r7, r3
 8008b52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd16      	ble.n	8008b86 <_strtod_l+0x736>
 8008b58:	4641      	mov	r1, r8
 8008b5a:	9805      	ldr	r0, [sp, #20]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f7ff f9a5 	bl	8007eac <__pow5mult>
 8008b62:	4680      	mov	r8, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d0ba      	beq.n	8008ade <_strtod_l+0x68e>
 8008b68:	4601      	mov	r1, r0
 8008b6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	f7ff f8f3 	bl	8007d58 <__multiply>
 8008b72:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f43f ae8a 	beq.w	800888e <_strtod_l+0x43e>
 8008b7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	f7fe ffd7 	bl	8007b30 <_Bfree>
 8008b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b84:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	dc1d      	bgt.n	8008bc6 <_strtod_l+0x776>
 8008b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dd23      	ble.n	8008bd8 <_strtod_l+0x788>
 8008b90:	4649      	mov	r1, r9
 8008b92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b94:	9805      	ldr	r0, [sp, #20]
 8008b96:	f7ff f989 	bl	8007eac <__pow5mult>
 8008b9a:	4681      	mov	r9, r0
 8008b9c:	b9e0      	cbnz	r0, 8008bd8 <_strtod_l+0x788>
 8008b9e:	f04f 0900 	mov.w	r9, #0
 8008ba2:	e674      	b.n	800888e <_strtod_l+0x43e>
 8008ba4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008ba8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008bac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008bb0:	35e2      	adds	r5, #226	@ 0xe2
 8008bb2:	fa01 f305 	lsl.w	r3, r1, r5
 8008bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008bba:	e7ba      	b.n	8008b32 <_strtod_l+0x6e2>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bc4:	e7b5      	b.n	8008b32 <_strtod_l+0x6e2>
 8008bc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bc8:	9805      	ldr	r0, [sp, #20]
 8008bca:	462a      	mov	r2, r5
 8008bcc:	f7ff f9c8 	bl	8007f60 <__lshift>
 8008bd0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d1d9      	bne.n	8008b8a <_strtod_l+0x73a>
 8008bd6:	e65a      	b.n	800888e <_strtod_l+0x43e>
 8008bd8:	2e00      	cmp	r6, #0
 8008bda:	dd07      	ble.n	8008bec <_strtod_l+0x79c>
 8008bdc:	4649      	mov	r1, r9
 8008bde:	9805      	ldr	r0, [sp, #20]
 8008be0:	4632      	mov	r2, r6
 8008be2:	f7ff f9bd 	bl	8007f60 <__lshift>
 8008be6:	4681      	mov	r9, r0
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d0d8      	beq.n	8008b9e <_strtod_l+0x74e>
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	dd08      	ble.n	8008c02 <_strtod_l+0x7b2>
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	9805      	ldr	r0, [sp, #20]
 8008bf4:	463a      	mov	r2, r7
 8008bf6:	f7ff f9b3 	bl	8007f60 <__lshift>
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f43f ae46 	beq.w	800888e <_strtod_l+0x43e>
 8008c02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c04:	9805      	ldr	r0, [sp, #20]
 8008c06:	464a      	mov	r2, r9
 8008c08:	f7ff fa32 	bl	8008070 <__mdiff>
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f43f ae3d 	beq.w	800888e <_strtod_l+0x43e>
 8008c14:	68c3      	ldr	r3, [r0, #12]
 8008c16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60c3      	str	r3, [r0, #12]
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	f7ff fa0b 	bl	8008038 <__mcmp>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	da46      	bge.n	8008cb4 <_strtod_l+0x864>
 8008c26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c28:	ea53 030a 	orrs.w	r3, r3, sl
 8008c2c:	d16c      	bne.n	8008d08 <_strtod_l+0x8b8>
 8008c2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d168      	bne.n	8008d08 <_strtod_l+0x8b8>
 8008c36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c3a:	0d1b      	lsrs	r3, r3, #20
 8008c3c:	051b      	lsls	r3, r3, #20
 8008c3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c42:	d961      	bls.n	8008d08 <_strtod_l+0x8b8>
 8008c44:	6963      	ldr	r3, [r4, #20]
 8008c46:	b913      	cbnz	r3, 8008c4e <_strtod_l+0x7fe>
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	dd5c      	ble.n	8008d08 <_strtod_l+0x8b8>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	2201      	movs	r2, #1
 8008c52:	9805      	ldr	r0, [sp, #20]
 8008c54:	f7ff f984 	bl	8007f60 <__lshift>
 8008c58:	4641      	mov	r1, r8
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	f7ff f9ec 	bl	8008038 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dd51      	ble.n	8008d08 <_strtod_l+0x8b8>
 8008c64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c68:	9a08      	ldr	r2, [sp, #32]
 8008c6a:	0d1b      	lsrs	r3, r3, #20
 8008c6c:	051b      	lsls	r3, r3, #20
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	d06b      	beq.n	8008d4a <_strtod_l+0x8fa>
 8008c72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c76:	d868      	bhi.n	8008d4a <_strtod_l+0x8fa>
 8008c78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c7c:	f67f ae9d 	bls.w	80089ba <_strtod_l+0x56a>
 8008c80:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <_strtod_l+0x85c>)
 8008c82:	4650      	mov	r0, sl
 8008c84:	4659      	mov	r1, fp
 8008c86:	2200      	movs	r2, #0
 8008c88:	f7f7 fcbe 	bl	8000608 <__aeabi_dmul>
 8008c8c:	4b08      	ldr	r3, [pc, #32]	@ (8008cb0 <_strtod_l+0x860>)
 8008c8e:	400b      	ands	r3, r1
 8008c90:	4682      	mov	sl, r0
 8008c92:	468b      	mov	fp, r1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f47f ae05 	bne.w	80088a4 <_strtod_l+0x454>
 8008c9a:	9a05      	ldr	r2, [sp, #20]
 8008c9c:	2322      	movs	r3, #34	@ 0x22
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e600      	b.n	80088a4 <_strtod_l+0x454>
 8008ca2:	bf00      	nop
 8008ca4:	0800a580 	.word	0x0800a580
 8008ca8:	fffffc02 	.word	0xfffffc02
 8008cac:	39500000 	.word	0x39500000
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008cb8:	d165      	bne.n	8008d86 <_strtod_l+0x936>
 8008cba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008cbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cc0:	b35a      	cbz	r2, 8008d1a <_strtod_l+0x8ca>
 8008cc2:	4a9f      	ldr	r2, [pc, #636]	@ (8008f40 <_strtod_l+0xaf0>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d12b      	bne.n	8008d20 <_strtod_l+0x8d0>
 8008cc8:	9b08      	ldr	r3, [sp, #32]
 8008cca:	4651      	mov	r1, sl
 8008ccc:	b303      	cbz	r3, 8008d10 <_strtod_l+0x8c0>
 8008cce:	4b9d      	ldr	r3, [pc, #628]	@ (8008f44 <_strtod_l+0xaf4>)
 8008cd0:	465a      	mov	r2, fp
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cdc:	d81b      	bhi.n	8008d16 <_strtod_l+0x8c6>
 8008cde:	0d1b      	lsrs	r3, r3, #20
 8008ce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	4299      	cmp	r1, r3
 8008cea:	d119      	bne.n	8008d20 <_strtod_l+0x8d0>
 8008cec:	4b96      	ldr	r3, [pc, #600]	@ (8008f48 <_strtod_l+0xaf8>)
 8008cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d102      	bne.n	8008cfa <_strtod_l+0x8aa>
 8008cf4:	3101      	adds	r1, #1
 8008cf6:	f43f adca 	beq.w	800888e <_strtod_l+0x43e>
 8008cfa:	4b92      	ldr	r3, [pc, #584]	@ (8008f44 <_strtod_l+0xaf4>)
 8008cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cfe:	401a      	ands	r2, r3
 8008d00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008d04:	f04f 0a00 	mov.w	sl, #0
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1b8      	bne.n	8008c80 <_strtod_l+0x830>
 8008d0e:	e5c9      	b.n	80088a4 <_strtod_l+0x454>
 8008d10:	f04f 33ff 	mov.w	r3, #4294967295
 8008d14:	e7e8      	b.n	8008ce8 <_strtod_l+0x898>
 8008d16:	4613      	mov	r3, r2
 8008d18:	e7e6      	b.n	8008ce8 <_strtod_l+0x898>
 8008d1a:	ea53 030a 	orrs.w	r3, r3, sl
 8008d1e:	d0a1      	beq.n	8008c64 <_strtod_l+0x814>
 8008d20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d22:	b1db      	cbz	r3, 8008d5c <_strtod_l+0x90c>
 8008d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d26:	4213      	tst	r3, r2
 8008d28:	d0ee      	beq.n	8008d08 <_strtod_l+0x8b8>
 8008d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2c:	9a08      	ldr	r2, [sp, #32]
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4659      	mov	r1, fp
 8008d32:	b1bb      	cbz	r3, 8008d64 <_strtod_l+0x914>
 8008d34:	f7ff fb6e 	bl	8008414 <sulp>
 8008d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d3c:	ec53 2b10 	vmov	r2, r3, d0
 8008d40:	f7f7 faac 	bl	800029c <__adddf3>
 8008d44:	4682      	mov	sl, r0
 8008d46:	468b      	mov	fp, r1
 8008d48:	e7de      	b.n	8008d08 <_strtod_l+0x8b8>
 8008d4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008d4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d56:	f04f 3aff 	mov.w	sl, #4294967295
 8008d5a:	e7d5      	b.n	8008d08 <_strtod_l+0x8b8>
 8008d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d5e:	ea13 0f0a 	tst.w	r3, sl
 8008d62:	e7e1      	b.n	8008d28 <_strtod_l+0x8d8>
 8008d64:	f7ff fb56 	bl	8008414 <sulp>
 8008d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d6c:	ec53 2b10 	vmov	r2, r3, d0
 8008d70:	f7f7 fa92 	bl	8000298 <__aeabi_dsub>
 8008d74:	2200      	movs	r2, #0
 8008d76:	2300      	movs	r3, #0
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	f7f7 feac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d0c1      	beq.n	8008d08 <_strtod_l+0x8b8>
 8008d84:	e619      	b.n	80089ba <_strtod_l+0x56a>
 8008d86:	4641      	mov	r1, r8
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff facd 	bl	8008328 <__ratio>
 8008d8e:	ec57 6b10 	vmov	r6, r7, d0
 8008d92:	2200      	movs	r2, #0
 8008d94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 feb0 	bl	8000b00 <__aeabi_dcmple>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d06f      	beq.n	8008e84 <_strtod_l+0xa34>
 8008da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d17a      	bne.n	8008ea0 <_strtod_l+0xa50>
 8008daa:	f1ba 0f00 	cmp.w	sl, #0
 8008dae:	d158      	bne.n	8008e62 <_strtod_l+0xa12>
 8008db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d15a      	bne.n	8008e70 <_strtod_l+0xa20>
 8008dba:	4b64      	ldr	r3, [pc, #400]	@ (8008f4c <_strtod_l+0xafc>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	f7f7 fe93 	bl	8000aec <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d159      	bne.n	8008e7e <_strtod_l+0xa2e>
 8008dca:	4630      	mov	r0, r6
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4b60      	ldr	r3, [pc, #384]	@ (8008f50 <_strtod_l+0xb00>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7f7 fc19 	bl	8000608 <__aeabi_dmul>
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	460f      	mov	r7, r1
 8008dda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008dde:	9606      	str	r6, [sp, #24]
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008de6:	4d57      	ldr	r5, [pc, #348]	@ (8008f44 <_strtod_l+0xaf4>)
 8008de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dee:	401d      	ands	r5, r3
 8008df0:	4b58      	ldr	r3, [pc, #352]	@ (8008f54 <_strtod_l+0xb04>)
 8008df2:	429d      	cmp	r5, r3
 8008df4:	f040 80b2 	bne.w	8008f5c <_strtod_l+0xb0c>
 8008df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008dfe:	ec4b ab10 	vmov	d0, sl, fp
 8008e02:	f7ff f9c9 	bl	8008198 <__ulp>
 8008e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e0a:	ec51 0b10 	vmov	r0, r1, d0
 8008e0e:	f7f7 fbfb 	bl	8000608 <__aeabi_dmul>
 8008e12:	4652      	mov	r2, sl
 8008e14:	465b      	mov	r3, fp
 8008e16:	f7f7 fa41 	bl	800029c <__adddf3>
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4949      	ldr	r1, [pc, #292]	@ (8008f44 <_strtod_l+0xaf4>)
 8008e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8008f58 <_strtod_l+0xb08>)
 8008e20:	4019      	ands	r1, r3
 8008e22:	4291      	cmp	r1, r2
 8008e24:	4682      	mov	sl, r0
 8008e26:	d942      	bls.n	8008eae <_strtod_l+0xa5e>
 8008e28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e2a:	4b47      	ldr	r3, [pc, #284]	@ (8008f48 <_strtod_l+0xaf8>)
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d103      	bne.n	8008e38 <_strtod_l+0x9e8>
 8008e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e32:	3301      	adds	r3, #1
 8008e34:	f43f ad2b 	beq.w	800888e <_strtod_l+0x43e>
 8008e38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008f48 <_strtod_l+0xaf8>
 8008e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8008e40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e42:	9805      	ldr	r0, [sp, #20]
 8008e44:	f7fe fe74 	bl	8007b30 <_Bfree>
 8008e48:	9805      	ldr	r0, [sp, #20]
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7fe fe70 	bl	8007b30 <_Bfree>
 8008e50:	9805      	ldr	r0, [sp, #20]
 8008e52:	4641      	mov	r1, r8
 8008e54:	f7fe fe6c 	bl	8007b30 <_Bfree>
 8008e58:	9805      	ldr	r0, [sp, #20]
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	f7fe fe68 	bl	8007b30 <_Bfree>
 8008e60:	e618      	b.n	8008a94 <_strtod_l+0x644>
 8008e62:	f1ba 0f01 	cmp.w	sl, #1
 8008e66:	d103      	bne.n	8008e70 <_strtod_l+0xa20>
 8008e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f43f ada5 	beq.w	80089ba <_strtod_l+0x56a>
 8008e70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008f20 <_strtod_l+0xad0>
 8008e74:	4f35      	ldr	r7, [pc, #212]	@ (8008f4c <_strtod_l+0xafc>)
 8008e76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	e7b1      	b.n	8008de2 <_strtod_l+0x992>
 8008e7e:	4f34      	ldr	r7, [pc, #208]	@ (8008f50 <_strtod_l+0xb00>)
 8008e80:	2600      	movs	r6, #0
 8008e82:	e7aa      	b.n	8008dda <_strtod_l+0x98a>
 8008e84:	4b32      	ldr	r3, [pc, #200]	@ (8008f50 <_strtod_l+0xb00>)
 8008e86:	4630      	mov	r0, r6
 8008e88:	4639      	mov	r1, r7
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f7f7 fbbc 	bl	8000608 <__aeabi_dmul>
 8008e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e92:	4606      	mov	r6, r0
 8008e94:	460f      	mov	r7, r1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d09f      	beq.n	8008dda <_strtod_l+0x98a>
 8008e9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e9e:	e7a0      	b.n	8008de2 <_strtod_l+0x992>
 8008ea0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008f28 <_strtod_l+0xad8>
 8008ea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ea8:	ec57 6b17 	vmov	r6, r7, d7
 8008eac:	e799      	b.n	8008de2 <_strtod_l+0x992>
 8008eae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1c1      	bne.n	8008e40 <_strtod_l+0x9f0>
 8008ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ec0:	0d1b      	lsrs	r3, r3, #20
 8008ec2:	051b      	lsls	r3, r3, #20
 8008ec4:	429d      	cmp	r5, r3
 8008ec6:	d1bb      	bne.n	8008e40 <_strtod_l+0x9f0>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 fefc 	bl	8000cc8 <__aeabi_d2lz>
 8008ed0:	f7f7 fb6c 	bl	80005ac <__aeabi_l2d>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 f9dc 	bl	8000298 <__aeabi_dsub>
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ee8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eee:	ea46 060a 	orr.w	r6, r6, sl
 8008ef2:	431e      	orrs	r6, r3
 8008ef4:	d06f      	beq.n	8008fd6 <_strtod_l+0xb86>
 8008ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f30 <_strtod_l+0xae0>)
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f7f7 fdf6 	bl	8000aec <__aeabi_dcmplt>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	f47f accf 	bne.w	80088a4 <_strtod_l+0x454>
 8008f06:	a30c      	add	r3, pc, #48	@ (adr r3, 8008f38 <_strtod_l+0xae8>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f10:	f7f7 fe0a 	bl	8000b28 <__aeabi_dcmpgt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d093      	beq.n	8008e40 <_strtod_l+0x9f0>
 8008f18:	e4c4      	b.n	80088a4 <_strtod_l+0x454>
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w
 8008f20:	00000000 	.word	0x00000000
 8008f24:	bff00000 	.word	0xbff00000
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	3ff00000 	.word	0x3ff00000
 8008f30:	94a03595 	.word	0x94a03595
 8008f34:	3fdfffff 	.word	0x3fdfffff
 8008f38:	35afe535 	.word	0x35afe535
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	000fffff 	.word	0x000fffff
 8008f44:	7ff00000 	.word	0x7ff00000
 8008f48:	7fefffff 	.word	0x7fefffff
 8008f4c:	3ff00000 	.word	0x3ff00000
 8008f50:	3fe00000 	.word	0x3fe00000
 8008f54:	7fe00000 	.word	0x7fe00000
 8008f58:	7c9fffff 	.word	0x7c9fffff
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	b323      	cbz	r3, 8008faa <_strtod_l+0xb5a>
 8008f60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f64:	d821      	bhi.n	8008faa <_strtod_l+0xb5a>
 8008f66:	a328      	add	r3, pc, #160	@ (adr r3, 8009008 <_strtod_l+0xbb8>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	4639      	mov	r1, r7
 8008f70:	f7f7 fdc6 	bl	8000b00 <__aeabi_dcmple>
 8008f74:	b1a0      	cbz	r0, 8008fa0 <_strtod_l+0xb50>
 8008f76:	4639      	mov	r1, r7
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7f7 fe1d 	bl	8000bb8 <__aeabi_d2uiz>
 8008f7e:	2801      	cmp	r0, #1
 8008f80:	bf38      	it	cc
 8008f82:	2001      	movcc	r0, #1
 8008f84:	f7f7 fac6 	bl	8000514 <__aeabi_ui2d>
 8008f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	b9fb      	cbnz	r3, 8008fd0 <_strtod_l+0xb80>
 8008f90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f94:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f96:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008fa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008fa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008fa6:	1b5b      	subs	r3, r3, r5
 8008fa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008faa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008fae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008fb2:	f7ff f8f1 	bl	8008198 <__ulp>
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	ec53 2b10 	vmov	r2, r3, d0
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	f7f7 fb23 	bl	8000608 <__aeabi_dmul>
 8008fc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008fc6:	f7f7 f969 	bl	800029c <__adddf3>
 8008fca:	4682      	mov	sl, r0
 8008fcc:	468b      	mov	fp, r1
 8008fce:	e770      	b.n	8008eb2 <_strtod_l+0xa62>
 8008fd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008fd4:	e7e0      	b.n	8008f98 <_strtod_l+0xb48>
 8008fd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009010 <_strtod_l+0xbc0>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fd86 	bl	8000aec <__aeabi_dcmplt>
 8008fe0:	e798      	b.n	8008f14 <_strtod_l+0xac4>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fe6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008fe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	f7ff ba6d 	b.w	80084ca <_strtod_l+0x7a>
 8008ff0:	2a65      	cmp	r2, #101	@ 0x65
 8008ff2:	f43f ab66 	beq.w	80086c2 <_strtod_l+0x272>
 8008ff6:	2a45      	cmp	r2, #69	@ 0x45
 8008ff8:	f43f ab63 	beq.w	80086c2 <_strtod_l+0x272>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f7ff bb9e 	b.w	800873e <_strtod_l+0x2ee>
 8009002:	bf00      	nop
 8009004:	f3af 8000 	nop.w
 8009008:	ffc00000 	.word	0xffc00000
 800900c:	41dfffff 	.word	0x41dfffff
 8009010:	94a03595 	.word	0x94a03595
 8009014:	3fcfffff 	.word	0x3fcfffff

08009018 <_strtod_r>:
 8009018:	4b01      	ldr	r3, [pc, #4]	@ (8009020 <_strtod_r+0x8>)
 800901a:	f7ff ba19 	b.w	8008450 <_strtod_l>
 800901e:	bf00      	nop
 8009020:	20000084 	.word	0x20000084

08009024 <_strtol_l.constprop.0>:
 8009024:	2b24      	cmp	r3, #36	@ 0x24
 8009026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902a:	4686      	mov	lr, r0
 800902c:	4690      	mov	r8, r2
 800902e:	d801      	bhi.n	8009034 <_strtol_l.constprop.0+0x10>
 8009030:	2b01      	cmp	r3, #1
 8009032:	d106      	bne.n	8009042 <_strtol_l.constprop.0+0x1e>
 8009034:	f7fd fdbc 	bl	8006bb0 <__errno>
 8009038:	2316      	movs	r3, #22
 800903a:	6003      	str	r3, [r0, #0]
 800903c:	2000      	movs	r0, #0
 800903e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009042:	4834      	ldr	r0, [pc, #208]	@ (8009114 <_strtol_l.constprop.0+0xf0>)
 8009044:	460d      	mov	r5, r1
 8009046:	462a      	mov	r2, r5
 8009048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800904c:	5d06      	ldrb	r6, [r0, r4]
 800904e:	f016 0608 	ands.w	r6, r6, #8
 8009052:	d1f8      	bne.n	8009046 <_strtol_l.constprop.0+0x22>
 8009054:	2c2d      	cmp	r4, #45	@ 0x2d
 8009056:	d12d      	bne.n	80090b4 <_strtol_l.constprop.0+0x90>
 8009058:	782c      	ldrb	r4, [r5, #0]
 800905a:	2601      	movs	r6, #1
 800905c:	1c95      	adds	r5, r2, #2
 800905e:	f033 0210 	bics.w	r2, r3, #16
 8009062:	d109      	bne.n	8009078 <_strtol_l.constprop.0+0x54>
 8009064:	2c30      	cmp	r4, #48	@ 0x30
 8009066:	d12a      	bne.n	80090be <_strtol_l.constprop.0+0x9a>
 8009068:	782a      	ldrb	r2, [r5, #0]
 800906a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800906e:	2a58      	cmp	r2, #88	@ 0x58
 8009070:	d125      	bne.n	80090be <_strtol_l.constprop.0+0x9a>
 8009072:	786c      	ldrb	r4, [r5, #1]
 8009074:	2310      	movs	r3, #16
 8009076:	3502      	adds	r5, #2
 8009078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800907c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009080:	2200      	movs	r2, #0
 8009082:	fbbc f9f3 	udiv	r9, ip, r3
 8009086:	4610      	mov	r0, r2
 8009088:	fb03 ca19 	mls	sl, r3, r9, ip
 800908c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009090:	2f09      	cmp	r7, #9
 8009092:	d81b      	bhi.n	80090cc <_strtol_l.constprop.0+0xa8>
 8009094:	463c      	mov	r4, r7
 8009096:	42a3      	cmp	r3, r4
 8009098:	dd27      	ble.n	80090ea <_strtol_l.constprop.0+0xc6>
 800909a:	1c57      	adds	r7, r2, #1
 800909c:	d007      	beq.n	80090ae <_strtol_l.constprop.0+0x8a>
 800909e:	4581      	cmp	r9, r0
 80090a0:	d320      	bcc.n	80090e4 <_strtol_l.constprop.0+0xc0>
 80090a2:	d101      	bne.n	80090a8 <_strtol_l.constprop.0+0x84>
 80090a4:	45a2      	cmp	sl, r4
 80090a6:	db1d      	blt.n	80090e4 <_strtol_l.constprop.0+0xc0>
 80090a8:	fb00 4003 	mla	r0, r0, r3, r4
 80090ac:	2201      	movs	r2, #1
 80090ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090b2:	e7eb      	b.n	800908c <_strtol_l.constprop.0+0x68>
 80090b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80090b6:	bf04      	itt	eq
 80090b8:	782c      	ldrbeq	r4, [r5, #0]
 80090ba:	1c95      	addeq	r5, r2, #2
 80090bc:	e7cf      	b.n	800905e <_strtol_l.constprop.0+0x3a>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1da      	bne.n	8009078 <_strtol_l.constprop.0+0x54>
 80090c2:	2c30      	cmp	r4, #48	@ 0x30
 80090c4:	bf0c      	ite	eq
 80090c6:	2308      	moveq	r3, #8
 80090c8:	230a      	movne	r3, #10
 80090ca:	e7d5      	b.n	8009078 <_strtol_l.constprop.0+0x54>
 80090cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80090d0:	2f19      	cmp	r7, #25
 80090d2:	d801      	bhi.n	80090d8 <_strtol_l.constprop.0+0xb4>
 80090d4:	3c37      	subs	r4, #55	@ 0x37
 80090d6:	e7de      	b.n	8009096 <_strtol_l.constprop.0+0x72>
 80090d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80090dc:	2f19      	cmp	r7, #25
 80090de:	d804      	bhi.n	80090ea <_strtol_l.constprop.0+0xc6>
 80090e0:	3c57      	subs	r4, #87	@ 0x57
 80090e2:	e7d8      	b.n	8009096 <_strtol_l.constprop.0+0x72>
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	e7e1      	b.n	80090ae <_strtol_l.constprop.0+0x8a>
 80090ea:	1c53      	adds	r3, r2, #1
 80090ec:	d108      	bne.n	8009100 <_strtol_l.constprop.0+0xdc>
 80090ee:	2322      	movs	r3, #34	@ 0x22
 80090f0:	f8ce 3000 	str.w	r3, [lr]
 80090f4:	4660      	mov	r0, ip
 80090f6:	f1b8 0f00 	cmp.w	r8, #0
 80090fa:	d0a0      	beq.n	800903e <_strtol_l.constprop.0+0x1a>
 80090fc:	1e69      	subs	r1, r5, #1
 80090fe:	e006      	b.n	800910e <_strtol_l.constprop.0+0xea>
 8009100:	b106      	cbz	r6, 8009104 <_strtol_l.constprop.0+0xe0>
 8009102:	4240      	negs	r0, r0
 8009104:	f1b8 0f00 	cmp.w	r8, #0
 8009108:	d099      	beq.n	800903e <_strtol_l.constprop.0+0x1a>
 800910a:	2a00      	cmp	r2, #0
 800910c:	d1f6      	bne.n	80090fc <_strtol_l.constprop.0+0xd8>
 800910e:	f8c8 1000 	str.w	r1, [r8]
 8009112:	e794      	b.n	800903e <_strtol_l.constprop.0+0x1a>
 8009114:	0800a5a9 	.word	0x0800a5a9

08009118 <_strtol_r>:
 8009118:	f7ff bf84 	b.w	8009024 <_strtol_l.constprop.0>

0800911c <__ssputs_r>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	688e      	ldr	r6, [r1, #8]
 8009122:	461f      	mov	r7, r3
 8009124:	42be      	cmp	r6, r7
 8009126:	680b      	ldr	r3, [r1, #0]
 8009128:	4682      	mov	sl, r0
 800912a:	460c      	mov	r4, r1
 800912c:	4690      	mov	r8, r2
 800912e:	d82d      	bhi.n	800918c <__ssputs_r+0x70>
 8009130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009138:	d026      	beq.n	8009188 <__ssputs_r+0x6c>
 800913a:	6965      	ldr	r5, [r4, #20]
 800913c:	6909      	ldr	r1, [r1, #16]
 800913e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009142:	eba3 0901 	sub.w	r9, r3, r1
 8009146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800914a:	1c7b      	adds	r3, r7, #1
 800914c:	444b      	add	r3, r9
 800914e:	106d      	asrs	r5, r5, #1
 8009150:	429d      	cmp	r5, r3
 8009152:	bf38      	it	cc
 8009154:	461d      	movcc	r5, r3
 8009156:	0553      	lsls	r3, r2, #21
 8009158:	d527      	bpl.n	80091aa <__ssputs_r+0x8e>
 800915a:	4629      	mov	r1, r5
 800915c:	f7fe fc1c 	bl	8007998 <_malloc_r>
 8009160:	4606      	mov	r6, r0
 8009162:	b360      	cbz	r0, 80091be <__ssputs_r+0xa2>
 8009164:	6921      	ldr	r1, [r4, #16]
 8009166:	464a      	mov	r2, r9
 8009168:	f000 fa18 	bl	800959c <memcpy>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	6126      	str	r6, [r4, #16]
 800917a:	6165      	str	r5, [r4, #20]
 800917c:	444e      	add	r6, r9
 800917e:	eba5 0509 	sub.w	r5, r5, r9
 8009182:	6026      	str	r6, [r4, #0]
 8009184:	60a5      	str	r5, [r4, #8]
 8009186:	463e      	mov	r6, r7
 8009188:	42be      	cmp	r6, r7
 800918a:	d900      	bls.n	800918e <__ssputs_r+0x72>
 800918c:	463e      	mov	r6, r7
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	4632      	mov	r2, r6
 8009192:	4641      	mov	r1, r8
 8009194:	f000 f9c6 	bl	8009524 <memmove>
 8009198:	68a3      	ldr	r3, [r4, #8]
 800919a:	1b9b      	subs	r3, r3, r6
 800919c:	60a3      	str	r3, [r4, #8]
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	4433      	add	r3, r6
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	2000      	movs	r0, #0
 80091a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091aa:	462a      	mov	r2, r5
 80091ac:	f000 fd89 	bl	8009cc2 <_realloc_r>
 80091b0:	4606      	mov	r6, r0
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1e0      	bne.n	8009178 <__ssputs_r+0x5c>
 80091b6:	6921      	ldr	r1, [r4, #16]
 80091b8:	4650      	mov	r0, sl
 80091ba:	f7fe fb79 	bl	80078b0 <_free_r>
 80091be:	230c      	movs	r3, #12
 80091c0:	f8ca 3000 	str.w	r3, [sl]
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	e7e9      	b.n	80091a6 <__ssputs_r+0x8a>
	...

080091d4 <_svfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	4698      	mov	r8, r3
 80091da:	898b      	ldrh	r3, [r1, #12]
 80091dc:	061b      	lsls	r3, r3, #24
 80091de:	b09d      	sub	sp, #116	@ 0x74
 80091e0:	4607      	mov	r7, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	4614      	mov	r4, r2
 80091e6:	d510      	bpl.n	800920a <_svfiprintf_r+0x36>
 80091e8:	690b      	ldr	r3, [r1, #16]
 80091ea:	b973      	cbnz	r3, 800920a <_svfiprintf_r+0x36>
 80091ec:	2140      	movs	r1, #64	@ 0x40
 80091ee:	f7fe fbd3 	bl	8007998 <_malloc_r>
 80091f2:	6028      	str	r0, [r5, #0]
 80091f4:	6128      	str	r0, [r5, #16]
 80091f6:	b930      	cbnz	r0, 8009206 <_svfiprintf_r+0x32>
 80091f8:	230c      	movs	r3, #12
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	b01d      	add	sp, #116	@ 0x74
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	2340      	movs	r3, #64	@ 0x40
 8009208:	616b      	str	r3, [r5, #20]
 800920a:	2300      	movs	r3, #0
 800920c:	9309      	str	r3, [sp, #36]	@ 0x24
 800920e:	2320      	movs	r3, #32
 8009210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009214:	f8cd 800c 	str.w	r8, [sp, #12]
 8009218:	2330      	movs	r3, #48	@ 0x30
 800921a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093b8 <_svfiprintf_r+0x1e4>
 800921e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009222:	f04f 0901 	mov.w	r9, #1
 8009226:	4623      	mov	r3, r4
 8009228:	469a      	mov	sl, r3
 800922a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922e:	b10a      	cbz	r2, 8009234 <_svfiprintf_r+0x60>
 8009230:	2a25      	cmp	r2, #37	@ 0x25
 8009232:	d1f9      	bne.n	8009228 <_svfiprintf_r+0x54>
 8009234:	ebba 0b04 	subs.w	fp, sl, r4
 8009238:	d00b      	beq.n	8009252 <_svfiprintf_r+0x7e>
 800923a:	465b      	mov	r3, fp
 800923c:	4622      	mov	r2, r4
 800923e:	4629      	mov	r1, r5
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff ff6b 	bl	800911c <__ssputs_r>
 8009246:	3001      	adds	r0, #1
 8009248:	f000 80a7 	beq.w	800939a <_svfiprintf_r+0x1c6>
 800924c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800924e:	445a      	add	r2, fp
 8009250:	9209      	str	r2, [sp, #36]	@ 0x24
 8009252:	f89a 3000 	ldrb.w	r3, [sl]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 809f 	beq.w	800939a <_svfiprintf_r+0x1c6>
 800925c:	2300      	movs	r3, #0
 800925e:	f04f 32ff 	mov.w	r2, #4294967295
 8009262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009266:	f10a 0a01 	add.w	sl, sl, #1
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009272:	931a      	str	r3, [sp, #104]	@ 0x68
 8009274:	4654      	mov	r4, sl
 8009276:	2205      	movs	r2, #5
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	484e      	ldr	r0, [pc, #312]	@ (80093b8 <_svfiprintf_r+0x1e4>)
 800927e:	f7f6 ffaf 	bl	80001e0 <memchr>
 8009282:	9a04      	ldr	r2, [sp, #16]
 8009284:	b9d8      	cbnz	r0, 80092be <_svfiprintf_r+0xea>
 8009286:	06d0      	lsls	r0, r2, #27
 8009288:	bf44      	itt	mi
 800928a:	2320      	movmi	r3, #32
 800928c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009290:	0711      	lsls	r1, r2, #28
 8009292:	bf44      	itt	mi
 8009294:	232b      	movmi	r3, #43	@ 0x2b
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929a:	f89a 3000 	ldrb.w	r3, [sl]
 800929e:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a0:	d015      	beq.n	80092ce <_svfiprintf_r+0xfa>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	4654      	mov	r4, sl
 80092a6:	2000      	movs	r0, #0
 80092a8:	f04f 0c0a 	mov.w	ip, #10
 80092ac:	4621      	mov	r1, r4
 80092ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b2:	3b30      	subs	r3, #48	@ 0x30
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d94b      	bls.n	8009350 <_svfiprintf_r+0x17c>
 80092b8:	b1b0      	cbz	r0, 80092e8 <_svfiprintf_r+0x114>
 80092ba:	9207      	str	r2, [sp, #28]
 80092bc:	e014      	b.n	80092e8 <_svfiprintf_r+0x114>
 80092be:	eba0 0308 	sub.w	r3, r0, r8
 80092c2:	fa09 f303 	lsl.w	r3, r9, r3
 80092c6:	4313      	orrs	r3, r2
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	46a2      	mov	sl, r4
 80092cc:	e7d2      	b.n	8009274 <_svfiprintf_r+0xa0>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	1d19      	adds	r1, r3, #4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	9103      	str	r1, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfbb      	ittet	lt
 80092da:	425b      	neglt	r3, r3
 80092dc:	f042 0202 	orrlt.w	r2, r2, #2
 80092e0:	9307      	strge	r3, [sp, #28]
 80092e2:	9307      	strlt	r3, [sp, #28]
 80092e4:	bfb8      	it	lt
 80092e6:	9204      	strlt	r2, [sp, #16]
 80092e8:	7823      	ldrb	r3, [r4, #0]
 80092ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80092ec:	d10a      	bne.n	8009304 <_svfiprintf_r+0x130>
 80092ee:	7863      	ldrb	r3, [r4, #1]
 80092f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f2:	d132      	bne.n	800935a <_svfiprintf_r+0x186>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9203      	str	r2, [sp, #12]
 80092fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009300:	3402      	adds	r4, #2
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093c8 <_svfiprintf_r+0x1f4>
 8009308:	7821      	ldrb	r1, [r4, #0]
 800930a:	2203      	movs	r2, #3
 800930c:	4650      	mov	r0, sl
 800930e:	f7f6 ff67 	bl	80001e0 <memchr>
 8009312:	b138      	cbz	r0, 8009324 <_svfiprintf_r+0x150>
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	eba0 000a 	sub.w	r0, r0, sl
 800931a:	2240      	movs	r2, #64	@ 0x40
 800931c:	4082      	lsls	r2, r0
 800931e:	4313      	orrs	r3, r2
 8009320:	3401      	adds	r4, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009328:	4824      	ldr	r0, [pc, #144]	@ (80093bc <_svfiprintf_r+0x1e8>)
 800932a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800932e:	2206      	movs	r2, #6
 8009330:	f7f6 ff56 	bl	80001e0 <memchr>
 8009334:	2800      	cmp	r0, #0
 8009336:	d036      	beq.n	80093a6 <_svfiprintf_r+0x1d2>
 8009338:	4b21      	ldr	r3, [pc, #132]	@ (80093c0 <_svfiprintf_r+0x1ec>)
 800933a:	bb1b      	cbnz	r3, 8009384 <_svfiprintf_r+0x1b0>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	3307      	adds	r3, #7
 8009340:	f023 0307 	bic.w	r3, r3, #7
 8009344:	3308      	adds	r3, #8
 8009346:	9303      	str	r3, [sp, #12]
 8009348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934a:	4433      	add	r3, r6
 800934c:	9309      	str	r3, [sp, #36]	@ 0x24
 800934e:	e76a      	b.n	8009226 <_svfiprintf_r+0x52>
 8009350:	fb0c 3202 	mla	r2, ip, r2, r3
 8009354:	460c      	mov	r4, r1
 8009356:	2001      	movs	r0, #1
 8009358:	e7a8      	b.n	80092ac <_svfiprintf_r+0xd8>
 800935a:	2300      	movs	r3, #0
 800935c:	3401      	adds	r4, #1
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	4619      	mov	r1, r3
 8009362:	f04f 0c0a 	mov.w	ip, #10
 8009366:	4620      	mov	r0, r4
 8009368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936c:	3a30      	subs	r2, #48	@ 0x30
 800936e:	2a09      	cmp	r2, #9
 8009370:	d903      	bls.n	800937a <_svfiprintf_r+0x1a6>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0c6      	beq.n	8009304 <_svfiprintf_r+0x130>
 8009376:	9105      	str	r1, [sp, #20]
 8009378:	e7c4      	b.n	8009304 <_svfiprintf_r+0x130>
 800937a:	fb0c 2101 	mla	r1, ip, r1, r2
 800937e:	4604      	mov	r4, r0
 8009380:	2301      	movs	r3, #1
 8009382:	e7f0      	b.n	8009366 <_svfiprintf_r+0x192>
 8009384:	ab03      	add	r3, sp, #12
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	462a      	mov	r2, r5
 800938a:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <_svfiprintf_r+0x1f0>)
 800938c:	a904      	add	r1, sp, #16
 800938e:	4638      	mov	r0, r7
 8009390:	f7fc fc96 	bl	8005cc0 <_printf_float>
 8009394:	1c42      	adds	r2, r0, #1
 8009396:	4606      	mov	r6, r0
 8009398:	d1d6      	bne.n	8009348 <_svfiprintf_r+0x174>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	065b      	lsls	r3, r3, #25
 800939e:	f53f af2d 	bmi.w	80091fc <_svfiprintf_r+0x28>
 80093a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a4:	e72c      	b.n	8009200 <_svfiprintf_r+0x2c>
 80093a6:	ab03      	add	r3, sp, #12
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	462a      	mov	r2, r5
 80093ac:	4b05      	ldr	r3, [pc, #20]	@ (80093c4 <_svfiprintf_r+0x1f0>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	4638      	mov	r0, r7
 80093b2:	f7fc ff1d 	bl	80061f0 <_printf_i>
 80093b6:	e7ed      	b.n	8009394 <_svfiprintf_r+0x1c0>
 80093b8:	0800a6a9 	.word	0x0800a6a9
 80093bc:	0800a6b3 	.word	0x0800a6b3
 80093c0:	08005cc1 	.word	0x08005cc1
 80093c4:	0800911d 	.word	0x0800911d
 80093c8:	0800a6af 	.word	0x0800a6af

080093cc <__sflush_r>:
 80093cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	0716      	lsls	r6, r2, #28
 80093d6:	4605      	mov	r5, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	d454      	bmi.n	8009486 <__sflush_r+0xba>
 80093dc:	684b      	ldr	r3, [r1, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc02      	bgt.n	80093e8 <__sflush_r+0x1c>
 80093e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dd48      	ble.n	800947a <__sflush_r+0xae>
 80093e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093ea:	2e00      	cmp	r6, #0
 80093ec:	d045      	beq.n	800947a <__sflush_r+0xae>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093f4:	682f      	ldr	r7, [r5, #0]
 80093f6:	6a21      	ldr	r1, [r4, #32]
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	d030      	beq.n	800945e <__sflush_r+0x92>
 80093fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	0759      	lsls	r1, r3, #29
 8009402:	d505      	bpl.n	8009410 <__sflush_r+0x44>
 8009404:	6863      	ldr	r3, [r4, #4]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800940a:	b10b      	cbz	r3, 8009410 <__sflush_r+0x44>
 800940c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	2300      	movs	r3, #0
 8009412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009414:	6a21      	ldr	r1, [r4, #32]
 8009416:	4628      	mov	r0, r5
 8009418:	47b0      	blx	r6
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	d106      	bne.n	800942e <__sflush_r+0x62>
 8009420:	6829      	ldr	r1, [r5, #0]
 8009422:	291d      	cmp	r1, #29
 8009424:	d82b      	bhi.n	800947e <__sflush_r+0xb2>
 8009426:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <__sflush_r+0x104>)
 8009428:	410a      	asrs	r2, r1
 800942a:	07d6      	lsls	r6, r2, #31
 800942c:	d427      	bmi.n	800947e <__sflush_r+0xb2>
 800942e:	2200      	movs	r2, #0
 8009430:	6062      	str	r2, [r4, #4]
 8009432:	04d9      	lsls	r1, r3, #19
 8009434:	6922      	ldr	r2, [r4, #16]
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	d504      	bpl.n	8009444 <__sflush_r+0x78>
 800943a:	1c42      	adds	r2, r0, #1
 800943c:	d101      	bne.n	8009442 <__sflush_r+0x76>
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	b903      	cbnz	r3, 8009444 <__sflush_r+0x78>
 8009442:	6560      	str	r0, [r4, #84]	@ 0x54
 8009444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009446:	602f      	str	r7, [r5, #0]
 8009448:	b1b9      	cbz	r1, 800947a <__sflush_r+0xae>
 800944a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800944e:	4299      	cmp	r1, r3
 8009450:	d002      	beq.n	8009458 <__sflush_r+0x8c>
 8009452:	4628      	mov	r0, r5
 8009454:	f7fe fa2c 	bl	80078b0 <_free_r>
 8009458:	2300      	movs	r3, #0
 800945a:	6363      	str	r3, [r4, #52]	@ 0x34
 800945c:	e00d      	b.n	800947a <__sflush_r+0xae>
 800945e:	2301      	movs	r3, #1
 8009460:	4628      	mov	r0, r5
 8009462:	47b0      	blx	r6
 8009464:	4602      	mov	r2, r0
 8009466:	1c50      	adds	r0, r2, #1
 8009468:	d1c9      	bne.n	80093fe <__sflush_r+0x32>
 800946a:	682b      	ldr	r3, [r5, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0c6      	beq.n	80093fe <__sflush_r+0x32>
 8009470:	2b1d      	cmp	r3, #29
 8009472:	d001      	beq.n	8009478 <__sflush_r+0xac>
 8009474:	2b16      	cmp	r3, #22
 8009476:	d11e      	bne.n	80094b6 <__sflush_r+0xea>
 8009478:	602f      	str	r7, [r5, #0]
 800947a:	2000      	movs	r0, #0
 800947c:	e022      	b.n	80094c4 <__sflush_r+0xf8>
 800947e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009482:	b21b      	sxth	r3, r3
 8009484:	e01b      	b.n	80094be <__sflush_r+0xf2>
 8009486:	690f      	ldr	r7, [r1, #16]
 8009488:	2f00      	cmp	r7, #0
 800948a:	d0f6      	beq.n	800947a <__sflush_r+0xae>
 800948c:	0793      	lsls	r3, r2, #30
 800948e:	680e      	ldr	r6, [r1, #0]
 8009490:	bf08      	it	eq
 8009492:	694b      	ldreq	r3, [r1, #20]
 8009494:	600f      	str	r7, [r1, #0]
 8009496:	bf18      	it	ne
 8009498:	2300      	movne	r3, #0
 800949a:	eba6 0807 	sub.w	r8, r6, r7
 800949e:	608b      	str	r3, [r1, #8]
 80094a0:	f1b8 0f00 	cmp.w	r8, #0
 80094a4:	dde9      	ble.n	800947a <__sflush_r+0xae>
 80094a6:	6a21      	ldr	r1, [r4, #32]
 80094a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094aa:	4643      	mov	r3, r8
 80094ac:	463a      	mov	r2, r7
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b0      	blx	r6
 80094b2:	2800      	cmp	r0, #0
 80094b4:	dc08      	bgt.n	80094c8 <__sflush_r+0xfc>
 80094b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	4407      	add	r7, r0
 80094ca:	eba8 0800 	sub.w	r8, r8, r0
 80094ce:	e7e7      	b.n	80094a0 <__sflush_r+0xd4>
 80094d0:	dfbffffe 	.word	0xdfbffffe

080094d4 <_fflush_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	690b      	ldr	r3, [r1, #16]
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	b913      	cbnz	r3, 80094e4 <_fflush_r+0x10>
 80094de:	2500      	movs	r5, #0
 80094e0:	4628      	mov	r0, r5
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	b118      	cbz	r0, 80094ee <_fflush_r+0x1a>
 80094e6:	6a03      	ldr	r3, [r0, #32]
 80094e8:	b90b      	cbnz	r3, 80094ee <_fflush_r+0x1a>
 80094ea:	f7fd fa41 	bl	8006970 <__sinit>
 80094ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0f3      	beq.n	80094de <_fflush_r+0xa>
 80094f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094f8:	07d0      	lsls	r0, r2, #31
 80094fa:	d404      	bmi.n	8009506 <_fflush_r+0x32>
 80094fc:	0599      	lsls	r1, r3, #22
 80094fe:	d402      	bmi.n	8009506 <_fflush_r+0x32>
 8009500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009502:	f7fd fb80 	bl	8006c06 <__retarget_lock_acquire_recursive>
 8009506:	4628      	mov	r0, r5
 8009508:	4621      	mov	r1, r4
 800950a:	f7ff ff5f 	bl	80093cc <__sflush_r>
 800950e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009510:	07da      	lsls	r2, r3, #31
 8009512:	4605      	mov	r5, r0
 8009514:	d4e4      	bmi.n	80094e0 <_fflush_r+0xc>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	059b      	lsls	r3, r3, #22
 800951a:	d4e1      	bmi.n	80094e0 <_fflush_r+0xc>
 800951c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800951e:	f7fd fb73 	bl	8006c08 <__retarget_lock_release_recursive>
 8009522:	e7dd      	b.n	80094e0 <_fflush_r+0xc>

08009524 <memmove>:
 8009524:	4288      	cmp	r0, r1
 8009526:	b510      	push	{r4, lr}
 8009528:	eb01 0402 	add.w	r4, r1, r2
 800952c:	d902      	bls.n	8009534 <memmove+0x10>
 800952e:	4284      	cmp	r4, r0
 8009530:	4623      	mov	r3, r4
 8009532:	d807      	bhi.n	8009544 <memmove+0x20>
 8009534:	1e43      	subs	r3, r0, #1
 8009536:	42a1      	cmp	r1, r4
 8009538:	d008      	beq.n	800954c <memmove+0x28>
 800953a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800953e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009542:	e7f8      	b.n	8009536 <memmove+0x12>
 8009544:	4402      	add	r2, r0
 8009546:	4601      	mov	r1, r0
 8009548:	428a      	cmp	r2, r1
 800954a:	d100      	bne.n	800954e <memmove+0x2a>
 800954c:	bd10      	pop	{r4, pc}
 800954e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009556:	e7f7      	b.n	8009548 <memmove+0x24>

08009558 <strncmp>:
 8009558:	b510      	push	{r4, lr}
 800955a:	b16a      	cbz	r2, 8009578 <strncmp+0x20>
 800955c:	3901      	subs	r1, #1
 800955e:	1884      	adds	r4, r0, r2
 8009560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009568:	429a      	cmp	r2, r3
 800956a:	d103      	bne.n	8009574 <strncmp+0x1c>
 800956c:	42a0      	cmp	r0, r4
 800956e:	d001      	beq.n	8009574 <strncmp+0x1c>
 8009570:	2a00      	cmp	r2, #0
 8009572:	d1f5      	bne.n	8009560 <strncmp+0x8>
 8009574:	1ad0      	subs	r0, r2, r3
 8009576:	bd10      	pop	{r4, pc}
 8009578:	4610      	mov	r0, r2
 800957a:	e7fc      	b.n	8009576 <strncmp+0x1e>

0800957c <_sbrk_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d06      	ldr	r5, [pc, #24]	@ (8009598 <_sbrk_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f8 fa34 	bl	80019f4 <_sbrk>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_sbrk_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_sbrk_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	200004bc 	.word	0x200004bc

0800959c <memcpy>:
 800959c:	440a      	add	r2, r1
 800959e:	4291      	cmp	r1, r2
 80095a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a4:	d100      	bne.n	80095a8 <memcpy+0xc>
 80095a6:	4770      	bx	lr
 80095a8:	b510      	push	{r4, lr}
 80095aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b2:	4291      	cmp	r1, r2
 80095b4:	d1f9      	bne.n	80095aa <memcpy+0xe>
 80095b6:	bd10      	pop	{r4, pc}

080095b8 <nan>:
 80095b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80095c0 <nan+0x8>
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	00000000 	.word	0x00000000
 80095c4:	7ff80000 	.word	0x7ff80000

080095c8 <__assert_func>:
 80095c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ca:	4614      	mov	r4, r2
 80095cc:	461a      	mov	r2, r3
 80095ce:	4b09      	ldr	r3, [pc, #36]	@ (80095f4 <__assert_func+0x2c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4605      	mov	r5, r0
 80095d4:	68d8      	ldr	r0, [r3, #12]
 80095d6:	b954      	cbnz	r4, 80095ee <__assert_func+0x26>
 80095d8:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <__assert_func+0x30>)
 80095da:	461c      	mov	r4, r3
 80095dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e0:	9100      	str	r1, [sp, #0]
 80095e2:	462b      	mov	r3, r5
 80095e4:	4905      	ldr	r1, [pc, #20]	@ (80095fc <__assert_func+0x34>)
 80095e6:	f000 fba7 	bl	8009d38 <fiprintf>
 80095ea:	f000 fbb7 	bl	8009d5c <abort>
 80095ee:	4b04      	ldr	r3, [pc, #16]	@ (8009600 <__assert_func+0x38>)
 80095f0:	e7f4      	b.n	80095dc <__assert_func+0x14>
 80095f2:	bf00      	nop
 80095f4:	20000034 	.word	0x20000034
 80095f8:	0800a6fd 	.word	0x0800a6fd
 80095fc:	0800a6cf 	.word	0x0800a6cf
 8009600:	0800a6c2 	.word	0x0800a6c2

08009604 <_calloc_r>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	fba1 5402 	umull	r5, r4, r1, r2
 800960a:	b93c      	cbnz	r4, 800961c <_calloc_r+0x18>
 800960c:	4629      	mov	r1, r5
 800960e:	f7fe f9c3 	bl	8007998 <_malloc_r>
 8009612:	4606      	mov	r6, r0
 8009614:	b928      	cbnz	r0, 8009622 <_calloc_r+0x1e>
 8009616:	2600      	movs	r6, #0
 8009618:	4630      	mov	r0, r6
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	220c      	movs	r2, #12
 800961e:	6002      	str	r2, [r0, #0]
 8009620:	e7f9      	b.n	8009616 <_calloc_r+0x12>
 8009622:	462a      	mov	r2, r5
 8009624:	4621      	mov	r1, r4
 8009626:	f7fd fa70 	bl	8006b0a <memset>
 800962a:	e7f5      	b.n	8009618 <_calloc_r+0x14>

0800962c <rshift>:
 800962c:	6903      	ldr	r3, [r0, #16]
 800962e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800963a:	f100 0414 	add.w	r4, r0, #20
 800963e:	dd45      	ble.n	80096cc <rshift+0xa0>
 8009640:	f011 011f 	ands.w	r1, r1, #31
 8009644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800964c:	d10c      	bne.n	8009668 <rshift+0x3c>
 800964e:	f100 0710 	add.w	r7, r0, #16
 8009652:	4629      	mov	r1, r5
 8009654:	42b1      	cmp	r1, r6
 8009656:	d334      	bcc.n	80096c2 <rshift+0x96>
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	1eea      	subs	r2, r5, #3
 800965e:	4296      	cmp	r6, r2
 8009660:	bf38      	it	cc
 8009662:	2300      	movcc	r3, #0
 8009664:	4423      	add	r3, r4
 8009666:	e015      	b.n	8009694 <rshift+0x68>
 8009668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800966c:	f1c1 0820 	rsb	r8, r1, #32
 8009670:	40cf      	lsrs	r7, r1
 8009672:	f105 0e04 	add.w	lr, r5, #4
 8009676:	46a1      	mov	r9, r4
 8009678:	4576      	cmp	r6, lr
 800967a:	46f4      	mov	ip, lr
 800967c:	d815      	bhi.n	80096aa <rshift+0x7e>
 800967e:	1a9a      	subs	r2, r3, r2
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	3a04      	subs	r2, #4
 8009684:	3501      	adds	r5, #1
 8009686:	42ae      	cmp	r6, r5
 8009688:	bf38      	it	cc
 800968a:	2200      	movcc	r2, #0
 800968c:	18a3      	adds	r3, r4, r2
 800968e:	50a7      	str	r7, [r4, r2]
 8009690:	b107      	cbz	r7, 8009694 <rshift+0x68>
 8009692:	3304      	adds	r3, #4
 8009694:	1b1a      	subs	r2, r3, r4
 8009696:	42a3      	cmp	r3, r4
 8009698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800969c:	bf08      	it	eq
 800969e:	2300      	moveq	r3, #0
 80096a0:	6102      	str	r2, [r0, #16]
 80096a2:	bf08      	it	eq
 80096a4:	6143      	streq	r3, [r0, #20]
 80096a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096aa:	f8dc c000 	ldr.w	ip, [ip]
 80096ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80096b2:	ea4c 0707 	orr.w	r7, ip, r7
 80096b6:	f849 7b04 	str.w	r7, [r9], #4
 80096ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096be:	40cf      	lsrs	r7, r1
 80096c0:	e7da      	b.n	8009678 <rshift+0x4c>
 80096c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80096c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80096ca:	e7c3      	b.n	8009654 <rshift+0x28>
 80096cc:	4623      	mov	r3, r4
 80096ce:	e7e1      	b.n	8009694 <rshift+0x68>

080096d0 <__hexdig_fun>:
 80096d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d802      	bhi.n	80096de <__hexdig_fun+0xe>
 80096d8:	3820      	subs	r0, #32
 80096da:	b2c0      	uxtb	r0, r0
 80096dc:	4770      	bx	lr
 80096de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d801      	bhi.n	80096ea <__hexdig_fun+0x1a>
 80096e6:	3847      	subs	r0, #71	@ 0x47
 80096e8:	e7f7      	b.n	80096da <__hexdig_fun+0xa>
 80096ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80096ee:	2b05      	cmp	r3, #5
 80096f0:	d801      	bhi.n	80096f6 <__hexdig_fun+0x26>
 80096f2:	3827      	subs	r0, #39	@ 0x27
 80096f4:	e7f1      	b.n	80096da <__hexdig_fun+0xa>
 80096f6:	2000      	movs	r0, #0
 80096f8:	4770      	bx	lr
	...

080096fc <__gethex>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	b085      	sub	sp, #20
 8009702:	468a      	mov	sl, r1
 8009704:	9302      	str	r3, [sp, #8]
 8009706:	680b      	ldr	r3, [r1, #0]
 8009708:	9001      	str	r0, [sp, #4]
 800970a:	4690      	mov	r8, r2
 800970c:	1c9c      	adds	r4, r3, #2
 800970e:	46a1      	mov	r9, r4
 8009710:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009714:	2830      	cmp	r0, #48	@ 0x30
 8009716:	d0fa      	beq.n	800970e <__gethex+0x12>
 8009718:	eba9 0303 	sub.w	r3, r9, r3
 800971c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009720:	f7ff ffd6 	bl	80096d0 <__hexdig_fun>
 8009724:	4605      	mov	r5, r0
 8009726:	2800      	cmp	r0, #0
 8009728:	d168      	bne.n	80097fc <__gethex+0x100>
 800972a:	49a0      	ldr	r1, [pc, #640]	@ (80099ac <__gethex+0x2b0>)
 800972c:	2201      	movs	r2, #1
 800972e:	4648      	mov	r0, r9
 8009730:	f7ff ff12 	bl	8009558 <strncmp>
 8009734:	4607      	mov	r7, r0
 8009736:	2800      	cmp	r0, #0
 8009738:	d167      	bne.n	800980a <__gethex+0x10e>
 800973a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800973e:	4626      	mov	r6, r4
 8009740:	f7ff ffc6 	bl	80096d0 <__hexdig_fun>
 8009744:	2800      	cmp	r0, #0
 8009746:	d062      	beq.n	800980e <__gethex+0x112>
 8009748:	4623      	mov	r3, r4
 800974a:	7818      	ldrb	r0, [r3, #0]
 800974c:	2830      	cmp	r0, #48	@ 0x30
 800974e:	4699      	mov	r9, r3
 8009750:	f103 0301 	add.w	r3, r3, #1
 8009754:	d0f9      	beq.n	800974a <__gethex+0x4e>
 8009756:	f7ff ffbb 	bl	80096d0 <__hexdig_fun>
 800975a:	fab0 f580 	clz	r5, r0
 800975e:	096d      	lsrs	r5, r5, #5
 8009760:	f04f 0b01 	mov.w	fp, #1
 8009764:	464a      	mov	r2, r9
 8009766:	4616      	mov	r6, r2
 8009768:	3201      	adds	r2, #1
 800976a:	7830      	ldrb	r0, [r6, #0]
 800976c:	f7ff ffb0 	bl	80096d0 <__hexdig_fun>
 8009770:	2800      	cmp	r0, #0
 8009772:	d1f8      	bne.n	8009766 <__gethex+0x6a>
 8009774:	498d      	ldr	r1, [pc, #564]	@ (80099ac <__gethex+0x2b0>)
 8009776:	2201      	movs	r2, #1
 8009778:	4630      	mov	r0, r6
 800977a:	f7ff feed 	bl	8009558 <strncmp>
 800977e:	2800      	cmp	r0, #0
 8009780:	d13f      	bne.n	8009802 <__gethex+0x106>
 8009782:	b944      	cbnz	r4, 8009796 <__gethex+0x9a>
 8009784:	1c74      	adds	r4, r6, #1
 8009786:	4622      	mov	r2, r4
 8009788:	4616      	mov	r6, r2
 800978a:	3201      	adds	r2, #1
 800978c:	7830      	ldrb	r0, [r6, #0]
 800978e:	f7ff ff9f 	bl	80096d0 <__hexdig_fun>
 8009792:	2800      	cmp	r0, #0
 8009794:	d1f8      	bne.n	8009788 <__gethex+0x8c>
 8009796:	1ba4      	subs	r4, r4, r6
 8009798:	00a7      	lsls	r7, r4, #2
 800979a:	7833      	ldrb	r3, [r6, #0]
 800979c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80097a0:	2b50      	cmp	r3, #80	@ 0x50
 80097a2:	d13e      	bne.n	8009822 <__gethex+0x126>
 80097a4:	7873      	ldrb	r3, [r6, #1]
 80097a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80097a8:	d033      	beq.n	8009812 <__gethex+0x116>
 80097aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80097ac:	d034      	beq.n	8009818 <__gethex+0x11c>
 80097ae:	1c71      	adds	r1, r6, #1
 80097b0:	2400      	movs	r4, #0
 80097b2:	7808      	ldrb	r0, [r1, #0]
 80097b4:	f7ff ff8c 	bl	80096d0 <__hexdig_fun>
 80097b8:	1e43      	subs	r3, r0, #1
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b18      	cmp	r3, #24
 80097be:	d830      	bhi.n	8009822 <__gethex+0x126>
 80097c0:	f1a0 0210 	sub.w	r2, r0, #16
 80097c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097c8:	f7ff ff82 	bl	80096d0 <__hexdig_fun>
 80097cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80097d0:	fa5f fc8c 	uxtb.w	ip, ip
 80097d4:	f1bc 0f18 	cmp.w	ip, #24
 80097d8:	f04f 030a 	mov.w	r3, #10
 80097dc:	d91e      	bls.n	800981c <__gethex+0x120>
 80097de:	b104      	cbz	r4, 80097e2 <__gethex+0xe6>
 80097e0:	4252      	negs	r2, r2
 80097e2:	4417      	add	r7, r2
 80097e4:	f8ca 1000 	str.w	r1, [sl]
 80097e8:	b1ed      	cbz	r5, 8009826 <__gethex+0x12a>
 80097ea:	f1bb 0f00 	cmp.w	fp, #0
 80097ee:	bf0c      	ite	eq
 80097f0:	2506      	moveq	r5, #6
 80097f2:	2500      	movne	r5, #0
 80097f4:	4628      	mov	r0, r5
 80097f6:	b005      	add	sp, #20
 80097f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fc:	2500      	movs	r5, #0
 80097fe:	462c      	mov	r4, r5
 8009800:	e7b0      	b.n	8009764 <__gethex+0x68>
 8009802:	2c00      	cmp	r4, #0
 8009804:	d1c7      	bne.n	8009796 <__gethex+0x9a>
 8009806:	4627      	mov	r7, r4
 8009808:	e7c7      	b.n	800979a <__gethex+0x9e>
 800980a:	464e      	mov	r6, r9
 800980c:	462f      	mov	r7, r5
 800980e:	2501      	movs	r5, #1
 8009810:	e7c3      	b.n	800979a <__gethex+0x9e>
 8009812:	2400      	movs	r4, #0
 8009814:	1cb1      	adds	r1, r6, #2
 8009816:	e7cc      	b.n	80097b2 <__gethex+0xb6>
 8009818:	2401      	movs	r4, #1
 800981a:	e7fb      	b.n	8009814 <__gethex+0x118>
 800981c:	fb03 0002 	mla	r0, r3, r2, r0
 8009820:	e7ce      	b.n	80097c0 <__gethex+0xc4>
 8009822:	4631      	mov	r1, r6
 8009824:	e7de      	b.n	80097e4 <__gethex+0xe8>
 8009826:	eba6 0309 	sub.w	r3, r6, r9
 800982a:	3b01      	subs	r3, #1
 800982c:	4629      	mov	r1, r5
 800982e:	2b07      	cmp	r3, #7
 8009830:	dc0a      	bgt.n	8009848 <__gethex+0x14c>
 8009832:	9801      	ldr	r0, [sp, #4]
 8009834:	f7fe f93c 	bl	8007ab0 <_Balloc>
 8009838:	4604      	mov	r4, r0
 800983a:	b940      	cbnz	r0, 800984e <__gethex+0x152>
 800983c:	4b5c      	ldr	r3, [pc, #368]	@ (80099b0 <__gethex+0x2b4>)
 800983e:	4602      	mov	r2, r0
 8009840:	21e4      	movs	r1, #228	@ 0xe4
 8009842:	485c      	ldr	r0, [pc, #368]	@ (80099b4 <__gethex+0x2b8>)
 8009844:	f7ff fec0 	bl	80095c8 <__assert_func>
 8009848:	3101      	adds	r1, #1
 800984a:	105b      	asrs	r3, r3, #1
 800984c:	e7ef      	b.n	800982e <__gethex+0x132>
 800984e:	f100 0a14 	add.w	sl, r0, #20
 8009852:	2300      	movs	r3, #0
 8009854:	4655      	mov	r5, sl
 8009856:	469b      	mov	fp, r3
 8009858:	45b1      	cmp	r9, r6
 800985a:	d337      	bcc.n	80098cc <__gethex+0x1d0>
 800985c:	f845 bb04 	str.w	fp, [r5], #4
 8009860:	eba5 050a 	sub.w	r5, r5, sl
 8009864:	10ad      	asrs	r5, r5, #2
 8009866:	6125      	str	r5, [r4, #16]
 8009868:	4658      	mov	r0, fp
 800986a:	f7fe fa13 	bl	8007c94 <__hi0bits>
 800986e:	016d      	lsls	r5, r5, #5
 8009870:	f8d8 6000 	ldr.w	r6, [r8]
 8009874:	1a2d      	subs	r5, r5, r0
 8009876:	42b5      	cmp	r5, r6
 8009878:	dd54      	ble.n	8009924 <__gethex+0x228>
 800987a:	1bad      	subs	r5, r5, r6
 800987c:	4629      	mov	r1, r5
 800987e:	4620      	mov	r0, r4
 8009880:	f7fe fda7 	bl	80083d2 <__any_on>
 8009884:	4681      	mov	r9, r0
 8009886:	b178      	cbz	r0, 80098a8 <__gethex+0x1ac>
 8009888:	1e6b      	subs	r3, r5, #1
 800988a:	1159      	asrs	r1, r3, #5
 800988c:	f003 021f 	and.w	r2, r3, #31
 8009890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009894:	f04f 0901 	mov.w	r9, #1
 8009898:	fa09 f202 	lsl.w	r2, r9, r2
 800989c:	420a      	tst	r2, r1
 800989e:	d003      	beq.n	80098a8 <__gethex+0x1ac>
 80098a0:	454b      	cmp	r3, r9
 80098a2:	dc36      	bgt.n	8009912 <__gethex+0x216>
 80098a4:	f04f 0902 	mov.w	r9, #2
 80098a8:	4629      	mov	r1, r5
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7ff febe 	bl	800962c <rshift>
 80098b0:	442f      	add	r7, r5
 80098b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098b6:	42bb      	cmp	r3, r7
 80098b8:	da42      	bge.n	8009940 <__gethex+0x244>
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	4621      	mov	r1, r4
 80098be:	f7fe f937 	bl	8007b30 <_Bfree>
 80098c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098c4:	2300      	movs	r3, #0
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	25a3      	movs	r5, #163	@ 0xa3
 80098ca:	e793      	b.n	80097f4 <__gethex+0xf8>
 80098cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80098d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80098d2:	d012      	beq.n	80098fa <__gethex+0x1fe>
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d104      	bne.n	80098e2 <__gethex+0x1e6>
 80098d8:	f845 bb04 	str.w	fp, [r5], #4
 80098dc:	f04f 0b00 	mov.w	fp, #0
 80098e0:	465b      	mov	r3, fp
 80098e2:	7830      	ldrb	r0, [r6, #0]
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	f7ff fef3 	bl	80096d0 <__hexdig_fun>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	f000 000f 	and.w	r0, r0, #15
 80098f0:	4098      	lsls	r0, r3
 80098f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80098f6:	3304      	adds	r3, #4
 80098f8:	e7ae      	b.n	8009858 <__gethex+0x15c>
 80098fa:	45b1      	cmp	r9, r6
 80098fc:	d8ea      	bhi.n	80098d4 <__gethex+0x1d8>
 80098fe:	492b      	ldr	r1, [pc, #172]	@ (80099ac <__gethex+0x2b0>)
 8009900:	9303      	str	r3, [sp, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff fe27 	bl	8009558 <strncmp>
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	2800      	cmp	r0, #0
 800990e:	d1e1      	bne.n	80098d4 <__gethex+0x1d8>
 8009910:	e7a2      	b.n	8009858 <__gethex+0x15c>
 8009912:	1ea9      	subs	r1, r5, #2
 8009914:	4620      	mov	r0, r4
 8009916:	f7fe fd5c 	bl	80083d2 <__any_on>
 800991a:	2800      	cmp	r0, #0
 800991c:	d0c2      	beq.n	80098a4 <__gethex+0x1a8>
 800991e:	f04f 0903 	mov.w	r9, #3
 8009922:	e7c1      	b.n	80098a8 <__gethex+0x1ac>
 8009924:	da09      	bge.n	800993a <__gethex+0x23e>
 8009926:	1b75      	subs	r5, r6, r5
 8009928:	4621      	mov	r1, r4
 800992a:	9801      	ldr	r0, [sp, #4]
 800992c:	462a      	mov	r2, r5
 800992e:	f7fe fb17 	bl	8007f60 <__lshift>
 8009932:	1b7f      	subs	r7, r7, r5
 8009934:	4604      	mov	r4, r0
 8009936:	f100 0a14 	add.w	sl, r0, #20
 800993a:	f04f 0900 	mov.w	r9, #0
 800993e:	e7b8      	b.n	80098b2 <__gethex+0x1b6>
 8009940:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009944:	42bd      	cmp	r5, r7
 8009946:	dd6f      	ble.n	8009a28 <__gethex+0x32c>
 8009948:	1bed      	subs	r5, r5, r7
 800994a:	42ae      	cmp	r6, r5
 800994c:	dc34      	bgt.n	80099b8 <__gethex+0x2bc>
 800994e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009952:	2b02      	cmp	r3, #2
 8009954:	d022      	beq.n	800999c <__gethex+0x2a0>
 8009956:	2b03      	cmp	r3, #3
 8009958:	d024      	beq.n	80099a4 <__gethex+0x2a8>
 800995a:	2b01      	cmp	r3, #1
 800995c:	d115      	bne.n	800998a <__gethex+0x28e>
 800995e:	42ae      	cmp	r6, r5
 8009960:	d113      	bne.n	800998a <__gethex+0x28e>
 8009962:	2e01      	cmp	r6, #1
 8009964:	d10b      	bne.n	800997e <__gethex+0x282>
 8009966:	9a02      	ldr	r2, [sp, #8]
 8009968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	2301      	movs	r3, #1
 8009970:	6123      	str	r3, [r4, #16]
 8009972:	f8ca 3000 	str.w	r3, [sl]
 8009976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009978:	2562      	movs	r5, #98	@ 0x62
 800997a:	601c      	str	r4, [r3, #0]
 800997c:	e73a      	b.n	80097f4 <__gethex+0xf8>
 800997e:	1e71      	subs	r1, r6, #1
 8009980:	4620      	mov	r0, r4
 8009982:	f7fe fd26 	bl	80083d2 <__any_on>
 8009986:	2800      	cmp	r0, #0
 8009988:	d1ed      	bne.n	8009966 <__gethex+0x26a>
 800998a:	9801      	ldr	r0, [sp, #4]
 800998c:	4621      	mov	r1, r4
 800998e:	f7fe f8cf 	bl	8007b30 <_Bfree>
 8009992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009994:	2300      	movs	r3, #0
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	2550      	movs	r5, #80	@ 0x50
 800999a:	e72b      	b.n	80097f4 <__gethex+0xf8>
 800999c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1f3      	bne.n	800998a <__gethex+0x28e>
 80099a2:	e7e0      	b.n	8009966 <__gethex+0x26a>
 80099a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1dd      	bne.n	8009966 <__gethex+0x26a>
 80099aa:	e7ee      	b.n	800998a <__gethex+0x28e>
 80099ac:	0800a550 	.word	0x0800a550
 80099b0:	0800a3e9 	.word	0x0800a3e9
 80099b4:	0800a6fe 	.word	0x0800a6fe
 80099b8:	1e6f      	subs	r7, r5, #1
 80099ba:	f1b9 0f00 	cmp.w	r9, #0
 80099be:	d130      	bne.n	8009a22 <__gethex+0x326>
 80099c0:	b127      	cbz	r7, 80099cc <__gethex+0x2d0>
 80099c2:	4639      	mov	r1, r7
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7fe fd04 	bl	80083d2 <__any_on>
 80099ca:	4681      	mov	r9, r0
 80099cc:	117a      	asrs	r2, r7, #5
 80099ce:	2301      	movs	r3, #1
 80099d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099d4:	f007 071f 	and.w	r7, r7, #31
 80099d8:	40bb      	lsls	r3, r7
 80099da:	4213      	tst	r3, r2
 80099dc:	4629      	mov	r1, r5
 80099de:	4620      	mov	r0, r4
 80099e0:	bf18      	it	ne
 80099e2:	f049 0902 	orrne.w	r9, r9, #2
 80099e6:	f7ff fe21 	bl	800962c <rshift>
 80099ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80099ee:	1b76      	subs	r6, r6, r5
 80099f0:	2502      	movs	r5, #2
 80099f2:	f1b9 0f00 	cmp.w	r9, #0
 80099f6:	d047      	beq.n	8009a88 <__gethex+0x38c>
 80099f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d015      	beq.n	8009a2c <__gethex+0x330>
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d017      	beq.n	8009a34 <__gethex+0x338>
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d109      	bne.n	8009a1c <__gethex+0x320>
 8009a08:	f019 0f02 	tst.w	r9, #2
 8009a0c:	d006      	beq.n	8009a1c <__gethex+0x320>
 8009a0e:	f8da 3000 	ldr.w	r3, [sl]
 8009a12:	ea49 0903 	orr.w	r9, r9, r3
 8009a16:	f019 0f01 	tst.w	r9, #1
 8009a1a:	d10e      	bne.n	8009a3a <__gethex+0x33e>
 8009a1c:	f045 0510 	orr.w	r5, r5, #16
 8009a20:	e032      	b.n	8009a88 <__gethex+0x38c>
 8009a22:	f04f 0901 	mov.w	r9, #1
 8009a26:	e7d1      	b.n	80099cc <__gethex+0x2d0>
 8009a28:	2501      	movs	r5, #1
 8009a2a:	e7e2      	b.n	80099f2 <__gethex+0x2f6>
 8009a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2e:	f1c3 0301 	rsb	r3, r3, #1
 8009a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d0f0      	beq.n	8009a1c <__gethex+0x320>
 8009a3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a3e:	f104 0314 	add.w	r3, r4, #20
 8009a42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009a46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009a4a:	f04f 0c00 	mov.w	ip, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a58:	d01b      	beq.n	8009a92 <__gethex+0x396>
 8009a5a:	3201      	adds	r2, #1
 8009a5c:	6002      	str	r2, [r0, #0]
 8009a5e:	2d02      	cmp	r5, #2
 8009a60:	f104 0314 	add.w	r3, r4, #20
 8009a64:	d13c      	bne.n	8009ae0 <__gethex+0x3e4>
 8009a66:	f8d8 2000 	ldr.w	r2, [r8]
 8009a6a:	3a01      	subs	r2, #1
 8009a6c:	42b2      	cmp	r2, r6
 8009a6e:	d109      	bne.n	8009a84 <__gethex+0x388>
 8009a70:	1171      	asrs	r1, r6, #5
 8009a72:	2201      	movs	r2, #1
 8009a74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a78:	f006 061f 	and.w	r6, r6, #31
 8009a7c:	fa02 f606 	lsl.w	r6, r2, r6
 8009a80:	421e      	tst	r6, r3
 8009a82:	d13a      	bne.n	8009afa <__gethex+0x3fe>
 8009a84:	f045 0520 	orr.w	r5, r5, #32
 8009a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a8a:	601c      	str	r4, [r3, #0]
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	601f      	str	r7, [r3, #0]
 8009a90:	e6b0      	b.n	80097f4 <__gethex+0xf8>
 8009a92:	4299      	cmp	r1, r3
 8009a94:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a98:	d8d9      	bhi.n	8009a4e <__gethex+0x352>
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	459b      	cmp	fp, r3
 8009a9e:	db17      	blt.n	8009ad0 <__gethex+0x3d4>
 8009aa0:	6861      	ldr	r1, [r4, #4]
 8009aa2:	9801      	ldr	r0, [sp, #4]
 8009aa4:	3101      	adds	r1, #1
 8009aa6:	f7fe f803 	bl	8007ab0 <_Balloc>
 8009aaa:	4681      	mov	r9, r0
 8009aac:	b918      	cbnz	r0, 8009ab6 <__gethex+0x3ba>
 8009aae:	4b1a      	ldr	r3, [pc, #104]	@ (8009b18 <__gethex+0x41c>)
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	2184      	movs	r1, #132	@ 0x84
 8009ab4:	e6c5      	b.n	8009842 <__gethex+0x146>
 8009ab6:	6922      	ldr	r2, [r4, #16]
 8009ab8:	3202      	adds	r2, #2
 8009aba:	f104 010c 	add.w	r1, r4, #12
 8009abe:	0092      	lsls	r2, r2, #2
 8009ac0:	300c      	adds	r0, #12
 8009ac2:	f7ff fd6b 	bl	800959c <memcpy>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	f7fe f831 	bl	8007b30 <_Bfree>
 8009ace:	464c      	mov	r4, r9
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ad8:	6122      	str	r2, [r4, #16]
 8009ada:	2201      	movs	r2, #1
 8009adc:	615a      	str	r2, [r3, #20]
 8009ade:	e7be      	b.n	8009a5e <__gethex+0x362>
 8009ae0:	6922      	ldr	r2, [r4, #16]
 8009ae2:	455a      	cmp	r2, fp
 8009ae4:	dd0b      	ble.n	8009afe <__gethex+0x402>
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7ff fd9f 	bl	800962c <rshift>
 8009aee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009af2:	3701      	adds	r7, #1
 8009af4:	42bb      	cmp	r3, r7
 8009af6:	f6ff aee0 	blt.w	80098ba <__gethex+0x1be>
 8009afa:	2501      	movs	r5, #1
 8009afc:	e7c2      	b.n	8009a84 <__gethex+0x388>
 8009afe:	f016 061f 	ands.w	r6, r6, #31
 8009b02:	d0fa      	beq.n	8009afa <__gethex+0x3fe>
 8009b04:	4453      	add	r3, sl
 8009b06:	f1c6 0620 	rsb	r6, r6, #32
 8009b0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b0e:	f7fe f8c1 	bl	8007c94 <__hi0bits>
 8009b12:	42b0      	cmp	r0, r6
 8009b14:	dbe7      	blt.n	8009ae6 <__gethex+0x3ea>
 8009b16:	e7f0      	b.n	8009afa <__gethex+0x3fe>
 8009b18:	0800a3e9 	.word	0x0800a3e9

08009b1c <L_shift>:
 8009b1c:	f1c2 0208 	rsb	r2, r2, #8
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	b570      	push	{r4, r5, r6, lr}
 8009b24:	f1c2 0620 	rsb	r6, r2, #32
 8009b28:	6843      	ldr	r3, [r0, #4]
 8009b2a:	6804      	ldr	r4, [r0, #0]
 8009b2c:	fa03 f506 	lsl.w	r5, r3, r6
 8009b30:	432c      	orrs	r4, r5
 8009b32:	40d3      	lsrs	r3, r2
 8009b34:	6004      	str	r4, [r0, #0]
 8009b36:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b3a:	4288      	cmp	r0, r1
 8009b3c:	d3f4      	bcc.n	8009b28 <L_shift+0xc>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}

08009b40 <__match>:
 8009b40:	b530      	push	{r4, r5, lr}
 8009b42:	6803      	ldr	r3, [r0, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4a:	b914      	cbnz	r4, 8009b52 <__match+0x12>
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	2001      	movs	r0, #1
 8009b50:	bd30      	pop	{r4, r5, pc}
 8009b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b5a:	2d19      	cmp	r5, #25
 8009b5c:	bf98      	it	ls
 8009b5e:	3220      	addls	r2, #32
 8009b60:	42a2      	cmp	r2, r4
 8009b62:	d0f0      	beq.n	8009b46 <__match+0x6>
 8009b64:	2000      	movs	r0, #0
 8009b66:	e7f3      	b.n	8009b50 <__match+0x10>

08009b68 <__hexnan>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	680b      	ldr	r3, [r1, #0]
 8009b6e:	6801      	ldr	r1, [r0, #0]
 8009b70:	115e      	asrs	r6, r3, #5
 8009b72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b76:	f013 031f 	ands.w	r3, r3, #31
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	bf18      	it	ne
 8009b7e:	3604      	addne	r6, #4
 8009b80:	2500      	movs	r5, #0
 8009b82:	1f37      	subs	r7, r6, #4
 8009b84:	4682      	mov	sl, r0
 8009b86:	4690      	mov	r8, r2
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b8e:	46b9      	mov	r9, r7
 8009b90:	463c      	mov	r4, r7
 8009b92:	9502      	str	r5, [sp, #8]
 8009b94:	46ab      	mov	fp, r5
 8009b96:	784a      	ldrb	r2, [r1, #1]
 8009b98:	1c4b      	adds	r3, r1, #1
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	b342      	cbz	r2, 8009bf0 <__hexnan+0x88>
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	9105      	str	r1, [sp, #20]
 8009ba2:	9204      	str	r2, [sp, #16]
 8009ba4:	f7ff fd94 	bl	80096d0 <__hexdig_fun>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d151      	bne.n	8009c50 <__hexnan+0xe8>
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	9905      	ldr	r1, [sp, #20]
 8009bb0:	2a20      	cmp	r2, #32
 8009bb2:	d818      	bhi.n	8009be6 <__hexnan+0x7e>
 8009bb4:	9b02      	ldr	r3, [sp, #8]
 8009bb6:	459b      	cmp	fp, r3
 8009bb8:	dd13      	ble.n	8009be2 <__hexnan+0x7a>
 8009bba:	454c      	cmp	r4, r9
 8009bbc:	d206      	bcs.n	8009bcc <__hexnan+0x64>
 8009bbe:	2d07      	cmp	r5, #7
 8009bc0:	dc04      	bgt.n	8009bcc <__hexnan+0x64>
 8009bc2:	462a      	mov	r2, r5
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7ff ffa8 	bl	8009b1c <L_shift>
 8009bcc:	4544      	cmp	r4, r8
 8009bce:	d952      	bls.n	8009c76 <__hexnan+0x10e>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f1a4 0904 	sub.w	r9, r4, #4
 8009bd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bda:	f8cd b008 	str.w	fp, [sp, #8]
 8009bde:	464c      	mov	r4, r9
 8009be0:	461d      	mov	r5, r3
 8009be2:	9903      	ldr	r1, [sp, #12]
 8009be4:	e7d7      	b.n	8009b96 <__hexnan+0x2e>
 8009be6:	2a29      	cmp	r2, #41	@ 0x29
 8009be8:	d157      	bne.n	8009c9a <__hexnan+0x132>
 8009bea:	3102      	adds	r1, #2
 8009bec:	f8ca 1000 	str.w	r1, [sl]
 8009bf0:	f1bb 0f00 	cmp.w	fp, #0
 8009bf4:	d051      	beq.n	8009c9a <__hexnan+0x132>
 8009bf6:	454c      	cmp	r4, r9
 8009bf8:	d206      	bcs.n	8009c08 <__hexnan+0xa0>
 8009bfa:	2d07      	cmp	r5, #7
 8009bfc:	dc04      	bgt.n	8009c08 <__hexnan+0xa0>
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4649      	mov	r1, r9
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff ff8a 	bl	8009b1c <L_shift>
 8009c08:	4544      	cmp	r4, r8
 8009c0a:	d936      	bls.n	8009c7a <__hexnan+0x112>
 8009c0c:	f1a8 0204 	sub.w	r2, r8, #4
 8009c10:	4623      	mov	r3, r4
 8009c12:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c16:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c1a:	429f      	cmp	r7, r3
 8009c1c:	d2f9      	bcs.n	8009c12 <__hexnan+0xaa>
 8009c1e:	1b3b      	subs	r3, r7, r4
 8009c20:	f023 0303 	bic.w	r3, r3, #3
 8009c24:	3304      	adds	r3, #4
 8009c26:	3401      	adds	r4, #1
 8009c28:	3e03      	subs	r6, #3
 8009c2a:	42b4      	cmp	r4, r6
 8009c2c:	bf88      	it	hi
 8009c2e:	2304      	movhi	r3, #4
 8009c30:	4443      	add	r3, r8
 8009c32:	2200      	movs	r2, #0
 8009c34:	f843 2b04 	str.w	r2, [r3], #4
 8009c38:	429f      	cmp	r7, r3
 8009c3a:	d2fb      	bcs.n	8009c34 <__hexnan+0xcc>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	b91b      	cbnz	r3, 8009c48 <__hexnan+0xe0>
 8009c40:	4547      	cmp	r7, r8
 8009c42:	d128      	bne.n	8009c96 <__hexnan+0x12e>
 8009c44:	2301      	movs	r3, #1
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	2005      	movs	r0, #5
 8009c4a:	b007      	add	sp, #28
 8009c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c50:	3501      	adds	r5, #1
 8009c52:	2d08      	cmp	r5, #8
 8009c54:	f10b 0b01 	add.w	fp, fp, #1
 8009c58:	dd06      	ble.n	8009c68 <__hexnan+0x100>
 8009c5a:	4544      	cmp	r4, r8
 8009c5c:	d9c1      	bls.n	8009be2 <__hexnan+0x7a>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c64:	2501      	movs	r5, #1
 8009c66:	3c04      	subs	r4, #4
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	f000 000f 	and.w	r0, r0, #15
 8009c6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c72:	6020      	str	r0, [r4, #0]
 8009c74:	e7b5      	b.n	8009be2 <__hexnan+0x7a>
 8009c76:	2508      	movs	r5, #8
 8009c78:	e7b3      	b.n	8009be2 <__hexnan+0x7a>
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0dd      	beq.n	8009c3c <__hexnan+0xd4>
 8009c80:	f1c3 0320 	rsb	r3, r3, #32
 8009c84:	f04f 32ff 	mov.w	r2, #4294967295
 8009c88:	40da      	lsrs	r2, r3
 8009c8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c94:	e7d2      	b.n	8009c3c <__hexnan+0xd4>
 8009c96:	3f04      	subs	r7, #4
 8009c98:	e7d0      	b.n	8009c3c <__hexnan+0xd4>
 8009c9a:	2004      	movs	r0, #4
 8009c9c:	e7d5      	b.n	8009c4a <__hexnan+0xe2>

08009c9e <__ascii_mbtowc>:
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	b901      	cbnz	r1, 8009ca4 <__ascii_mbtowc+0x6>
 8009ca2:	a901      	add	r1, sp, #4
 8009ca4:	b142      	cbz	r2, 8009cb8 <__ascii_mbtowc+0x1a>
 8009ca6:	b14b      	cbz	r3, 8009cbc <__ascii_mbtowc+0x1e>
 8009ca8:	7813      	ldrb	r3, [r2, #0]
 8009caa:	600b      	str	r3, [r1, #0]
 8009cac:	7812      	ldrb	r2, [r2, #0]
 8009cae:	1e10      	subs	r0, r2, #0
 8009cb0:	bf18      	it	ne
 8009cb2:	2001      	movne	r0, #1
 8009cb4:	b002      	add	sp, #8
 8009cb6:	4770      	bx	lr
 8009cb8:	4610      	mov	r0, r2
 8009cba:	e7fb      	b.n	8009cb4 <__ascii_mbtowc+0x16>
 8009cbc:	f06f 0001 	mvn.w	r0, #1
 8009cc0:	e7f8      	b.n	8009cb4 <__ascii_mbtowc+0x16>

08009cc2 <_realloc_r>:
 8009cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	4680      	mov	r8, r0
 8009cc8:	4615      	mov	r5, r2
 8009cca:	460c      	mov	r4, r1
 8009ccc:	b921      	cbnz	r1, 8009cd8 <_realloc_r+0x16>
 8009cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	f7fd be60 	b.w	8007998 <_malloc_r>
 8009cd8:	b92a      	cbnz	r2, 8009ce6 <_realloc_r+0x24>
 8009cda:	f7fd fde9 	bl	80078b0 <_free_r>
 8009cde:	2400      	movs	r4, #0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce6:	f000 f840 	bl	8009d6a <_malloc_usable_size_r>
 8009cea:	4285      	cmp	r5, r0
 8009cec:	4606      	mov	r6, r0
 8009cee:	d802      	bhi.n	8009cf6 <_realloc_r+0x34>
 8009cf0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009cf4:	d8f4      	bhi.n	8009ce0 <_realloc_r+0x1e>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	f7fd fe4d 	bl	8007998 <_malloc_r>
 8009cfe:	4607      	mov	r7, r0
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d0ec      	beq.n	8009cde <_realloc_r+0x1c>
 8009d04:	42b5      	cmp	r5, r6
 8009d06:	462a      	mov	r2, r5
 8009d08:	4621      	mov	r1, r4
 8009d0a:	bf28      	it	cs
 8009d0c:	4632      	movcs	r2, r6
 8009d0e:	f7ff fc45 	bl	800959c <memcpy>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4640      	mov	r0, r8
 8009d16:	f7fd fdcb 	bl	80078b0 <_free_r>
 8009d1a:	463c      	mov	r4, r7
 8009d1c:	e7e0      	b.n	8009ce0 <_realloc_r+0x1e>

08009d1e <__ascii_wctomb>:
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	b141      	cbz	r1, 8009d36 <__ascii_wctomb+0x18>
 8009d24:	2aff      	cmp	r2, #255	@ 0xff
 8009d26:	d904      	bls.n	8009d32 <__ascii_wctomb+0x14>
 8009d28:	228a      	movs	r2, #138	@ 0x8a
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	4770      	bx	lr
 8009d32:	700a      	strb	r2, [r1, #0]
 8009d34:	2001      	movs	r0, #1
 8009d36:	4770      	bx	lr

08009d38 <fiprintf>:
 8009d38:	b40e      	push	{r1, r2, r3}
 8009d3a:	b503      	push	{r0, r1, lr}
 8009d3c:	4601      	mov	r1, r0
 8009d3e:	ab03      	add	r3, sp, #12
 8009d40:	4805      	ldr	r0, [pc, #20]	@ (8009d58 <fiprintf+0x20>)
 8009d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d46:	6800      	ldr	r0, [r0, #0]
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	f000 f83f 	bl	8009dcc <_vfiprintf_r>
 8009d4e:	b002      	add	sp, #8
 8009d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d54:	b003      	add	sp, #12
 8009d56:	4770      	bx	lr
 8009d58:	20000034 	.word	0x20000034

08009d5c <abort>:
 8009d5c:	b508      	push	{r3, lr}
 8009d5e:	2006      	movs	r0, #6
 8009d60:	f000 fa08 	bl	800a174 <raise>
 8009d64:	2001      	movs	r0, #1
 8009d66:	f7f7 fdcd 	bl	8001904 <_exit>

08009d6a <_malloc_usable_size_r>:
 8009d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d6e:	1f18      	subs	r0, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfbc      	itt	lt
 8009d74:	580b      	ldrlt	r3, [r1, r0]
 8009d76:	18c0      	addlt	r0, r0, r3
 8009d78:	4770      	bx	lr

08009d7a <__sfputc_r>:
 8009d7a:	6893      	ldr	r3, [r2, #8]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	b410      	push	{r4}
 8009d82:	6093      	str	r3, [r2, #8]
 8009d84:	da08      	bge.n	8009d98 <__sfputc_r+0x1e>
 8009d86:	6994      	ldr	r4, [r2, #24]
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	db01      	blt.n	8009d90 <__sfputc_r+0x16>
 8009d8c:	290a      	cmp	r1, #10
 8009d8e:	d103      	bne.n	8009d98 <__sfputc_r+0x1e>
 8009d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d94:	f000 b932 	b.w	8009ffc <__swbuf_r>
 8009d98:	6813      	ldr	r3, [r2, #0]
 8009d9a:	1c58      	adds	r0, r3, #1
 8009d9c:	6010      	str	r0, [r2, #0]
 8009d9e:	7019      	strb	r1, [r3, #0]
 8009da0:	4608      	mov	r0, r1
 8009da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <__sfputs_r>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	4614      	mov	r4, r2
 8009db0:	18d5      	adds	r5, r2, r3
 8009db2:	42ac      	cmp	r4, r5
 8009db4:	d101      	bne.n	8009dba <__sfputs_r+0x12>
 8009db6:	2000      	movs	r0, #0
 8009db8:	e007      	b.n	8009dca <__sfputs_r+0x22>
 8009dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbe:	463a      	mov	r2, r7
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7ff ffda 	bl	8009d7a <__sfputc_r>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d1f3      	bne.n	8009db2 <__sfputs_r+0xa>
 8009dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dcc <_vfiprintf_r>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	b09d      	sub	sp, #116	@ 0x74
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	4698      	mov	r8, r3
 8009dd8:	4606      	mov	r6, r0
 8009dda:	b118      	cbz	r0, 8009de4 <_vfiprintf_r+0x18>
 8009ddc:	6a03      	ldr	r3, [r0, #32]
 8009dde:	b90b      	cbnz	r3, 8009de4 <_vfiprintf_r+0x18>
 8009de0:	f7fc fdc6 	bl	8006970 <__sinit>
 8009de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009de6:	07d9      	lsls	r1, r3, #31
 8009de8:	d405      	bmi.n	8009df6 <_vfiprintf_r+0x2a>
 8009dea:	89ab      	ldrh	r3, [r5, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_vfiprintf_r+0x2a>
 8009df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009df2:	f7fc ff08 	bl	8006c06 <__retarget_lock_acquire_recursive>
 8009df6:	89ab      	ldrh	r3, [r5, #12]
 8009df8:	071b      	lsls	r3, r3, #28
 8009dfa:	d501      	bpl.n	8009e00 <_vfiprintf_r+0x34>
 8009dfc:	692b      	ldr	r3, [r5, #16]
 8009dfe:	b99b      	cbnz	r3, 8009e28 <_vfiprintf_r+0x5c>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4630      	mov	r0, r6
 8009e04:	f000 f938 	bl	800a078 <__swsetup_r>
 8009e08:	b170      	cbz	r0, 8009e28 <_vfiprintf_r+0x5c>
 8009e0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e0c:	07dc      	lsls	r4, r3, #31
 8009e0e:	d504      	bpl.n	8009e1a <_vfiprintf_r+0x4e>
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295
 8009e14:	b01d      	add	sp, #116	@ 0x74
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	0598      	lsls	r0, r3, #22
 8009e1e:	d4f7      	bmi.n	8009e10 <_vfiprintf_r+0x44>
 8009e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e22:	f7fc fef1 	bl	8006c08 <__retarget_lock_release_recursive>
 8009e26:	e7f3      	b.n	8009e10 <_vfiprintf_r+0x44>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e36:	2330      	movs	r3, #48	@ 0x30
 8009e38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fe8 <_vfiprintf_r+0x21c>
 8009e3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e40:	f04f 0901 	mov.w	r9, #1
 8009e44:	4623      	mov	r3, r4
 8009e46:	469a      	mov	sl, r3
 8009e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e4c:	b10a      	cbz	r2, 8009e52 <_vfiprintf_r+0x86>
 8009e4e:	2a25      	cmp	r2, #37	@ 0x25
 8009e50:	d1f9      	bne.n	8009e46 <_vfiprintf_r+0x7a>
 8009e52:	ebba 0b04 	subs.w	fp, sl, r4
 8009e56:	d00b      	beq.n	8009e70 <_vfiprintf_r+0xa4>
 8009e58:	465b      	mov	r3, fp
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff ffa2 	bl	8009da8 <__sfputs_r>
 8009e64:	3001      	adds	r0, #1
 8009e66:	f000 80a7 	beq.w	8009fb8 <_vfiprintf_r+0x1ec>
 8009e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e6c:	445a      	add	r2, fp
 8009e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e70:	f89a 3000 	ldrb.w	r3, [sl]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 809f 	beq.w	8009fb8 <_vfiprintf_r+0x1ec>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e84:	f10a 0a01 	add.w	sl, sl, #1
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	9307      	str	r3, [sp, #28]
 8009e8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e90:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e92:	4654      	mov	r4, sl
 8009e94:	2205      	movs	r2, #5
 8009e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9a:	4853      	ldr	r0, [pc, #332]	@ (8009fe8 <_vfiprintf_r+0x21c>)
 8009e9c:	f7f6 f9a0 	bl	80001e0 <memchr>
 8009ea0:	9a04      	ldr	r2, [sp, #16]
 8009ea2:	b9d8      	cbnz	r0, 8009edc <_vfiprintf_r+0x110>
 8009ea4:	06d1      	lsls	r1, r2, #27
 8009ea6:	bf44      	itt	mi
 8009ea8:	2320      	movmi	r3, #32
 8009eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eae:	0713      	lsls	r3, r2, #28
 8009eb0:	bf44      	itt	mi
 8009eb2:	232b      	movmi	r3, #43	@ 0x2b
 8009eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ebe:	d015      	beq.n	8009eec <_vfiprintf_r+0x120>
 8009ec0:	9a07      	ldr	r2, [sp, #28]
 8009ec2:	4654      	mov	r4, sl
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f04f 0c0a 	mov.w	ip, #10
 8009eca:	4621      	mov	r1, r4
 8009ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed0:	3b30      	subs	r3, #48	@ 0x30
 8009ed2:	2b09      	cmp	r3, #9
 8009ed4:	d94b      	bls.n	8009f6e <_vfiprintf_r+0x1a2>
 8009ed6:	b1b0      	cbz	r0, 8009f06 <_vfiprintf_r+0x13a>
 8009ed8:	9207      	str	r2, [sp, #28]
 8009eda:	e014      	b.n	8009f06 <_vfiprintf_r+0x13a>
 8009edc:	eba0 0308 	sub.w	r3, r0, r8
 8009ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	46a2      	mov	sl, r4
 8009eea:	e7d2      	b.n	8009e92 <_vfiprintf_r+0xc6>
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	1d19      	adds	r1, r3, #4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	9103      	str	r1, [sp, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	bfbb      	ittet	lt
 8009ef8:	425b      	neglt	r3, r3
 8009efa:	f042 0202 	orrlt.w	r2, r2, #2
 8009efe:	9307      	strge	r3, [sp, #28]
 8009f00:	9307      	strlt	r3, [sp, #28]
 8009f02:	bfb8      	it	lt
 8009f04:	9204      	strlt	r2, [sp, #16]
 8009f06:	7823      	ldrb	r3, [r4, #0]
 8009f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f0a:	d10a      	bne.n	8009f22 <_vfiprintf_r+0x156>
 8009f0c:	7863      	ldrb	r3, [r4, #1]
 8009f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f10:	d132      	bne.n	8009f78 <_vfiprintf_r+0x1ac>
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	1d1a      	adds	r2, r3, #4
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	9203      	str	r2, [sp, #12]
 8009f1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f1e:	3402      	adds	r4, #2
 8009f20:	9305      	str	r3, [sp, #20]
 8009f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ff8 <_vfiprintf_r+0x22c>
 8009f26:	7821      	ldrb	r1, [r4, #0]
 8009f28:	2203      	movs	r2, #3
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	f7f6 f958 	bl	80001e0 <memchr>
 8009f30:	b138      	cbz	r0, 8009f42 <_vfiprintf_r+0x176>
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	eba0 000a 	sub.w	r0, r0, sl
 8009f38:	2240      	movs	r2, #64	@ 0x40
 8009f3a:	4082      	lsls	r2, r0
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	3401      	adds	r4, #1
 8009f40:	9304      	str	r3, [sp, #16]
 8009f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f46:	4829      	ldr	r0, [pc, #164]	@ (8009fec <_vfiprintf_r+0x220>)
 8009f48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f4c:	2206      	movs	r2, #6
 8009f4e:	f7f6 f947 	bl	80001e0 <memchr>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d03f      	beq.n	8009fd6 <_vfiprintf_r+0x20a>
 8009f56:	4b26      	ldr	r3, [pc, #152]	@ (8009ff0 <_vfiprintf_r+0x224>)
 8009f58:	bb1b      	cbnz	r3, 8009fa2 <_vfiprintf_r+0x1d6>
 8009f5a:	9b03      	ldr	r3, [sp, #12]
 8009f5c:	3307      	adds	r3, #7
 8009f5e:	f023 0307 	bic.w	r3, r3, #7
 8009f62:	3308      	adds	r3, #8
 8009f64:	9303      	str	r3, [sp, #12]
 8009f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f68:	443b      	add	r3, r7
 8009f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6c:	e76a      	b.n	8009e44 <_vfiprintf_r+0x78>
 8009f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f72:	460c      	mov	r4, r1
 8009f74:	2001      	movs	r0, #1
 8009f76:	e7a8      	b.n	8009eca <_vfiprintf_r+0xfe>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	f04f 0c0a 	mov.w	ip, #10
 8009f84:	4620      	mov	r0, r4
 8009f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8a:	3a30      	subs	r2, #48	@ 0x30
 8009f8c:	2a09      	cmp	r2, #9
 8009f8e:	d903      	bls.n	8009f98 <_vfiprintf_r+0x1cc>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0c6      	beq.n	8009f22 <_vfiprintf_r+0x156>
 8009f94:	9105      	str	r1, [sp, #20]
 8009f96:	e7c4      	b.n	8009f22 <_vfiprintf_r+0x156>
 8009f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e7f0      	b.n	8009f84 <_vfiprintf_r+0x1b8>
 8009fa2:	ab03      	add	r3, sp, #12
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4b12      	ldr	r3, [pc, #72]	@ (8009ff4 <_vfiprintf_r+0x228>)
 8009faa:	a904      	add	r1, sp, #16
 8009fac:	4630      	mov	r0, r6
 8009fae:	f7fb fe87 	bl	8005cc0 <_printf_float>
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	1c78      	adds	r0, r7, #1
 8009fb6:	d1d6      	bne.n	8009f66 <_vfiprintf_r+0x19a>
 8009fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	d405      	bmi.n	8009fca <_vfiprintf_r+0x1fe>
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	059a      	lsls	r2, r3, #22
 8009fc2:	d402      	bmi.n	8009fca <_vfiprintf_r+0x1fe>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fc6:	f7fc fe1f 	bl	8006c08 <__retarget_lock_release_recursive>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	065b      	lsls	r3, r3, #25
 8009fce:	f53f af1f 	bmi.w	8009e10 <_vfiprintf_r+0x44>
 8009fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fd4:	e71e      	b.n	8009e14 <_vfiprintf_r+0x48>
 8009fd6:	ab03      	add	r3, sp, #12
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <_vfiprintf_r+0x228>)
 8009fde:	a904      	add	r1, sp, #16
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7fc f905 	bl	80061f0 <_printf_i>
 8009fe6:	e7e4      	b.n	8009fb2 <_vfiprintf_r+0x1e6>
 8009fe8:	0800a6a9 	.word	0x0800a6a9
 8009fec:	0800a6b3 	.word	0x0800a6b3
 8009ff0:	08005cc1 	.word	0x08005cc1
 8009ff4:	08009da9 	.word	0x08009da9
 8009ff8:	0800a6af 	.word	0x0800a6af

08009ffc <__swbuf_r>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	460e      	mov	r6, r1
 800a000:	4614      	mov	r4, r2
 800a002:	4605      	mov	r5, r0
 800a004:	b118      	cbz	r0, 800a00e <__swbuf_r+0x12>
 800a006:	6a03      	ldr	r3, [r0, #32]
 800a008:	b90b      	cbnz	r3, 800a00e <__swbuf_r+0x12>
 800a00a:	f7fc fcb1 	bl	8006970 <__sinit>
 800a00e:	69a3      	ldr	r3, [r4, #24]
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	071a      	lsls	r2, r3, #28
 800a016:	d501      	bpl.n	800a01c <__swbuf_r+0x20>
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	b943      	cbnz	r3, 800a02e <__swbuf_r+0x32>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f82a 	bl	800a078 <__swsetup_r>
 800a024:	b118      	cbz	r0, 800a02e <__swbuf_r+0x32>
 800a026:	f04f 37ff 	mov.w	r7, #4294967295
 800a02a:	4638      	mov	r0, r7
 800a02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	1a98      	subs	r0, r3, r2
 800a034:	6963      	ldr	r3, [r4, #20]
 800a036:	b2f6      	uxtb	r6, r6
 800a038:	4283      	cmp	r3, r0
 800a03a:	4637      	mov	r7, r6
 800a03c:	dc05      	bgt.n	800a04a <__swbuf_r+0x4e>
 800a03e:	4621      	mov	r1, r4
 800a040:	4628      	mov	r0, r5
 800a042:	f7ff fa47 	bl	80094d4 <_fflush_r>
 800a046:	2800      	cmp	r0, #0
 800a048:	d1ed      	bne.n	800a026 <__swbuf_r+0x2a>
 800a04a:	68a3      	ldr	r3, [r4, #8]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	60a3      	str	r3, [r4, #8]
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	701e      	strb	r6, [r3, #0]
 800a058:	6962      	ldr	r2, [r4, #20]
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d004      	beq.n	800a06a <__swbuf_r+0x6e>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	07db      	lsls	r3, r3, #31
 800a064:	d5e1      	bpl.n	800a02a <__swbuf_r+0x2e>
 800a066:	2e0a      	cmp	r6, #10
 800a068:	d1df      	bne.n	800a02a <__swbuf_r+0x2e>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f7ff fa31 	bl	80094d4 <_fflush_r>
 800a072:	2800      	cmp	r0, #0
 800a074:	d0d9      	beq.n	800a02a <__swbuf_r+0x2e>
 800a076:	e7d6      	b.n	800a026 <__swbuf_r+0x2a>

0800a078 <__swsetup_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4b29      	ldr	r3, [pc, #164]	@ (800a120 <__swsetup_r+0xa8>)
 800a07c:	4605      	mov	r5, r0
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	460c      	mov	r4, r1
 800a082:	b118      	cbz	r0, 800a08c <__swsetup_r+0x14>
 800a084:	6a03      	ldr	r3, [r0, #32]
 800a086:	b90b      	cbnz	r3, 800a08c <__swsetup_r+0x14>
 800a088:	f7fc fc72 	bl	8006970 <__sinit>
 800a08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a090:	0719      	lsls	r1, r3, #28
 800a092:	d422      	bmi.n	800a0da <__swsetup_r+0x62>
 800a094:	06da      	lsls	r2, r3, #27
 800a096:	d407      	bmi.n	800a0a8 <__swsetup_r+0x30>
 800a098:	2209      	movs	r2, #9
 800a09a:	602a      	str	r2, [r5, #0]
 800a09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a6:	e033      	b.n	800a110 <__swsetup_r+0x98>
 800a0a8:	0758      	lsls	r0, r3, #29
 800a0aa:	d512      	bpl.n	800a0d2 <__swsetup_r+0x5a>
 800a0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ae:	b141      	cbz	r1, 800a0c2 <__swsetup_r+0x4a>
 800a0b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d002      	beq.n	800a0be <__swsetup_r+0x46>
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f7fd fbf9 	bl	80078b0 <_free_r>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f043 0308 	orr.w	r3, r3, #8
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	b94b      	cbnz	r3, 800a0f2 <__swsetup_r+0x7a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e8:	d003      	beq.n	800a0f2 <__swsetup_r+0x7a>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f000 f883 	bl	800a1f8 <__smakebuf_r>
 800a0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f6:	f013 0201 	ands.w	r2, r3, #1
 800a0fa:	d00a      	beq.n	800a112 <__swsetup_r+0x9a>
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	60a2      	str	r2, [r4, #8]
 800a100:	6962      	ldr	r2, [r4, #20]
 800a102:	4252      	negs	r2, r2
 800a104:	61a2      	str	r2, [r4, #24]
 800a106:	6922      	ldr	r2, [r4, #16]
 800a108:	b942      	cbnz	r2, 800a11c <__swsetup_r+0xa4>
 800a10a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a10e:	d1c5      	bne.n	800a09c <__swsetup_r+0x24>
 800a110:	bd38      	pop	{r3, r4, r5, pc}
 800a112:	0799      	lsls	r1, r3, #30
 800a114:	bf58      	it	pl
 800a116:	6962      	ldrpl	r2, [r4, #20]
 800a118:	60a2      	str	r2, [r4, #8]
 800a11a:	e7f4      	b.n	800a106 <__swsetup_r+0x8e>
 800a11c:	2000      	movs	r0, #0
 800a11e:	e7f7      	b.n	800a110 <__swsetup_r+0x98>
 800a120:	20000034 	.word	0x20000034

0800a124 <_raise_r>:
 800a124:	291f      	cmp	r1, #31
 800a126:	b538      	push	{r3, r4, r5, lr}
 800a128:	4605      	mov	r5, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	d904      	bls.n	800a138 <_raise_r+0x14>
 800a12e:	2316      	movs	r3, #22
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	f04f 30ff 	mov.w	r0, #4294967295
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a13a:	b112      	cbz	r2, 800a142 <_raise_r+0x1e>
 800a13c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a140:	b94b      	cbnz	r3, 800a156 <_raise_r+0x32>
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f830 	bl	800a1a8 <_getpid_r>
 800a148:	4622      	mov	r2, r4
 800a14a:	4601      	mov	r1, r0
 800a14c:	4628      	mov	r0, r5
 800a14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a152:	f000 b817 	b.w	800a184 <_kill_r>
 800a156:	2b01      	cmp	r3, #1
 800a158:	d00a      	beq.n	800a170 <_raise_r+0x4c>
 800a15a:	1c59      	adds	r1, r3, #1
 800a15c:	d103      	bne.n	800a166 <_raise_r+0x42>
 800a15e:	2316      	movs	r3, #22
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	2001      	movs	r0, #1
 800a164:	e7e7      	b.n	800a136 <_raise_r+0x12>
 800a166:	2100      	movs	r1, #0
 800a168:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a16c:	4620      	mov	r0, r4
 800a16e:	4798      	blx	r3
 800a170:	2000      	movs	r0, #0
 800a172:	e7e0      	b.n	800a136 <_raise_r+0x12>

0800a174 <raise>:
 800a174:	4b02      	ldr	r3, [pc, #8]	@ (800a180 <raise+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f7ff bfd3 	b.w	800a124 <_raise_r>
 800a17e:	bf00      	nop
 800a180:	20000034 	.word	0x20000034

0800a184 <_kill_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d07      	ldr	r5, [pc, #28]	@ (800a1a4 <_kill_r+0x20>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	602b      	str	r3, [r5, #0]
 800a192:	f7f7 fba7 	bl	80018e4 <_kill>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d102      	bne.n	800a1a0 <_kill_r+0x1c>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b103      	cbz	r3, 800a1a0 <_kill_r+0x1c>
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}
 800a1a2:	bf00      	nop
 800a1a4:	200004bc 	.word	0x200004bc

0800a1a8 <_getpid_r>:
 800a1a8:	f7f7 bb94 	b.w	80018d4 <_getpid>

0800a1ac <__swhatbuf_r>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	b096      	sub	sp, #88	@ 0x58
 800a1b8:	4615      	mov	r5, r2
 800a1ba:	461e      	mov	r6, r3
 800a1bc:	da0d      	bge.n	800a1da <__swhatbuf_r+0x2e>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1c4:	f04f 0100 	mov.w	r1, #0
 800a1c8:	bf14      	ite	ne
 800a1ca:	2340      	movne	r3, #64	@ 0x40
 800a1cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	6031      	str	r1, [r6, #0]
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	b016      	add	sp, #88	@ 0x58
 800a1d8:	bd70      	pop	{r4, r5, r6, pc}
 800a1da:	466a      	mov	r2, sp
 800a1dc:	f000 f848 	bl	800a270 <_fstat_r>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dbec      	blt.n	800a1be <__swhatbuf_r+0x12>
 800a1e4:	9901      	ldr	r1, [sp, #4]
 800a1e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1ee:	4259      	negs	r1, r3
 800a1f0:	4159      	adcs	r1, r3
 800a1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1f6:	e7eb      	b.n	800a1d0 <__swhatbuf_r+0x24>

0800a1f8 <__smakebuf_r>:
 800a1f8:	898b      	ldrh	r3, [r1, #12]
 800a1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1fc:	079d      	lsls	r5, r3, #30
 800a1fe:	4606      	mov	r6, r0
 800a200:	460c      	mov	r4, r1
 800a202:	d507      	bpl.n	800a214 <__smakebuf_r+0x1c>
 800a204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	6123      	str	r3, [r4, #16]
 800a20c:	2301      	movs	r3, #1
 800a20e:	6163      	str	r3, [r4, #20]
 800a210:	b003      	add	sp, #12
 800a212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a214:	ab01      	add	r3, sp, #4
 800a216:	466a      	mov	r2, sp
 800a218:	f7ff ffc8 	bl	800a1ac <__swhatbuf_r>
 800a21c:	9f00      	ldr	r7, [sp, #0]
 800a21e:	4605      	mov	r5, r0
 800a220:	4639      	mov	r1, r7
 800a222:	4630      	mov	r0, r6
 800a224:	f7fd fbb8 	bl	8007998 <_malloc_r>
 800a228:	b948      	cbnz	r0, 800a23e <__smakebuf_r+0x46>
 800a22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22e:	059a      	lsls	r2, r3, #22
 800a230:	d4ee      	bmi.n	800a210 <__smakebuf_r+0x18>
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	f043 0302 	orr.w	r3, r3, #2
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	e7e2      	b.n	800a204 <__smakebuf_r+0xc>
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	6020      	str	r0, [r4, #0]
 800a242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	9b01      	ldr	r3, [sp, #4]
 800a24a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a24e:	b15b      	cbz	r3, 800a268 <__smakebuf_r+0x70>
 800a250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a254:	4630      	mov	r0, r6
 800a256:	f000 f81d 	bl	800a294 <_isatty_r>
 800a25a:	b128      	cbz	r0, 800a268 <__smakebuf_r+0x70>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	f043 0301 	orr.w	r3, r3, #1
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	431d      	orrs	r5, r3
 800a26c:	81a5      	strh	r5, [r4, #12]
 800a26e:	e7cf      	b.n	800a210 <__smakebuf_r+0x18>

0800a270 <_fstat_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	@ (800a290 <_fstat_r+0x20>)
 800a274:	2300      	movs	r3, #0
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	4611      	mov	r1, r2
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	f7f7 fb91 	bl	80019a4 <_fstat>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d102      	bne.n	800a28c <_fstat_r+0x1c>
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	b103      	cbz	r3, 800a28c <_fstat_r+0x1c>
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	bd38      	pop	{r3, r4, r5, pc}
 800a28e:	bf00      	nop
 800a290:	200004bc 	.word	0x200004bc

0800a294 <_isatty_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d06      	ldr	r5, [pc, #24]	@ (800a2b0 <_isatty_r+0x1c>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	602b      	str	r3, [r5, #0]
 800a2a0:	f7f7 fb90 	bl	80019c4 <_isatty>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_isatty_r+0x1a>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_isatty_r+0x1a>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	200004bc 	.word	0x200004bc

0800a2b4 <_init>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr

0800a2c0 <_fini>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr
