
MEMS_1c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800bd90  0800bd90  0000cd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c238  0800c238  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c238  0800c238  0000d238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c240  0800c240  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c240  0800c240  0000d240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c244  0800c244  0000d244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c248  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001ec  0800c434  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800c434  0000e588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105d0  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021de  00000000  00000000  0001e7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  000209d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  000219b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017571  00000000  00000000  0002264c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012848  00000000  00000000  00039bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d43  00000000  00000000  0004c405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a8  00000000  00000000  000de18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e3b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd74 	.word	0x0800bd74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800bd74 	.word	0x0800bd74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
	 string_length = snprintf(string, sizeof(string), "X: %.2f, Y: %.2f, Z: %.2f\n", acc_g_x, acc_g_y, acc_g_z);

	 HAL_UART_Transmit_DMA(&huart2, string, string_length);
}
*/
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	x = 0;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, MEMS_WR_ADDRESS, &MEMS_REGISTER_X, size);
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800100e:	f001 ff53 	bl	8002eb8 <HAL_I2C_Master_Transmit_DMA>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000430 	.word	0x20000430
 8001020:	20000000 	.word	0x20000000
 8001024:	20000010 	.word	0x20000010
 8001028:	2000000e 	.word	0x2000000e
 800102c:	20000208 	.word	0x20000208

08001030 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	int8_t y = x;
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_I2C_MasterTxCpltCallback+0x2c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Receive_DMA(&hi2c1, MEMS_WR_ADDRESS+1, &x, size);
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_I2C_MasterTxCpltCallback+0x30>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b299      	uxth	r1, r3
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <HAL_I2C_MasterTxCpltCallback+0x34>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <HAL_I2C_MasterTxCpltCallback+0x2c>)
 800104c:	4806      	ldr	r0, [pc, #24]	@ (8001068 <HAL_I2C_MasterTxCpltCallback+0x38>)
 800104e:	f002 f85f 	bl	8003110 <HAL_I2C_Master_Receive_DMA>

}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000430 	.word	0x20000430
 8001060:	20000000 	.word	0x20000000
 8001064:	20000010 	.word	0x20000010
 8001068:	20000208 	.word	0x20000208
 800106c:	00000000 	.word	0x00000000

08001070 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef *hi2c){
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af06      	add	r7, sp, #24
 8001076:	6078      	str	r0, [r7, #4]
	float acc_g_x = x / 64.0;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <HAL_I2C_MasterRxCpltCallback+0x88>)
 800107a:	f993 3000 	ldrsb.w	r3, [r3]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa58 	bl	8000534 <__aeabi_i2d>
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_I2C_MasterRxCpltCallback+0x8c>)
 800108a:	f7ff fbe7 	bl	800085c <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fdaf 	bl	8000bf8 <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	60fb      	str	r3, [r7, #12]
	string_length = snprintf(string, sizeof(string), "X: %.2f, Y: %.2f, Z: %.2f\n", acc_g_x, 0.2, 5.7);
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff fa5a 	bl	8000558 <__aeabi_f2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	a10f      	add	r1, pc, #60	@ (adr r1, 80010e8 <HAL_I2C_MasterRxCpltCallback+0x78>)
 80010aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80010f0 <HAL_I2C_MasterRxCpltCallback+0x80>)
 80010b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80010bc:	e9cd 2300 	strd	r2, r3, [sp]
 80010c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <HAL_I2C_MasterRxCpltCallback+0x90>)
 80010c2:	2120      	movs	r1, #32
 80010c4:	480f      	ldr	r0, [pc, #60]	@ (8001104 <HAL_I2C_MasterRxCpltCallback+0x94>)
 80010c6:	f007 f9e9 	bl	800849c <sniprintf>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_I2C_MasterRxCpltCallback+0x98>)
 80010ce:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart2, string, string_length);
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <HAL_I2C_MasterRxCpltCallback+0x98>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	490a      	ldr	r1, [pc, #40]	@ (8001104 <HAL_I2C_MasterRxCpltCallback+0x94>)
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <HAL_I2C_MasterRxCpltCallback+0x9c>)
 80010dc:	f005 fa9c 	bl	8006618 <HAL_UART_Transmit_DMA>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	cccccccd 	.word	0xcccccccd
 80010ec:	4016cccc 	.word	0x4016cccc
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	3fc99999 	.word	0x3fc99999
 80010f8:	20000430 	.word	0x20000430
 80010fc:	40500000 	.word	0x40500000
 8001100:	0800bd90 	.word	0x0800bd90
 8001104:	2000040c 	.word	0x2000040c
 8001108:	2000042c 	.word	0x2000042c
 800110c:	20000364 	.word	0x20000364

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001116:	f000 fd39 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f87b 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f000 f9bb 	bl	8001498 <MX_GPIO_Init>
  MX_DMA_Init();
 8001122:	f000 f989 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001126:	f000 f95d 	bl	80013e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800112a:	f000 f8df 	bl	80012ec <MX_I2C1_Init>
  MX_TIM2_Init();
 800112e:	f000 f90b 	bl	8001348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);

  if (HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK) {
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <main+0xcc>)
 8001134:	8819      	ldrh	r1, [r3, #0]
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <main+0xd0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2302      	movs	r3, #2
 800113e:	4a29      	ldr	r2, [pc, #164]	@ (80011e4 <main+0xd4>)
 8001140:	4829      	ldr	r0, [pc, #164]	@ (80011e8 <main+0xd8>)
 8001142:	f001 fdbb 	bl	8002cbc <HAL_I2C_Master_Transmit>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d108      	bne.n	800115e <main+0x4e>
	  string_length = snprintf(string, sizeof(string), "LIS2DE found!\n");
 800114c:	4a27      	ldr	r2, [pc, #156]	@ (80011ec <main+0xdc>)
 800114e:	2120      	movs	r1, #32
 8001150:	4827      	ldr	r0, [pc, #156]	@ (80011f0 <main+0xe0>)
 8001152:	f007 f9a3 	bl	800849c <sniprintf>
 8001156:	4603      	mov	r3, r0
 8001158:	4a26      	ldr	r2, [pc, #152]	@ (80011f4 <main+0xe4>)
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	e01d      	b.n	800119a <main+0x8a>
  }
  else {
      if (HAL_I2C_Master_Transmit(&hi2c1, MEMS12_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK) {
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <main+0xe8>)
 8001160:	8819      	ldrh	r1, [r3, #0]
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <main+0xd0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	4a1e      	ldr	r2, [pc, #120]	@ (80011e4 <main+0xd4>)
 800116c:	481e      	ldr	r0, [pc, #120]	@ (80011e8 <main+0xd8>)
 800116e:	f001 fda5 	bl	8002cbc <HAL_I2C_Master_Transmit>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <main+0x7a>
    	  string_length = snprintf(string, sizeof(string), "LIS2DE12 found!\n");
 8001178:	4a20      	ldr	r2, [pc, #128]	@ (80011fc <main+0xec>)
 800117a:	2120      	movs	r1, #32
 800117c:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <main+0xe0>)
 800117e:	f007 f98d 	bl	800849c <sniprintf>
 8001182:	4603      	mov	r3, r0
 8001184:	4a1b      	ldr	r2, [pc, #108]	@ (80011f4 <main+0xe4>)
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e007      	b.n	800119a <main+0x8a>
      }
      else {
          string_length = snprintf(string, sizeof(string), "Error! No device found!\n");
 800118a:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <main+0xf0>)
 800118c:	2120      	movs	r1, #32
 800118e:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <main+0xe0>)
 8001190:	f007 f984 	bl	800849c <sniprintf>
 8001194:	4603      	mov	r3, r0
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <main+0xe4>)
 8001198:	6013      	str	r3, [r2, #0]
      }
  }

  HAL_UART_Transmit_DMA(&huart2, string, string_length);
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <main+0xe4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4913      	ldr	r1, [pc, #76]	@ (80011f0 <main+0xe0>)
 80011a4:	4817      	ldr	r0, [pc, #92]	@ (8001204 <main+0xf4>)
 80011a6:	f005 fa37 	bl	8006618 <HAL_UART_Transmit_DMA>

  HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG2, sizeof(CTRL_REG2), timeout);
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <main+0xcc>)
 80011ac:	8819      	ldrh	r1, [r3, #0]
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <main+0xd0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <main+0xf8>)
 80011b8:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <main+0xd8>)
 80011ba:	f001 fd7f 	bl	8002cbc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG4, sizeof(CTRL_REG4), timeout);
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <main+0xcc>)
 80011c0:	8819      	ldrh	r1, [r3, #0]
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <main+0xd0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2302      	movs	r3, #2
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <main+0xfc>)
 80011cc:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <main+0xd8>)
 80011ce:	f001 fd75 	bl	8002cbc <HAL_I2C_Master_Transmit>

  HAL_TIM_Base_Start_IT(&htim2);
 80011d2:	480f      	ldr	r0, [pc, #60]	@ (8001210 <main+0x100>)
 80011d4:	f004 fde6 	bl	8005da4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <main+0xc8>
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000004 	.word	0x20000004
 80011e8:	20000208 	.word	0x20000208
 80011ec:	0800bdac 	.word	0x0800bdac
 80011f0:	2000040c 	.word	0x2000040c
 80011f4:	2000042c 	.word	0x2000042c
 80011f8:	20000002 	.word	0x20000002
 80011fc:	0800bdbc 	.word	0x0800bdbc
 8001200:	0800bdd0 	.word	0x0800bdd0
 8001204:	20000364 	.word	0x20000364
 8001208:	20000008 	.word	0x20000008
 800120c:	2000000c 	.word	0x2000000c
 8001210:	2000031c 	.word	0x2000031c

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	@ 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2230      	movs	r2, #48	@ 0x30
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f007 f9d1 	bl	80085ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <SystemClock_Config+0xd0>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	4a28      	ldr	r2, [pc, #160]	@ (80012e4 <SystemClock_Config+0xd0>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	@ 0x40
 8001248:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <SystemClock_Config+0xd0>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <SystemClock_Config+0xd4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <SystemClock_Config+0xd4>)
 8001262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <SystemClock_Config+0xd4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2300      	movs	r3, #0
 8001286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001288:	2310      	movs	r3, #16
 800128a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800128c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001292:	2304      	movs	r3, #4
 8001294:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001296:	2307      	movs	r3, #7
 8001298:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 f898 	bl	80053d4 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012aa:	f000 f963 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fafa 	bl	80058c4 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012d6:	f000 f94d 	bl	8001574 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	@ 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_I2C1_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	@ (8001340 <MX_I2C1_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_I2C1_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_I2C1_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_I2C1_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_I2C1_Init+0x50>)
 800132a:	f001 fb6d 	bl	8002a08 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f91e 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000208 	.word	0x20000208
 8001340:	40005400 	.word	0x40005400
 8001344:	000186a0 	.word	0x000186a0

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_TIM2_Init+0x98>)
 800136e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001372:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10)-1;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_TIM2_Init+0x98>)
 800137c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_TIM2_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138e:	4814      	ldr	r0, [pc, #80]	@ (80013e0 <MX_TIM2_Init+0x98>)
 8001390:	f004 fcb8 	bl	8005d04 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800139a:	f000 f8eb 	bl	8001574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_TIM2_Init+0x98>)
 80013ac:	f004 fe4c 	bl	8006048 <HAL_TIM_ConfigClockSource>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013b6:	f000 f8dd 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_TIM2_Init+0x98>)
 80013c8:	f005 f854 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013d2:	f000 f8cf 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000031c 	.word	0x2000031c

080013e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <MX_USART2_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 800141c:	f005 f8ac 	bl	8006578 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f8a5 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000364 	.word	0x20000364
 8001434:	40004400 	.word	0x40004400

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_DMA_Init+0x5c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <MX_DMA_Init+0x5c>)
 8001448:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_DMA_Init+0x5c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	200b      	movs	r0, #11
 8001460:	f000 fce1 	bl	8001e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001464:	200b      	movs	r0, #11
 8001466:	f000 fcfa 	bl	8001e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2011      	movs	r0, #17
 8001470:	f000 fcd9 	bl	8001e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001474:	2011      	movs	r0, #17
 8001476:	f000 fcf2 	bl	8001e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	202f      	movs	r0, #47	@ 0x2f
 8001480:	f000 fcd1 	bl	8001e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001484:	202f      	movs	r0, #47	@ 0x2f
 8001486:	f000 fcea 	bl	8001e5e <HAL_NVIC_EnableIRQ>

}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <MX_GPIO_Init+0xd0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <MX_GPIO_Init+0xd0>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <MX_GPIO_Init+0xd0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2120      	movs	r1, #32
 8001522:	4812      	ldr	r0, [pc, #72]	@ (800156c <MX_GPIO_Init+0xd4>)
 8001524:	f001 fa56 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800152e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	480c      	ldr	r0, [pc, #48]	@ (8001570 <MX_GPIO_Init+0xd8>)
 8001540:	f001 f8c4 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001544:	2320      	movs	r3, #32
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_GPIO_Init+0xd4>)
 800155c:	f001 f8b6 	bl	80026cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	@ 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020800 	.word	0x40020800

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6453      	str	r3, [r2, #68]	@ 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015be:	2007      	movs	r0, #7
 80015c0:	f000 fc26 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a50      	ldr	r2, [pc, #320]	@ (8001730 <HAL_I2C_MspInit+0x160>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 8099 	bne.w	8001726 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	6313      	str	r3, [r2, #48]	@ 0x30
 8001604:	4b4b      	ldr	r3, [pc, #300]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001610:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001622:	2304      	movs	r3, #4
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4842      	ldr	r0, [pc, #264]	@ (8001738 <HAL_I2C_MspInit+0x168>)
 800162e:	f001 f84d 	bl	80026cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 800163c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b3c      	ldr	r3, [pc, #240]	@ (8001734 <HAL_I2C_MspInit+0x164>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001650:	4a3b      	ldr	r2, [pc, #236]	@ (8001740 <HAL_I2C_MspInit+0x170>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001656:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800165a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165c:	4b37      	ldr	r3, [pc, #220]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b34      	ldr	r3, [pc, #208]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800166a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800166e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800167c:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001688:	4b2c      	ldr	r3, [pc, #176]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800168e:	482b      	ldr	r0, [pc, #172]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 8001690:	f000 fc00 	bl	8001e94 <HAL_DMA_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800169a:	f7ff ff6b 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 80016a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80016a4:	4a25      	ldr	r2, [pc, #148]	@ (800173c <HAL_I2C_MspInit+0x16c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <HAL_I2C_MspInit+0x178>)
 80016ae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ba:	2240      	movs	r2, #64	@ 0x40
 80016bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016ea:	4816      	ldr	r0, [pc, #88]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016ec:	f000 fbd2 	bl	8001e94 <HAL_DMA_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80016f6:	f7ff ff3d 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 80016fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001700:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_I2C_MspInit+0x174>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201f      	movs	r0, #31
 800170c:	f000 fb8b 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001710:	201f      	movs	r0, #31
 8001712:	f000 fba4 	bl	8001e5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2020      	movs	r0, #32
 800171c:	f000 fb83 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001720:	2020      	movs	r0, #32
 8001722:	f000 fb9c 	bl	8001e5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40005400 	.word	0x40005400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400
 800173c:	2000025c 	.word	0x2000025c
 8001740:	40026010 	.word	0x40026010
 8001744:	200002bc 	.word	0x200002bc
 8001748:	400260b8 	.word	0x400260b8

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800175c:	d115      	bne.n	800178a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_TIM_Base_MspInit+0x48>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_TIM_Base_MspInit+0x48>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_TIM_Base_MspInit+0x48>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201c      	movs	r0, #28
 8001780:	f000 fb51 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001784:	201c      	movs	r0, #28
 8001786:	f000 fb6a 	bl	8001e5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a34      	ldr	r2, [pc, #208]	@ (8001888 <HAL_UART_MspInit+0xf0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d161      	bne.n	800187e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b33      	ldr	r3, [pc, #204]	@ (800188c <HAL_UART_MspInit+0xf4>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	4a32      	ldr	r2, [pc, #200]	@ (800188c <HAL_UART_MspInit+0xf4>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ca:	4b30      	ldr	r3, [pc, #192]	@ (800188c <HAL_UART_MspInit+0xf4>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <HAL_UART_MspInit+0xf4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a2b      	ldr	r2, [pc, #172]	@ (800188c <HAL_UART_MspInit+0xf4>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <HAL_UART_MspInit+0xf4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017f2:	230c      	movs	r3, #12
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001802:	2307      	movs	r3, #7
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4820      	ldr	r0, [pc, #128]	@ (8001890 <HAL_UART_MspInit+0xf8>)
 800180e:	f000 ff5d 	bl	80026cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001814:	4a20      	ldr	r2, [pc, #128]	@ (8001898 <HAL_UART_MspInit+0x100>)
 8001816:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001818:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 800181a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800181e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 800182e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001832:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001852:	4810      	ldr	r0, [pc, #64]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001854:	f000 fb1e 	bl	8001e94 <HAL_DMA_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800185e:	f7ff fe89 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a0b      	ldr	r2, [pc, #44]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 8001866:	639a      	str	r2, [r3, #56]	@ 0x38
 8001868:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <HAL_UART_MspInit+0xfc>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2026      	movs	r0, #38	@ 0x26
 8001874:	f000 fad7 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001878:	2026      	movs	r0, #38	@ 0x26
 800187a:	f000 faf0 	bl	8001e5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40004400 	.word	0x40004400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	200003ac 	.word	0x200003ac
 8001898:	400260a0 	.word	0x400260a0

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <NMI_Handler+0x4>

080018a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <MemManage_Handler+0x4>

080018b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 f99d 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <DMA1_Stream0_IRQHandler+0x10>)
 8001902:	f000 fc5f 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000025c 	.word	0x2000025c

08001910 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <DMA1_Stream6_IRQHandler+0x10>)
 8001916:	f000 fc55 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200003ac 	.word	0x200003ac

08001924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <TIM2_IRQHandler+0x10>)
 800192a:	f004 fa9d 	bl	8005e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000031c 	.word	0x2000031c

08001938 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <I2C1_EV_IRQHandler+0x10>)
 800193e:	f001 fd13 	bl	8003368 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000208 	.word	0x20000208

0800194c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <I2C1_ER_IRQHandler+0x10>)
 8001952:	f001 fe5c 	bl	800360e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000208 	.word	0x20000208

08001960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <USART2_IRQHandler+0x10>)
 8001966:	f004 fec7 	bl	80066f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000364 	.word	0x20000364

08001974 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA1_Stream7_IRQHandler+0x10>)
 800197a:	f000 fc23 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002bc 	.word	0x200002bc

08001988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_kill>:

int _kill(int pid, int sig)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a2:	f006 fe65 	bl	8008670 <__errno>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2216      	movs	r2, #22
 80019aa:	601a      	str	r2, [r3, #0]
  return -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_exit>:

void _exit (int status)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ffe7 	bl	8001998 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ca:	bf00      	nop
 80019cc:	e7fd      	b.n	80019ca <_exit+0x12>

080019ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e00a      	b.n	80019f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e0:	f3af 8000 	nop.w
 80019e4:	4601      	mov	r1, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	60ba      	str	r2, [r7, #8]
 80019ec:	b2ca      	uxtb	r2, r1
 80019ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dbf0      	blt.n	80019e0 <_read+0x12>
  }

  return len;
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e009      	b.n	8001a2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	60ba      	str	r2, [r7, #8]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf1      	blt.n	8001a1a <_write+0x12>
  }
  return len;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_close>:

int _close(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a68:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_isatty>:

int _isatty(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f006 fdca 	bl	8008670 <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20018000 	.word	0x20018000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	20000434 	.word	0x20000434
 8001b10:	20000588 	.word	0x20000588

08001b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b3c:	f7ff ffea 	bl	8001b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	@ (8001b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	@ (8001b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	@ (8001b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f006 fd89 	bl	800867c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6a:	f7ff fad1 	bl	8001110 <main>
  bx  lr    
 8001b6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001b7c:	0800c248 	.word	0x0800c248
  ldr r2, =_sbss
 8001b80:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001b84:	20000588 	.word	0x20000588

08001b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <HAL_Init+0x40>)
 8001b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <HAL_Init+0x40>)
 8001ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	@ (8001bcc <HAL_Init+0x40>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f92b 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fcde 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f943 	bl	8001e7a <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 f90b 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	@ (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000018 	.word	0x20000018
 8001c28:	20000020 	.word	0x20000020
 8001c2c:	2000001c 	.word	0x2000001c

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	@ (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000020 	.word	0x20000020
 8001c54:	20000438 	.word	0x20000438

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000438 	.word	0x20000438

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4907      	ldr	r1, [pc, #28]	@ (8001d0c <__NVIC_EnableIRQ+0x38>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff29 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff3e 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff31 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffa2 	bl	8001dcc <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff feda 	bl	8001c58 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e099      	b.n	8001fe4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed0:	e00f      	b.n	8001ef2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed2:	f7ff fec1 	bl	8001c58 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d908      	bls.n	8001ef2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e078      	b.n	8001fe4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e8      	bne.n	8001ed2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	4b38      	ldr	r3, [pc, #224]	@ (8001fec <HAL_DMA_Init+0x158>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d107      	bne.n	8001f5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	4313      	orrs	r3, r2
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f023 0307 	bic.w	r3, r3, #7
 8001f72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d117      	bne.n	8001fb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00e      	beq.n	8001fb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fb1b 	bl	80025d4 <DMA_CheckFifoParam>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e016      	b.n	8001fe4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fad2 	bl	8002568 <DMA_CalcBaseAndBitshift>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	223f      	movs	r2, #63	@ 0x3f
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	f010803f 	.word	0xf010803f

08001ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_DMA_Start_IT+0x26>
 8002012:	2302      	movs	r3, #2
 8002014:	e040      	b.n	8002098 <HAL_DMA_Start_IT+0xa8>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d12f      	bne.n	800208a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fa64 	bl	800250c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	223f      	movs	r2, #63	@ 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0216 	orr.w	r2, r2, #22
 800205e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0208 	orr.w	r2, r2, #8
 8002076:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e005      	b.n	8002096 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020ae:	f7ff fdd3 	bl	8001c58 <HAL_GetTick>
 80020b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d008      	beq.n	80020d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2280      	movs	r2, #128	@ 0x80
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e052      	b.n	8002178 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0216 	bic.w	r2, r2, #22
 80020e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <HAL_DMA_Abort+0x62>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0208 	bic.w	r2, r2, #8
 8002110:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002122:	e013      	b.n	800214c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002124:	f7ff fd98 	bl	8001c58 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b05      	cmp	r3, #5
 8002130:	d90c      	bls.n	800214c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e015      	b.n	8002178 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e4      	bne.n	8002124 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	223f      	movs	r2, #63	@ 0x3f
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00c      	b.n	80021b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2205      	movs	r2, #5
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021d0:	4b8e      	ldr	r3, [pc, #568]	@ (800240c <HAL_DMA_IRQHandler+0x248>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002410 <HAL_DMA_IRQHandler+0x24c>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0a9b      	lsrs	r3, r3, #10
 80021dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	2208      	movs	r2, #8
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01a      	beq.n	8002230 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0204 	bic.w	r2, r2, #4
 8002216:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	2208      	movs	r2, #8
 800221e:	409a      	lsls	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	2201      	movs	r2, #1
 8002236:	409a      	lsls	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	2201      	movs	r2, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f043 0202 	orr.w	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	2204      	movs	r2, #4
 800226c:	409a      	lsls	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002288:	2204      	movs	r2, #4
 800228a:	409a      	lsls	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002294:	f043 0204 	orr.w	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a0:	2210      	movs	r2, #16
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d043      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03c      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	2210      	movs	r2, #16
 80022c0:	409a      	lsls	r2, r3
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d018      	beq.n	8002306 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d024      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
 80022f2:	e01f      	b.n	8002334 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01b      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
 8002304:	e016      	b.n	8002334 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0208 	bic.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	2220      	movs	r2, #32
 800233a:	409a      	lsls	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 808f 	beq.w	8002464 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8087 	beq.w	8002464 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	2220      	movs	r2, #32
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b05      	cmp	r3, #5
 800236c:	d136      	bne.n	80023dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0216 	bic.w	r2, r2, #22
 800237c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800238c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_DMA_IRQHandler+0x1da>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0208 	bic.w	r2, r2, #8
 80023ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b2:	223f      	movs	r2, #63	@ 0x3f
 80023b4:	409a      	lsls	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d07e      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
        }
        return;
 80023da:	e079      	b.n	80024d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01d      	beq.n	8002426 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d031      	beq.n	8002464 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
 8002408:	e02c      	b.n	8002464 <HAL_DMA_IRQHandler+0x2a0>
 800240a:	bf00      	nop
 800240c:	20000018 	.word	0x20000018
 8002410:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d023      	beq.n	8002464 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
 8002424:	e01e      	b.n	8002464 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10f      	bne.n	8002454 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0210 	bic.w	r2, r2, #16
 8002442:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002468:	2b00      	cmp	r3, #0
 800246a:	d032      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d022      	beq.n	80024be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2205      	movs	r2, #5
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	3301      	adds	r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	d307      	bcc.n	80024ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f2      	bne.n	8002490 <HAL_DMA_IRQHandler+0x2cc>
 80024aa:	e000      	b.n	80024ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
 80024ce:	e000      	b.n	80024d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024d0:	bf00      	nop
    }
  }
}
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002528:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b40      	cmp	r3, #64	@ 0x40
 8002538:	d108      	bne.n	800254c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800254a:	e007      	b.n	800255c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3b10      	subs	r3, #16
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <DMA_CalcBaseAndBitshift+0x64>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002582:	4a13      	ldr	r2, [pc, #76]	@ (80025d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d909      	bls.n	80025aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800259e:	f023 0303 	bic.w	r3, r3, #3
 80025a2:	1d1a      	adds	r2, r3, #4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80025a8:	e007      	b.n	80025ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	aaaaaaab 	.word	0xaaaaaaab
 80025d0:	0800be04 	.word	0x0800be04

080025d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11f      	bne.n	800262e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d856      	bhi.n	80026a2 <DMA_CheckFifoParam+0xce>
 80025f4:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <DMA_CheckFifoParam+0x28>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	0800261f 	.word	0x0800261f
 8002604:	0800260d 	.word	0x0800260d
 8002608:	080026a3 	.word	0x080026a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d046      	beq.n	80026a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261c:	e043      	b.n	80026a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002626:	d140      	bne.n	80026aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262c:	e03d      	b.n	80026aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002636:	d121      	bne.n	800267c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d837      	bhi.n	80026ae <DMA_CheckFifoParam+0xda>
 800263e:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <DMA_CheckFifoParam+0x70>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002655 	.word	0x08002655
 8002648:	0800265b 	.word	0x0800265b
 800264c:	08002655 	.word	0x08002655
 8002650:	0800266d 	.word	0x0800266d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e030      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d025      	beq.n	80026b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266a:	e022      	b.n	80026b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002674:	d11f      	bne.n	80026b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800267a:	e01c      	b.n	80026b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d903      	bls.n	800268a <DMA_CheckFifoParam+0xb6>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d003      	beq.n	8002690 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002688:	e018      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
      break;
 800268e:	e015      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00e      	beq.n	80026ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e00b      	b.n	80026ba <DMA_CheckFifoParam+0xe6>
      break;
 80026a2:	bf00      	nop
 80026a4:	e00a      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026a6:	bf00      	nop
 80026a8:	e008      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e006      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e004      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e002      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;   
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
    }
  } 
  
  return status; 
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e159      	b.n	800299c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8148 	bne.w	8002996 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a2 	beq.w	8002996 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_GPIO_Init+0x2e8>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002860:	6453      	str	r3, [r2, #68]	@ 0x44
 8002862:	4b54      	ldr	r3, [pc, #336]	@ (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286e:	4a52      	ldr	r2, [pc, #328]	@ (80029b8 <HAL_GPIO_Init+0x2ec>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a49      	ldr	r2, [pc, #292]	@ (80029bc <HAL_GPIO_Init+0x2f0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0x202>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a48      	ldr	r2, [pc, #288]	@ (80029c0 <HAL_GPIO_Init+0x2f4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0x1fe>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a47      	ldr	r2, [pc, #284]	@ (80029c4 <HAL_GPIO_Init+0x2f8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <HAL_GPIO_Init+0x2fc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a45      	ldr	r2, [pc, #276]	@ (80029cc <HAL_GPIO_Init+0x300>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x1f2>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028be:	2307      	movs	r3, #7
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4935      	ldr	r1, [pc, #212]	@ (80029b8 <HAL_GPIO_Init+0x2ec>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a2f      	ldr	r2, [pc, #188]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a24      	ldr	r2, [pc, #144]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002990:	4a0f      	ldr	r2, [pc, #60]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f aea2 	bls.w	80026e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e12b      	b.n	8002c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fdce 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	@ 0x24
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a6c:	f003 f922 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8002a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a81      	ldr	r2, [pc, #516]	@ (8002c7c <HAL_I2C_Init+0x274>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d807      	bhi.n	8002a8c <HAL_I2C_Init+0x84>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a80      	ldr	r2, [pc, #512]	@ (8002c80 <HAL_I2C_Init+0x278>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bf94      	ite	ls
 8002a84:	2301      	movls	r3, #1
 8002a86:	2300      	movhi	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e006      	b.n	8002a9a <HAL_I2C_Init+0x92>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c84 <HAL_I2C_Init+0x27c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bf94      	ite	ls
 8002a94:	2301      	movls	r3, #1
 8002a96:	2300      	movhi	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0e7      	b.n	8002c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a78      	ldr	r2, [pc, #480]	@ (8002c88 <HAL_I2C_Init+0x280>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9b      	lsrs	r3, r3, #18
 8002aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c7c <HAL_I2C_Init+0x274>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d802      	bhi.n	8002adc <HAL_I2C_Init+0xd4>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	e009      	b.n	8002af0 <HAL_I2C_Init+0xe8>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	4a69      	ldr	r2, [pc, #420]	@ (8002c8c <HAL_I2C_Init+0x284>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	3301      	adds	r3, #1
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	495c      	ldr	r1, [pc, #368]	@ (8002c7c <HAL_I2C_Init+0x274>)
 8002b0c:	428b      	cmp	r3, r1
 8002b0e:	d819      	bhi.n	8002b44 <HAL_I2C_Init+0x13c>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e59      	subs	r1, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b24:	400b      	ands	r3, r1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_I2C_Init+0x138>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e59      	subs	r1, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	e051      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e04f      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d111      	bne.n	8002b70 <HAL_I2C_Init+0x168>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e012      	b.n	8002b96 <HAL_I2C_Init+0x18e>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	0099      	lsls	r1, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Init+0x196>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e022      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_I2C_Init+0x1bc>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1e58      	subs	r0, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	440b      	add	r3, r1
 8002bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	0099      	lsls	r1, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	6809      	ldr	r1, [r1, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6911      	ldr	r1, [r2, #16]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	000186a0 	.word	0x000186a0
 8002c80:	001e847f 	.word	0x001e847f
 8002c84:	003d08ff 	.word	0x003d08ff
 8002c88:	431bde83 	.word	0x431bde83
 8002c8c:	10624dd3 	.word	0x10624dd3

08002c90 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b80      	cmp	r3, #128	@ 0x80
 8002ca4:	d103      	bne.n	8002cae <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7fe ffc2 	bl	8001c58 <HAL_GetTick>
 8002cd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	f040 80e0 	bne.w	8002ea4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2319      	movs	r3, #25
 8002cea:	2201      	movs	r2, #1
 8002cec:	4970      	ldr	r1, [pc, #448]	@ (8002eb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f002 f94a 	bl	8004f88 <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0d3      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_I2C_Master_Transmit+0x50>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d007      	beq.n	8002d32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2221      	movs	r2, #33	@ 0x21
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	893a      	ldrh	r2, [r7, #8]
 8002d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a50      	ldr	r2, [pc, #320]	@ (8002eb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f001 febe 	bl	8004afc <I2C_MasterRequestWrite>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e08d      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002da0:	e066      	b.n	8002e70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f002 fa08 	bl	80051bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d11b      	bne.n	8002e44 <HAL_I2C_Master_Transmit+0x188>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d017      	beq.n	8002e44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	6a39      	ldr	r1, [r7, #32]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f002 f9ff 	bl	800524c <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d107      	bne.n	8002e6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e01a      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d194      	bne.n	8002da2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	00100002 	.word	0x00100002
 8002eb4:	ffff0000 	.word	0xffff0000

08002eb8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	f040 8109 	bne.w	80030f0 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ede:	4b87      	ldr	r3, [pc, #540]	@ (80030fc <HAL_I2C_Master_Transmit_DMA+0x244>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	08db      	lsrs	r3, r3, #3
 8002ee4:	4a86      	ldr	r2, [pc, #536]	@ (8003100 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0a1a      	lsrs	r2, r3, #8
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009a      	lsls	r2, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d112      	bne.n	8002f2a <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0e3      	b.n	80030f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d0df      	beq.n	8002ef8 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Master_Transmit_DMA+0x8e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0d5      	b.n	80030f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d007      	beq.n	8002f6c <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2221      	movs	r2, #33	@ 0x21
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2210      	movs	r2, #16
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	893a      	ldrh	r2, [r7, #8]
 8002f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a56      	ldr	r2, [pc, #344]	@ (8003104 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002fac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002fae:	897a      	ldrh	r2, [r7, #10]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d07b      	beq.n	80030b4 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d02a      	beq.n	800301a <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8003108 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8002fca:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd0:	4a4e      	ldr	r2, [pc, #312]	@ (800310c <HAL_I2C_Master_Transmit_DMA+0x254>)
 8002fd2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe8:	2200      	movs	r2, #0
 8002fea:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3310      	adds	r3, #16
 8003004:	461a      	mov	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	f7fe fff1 	bl	8001ff0 <HAL_DMA_Start_IT>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d139      	bne.n	800308c <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8003018:	e013      	b.n	8003042 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e057      	b.n	80030f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003058:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003068:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003078:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e02f      	b.n	80030ec <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	f043 0210 	orr.w	r2, r3, #16
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e01e      	b.n	80030f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030c2:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030d2:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80030ea:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000018 	.word	0x20000018
 8003100:	14f8b589 	.word	0x14f8b589
 8003104:	ffff0000 	.word	0xffff0000
 8003108:	08004c01 	.word	0x08004c01
 800310c:	08004dbf 	.word	0x08004dbf

08003110 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	461a      	mov	r2, r3
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
 8003120:	4613      	mov	r3, r2
 8003122:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b20      	cmp	r3, #32
 8003132:	f040 8109 	bne.w	8003348 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003136:	4b87      	ldr	r3, [pc, #540]	@ (8003354 <HAL_I2C_Master_Receive_DMA+0x244>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	4a86      	ldr	r2, [pc, #536]	@ (8003358 <HAL_I2C_Master_Receive_DMA+0x248>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a1a      	lsrs	r2, r3, #8
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009a      	lsls	r2, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	3b01      	subs	r3, #1
 8003154:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d112      	bne.n	8003182 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	e0e3      	b.n	800334a <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d0df      	beq.n	8003150 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_I2C_Master_Receive_DMA+0x8e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0d5      	b.n	800334a <HAL_I2C_Master_Receive_DMA+0x23a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d007      	beq.n	80031c4 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2222      	movs	r2, #34	@ 0x22
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2210      	movs	r2, #16
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	893a      	ldrh	r2, [r7, #8]
 80031f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a56      	ldr	r2, [pc, #344]	@ (800335c <HAL_I2C_Master_Receive_DMA+0x24c>)
 8003204:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003206:	897a      	ldrh	r2, [r7, #10]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d07b      	beq.n	800330c <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	2b00      	cmp	r3, #0
 800321a:	d02a      	beq.n	8003272 <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	4a4f      	ldr	r2, [pc, #316]	@ (8003360 <HAL_I2C_Master_Receive_DMA+0x250>)
 8003222:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <HAL_I2C_Master_Receive_DMA+0x254>)
 800322a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	2200      	movs	r2, #0
 8003242:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	2200      	movs	r2, #0
 800324a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3310      	adds	r3, #16
 8003256:	4619      	mov	r1, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	461a      	mov	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003262:	f7fe fec5 	bl	8001ff0 <HAL_DMA_Start_IT>
 8003266:	4603      	mov	r3, r0
 8003268:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d139      	bne.n	80032e4 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8003270:	e013      	b.n	800329a <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e057      	b.n	800334a <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032a8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80032d0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e02f      	b.n	8003344 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0210 	orr.w	r2, r3, #16
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e01e      	b.n	800334a <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003322:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003332:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003342:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000018 	.word	0x20000018
 8003358:	14f8b589 	.word	0x14f8b589
 800335c:	ffff0000 	.word	0xffff0000
 8003360:	08004c01 	.word	0x08004c01
 8003364:	08004dbf 	.word	0x08004dbf

08003368 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003388:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003390:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b10      	cmp	r3, #16
 8003396:	d003      	beq.n	80033a0 <HAL_I2C_EV_IRQHandler+0x38>
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	f040 80b1 	bne.w	8003502 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80033c0:	d003      	beq.n	80033ca <HAL_I2C_EV_IRQHandler+0x62>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_EV_IRQHandler+0x66>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_I2C_EV_IRQHandler+0x68>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f000 8114 	beq.w	80035fe <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x90>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 ffd7 	bl	800539e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fd66 	bl	8003ec2 <I2C_Master_SB>
 80033f6:	e083      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_I2C_EV_IRQHandler+0xac>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fdde 	bl	8003fce <I2C_Master_ADD10>
 8003412:	e075      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0xc8>
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fdfa 	bl	8004022 <I2C_Master_ADDR>
 800342e:	e067      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d036      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003448:	f000 80db 	beq.w	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_I2C_EV_IRQHandler+0x10a>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_I2C_EV_IRQHandler+0x10a>
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f9c2 	bl	80037f4 <I2C_MasterTransmit_TXE>
 8003470:	e046      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80c2 	beq.w	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80bc 	beq.w	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	2b21      	cmp	r3, #33	@ 0x21
 800348e:	d103      	bne.n	8003498 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fa4b 	bl	800392c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003496:	e0b4      	b.n	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	f040 80b1 	bne.w	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fab9 	bl	8003a18 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a6:	e0ac      	b.n	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b6:	f000 80a4 	beq.w	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <HAL_I2C_EV_IRQHandler+0x178>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_I2C_EV_IRQHandler+0x178>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fb35 	bl	8003b48 <I2C_MasterReceive_RXNE>
 80034de:	e00f      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 808b 	beq.w	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8085 	beq.w	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fbed 	bl	8003cd8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fe:	e080      	b.n	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
 8003500:	e07f      	b.n	8003602 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e007      	b.n	8003524 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <HAL_I2C_EV_IRQHandler+0x1ea>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00c      	beq.n	8003552 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003548:	69b9      	ldr	r1, [r7, #24]
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 ffb8 	bl	80044c0 <I2C_Slave_ADDR>
 8003550:	e05a      	b.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_I2C_EV_IRQHandler+0x206>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fff2 	bl	8004550 <I2C_Slave_STOPF>
 800356c:	e04c      	b.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800356e:	7bbb      	ldrb	r3, [r7, #14]
 8003570:	2b21      	cmp	r3, #33	@ 0x21
 8003572:	d002      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x212>
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	2b29      	cmp	r3, #41	@ 0x29
 8003578:	d120      	bne.n	80035bc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x238>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_I2C_EV_IRQHandler+0x238>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d103      	bne.n	80035a0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fed3 	bl	8004344 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800359e:	e032      	b.n	8003606 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02d      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x29e>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d028      	beq.n	8003606 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 ff02 	bl	80043be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ba:	e024      	b.n	8003606 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0x27a>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0x27a>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 ff10 	bl	8004400 <I2C_SlaveReceive_RXNE>
 80035e0:	e012      	b.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 ff40 	bl	800447c <I2C_SlaveReceive_BTF>
 80035fc:	e004      	b.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003606:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08a      	sub	sp, #40	@ 0x28
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003630:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <HAL_I2C_ER_IRQHandler+0x4a>
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003656:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00d      	beq.n	800367e <HAL_I2C_ER_IRQHandler+0x70>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800367c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d03e      	beq.n	8003706 <HAL_I2C_ER_IRQHandler+0xf8>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d039      	beq.n	8003706 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003692:	7efb      	ldrb	r3, [r7, #27]
 8003694:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80036ac:	7ebb      	ldrb	r3, [r7, #26]
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d112      	bne.n	80036d8 <HAL_I2C_ER_IRQHandler+0xca>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10f      	bne.n	80036d8 <HAL_I2C_ER_IRQHandler+0xca>
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	2b21      	cmp	r3, #33	@ 0x21
 80036bc:	d008      	beq.n	80036d0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b29      	cmp	r3, #41	@ 0x29
 80036c2:	d005      	beq.n	80036d0 <HAL_I2C_ER_IRQHandler+0xc2>
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	2b28      	cmp	r3, #40	@ 0x28
 80036c8:	d106      	bne.n	80036d8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b21      	cmp	r3, #33	@ 0x21
 80036ce:	d103      	bne.n	80036d8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 f86d 	bl	80047b0 <I2C_Slave_AF>
 80036d6:	e016      	b.n	8003706 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036ea:	7efb      	ldrb	r3, [r7, #27]
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d002      	beq.n	80036f6 <HAL_I2C_ER_IRQHandler+0xe8>
 80036f0:	7efb      	ldrb	r3, [r7, #27]
 80036f2:	2b40      	cmp	r3, #64	@ 0x40
 80036f4:	d107      	bne.n	8003706 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003704:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <HAL_I2C_ER_IRQHandler+0x11e>
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800372a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f001 f8aa 	bl	8004898 <I2C_ITError>
  }
}
 8003744:	bf00      	nop
 8003746:	3728      	adds	r7, #40	@ 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
 8003780:	4613      	mov	r3, r2
 8003782:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800380a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d150      	bne.n	80038bc <I2C_MasterTransmit_TXE+0xc8>
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b21      	cmp	r3, #33	@ 0x21
 800381e:	d14d      	bne.n	80038bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d01d      	beq.n	8003862 <I2C_MasterTransmit_TXE+0x6e>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b20      	cmp	r3, #32
 800382a:	d01a      	beq.n	8003862 <I2C_MasterTransmit_TXE+0x6e>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003832:	d016      	beq.n	8003862 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003842:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2211      	movs	r2, #17
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd fbe8 	bl	8001030 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003860:	e060      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003870:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003880:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	d107      	bne.n	80038ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff7d 	bl	80037a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038aa:	e03b      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fd fbbb 	bl	8001030 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038ba:	e033      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b21      	cmp	r3, #33	@ 0x21
 80038c0:	d005      	beq.n	80038ce <I2C_MasterTransmit_TXE+0xda>
 80038c2:	7bbb      	ldrb	r3, [r7, #14]
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	d12d      	bne.n	8003924 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b22      	cmp	r3, #34	@ 0x22
 80038cc:	d12a      	bne.n	8003924 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038e8:	e01c      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b40      	cmp	r3, #64	@ 0x40
 80038f4:	d103      	bne.n	80038fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f88e 	bl	8003a18 <I2C_MemoryTransmit_TXE_BTF>
}
 80038fc:	e012      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003922:	e7ff      	b.n	8003924 <I2C_MasterTransmit_TXE+0x130>
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b21      	cmp	r3, #33	@ 0x21
 8003944:	d164      	bne.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003974:	e04c      	b.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d01d      	beq.n	80039b8 <I2C_MasterTransmit_BTF+0x8c>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b20      	cmp	r3, #32
 8003980:	d01a      	beq.n	80039b8 <I2C_MasterTransmit_BTF+0x8c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003988:	d016      	beq.n	80039b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003998:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2211      	movs	r2, #17
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fd fb3d 	bl	8001030 <HAL_I2C_MasterTxCpltCallback>
}
 80039b6:	e02b      	b.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b40      	cmp	r3, #64	@ 0x40
 80039f0:	d107      	bne.n	8003a02 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fed2 	bl	80037a4 <HAL_I2C_MemTxCpltCallback>
}
 8003a00:	e006      	b.n	8003a10 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fb10 	bl	8001030 <HAL_I2C_MasterTxCpltCallback>
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11d      	bne.n	8003a6c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d10b      	bne.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003a4e:	e077      	b.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	121b      	asrs	r3, r3, #8
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a6a:	e069      	b.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10b      	bne.n	8003a8c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a8a:	e059      	b.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d152      	bne.n	8003b3a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b22      	cmp	r3, #34	@ 0x22
 8003a98:	d10d      	bne.n	8003ab6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ab4:	e044      	b.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b21      	cmp	r3, #33	@ 0x21
 8003ac4:	d112      	bne.n	8003aec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003aea:	e029      	b.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d124      	bne.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b21      	cmp	r3, #33	@ 0x21
 8003afa:	d121      	bne.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b0a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fe36 	bl	80037a4 <HAL_I2C_MemTxCpltCallback>
}
 8003b38:	e002      	b.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff f8a8 	bl	8002c90 <I2C_Flush_DR>
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b22      	cmp	r3, #34	@ 0x22
 8003b5a:	f040 80b9 	bne.w	8003cd0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d921      	bls.n	8003bb6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	f040 8096 	bne.w	8003cd0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003bb4:	e08c      	b.n	8003cd0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d07f      	beq.n	8003cbe <I2C_MasterReceive_RXNE+0x176>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d002      	beq.n	8003bca <I2C_MasterReceive_RXNE+0x82>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d179      	bne.n	8003cbe <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f001 fb86 	bl	80052dc <I2C_WaitOnSTOPRequestThroughIT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d14c      	bne.n	8003c70 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bf4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b40      	cmp	r3, #64	@ 0x40
 8003c2e:	d10a      	bne.n	8003c46 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fdba 	bl	80037b8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c44:	e044      	b.n	8003cd0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d002      	beq.n	8003c5a <I2C_MasterReceive_RXNE+0x112>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d103      	bne.n	8003c62 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c60:	e002      	b.n	8003c68 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2212      	movs	r2, #18
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7fd fa01 	bl	8001070 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c6e:	e02f      	b.n	8003cd0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fd88 	bl	80037cc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cbc:	e008      	b.n	8003cd0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ccc:	605a      	str	r2, [r3, #4]
}
 8003cce:	e7ff      	b.n	8003cd0 <I2C_MasterReceive_RXNE+0x188>
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d11b      	bne.n	8003d28 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d26:	e0c8      	b.n	8003eba <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d129      	bne.n	8003d86 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d00a      	beq.n	8003d5e <I2C_MasterReceive_BTF+0x86>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d007      	beq.n	8003d5e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d84:	e099      	b.n	8003eba <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f040 8081 	bne.w	8003e94 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d002      	beq.n	8003d9e <I2C_MasterReceive_BTF+0xc6>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	d108      	bne.n	8003db0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e019      	b.n	8003de4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d002      	beq.n	8003dbc <I2C_MasterReceive_BTF+0xe4>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d108      	bne.n	8003dce <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e00a      	b.n	8003de4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d007      	beq.n	8003de4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b40      	cmp	r3, #64	@ 0x40
 8003e52:	d10a      	bne.n	8003e6a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fca8 	bl	80037b8 <HAL_I2C_MemRxCpltCallback>
}
 8003e68:	e027      	b.n	8003eba <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d002      	beq.n	8003e7e <I2C_MasterReceive_BTF+0x1a6>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	d103      	bne.n	8003e86 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e84:	e002      	b.n	8003e8c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2212      	movs	r2, #18
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fd f8ef 	bl	8001070 <HAL_I2C_MasterRxCpltCallback>
}
 8003e92:	e012      	b.n	8003eba <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d117      	bne.n	8003f06 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003eee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ef0:	e067      	b.n	8003fc2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]
}
 8003f04:	e05d      	b.n	8003fc2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f0e:	d133      	bne.n	8003f78 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b21      	cmp	r3, #33	@ 0x21
 8003f1a:	d109      	bne.n	8003f30 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f2c:	611a      	str	r2, [r3, #16]
 8003f2e:	e008      	b.n	8003f42 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <I2C_Master_SB+0x92>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d108      	bne.n	8003f66 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d032      	beq.n	8003fc2 <I2C_Master_SB+0x100>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d02d      	beq.n	8003fc2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f74:	605a      	str	r2, [r3, #4]
}
 8003f76:	e024      	b.n	8003fc2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10e      	bne.n	8003f9e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	11db      	asrs	r3, r3, #7
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f003 0306 	and.w	r3, r3, #6
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f063 030f 	orn	r3, r3, #15
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]
}
 8003f9c:	e011      	b.n	8003fc2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10d      	bne.n	8003fc2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	11db      	asrs	r3, r3, #7
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0306 	and.w	r3, r3, #6
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f063 030e 	orn	r3, r3, #14
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <I2C_Master_ADD10+0x26>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <I2C_Master_ADD10+0x48>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004014:	605a      	str	r2, [r3, #4]
  }
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004022:	b480      	push	{r7}
 8004024:	b091      	sub	sp, #68	@ 0x44
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004030:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b22      	cmp	r3, #34	@ 0x22
 800404a:	f040 8169 	bne.w	8004320 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <I2C_Master_ADDR+0x54>
 8004056:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	d10b      	bne.n	8004076 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	633b      	str	r3, [r7, #48]	@ 0x30
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	633b      	str	r3, [r7, #48]	@ 0x30
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	633b      	str	r3, [r7, #48]	@ 0x30
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	e160      	b.n	8004338 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11d      	bne.n	80040ba <I2C_Master_ADDR+0x98>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004086:	d118      	bne.n	80040ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80040b8:	e13e      	b.n	8004338 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d113      	bne.n	80040ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c4:	2300      	movs	r3, #0
 80040c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e115      	b.n	8004318 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	f040 808a 	bne.w	800420c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040fe:	d137      	bne.n	8004170 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800411e:	d113      	bne.n	8004148 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800412e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004130:	2300      	movs	r3, #0
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	e0e7      	b.n	8004318 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e0d3      	b.n	8004318 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	2b08      	cmp	r3, #8
 8004174:	d02e      	beq.n	80041d4 <I2C_Master_ADDR+0x1b2>
 8004176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004178:	2b20      	cmp	r3, #32
 800417a:	d02b      	beq.n	80041d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417e:	2b12      	cmp	r3, #18
 8004180:	d102      	bne.n	8004188 <I2C_Master_ADDR+0x166>
 8004182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004184:	2b01      	cmp	r3, #1
 8004186:	d125      	bne.n	80041d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	2b04      	cmp	r3, #4
 800418c:	d00e      	beq.n	80041ac <I2C_Master_ADDR+0x18a>
 800418e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004190:	2b02      	cmp	r3, #2
 8004192:	d00b      	beq.n	80041ac <I2C_Master_ADDR+0x18a>
 8004194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004196:	2b10      	cmp	r3, #16
 8004198:	d008      	beq.n	80041ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e007      	b.n	80041bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	e0a1      	b.n	8004318 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e4:	2300      	movs	r3, #0
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e085      	b.n	8004318 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d14d      	bne.n	80042b2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004218:	2b04      	cmp	r3, #4
 800421a:	d016      	beq.n	800424a <I2C_Master_ADDR+0x228>
 800421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421e:	2b02      	cmp	r3, #2
 8004220:	d013      	beq.n	800424a <I2C_Master_ADDR+0x228>
 8004222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004224:	2b10      	cmp	r3, #16
 8004226:	d010      	beq.n	800424a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004236:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e007      	b.n	800425a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004258:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004268:	d117      	bne.n	800429a <I2C_Master_ADDR+0x278>
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004270:	d00b      	beq.n	800428a <I2C_Master_ADDR+0x268>
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	2b01      	cmp	r3, #1
 8004276:	d008      	beq.n	800428a <I2C_Master_ADDR+0x268>
 8004278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427a:	2b08      	cmp	r3, #8
 800427c:	d005      	beq.n	800428a <I2C_Master_ADDR+0x268>
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	2b10      	cmp	r3, #16
 8004282:	d002      	beq.n	800428a <I2C_Master_ADDR+0x268>
 8004284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004286:	2b20      	cmp	r3, #32
 8004288:	d107      	bne.n	800429a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004298:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	e032      	b.n	8004318 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042c0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042d0:	d117      	bne.n	8004302 <I2C_Master_ADDR+0x2e0>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042d8:	d00b      	beq.n	80042f2 <I2C_Master_ADDR+0x2d0>
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d008      	beq.n	80042f2 <I2C_Master_ADDR+0x2d0>
 80042e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d005      	beq.n	80042f2 <I2C_Master_ADDR+0x2d0>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d002      	beq.n	80042f2 <I2C_Master_ADDR+0x2d0>
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d107      	bne.n	8004302 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004300:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800431e:	e00b      	b.n	8004338 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	e7ff      	b.n	8004338 <I2C_Master_ADDR+0x316>
 8004338:	bf00      	nop
 800433a:	3744      	adds	r7, #68	@ 0x44
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004352:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02b      	beq.n	80043b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d114      	bne.n	80043b6 <I2C_SlaveTransmit_TXE+0x72>
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b29      	cmp	r3, #41	@ 0x29
 8004390:	d111      	bne.n	80043b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2221      	movs	r2, #33	@ 0x21
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2228      	movs	r2, #40	@ 0x28
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff f9cb 	bl	800374c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d011      	beq.n	80043f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d02c      	beq.n	8004474 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d114      	bne.n	8004474 <I2C_SlaveReceive_RXNE+0x74>
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b2a      	cmp	r3, #42	@ 0x2a
 800444e:	d111      	bne.n	8004474 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2222      	movs	r2, #34	@ 0x22
 8004464:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2228      	movs	r2, #40	@ 0x28
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff f976 	bl	8003760 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d012      	beq.n	80044b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044da:	2b28      	cmp	r3, #40	@ 0x28
 80044dc:	d125      	bne.n	800452a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	81bb      	strh	r3, [r7, #12]
 800450c:	e002      	b.n	8004514 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800451c:	89ba      	ldrh	r2, [r7, #12]
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff f926 	bl	8003774 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004528:	e00e      	b.n	8004548 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800456e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ac:	d172      	bne.n	8004694 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	2b22      	cmp	r3, #34	@ 0x22
 80045b2:	d002      	beq.n	80045ba <I2C_Slave_STOPF+0x6a>
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b8:	d135      	bne.n	8004626 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd ff70 	bl	80024d8 <HAL_DMA_GetState>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d049      	beq.n	8004692 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	4a69      	ldr	r2, [pc, #420]	@ (80047a8 <I2C_Slave_STOPF+0x258>)
 8004604:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	4618      	mov	r0, r3
 800460c:	f7fd fdb8 	bl	8002180 <HAL_DMA_Abort_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03d      	beq.n	8004692 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004620:	4610      	mov	r0, r2
 8004622:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004624:	e035      	b.n	8004692 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004658:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465e:	4618      	mov	r0, r3
 8004660:	f7fd ff3a 	bl	80024d8 <HAL_DMA_GetState>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d014      	beq.n	8004694 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800466e:	4a4e      	ldr	r2, [pc, #312]	@ (80047a8 <I2C_Slave_STOPF+0x258>)
 8004670:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd fd82 	bl	8002180 <HAL_DMA_Abort_IT>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800468c:	4610      	mov	r0, r2
 800468e:	4798      	blx	r3
 8004690:	e000      	b.n	8004694 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004692:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d03e      	beq.n	800471c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d112      	bne.n	80046d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b40      	cmp	r3, #64	@ 0x40
 80046de:	d112      	bne.n	8004706 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f8b7 	bl	8004898 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800472a:	e039      	b.n	80047a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004730:	d109      	bne.n	8004746 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2228      	movs	r2, #40	@ 0x28
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff f80d 	bl	8003760 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b28      	cmp	r3, #40	@ 0x28
 8004750:	d111      	bne.n	8004776 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a15      	ldr	r2, [pc, #84]	@ (80047ac <I2C_Slave_STOPF+0x25c>)
 8004756:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff f80e 	bl	8003790 <HAL_I2C_ListenCpltCallback>
}
 8004774:	e014      	b.n	80047a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	2b22      	cmp	r3, #34	@ 0x22
 800477c:	d002      	beq.n	8004784 <I2C_Slave_STOPF+0x234>
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b22      	cmp	r3, #34	@ 0x22
 8004782:	d10d      	bne.n	80047a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fe ffe0 	bl	8003760 <HAL_I2C_SlaveRxCpltCallback>
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	08004e39 	.word	0x08004e39
 80047ac:	ffff0000 	.word	0xffff0000

080047b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d002      	beq.n	80047d2 <I2C_Slave_AF+0x22>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d129      	bne.n	8004826 <I2C_Slave_AF+0x76>
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b28      	cmp	r3, #40	@ 0x28
 80047d6:	d126      	bne.n	8004826 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <I2C_Slave_AF+0xe4>)
 80047dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004806:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fe ffb6 	bl	8003790 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004824:	e031      	b.n	800488a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b21      	cmp	r3, #33	@ 0x21
 800482a:	d129      	bne.n	8004880 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <I2C_Slave_AF+0xe4>)
 8004830:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2221      	movs	r2, #33	@ 0x21
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004856:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004860:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fe fa0c 	bl	8002c90 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fe ff67 	bl	800374c <HAL_I2C_SlaveTxCpltCallback>
}
 800487e:	e004      	b.n	800488a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004888:	615a      	str	r2, [r3, #20]
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	ffff0000 	.word	0xffff0000

08004898 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048b0:	7bbb      	ldrb	r3, [r7, #14]
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d002      	beq.n	80048bc <I2C_ITError+0x24>
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d10a      	bne.n	80048d2 <I2C_ITError+0x3a>
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b22      	cmp	r3, #34	@ 0x22
 80048c0:	d107      	bne.n	80048d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048d8:	2b28      	cmp	r3, #40	@ 0x28
 80048da:	d107      	bne.n	80048ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2228      	movs	r2, #40	@ 0x28
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048ea:	e015      	b.n	8004918 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048fa:	d00a      	beq.n	8004912 <I2C_ITError+0x7a>
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b60      	cmp	r3, #96	@ 0x60
 8004900:	d007      	beq.n	8004912 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004926:	d162      	bne.n	80049ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004936:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d020      	beq.n	8004988 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	4a6a      	ldr	r2, [pc, #424]	@ (8004af4 <I2C_ITError+0x25c>)
 800494c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fc14 	bl	8002180 <HAL_DMA_Abort_IT>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8089 	beq.w	8004a72 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004982:	4610      	mov	r0, r2
 8004984:	4798      	blx	r3
 8004986:	e074      	b.n	8004a72 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	4a59      	ldr	r2, [pc, #356]	@ (8004af4 <I2C_ITError+0x25c>)
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	4618      	mov	r0, r3
 8004996:	f7fd fbf3 	bl	8002180 <HAL_DMA_Abort_IT>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d068      	beq.n	8004a72 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049aa:	2b40      	cmp	r3, #64	@ 0x40
 80049ac:	d10b      	bne.n	80049c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049e8:	4610      	mov	r0, r2
 80049ea:	4798      	blx	r3
 80049ec:	e041      	b.n	8004a72 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b60      	cmp	r3, #96	@ 0x60
 80049f8:	d125      	bne.n	8004a46 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a12:	2b40      	cmp	r3, #64	@ 0x40
 8004a14:	d10b      	bne.n	8004a2e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe fece 	bl	80037e0 <HAL_I2C_AbortCpltCallback>
 8004a44:	e015      	b.n	8004a72 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d10b      	bne.n	8004a6c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7fe fead 	bl	80037cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10e      	bne.n	8004aa0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d104      	bne.n	8004aa0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004aae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d113      	bne.n	8004aec <I2C_ITError+0x254>
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b28      	cmp	r3, #40	@ 0x28
 8004ac8:	d110      	bne.n	8004aec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a0a      	ldr	r2, [pc, #40]	@ (8004af8 <I2C_ITError+0x260>)
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fe fe52 	bl	8003790 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	08004e39 	.word	0x08004e39
 8004af8:	ffff0000 	.word	0xffff0000

08004afc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d006      	beq.n	8004b26 <I2C_MasterRequestWrite+0x2a>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d003      	beq.n	8004b26 <I2C_MasterRequestWrite+0x2a>
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b24:	d108      	bne.n	8004b38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e00b      	b.n	8004b50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3c:	2b12      	cmp	r3, #18
 8004b3e:	d107      	bne.n	8004b50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fa13 	bl	8004f88 <I2C_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b76:	d103      	bne.n	8004b80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e035      	b.n	8004bf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b8c:	d108      	bne.n	8004ba0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b8e:	897b      	ldrh	r3, [r7, #10]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b9c:	611a      	str	r2, [r3, #16]
 8004b9e:	e01b      	b.n	8004bd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ba0:	897b      	ldrh	r3, [r7, #10]
 8004ba2:	11db      	asrs	r3, r3, #7
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f003 0306 	and.w	r3, r3, #6
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f063 030f 	orn	r3, r3, #15
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	490e      	ldr	r1, [pc, #56]	@ (8004bf8 <I2C_MasterRequestWrite+0xfc>)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fa5c 	bl	800507c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e010      	b.n	8004bf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bce:	897b      	ldrh	r3, [r7, #10]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4907      	ldr	r1, [pc, #28]	@ (8004bfc <I2C_MasterRequestWrite+0x100>)
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fa4c 	bl	800507c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	00010008 	.word	0x00010008
 8004bfc:	00010002 	.word	0x00010002

08004c00 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c14:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c1c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c32:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c40:	2200      	movs	r2, #0
 8004c42:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	2200      	movs	r2, #0
 8004c52:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004c5a:	2b21      	cmp	r3, #33	@ 0x21
 8004c5c:	d007      	beq.n	8004c6e <I2C_DMAXferCplt+0x6e>
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004c64:	2b22      	cmp	r3, #34	@ 0x22
 8004c66:	d131      	bne.n	8004ccc <I2C_DMAXferCplt+0xcc>
 8004c68:	7cbb      	ldrb	r3, [r7, #18]
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d12e      	bne.n	8004ccc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c7c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	2b29      	cmp	r3, #41	@ 0x29
 8004c88:	d10a      	bne.n	8004ca0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2221      	movs	r2, #33	@ 0x21
 8004c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2228      	movs	r2, #40	@ 0x28
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c98:	6978      	ldr	r0, [r7, #20]
 8004c9a:	f7fe fd57 	bl	800374c <HAL_I2C_SlaveTxCpltCallback>
 8004c9e:	e00c      	b.n	8004cba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ca4:	d109      	bne.n	8004cba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2222      	movs	r2, #34	@ 0x22
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2228      	movs	r2, #40	@ 0x28
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cb4:	6978      	ldr	r0, [r7, #20]
 8004cb6:	f7fe fd53 	bl	8003760 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004cc8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cca:	e074      	b.n	8004db6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d06e      	beq.n	8004db6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d107      	bne.n	8004cf2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d08:	d009      	beq.n	8004d1e <I2C_DMAXferCplt+0x11e>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d006      	beq.n	8004d1e <I2C_DMAXferCplt+0x11e>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004d16:	d002      	beq.n	8004d1e <I2C_DMAXferCplt+0x11e>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d107      	bne.n	8004d2e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d3c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d4c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004d5c:	6978      	ldr	r0, [r7, #20]
 8004d5e:	f7fe fd35 	bl	80037cc <HAL_I2C_ErrorCallback>
}
 8004d62:	e028      	b.n	8004db6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b40      	cmp	r3, #64	@ 0x40
 8004d76:	d10a      	bne.n	8004d8e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f7fe fd16 	bl	80037b8 <HAL_I2C_MemRxCpltCallback>
}
 8004d8c:	e013      	b.n	8004db6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d002      	beq.n	8004da2 <I2C_DMAXferCplt+0x1a2>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d103      	bne.n	8004daa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004da8:	e002      	b.n	8004db0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2212      	movs	r2, #18
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004db0:	6978      	ldr	r0, [r7, #20]
 8004db2:	f7fc f95d 	bl	8001070 <HAL_I2C_MasterRxCpltCallback>
}
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd8:	2200      	movs	r2, #0
 8004dda:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de8:	2200      	movs	r2, #0
 8004dea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fd fb81 	bl	80024f4 <HAL_DMA_GetError>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d01b      	beq.n	8004e30 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e06:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	f043 0210 	orr.w	r2, r3, #16
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7fe fcce 	bl	80037cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e52:	4b4b      	ldr	r3, [pc, #300]	@ (8004f80 <I2C_DMAAbort+0x148>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	08db      	lsrs	r3, r3, #3
 8004e58:	4a4a      	ldr	r2, [pc, #296]	@ (8004f84 <I2C_DMAAbort+0x14c>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0a1a      	lsrs	r2, r3, #8
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	00da      	lsls	r2, r3, #3
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004e7e:	e00a      	b.n	8004e96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e94:	d0ea      	beq.n	8004e6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	2200      	movs	r2, #0
 8004eda:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	2200      	movs	r2, #0
 8004eea:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b60      	cmp	r3, #96	@ 0x60
 8004f06:	d10e      	bne.n	8004f26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f1e:	6978      	ldr	r0, [r7, #20]
 8004f20:	f7fe fc5e 	bl	80037e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f24:	e027      	b.n	8004f76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f26:	7cfb      	ldrb	r3, [r7, #19]
 8004f28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f2c:	2b28      	cmp	r3, #40	@ 0x28
 8004f2e:	d117      	bne.n	8004f60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2228      	movs	r2, #40	@ 0x28
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f5e:	e007      	b.n	8004f70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f70:	6978      	ldr	r0, [r7, #20]
 8004f72:	f7fe fc2b 	bl	80037cc <HAL_I2C_ErrorCallback>
}
 8004f76:	bf00      	nop
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000018 	.word	0x20000018
 8004f84:	14f8b589 	.word	0x14f8b589

08004f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f98:	e048      	b.n	800502c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d044      	beq.n	800502c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fc fe59 	bl	8001c58 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d139      	bne.n	800502c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d10d      	bne.n	8004fde <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	43da      	mvns	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	e00c      	b.n	8004ff8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	43da      	mvns	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d116      	bne.n	800502c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e023      	b.n	8005074 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	d10d      	bne.n	8005052 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	43da      	mvns	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	e00c      	b.n	800506c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	43da      	mvns	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	429a      	cmp	r2, r3
 8005070:	d093      	beq.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800508a:	e071      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509a:	d123      	bne.n	80050e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	f043 0204 	orr.w	r2, r3, #4
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e067      	b.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d041      	beq.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ec:	f7fc fdb4 	bl	8001c58 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d136      	bne.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d10c      	bne.n	8005126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e00b      	b.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	43da      	mvns	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d016      	beq.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e021      	b.n	80051b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10c      	bne.n	8005194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	43da      	mvns	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4013      	ands	r3, r2
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e00b      	b.n	80051ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f47f af6d 	bne.w	800508c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051c8:	e034      	b.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f8b8 	bl	8005340 <I2C_IsAcknowledgeFailed>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e034      	b.n	8005244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d028      	beq.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fc fd39 	bl	8001c58 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d11d      	bne.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005202:	2b80      	cmp	r3, #128	@ 0x80
 8005204:	d016      	beq.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	f043 0220 	orr.w	r2, r3, #32
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e007      	b.n	8005244 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523e:	2b80      	cmp	r3, #128	@ 0x80
 8005240:	d1c3      	bne.n	80051ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005258:	e034      	b.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f870 	bl	8005340 <I2C_IsAcknowledgeFailed>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e034      	b.n	80052d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d028      	beq.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fc fcf1 	bl	8001c58 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11d      	bne.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d016      	beq.n	80052c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e007      	b.n	80052d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d1c3      	bne.n	800525a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052e8:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	08db      	lsrs	r3, r3, #3
 80052ee:	4a13      	ldr	r2, [pc, #76]	@ (800533c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	0a1a      	lsrs	r2, r3, #8
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3b01      	subs	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d107      	bne.n	800531a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e008      	b.n	800532c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005328:	d0e9      	beq.n	80052fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000018 	.word	0x20000018
 800533c:	14f8b589 	.word	0x14f8b589

08005340 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005356:	d11b      	bne.n	8005390 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005360:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	f043 0204 	orr.w	r2, r3, #4
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80053ae:	d103      	bne.n	80053b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053b6:	e007      	b.n	80053c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80053c0:	d102      	bne.n	80053c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2208      	movs	r2, #8
 80053c6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e267      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d075      	beq.n	80054de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053f2:	4b88      	ldr	r3, [pc, #544]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d00c      	beq.n	8005418 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053fe:	4b85      	ldr	r3, [pc, #532]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005406:	2b08      	cmp	r3, #8
 8005408:	d112      	bne.n	8005430 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540a:	4b82      	ldr	r3, [pc, #520]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005416:	d10b      	bne.n	8005430 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005418:	4b7e      	ldr	r3, [pc, #504]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d05b      	beq.n	80054dc <HAL_RCC_OscConfig+0x108>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d157      	bne.n	80054dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e242      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005438:	d106      	bne.n	8005448 <HAL_RCC_OscConfig+0x74>
 800543a:	4b76      	ldr	r3, [pc, #472]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a75      	ldr	r2, [pc, #468]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e01d      	b.n	8005484 <HAL_RCC_OscConfig+0xb0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005450:	d10c      	bne.n	800546c <HAL_RCC_OscConfig+0x98>
 8005452:	4b70      	ldr	r3, [pc, #448]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a6f      	ldr	r2, [pc, #444]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4b6d      	ldr	r3, [pc, #436]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6c      	ldr	r2, [pc, #432]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e00b      	b.n	8005484 <HAL_RCC_OscConfig+0xb0>
 800546c:	4b69      	ldr	r3, [pc, #420]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a68      	ldr	r2, [pc, #416]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a65      	ldr	r2, [pc, #404]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 800547e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d013      	beq.n	80054b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fc fbe4 	bl	8001c58 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005494:	f7fc fbe0 	bl	8001c58 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	@ 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e207      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0xc0>
 80054b2:	e014      	b.n	80054de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7fc fbd0 	bl	8001c58 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054bc:	f7fc fbcc 	bl	8001c58 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	@ 0x64
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e1f3      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ce:	4b51      	ldr	r3, [pc, #324]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0xe8>
 80054da:	e000      	b.n	80054de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d063      	beq.n	80055b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f6:	4b47      	ldr	r3, [pc, #284]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d11c      	bne.n	800553c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005502:	4b44      	ldr	r3, [pc, #272]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d116      	bne.n	800553c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550e:	4b41      	ldr	r3, [pc, #260]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_RCC_OscConfig+0x152>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d001      	beq.n	8005526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e1c7      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005526:	4b3b      	ldr	r3, [pc, #236]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4937      	ldr	r1, [pc, #220]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553a:	e03a      	b.n	80055b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005544:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <HAL_RCC_OscConfig+0x244>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554a:	f7fc fb85 	bl	8001c58 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005552:	f7fc fb81 	bl	8001c58 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e1a8      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005564:	4b2b      	ldr	r3, [pc, #172]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005570:	4b28      	ldr	r3, [pc, #160]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4925      	ldr	r1, [pc, #148]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]
 8005584:	e015      	b.n	80055b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005586:	4b24      	ldr	r3, [pc, #144]	@ (8005618 <HAL_RCC_OscConfig+0x244>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fc fb64 	bl	8001c58 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005594:	f7fc fb60 	bl	8001c58 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e187      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d036      	beq.n	800562c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c6:	4b15      	ldr	r3, [pc, #84]	@ (800561c <HAL_RCC_OscConfig+0x248>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055cc:	f7fc fb44 	bl	8001c58 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d4:	f7fc fb40 	bl	8001c58 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e167      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <HAL_RCC_OscConfig+0x240>)
 80055e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x200>
 80055f2:	e01b      	b.n	800562c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f4:	4b09      	ldr	r3, [pc, #36]	@ (800561c <HAL_RCC_OscConfig+0x248>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fa:	f7fc fb2d 	bl	8001c58 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005600:	e00e      	b.n	8005620 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005602:	f7fc fb29 	bl	8001c58 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d907      	bls.n	8005620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e150      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
 8005614:	40023800 	.word	0x40023800
 8005618:	42470000 	.word	0x42470000
 800561c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005620:	4b88      	ldr	r3, [pc, #544]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 8005622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ea      	bne.n	8005602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8097 	beq.w	8005768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563e:	4b81      	ldr	r3, [pc, #516]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	4b7d      	ldr	r3, [pc, #500]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	4a7c      	ldr	r2, [pc, #496]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 8005654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005658:	6413      	str	r3, [r2, #64]	@ 0x40
 800565a:	4b7a      	ldr	r3, [pc, #488]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566a:	4b77      	ldr	r3, [pc, #476]	@ (8005848 <HAL_RCC_OscConfig+0x474>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d118      	bne.n	80056a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005676:	4b74      	ldr	r3, [pc, #464]	@ (8005848 <HAL_RCC_OscConfig+0x474>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a73      	ldr	r2, [pc, #460]	@ (8005848 <HAL_RCC_OscConfig+0x474>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005682:	f7fc fae9 	bl	8001c58 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568a:	f7fc fae5 	bl	8001c58 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e10c      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	4b6a      	ldr	r3, [pc, #424]	@ (8005848 <HAL_RCC_OscConfig+0x474>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d106      	bne.n	80056be <HAL_RCC_OscConfig+0x2ea>
 80056b0:	4b64      	ldr	r3, [pc, #400]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	4a63      	ldr	r2, [pc, #396]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80056bc:	e01c      	b.n	80056f8 <HAL_RCC_OscConfig+0x324>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0x30c>
 80056c6:	4b5f      	ldr	r3, [pc, #380]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ca:	4a5e      	ldr	r2, [pc, #376]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056cc:	f043 0304 	orr.w	r3, r3, #4
 80056d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	4a5b      	ldr	r2, [pc, #364]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056de:	e00b      	b.n	80056f8 <HAL_RCC_OscConfig+0x324>
 80056e0:	4b58      	ldr	r3, [pc, #352]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e4:	4a57      	ldr	r2, [pc, #348]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ec:	4b55      	ldr	r3, [pc, #340]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f0:	4a54      	ldr	r2, [pc, #336]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80056f2:	f023 0304 	bic.w	r3, r3, #4
 80056f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fc faaa 	bl	8001c58 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fc faa6 	bl	8001c58 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0cb      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571e:	4b49      	ldr	r3, [pc, #292]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0ee      	beq.n	8005708 <HAL_RCC_OscConfig+0x334>
 800572a:	e014      	b.n	8005756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572c:	f7fc fa94 	bl	8001c58 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005732:	e00a      	b.n	800574a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fc fa90 	bl	8001c58 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0b5      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574a:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ee      	bne.n	8005734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575c:	4b39      	ldr	r3, [pc, #228]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	4a38      	ldr	r2, [pc, #224]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 8005762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005766:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80a1 	beq.w	80058b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005772:	4b34      	ldr	r3, [pc, #208]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	2b08      	cmp	r3, #8
 800577c:	d05c      	beq.n	8005838 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d141      	bne.n	800580a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005786:	4b31      	ldr	r3, [pc, #196]	@ (800584c <HAL_RCC_OscConfig+0x478>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fc fa64 	bl	8001c58 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005794:	f7fc fa60 	bl	8001c58 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e087      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	4b27      	ldr	r3, [pc, #156]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f0      	bne.n	8005794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	019b      	lsls	r3, r3, #6
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	3b01      	subs	r3, #1
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	491b      	ldr	r1, [pc, #108]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057dc:	4b1b      	ldr	r3, [pc, #108]	@ (800584c <HAL_RCC_OscConfig+0x478>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e2:	f7fc fa39 	bl	8001c58 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ea:	f7fc fa35 	bl	8001c58 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e05c      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fc:	4b11      	ldr	r3, [pc, #68]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <HAL_RCC_OscConfig+0x416>
 8005808:	e054      	b.n	80058b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580a:	4b10      	ldr	r3, [pc, #64]	@ (800584c <HAL_RCC_OscConfig+0x478>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fc fa22 	bl	8001c58 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005818:	f7fc fa1e 	bl	8001c58 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e045      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582a:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_RCC_OscConfig+0x470>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x444>
 8005836:	e03d      	b.n	80058b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d107      	bne.n	8005850 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e038      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
 8005844:	40023800 	.word	0x40023800
 8005848:	40007000 	.word	0x40007000
 800584c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005850:	4b1b      	ldr	r3, [pc, #108]	@ (80058c0 <HAL_RCC_OscConfig+0x4ec>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d028      	beq.n	80058b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d121      	bne.n	80058b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005876:	429a      	cmp	r2, r3
 8005878:	d11a      	bne.n	80058b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005888:	4293      	cmp	r3, r2
 800588a:	d111      	bne.n	80058b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	3b01      	subs	r3, #1
 800589a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d107      	bne.n	80058b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d001      	beq.n	80058b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023800 	.word	0x40023800

080058c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0cc      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058d8:	4b68      	ldr	r3, [pc, #416]	@ (8005a7c <HAL_RCC_ClockConfig+0x1b8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d90c      	bls.n	8005900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b65      	ldr	r3, [pc, #404]	@ (8005a7c <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ee:	4b63      	ldr	r3, [pc, #396]	@ (8005a7c <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0b8      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d020      	beq.n	800594e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005918:	4b59      	ldr	r3, [pc, #356]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4a58      	ldr	r2, [pc, #352]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005922:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005930:	4b53      	ldr	r3, [pc, #332]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	4a52      	ldr	r2, [pc, #328]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800593a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800593c:	4b50      	ldr	r3, [pc, #320]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	494d      	ldr	r1, [pc, #308]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	4313      	orrs	r3, r2
 800594c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d044      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d107      	bne.n	8005972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005962:	4b47      	ldr	r3, [pc, #284]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d119      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e07f      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d003      	beq.n	8005982 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597e:	2b03      	cmp	r3, #3
 8005980:	d107      	bne.n	8005992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005982:	4b3f      	ldr	r3, [pc, #252]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e06f      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005992:	4b3b      	ldr	r3, [pc, #236]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e067      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059a2:	4b37      	ldr	r3, [pc, #220]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f023 0203 	bic.w	r2, r3, #3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4934      	ldr	r1, [pc, #208]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059b4:	f7fc f950 	bl	8001c58 <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ba:	e00a      	b.n	80059d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059bc:	f7fc f94c 	bl	8001c58 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e04f      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 020c 	and.w	r2, r3, #12
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d1eb      	bne.n	80059bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059e4:	4b25      	ldr	r3, [pc, #148]	@ (8005a7c <HAL_RCC_ClockConfig+0x1b8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d20c      	bcs.n	8005a0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f2:	4b22      	ldr	r3, [pc, #136]	@ (8005a7c <HAL_RCC_ClockConfig+0x1b8>)
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fa:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d001      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e032      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a18:	4b19      	ldr	r3, [pc, #100]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4916      	ldr	r1, [pc, #88]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a36:	4b12      	ldr	r3, [pc, #72]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	490e      	ldr	r1, [pc, #56]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a4a:	f000 f821 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	490a      	ldr	r1, [pc, #40]	@ (8005a84 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5c:	5ccb      	ldrb	r3, [r1, r3]
 8005a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a62:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <HAL_RCC_ClockConfig+0x1c4>)
 8005a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a66:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <HAL_RCC_ClockConfig+0x1c8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fc f8b0 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40023c00 	.word	0x40023c00
 8005a80:	40023800 	.word	0x40023800
 8005a84:	0800bdec 	.word	0x0800bdec
 8005a88:	20000018 	.word	0x20000018
 8005a8c:	2000001c 	.word	0x2000001c

08005a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a94:	b094      	sub	sp, #80	@ 0x50
 8005a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa8:	4b79      	ldr	r3, [pc, #484]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 030c 	and.w	r3, r3, #12
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d00d      	beq.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	f200 80e1 	bhi.w	8005c7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d003      	beq.n	8005aca <HAL_RCC_GetSysClockFreq+0x3a>
 8005ac2:	e0db      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ac4:	4b73      	ldr	r3, [pc, #460]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac8:	e0db      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005aca:	4b73      	ldr	r3, [pc, #460]	@ (8005c98 <HAL_RCC_GetSysClockFreq+0x208>)
 8005acc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ace:	e0d8      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ada:	4b6d      	ldr	r3, [pc, #436]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d063      	beq.n	8005bae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	099b      	lsrs	r3, r3, #6
 8005aec:	2200      	movs	r2, #0
 8005aee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005af0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005afa:	2300      	movs	r3, #0
 8005afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005afe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b02:	4622      	mov	r2, r4
 8005b04:	462b      	mov	r3, r5
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	0159      	lsls	r1, r3, #5
 8005b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b14:	0150      	lsls	r0, r2, #5
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	1a51      	subs	r1, r2, r1
 8005b1e:	6139      	str	r1, [r7, #16]
 8005b20:	4629      	mov	r1, r5
 8005b22:	eb63 0301 	sbc.w	r3, r3, r1
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b34:	4659      	mov	r1, fp
 8005b36:	018b      	lsls	r3, r1, #6
 8005b38:	4651      	mov	r1, sl
 8005b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b3e:	4651      	mov	r1, sl
 8005b40:	018a      	lsls	r2, r1, #6
 8005b42:	4651      	mov	r1, sl
 8005b44:	ebb2 0801 	subs.w	r8, r2, r1
 8005b48:	4659      	mov	r1, fp
 8005b4a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b62:	4690      	mov	r8, r2
 8005b64:	4699      	mov	r9, r3
 8005b66:	4623      	mov	r3, r4
 8005b68:	eb18 0303 	adds.w	r3, r8, r3
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	462b      	mov	r3, r5
 8005b70:	eb49 0303 	adc.w	r3, r9, r3
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b82:	4629      	mov	r1, r5
 8005b84:	024b      	lsls	r3, r1, #9
 8005b86:	4621      	mov	r1, r4
 8005b88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	024a      	lsls	r2, r1, #9
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b96:	2200      	movs	r2, #0
 8005b98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ba0:	f7fb f87a 	bl	8000c98 <__aeabi_uldivmod>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4613      	mov	r3, r2
 8005baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bac:	e058      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bae:	4b38      	ldr	r3, [pc, #224]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	099b      	lsrs	r3, r3, #6
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	4611      	mov	r1, r2
 8005bba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bbe:	623b      	str	r3, [r7, #32]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	f04f 0000 	mov.w	r0, #0
 8005bd0:	f04f 0100 	mov.w	r1, #0
 8005bd4:	0159      	lsls	r1, r3, #5
 8005bd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bda:	0150      	lsls	r0, r2, #5
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4641      	mov	r1, r8
 8005be2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005be6:	4649      	mov	r1, r9
 8005be8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c00:	ebb2 040a 	subs.w	r4, r2, sl
 8005c04:	eb63 050b 	sbc.w	r5, r3, fp
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	00eb      	lsls	r3, r5, #3
 8005c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c16:	00e2      	lsls	r2, r4, #3
 8005c18:	4614      	mov	r4, r2
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	4643      	mov	r3, r8
 8005c1e:	18e3      	adds	r3, r4, r3
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	464b      	mov	r3, r9
 8005c24:	eb45 0303 	adc.w	r3, r5, r3
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c36:	4629      	mov	r1, r5
 8005c38:	028b      	lsls	r3, r1, #10
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c40:	4621      	mov	r1, r4
 8005c42:	028a      	lsls	r2, r1, #10
 8005c44:	4610      	mov	r0, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	61fa      	str	r2, [r7, #28]
 8005c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c54:	f7fb f820 	bl	8000c98 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c60:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c7a:	e002      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c7c:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3750      	adds	r7, #80	@ 0x50
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c8e:	bf00      	nop
 8005c90:	40023800 	.word	0x40023800
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	007a1200 	.word	0x007a1200

08005c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ca0:	4b03      	ldr	r3, [pc, #12]	@ (8005cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000018 	.word	0x20000018

08005cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cb8:	f7ff fff0 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	0a9b      	lsrs	r3, r3, #10
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	4903      	ldr	r1, [pc, #12]	@ (8005cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cca:	5ccb      	ldrb	r3, [r1, r3]
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	0800bdfc 	.word	0x0800bdfc

08005cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ce0:	f7ff ffdc 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0b5b      	lsrs	r3, r3, #13
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4903      	ldr	r1, [pc, #12]	@ (8005d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	0800bdfc 	.word	0x0800bdfc

08005d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e041      	b.n	8005d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb fd0e 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f000 fa70 	bl	8006228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d001      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e044      	b.n	8005e46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e54 <HAL_TIM_Base_Start_IT+0xb0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d018      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x6c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de6:	d013      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x6c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1a      	ldr	r2, [pc, #104]	@ (8005e58 <HAL_TIM_Base_Start_IT+0xb4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00e      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x6c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <HAL_TIM_Base_Start_IT+0xb8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x6c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0x6c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	@ (8005e64 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d111      	bne.n	8005e34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d010      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e32:	e007      	b.n	8005e44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40014000 	.word	0x40014000

08005e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d020      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01b      	beq.n	8005ecc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0202 	mvn.w	r2, #2
 8005e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f999 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f98b 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f99c 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d020      	beq.n	8005f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01b      	beq.n	8005f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0204 	mvn.w	r2, #4
 8005ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f973 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f965 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f976 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d020      	beq.n	8005f64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d01b      	beq.n	8005f64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0208 	mvn.w	r2, #8
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f94d 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f93f 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f950 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d020      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01b      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0210 	mvn.w	r2, #16
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2208      	movs	r2, #8
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f927 	bl	80061ea <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f919 	bl	80061d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f92a 	bl	80061fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00c      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0201 	mvn.w	r2, #1
 8005fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fb f810 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00c      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fab6 	bl	8006564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00c      	beq.n	800601c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8fb 	bl	8006212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0220 	mvn.w	r2, #32
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa88 	bl	8006550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIM_ConfigClockSource+0x1c>
 8006060:	2302      	movs	r3, #2
 8006062:	e0b4      	b.n	80061ce <HAL_TIM_ConfigClockSource+0x186>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800608a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800609c:	d03e      	beq.n	800611c <HAL_TIM_ConfigClockSource+0xd4>
 800609e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a2:	f200 8087 	bhi.w	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060aa:	f000 8086 	beq.w	80061ba <HAL_TIM_ConfigClockSource+0x172>
 80060ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b2:	d87f      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060b4:	2b70      	cmp	r3, #112	@ 0x70
 80060b6:	d01a      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0xa6>
 80060b8:	2b70      	cmp	r3, #112	@ 0x70
 80060ba:	d87b      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060bc:	2b60      	cmp	r3, #96	@ 0x60
 80060be:	d050      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x11a>
 80060c0:	2b60      	cmp	r3, #96	@ 0x60
 80060c2:	d877      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060c4:	2b50      	cmp	r3, #80	@ 0x50
 80060c6:	d03c      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0xfa>
 80060c8:	2b50      	cmp	r3, #80	@ 0x50
 80060ca:	d873      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	d058      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x13a>
 80060d0:	2b40      	cmp	r3, #64	@ 0x40
 80060d2:	d86f      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060d4:	2b30      	cmp	r3, #48	@ 0x30
 80060d6:	d064      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x15a>
 80060d8:	2b30      	cmp	r3, #48	@ 0x30
 80060da:	d86b      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d060      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x15a>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d867      	bhi.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05c      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x15a>
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d05a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x15a>
 80060ec:	e062      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060fe:	f000 f999 	bl	8006434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	609a      	str	r2, [r3, #8]
      break;
 800611a:	e04f      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800612c:	f000 f982 	bl	8006434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800613e:	609a      	str	r2, [r3, #8]
      break;
 8006140:	e03c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614e:	461a      	mov	r2, r3
 8006150:	f000 f8f6 	bl	8006340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2150      	movs	r1, #80	@ 0x50
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f94f 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8006160:	e02c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800616e:	461a      	mov	r2, r3
 8006170:	f000 f915 	bl	800639e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2160      	movs	r1, #96	@ 0x60
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f93f 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8006180:	e01c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	461a      	mov	r2, r3
 8006190:	f000 f8d6 	bl	8006340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2140      	movs	r1, #64	@ 0x40
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f92f 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 80061a0:	e00c      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f000 f926 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 80061b2:	e003      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
      break;
 80061b8:	e000      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3a      	ldr	r2, [pc, #232]	@ (8006324 <TIM_Base_SetConfig+0xfc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00f      	beq.n	8006260 <TIM_Base_SetConfig+0x38>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006246:	d00b      	beq.n	8006260 <TIM_Base_SetConfig+0x38>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a37      	ldr	r2, [pc, #220]	@ (8006328 <TIM_Base_SetConfig+0x100>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_Base_SetConfig+0x38>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a36      	ldr	r2, [pc, #216]	@ (800632c <TIM_Base_SetConfig+0x104>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_Base_SetConfig+0x38>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a35      	ldr	r2, [pc, #212]	@ (8006330 <TIM_Base_SetConfig+0x108>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d108      	bne.n	8006272 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2b      	ldr	r2, [pc, #172]	@ (8006324 <TIM_Base_SetConfig+0xfc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01b      	beq.n	80062b2 <TIM_Base_SetConfig+0x8a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006280:	d017      	beq.n	80062b2 <TIM_Base_SetConfig+0x8a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a28      	ldr	r2, [pc, #160]	@ (8006328 <TIM_Base_SetConfig+0x100>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <TIM_Base_SetConfig+0x8a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a27      	ldr	r2, [pc, #156]	@ (800632c <TIM_Base_SetConfig+0x104>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00f      	beq.n	80062b2 <TIM_Base_SetConfig+0x8a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a26      	ldr	r2, [pc, #152]	@ (8006330 <TIM_Base_SetConfig+0x108>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00b      	beq.n	80062b2 <TIM_Base_SetConfig+0x8a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a25      	ldr	r2, [pc, #148]	@ (8006334 <TIM_Base_SetConfig+0x10c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <TIM_Base_SetConfig+0x8a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a24      	ldr	r2, [pc, #144]	@ (8006338 <TIM_Base_SetConfig+0x110>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_Base_SetConfig+0x8a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a23      	ldr	r2, [pc, #140]	@ (800633c <TIM_Base_SetConfig+0x114>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006324 <TIM_Base_SetConfig+0xfc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d103      	bne.n	80062f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	611a      	str	r2, [r3, #16]
  }
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800

08006340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f023 0201 	bic.w	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800636a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 030a 	bic.w	r3, r3, #10
 800637c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800639e:	b480      	push	{r7}
 80063a0:	b087      	sub	sp, #28
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f023 0210 	bic.w	r2, r3, #16
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	031b      	lsls	r3, r3, #12
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	f043 0307 	orr.w	r3, r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800644e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	021a      	lsls	r2, r3, #8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	431a      	orrs	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4313      	orrs	r3, r2
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	609a      	str	r2, [r3, #8]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e050      	b.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1c      	ldr	r2, [pc, #112]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d8:	d013      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a18      	ldr	r2, [pc, #96]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a16      	ldr	r2, [pc, #88]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a15      	ldr	r2, [pc, #84]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a13      	ldr	r2, [pc, #76]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10c      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4313      	orrs	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40010000 	.word	0x40010000
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40014000 	.word	0x40014000

08006550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e042      	b.n	8006610 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fb f8fa 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2224      	movs	r2, #36	@ 0x24
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fdcb 	bl	8007158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	d156      	bne.n	80066e0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_UART_Transmit_DMA+0x26>
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e04f      	b.n	80066e2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2221      	movs	r2, #33	@ 0x21
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006666:	4a21      	ldr	r2, [pc, #132]	@ (80066ec <HAL_UART_Transmit_DMA+0xd4>)
 8006668:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	4a20      	ldr	r2, [pc, #128]	@ (80066f0 <HAL_UART_Transmit_DMA+0xd8>)
 8006670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	4a1f      	ldr	r2, [pc, #124]	@ (80066f4 <HAL_UART_Transmit_DMA+0xdc>)
 8006678:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667e:	2200      	movs	r2, #0
 8006680:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3304      	adds	r3, #4
 8006696:	461a      	mov	r2, r3
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	f7fb fca9 	bl	8001ff0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	617b      	str	r3, [r7, #20]
   return(result);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3314      	adds	r3, #20
 80066c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80066ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6a39      	ldr	r1, [r7, #32]
 80066ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e5      	bne.n	80066a8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3730      	adds	r7, #48	@ 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	08006c85 	.word	0x08006c85
 80066f0:	08006d1f 	.word	0x08006d1f
 80066f4:	08006d3b 	.word	0x08006d3b

080066f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b0ba      	sub	sp, #232	@ 0xe8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800671e:	2300      	movs	r3, #0
 8006720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10f      	bne.n	800675e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <HAL_UART_IRQHandler+0x66>
 800674a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc40 	bl	8006fdc <UART_Receive_IT>
      return;
 800675c:	e25b      	b.n	8006c16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800675e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 80de 	beq.w	8006924 <HAL_UART_IRQHandler+0x22c>
 8006768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d106      	bne.n	8006782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006778:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80d1 	beq.w	8006924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <HAL_UART_IRQHandler+0xae>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679e:	f043 0201 	orr.w	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_UART_IRQHandler+0xd2>
 80067b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c2:	f043 0202 	orr.w	r2, r3, #2
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <HAL_UART_IRQHandler+0xf6>
 80067d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e6:	f043 0204 	orr.w	r2, r3, #4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d011      	beq.n	800681e <HAL_UART_IRQHandler+0x126>
 80067fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d105      	bne.n	8006812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	f043 0208 	orr.w	r2, r3, #8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 81f2 	beq.w	8006c0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_UART_IRQHandler+0x14e>
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fbcb 	bl	8006fdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b40      	cmp	r3, #64	@ 0x40
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <HAL_UART_IRQHandler+0x17a>
 800686a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d04f      	beq.n	8006912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fad3 	bl	8006e1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	d141      	bne.n	800690a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3314      	adds	r3, #20
 800688c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800689c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3314      	adds	r3, #20
 80068ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1d9      	bne.n	8006886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d013      	beq.n	8006902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068de:	4a7e      	ldr	r2, [pc, #504]	@ (8006ad8 <HAL_UART_IRQHandler+0x3e0>)
 80068e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fb fc4a 	bl	8002180 <HAL_DMA_Abort_IT>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006900:	e00e      	b.n	8006920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f9a8 	bl	8006c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006908:	e00a      	b.n	8006920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f9a4 	bl	8006c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	e006      	b.n	8006920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9a0 	bl	8006c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800691e:	e175      	b.n	8006c0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	bf00      	nop
    return;
 8006922:	e173      	b.n	8006c0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	2b01      	cmp	r3, #1
 800692a:	f040 814f 	bne.w	8006bcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8148 	beq.w	8006bcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8141 	beq.w	8006bcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800694a:	2300      	movs	r3, #0
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696a:	2b40      	cmp	r3, #64	@ 0x40
 800696c:	f040 80b6 	bne.w	8006adc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800697c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8145 	beq.w	8006c10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800698a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800698e:	429a      	cmp	r2, r3
 8006990:	f080 813e 	bcs.w	8006c10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800699a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a6:	f000 8088 	beq.w	8006aba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80069d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1d9      	bne.n	80069aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3314      	adds	r3, #20
 80069fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3314      	adds	r3, #20
 8006a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e1      	bne.n	80069f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3314      	adds	r3, #20
 8006a38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e3      	bne.n	8006a32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a8a:	f023 0310 	bic.w	r3, r3, #16
 8006a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006aa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e3      	bne.n	8006a78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fb faf3 	bl	80020a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f8cb 	bl	8006c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ad6:	e09b      	b.n	8006c10 <HAL_UART_IRQHandler+0x518>
 8006ad8:	08006ee5 	.word	0x08006ee5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 808e 	beq.w	8006c14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8089 	beq.w	8006c14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b26:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e3      	bne.n	8006b02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	623b      	str	r3, [r7, #32]
   return(result);
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ba4:	61fa      	str	r2, [r7, #28]
 8006ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	69b9      	ldr	r1, [r7, #24]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e3      	bne.n	8006b80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f851 	bl	8006c6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bca:	e023      	b.n	8006c14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d009      	beq.n	8006bec <HAL_UART_IRQHandler+0x4f4>
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f991 	bl	8006f0c <UART_Transmit_IT>
    return;
 8006bea:	e014      	b.n	8006c16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00e      	beq.n	8006c16 <HAL_UART_IRQHandler+0x51e>
 8006bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d008      	beq.n	8006c16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f9d1 	bl	8006fac <UART_EndTransmit_IT>
    return;
 8006c0a:	e004      	b.n	8006c16 <HAL_UART_IRQHandler+0x51e>
    return;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c14:	bf00      	nop
  }
}
 8006c16:	37e8      	adds	r7, #232	@ 0xe8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b090      	sub	sp, #64	@ 0x40
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d137      	bne.n	8006d10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3314      	adds	r3, #20
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3314      	adds	r3, #20
 8006cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e5      	bne.n	8006ca6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	330c      	adds	r3, #12
 8006cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cfa:	61fa      	str	r2, [r7, #28]
 8006cfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	69b9      	ldr	r1, [r7, #24]
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	617b      	str	r3, [r7, #20]
   return(result);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e5      	bne.n	8006cda <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d0e:	e002      	b.n	8006d16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006d12:	f7ff ff83 	bl	8006c1c <HAL_UART_TxCpltCallback>
}
 8006d16:	bf00      	nop
 8006d18:	3740      	adds	r7, #64	@ 0x40
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7ff ff7f 	bl	8006c30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b80      	cmp	r3, #128	@ 0x80
 8006d58:	bf0c      	ite	eq
 8006d5a:	2301      	moveq	r3, #1
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b21      	cmp	r3, #33	@ 0x21
 8006d6c:	d108      	bne.n	8006d80 <UART_DMAError+0x46>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2200      	movs	r2, #0
 8006d78:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006d7a:	68b8      	ldr	r0, [r7, #8]
 8006d7c:	f000 f827 	bl	8006dce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b40      	cmp	r3, #64	@ 0x40
 8006d8c:	bf0c      	ite	eq
 8006d8e:	2301      	moveq	r3, #1
 8006d90:	2300      	movne	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b22      	cmp	r3, #34	@ 0x22
 8006da0:	d108      	bne.n	8006db4 <UART_DMAError+0x7a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006dae:	68b8      	ldr	r0, [r7, #8]
 8006db0:	f000 f835 	bl	8006e1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db8:	f043 0210 	orr.w	r2, r3, #16
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc0:	68b8      	ldr	r0, [r7, #8]
 8006dc2:	f7ff ff49 	bl	8006c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b089      	sub	sp, #36	@ 0x24
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	61ba      	str	r2, [r7, #24]
 8006df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6979      	ldr	r1, [r7, #20]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	613b      	str	r3, [r7, #16]
   return(result);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e5      	bne.n	8006dd6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e12:	bf00      	nop
 8006e14:	3724      	adds	r7, #36	@ 0x24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b095      	sub	sp, #84	@ 0x54
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e46:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3314      	adds	r3, #20
 8006e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d119      	bne.n	8006eca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eb6:	61ba      	str	r2, [r7, #24]
 8006eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6979      	ldr	r1, [r7, #20]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ed8:	bf00      	nop
 8006eda:	3754      	adds	r7, #84	@ 0x54
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff feaa 	bl	8006c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b21      	cmp	r3, #33	@ 0x21
 8006f1e:	d13e      	bne.n	8006f9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f28:	d114      	bne.n	8006f54 <UART_Transmit_IT+0x48>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d110      	bne.n	8006f54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	621a      	str	r2, [r3, #32]
 8006f52:	e008      	b.n	8006f66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	1c59      	adds	r1, r3, #1
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6211      	str	r1, [r2, #32]
 8006f5e:	781a      	ldrb	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4619      	mov	r1, r3
 8006f74:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10f      	bne.n	8006f9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fe25 	bl	8006c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	@ 0x30
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b22      	cmp	r3, #34	@ 0x22
 8006fee:	f040 80ae 	bne.w	800714e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ffa:	d117      	bne.n	800702c <UART_Receive_IT+0x50>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d113      	bne.n	800702c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701a:	b29a      	uxth	r2, r3
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	629a      	str	r2, [r3, #40]	@ 0x28
 800702a:	e026      	b.n	800707a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800703e:	d007      	beq.n	8007050 <UART_Receive_IT+0x74>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <UART_Receive_IT+0x82>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e008      	b.n	8007070 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800706a:	b2da      	uxtb	r2, r3
 800706c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29b      	uxth	r3, r3
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	4619      	mov	r1, r3
 8007088:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800708a:	2b00      	cmp	r3, #0
 800708c:	d15d      	bne.n	800714a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0220 	bic.w	r2, r2, #32
 800709c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695a      	ldr	r2, [r3, #20]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d135      	bne.n	8007140 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070fa:	623a      	str	r2, [r7, #32]
 80070fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	69f9      	ldr	r1, [r7, #28]
 8007100:	6a3a      	ldr	r2, [r7, #32]
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	61bb      	str	r3, [r7, #24]
   return(result);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b10      	cmp	r3, #16
 800711a:	d10a      	bne.n	8007132 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fd97 	bl	8006c6c <HAL_UARTEx_RxEventCallback>
 800713e:	e002      	b.n	8007146 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff fd7f 	bl	8006c44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e002      	b.n	8007150 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e000      	b.n	8007150 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800714e:	2302      	movs	r3, #2
  }
}
 8007150:	4618      	mov	r0, r3
 8007152:	3730      	adds	r7, #48	@ 0x30
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800715c:	b0c0      	sub	sp, #256	@ 0x100
 800715e:	af00      	add	r7, sp, #0
 8007160:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007174:	68d9      	ldr	r1, [r3, #12]
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	ea40 0301 	orr.w	r3, r0, r1
 8007180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	431a      	orrs	r2, r3
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	431a      	orrs	r2, r3
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071b0:	f021 010c 	bic.w	r1, r1, #12
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071be:	430b      	orrs	r3, r1
 80071c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d2:	6999      	ldr	r1, [r3, #24]
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	ea40 0301 	orr.w	r3, r0, r1
 80071de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b8f      	ldr	r3, [pc, #572]	@ (8007424 <UART_SetConfig+0x2cc>)
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d005      	beq.n	80071f8 <UART_SetConfig+0xa0>
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b8d      	ldr	r3, [pc, #564]	@ (8007428 <UART_SetConfig+0x2d0>)
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d104      	bne.n	8007202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071f8:	f7fe fd70 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 80071fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007200:	e003      	b.n	800720a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007202:	f7fe fd57 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8007206:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007214:	f040 810c 	bne.w	8007430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800721c:	2200      	movs	r2, #0
 800721e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007222:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	1891      	adds	r1, r2, r2
 8007230:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007232:	415b      	adcs	r3, r3
 8007234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800723a:	4621      	mov	r1, r4
 800723c:	eb12 0801 	adds.w	r8, r2, r1
 8007240:	4629      	mov	r1, r5
 8007242:	eb43 0901 	adc.w	r9, r3, r1
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800725a:	4690      	mov	r8, r2
 800725c:	4699      	mov	r9, r3
 800725e:	4623      	mov	r3, r4
 8007260:	eb18 0303 	adds.w	r3, r8, r3
 8007264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007268:	462b      	mov	r3, r5
 800726a:	eb49 0303 	adc.w	r3, r9, r3
 800726e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800727e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007286:	460b      	mov	r3, r1
 8007288:	18db      	adds	r3, r3, r3
 800728a:	653b      	str	r3, [r7, #80]	@ 0x50
 800728c:	4613      	mov	r3, r2
 800728e:	eb42 0303 	adc.w	r3, r2, r3
 8007292:	657b      	str	r3, [r7, #84]	@ 0x54
 8007294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800729c:	f7f9 fcfc 	bl	8000c98 <__aeabi_uldivmod>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4b61      	ldr	r3, [pc, #388]	@ (800742c <UART_SetConfig+0x2d4>)
 80072a6:	fba3 2302 	umull	r2, r3, r3, r2
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	011c      	lsls	r4, r3, #4
 80072ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072c0:	4642      	mov	r2, r8
 80072c2:	464b      	mov	r3, r9
 80072c4:	1891      	adds	r1, r2, r2
 80072c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072c8:	415b      	adcs	r3, r3
 80072ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072d0:	4641      	mov	r1, r8
 80072d2:	eb12 0a01 	adds.w	sl, r2, r1
 80072d6:	4649      	mov	r1, r9
 80072d8:	eb43 0b01 	adc.w	fp, r3, r1
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f0:	4692      	mov	sl, r2
 80072f2:	469b      	mov	fp, r3
 80072f4:	4643      	mov	r3, r8
 80072f6:	eb1a 0303 	adds.w	r3, sl, r3
 80072fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072fe:	464b      	mov	r3, r9
 8007300:	eb4b 0303 	adc.w	r3, fp, r3
 8007304:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007314:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800731c:	460b      	mov	r3, r1
 800731e:	18db      	adds	r3, r3, r3
 8007320:	643b      	str	r3, [r7, #64]	@ 0x40
 8007322:	4613      	mov	r3, r2
 8007324:	eb42 0303 	adc.w	r3, r2, r3
 8007328:	647b      	str	r3, [r7, #68]	@ 0x44
 800732a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800732e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007332:	f7f9 fcb1 	bl	8000c98 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4611      	mov	r1, r2
 800733c:	4b3b      	ldr	r3, [pc, #236]	@ (800742c <UART_SetConfig+0x2d4>)
 800733e:	fba3 2301 	umull	r2, r3, r3, r1
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	2264      	movs	r2, #100	@ 0x64
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	1acb      	subs	r3, r1, r3
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007352:	4b36      	ldr	r3, [pc, #216]	@ (800742c <UART_SetConfig+0x2d4>)
 8007354:	fba3 2302 	umull	r2, r3, r3, r2
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007360:	441c      	add	r4, r3
 8007362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800736c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	1891      	adds	r1, r2, r2
 800737a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800737c:	415b      	adcs	r3, r3
 800737e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007384:	4641      	mov	r1, r8
 8007386:	1851      	adds	r1, r2, r1
 8007388:	6339      	str	r1, [r7, #48]	@ 0x30
 800738a:	4649      	mov	r1, r9
 800738c:	414b      	adcs	r3, r1
 800738e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800739c:	4659      	mov	r1, fp
 800739e:	00cb      	lsls	r3, r1, #3
 80073a0:	4651      	mov	r1, sl
 80073a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073a6:	4651      	mov	r1, sl
 80073a8:	00ca      	lsls	r2, r1, #3
 80073aa:	4610      	mov	r0, r2
 80073ac:	4619      	mov	r1, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	4642      	mov	r2, r8
 80073b2:	189b      	adds	r3, r3, r2
 80073b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073b8:	464b      	mov	r3, r9
 80073ba:	460a      	mov	r2, r1
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073d8:	460b      	mov	r3, r1
 80073da:	18db      	adds	r3, r3, r3
 80073dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073de:	4613      	mov	r3, r2
 80073e0:	eb42 0303 	adc.w	r3, r2, r3
 80073e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073ee:	f7f9 fc53 	bl	8000c98 <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4b0d      	ldr	r3, [pc, #52]	@ (800742c <UART_SetConfig+0x2d4>)
 80073f8:	fba3 1302 	umull	r1, r3, r3, r2
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	2164      	movs	r1, #100	@ 0x64
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	3332      	adds	r3, #50	@ 0x32
 800740a:	4a08      	ldr	r2, [pc, #32]	@ (800742c <UART_SetConfig+0x2d4>)
 800740c:	fba2 2303 	umull	r2, r3, r2, r3
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f003 0207 	and.w	r2, r3, #7
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4422      	add	r2, r4
 800741e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007420:	e106      	b.n	8007630 <UART_SetConfig+0x4d8>
 8007422:	bf00      	nop
 8007424:	40011000 	.word	0x40011000
 8007428:	40011400 	.word	0x40011400
 800742c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007434:	2200      	movs	r2, #0
 8007436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800743a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800743e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007442:	4642      	mov	r2, r8
 8007444:	464b      	mov	r3, r9
 8007446:	1891      	adds	r1, r2, r2
 8007448:	6239      	str	r1, [r7, #32]
 800744a:	415b      	adcs	r3, r3
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
 800744e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007452:	4641      	mov	r1, r8
 8007454:	1854      	adds	r4, r2, r1
 8007456:	4649      	mov	r1, r9
 8007458:	eb43 0501 	adc.w	r5, r3, r1
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	00eb      	lsls	r3, r5, #3
 8007466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800746a:	00e2      	lsls	r2, r4, #3
 800746c:	4614      	mov	r4, r2
 800746e:	461d      	mov	r5, r3
 8007470:	4643      	mov	r3, r8
 8007472:	18e3      	adds	r3, r4, r3
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007478:	464b      	mov	r3, r9
 800747a:	eb45 0303 	adc.w	r3, r5, r3
 800747e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800748e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800749e:	4629      	mov	r1, r5
 80074a0:	008b      	lsls	r3, r1, #2
 80074a2:	4621      	mov	r1, r4
 80074a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074a8:	4621      	mov	r1, r4
 80074aa:	008a      	lsls	r2, r1, #2
 80074ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074b0:	f7f9 fbf2 	bl	8000c98 <__aeabi_uldivmod>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4b60      	ldr	r3, [pc, #384]	@ (800763c <UART_SetConfig+0x4e4>)
 80074ba:	fba3 2302 	umull	r2, r3, r3, r2
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	011c      	lsls	r4, r3, #4
 80074c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	1891      	adds	r1, r2, r2
 80074da:	61b9      	str	r1, [r7, #24]
 80074dc:	415b      	adcs	r3, r3
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e4:	4641      	mov	r1, r8
 80074e6:	1851      	adds	r1, r2, r1
 80074e8:	6139      	str	r1, [r7, #16]
 80074ea:	4649      	mov	r1, r9
 80074ec:	414b      	adcs	r3, r1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074fc:	4659      	mov	r1, fp
 80074fe:	00cb      	lsls	r3, r1, #3
 8007500:	4651      	mov	r1, sl
 8007502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007506:	4651      	mov	r1, sl
 8007508:	00ca      	lsls	r2, r1, #3
 800750a:	4610      	mov	r0, r2
 800750c:	4619      	mov	r1, r3
 800750e:	4603      	mov	r3, r0
 8007510:	4642      	mov	r2, r8
 8007512:	189b      	adds	r3, r3, r2
 8007514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007518:	464b      	mov	r3, r9
 800751a:	460a      	mov	r2, r1
 800751c:	eb42 0303 	adc.w	r3, r2, r3
 8007520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800752e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800753c:	4649      	mov	r1, r9
 800753e:	008b      	lsls	r3, r1, #2
 8007540:	4641      	mov	r1, r8
 8007542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007546:	4641      	mov	r1, r8
 8007548:	008a      	lsls	r2, r1, #2
 800754a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800754e:	f7f9 fba3 	bl	8000c98 <__aeabi_uldivmod>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4611      	mov	r1, r2
 8007558:	4b38      	ldr	r3, [pc, #224]	@ (800763c <UART_SetConfig+0x4e4>)
 800755a:	fba3 2301 	umull	r2, r3, r3, r1
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	2264      	movs	r2, #100	@ 0x64
 8007562:	fb02 f303 	mul.w	r3, r2, r3
 8007566:	1acb      	subs	r3, r1, r3
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	3332      	adds	r3, #50	@ 0x32
 800756c:	4a33      	ldr	r2, [pc, #204]	@ (800763c <UART_SetConfig+0x4e4>)
 800756e:	fba2 2303 	umull	r2, r3, r2, r3
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007578:	441c      	add	r4, r3
 800757a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800757e:	2200      	movs	r2, #0
 8007580:	673b      	str	r3, [r7, #112]	@ 0x70
 8007582:	677a      	str	r2, [r7, #116]	@ 0x74
 8007584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007588:	4642      	mov	r2, r8
 800758a:	464b      	mov	r3, r9
 800758c:	1891      	adds	r1, r2, r2
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	415b      	adcs	r3, r3
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007598:	4641      	mov	r1, r8
 800759a:	1851      	adds	r1, r2, r1
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	4649      	mov	r1, r9
 80075a0:	414b      	adcs	r3, r1
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075b0:	4659      	mov	r1, fp
 80075b2:	00cb      	lsls	r3, r1, #3
 80075b4:	4651      	mov	r1, sl
 80075b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ba:	4651      	mov	r1, sl
 80075bc:	00ca      	lsls	r2, r1, #3
 80075be:	4610      	mov	r0, r2
 80075c0:	4619      	mov	r1, r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	4642      	mov	r2, r8
 80075c6:	189b      	adds	r3, r3, r2
 80075c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ca:	464b      	mov	r3, r9
 80075cc:	460a      	mov	r2, r1
 80075ce:	eb42 0303 	adc.w	r3, r2, r3
 80075d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80075de:	667a      	str	r2, [r7, #100]	@ 0x64
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075ec:	4649      	mov	r1, r9
 80075ee:	008b      	lsls	r3, r1, #2
 80075f0:	4641      	mov	r1, r8
 80075f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f6:	4641      	mov	r1, r8
 80075f8:	008a      	lsls	r2, r1, #2
 80075fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075fe:	f7f9 fb4b 	bl	8000c98 <__aeabi_uldivmod>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <UART_SetConfig+0x4e4>)
 8007608:	fba3 1302 	umull	r1, r3, r3, r2
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	2164      	movs	r1, #100	@ 0x64
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	3332      	adds	r3, #50	@ 0x32
 800761a:	4a08      	ldr	r2, [pc, #32]	@ (800763c <UART_SetConfig+0x4e4>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	f003 020f 	and.w	r2, r3, #15
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4422      	add	r2, r4
 800762e:	609a      	str	r2, [r3, #8]
}
 8007630:	bf00      	nop
 8007632:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007636:	46bd      	mov	sp, r7
 8007638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763c:	51eb851f 	.word	0x51eb851f

08007640 <__cvt>:
 8007640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	ec57 6b10 	vmov	r6, r7, d0
 8007648:	2f00      	cmp	r7, #0
 800764a:	460c      	mov	r4, r1
 800764c:	4619      	mov	r1, r3
 800764e:	463b      	mov	r3, r7
 8007650:	bfbb      	ittet	lt
 8007652:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007656:	461f      	movlt	r7, r3
 8007658:	2300      	movge	r3, #0
 800765a:	232d      	movlt	r3, #45	@ 0x2d
 800765c:	700b      	strb	r3, [r1, #0]
 800765e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007660:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007664:	4691      	mov	r9, r2
 8007666:	f023 0820 	bic.w	r8, r3, #32
 800766a:	bfbc      	itt	lt
 800766c:	4632      	movlt	r2, r6
 800766e:	4616      	movlt	r6, r2
 8007670:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007674:	d005      	beq.n	8007682 <__cvt+0x42>
 8007676:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800767a:	d100      	bne.n	800767e <__cvt+0x3e>
 800767c:	3401      	adds	r4, #1
 800767e:	2102      	movs	r1, #2
 8007680:	e000      	b.n	8007684 <__cvt+0x44>
 8007682:	2103      	movs	r1, #3
 8007684:	ab03      	add	r3, sp, #12
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	ab02      	add	r3, sp, #8
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	ec47 6b10 	vmov	d0, r6, r7
 8007690:	4653      	mov	r3, sl
 8007692:	4622      	mov	r2, r4
 8007694:	f001 f8a8 	bl	80087e8 <_dtoa_r>
 8007698:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800769c:	4605      	mov	r5, r0
 800769e:	d119      	bne.n	80076d4 <__cvt+0x94>
 80076a0:	f019 0f01 	tst.w	r9, #1
 80076a4:	d00e      	beq.n	80076c4 <__cvt+0x84>
 80076a6:	eb00 0904 	add.w	r9, r0, r4
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4630      	mov	r0, r6
 80076b0:	4639      	mov	r1, r7
 80076b2:	f7f9 fa11 	bl	8000ad8 <__aeabi_dcmpeq>
 80076b6:	b108      	cbz	r0, 80076bc <__cvt+0x7c>
 80076b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80076bc:	2230      	movs	r2, #48	@ 0x30
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	454b      	cmp	r3, r9
 80076c2:	d31e      	bcc.n	8007702 <__cvt+0xc2>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076c8:	1b5b      	subs	r3, r3, r5
 80076ca:	4628      	mov	r0, r5
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	b004      	add	sp, #16
 80076d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076d8:	eb00 0904 	add.w	r9, r0, r4
 80076dc:	d1e5      	bne.n	80076aa <__cvt+0x6a>
 80076de:	7803      	ldrb	r3, [r0, #0]
 80076e0:	2b30      	cmp	r3, #48	@ 0x30
 80076e2:	d10a      	bne.n	80076fa <__cvt+0xba>
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f9 f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80076f0:	b918      	cbnz	r0, 80076fa <__cvt+0xba>
 80076f2:	f1c4 0401 	rsb	r4, r4, #1
 80076f6:	f8ca 4000 	str.w	r4, [sl]
 80076fa:	f8da 3000 	ldr.w	r3, [sl]
 80076fe:	4499      	add	r9, r3
 8007700:	e7d3      	b.n	80076aa <__cvt+0x6a>
 8007702:	1c59      	adds	r1, r3, #1
 8007704:	9103      	str	r1, [sp, #12]
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e7d9      	b.n	80076be <__cvt+0x7e>

0800770a <__exponent>:
 800770a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800770c:	2900      	cmp	r1, #0
 800770e:	bfba      	itte	lt
 8007710:	4249      	neglt	r1, r1
 8007712:	232d      	movlt	r3, #45	@ 0x2d
 8007714:	232b      	movge	r3, #43	@ 0x2b
 8007716:	2909      	cmp	r1, #9
 8007718:	7002      	strb	r2, [r0, #0]
 800771a:	7043      	strb	r3, [r0, #1]
 800771c:	dd29      	ble.n	8007772 <__exponent+0x68>
 800771e:	f10d 0307 	add.w	r3, sp, #7
 8007722:	461d      	mov	r5, r3
 8007724:	270a      	movs	r7, #10
 8007726:	461a      	mov	r2, r3
 8007728:	fbb1 f6f7 	udiv	r6, r1, r7
 800772c:	fb07 1416 	mls	r4, r7, r6, r1
 8007730:	3430      	adds	r4, #48	@ 0x30
 8007732:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007736:	460c      	mov	r4, r1
 8007738:	2c63      	cmp	r4, #99	@ 0x63
 800773a:	f103 33ff 	add.w	r3, r3, #4294967295
 800773e:	4631      	mov	r1, r6
 8007740:	dcf1      	bgt.n	8007726 <__exponent+0x1c>
 8007742:	3130      	adds	r1, #48	@ 0x30
 8007744:	1e94      	subs	r4, r2, #2
 8007746:	f803 1c01 	strb.w	r1, [r3, #-1]
 800774a:	1c41      	adds	r1, r0, #1
 800774c:	4623      	mov	r3, r4
 800774e:	42ab      	cmp	r3, r5
 8007750:	d30a      	bcc.n	8007768 <__exponent+0x5e>
 8007752:	f10d 0309 	add.w	r3, sp, #9
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	42ac      	cmp	r4, r5
 800775a:	bf88      	it	hi
 800775c:	2300      	movhi	r3, #0
 800775e:	3302      	adds	r3, #2
 8007760:	4403      	add	r3, r0
 8007762:	1a18      	subs	r0, r3, r0
 8007764:	b003      	add	sp, #12
 8007766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007768:	f813 6b01 	ldrb.w	r6, [r3], #1
 800776c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007770:	e7ed      	b.n	800774e <__exponent+0x44>
 8007772:	2330      	movs	r3, #48	@ 0x30
 8007774:	3130      	adds	r1, #48	@ 0x30
 8007776:	7083      	strb	r3, [r0, #2]
 8007778:	70c1      	strb	r1, [r0, #3]
 800777a:	1d03      	adds	r3, r0, #4
 800777c:	e7f1      	b.n	8007762 <__exponent+0x58>
	...

08007780 <_printf_float>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	b08d      	sub	sp, #52	@ 0x34
 8007786:	460c      	mov	r4, r1
 8007788:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800778c:	4616      	mov	r6, r2
 800778e:	461f      	mov	r7, r3
 8007790:	4605      	mov	r5, r0
 8007792:	f000 ff23 	bl	80085dc <_localeconv_r>
 8007796:	6803      	ldr	r3, [r0, #0]
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	4618      	mov	r0, r3
 800779c:	f7f8 fd70 	bl	8000280 <strlen>
 80077a0:	2300      	movs	r3, #0
 80077a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077a4:	f8d8 3000 	ldr.w	r3, [r8]
 80077a8:	9005      	str	r0, [sp, #20]
 80077aa:	3307      	adds	r3, #7
 80077ac:	f023 0307 	bic.w	r3, r3, #7
 80077b0:	f103 0208 	add.w	r2, r3, #8
 80077b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80077b8:	f8d4 b000 	ldr.w	fp, [r4]
 80077bc:	f8c8 2000 	str.w	r2, [r8]
 80077c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80077c8:	9307      	str	r3, [sp, #28]
 80077ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80077ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80077d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007a48 <_printf_float+0x2c8>)
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	f7f9 f9ae 	bl	8000b3c <__aeabi_dcmpun>
 80077e0:	bb70      	cbnz	r0, 8007840 <_printf_float+0xc0>
 80077e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077e6:	4b98      	ldr	r3, [pc, #608]	@ (8007a48 <_printf_float+0x2c8>)
 80077e8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ec:	f7f9 f988 	bl	8000b00 <__aeabi_dcmple>
 80077f0:	bb30      	cbnz	r0, 8007840 <_printf_float+0xc0>
 80077f2:	2200      	movs	r2, #0
 80077f4:	2300      	movs	r3, #0
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	f7f9 f977 	bl	8000aec <__aeabi_dcmplt>
 80077fe:	b110      	cbz	r0, 8007806 <_printf_float+0x86>
 8007800:	232d      	movs	r3, #45	@ 0x2d
 8007802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007806:	4a91      	ldr	r2, [pc, #580]	@ (8007a4c <_printf_float+0x2cc>)
 8007808:	4b91      	ldr	r3, [pc, #580]	@ (8007a50 <_printf_float+0x2d0>)
 800780a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800780e:	bf94      	ite	ls
 8007810:	4690      	movls	r8, r2
 8007812:	4698      	movhi	r8, r3
 8007814:	2303      	movs	r3, #3
 8007816:	6123      	str	r3, [r4, #16]
 8007818:	f02b 0304 	bic.w	r3, fp, #4
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	f04f 0900 	mov.w	r9, #0
 8007822:	9700      	str	r7, [sp, #0]
 8007824:	4633      	mov	r3, r6
 8007826:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f000 f9d2 	bl	8007bd4 <_printf_common>
 8007830:	3001      	adds	r0, #1
 8007832:	f040 808d 	bne.w	8007950 <_printf_float+0x1d0>
 8007836:	f04f 30ff 	mov.w	r0, #4294967295
 800783a:	b00d      	add	sp, #52	@ 0x34
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f9 f978 	bl	8000b3c <__aeabi_dcmpun>
 800784c:	b140      	cbz	r0, 8007860 <_printf_float+0xe0>
 800784e:	464b      	mov	r3, r9
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfbc      	itt	lt
 8007854:	232d      	movlt	r3, #45	@ 0x2d
 8007856:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800785a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a54 <_printf_float+0x2d4>)
 800785c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a58 <_printf_float+0x2d8>)
 800785e:	e7d4      	b.n	800780a <_printf_float+0x8a>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007866:	9206      	str	r2, [sp, #24]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	d13b      	bne.n	80078e4 <_printf_float+0x164>
 800786c:	2306      	movs	r3, #6
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007874:	2300      	movs	r3, #0
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	9303      	str	r3, [sp, #12]
 800787a:	ab0a      	add	r3, sp, #40	@ 0x28
 800787c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007880:	ab09      	add	r3, sp, #36	@ 0x24
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	ec49 8b10 	vmov	d0, r8, r9
 800788a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800788e:	4628      	mov	r0, r5
 8007890:	f7ff fed6 	bl	8007640 <__cvt>
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007898:	2b47      	cmp	r3, #71	@ 0x47
 800789a:	4680      	mov	r8, r0
 800789c:	d129      	bne.n	80078f2 <_printf_float+0x172>
 800789e:	1cc8      	adds	r0, r1, #3
 80078a0:	db02      	blt.n	80078a8 <_printf_float+0x128>
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	4299      	cmp	r1, r3
 80078a6:	dd41      	ble.n	800792c <_printf_float+0x1ac>
 80078a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80078ac:	fa5f fa8a 	uxtb.w	sl, sl
 80078b0:	3901      	subs	r1, #1
 80078b2:	4652      	mov	r2, sl
 80078b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80078b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80078ba:	f7ff ff26 	bl	800770a <__exponent>
 80078be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078c0:	1813      	adds	r3, r2, r0
 80078c2:	2a01      	cmp	r2, #1
 80078c4:	4681      	mov	r9, r0
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	dc02      	bgt.n	80078d0 <_printf_float+0x150>
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	07d2      	lsls	r2, r2, #31
 80078ce:	d501      	bpl.n	80078d4 <_printf_float+0x154>
 80078d0:	3301      	adds	r3, #1
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0a2      	beq.n	8007822 <_printf_float+0xa2>
 80078dc:	232d      	movs	r3, #45	@ 0x2d
 80078de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e2:	e79e      	b.n	8007822 <_printf_float+0xa2>
 80078e4:	9a06      	ldr	r2, [sp, #24]
 80078e6:	2a47      	cmp	r2, #71	@ 0x47
 80078e8:	d1c2      	bne.n	8007870 <_printf_float+0xf0>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1c0      	bne.n	8007870 <_printf_float+0xf0>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e7bd      	b.n	800786e <_printf_float+0xee>
 80078f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078f6:	d9db      	bls.n	80078b0 <_printf_float+0x130>
 80078f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078fc:	d118      	bne.n	8007930 <_printf_float+0x1b0>
 80078fe:	2900      	cmp	r1, #0
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	dd0b      	ble.n	800791c <_printf_float+0x19c>
 8007904:	6121      	str	r1, [r4, #16]
 8007906:	b913      	cbnz	r3, 800790e <_printf_float+0x18e>
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	07d0      	lsls	r0, r2, #31
 800790c:	d502      	bpl.n	8007914 <_printf_float+0x194>
 800790e:	3301      	adds	r3, #1
 8007910:	440b      	add	r3, r1
 8007912:	6123      	str	r3, [r4, #16]
 8007914:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007916:	f04f 0900 	mov.w	r9, #0
 800791a:	e7db      	b.n	80078d4 <_printf_float+0x154>
 800791c:	b913      	cbnz	r3, 8007924 <_printf_float+0x1a4>
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	07d2      	lsls	r2, r2, #31
 8007922:	d501      	bpl.n	8007928 <_printf_float+0x1a8>
 8007924:	3302      	adds	r3, #2
 8007926:	e7f4      	b.n	8007912 <_printf_float+0x192>
 8007928:	2301      	movs	r3, #1
 800792a:	e7f2      	b.n	8007912 <_printf_float+0x192>
 800792c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007932:	4299      	cmp	r1, r3
 8007934:	db05      	blt.n	8007942 <_printf_float+0x1c2>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	6121      	str	r1, [r4, #16]
 800793a:	07d8      	lsls	r0, r3, #31
 800793c:	d5ea      	bpl.n	8007914 <_printf_float+0x194>
 800793e:	1c4b      	adds	r3, r1, #1
 8007940:	e7e7      	b.n	8007912 <_printf_float+0x192>
 8007942:	2900      	cmp	r1, #0
 8007944:	bfd4      	ite	le
 8007946:	f1c1 0202 	rsble	r2, r1, #2
 800794a:	2201      	movgt	r2, #1
 800794c:	4413      	add	r3, r2
 800794e:	e7e0      	b.n	8007912 <_printf_float+0x192>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	055a      	lsls	r2, r3, #21
 8007954:	d407      	bmi.n	8007966 <_printf_float+0x1e6>
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	4642      	mov	r2, r8
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	d12b      	bne.n	80079bc <_printf_float+0x23c>
 8007964:	e767      	b.n	8007836 <_printf_float+0xb6>
 8007966:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800796a:	f240 80dd 	bls.w	8007b28 <_printf_float+0x3a8>
 800796e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007972:	2200      	movs	r2, #0
 8007974:	2300      	movs	r3, #0
 8007976:	f7f9 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800797a:	2800      	cmp	r0, #0
 800797c:	d033      	beq.n	80079e6 <_printf_float+0x266>
 800797e:	4a37      	ldr	r2, [pc, #220]	@ (8007a5c <_printf_float+0x2dc>)
 8007980:	2301      	movs	r3, #1
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	f43f af54 	beq.w	8007836 <_printf_float+0xb6>
 800798e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007992:	4543      	cmp	r3, r8
 8007994:	db02      	blt.n	800799c <_printf_float+0x21c>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	07d8      	lsls	r0, r3, #31
 800799a:	d50f      	bpl.n	80079bc <_printf_float+0x23c>
 800799c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	f43f af45 	beq.w	8007836 <_printf_float+0xb6>
 80079ac:	f04f 0900 	mov.w	r9, #0
 80079b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80079b4:	f104 0a1a 	add.w	sl, r4, #26
 80079b8:	45c8      	cmp	r8, r9
 80079ba:	dc09      	bgt.n	80079d0 <_printf_float+0x250>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	079b      	lsls	r3, r3, #30
 80079c0:	f100 8103 	bmi.w	8007bca <_printf_float+0x44a>
 80079c4:	68e0      	ldr	r0, [r4, #12]
 80079c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079c8:	4298      	cmp	r0, r3
 80079ca:	bfb8      	it	lt
 80079cc:	4618      	movlt	r0, r3
 80079ce:	e734      	b.n	800783a <_printf_float+0xba>
 80079d0:	2301      	movs	r3, #1
 80079d2:	4652      	mov	r2, sl
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	f43f af2b 	beq.w	8007836 <_printf_float+0xb6>
 80079e0:	f109 0901 	add.w	r9, r9, #1
 80079e4:	e7e8      	b.n	80079b8 <_printf_float+0x238>
 80079e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc39      	bgt.n	8007a60 <_printf_float+0x2e0>
 80079ec:	4a1b      	ldr	r2, [pc, #108]	@ (8007a5c <_printf_float+0x2dc>)
 80079ee:	2301      	movs	r3, #1
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	f43f af1d 	beq.w	8007836 <_printf_float+0xb6>
 80079fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a00:	ea59 0303 	orrs.w	r3, r9, r3
 8007a04:	d102      	bne.n	8007a0c <_printf_float+0x28c>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	07d9      	lsls	r1, r3, #31
 8007a0a:	d5d7      	bpl.n	80079bc <_printf_float+0x23c>
 8007a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	f43f af0d 	beq.w	8007836 <_printf_float+0xb6>
 8007a1c:	f04f 0a00 	mov.w	sl, #0
 8007a20:	f104 0b1a 	add.w	fp, r4, #26
 8007a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a26:	425b      	negs	r3, r3
 8007a28:	4553      	cmp	r3, sl
 8007a2a:	dc01      	bgt.n	8007a30 <_printf_float+0x2b0>
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	e793      	b.n	8007958 <_printf_float+0x1d8>
 8007a30:	2301      	movs	r3, #1
 8007a32:	465a      	mov	r2, fp
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f43f aefb 	beq.w	8007836 <_printf_float+0xb6>
 8007a40:	f10a 0a01 	add.w	sl, sl, #1
 8007a44:	e7ee      	b.n	8007a24 <_printf_float+0x2a4>
 8007a46:	bf00      	nop
 8007a48:	7fefffff 	.word	0x7fefffff
 8007a4c:	0800be0c 	.word	0x0800be0c
 8007a50:	0800be10 	.word	0x0800be10
 8007a54:	0800be14 	.word	0x0800be14
 8007a58:	0800be18 	.word	0x0800be18
 8007a5c:	0800be1c 	.word	0x0800be1c
 8007a60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a66:	4553      	cmp	r3, sl
 8007a68:	bfa8      	it	ge
 8007a6a:	4653      	movge	r3, sl
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	4699      	mov	r9, r3
 8007a70:	dc36      	bgt.n	8007ae0 <_printf_float+0x360>
 8007a72:	f04f 0b00 	mov.w	fp, #0
 8007a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7a:	f104 021a 	add.w	r2, r4, #26
 8007a7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a80:	9306      	str	r3, [sp, #24]
 8007a82:	eba3 0309 	sub.w	r3, r3, r9
 8007a86:	455b      	cmp	r3, fp
 8007a88:	dc31      	bgt.n	8007aee <_printf_float+0x36e>
 8007a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8c:	459a      	cmp	sl, r3
 8007a8e:	dc3a      	bgt.n	8007b06 <_printf_float+0x386>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	07da      	lsls	r2, r3, #31
 8007a94:	d437      	bmi.n	8007b06 <_printf_float+0x386>
 8007a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a98:	ebaa 0903 	sub.w	r9, sl, r3
 8007a9c:	9b06      	ldr	r3, [sp, #24]
 8007a9e:	ebaa 0303 	sub.w	r3, sl, r3
 8007aa2:	4599      	cmp	r9, r3
 8007aa4:	bfa8      	it	ge
 8007aa6:	4699      	movge	r9, r3
 8007aa8:	f1b9 0f00 	cmp.w	r9, #0
 8007aac:	dc33      	bgt.n	8007b16 <_printf_float+0x396>
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ab6:	f104 0b1a 	add.w	fp, r4, #26
 8007aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007abc:	ebaa 0303 	sub.w	r3, sl, r3
 8007ac0:	eba3 0309 	sub.w	r3, r3, r9
 8007ac4:	4543      	cmp	r3, r8
 8007ac6:	f77f af79 	ble.w	80079bc <_printf_float+0x23c>
 8007aca:	2301      	movs	r3, #1
 8007acc:	465a      	mov	r2, fp
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f43f aeae 	beq.w	8007836 <_printf_float+0xb6>
 8007ada:	f108 0801 	add.w	r8, r8, #1
 8007ade:	e7ec      	b.n	8007aba <_printf_float+0x33a>
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d1c2      	bne.n	8007a72 <_printf_float+0x2f2>
 8007aec:	e6a3      	b.n	8007836 <_printf_float+0xb6>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4631      	mov	r1, r6
 8007af2:	4628      	mov	r0, r5
 8007af4:	9206      	str	r2, [sp, #24]
 8007af6:	47b8      	blx	r7
 8007af8:	3001      	adds	r0, #1
 8007afa:	f43f ae9c 	beq.w	8007836 <_printf_float+0xb6>
 8007afe:	9a06      	ldr	r2, [sp, #24]
 8007b00:	f10b 0b01 	add.w	fp, fp, #1
 8007b04:	e7bb      	b.n	8007a7e <_printf_float+0x2fe>
 8007b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b8      	blx	r7
 8007b10:	3001      	adds	r0, #1
 8007b12:	d1c0      	bne.n	8007a96 <_printf_float+0x316>
 8007b14:	e68f      	b.n	8007836 <_printf_float+0xb6>
 8007b16:	9a06      	ldr	r2, [sp, #24]
 8007b18:	464b      	mov	r3, r9
 8007b1a:	4442      	add	r2, r8
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	d1c3      	bne.n	8007aae <_printf_float+0x32e>
 8007b26:	e686      	b.n	8007836 <_printf_float+0xb6>
 8007b28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b2c:	f1ba 0f01 	cmp.w	sl, #1
 8007b30:	dc01      	bgt.n	8007b36 <_printf_float+0x3b6>
 8007b32:	07db      	lsls	r3, r3, #31
 8007b34:	d536      	bpl.n	8007ba4 <_printf_float+0x424>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4642      	mov	r2, r8
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f ae78 	beq.w	8007836 <_printf_float+0xb6>
 8007b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	f43f ae70 	beq.w	8007836 <_printf_float+0xb6>
 8007b56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b62:	f7f8 ffb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b66:	b9c0      	cbnz	r0, 8007b9a <_printf_float+0x41a>
 8007b68:	4653      	mov	r3, sl
 8007b6a:	f108 0201 	add.w	r2, r8, #1
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	d10c      	bne.n	8007b92 <_printf_float+0x412>
 8007b78:	e65d      	b.n	8007836 <_printf_float+0xb6>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	465a      	mov	r2, fp
 8007b7e:	4631      	mov	r1, r6
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b8      	blx	r7
 8007b84:	3001      	adds	r0, #1
 8007b86:	f43f ae56 	beq.w	8007836 <_printf_float+0xb6>
 8007b8a:	f108 0801 	add.w	r8, r8, #1
 8007b8e:	45d0      	cmp	r8, sl
 8007b90:	dbf3      	blt.n	8007b7a <_printf_float+0x3fa>
 8007b92:	464b      	mov	r3, r9
 8007b94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b98:	e6df      	b.n	800795a <_printf_float+0x1da>
 8007b9a:	f04f 0800 	mov.w	r8, #0
 8007b9e:	f104 0b1a 	add.w	fp, r4, #26
 8007ba2:	e7f4      	b.n	8007b8e <_printf_float+0x40e>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	e7e1      	b.n	8007b6e <_printf_float+0x3ee>
 8007baa:	2301      	movs	r3, #1
 8007bac:	464a      	mov	r2, r9
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	f43f ae3e 	beq.w	8007836 <_printf_float+0xb6>
 8007bba:	f108 0801 	add.w	r8, r8, #1
 8007bbe:	68e3      	ldr	r3, [r4, #12]
 8007bc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bc2:	1a5b      	subs	r3, r3, r1
 8007bc4:	4543      	cmp	r3, r8
 8007bc6:	dcf0      	bgt.n	8007baa <_printf_float+0x42a>
 8007bc8:	e6fc      	b.n	80079c4 <_printf_float+0x244>
 8007bca:	f04f 0800 	mov.w	r8, #0
 8007bce:	f104 0919 	add.w	r9, r4, #25
 8007bd2:	e7f4      	b.n	8007bbe <_printf_float+0x43e>

08007bd4 <_printf_common>:
 8007bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd8:	4616      	mov	r6, r2
 8007bda:	4698      	mov	r8, r3
 8007bdc:	688a      	ldr	r2, [r1, #8]
 8007bde:	690b      	ldr	r3, [r1, #16]
 8007be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	bfb8      	it	lt
 8007be8:	4613      	movlt	r3, r2
 8007bea:	6033      	str	r3, [r6, #0]
 8007bec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	b10a      	cbz	r2, 8007bfa <_printf_common+0x26>
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	6033      	str	r3, [r6, #0]
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	0699      	lsls	r1, r3, #26
 8007bfe:	bf42      	ittt	mi
 8007c00:	6833      	ldrmi	r3, [r6, #0]
 8007c02:	3302      	addmi	r3, #2
 8007c04:	6033      	strmi	r3, [r6, #0]
 8007c06:	6825      	ldr	r5, [r4, #0]
 8007c08:	f015 0506 	ands.w	r5, r5, #6
 8007c0c:	d106      	bne.n	8007c1c <_printf_common+0x48>
 8007c0e:	f104 0a19 	add.w	sl, r4, #25
 8007c12:	68e3      	ldr	r3, [r4, #12]
 8007c14:	6832      	ldr	r2, [r6, #0]
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	42ab      	cmp	r3, r5
 8007c1a:	dc26      	bgt.n	8007c6a <_printf_common+0x96>
 8007c1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c20:	6822      	ldr	r2, [r4, #0]
 8007c22:	3b00      	subs	r3, #0
 8007c24:	bf18      	it	ne
 8007c26:	2301      	movne	r3, #1
 8007c28:	0692      	lsls	r2, r2, #26
 8007c2a:	d42b      	bmi.n	8007c84 <_printf_common+0xb0>
 8007c2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c30:	4641      	mov	r1, r8
 8007c32:	4638      	mov	r0, r7
 8007c34:	47c8      	blx	r9
 8007c36:	3001      	adds	r0, #1
 8007c38:	d01e      	beq.n	8007c78 <_printf_common+0xa4>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	6922      	ldr	r2, [r4, #16]
 8007c3e:	f003 0306 	and.w	r3, r3, #6
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	bf02      	ittt	eq
 8007c46:	68e5      	ldreq	r5, [r4, #12]
 8007c48:	6833      	ldreq	r3, [r6, #0]
 8007c4a:	1aed      	subeq	r5, r5, r3
 8007c4c:	68a3      	ldr	r3, [r4, #8]
 8007c4e:	bf0c      	ite	eq
 8007c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c54:	2500      	movne	r5, #0
 8007c56:	4293      	cmp	r3, r2
 8007c58:	bfc4      	itt	gt
 8007c5a:	1a9b      	subgt	r3, r3, r2
 8007c5c:	18ed      	addgt	r5, r5, r3
 8007c5e:	2600      	movs	r6, #0
 8007c60:	341a      	adds	r4, #26
 8007c62:	42b5      	cmp	r5, r6
 8007c64:	d11a      	bne.n	8007c9c <_printf_common+0xc8>
 8007c66:	2000      	movs	r0, #0
 8007c68:	e008      	b.n	8007c7c <_printf_common+0xa8>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	4641      	mov	r1, r8
 8007c70:	4638      	mov	r0, r7
 8007c72:	47c8      	blx	r9
 8007c74:	3001      	adds	r0, #1
 8007c76:	d103      	bne.n	8007c80 <_printf_common+0xac>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c80:	3501      	adds	r5, #1
 8007c82:	e7c6      	b.n	8007c12 <_printf_common+0x3e>
 8007c84:	18e1      	adds	r1, r4, r3
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	2030      	movs	r0, #48	@ 0x30
 8007c8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c8e:	4422      	add	r2, r4
 8007c90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c98:	3302      	adds	r3, #2
 8007c9a:	e7c7      	b.n	8007c2c <_printf_common+0x58>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	47c8      	blx	r9
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d0e6      	beq.n	8007c78 <_printf_common+0xa4>
 8007caa:	3601      	adds	r6, #1
 8007cac:	e7d9      	b.n	8007c62 <_printf_common+0x8e>
	...

08007cb0 <_printf_i>:
 8007cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	7e0f      	ldrb	r7, [r1, #24]
 8007cb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cb8:	2f78      	cmp	r7, #120	@ 0x78
 8007cba:	4691      	mov	r9, r2
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	469a      	mov	sl, r3
 8007cc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cc6:	d807      	bhi.n	8007cd8 <_printf_i+0x28>
 8007cc8:	2f62      	cmp	r7, #98	@ 0x62
 8007cca:	d80a      	bhi.n	8007ce2 <_printf_i+0x32>
 8007ccc:	2f00      	cmp	r7, #0
 8007cce:	f000 80d2 	beq.w	8007e76 <_printf_i+0x1c6>
 8007cd2:	2f58      	cmp	r7, #88	@ 0x58
 8007cd4:	f000 80b9 	beq.w	8007e4a <_printf_i+0x19a>
 8007cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ce0:	e03a      	b.n	8007d58 <_printf_i+0xa8>
 8007ce2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ce6:	2b15      	cmp	r3, #21
 8007ce8:	d8f6      	bhi.n	8007cd8 <_printf_i+0x28>
 8007cea:	a101      	add	r1, pc, #4	@ (adr r1, 8007cf0 <_printf_i+0x40>)
 8007cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cf0:	08007d49 	.word	0x08007d49
 8007cf4:	08007d5d 	.word	0x08007d5d
 8007cf8:	08007cd9 	.word	0x08007cd9
 8007cfc:	08007cd9 	.word	0x08007cd9
 8007d00:	08007cd9 	.word	0x08007cd9
 8007d04:	08007cd9 	.word	0x08007cd9
 8007d08:	08007d5d 	.word	0x08007d5d
 8007d0c:	08007cd9 	.word	0x08007cd9
 8007d10:	08007cd9 	.word	0x08007cd9
 8007d14:	08007cd9 	.word	0x08007cd9
 8007d18:	08007cd9 	.word	0x08007cd9
 8007d1c:	08007e5d 	.word	0x08007e5d
 8007d20:	08007d87 	.word	0x08007d87
 8007d24:	08007e17 	.word	0x08007e17
 8007d28:	08007cd9 	.word	0x08007cd9
 8007d2c:	08007cd9 	.word	0x08007cd9
 8007d30:	08007e7f 	.word	0x08007e7f
 8007d34:	08007cd9 	.word	0x08007cd9
 8007d38:	08007d87 	.word	0x08007d87
 8007d3c:	08007cd9 	.word	0x08007cd9
 8007d40:	08007cd9 	.word	0x08007cd9
 8007d44:	08007e1f 	.word	0x08007e1f
 8007d48:	6833      	ldr	r3, [r6, #0]
 8007d4a:	1d1a      	adds	r2, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6032      	str	r2, [r6, #0]
 8007d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e09d      	b.n	8007e98 <_printf_i+0x1e8>
 8007d5c:	6833      	ldr	r3, [r6, #0]
 8007d5e:	6820      	ldr	r0, [r4, #0]
 8007d60:	1d19      	adds	r1, r3, #4
 8007d62:	6031      	str	r1, [r6, #0]
 8007d64:	0606      	lsls	r6, r0, #24
 8007d66:	d501      	bpl.n	8007d6c <_printf_i+0xbc>
 8007d68:	681d      	ldr	r5, [r3, #0]
 8007d6a:	e003      	b.n	8007d74 <_printf_i+0xc4>
 8007d6c:	0645      	lsls	r5, r0, #25
 8007d6e:	d5fb      	bpl.n	8007d68 <_printf_i+0xb8>
 8007d70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	da03      	bge.n	8007d80 <_printf_i+0xd0>
 8007d78:	232d      	movs	r3, #45	@ 0x2d
 8007d7a:	426d      	negs	r5, r5
 8007d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d80:	4859      	ldr	r0, [pc, #356]	@ (8007ee8 <_printf_i+0x238>)
 8007d82:	230a      	movs	r3, #10
 8007d84:	e011      	b.n	8007daa <_printf_i+0xfa>
 8007d86:	6821      	ldr	r1, [r4, #0]
 8007d88:	6833      	ldr	r3, [r6, #0]
 8007d8a:	0608      	lsls	r0, r1, #24
 8007d8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d90:	d402      	bmi.n	8007d98 <_printf_i+0xe8>
 8007d92:	0649      	lsls	r1, r1, #25
 8007d94:	bf48      	it	mi
 8007d96:	b2ad      	uxthmi	r5, r5
 8007d98:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d9a:	4853      	ldr	r0, [pc, #332]	@ (8007ee8 <_printf_i+0x238>)
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	bf14      	ite	ne
 8007da0:	230a      	movne	r3, #10
 8007da2:	2308      	moveq	r3, #8
 8007da4:	2100      	movs	r1, #0
 8007da6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007daa:	6866      	ldr	r6, [r4, #4]
 8007dac:	60a6      	str	r6, [r4, #8]
 8007dae:	2e00      	cmp	r6, #0
 8007db0:	bfa2      	ittt	ge
 8007db2:	6821      	ldrge	r1, [r4, #0]
 8007db4:	f021 0104 	bicge.w	r1, r1, #4
 8007db8:	6021      	strge	r1, [r4, #0]
 8007dba:	b90d      	cbnz	r5, 8007dc0 <_printf_i+0x110>
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	d04b      	beq.n	8007e58 <_printf_i+0x1a8>
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007dca:	5dc7      	ldrb	r7, [r0, r7]
 8007dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dd0:	462f      	mov	r7, r5
 8007dd2:	42bb      	cmp	r3, r7
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	d9f4      	bls.n	8007dc2 <_printf_i+0x112>
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d10b      	bne.n	8007df4 <_printf_i+0x144>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	07df      	lsls	r7, r3, #31
 8007de0:	d508      	bpl.n	8007df4 <_printf_i+0x144>
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	6861      	ldr	r1, [r4, #4]
 8007de6:	4299      	cmp	r1, r3
 8007de8:	bfde      	ittt	le
 8007dea:	2330      	movle	r3, #48	@ 0x30
 8007dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007df4:	1b92      	subs	r2, r2, r6
 8007df6:	6122      	str	r2, [r4, #16]
 8007df8:	f8cd a000 	str.w	sl, [sp]
 8007dfc:	464b      	mov	r3, r9
 8007dfe:	aa03      	add	r2, sp, #12
 8007e00:	4621      	mov	r1, r4
 8007e02:	4640      	mov	r0, r8
 8007e04:	f7ff fee6 	bl	8007bd4 <_printf_common>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d14a      	bne.n	8007ea2 <_printf_i+0x1f2>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	b004      	add	sp, #16
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	f043 0320 	orr.w	r3, r3, #32
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	4833      	ldr	r0, [pc, #204]	@ (8007eec <_printf_i+0x23c>)
 8007e20:	2778      	movs	r7, #120	@ 0x78
 8007e22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	6831      	ldr	r1, [r6, #0]
 8007e2a:	061f      	lsls	r7, r3, #24
 8007e2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e30:	d402      	bmi.n	8007e38 <_printf_i+0x188>
 8007e32:	065f      	lsls	r7, r3, #25
 8007e34:	bf48      	it	mi
 8007e36:	b2ad      	uxthmi	r5, r5
 8007e38:	6031      	str	r1, [r6, #0]
 8007e3a:	07d9      	lsls	r1, r3, #31
 8007e3c:	bf44      	itt	mi
 8007e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e42:	6023      	strmi	r3, [r4, #0]
 8007e44:	b11d      	cbz	r5, 8007e4e <_printf_i+0x19e>
 8007e46:	2310      	movs	r3, #16
 8007e48:	e7ac      	b.n	8007da4 <_printf_i+0xf4>
 8007e4a:	4827      	ldr	r0, [pc, #156]	@ (8007ee8 <_printf_i+0x238>)
 8007e4c:	e7e9      	b.n	8007e22 <_printf_i+0x172>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f023 0320 	bic.w	r3, r3, #32
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	e7f6      	b.n	8007e46 <_printf_i+0x196>
 8007e58:	4616      	mov	r6, r2
 8007e5a:	e7bd      	b.n	8007dd8 <_printf_i+0x128>
 8007e5c:	6833      	ldr	r3, [r6, #0]
 8007e5e:	6825      	ldr	r5, [r4, #0]
 8007e60:	6961      	ldr	r1, [r4, #20]
 8007e62:	1d18      	adds	r0, r3, #4
 8007e64:	6030      	str	r0, [r6, #0]
 8007e66:	062e      	lsls	r6, r5, #24
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	d501      	bpl.n	8007e70 <_printf_i+0x1c0>
 8007e6c:	6019      	str	r1, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <_printf_i+0x1c6>
 8007e70:	0668      	lsls	r0, r5, #25
 8007e72:	d5fb      	bpl.n	8007e6c <_printf_i+0x1bc>
 8007e74:	8019      	strh	r1, [r3, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	6123      	str	r3, [r4, #16]
 8007e7a:	4616      	mov	r6, r2
 8007e7c:	e7bc      	b.n	8007df8 <_printf_i+0x148>
 8007e7e:	6833      	ldr	r3, [r6, #0]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	6032      	str	r2, [r6, #0]
 8007e84:	681e      	ldr	r6, [r3, #0]
 8007e86:	6862      	ldr	r2, [r4, #4]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7f8 f9a8 	bl	80001e0 <memchr>
 8007e90:	b108      	cbz	r0, 8007e96 <_printf_i+0x1e6>
 8007e92:	1b80      	subs	r0, r0, r6
 8007e94:	6060      	str	r0, [r4, #4]
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ea0:	e7aa      	b.n	8007df8 <_printf_i+0x148>
 8007ea2:	6923      	ldr	r3, [r4, #16]
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	47d0      	blx	sl
 8007eac:	3001      	adds	r0, #1
 8007eae:	d0ad      	beq.n	8007e0c <_printf_i+0x15c>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	079b      	lsls	r3, r3, #30
 8007eb4:	d413      	bmi.n	8007ede <_printf_i+0x22e>
 8007eb6:	68e0      	ldr	r0, [r4, #12]
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	4298      	cmp	r0, r3
 8007ebc:	bfb8      	it	lt
 8007ebe:	4618      	movlt	r0, r3
 8007ec0:	e7a6      	b.n	8007e10 <_printf_i+0x160>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	47d0      	blx	sl
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d09d      	beq.n	8007e0c <_printf_i+0x15c>
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	68e3      	ldr	r3, [r4, #12]
 8007ed4:	9903      	ldr	r1, [sp, #12]
 8007ed6:	1a5b      	subs	r3, r3, r1
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	dcf2      	bgt.n	8007ec2 <_printf_i+0x212>
 8007edc:	e7eb      	b.n	8007eb6 <_printf_i+0x206>
 8007ede:	2500      	movs	r5, #0
 8007ee0:	f104 0619 	add.w	r6, r4, #25
 8007ee4:	e7f5      	b.n	8007ed2 <_printf_i+0x222>
 8007ee6:	bf00      	nop
 8007ee8:	0800be1e 	.word	0x0800be1e
 8007eec:	0800be2f 	.word	0x0800be2f

08007ef0 <_scanf_float>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	4617      	mov	r7, r2
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	688b      	ldr	r3, [r1, #8]
 8007efc:	1e5a      	subs	r2, r3, #1
 8007efe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f02:	bf81      	itttt	hi
 8007f04:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f08:	eb03 0b05 	addhi.w	fp, r3, r5
 8007f0c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f10:	608b      	strhi	r3, [r1, #8]
 8007f12:	680b      	ldr	r3, [r1, #0]
 8007f14:	460a      	mov	r2, r1
 8007f16:	f04f 0500 	mov.w	r5, #0
 8007f1a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007f1e:	f842 3b1c 	str.w	r3, [r2], #28
 8007f22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f26:	4680      	mov	r8, r0
 8007f28:	460c      	mov	r4, r1
 8007f2a:	bf98      	it	ls
 8007f2c:	f04f 0b00 	movls.w	fp, #0
 8007f30:	9201      	str	r2, [sp, #4]
 8007f32:	4616      	mov	r6, r2
 8007f34:	46aa      	mov	sl, r5
 8007f36:	46a9      	mov	r9, r5
 8007f38:	9502      	str	r5, [sp, #8]
 8007f3a:	68a2      	ldr	r2, [r4, #8]
 8007f3c:	b152      	cbz	r2, 8007f54 <_scanf_float+0x64>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f44:	d864      	bhi.n	8008010 <_scanf_float+0x120>
 8007f46:	2b40      	cmp	r3, #64	@ 0x40
 8007f48:	d83c      	bhi.n	8007fc4 <_scanf_float+0xd4>
 8007f4a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007f4e:	b2c8      	uxtb	r0, r1
 8007f50:	280e      	cmp	r0, #14
 8007f52:	d93a      	bls.n	8007fca <_scanf_float+0xda>
 8007f54:	f1b9 0f00 	cmp.w	r9, #0
 8007f58:	d003      	beq.n	8007f62 <_scanf_float+0x72>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f66:	f1ba 0f01 	cmp.w	sl, #1
 8007f6a:	f200 8117 	bhi.w	800819c <_scanf_float+0x2ac>
 8007f6e:	9b01      	ldr	r3, [sp, #4]
 8007f70:	429e      	cmp	r6, r3
 8007f72:	f200 8108 	bhi.w	8008186 <_scanf_float+0x296>
 8007f76:	2001      	movs	r0, #1
 8007f78:	b007      	add	sp, #28
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007f82:	2a0d      	cmp	r2, #13
 8007f84:	d8e6      	bhi.n	8007f54 <_scanf_float+0x64>
 8007f86:	a101      	add	r1, pc, #4	@ (adr r1, 8007f8c <_scanf_float+0x9c>)
 8007f88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f8c:	080080d3 	.word	0x080080d3
 8007f90:	08007f55 	.word	0x08007f55
 8007f94:	08007f55 	.word	0x08007f55
 8007f98:	08007f55 	.word	0x08007f55
 8007f9c:	08008133 	.word	0x08008133
 8007fa0:	0800810b 	.word	0x0800810b
 8007fa4:	08007f55 	.word	0x08007f55
 8007fa8:	08007f55 	.word	0x08007f55
 8007fac:	080080e1 	.word	0x080080e1
 8007fb0:	08007f55 	.word	0x08007f55
 8007fb4:	08007f55 	.word	0x08007f55
 8007fb8:	08007f55 	.word	0x08007f55
 8007fbc:	08007f55 	.word	0x08007f55
 8007fc0:	08008099 	.word	0x08008099
 8007fc4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007fc8:	e7db      	b.n	8007f82 <_scanf_float+0x92>
 8007fca:	290e      	cmp	r1, #14
 8007fcc:	d8c2      	bhi.n	8007f54 <_scanf_float+0x64>
 8007fce:	a001      	add	r0, pc, #4	@ (adr r0, 8007fd4 <_scanf_float+0xe4>)
 8007fd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007fd4:	08008089 	.word	0x08008089
 8007fd8:	08007f55 	.word	0x08007f55
 8007fdc:	08008089 	.word	0x08008089
 8007fe0:	0800811f 	.word	0x0800811f
 8007fe4:	08007f55 	.word	0x08007f55
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	0800806f 	.word	0x0800806f
 8007ff0:	0800806f 	.word	0x0800806f
 8007ff4:	0800806f 	.word	0x0800806f
 8007ff8:	0800806f 	.word	0x0800806f
 8007ffc:	0800806f 	.word	0x0800806f
 8008000:	0800806f 	.word	0x0800806f
 8008004:	0800806f 	.word	0x0800806f
 8008008:	0800806f 	.word	0x0800806f
 800800c:	0800806f 	.word	0x0800806f
 8008010:	2b6e      	cmp	r3, #110	@ 0x6e
 8008012:	d809      	bhi.n	8008028 <_scanf_float+0x138>
 8008014:	2b60      	cmp	r3, #96	@ 0x60
 8008016:	d8b2      	bhi.n	8007f7e <_scanf_float+0x8e>
 8008018:	2b54      	cmp	r3, #84	@ 0x54
 800801a:	d07b      	beq.n	8008114 <_scanf_float+0x224>
 800801c:	2b59      	cmp	r3, #89	@ 0x59
 800801e:	d199      	bne.n	8007f54 <_scanf_float+0x64>
 8008020:	2d07      	cmp	r5, #7
 8008022:	d197      	bne.n	8007f54 <_scanf_float+0x64>
 8008024:	2508      	movs	r5, #8
 8008026:	e02c      	b.n	8008082 <_scanf_float+0x192>
 8008028:	2b74      	cmp	r3, #116	@ 0x74
 800802a:	d073      	beq.n	8008114 <_scanf_float+0x224>
 800802c:	2b79      	cmp	r3, #121	@ 0x79
 800802e:	e7f6      	b.n	800801e <_scanf_float+0x12e>
 8008030:	6821      	ldr	r1, [r4, #0]
 8008032:	05c8      	lsls	r0, r1, #23
 8008034:	d51b      	bpl.n	800806e <_scanf_float+0x17e>
 8008036:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800803a:	6021      	str	r1, [r4, #0]
 800803c:	f109 0901 	add.w	r9, r9, #1
 8008040:	f1bb 0f00 	cmp.w	fp, #0
 8008044:	d003      	beq.n	800804e <_scanf_float+0x15e>
 8008046:	3201      	adds	r2, #1
 8008048:	f10b 3bff 	add.w	fp, fp, #4294967295
 800804c:	60a2      	str	r2, [r4, #8]
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	3b01      	subs	r3, #1
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	3301      	adds	r3, #1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3b01      	subs	r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	f340 8087 	ble.w	8008174 <_scanf_float+0x284>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	e765      	b.n	8007f3a <_scanf_float+0x4a>
 800806e:	eb1a 0105 	adds.w	r1, sl, r5
 8008072:	f47f af6f 	bne.w	8007f54 <_scanf_float+0x64>
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800807c:	6022      	str	r2, [r4, #0]
 800807e:	460d      	mov	r5, r1
 8008080:	468a      	mov	sl, r1
 8008082:	f806 3b01 	strb.w	r3, [r6], #1
 8008086:	e7e2      	b.n	800804e <_scanf_float+0x15e>
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	0610      	lsls	r0, r2, #24
 800808c:	f57f af62 	bpl.w	8007f54 <_scanf_float+0x64>
 8008090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008094:	6022      	str	r2, [r4, #0]
 8008096:	e7f4      	b.n	8008082 <_scanf_float+0x192>
 8008098:	f1ba 0f00 	cmp.w	sl, #0
 800809c:	d10e      	bne.n	80080bc <_scanf_float+0x1cc>
 800809e:	f1b9 0f00 	cmp.w	r9, #0
 80080a2:	d10e      	bne.n	80080c2 <_scanf_float+0x1d2>
 80080a4:	6822      	ldr	r2, [r4, #0]
 80080a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80080aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80080ae:	d108      	bne.n	80080c2 <_scanf_float+0x1d2>
 80080b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080b4:	6022      	str	r2, [r4, #0]
 80080b6:	f04f 0a01 	mov.w	sl, #1
 80080ba:	e7e2      	b.n	8008082 <_scanf_float+0x192>
 80080bc:	f1ba 0f02 	cmp.w	sl, #2
 80080c0:	d055      	beq.n	800816e <_scanf_float+0x27e>
 80080c2:	2d01      	cmp	r5, #1
 80080c4:	d002      	beq.n	80080cc <_scanf_float+0x1dc>
 80080c6:	2d04      	cmp	r5, #4
 80080c8:	f47f af44 	bne.w	8007f54 <_scanf_float+0x64>
 80080cc:	3501      	adds	r5, #1
 80080ce:	b2ed      	uxtb	r5, r5
 80080d0:	e7d7      	b.n	8008082 <_scanf_float+0x192>
 80080d2:	f1ba 0f01 	cmp.w	sl, #1
 80080d6:	f47f af3d 	bne.w	8007f54 <_scanf_float+0x64>
 80080da:	f04f 0a02 	mov.w	sl, #2
 80080de:	e7d0      	b.n	8008082 <_scanf_float+0x192>
 80080e0:	b97d      	cbnz	r5, 8008102 <_scanf_float+0x212>
 80080e2:	f1b9 0f00 	cmp.w	r9, #0
 80080e6:	f47f af38 	bne.w	8007f5a <_scanf_float+0x6a>
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80080f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80080f4:	f040 8108 	bne.w	8008308 <_scanf_float+0x418>
 80080f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080fc:	6022      	str	r2, [r4, #0]
 80080fe:	2501      	movs	r5, #1
 8008100:	e7bf      	b.n	8008082 <_scanf_float+0x192>
 8008102:	2d03      	cmp	r5, #3
 8008104:	d0e2      	beq.n	80080cc <_scanf_float+0x1dc>
 8008106:	2d05      	cmp	r5, #5
 8008108:	e7de      	b.n	80080c8 <_scanf_float+0x1d8>
 800810a:	2d02      	cmp	r5, #2
 800810c:	f47f af22 	bne.w	8007f54 <_scanf_float+0x64>
 8008110:	2503      	movs	r5, #3
 8008112:	e7b6      	b.n	8008082 <_scanf_float+0x192>
 8008114:	2d06      	cmp	r5, #6
 8008116:	f47f af1d 	bne.w	8007f54 <_scanf_float+0x64>
 800811a:	2507      	movs	r5, #7
 800811c:	e7b1      	b.n	8008082 <_scanf_float+0x192>
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	0591      	lsls	r1, r2, #22
 8008122:	f57f af17 	bpl.w	8007f54 <_scanf_float+0x64>
 8008126:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008130:	e7a7      	b.n	8008082 <_scanf_float+0x192>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008138:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800813c:	d006      	beq.n	800814c <_scanf_float+0x25c>
 800813e:	0550      	lsls	r0, r2, #21
 8008140:	f57f af08 	bpl.w	8007f54 <_scanf_float+0x64>
 8008144:	f1b9 0f00 	cmp.w	r9, #0
 8008148:	f000 80de 	beq.w	8008308 <_scanf_float+0x418>
 800814c:	0591      	lsls	r1, r2, #22
 800814e:	bf58      	it	pl
 8008150:	9902      	ldrpl	r1, [sp, #8]
 8008152:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008156:	bf58      	it	pl
 8008158:	eba9 0101 	subpl.w	r1, r9, r1
 800815c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008160:	bf58      	it	pl
 8008162:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008166:	6022      	str	r2, [r4, #0]
 8008168:	f04f 0900 	mov.w	r9, #0
 800816c:	e789      	b.n	8008082 <_scanf_float+0x192>
 800816e:	f04f 0a03 	mov.w	sl, #3
 8008172:	e786      	b.n	8008082 <_scanf_float+0x192>
 8008174:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008178:	4639      	mov	r1, r7
 800817a:	4640      	mov	r0, r8
 800817c:	4798      	blx	r3
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f aedb 	beq.w	8007f3a <_scanf_float+0x4a>
 8008184:	e6e6      	b.n	8007f54 <_scanf_float+0x64>
 8008186:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800818a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800818e:	463a      	mov	r2, r7
 8008190:	4640      	mov	r0, r8
 8008192:	4798      	blx	r3
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	3b01      	subs	r3, #1
 8008198:	6123      	str	r3, [r4, #16]
 800819a:	e6e8      	b.n	8007f6e <_scanf_float+0x7e>
 800819c:	1e6b      	subs	r3, r5, #1
 800819e:	2b06      	cmp	r3, #6
 80081a0:	d824      	bhi.n	80081ec <_scanf_float+0x2fc>
 80081a2:	2d02      	cmp	r5, #2
 80081a4:	d836      	bhi.n	8008214 <_scanf_float+0x324>
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	429e      	cmp	r6, r3
 80081aa:	f67f aee4 	bls.w	8007f76 <_scanf_float+0x86>
 80081ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081b6:	463a      	mov	r2, r7
 80081b8:	4640      	mov	r0, r8
 80081ba:	4798      	blx	r3
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	3b01      	subs	r3, #1
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	e7f0      	b.n	80081a6 <_scanf_float+0x2b6>
 80081c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80081cc:	463a      	mov	r2, r7
 80081ce:	4640      	mov	r0, r8
 80081d0:	4798      	blx	r3
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081dc:	fa5f fa8a 	uxtb.w	sl, sl
 80081e0:	f1ba 0f02 	cmp.w	sl, #2
 80081e4:	d1ee      	bne.n	80081c4 <_scanf_float+0x2d4>
 80081e6:	3d03      	subs	r5, #3
 80081e8:	b2ed      	uxtb	r5, r5
 80081ea:	1b76      	subs	r6, r6, r5
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	05da      	lsls	r2, r3, #23
 80081f0:	d530      	bpl.n	8008254 <_scanf_float+0x364>
 80081f2:	055b      	lsls	r3, r3, #21
 80081f4:	d511      	bpl.n	800821a <_scanf_float+0x32a>
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	429e      	cmp	r6, r3
 80081fa:	f67f aebc 	bls.w	8007f76 <_scanf_float+0x86>
 80081fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008202:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008206:	463a      	mov	r2, r7
 8008208:	4640      	mov	r0, r8
 800820a:	4798      	blx	r3
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	3b01      	subs	r3, #1
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	e7f0      	b.n	80081f6 <_scanf_float+0x306>
 8008214:	46aa      	mov	sl, r5
 8008216:	46b3      	mov	fp, r6
 8008218:	e7de      	b.n	80081d8 <_scanf_float+0x2e8>
 800821a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	2965      	cmp	r1, #101	@ 0x65
 8008222:	f103 33ff 	add.w	r3, r3, #4294967295
 8008226:	f106 35ff 	add.w	r5, r6, #4294967295
 800822a:	6123      	str	r3, [r4, #16]
 800822c:	d00c      	beq.n	8008248 <_scanf_float+0x358>
 800822e:	2945      	cmp	r1, #69	@ 0x45
 8008230:	d00a      	beq.n	8008248 <_scanf_float+0x358>
 8008232:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008236:	463a      	mov	r2, r7
 8008238:	4640      	mov	r0, r8
 800823a:	4798      	blx	r3
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008242:	3b01      	subs	r3, #1
 8008244:	1eb5      	subs	r5, r6, #2
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800824c:	463a      	mov	r2, r7
 800824e:	4640      	mov	r0, r8
 8008250:	4798      	blx	r3
 8008252:	462e      	mov	r6, r5
 8008254:	6822      	ldr	r2, [r4, #0]
 8008256:	f012 0210 	ands.w	r2, r2, #16
 800825a:	d001      	beq.n	8008260 <_scanf_float+0x370>
 800825c:	2000      	movs	r0, #0
 800825e:	e68b      	b.n	8007f78 <_scanf_float+0x88>
 8008260:	7032      	strb	r2, [r6, #0]
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800826c:	d11c      	bne.n	80082a8 <_scanf_float+0x3b8>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	454b      	cmp	r3, r9
 8008272:	eba3 0209 	sub.w	r2, r3, r9
 8008276:	d123      	bne.n	80082c0 <_scanf_float+0x3d0>
 8008278:	9901      	ldr	r1, [sp, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	4640      	mov	r0, r8
 800827e:	f002 fc2b 	bl	800aad8 <_strtod_r>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	6821      	ldr	r1, [r4, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f011 0f02 	tst.w	r1, #2
 800828c:	ec57 6b10 	vmov	r6, r7, d0
 8008290:	f103 0204 	add.w	r2, r3, #4
 8008294:	d01f      	beq.n	80082d6 <_scanf_float+0x3e6>
 8008296:	9903      	ldr	r1, [sp, #12]
 8008298:	600a      	str	r2, [r1, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	e9c3 6700 	strd	r6, r7, [r3]
 80082a0:	68e3      	ldr	r3, [r4, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60e3      	str	r3, [r4, #12]
 80082a6:	e7d9      	b.n	800825c <_scanf_float+0x36c>
 80082a8:	9b04      	ldr	r3, [sp, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0e4      	beq.n	8008278 <_scanf_float+0x388>
 80082ae:	9905      	ldr	r1, [sp, #20]
 80082b0:	230a      	movs	r3, #10
 80082b2:	3101      	adds	r1, #1
 80082b4:	4640      	mov	r0, r8
 80082b6:	f002 fc8f 	bl	800abd8 <_strtol_r>
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	9e05      	ldr	r6, [sp, #20]
 80082be:	1ac2      	subs	r2, r0, r3
 80082c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80082c4:	429e      	cmp	r6, r3
 80082c6:	bf28      	it	cs
 80082c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80082cc:	4910      	ldr	r1, [pc, #64]	@ (8008310 <_scanf_float+0x420>)
 80082ce:	4630      	mov	r0, r6
 80082d0:	f000 f918 	bl	8008504 <siprintf>
 80082d4:	e7d0      	b.n	8008278 <_scanf_float+0x388>
 80082d6:	f011 0f04 	tst.w	r1, #4
 80082da:	9903      	ldr	r1, [sp, #12]
 80082dc:	600a      	str	r2, [r1, #0]
 80082de:	d1dc      	bne.n	800829a <_scanf_float+0x3aa>
 80082e0:	681d      	ldr	r5, [r3, #0]
 80082e2:	4632      	mov	r2, r6
 80082e4:	463b      	mov	r3, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 fc27 	bl	8000b3c <__aeabi_dcmpun>
 80082ee:	b128      	cbz	r0, 80082fc <_scanf_float+0x40c>
 80082f0:	4808      	ldr	r0, [pc, #32]	@ (8008314 <_scanf_float+0x424>)
 80082f2:	f000 f9eb 	bl	80086cc <nanf>
 80082f6:	ed85 0a00 	vstr	s0, [r5]
 80082fa:	e7d1      	b.n	80082a0 <_scanf_float+0x3b0>
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f8 fc7a 	bl	8000bf8 <__aeabi_d2f>
 8008304:	6028      	str	r0, [r5, #0]
 8008306:	e7cb      	b.n	80082a0 <_scanf_float+0x3b0>
 8008308:	f04f 0900 	mov.w	r9, #0
 800830c:	e629      	b.n	8007f62 <_scanf_float+0x72>
 800830e:	bf00      	nop
 8008310:	0800be40 	.word	0x0800be40
 8008314:	0800c1d5 	.word	0x0800c1d5

08008318 <std>:
 8008318:	2300      	movs	r3, #0
 800831a:	b510      	push	{r4, lr}
 800831c:	4604      	mov	r4, r0
 800831e:	e9c0 3300 	strd	r3, r3, [r0]
 8008322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008326:	6083      	str	r3, [r0, #8]
 8008328:	8181      	strh	r1, [r0, #12]
 800832a:	6643      	str	r3, [r0, #100]	@ 0x64
 800832c:	81c2      	strh	r2, [r0, #14]
 800832e:	6183      	str	r3, [r0, #24]
 8008330:	4619      	mov	r1, r3
 8008332:	2208      	movs	r2, #8
 8008334:	305c      	adds	r0, #92	@ 0x5c
 8008336:	f000 f948 	bl	80085ca <memset>
 800833a:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <std+0x58>)
 800833c:	6263      	str	r3, [r4, #36]	@ 0x24
 800833e:	4b0d      	ldr	r3, [pc, #52]	@ (8008374 <std+0x5c>)
 8008340:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008342:	4b0d      	ldr	r3, [pc, #52]	@ (8008378 <std+0x60>)
 8008344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008346:	4b0d      	ldr	r3, [pc, #52]	@ (800837c <std+0x64>)
 8008348:	6323      	str	r3, [r4, #48]	@ 0x30
 800834a:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <std+0x68>)
 800834c:	6224      	str	r4, [r4, #32]
 800834e:	429c      	cmp	r4, r3
 8008350:	d006      	beq.n	8008360 <std+0x48>
 8008352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008356:	4294      	cmp	r4, r2
 8008358:	d002      	beq.n	8008360 <std+0x48>
 800835a:	33d0      	adds	r3, #208	@ 0xd0
 800835c:	429c      	cmp	r4, r3
 800835e:	d105      	bne.n	800836c <std+0x54>
 8008360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008368:	f000 b9ac 	b.w	80086c4 <__retarget_lock_init_recursive>
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	08008545 	.word	0x08008545
 8008374:	08008567 	.word	0x08008567
 8008378:	0800859f 	.word	0x0800859f
 800837c:	080085c3 	.word	0x080085c3
 8008380:	2000043c 	.word	0x2000043c

08008384 <stdio_exit_handler>:
 8008384:	4a02      	ldr	r2, [pc, #8]	@ (8008390 <stdio_exit_handler+0xc>)
 8008386:	4903      	ldr	r1, [pc, #12]	@ (8008394 <stdio_exit_handler+0x10>)
 8008388:	4803      	ldr	r0, [pc, #12]	@ (8008398 <stdio_exit_handler+0x14>)
 800838a:	f000 b869 	b.w	8008460 <_fwalk_sglue>
 800838e:	bf00      	nop
 8008390:	20000024 	.word	0x20000024
 8008394:	0800af95 	.word	0x0800af95
 8008398:	20000034 	.word	0x20000034

0800839c <cleanup_stdio>:
 800839c:	6841      	ldr	r1, [r0, #4]
 800839e:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <cleanup_stdio+0x34>)
 80083a0:	4299      	cmp	r1, r3
 80083a2:	b510      	push	{r4, lr}
 80083a4:	4604      	mov	r4, r0
 80083a6:	d001      	beq.n	80083ac <cleanup_stdio+0x10>
 80083a8:	f002 fdf4 	bl	800af94 <_fflush_r>
 80083ac:	68a1      	ldr	r1, [r4, #8]
 80083ae:	4b09      	ldr	r3, [pc, #36]	@ (80083d4 <cleanup_stdio+0x38>)
 80083b0:	4299      	cmp	r1, r3
 80083b2:	d002      	beq.n	80083ba <cleanup_stdio+0x1e>
 80083b4:	4620      	mov	r0, r4
 80083b6:	f002 fded 	bl	800af94 <_fflush_r>
 80083ba:	68e1      	ldr	r1, [r4, #12]
 80083bc:	4b06      	ldr	r3, [pc, #24]	@ (80083d8 <cleanup_stdio+0x3c>)
 80083be:	4299      	cmp	r1, r3
 80083c0:	d004      	beq.n	80083cc <cleanup_stdio+0x30>
 80083c2:	4620      	mov	r0, r4
 80083c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c8:	f002 bde4 	b.w	800af94 <_fflush_r>
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	2000043c 	.word	0x2000043c
 80083d4:	200004a4 	.word	0x200004a4
 80083d8:	2000050c 	.word	0x2000050c

080083dc <global_stdio_init.part.0>:
 80083dc:	b510      	push	{r4, lr}
 80083de:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <global_stdio_init.part.0+0x30>)
 80083e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008410 <global_stdio_init.part.0+0x34>)
 80083e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008414 <global_stdio_init.part.0+0x38>)
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	4620      	mov	r0, r4
 80083e8:	2200      	movs	r2, #0
 80083ea:	2104      	movs	r1, #4
 80083ec:	f7ff ff94 	bl	8008318 <std>
 80083f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083f4:	2201      	movs	r2, #1
 80083f6:	2109      	movs	r1, #9
 80083f8:	f7ff ff8e 	bl	8008318 <std>
 80083fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008400:	2202      	movs	r2, #2
 8008402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008406:	2112      	movs	r1, #18
 8008408:	f7ff bf86 	b.w	8008318 <std>
 800840c:	20000574 	.word	0x20000574
 8008410:	2000043c 	.word	0x2000043c
 8008414:	08008385 	.word	0x08008385

08008418 <__sfp_lock_acquire>:
 8008418:	4801      	ldr	r0, [pc, #4]	@ (8008420 <__sfp_lock_acquire+0x8>)
 800841a:	f000 b954 	b.w	80086c6 <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	2000057d 	.word	0x2000057d

08008424 <__sfp_lock_release>:
 8008424:	4801      	ldr	r0, [pc, #4]	@ (800842c <__sfp_lock_release+0x8>)
 8008426:	f000 b94f 	b.w	80086c8 <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	2000057d 	.word	0x2000057d

08008430 <__sinit>:
 8008430:	b510      	push	{r4, lr}
 8008432:	4604      	mov	r4, r0
 8008434:	f7ff fff0 	bl	8008418 <__sfp_lock_acquire>
 8008438:	6a23      	ldr	r3, [r4, #32]
 800843a:	b11b      	cbz	r3, 8008444 <__sinit+0x14>
 800843c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008440:	f7ff bff0 	b.w	8008424 <__sfp_lock_release>
 8008444:	4b04      	ldr	r3, [pc, #16]	@ (8008458 <__sinit+0x28>)
 8008446:	6223      	str	r3, [r4, #32]
 8008448:	4b04      	ldr	r3, [pc, #16]	@ (800845c <__sinit+0x2c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f5      	bne.n	800843c <__sinit+0xc>
 8008450:	f7ff ffc4 	bl	80083dc <global_stdio_init.part.0>
 8008454:	e7f2      	b.n	800843c <__sinit+0xc>
 8008456:	bf00      	nop
 8008458:	0800839d 	.word	0x0800839d
 800845c:	20000574 	.word	0x20000574

08008460 <_fwalk_sglue>:
 8008460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008464:	4607      	mov	r7, r0
 8008466:	4688      	mov	r8, r1
 8008468:	4614      	mov	r4, r2
 800846a:	2600      	movs	r6, #0
 800846c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008470:	f1b9 0901 	subs.w	r9, r9, #1
 8008474:	d505      	bpl.n	8008482 <_fwalk_sglue+0x22>
 8008476:	6824      	ldr	r4, [r4, #0]
 8008478:	2c00      	cmp	r4, #0
 800847a:	d1f7      	bne.n	800846c <_fwalk_sglue+0xc>
 800847c:	4630      	mov	r0, r6
 800847e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d907      	bls.n	8008498 <_fwalk_sglue+0x38>
 8008488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800848c:	3301      	adds	r3, #1
 800848e:	d003      	beq.n	8008498 <_fwalk_sglue+0x38>
 8008490:	4629      	mov	r1, r5
 8008492:	4638      	mov	r0, r7
 8008494:	47c0      	blx	r8
 8008496:	4306      	orrs	r6, r0
 8008498:	3568      	adds	r5, #104	@ 0x68
 800849a:	e7e9      	b.n	8008470 <_fwalk_sglue+0x10>

0800849c <sniprintf>:
 800849c:	b40c      	push	{r2, r3}
 800849e:	b530      	push	{r4, r5, lr}
 80084a0:	4b17      	ldr	r3, [pc, #92]	@ (8008500 <sniprintf+0x64>)
 80084a2:	1e0c      	subs	r4, r1, #0
 80084a4:	681d      	ldr	r5, [r3, #0]
 80084a6:	b09d      	sub	sp, #116	@ 0x74
 80084a8:	da08      	bge.n	80084bc <sniprintf+0x20>
 80084aa:	238b      	movs	r3, #139	@ 0x8b
 80084ac:	602b      	str	r3, [r5, #0]
 80084ae:	f04f 30ff 	mov.w	r0, #4294967295
 80084b2:	b01d      	add	sp, #116	@ 0x74
 80084b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b8:	b002      	add	sp, #8
 80084ba:	4770      	bx	lr
 80084bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084c4:	bf14      	ite	ne
 80084c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084ca:	4623      	moveq	r3, r4
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084d4:	9002      	str	r0, [sp, #8]
 80084d6:	9006      	str	r0, [sp, #24]
 80084d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084de:	ab21      	add	r3, sp, #132	@ 0x84
 80084e0:	a902      	add	r1, sp, #8
 80084e2:	4628      	mov	r0, r5
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	f002 fbd5 	bl	800ac94 <_svfiprintf_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	bfbc      	itt	lt
 80084ee:	238b      	movlt	r3, #139	@ 0x8b
 80084f0:	602b      	strlt	r3, [r5, #0]
 80084f2:	2c00      	cmp	r4, #0
 80084f4:	d0dd      	beq.n	80084b2 <sniprintf+0x16>
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e7d9      	b.n	80084b2 <sniprintf+0x16>
 80084fe:	bf00      	nop
 8008500:	20000030 	.word	0x20000030

08008504 <siprintf>:
 8008504:	b40e      	push	{r1, r2, r3}
 8008506:	b500      	push	{lr}
 8008508:	b09c      	sub	sp, #112	@ 0x70
 800850a:	ab1d      	add	r3, sp, #116	@ 0x74
 800850c:	9002      	str	r0, [sp, #8]
 800850e:	9006      	str	r0, [sp, #24]
 8008510:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008514:	4809      	ldr	r0, [pc, #36]	@ (800853c <siprintf+0x38>)
 8008516:	9107      	str	r1, [sp, #28]
 8008518:	9104      	str	r1, [sp, #16]
 800851a:	4909      	ldr	r1, [pc, #36]	@ (8008540 <siprintf+0x3c>)
 800851c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008520:	9105      	str	r1, [sp, #20]
 8008522:	6800      	ldr	r0, [r0, #0]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	a902      	add	r1, sp, #8
 8008528:	f002 fbb4 	bl	800ac94 <_svfiprintf_r>
 800852c:	9b02      	ldr	r3, [sp, #8]
 800852e:	2200      	movs	r2, #0
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	b01c      	add	sp, #112	@ 0x70
 8008534:	f85d eb04 	ldr.w	lr, [sp], #4
 8008538:	b003      	add	sp, #12
 800853a:	4770      	bx	lr
 800853c:	20000030 	.word	0x20000030
 8008540:	ffff0208 	.word	0xffff0208

08008544 <__sread>:
 8008544:	b510      	push	{r4, lr}
 8008546:	460c      	mov	r4, r1
 8008548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854c:	f000 f86c 	bl	8008628 <_read_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	bfab      	itete	ge
 8008554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008556:	89a3      	ldrhlt	r3, [r4, #12]
 8008558:	181b      	addge	r3, r3, r0
 800855a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800855e:	bfac      	ite	ge
 8008560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008562:	81a3      	strhlt	r3, [r4, #12]
 8008564:	bd10      	pop	{r4, pc}

08008566 <__swrite>:
 8008566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856a:	461f      	mov	r7, r3
 800856c:	898b      	ldrh	r3, [r1, #12]
 800856e:	05db      	lsls	r3, r3, #23
 8008570:	4605      	mov	r5, r0
 8008572:	460c      	mov	r4, r1
 8008574:	4616      	mov	r6, r2
 8008576:	d505      	bpl.n	8008584 <__swrite+0x1e>
 8008578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857c:	2302      	movs	r3, #2
 800857e:	2200      	movs	r2, #0
 8008580:	f000 f840 	bl	8008604 <_lseek_r>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800858a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	4632      	mov	r2, r6
 8008592:	463b      	mov	r3, r7
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800859a:	f000 b857 	b.w	800864c <_write_r>

0800859e <__sseek>:
 800859e:	b510      	push	{r4, lr}
 80085a0:	460c      	mov	r4, r1
 80085a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a6:	f000 f82d 	bl	8008604 <_lseek_r>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	bf15      	itete	ne
 80085b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085ba:	81a3      	strheq	r3, [r4, #12]
 80085bc:	bf18      	it	ne
 80085be:	81a3      	strhne	r3, [r4, #12]
 80085c0:	bd10      	pop	{r4, pc}

080085c2 <__sclose>:
 80085c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c6:	f000 b80d 	b.w	80085e4 <_close_r>

080085ca <memset>:
 80085ca:	4402      	add	r2, r0
 80085cc:	4603      	mov	r3, r0
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d100      	bne.n	80085d4 <memset+0xa>
 80085d2:	4770      	bx	lr
 80085d4:	f803 1b01 	strb.w	r1, [r3], #1
 80085d8:	e7f9      	b.n	80085ce <memset+0x4>
	...

080085dc <_localeconv_r>:
 80085dc:	4800      	ldr	r0, [pc, #0]	@ (80085e0 <_localeconv_r+0x4>)
 80085de:	4770      	bx	lr
 80085e0:	20000170 	.word	0x20000170

080085e4 <_close_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4d06      	ldr	r5, [pc, #24]	@ (8008600 <_close_r+0x1c>)
 80085e8:	2300      	movs	r3, #0
 80085ea:	4604      	mov	r4, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	602b      	str	r3, [r5, #0]
 80085f0:	f7f9 fa26 	bl	8001a40 <_close>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_close_r+0x1a>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_close_r+0x1a>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20000578 	.word	0x20000578

08008604 <_lseek_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d07      	ldr	r5, [pc, #28]	@ (8008624 <_lseek_r+0x20>)
 8008608:	4604      	mov	r4, r0
 800860a:	4608      	mov	r0, r1
 800860c:	4611      	mov	r1, r2
 800860e:	2200      	movs	r2, #0
 8008610:	602a      	str	r2, [r5, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	f7f9 fa3b 	bl	8001a8e <_lseek>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d102      	bne.n	8008622 <_lseek_r+0x1e>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b103      	cbz	r3, 8008622 <_lseek_r+0x1e>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	20000578 	.word	0x20000578

08008628 <_read_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d07      	ldr	r5, [pc, #28]	@ (8008648 <_read_r+0x20>)
 800862c:	4604      	mov	r4, r0
 800862e:	4608      	mov	r0, r1
 8008630:	4611      	mov	r1, r2
 8008632:	2200      	movs	r2, #0
 8008634:	602a      	str	r2, [r5, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	f7f9 f9c9 	bl	80019ce <_read>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d102      	bne.n	8008646 <_read_r+0x1e>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	b103      	cbz	r3, 8008646 <_read_r+0x1e>
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	20000578 	.word	0x20000578

0800864c <_write_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d07      	ldr	r5, [pc, #28]	@ (800866c <_write_r+0x20>)
 8008650:	4604      	mov	r4, r0
 8008652:	4608      	mov	r0, r1
 8008654:	4611      	mov	r1, r2
 8008656:	2200      	movs	r2, #0
 8008658:	602a      	str	r2, [r5, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f7f9 f9d4 	bl	8001a08 <_write>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_write_r+0x1e>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_write_r+0x1e>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	20000578 	.word	0x20000578

08008670 <__errno>:
 8008670:	4b01      	ldr	r3, [pc, #4]	@ (8008678 <__errno+0x8>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	20000030 	.word	0x20000030

0800867c <__libc_init_array>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	4d0d      	ldr	r5, [pc, #52]	@ (80086b4 <__libc_init_array+0x38>)
 8008680:	4c0d      	ldr	r4, [pc, #52]	@ (80086b8 <__libc_init_array+0x3c>)
 8008682:	1b64      	subs	r4, r4, r5
 8008684:	10a4      	asrs	r4, r4, #2
 8008686:	2600      	movs	r6, #0
 8008688:	42a6      	cmp	r6, r4
 800868a:	d109      	bne.n	80086a0 <__libc_init_array+0x24>
 800868c:	4d0b      	ldr	r5, [pc, #44]	@ (80086bc <__libc_init_array+0x40>)
 800868e:	4c0c      	ldr	r4, [pc, #48]	@ (80086c0 <__libc_init_array+0x44>)
 8008690:	f003 fb70 	bl	800bd74 <_init>
 8008694:	1b64      	subs	r4, r4, r5
 8008696:	10a4      	asrs	r4, r4, #2
 8008698:	2600      	movs	r6, #0
 800869a:	42a6      	cmp	r6, r4
 800869c:	d105      	bne.n	80086aa <__libc_init_array+0x2e>
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a4:	4798      	blx	r3
 80086a6:	3601      	adds	r6, #1
 80086a8:	e7ee      	b.n	8008688 <__libc_init_array+0xc>
 80086aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ae:	4798      	blx	r3
 80086b0:	3601      	adds	r6, #1
 80086b2:	e7f2      	b.n	800869a <__libc_init_array+0x1e>
 80086b4:	0800c240 	.word	0x0800c240
 80086b8:	0800c240 	.word	0x0800c240
 80086bc:	0800c240 	.word	0x0800c240
 80086c0:	0800c244 	.word	0x0800c244

080086c4 <__retarget_lock_init_recursive>:
 80086c4:	4770      	bx	lr

080086c6 <__retarget_lock_acquire_recursive>:
 80086c6:	4770      	bx	lr

080086c8 <__retarget_lock_release_recursive>:
 80086c8:	4770      	bx	lr
	...

080086cc <nanf>:
 80086cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80086d4 <nanf+0x8>
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	7fc00000 	.word	0x7fc00000

080086d8 <quorem>:
 80086d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	6903      	ldr	r3, [r0, #16]
 80086de:	690c      	ldr	r4, [r1, #16]
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	4607      	mov	r7, r0
 80086e4:	db7e      	blt.n	80087e4 <quorem+0x10c>
 80086e6:	3c01      	subs	r4, #1
 80086e8:	f101 0814 	add.w	r8, r1, #20
 80086ec:	00a3      	lsls	r3, r4, #2
 80086ee:	f100 0514 	add.w	r5, r0, #20
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008702:	3301      	adds	r3, #1
 8008704:	429a      	cmp	r2, r3
 8008706:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800870a:	fbb2 f6f3 	udiv	r6, r2, r3
 800870e:	d32e      	bcc.n	800876e <quorem+0x96>
 8008710:	f04f 0a00 	mov.w	sl, #0
 8008714:	46c4      	mov	ip, r8
 8008716:	46ae      	mov	lr, r5
 8008718:	46d3      	mov	fp, sl
 800871a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800871e:	b298      	uxth	r0, r3
 8008720:	fb06 a000 	mla	r0, r6, r0, sl
 8008724:	0c02      	lsrs	r2, r0, #16
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	fb06 2303 	mla	r3, r6, r3, r2
 800872c:	f8de 2000 	ldr.w	r2, [lr]
 8008730:	b280      	uxth	r0, r0
 8008732:	b292      	uxth	r2, r2
 8008734:	1a12      	subs	r2, r2, r0
 8008736:	445a      	add	r2, fp
 8008738:	f8de 0000 	ldr.w	r0, [lr]
 800873c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008740:	b29b      	uxth	r3, r3
 8008742:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008746:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800874a:	b292      	uxth	r2, r2
 800874c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008750:	45e1      	cmp	r9, ip
 8008752:	f84e 2b04 	str.w	r2, [lr], #4
 8008756:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800875a:	d2de      	bcs.n	800871a <quorem+0x42>
 800875c:	9b00      	ldr	r3, [sp, #0]
 800875e:	58eb      	ldr	r3, [r5, r3]
 8008760:	b92b      	cbnz	r3, 800876e <quorem+0x96>
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	3b04      	subs	r3, #4
 8008766:	429d      	cmp	r5, r3
 8008768:	461a      	mov	r2, r3
 800876a:	d32f      	bcc.n	80087cc <quorem+0xf4>
 800876c:	613c      	str	r4, [r7, #16]
 800876e:	4638      	mov	r0, r7
 8008770:	f001 f9c2 	bl	8009af8 <__mcmp>
 8008774:	2800      	cmp	r0, #0
 8008776:	db25      	blt.n	80087c4 <quorem+0xec>
 8008778:	4629      	mov	r1, r5
 800877a:	2000      	movs	r0, #0
 800877c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008780:	f8d1 c000 	ldr.w	ip, [r1]
 8008784:	fa1f fe82 	uxth.w	lr, r2
 8008788:	fa1f f38c 	uxth.w	r3, ip
 800878c:	eba3 030e 	sub.w	r3, r3, lr
 8008790:	4403      	add	r3, r0
 8008792:	0c12      	lsrs	r2, r2, #16
 8008794:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008798:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800879c:	b29b      	uxth	r3, r3
 800879e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087a2:	45c1      	cmp	r9, r8
 80087a4:	f841 3b04 	str.w	r3, [r1], #4
 80087a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087ac:	d2e6      	bcs.n	800877c <quorem+0xa4>
 80087ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087b6:	b922      	cbnz	r2, 80087c2 <quorem+0xea>
 80087b8:	3b04      	subs	r3, #4
 80087ba:	429d      	cmp	r5, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	d30b      	bcc.n	80087d8 <quorem+0x100>
 80087c0:	613c      	str	r4, [r7, #16]
 80087c2:	3601      	adds	r6, #1
 80087c4:	4630      	mov	r0, r6
 80087c6:	b003      	add	sp, #12
 80087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	6812      	ldr	r2, [r2, #0]
 80087ce:	3b04      	subs	r3, #4
 80087d0:	2a00      	cmp	r2, #0
 80087d2:	d1cb      	bne.n	800876c <quorem+0x94>
 80087d4:	3c01      	subs	r4, #1
 80087d6:	e7c6      	b.n	8008766 <quorem+0x8e>
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	3b04      	subs	r3, #4
 80087dc:	2a00      	cmp	r2, #0
 80087de:	d1ef      	bne.n	80087c0 <quorem+0xe8>
 80087e0:	3c01      	subs	r4, #1
 80087e2:	e7ea      	b.n	80087ba <quorem+0xe2>
 80087e4:	2000      	movs	r0, #0
 80087e6:	e7ee      	b.n	80087c6 <quorem+0xee>

080087e8 <_dtoa_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	69c7      	ldr	r7, [r0, #28]
 80087ee:	b099      	sub	sp, #100	@ 0x64
 80087f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80087f4:	ec55 4b10 	vmov	r4, r5, d0
 80087f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80087fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80087fc:	4683      	mov	fp, r0
 80087fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008800:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008802:	b97f      	cbnz	r7, 8008824 <_dtoa_r+0x3c>
 8008804:	2010      	movs	r0, #16
 8008806:	f000 fdfd 	bl	8009404 <malloc>
 800880a:	4602      	mov	r2, r0
 800880c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008810:	b920      	cbnz	r0, 800881c <_dtoa_r+0x34>
 8008812:	4ba7      	ldr	r3, [pc, #668]	@ (8008ab0 <_dtoa_r+0x2c8>)
 8008814:	21ef      	movs	r1, #239	@ 0xef
 8008816:	48a7      	ldr	r0, [pc, #668]	@ (8008ab4 <_dtoa_r+0x2cc>)
 8008818:	f002 fc36 	bl	800b088 <__assert_func>
 800881c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008820:	6007      	str	r7, [r0, #0]
 8008822:	60c7      	str	r7, [r0, #12]
 8008824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008828:	6819      	ldr	r1, [r3, #0]
 800882a:	b159      	cbz	r1, 8008844 <_dtoa_r+0x5c>
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	604a      	str	r2, [r1, #4]
 8008830:	2301      	movs	r3, #1
 8008832:	4093      	lsls	r3, r2
 8008834:	608b      	str	r3, [r1, #8]
 8008836:	4658      	mov	r0, fp
 8008838:	f000 feda 	bl	80095f0 <_Bfree>
 800883c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	1e2b      	subs	r3, r5, #0
 8008846:	bfb9      	ittee	lt
 8008848:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800884c:	9303      	strlt	r3, [sp, #12]
 800884e:	2300      	movge	r3, #0
 8008850:	6033      	strge	r3, [r6, #0]
 8008852:	9f03      	ldr	r7, [sp, #12]
 8008854:	4b98      	ldr	r3, [pc, #608]	@ (8008ab8 <_dtoa_r+0x2d0>)
 8008856:	bfbc      	itt	lt
 8008858:	2201      	movlt	r2, #1
 800885a:	6032      	strlt	r2, [r6, #0]
 800885c:	43bb      	bics	r3, r7
 800885e:	d112      	bne.n	8008886 <_dtoa_r+0x9e>
 8008860:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008862:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800886c:	4323      	orrs	r3, r4
 800886e:	f000 854d 	beq.w	800930c <_dtoa_r+0xb24>
 8008872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008874:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008acc <_dtoa_r+0x2e4>
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 854f 	beq.w	800931c <_dtoa_r+0xb34>
 800887e:	f10a 0303 	add.w	r3, sl, #3
 8008882:	f000 bd49 	b.w	8009318 <_dtoa_r+0xb30>
 8008886:	ed9d 7b02 	vldr	d7, [sp, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	ec51 0b17 	vmov	r0, r1, d7
 8008890:	2300      	movs	r3, #0
 8008892:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008896:	f7f8 f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800889a:	4680      	mov	r8, r0
 800889c:	b158      	cbz	r0, 80088b6 <_dtoa_r+0xce>
 800889e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088a0:	2301      	movs	r3, #1
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088a6:	b113      	cbz	r3, 80088ae <_dtoa_r+0xc6>
 80088a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088aa:	4b84      	ldr	r3, [pc, #528]	@ (8008abc <_dtoa_r+0x2d4>)
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008ad0 <_dtoa_r+0x2e8>
 80088b2:	f000 bd33 	b.w	800931c <_dtoa_r+0xb34>
 80088b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80088ba:	aa16      	add	r2, sp, #88	@ 0x58
 80088bc:	a917      	add	r1, sp, #92	@ 0x5c
 80088be:	4658      	mov	r0, fp
 80088c0:	f001 fa3a 	bl	8009d38 <__d2b>
 80088c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80088c8:	4681      	mov	r9, r0
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d077      	beq.n	80089be <_dtoa_r+0x1d6>
 80088ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80088d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80088e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80088e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80088e8:	4619      	mov	r1, r3
 80088ea:	2200      	movs	r2, #0
 80088ec:	4b74      	ldr	r3, [pc, #464]	@ (8008ac0 <_dtoa_r+0x2d8>)
 80088ee:	f7f7 fcd3 	bl	8000298 <__aeabi_dsub>
 80088f2:	a369      	add	r3, pc, #420	@ (adr r3, 8008a98 <_dtoa_r+0x2b0>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 fe86 	bl	8000608 <__aeabi_dmul>
 80088fc:	a368      	add	r3, pc, #416	@ (adr r3, 8008aa0 <_dtoa_r+0x2b8>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fccb 	bl	800029c <__adddf3>
 8008906:	4604      	mov	r4, r0
 8008908:	4630      	mov	r0, r6
 800890a:	460d      	mov	r5, r1
 800890c:	f7f7 fe12 	bl	8000534 <__aeabi_i2d>
 8008910:	a365      	add	r3, pc, #404	@ (adr r3, 8008aa8 <_dtoa_r+0x2c0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fe77 	bl	8000608 <__aeabi_dmul>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fcbb 	bl	800029c <__adddf3>
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	f7f8 f91d 	bl	8000b68 <__aeabi_d2iz>
 800892e:	2200      	movs	r2, #0
 8008930:	4607      	mov	r7, r0
 8008932:	2300      	movs	r3, #0
 8008934:	4620      	mov	r0, r4
 8008936:	4629      	mov	r1, r5
 8008938:	f7f8 f8d8 	bl	8000aec <__aeabi_dcmplt>
 800893c:	b140      	cbz	r0, 8008950 <_dtoa_r+0x168>
 800893e:	4638      	mov	r0, r7
 8008940:	f7f7 fdf8 	bl	8000534 <__aeabi_i2d>
 8008944:	4622      	mov	r2, r4
 8008946:	462b      	mov	r3, r5
 8008948:	f7f8 f8c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800894c:	b900      	cbnz	r0, 8008950 <_dtoa_r+0x168>
 800894e:	3f01      	subs	r7, #1
 8008950:	2f16      	cmp	r7, #22
 8008952:	d851      	bhi.n	80089f8 <_dtoa_r+0x210>
 8008954:	4b5b      	ldr	r3, [pc, #364]	@ (8008ac4 <_dtoa_r+0x2dc>)
 8008956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008962:	f7f8 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d048      	beq.n	80089fc <_dtoa_r+0x214>
 800896a:	3f01      	subs	r7, #1
 800896c:	2300      	movs	r3, #0
 800896e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008970:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008972:	1b9b      	subs	r3, r3, r6
 8008974:	1e5a      	subs	r2, r3, #1
 8008976:	bf44      	itt	mi
 8008978:	f1c3 0801 	rsbmi	r8, r3, #1
 800897c:	2300      	movmi	r3, #0
 800897e:	9208      	str	r2, [sp, #32]
 8008980:	bf54      	ite	pl
 8008982:	f04f 0800 	movpl.w	r8, #0
 8008986:	9308      	strmi	r3, [sp, #32]
 8008988:	2f00      	cmp	r7, #0
 800898a:	db39      	blt.n	8008a00 <_dtoa_r+0x218>
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008990:	443b      	add	r3, r7
 8008992:	9308      	str	r3, [sp, #32]
 8008994:	2300      	movs	r3, #0
 8008996:	930a      	str	r3, [sp, #40]	@ 0x28
 8008998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800899a:	2b09      	cmp	r3, #9
 800899c:	d864      	bhi.n	8008a68 <_dtoa_r+0x280>
 800899e:	2b05      	cmp	r3, #5
 80089a0:	bfc4      	itt	gt
 80089a2:	3b04      	subgt	r3, #4
 80089a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	f1a3 0302 	sub.w	r3, r3, #2
 80089ac:	bfcc      	ite	gt
 80089ae:	2400      	movgt	r4, #0
 80089b0:	2401      	movle	r4, #1
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d863      	bhi.n	8008a7e <_dtoa_r+0x296>
 80089b6:	e8df f003 	tbb	[pc, r3]
 80089ba:	372a      	.short	0x372a
 80089bc:	5535      	.short	0x5535
 80089be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80089c2:	441e      	add	r6, r3
 80089c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	bfc1      	itttt	gt
 80089cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80089d0:	409f      	lslgt	r7, r3
 80089d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80089d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80089da:	bfd6      	itet	le
 80089dc:	f1c3 0320 	rsble	r3, r3, #32
 80089e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80089e4:	fa04 f003 	lslle.w	r0, r4, r3
 80089e8:	f7f7 fd94 	bl	8000514 <__aeabi_ui2d>
 80089ec:	2201      	movs	r2, #1
 80089ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80089f2:	3e01      	subs	r6, #1
 80089f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80089f6:	e777      	b.n	80088e8 <_dtoa_r+0x100>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e7b8      	b.n	800896e <_dtoa_r+0x186>
 80089fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80089fe:	e7b7      	b.n	8008970 <_dtoa_r+0x188>
 8008a00:	427b      	negs	r3, r7
 8008a02:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a04:	2300      	movs	r3, #0
 8008a06:	eba8 0807 	sub.w	r8, r8, r7
 8008a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a0c:	e7c4      	b.n	8008998 <_dtoa_r+0x1b0>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc35      	bgt.n	8008a84 <_dtoa_r+0x29c>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	9307      	str	r3, [sp, #28]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a22:	e00b      	b.n	8008a3c <_dtoa_r+0x254>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e7f3      	b.n	8008a10 <_dtoa_r+0x228>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a2e:	18fb      	adds	r3, r7, r3
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	bfb8      	it	lt
 8008a3a:	2301      	movlt	r3, #1
 8008a3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a40:	2100      	movs	r1, #0
 8008a42:	2204      	movs	r2, #4
 8008a44:	f102 0514 	add.w	r5, r2, #20
 8008a48:	429d      	cmp	r5, r3
 8008a4a:	d91f      	bls.n	8008a8c <_dtoa_r+0x2a4>
 8008a4c:	6041      	str	r1, [r0, #4]
 8008a4e:	4658      	mov	r0, fp
 8008a50:	f000 fd8e 	bl	8009570 <_Balloc>
 8008a54:	4682      	mov	sl, r0
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d13c      	bne.n	8008ad4 <_dtoa_r+0x2ec>
 8008a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac8 <_dtoa_r+0x2e0>)
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a62:	e6d8      	b.n	8008816 <_dtoa_r+0x2e>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e7e0      	b.n	8008a2a <_dtoa_r+0x242>
 8008a68:	2401      	movs	r4, #1
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a70:	f04f 33ff 	mov.w	r3, #4294967295
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	9307      	str	r3, [sp, #28]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2312      	movs	r3, #18
 8008a7c:	e7d0      	b.n	8008a20 <_dtoa_r+0x238>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a82:	e7f5      	b.n	8008a70 <_dtoa_r+0x288>
 8008a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	9307      	str	r3, [sp, #28]
 8008a8a:	e7d7      	b.n	8008a3c <_dtoa_r+0x254>
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	0052      	lsls	r2, r2, #1
 8008a90:	e7d8      	b.n	8008a44 <_dtoa_r+0x25c>
 8008a92:	bf00      	nop
 8008a94:	f3af 8000 	nop.w
 8008a98:	636f4361 	.word	0x636f4361
 8008a9c:	3fd287a7 	.word	0x3fd287a7
 8008aa0:	8b60c8b3 	.word	0x8b60c8b3
 8008aa4:	3fc68a28 	.word	0x3fc68a28
 8008aa8:	509f79fb 	.word	0x509f79fb
 8008aac:	3fd34413 	.word	0x3fd34413
 8008ab0:	0800be52 	.word	0x0800be52
 8008ab4:	0800be69 	.word	0x0800be69
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	0800be1d 	.word	0x0800be1d
 8008ac0:	3ff80000 	.word	0x3ff80000
 8008ac4:	0800bf60 	.word	0x0800bf60
 8008ac8:	0800bec1 	.word	0x0800bec1
 8008acc:	0800be4e 	.word	0x0800be4e
 8008ad0:	0800be1c 	.word	0x0800be1c
 8008ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ad8:	6018      	str	r0, [r3, #0]
 8008ada:	9b07      	ldr	r3, [sp, #28]
 8008adc:	2b0e      	cmp	r3, #14
 8008ade:	f200 80a4 	bhi.w	8008c2a <_dtoa_r+0x442>
 8008ae2:	2c00      	cmp	r4, #0
 8008ae4:	f000 80a1 	beq.w	8008c2a <_dtoa_r+0x442>
 8008ae8:	2f00      	cmp	r7, #0
 8008aea:	dd33      	ble.n	8008b54 <_dtoa_r+0x36c>
 8008aec:	4bad      	ldr	r3, [pc, #692]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008aee:	f007 020f 	and.w	r2, r7, #15
 8008af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008af6:	ed93 7b00 	vldr	d7, [r3]
 8008afa:	05f8      	lsls	r0, r7, #23
 8008afc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b04:	d516      	bpl.n	8008b34 <_dtoa_r+0x34c>
 8008b06:	4ba8      	ldr	r3, [pc, #672]	@ (8008da8 <_dtoa_r+0x5c0>)
 8008b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b10:	f7f7 fea4 	bl	800085c <__aeabi_ddiv>
 8008b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b18:	f004 040f 	and.w	r4, r4, #15
 8008b1c:	2603      	movs	r6, #3
 8008b1e:	4da2      	ldr	r5, [pc, #648]	@ (8008da8 <_dtoa_r+0x5c0>)
 8008b20:	b954      	cbnz	r4, 8008b38 <_dtoa_r+0x350>
 8008b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2a:	f7f7 fe97 	bl	800085c <__aeabi_ddiv>
 8008b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b32:	e028      	b.n	8008b86 <_dtoa_r+0x39e>
 8008b34:	2602      	movs	r6, #2
 8008b36:	e7f2      	b.n	8008b1e <_dtoa_r+0x336>
 8008b38:	07e1      	lsls	r1, r4, #31
 8008b3a:	d508      	bpl.n	8008b4e <_dtoa_r+0x366>
 8008b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b44:	f7f7 fd60 	bl	8000608 <__aeabi_dmul>
 8008b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	1064      	asrs	r4, r4, #1
 8008b50:	3508      	adds	r5, #8
 8008b52:	e7e5      	b.n	8008b20 <_dtoa_r+0x338>
 8008b54:	f000 80d2 	beq.w	8008cfc <_dtoa_r+0x514>
 8008b58:	427c      	negs	r4, r7
 8008b5a:	4b92      	ldr	r3, [pc, #584]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008b5c:	4d92      	ldr	r5, [pc, #584]	@ (8008da8 <_dtoa_r+0x5c0>)
 8008b5e:	f004 020f 	and.w	r2, r4, #15
 8008b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b6e:	f7f7 fd4b 	bl	8000608 <__aeabi_dmul>
 8008b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b76:	1124      	asrs	r4, r4, #4
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2602      	movs	r6, #2
 8008b7c:	2c00      	cmp	r4, #0
 8008b7e:	f040 80b2 	bne.w	8008ce6 <_dtoa_r+0x4fe>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1d3      	bne.n	8008b2e <_dtoa_r+0x346>
 8008b86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 80b7 	beq.w	8008d00 <_dtoa_r+0x518>
 8008b92:	4b86      	ldr	r3, [pc, #536]	@ (8008dac <_dtoa_r+0x5c4>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 ffa7 	bl	8000aec <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f000 80ae 	beq.w	8008d00 <_dtoa_r+0x518>
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80aa 	beq.w	8008d00 <_dtoa_r+0x518>
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dd37      	ble.n	8008c22 <_dtoa_r+0x43a>
 8008bb2:	1e7b      	subs	r3, r7, #1
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4b7d      	ldr	r3, [pc, #500]	@ (8008db0 <_dtoa_r+0x5c8>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f7f7 fd23 	bl	8000608 <__aeabi_dmul>
 8008bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc6:	9c00      	ldr	r4, [sp, #0]
 8008bc8:	3601      	adds	r6, #1
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7f7 fcb2 	bl	8000534 <__aeabi_i2d>
 8008bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd4:	f7f7 fd18 	bl	8000608 <__aeabi_dmul>
 8008bd8:	4b76      	ldr	r3, [pc, #472]	@ (8008db4 <_dtoa_r+0x5cc>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f7f7 fb5e 	bl	800029c <__adddf3>
 8008be0:	4605      	mov	r5, r0
 8008be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	f040 808d 	bne.w	8008d06 <_dtoa_r+0x51e>
 8008bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf0:	4b71      	ldr	r3, [pc, #452]	@ (8008db8 <_dtoa_r+0x5d0>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7f7 fb50 	bl	8000298 <__aeabi_dsub>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c00:	462a      	mov	r2, r5
 8008c02:	4633      	mov	r3, r6
 8008c04:	f7f7 ff90 	bl	8000b28 <__aeabi_dcmpgt>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f040 828b 	bne.w	8009124 <_dtoa_r+0x93c>
 8008c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c12:	462a      	mov	r2, r5
 8008c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c18:	f7f7 ff68 	bl	8000aec <__aeabi_dcmplt>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	f040 8128 	bne.w	8008e72 <_dtoa_r+0x68a>
 8008c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f2c0 815a 	blt.w	8008ee6 <_dtoa_r+0x6fe>
 8008c32:	2f0e      	cmp	r7, #14
 8008c34:	f300 8157 	bgt.w	8008ee6 <_dtoa_r+0x6fe>
 8008c38:	4b5a      	ldr	r3, [pc, #360]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c3e:	ed93 7b00 	vldr	d7, [r3]
 8008c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	ed8d 7b00 	vstr	d7, [sp]
 8008c4a:	da03      	bge.n	8008c54 <_dtoa_r+0x46c>
 8008c4c:	9b07      	ldr	r3, [sp, #28]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f340 8101 	ble.w	8008e56 <_dtoa_r+0x66e>
 8008c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c58:	4656      	mov	r6, sl
 8008c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fdfb 	bl	800085c <__aeabi_ddiv>
 8008c66:	f7f7 ff7f 	bl	8000b68 <__aeabi_d2iz>
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	f7f7 fc62 	bl	8000534 <__aeabi_i2d>
 8008c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c74:	f7f7 fcc8 	bl	8000608 <__aeabi_dmul>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c84:	f7f7 fb08 	bl	8000298 <__aeabi_dsub>
 8008c88:	f806 4b01 	strb.w	r4, [r6], #1
 8008c8c:	9d07      	ldr	r5, [sp, #28]
 8008c8e:	eba6 040a 	sub.w	r4, r6, sl
 8008c92:	42a5      	cmp	r5, r4
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	f040 8117 	bne.w	8008eca <_dtoa_r+0x6e2>
 8008c9c:	f7f7 fafe 	bl	800029c <__adddf3>
 8008ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	f7f7 ff3e 	bl	8000b28 <__aeabi_dcmpgt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f040 80f9 	bne.w	8008ea4 <_dtoa_r+0x6bc>
 8008cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	f7f7 ff0d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cbe:	b118      	cbz	r0, 8008cc8 <_dtoa_r+0x4e0>
 8008cc0:	f018 0f01 	tst.w	r8, #1
 8008cc4:	f040 80ee 	bne.w	8008ea4 <_dtoa_r+0x6bc>
 8008cc8:	4649      	mov	r1, r9
 8008cca:	4658      	mov	r0, fp
 8008ccc:	f000 fc90 	bl	80095f0 <_Bfree>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	7033      	strb	r3, [r6, #0]
 8008cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cd6:	3701      	adds	r7, #1
 8008cd8:	601f      	str	r7, [r3, #0]
 8008cda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 831d 	beq.w	800931c <_dtoa_r+0xb34>
 8008ce2:	601e      	str	r6, [r3, #0]
 8008ce4:	e31a      	b.n	800931c <_dtoa_r+0xb34>
 8008ce6:	07e2      	lsls	r2, r4, #31
 8008ce8:	d505      	bpl.n	8008cf6 <_dtoa_r+0x50e>
 8008cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	3601      	adds	r6, #1
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	1064      	asrs	r4, r4, #1
 8008cf8:	3508      	adds	r5, #8
 8008cfa:	e73f      	b.n	8008b7c <_dtoa_r+0x394>
 8008cfc:	2602      	movs	r6, #2
 8008cfe:	e742      	b.n	8008b86 <_dtoa_r+0x39e>
 8008d00:	9c07      	ldr	r4, [sp, #28]
 8008d02:	9704      	str	r7, [sp, #16]
 8008d04:	e761      	b.n	8008bca <_dtoa_r+0x3e2>
 8008d06:	4b27      	ldr	r3, [pc, #156]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008d08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d12:	4454      	add	r4, sl
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d053      	beq.n	8008dc0 <_dtoa_r+0x5d8>
 8008d18:	4928      	ldr	r1, [pc, #160]	@ (8008dbc <_dtoa_r+0x5d4>)
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	f7f7 fd9e 	bl	800085c <__aeabi_ddiv>
 8008d20:	4633      	mov	r3, r6
 8008d22:	462a      	mov	r2, r5
 8008d24:	f7f7 fab8 	bl	8000298 <__aeabi_dsub>
 8008d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d2c:	4656      	mov	r6, sl
 8008d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d32:	f7f7 ff19 	bl	8000b68 <__aeabi_d2iz>
 8008d36:	4605      	mov	r5, r0
 8008d38:	f7f7 fbfc 	bl	8000534 <__aeabi_i2d>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d44:	f7f7 faa8 	bl	8000298 <__aeabi_dsub>
 8008d48:	3530      	adds	r5, #48	@ 0x30
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d52:	f806 5b01 	strb.w	r5, [r6], #1
 8008d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d5a:	f7f7 fec7 	bl	8000aec <__aeabi_dcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d171      	bne.n	8008e46 <_dtoa_r+0x65e>
 8008d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d66:	4911      	ldr	r1, [pc, #68]	@ (8008dac <_dtoa_r+0x5c4>)
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f7f7 fa95 	bl	8000298 <__aeabi_dsub>
 8008d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d72:	f7f7 febb 	bl	8000aec <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f040 8095 	bne.w	8008ea6 <_dtoa_r+0x6be>
 8008d7c:	42a6      	cmp	r6, r4
 8008d7e:	f43f af50 	beq.w	8008c22 <_dtoa_r+0x43a>
 8008d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d86:	4b0a      	ldr	r3, [pc, #40]	@ (8008db0 <_dtoa_r+0x5c8>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f7f7 fc3d 	bl	8000608 <__aeabi_dmul>
 8008d8e:	4b08      	ldr	r3, [pc, #32]	@ (8008db0 <_dtoa_r+0x5c8>)
 8008d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d94:	2200      	movs	r2, #0
 8008d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d9a:	f7f7 fc35 	bl	8000608 <__aeabi_dmul>
 8008d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da2:	e7c4      	b.n	8008d2e <_dtoa_r+0x546>
 8008da4:	0800bf60 	.word	0x0800bf60
 8008da8:	0800bf38 	.word	0x0800bf38
 8008dac:	3ff00000 	.word	0x3ff00000
 8008db0:	40240000 	.word	0x40240000
 8008db4:	401c0000 	.word	0x401c0000
 8008db8:	40140000 	.word	0x40140000
 8008dbc:	3fe00000 	.word	0x3fe00000
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f7f7 fc20 	bl	8000608 <__aeabi_dmul>
 8008dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8008dce:	4656      	mov	r6, sl
 8008dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd4:	f7f7 fec8 	bl	8000b68 <__aeabi_d2iz>
 8008dd8:	4605      	mov	r5, r0
 8008dda:	f7f7 fbab 	bl	8000534 <__aeabi_i2d>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de6:	f7f7 fa57 	bl	8000298 <__aeabi_dsub>
 8008dea:	3530      	adds	r5, #48	@ 0x30
 8008dec:	f806 5b01 	strb.w	r5, [r6], #1
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	42a6      	cmp	r6, r4
 8008df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	d124      	bne.n	8008e4a <_dtoa_r+0x662>
 8008e00:	4bac      	ldr	r3, [pc, #688]	@ (80090b4 <_dtoa_r+0x8cc>)
 8008e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e06:	f7f7 fa49 	bl	800029c <__adddf3>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e12:	f7f7 fe89 	bl	8000b28 <__aeabi_dcmpgt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d145      	bne.n	8008ea6 <_dtoa_r+0x6be>
 8008e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e1e:	49a5      	ldr	r1, [pc, #660]	@ (80090b4 <_dtoa_r+0x8cc>)
 8008e20:	2000      	movs	r0, #0
 8008e22:	f7f7 fa39 	bl	8000298 <__aeabi_dsub>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2e:	f7f7 fe5d 	bl	8000aec <__aeabi_dcmplt>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f43f aef5 	beq.w	8008c22 <_dtoa_r+0x43a>
 8008e38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e3a:	1e73      	subs	r3, r6, #1
 8008e3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e42:	2b30      	cmp	r3, #48	@ 0x30
 8008e44:	d0f8      	beq.n	8008e38 <_dtoa_r+0x650>
 8008e46:	9f04      	ldr	r7, [sp, #16]
 8008e48:	e73e      	b.n	8008cc8 <_dtoa_r+0x4e0>
 8008e4a:	4b9b      	ldr	r3, [pc, #620]	@ (80090b8 <_dtoa_r+0x8d0>)
 8008e4c:	f7f7 fbdc 	bl	8000608 <__aeabi_dmul>
 8008e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e54:	e7bc      	b.n	8008dd0 <_dtoa_r+0x5e8>
 8008e56:	d10c      	bne.n	8008e72 <_dtoa_r+0x68a>
 8008e58:	4b98      	ldr	r3, [pc, #608]	@ (80090bc <_dtoa_r+0x8d4>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e60:	f7f7 fbd2 	bl	8000608 <__aeabi_dmul>
 8008e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e68:	f7f7 fe54 	bl	8000b14 <__aeabi_dcmpge>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f000 8157 	beq.w	8009120 <_dtoa_r+0x938>
 8008e72:	2400      	movs	r4, #0
 8008e74:	4625      	mov	r5, r4
 8008e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e78:	43db      	mvns	r3, r3
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	4656      	mov	r6, sl
 8008e7e:	2700      	movs	r7, #0
 8008e80:	4621      	mov	r1, r4
 8008e82:	4658      	mov	r0, fp
 8008e84:	f000 fbb4 	bl	80095f0 <_Bfree>
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	d0dc      	beq.n	8008e46 <_dtoa_r+0x65e>
 8008e8c:	b12f      	cbz	r7, 8008e9a <_dtoa_r+0x6b2>
 8008e8e:	42af      	cmp	r7, r5
 8008e90:	d003      	beq.n	8008e9a <_dtoa_r+0x6b2>
 8008e92:	4639      	mov	r1, r7
 8008e94:	4658      	mov	r0, fp
 8008e96:	f000 fbab 	bl	80095f0 <_Bfree>
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4658      	mov	r0, fp
 8008e9e:	f000 fba7 	bl	80095f0 <_Bfree>
 8008ea2:	e7d0      	b.n	8008e46 <_dtoa_r+0x65e>
 8008ea4:	9704      	str	r7, [sp, #16]
 8008ea6:	4633      	mov	r3, r6
 8008ea8:	461e      	mov	r6, r3
 8008eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eae:	2a39      	cmp	r2, #57	@ 0x39
 8008eb0:	d107      	bne.n	8008ec2 <_dtoa_r+0x6da>
 8008eb2:	459a      	cmp	sl, r3
 8008eb4:	d1f8      	bne.n	8008ea8 <_dtoa_r+0x6c0>
 8008eb6:	9a04      	ldr	r2, [sp, #16]
 8008eb8:	3201      	adds	r2, #1
 8008eba:	9204      	str	r2, [sp, #16]
 8008ebc:	2230      	movs	r2, #48	@ 0x30
 8008ebe:	f88a 2000 	strb.w	r2, [sl]
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e7bd      	b.n	8008e46 <_dtoa_r+0x65e>
 8008eca:	4b7b      	ldr	r3, [pc, #492]	@ (80090b8 <_dtoa_r+0x8d0>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f7f7 fb9b 	bl	8000608 <__aeabi_dmul>
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	f7f7 fdfd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f43f aebb 	beq.w	8008c5a <_dtoa_r+0x472>
 8008ee4:	e6f0      	b.n	8008cc8 <_dtoa_r+0x4e0>
 8008ee6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	f000 80db 	beq.w	80090a4 <_dtoa_r+0x8bc>
 8008eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef0:	2a01      	cmp	r2, #1
 8008ef2:	f300 80bf 	bgt.w	8009074 <_dtoa_r+0x88c>
 8008ef6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	f000 80b7 	beq.w	800906c <_dtoa_r+0x884>
 8008efe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f04:	4646      	mov	r6, r8
 8008f06:	9a08      	ldr	r2, [sp, #32]
 8008f08:	2101      	movs	r1, #1
 8008f0a:	441a      	add	r2, r3
 8008f0c:	4658      	mov	r0, fp
 8008f0e:	4498      	add	r8, r3
 8008f10:	9208      	str	r2, [sp, #32]
 8008f12:	f000 fc6b 	bl	80097ec <__i2b>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b15e      	cbz	r6, 8008f32 <_dtoa_r+0x74a>
 8008f1a:	9b08      	ldr	r3, [sp, #32]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd08      	ble.n	8008f32 <_dtoa_r+0x74a>
 8008f20:	42b3      	cmp	r3, r6
 8008f22:	9a08      	ldr	r2, [sp, #32]
 8008f24:	bfa8      	it	ge
 8008f26:	4633      	movge	r3, r6
 8008f28:	eba8 0803 	sub.w	r8, r8, r3
 8008f2c:	1af6      	subs	r6, r6, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f34:	b1f3      	cbz	r3, 8008f74 <_dtoa_r+0x78c>
 8008f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80b7 	beq.w	80090ac <_dtoa_r+0x8c4>
 8008f3e:	b18c      	cbz	r4, 8008f64 <_dtoa_r+0x77c>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4622      	mov	r2, r4
 8008f44:	4658      	mov	r0, fp
 8008f46:	f000 fd11 	bl	800996c <__pow5mult>
 8008f4a:	464a      	mov	r2, r9
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4605      	mov	r5, r0
 8008f50:	4658      	mov	r0, fp
 8008f52:	f000 fc61 	bl	8009818 <__multiply>
 8008f56:	4649      	mov	r1, r9
 8008f58:	9004      	str	r0, [sp, #16]
 8008f5a:	4658      	mov	r0, fp
 8008f5c:	f000 fb48 	bl	80095f0 <_Bfree>
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	4699      	mov	r9, r3
 8008f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f66:	1b1a      	subs	r2, r3, r4
 8008f68:	d004      	beq.n	8008f74 <_dtoa_r+0x78c>
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	4658      	mov	r0, fp
 8008f6e:	f000 fcfd 	bl	800996c <__pow5mult>
 8008f72:	4681      	mov	r9, r0
 8008f74:	2101      	movs	r1, #1
 8008f76:	4658      	mov	r0, fp
 8008f78:	f000 fc38 	bl	80097ec <__i2b>
 8008f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f7e:	4604      	mov	r4, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 81cf 	beq.w	8009324 <_dtoa_r+0xb3c>
 8008f86:	461a      	mov	r2, r3
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4658      	mov	r0, fp
 8008f8c:	f000 fcee 	bl	800996c <__pow5mult>
 8008f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	4604      	mov	r4, r0
 8008f96:	f300 8095 	bgt.w	80090c4 <_dtoa_r+0x8dc>
 8008f9a:	9b02      	ldr	r3, [sp, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 8087 	bne.w	80090b0 <_dtoa_r+0x8c8>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f040 8089 	bne.w	80090c0 <_dtoa_r+0x8d8>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fb4:	0d1b      	lsrs	r3, r3, #20
 8008fb6:	051b      	lsls	r3, r3, #20
 8008fb8:	b12b      	cbz	r3, 8008fc6 <_dtoa_r+0x7de>
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	9308      	str	r3, [sp, #32]
 8008fc0:	f108 0801 	add.w	r8, r8, #1
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 81b0 	beq.w	8009330 <_dtoa_r+0xb48>
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fd6:	6918      	ldr	r0, [r3, #16]
 8008fd8:	f000 fbbc 	bl	8009754 <__hi0bits>
 8008fdc:	f1c0 0020 	rsb	r0, r0, #32
 8008fe0:	9b08      	ldr	r3, [sp, #32]
 8008fe2:	4418      	add	r0, r3
 8008fe4:	f010 001f 	ands.w	r0, r0, #31
 8008fe8:	d077      	beq.n	80090da <_dtoa_r+0x8f2>
 8008fea:	f1c0 0320 	rsb	r3, r0, #32
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	dd6b      	ble.n	80090ca <_dtoa_r+0x8e2>
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	f1c0 001c 	rsb	r0, r0, #28
 8008ff8:	4403      	add	r3, r0
 8008ffa:	4480      	add	r8, r0
 8008ffc:	4406      	add	r6, r0
 8008ffe:	9308      	str	r3, [sp, #32]
 8009000:	f1b8 0f00 	cmp.w	r8, #0
 8009004:	dd05      	ble.n	8009012 <_dtoa_r+0x82a>
 8009006:	4649      	mov	r1, r9
 8009008:	4642      	mov	r2, r8
 800900a:	4658      	mov	r0, fp
 800900c:	f000 fd08 	bl	8009a20 <__lshift>
 8009010:	4681      	mov	r9, r0
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd05      	ble.n	8009024 <_dtoa_r+0x83c>
 8009018:	4621      	mov	r1, r4
 800901a:	461a      	mov	r2, r3
 800901c:	4658      	mov	r0, fp
 800901e:	f000 fcff 	bl	8009a20 <__lshift>
 8009022:	4604      	mov	r4, r0
 8009024:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009026:	2b00      	cmp	r3, #0
 8009028:	d059      	beq.n	80090de <_dtoa_r+0x8f6>
 800902a:	4621      	mov	r1, r4
 800902c:	4648      	mov	r0, r9
 800902e:	f000 fd63 	bl	8009af8 <__mcmp>
 8009032:	2800      	cmp	r0, #0
 8009034:	da53      	bge.n	80090de <_dtoa_r+0x8f6>
 8009036:	1e7b      	subs	r3, r7, #1
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	4649      	mov	r1, r9
 800903c:	2300      	movs	r3, #0
 800903e:	220a      	movs	r2, #10
 8009040:	4658      	mov	r0, fp
 8009042:	f000 faf7 	bl	8009634 <__multadd>
 8009046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009048:	4681      	mov	r9, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8172 	beq.w	8009334 <_dtoa_r+0xb4c>
 8009050:	2300      	movs	r3, #0
 8009052:	4629      	mov	r1, r5
 8009054:	220a      	movs	r2, #10
 8009056:	4658      	mov	r0, fp
 8009058:	f000 faec 	bl	8009634 <__multadd>
 800905c:	9b00      	ldr	r3, [sp, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	4605      	mov	r5, r0
 8009062:	dc67      	bgt.n	8009134 <_dtoa_r+0x94c>
 8009064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009066:	2b02      	cmp	r3, #2
 8009068:	dc41      	bgt.n	80090ee <_dtoa_r+0x906>
 800906a:	e063      	b.n	8009134 <_dtoa_r+0x94c>
 800906c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800906e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009072:	e746      	b.n	8008f02 <_dtoa_r+0x71a>
 8009074:	9b07      	ldr	r3, [sp, #28]
 8009076:	1e5c      	subs	r4, r3, #1
 8009078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907a:	42a3      	cmp	r3, r4
 800907c:	bfbf      	itttt	lt
 800907e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009080:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009082:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009084:	1ae3      	sublt	r3, r4, r3
 8009086:	bfb4      	ite	lt
 8009088:	18d2      	addlt	r2, r2, r3
 800908a:	1b1c      	subge	r4, r3, r4
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	bfbc      	itt	lt
 8009090:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009092:	2400      	movlt	r4, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	bfb5      	itete	lt
 8009098:	eba8 0603 	sublt.w	r6, r8, r3
 800909c:	9b07      	ldrge	r3, [sp, #28]
 800909e:	2300      	movlt	r3, #0
 80090a0:	4646      	movge	r6, r8
 80090a2:	e730      	b.n	8008f06 <_dtoa_r+0x71e>
 80090a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090a8:	4646      	mov	r6, r8
 80090aa:	e735      	b.n	8008f18 <_dtoa_r+0x730>
 80090ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090ae:	e75c      	b.n	8008f6a <_dtoa_r+0x782>
 80090b0:	2300      	movs	r3, #0
 80090b2:	e788      	b.n	8008fc6 <_dtoa_r+0x7de>
 80090b4:	3fe00000 	.word	0x3fe00000
 80090b8:	40240000 	.word	0x40240000
 80090bc:	40140000 	.word	0x40140000
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	e780      	b.n	8008fc6 <_dtoa_r+0x7de>
 80090c4:	2300      	movs	r3, #0
 80090c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c8:	e782      	b.n	8008fd0 <_dtoa_r+0x7e8>
 80090ca:	d099      	beq.n	8009000 <_dtoa_r+0x818>
 80090cc:	9a08      	ldr	r2, [sp, #32]
 80090ce:	331c      	adds	r3, #28
 80090d0:	441a      	add	r2, r3
 80090d2:	4498      	add	r8, r3
 80090d4:	441e      	add	r6, r3
 80090d6:	9208      	str	r2, [sp, #32]
 80090d8:	e792      	b.n	8009000 <_dtoa_r+0x818>
 80090da:	4603      	mov	r3, r0
 80090dc:	e7f6      	b.n	80090cc <_dtoa_r+0x8e4>
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	9704      	str	r7, [sp, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dc20      	bgt.n	8009128 <_dtoa_r+0x940>
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	dd1e      	ble.n	800912c <_dtoa_r+0x944>
 80090ee:	9b00      	ldr	r3, [sp, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f aec0 	bne.w	8008e76 <_dtoa_r+0x68e>
 80090f6:	4621      	mov	r1, r4
 80090f8:	2205      	movs	r2, #5
 80090fa:	4658      	mov	r0, fp
 80090fc:	f000 fa9a 	bl	8009634 <__multadd>
 8009100:	4601      	mov	r1, r0
 8009102:	4604      	mov	r4, r0
 8009104:	4648      	mov	r0, r9
 8009106:	f000 fcf7 	bl	8009af8 <__mcmp>
 800910a:	2800      	cmp	r0, #0
 800910c:	f77f aeb3 	ble.w	8008e76 <_dtoa_r+0x68e>
 8009110:	4656      	mov	r6, sl
 8009112:	2331      	movs	r3, #49	@ 0x31
 8009114:	f806 3b01 	strb.w	r3, [r6], #1
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	3301      	adds	r3, #1
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	e6ae      	b.n	8008e7e <_dtoa_r+0x696>
 8009120:	9c07      	ldr	r4, [sp, #28]
 8009122:	9704      	str	r7, [sp, #16]
 8009124:	4625      	mov	r5, r4
 8009126:	e7f3      	b.n	8009110 <_dtoa_r+0x928>
 8009128:	9b07      	ldr	r3, [sp, #28]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8104 	beq.w	800933c <_dtoa_r+0xb54>
 8009134:	2e00      	cmp	r6, #0
 8009136:	dd05      	ble.n	8009144 <_dtoa_r+0x95c>
 8009138:	4629      	mov	r1, r5
 800913a:	4632      	mov	r2, r6
 800913c:	4658      	mov	r0, fp
 800913e:	f000 fc6f 	bl	8009a20 <__lshift>
 8009142:	4605      	mov	r5, r0
 8009144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d05a      	beq.n	8009200 <_dtoa_r+0xa18>
 800914a:	6869      	ldr	r1, [r5, #4]
 800914c:	4658      	mov	r0, fp
 800914e:	f000 fa0f 	bl	8009570 <_Balloc>
 8009152:	4606      	mov	r6, r0
 8009154:	b928      	cbnz	r0, 8009162 <_dtoa_r+0x97a>
 8009156:	4b84      	ldr	r3, [pc, #528]	@ (8009368 <_dtoa_r+0xb80>)
 8009158:	4602      	mov	r2, r0
 800915a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800915e:	f7ff bb5a 	b.w	8008816 <_dtoa_r+0x2e>
 8009162:	692a      	ldr	r2, [r5, #16]
 8009164:	3202      	adds	r2, #2
 8009166:	0092      	lsls	r2, r2, #2
 8009168:	f105 010c 	add.w	r1, r5, #12
 800916c:	300c      	adds	r0, #12
 800916e:	f001 ff75 	bl	800b05c <memcpy>
 8009172:	2201      	movs	r2, #1
 8009174:	4631      	mov	r1, r6
 8009176:	4658      	mov	r0, fp
 8009178:	f000 fc52 	bl	8009a20 <__lshift>
 800917c:	f10a 0301 	add.w	r3, sl, #1
 8009180:	9307      	str	r3, [sp, #28]
 8009182:	9b00      	ldr	r3, [sp, #0]
 8009184:	4453      	add	r3, sl
 8009186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	462f      	mov	r7, r5
 8009190:	930a      	str	r3, [sp, #40]	@ 0x28
 8009192:	4605      	mov	r5, r0
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	4621      	mov	r1, r4
 8009198:	3b01      	subs	r3, #1
 800919a:	4648      	mov	r0, r9
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	f7ff fa9b 	bl	80086d8 <quorem>
 80091a2:	4639      	mov	r1, r7
 80091a4:	9002      	str	r0, [sp, #8]
 80091a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091aa:	4648      	mov	r0, r9
 80091ac:	f000 fca4 	bl	8009af8 <__mcmp>
 80091b0:	462a      	mov	r2, r5
 80091b2:	9008      	str	r0, [sp, #32]
 80091b4:	4621      	mov	r1, r4
 80091b6:	4658      	mov	r0, fp
 80091b8:	f000 fcba 	bl	8009b30 <__mdiff>
 80091bc:	68c2      	ldr	r2, [r0, #12]
 80091be:	4606      	mov	r6, r0
 80091c0:	bb02      	cbnz	r2, 8009204 <_dtoa_r+0xa1c>
 80091c2:	4601      	mov	r1, r0
 80091c4:	4648      	mov	r0, r9
 80091c6:	f000 fc97 	bl	8009af8 <__mcmp>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4631      	mov	r1, r6
 80091ce:	4658      	mov	r0, fp
 80091d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80091d2:	f000 fa0d 	bl	80095f0 <_Bfree>
 80091d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091da:	9e07      	ldr	r6, [sp, #28]
 80091dc:	ea43 0102 	orr.w	r1, r3, r2
 80091e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e2:	4319      	orrs	r1, r3
 80091e4:	d110      	bne.n	8009208 <_dtoa_r+0xa20>
 80091e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091ea:	d029      	beq.n	8009240 <_dtoa_r+0xa58>
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dd02      	ble.n	80091f8 <_dtoa_r+0xa10>
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80091f8:	9b00      	ldr	r3, [sp, #0]
 80091fa:	f883 8000 	strb.w	r8, [r3]
 80091fe:	e63f      	b.n	8008e80 <_dtoa_r+0x698>
 8009200:	4628      	mov	r0, r5
 8009202:	e7bb      	b.n	800917c <_dtoa_r+0x994>
 8009204:	2201      	movs	r2, #1
 8009206:	e7e1      	b.n	80091cc <_dtoa_r+0x9e4>
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	db04      	blt.n	8009218 <_dtoa_r+0xa30>
 800920e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009210:	430b      	orrs	r3, r1
 8009212:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009214:	430b      	orrs	r3, r1
 8009216:	d120      	bne.n	800925a <_dtoa_r+0xa72>
 8009218:	2a00      	cmp	r2, #0
 800921a:	dded      	ble.n	80091f8 <_dtoa_r+0xa10>
 800921c:	4649      	mov	r1, r9
 800921e:	2201      	movs	r2, #1
 8009220:	4658      	mov	r0, fp
 8009222:	f000 fbfd 	bl	8009a20 <__lshift>
 8009226:	4621      	mov	r1, r4
 8009228:	4681      	mov	r9, r0
 800922a:	f000 fc65 	bl	8009af8 <__mcmp>
 800922e:	2800      	cmp	r0, #0
 8009230:	dc03      	bgt.n	800923a <_dtoa_r+0xa52>
 8009232:	d1e1      	bne.n	80091f8 <_dtoa_r+0xa10>
 8009234:	f018 0f01 	tst.w	r8, #1
 8009238:	d0de      	beq.n	80091f8 <_dtoa_r+0xa10>
 800923a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800923e:	d1d8      	bne.n	80091f2 <_dtoa_r+0xa0a>
 8009240:	9a00      	ldr	r2, [sp, #0]
 8009242:	2339      	movs	r3, #57	@ 0x39
 8009244:	7013      	strb	r3, [r2, #0]
 8009246:	4633      	mov	r3, r6
 8009248:	461e      	mov	r6, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009250:	2a39      	cmp	r2, #57	@ 0x39
 8009252:	d052      	beq.n	80092fa <_dtoa_r+0xb12>
 8009254:	3201      	adds	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
 8009258:	e612      	b.n	8008e80 <_dtoa_r+0x698>
 800925a:	2a00      	cmp	r2, #0
 800925c:	dd07      	ble.n	800926e <_dtoa_r+0xa86>
 800925e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009262:	d0ed      	beq.n	8009240 <_dtoa_r+0xa58>
 8009264:	9a00      	ldr	r2, [sp, #0]
 8009266:	f108 0301 	add.w	r3, r8, #1
 800926a:	7013      	strb	r3, [r2, #0]
 800926c:	e608      	b.n	8008e80 <_dtoa_r+0x698>
 800926e:	9b07      	ldr	r3, [sp, #28]
 8009270:	9a07      	ldr	r2, [sp, #28]
 8009272:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009278:	4293      	cmp	r3, r2
 800927a:	d028      	beq.n	80092ce <_dtoa_r+0xae6>
 800927c:	4649      	mov	r1, r9
 800927e:	2300      	movs	r3, #0
 8009280:	220a      	movs	r2, #10
 8009282:	4658      	mov	r0, fp
 8009284:	f000 f9d6 	bl	8009634 <__multadd>
 8009288:	42af      	cmp	r7, r5
 800928a:	4681      	mov	r9, r0
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	f04f 020a 	mov.w	r2, #10
 8009294:	4639      	mov	r1, r7
 8009296:	4658      	mov	r0, fp
 8009298:	d107      	bne.n	80092aa <_dtoa_r+0xac2>
 800929a:	f000 f9cb 	bl	8009634 <__multadd>
 800929e:	4607      	mov	r7, r0
 80092a0:	4605      	mov	r5, r0
 80092a2:	9b07      	ldr	r3, [sp, #28]
 80092a4:	3301      	adds	r3, #1
 80092a6:	9307      	str	r3, [sp, #28]
 80092a8:	e774      	b.n	8009194 <_dtoa_r+0x9ac>
 80092aa:	f000 f9c3 	bl	8009634 <__multadd>
 80092ae:	4629      	mov	r1, r5
 80092b0:	4607      	mov	r7, r0
 80092b2:	2300      	movs	r3, #0
 80092b4:	220a      	movs	r2, #10
 80092b6:	4658      	mov	r0, fp
 80092b8:	f000 f9bc 	bl	8009634 <__multadd>
 80092bc:	4605      	mov	r5, r0
 80092be:	e7f0      	b.n	80092a2 <_dtoa_r+0xaba>
 80092c0:	9b00      	ldr	r3, [sp, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfcc      	ite	gt
 80092c6:	461e      	movgt	r6, r3
 80092c8:	2601      	movle	r6, #1
 80092ca:	4456      	add	r6, sl
 80092cc:	2700      	movs	r7, #0
 80092ce:	4649      	mov	r1, r9
 80092d0:	2201      	movs	r2, #1
 80092d2:	4658      	mov	r0, fp
 80092d4:	f000 fba4 	bl	8009a20 <__lshift>
 80092d8:	4621      	mov	r1, r4
 80092da:	4681      	mov	r9, r0
 80092dc:	f000 fc0c 	bl	8009af8 <__mcmp>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	dcb0      	bgt.n	8009246 <_dtoa_r+0xa5e>
 80092e4:	d102      	bne.n	80092ec <_dtoa_r+0xb04>
 80092e6:	f018 0f01 	tst.w	r8, #1
 80092ea:	d1ac      	bne.n	8009246 <_dtoa_r+0xa5e>
 80092ec:	4633      	mov	r3, r6
 80092ee:	461e      	mov	r6, r3
 80092f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092f4:	2a30      	cmp	r2, #48	@ 0x30
 80092f6:	d0fa      	beq.n	80092ee <_dtoa_r+0xb06>
 80092f8:	e5c2      	b.n	8008e80 <_dtoa_r+0x698>
 80092fa:	459a      	cmp	sl, r3
 80092fc:	d1a4      	bne.n	8009248 <_dtoa_r+0xa60>
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	3301      	adds	r3, #1
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	2331      	movs	r3, #49	@ 0x31
 8009306:	f88a 3000 	strb.w	r3, [sl]
 800930a:	e5b9      	b.n	8008e80 <_dtoa_r+0x698>
 800930c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800930e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800936c <_dtoa_r+0xb84>
 8009312:	b11b      	cbz	r3, 800931c <_dtoa_r+0xb34>
 8009314:	f10a 0308 	add.w	r3, sl, #8
 8009318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4650      	mov	r0, sl
 800931e:	b019      	add	sp, #100	@ 0x64
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009326:	2b01      	cmp	r3, #1
 8009328:	f77f ae37 	ble.w	8008f9a <_dtoa_r+0x7b2>
 800932c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009330:	2001      	movs	r0, #1
 8009332:	e655      	b.n	8008fe0 <_dtoa_r+0x7f8>
 8009334:	9b00      	ldr	r3, [sp, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f77f aed6 	ble.w	80090e8 <_dtoa_r+0x900>
 800933c:	4656      	mov	r6, sl
 800933e:	4621      	mov	r1, r4
 8009340:	4648      	mov	r0, r9
 8009342:	f7ff f9c9 	bl	80086d8 <quorem>
 8009346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800934a:	f806 8b01 	strb.w	r8, [r6], #1
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	eba6 020a 	sub.w	r2, r6, sl
 8009354:	4293      	cmp	r3, r2
 8009356:	ddb3      	ble.n	80092c0 <_dtoa_r+0xad8>
 8009358:	4649      	mov	r1, r9
 800935a:	2300      	movs	r3, #0
 800935c:	220a      	movs	r2, #10
 800935e:	4658      	mov	r0, fp
 8009360:	f000 f968 	bl	8009634 <__multadd>
 8009364:	4681      	mov	r9, r0
 8009366:	e7ea      	b.n	800933e <_dtoa_r+0xb56>
 8009368:	0800bec1 	.word	0x0800bec1
 800936c:	0800be45 	.word	0x0800be45

08009370 <_free_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4605      	mov	r5, r0
 8009374:	2900      	cmp	r1, #0
 8009376:	d041      	beq.n	80093fc <_free_r+0x8c>
 8009378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800937c:	1f0c      	subs	r4, r1, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	18e4      	addlt	r4, r4, r3
 8009384:	f000 f8e8 	bl	8009558 <__malloc_lock>
 8009388:	4a1d      	ldr	r2, [pc, #116]	@ (8009400 <_free_r+0x90>)
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	b933      	cbnz	r3, 800939c <_free_r+0x2c>
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	6014      	str	r4, [r2, #0]
 8009392:	4628      	mov	r0, r5
 8009394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009398:	f000 b8e4 	b.w	8009564 <__malloc_unlock>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d908      	bls.n	80093b2 <_free_r+0x42>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	1821      	adds	r1, r4, r0
 80093a4:	428b      	cmp	r3, r1
 80093a6:	bf01      	itttt	eq
 80093a8:	6819      	ldreq	r1, [r3, #0]
 80093aa:	685b      	ldreq	r3, [r3, #4]
 80093ac:	1809      	addeq	r1, r1, r0
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	e7ed      	b.n	800938e <_free_r+0x1e>
 80093b2:	461a      	mov	r2, r3
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	b10b      	cbz	r3, 80093bc <_free_r+0x4c>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d9fa      	bls.n	80093b2 <_free_r+0x42>
 80093bc:	6811      	ldr	r1, [r2, #0]
 80093be:	1850      	adds	r0, r2, r1
 80093c0:	42a0      	cmp	r0, r4
 80093c2:	d10b      	bne.n	80093dc <_free_r+0x6c>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	4401      	add	r1, r0
 80093c8:	1850      	adds	r0, r2, r1
 80093ca:	4283      	cmp	r3, r0
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	d1e0      	bne.n	8009392 <_free_r+0x22>
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	6053      	str	r3, [r2, #4]
 80093d6:	4408      	add	r0, r1
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	e7da      	b.n	8009392 <_free_r+0x22>
 80093dc:	d902      	bls.n	80093e4 <_free_r+0x74>
 80093de:	230c      	movs	r3, #12
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	e7d6      	b.n	8009392 <_free_r+0x22>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	1821      	adds	r1, r4, r0
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf04      	itt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	bf04      	itt	eq
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	6054      	str	r4, [r2, #4]
 80093fa:	e7ca      	b.n	8009392 <_free_r+0x22>
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	20000584 	.word	0x20000584

08009404 <malloc>:
 8009404:	4b02      	ldr	r3, [pc, #8]	@ (8009410 <malloc+0xc>)
 8009406:	4601      	mov	r1, r0
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	f000 b825 	b.w	8009458 <_malloc_r>
 800940e:	bf00      	nop
 8009410:	20000030 	.word	0x20000030

08009414 <sbrk_aligned>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4e0f      	ldr	r6, [pc, #60]	@ (8009454 <sbrk_aligned+0x40>)
 8009418:	460c      	mov	r4, r1
 800941a:	6831      	ldr	r1, [r6, #0]
 800941c:	4605      	mov	r5, r0
 800941e:	b911      	cbnz	r1, 8009426 <sbrk_aligned+0x12>
 8009420:	f001 fe0c 	bl	800b03c <_sbrk_r>
 8009424:	6030      	str	r0, [r6, #0]
 8009426:	4621      	mov	r1, r4
 8009428:	4628      	mov	r0, r5
 800942a:	f001 fe07 	bl	800b03c <_sbrk_r>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d103      	bne.n	800943a <sbrk_aligned+0x26>
 8009432:	f04f 34ff 	mov.w	r4, #4294967295
 8009436:	4620      	mov	r0, r4
 8009438:	bd70      	pop	{r4, r5, r6, pc}
 800943a:	1cc4      	adds	r4, r0, #3
 800943c:	f024 0403 	bic.w	r4, r4, #3
 8009440:	42a0      	cmp	r0, r4
 8009442:	d0f8      	beq.n	8009436 <sbrk_aligned+0x22>
 8009444:	1a21      	subs	r1, r4, r0
 8009446:	4628      	mov	r0, r5
 8009448:	f001 fdf8 	bl	800b03c <_sbrk_r>
 800944c:	3001      	adds	r0, #1
 800944e:	d1f2      	bne.n	8009436 <sbrk_aligned+0x22>
 8009450:	e7ef      	b.n	8009432 <sbrk_aligned+0x1e>
 8009452:	bf00      	nop
 8009454:	20000580 	.word	0x20000580

08009458 <_malloc_r>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	1ccd      	adds	r5, r1, #3
 800945e:	f025 0503 	bic.w	r5, r5, #3
 8009462:	3508      	adds	r5, #8
 8009464:	2d0c      	cmp	r5, #12
 8009466:	bf38      	it	cc
 8009468:	250c      	movcc	r5, #12
 800946a:	2d00      	cmp	r5, #0
 800946c:	4606      	mov	r6, r0
 800946e:	db01      	blt.n	8009474 <_malloc_r+0x1c>
 8009470:	42a9      	cmp	r1, r5
 8009472:	d904      	bls.n	800947e <_malloc_r+0x26>
 8009474:	230c      	movs	r3, #12
 8009476:	6033      	str	r3, [r6, #0]
 8009478:	2000      	movs	r0, #0
 800947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009554 <_malloc_r+0xfc>
 8009482:	f000 f869 	bl	8009558 <__malloc_lock>
 8009486:	f8d8 3000 	ldr.w	r3, [r8]
 800948a:	461c      	mov	r4, r3
 800948c:	bb44      	cbnz	r4, 80094e0 <_malloc_r+0x88>
 800948e:	4629      	mov	r1, r5
 8009490:	4630      	mov	r0, r6
 8009492:	f7ff ffbf 	bl	8009414 <sbrk_aligned>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	4604      	mov	r4, r0
 800949a:	d158      	bne.n	800954e <_malloc_r+0xf6>
 800949c:	f8d8 4000 	ldr.w	r4, [r8]
 80094a0:	4627      	mov	r7, r4
 80094a2:	2f00      	cmp	r7, #0
 80094a4:	d143      	bne.n	800952e <_malloc_r+0xd6>
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	d04b      	beq.n	8009542 <_malloc_r+0xea>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	4639      	mov	r1, r7
 80094ae:	4630      	mov	r0, r6
 80094b0:	eb04 0903 	add.w	r9, r4, r3
 80094b4:	f001 fdc2 	bl	800b03c <_sbrk_r>
 80094b8:	4581      	cmp	r9, r0
 80094ba:	d142      	bne.n	8009542 <_malloc_r+0xea>
 80094bc:	6821      	ldr	r1, [r4, #0]
 80094be:	1a6d      	subs	r5, r5, r1
 80094c0:	4629      	mov	r1, r5
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff ffa6 	bl	8009414 <sbrk_aligned>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d03a      	beq.n	8009542 <_malloc_r+0xea>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	442b      	add	r3, r5
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	f8d8 3000 	ldr.w	r3, [r8]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	bb62      	cbnz	r2, 8009534 <_malloc_r+0xdc>
 80094da:	f8c8 7000 	str.w	r7, [r8]
 80094de:	e00f      	b.n	8009500 <_malloc_r+0xa8>
 80094e0:	6822      	ldr	r2, [r4, #0]
 80094e2:	1b52      	subs	r2, r2, r5
 80094e4:	d420      	bmi.n	8009528 <_malloc_r+0xd0>
 80094e6:	2a0b      	cmp	r2, #11
 80094e8:	d917      	bls.n	800951a <_malloc_r+0xc2>
 80094ea:	1961      	adds	r1, r4, r5
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	6025      	str	r5, [r4, #0]
 80094f0:	bf18      	it	ne
 80094f2:	6059      	strne	r1, [r3, #4]
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	bf08      	it	eq
 80094f8:	f8c8 1000 	streq.w	r1, [r8]
 80094fc:	5162      	str	r2, [r4, r5]
 80094fe:	604b      	str	r3, [r1, #4]
 8009500:	4630      	mov	r0, r6
 8009502:	f000 f82f 	bl	8009564 <__malloc_unlock>
 8009506:	f104 000b 	add.w	r0, r4, #11
 800950a:	1d23      	adds	r3, r4, #4
 800950c:	f020 0007 	bic.w	r0, r0, #7
 8009510:	1ac2      	subs	r2, r0, r3
 8009512:	bf1c      	itt	ne
 8009514:	1a1b      	subne	r3, r3, r0
 8009516:	50a3      	strne	r3, [r4, r2]
 8009518:	e7af      	b.n	800947a <_malloc_r+0x22>
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	42a3      	cmp	r3, r4
 800951e:	bf0c      	ite	eq
 8009520:	f8c8 2000 	streq.w	r2, [r8]
 8009524:	605a      	strne	r2, [r3, #4]
 8009526:	e7eb      	b.n	8009500 <_malloc_r+0xa8>
 8009528:	4623      	mov	r3, r4
 800952a:	6864      	ldr	r4, [r4, #4]
 800952c:	e7ae      	b.n	800948c <_malloc_r+0x34>
 800952e:	463c      	mov	r4, r7
 8009530:	687f      	ldr	r7, [r7, #4]
 8009532:	e7b6      	b.n	80094a2 <_malloc_r+0x4a>
 8009534:	461a      	mov	r2, r3
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	42a3      	cmp	r3, r4
 800953a:	d1fb      	bne.n	8009534 <_malloc_r+0xdc>
 800953c:	2300      	movs	r3, #0
 800953e:	6053      	str	r3, [r2, #4]
 8009540:	e7de      	b.n	8009500 <_malloc_r+0xa8>
 8009542:	230c      	movs	r3, #12
 8009544:	6033      	str	r3, [r6, #0]
 8009546:	4630      	mov	r0, r6
 8009548:	f000 f80c 	bl	8009564 <__malloc_unlock>
 800954c:	e794      	b.n	8009478 <_malloc_r+0x20>
 800954e:	6005      	str	r5, [r0, #0]
 8009550:	e7d6      	b.n	8009500 <_malloc_r+0xa8>
 8009552:	bf00      	nop
 8009554:	20000584 	.word	0x20000584

08009558 <__malloc_lock>:
 8009558:	4801      	ldr	r0, [pc, #4]	@ (8009560 <__malloc_lock+0x8>)
 800955a:	f7ff b8b4 	b.w	80086c6 <__retarget_lock_acquire_recursive>
 800955e:	bf00      	nop
 8009560:	2000057c 	.word	0x2000057c

08009564 <__malloc_unlock>:
 8009564:	4801      	ldr	r0, [pc, #4]	@ (800956c <__malloc_unlock+0x8>)
 8009566:	f7ff b8af 	b.w	80086c8 <__retarget_lock_release_recursive>
 800956a:	bf00      	nop
 800956c:	2000057c 	.word	0x2000057c

08009570 <_Balloc>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	69c6      	ldr	r6, [r0, #28]
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	b976      	cbnz	r6, 8009598 <_Balloc+0x28>
 800957a:	2010      	movs	r0, #16
 800957c:	f7ff ff42 	bl	8009404 <malloc>
 8009580:	4602      	mov	r2, r0
 8009582:	61e0      	str	r0, [r4, #28]
 8009584:	b920      	cbnz	r0, 8009590 <_Balloc+0x20>
 8009586:	4b18      	ldr	r3, [pc, #96]	@ (80095e8 <_Balloc+0x78>)
 8009588:	4818      	ldr	r0, [pc, #96]	@ (80095ec <_Balloc+0x7c>)
 800958a:	216b      	movs	r1, #107	@ 0x6b
 800958c:	f001 fd7c 	bl	800b088 <__assert_func>
 8009590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009594:	6006      	str	r6, [r0, #0]
 8009596:	60c6      	str	r6, [r0, #12]
 8009598:	69e6      	ldr	r6, [r4, #28]
 800959a:	68f3      	ldr	r3, [r6, #12]
 800959c:	b183      	cbz	r3, 80095c0 <_Balloc+0x50>
 800959e:	69e3      	ldr	r3, [r4, #28]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095a6:	b9b8      	cbnz	r0, 80095d8 <_Balloc+0x68>
 80095a8:	2101      	movs	r1, #1
 80095aa:	fa01 f605 	lsl.w	r6, r1, r5
 80095ae:	1d72      	adds	r2, r6, #5
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	4620      	mov	r0, r4
 80095b4:	f001 fd86 	bl	800b0c4 <_calloc_r>
 80095b8:	b160      	cbz	r0, 80095d4 <_Balloc+0x64>
 80095ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095be:	e00e      	b.n	80095de <_Balloc+0x6e>
 80095c0:	2221      	movs	r2, #33	@ 0x21
 80095c2:	2104      	movs	r1, #4
 80095c4:	4620      	mov	r0, r4
 80095c6:	f001 fd7d 	bl	800b0c4 <_calloc_r>
 80095ca:	69e3      	ldr	r3, [r4, #28]
 80095cc:	60f0      	str	r0, [r6, #12]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e4      	bne.n	800959e <_Balloc+0x2e>
 80095d4:	2000      	movs	r0, #0
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	6802      	ldr	r2, [r0, #0]
 80095da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095de:	2300      	movs	r3, #0
 80095e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095e4:	e7f7      	b.n	80095d6 <_Balloc+0x66>
 80095e6:	bf00      	nop
 80095e8:	0800be52 	.word	0x0800be52
 80095ec:	0800bed2 	.word	0x0800bed2

080095f0 <_Bfree>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	69c6      	ldr	r6, [r0, #28]
 80095f4:	4605      	mov	r5, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	b976      	cbnz	r6, 8009618 <_Bfree+0x28>
 80095fa:	2010      	movs	r0, #16
 80095fc:	f7ff ff02 	bl	8009404 <malloc>
 8009600:	4602      	mov	r2, r0
 8009602:	61e8      	str	r0, [r5, #28]
 8009604:	b920      	cbnz	r0, 8009610 <_Bfree+0x20>
 8009606:	4b09      	ldr	r3, [pc, #36]	@ (800962c <_Bfree+0x3c>)
 8009608:	4809      	ldr	r0, [pc, #36]	@ (8009630 <_Bfree+0x40>)
 800960a:	218f      	movs	r1, #143	@ 0x8f
 800960c:	f001 fd3c 	bl	800b088 <__assert_func>
 8009610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009614:	6006      	str	r6, [r0, #0]
 8009616:	60c6      	str	r6, [r0, #12]
 8009618:	b13c      	cbz	r4, 800962a <_Bfree+0x3a>
 800961a:	69eb      	ldr	r3, [r5, #28]
 800961c:	6862      	ldr	r2, [r4, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009624:	6021      	str	r1, [r4, #0]
 8009626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	0800be52 	.word	0x0800be52
 8009630:	0800bed2 	.word	0x0800bed2

08009634 <__multadd>:
 8009634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009638:	690d      	ldr	r5, [r1, #16]
 800963a:	4607      	mov	r7, r0
 800963c:	460c      	mov	r4, r1
 800963e:	461e      	mov	r6, r3
 8009640:	f101 0c14 	add.w	ip, r1, #20
 8009644:	2000      	movs	r0, #0
 8009646:	f8dc 3000 	ldr.w	r3, [ip]
 800964a:	b299      	uxth	r1, r3
 800964c:	fb02 6101 	mla	r1, r2, r1, r6
 8009650:	0c1e      	lsrs	r6, r3, #16
 8009652:	0c0b      	lsrs	r3, r1, #16
 8009654:	fb02 3306 	mla	r3, r2, r6, r3
 8009658:	b289      	uxth	r1, r1
 800965a:	3001      	adds	r0, #1
 800965c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009660:	4285      	cmp	r5, r0
 8009662:	f84c 1b04 	str.w	r1, [ip], #4
 8009666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800966a:	dcec      	bgt.n	8009646 <__multadd+0x12>
 800966c:	b30e      	cbz	r6, 80096b2 <__multadd+0x7e>
 800966e:	68a3      	ldr	r3, [r4, #8]
 8009670:	42ab      	cmp	r3, r5
 8009672:	dc19      	bgt.n	80096a8 <__multadd+0x74>
 8009674:	6861      	ldr	r1, [r4, #4]
 8009676:	4638      	mov	r0, r7
 8009678:	3101      	adds	r1, #1
 800967a:	f7ff ff79 	bl	8009570 <_Balloc>
 800967e:	4680      	mov	r8, r0
 8009680:	b928      	cbnz	r0, 800968e <__multadd+0x5a>
 8009682:	4602      	mov	r2, r0
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <__multadd+0x84>)
 8009686:	480d      	ldr	r0, [pc, #52]	@ (80096bc <__multadd+0x88>)
 8009688:	21ba      	movs	r1, #186	@ 0xba
 800968a:	f001 fcfd 	bl	800b088 <__assert_func>
 800968e:	6922      	ldr	r2, [r4, #16]
 8009690:	3202      	adds	r2, #2
 8009692:	f104 010c 	add.w	r1, r4, #12
 8009696:	0092      	lsls	r2, r2, #2
 8009698:	300c      	adds	r0, #12
 800969a:	f001 fcdf 	bl	800b05c <memcpy>
 800969e:	4621      	mov	r1, r4
 80096a0:	4638      	mov	r0, r7
 80096a2:	f7ff ffa5 	bl	80095f0 <_Bfree>
 80096a6:	4644      	mov	r4, r8
 80096a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096ac:	3501      	adds	r5, #1
 80096ae:	615e      	str	r6, [r3, #20]
 80096b0:	6125      	str	r5, [r4, #16]
 80096b2:	4620      	mov	r0, r4
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b8:	0800bec1 	.word	0x0800bec1
 80096bc:	0800bed2 	.word	0x0800bed2

080096c0 <__s2b>:
 80096c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c4:	460c      	mov	r4, r1
 80096c6:	4615      	mov	r5, r2
 80096c8:	461f      	mov	r7, r3
 80096ca:	2209      	movs	r2, #9
 80096cc:	3308      	adds	r3, #8
 80096ce:	4606      	mov	r6, r0
 80096d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80096d4:	2100      	movs	r1, #0
 80096d6:	2201      	movs	r2, #1
 80096d8:	429a      	cmp	r2, r3
 80096da:	db09      	blt.n	80096f0 <__s2b+0x30>
 80096dc:	4630      	mov	r0, r6
 80096de:	f7ff ff47 	bl	8009570 <_Balloc>
 80096e2:	b940      	cbnz	r0, 80096f6 <__s2b+0x36>
 80096e4:	4602      	mov	r2, r0
 80096e6:	4b19      	ldr	r3, [pc, #100]	@ (800974c <__s2b+0x8c>)
 80096e8:	4819      	ldr	r0, [pc, #100]	@ (8009750 <__s2b+0x90>)
 80096ea:	21d3      	movs	r1, #211	@ 0xd3
 80096ec:	f001 fccc 	bl	800b088 <__assert_func>
 80096f0:	0052      	lsls	r2, r2, #1
 80096f2:	3101      	adds	r1, #1
 80096f4:	e7f0      	b.n	80096d8 <__s2b+0x18>
 80096f6:	9b08      	ldr	r3, [sp, #32]
 80096f8:	6143      	str	r3, [r0, #20]
 80096fa:	2d09      	cmp	r5, #9
 80096fc:	f04f 0301 	mov.w	r3, #1
 8009700:	6103      	str	r3, [r0, #16]
 8009702:	dd16      	ble.n	8009732 <__s2b+0x72>
 8009704:	f104 0909 	add.w	r9, r4, #9
 8009708:	46c8      	mov	r8, r9
 800970a:	442c      	add	r4, r5
 800970c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009710:	4601      	mov	r1, r0
 8009712:	3b30      	subs	r3, #48	@ 0x30
 8009714:	220a      	movs	r2, #10
 8009716:	4630      	mov	r0, r6
 8009718:	f7ff ff8c 	bl	8009634 <__multadd>
 800971c:	45a0      	cmp	r8, r4
 800971e:	d1f5      	bne.n	800970c <__s2b+0x4c>
 8009720:	f1a5 0408 	sub.w	r4, r5, #8
 8009724:	444c      	add	r4, r9
 8009726:	1b2d      	subs	r5, r5, r4
 8009728:	1963      	adds	r3, r4, r5
 800972a:	42bb      	cmp	r3, r7
 800972c:	db04      	blt.n	8009738 <__s2b+0x78>
 800972e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009732:	340a      	adds	r4, #10
 8009734:	2509      	movs	r5, #9
 8009736:	e7f6      	b.n	8009726 <__s2b+0x66>
 8009738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800973c:	4601      	mov	r1, r0
 800973e:	3b30      	subs	r3, #48	@ 0x30
 8009740:	220a      	movs	r2, #10
 8009742:	4630      	mov	r0, r6
 8009744:	f7ff ff76 	bl	8009634 <__multadd>
 8009748:	e7ee      	b.n	8009728 <__s2b+0x68>
 800974a:	bf00      	nop
 800974c:	0800bec1 	.word	0x0800bec1
 8009750:	0800bed2 	.word	0x0800bed2

08009754 <__hi0bits>:
 8009754:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009758:	4603      	mov	r3, r0
 800975a:	bf36      	itet	cc
 800975c:	0403      	lslcc	r3, r0, #16
 800975e:	2000      	movcs	r0, #0
 8009760:	2010      	movcc	r0, #16
 8009762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009766:	bf3c      	itt	cc
 8009768:	021b      	lslcc	r3, r3, #8
 800976a:	3008      	addcc	r0, #8
 800976c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009770:	bf3c      	itt	cc
 8009772:	011b      	lslcc	r3, r3, #4
 8009774:	3004      	addcc	r0, #4
 8009776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800977a:	bf3c      	itt	cc
 800977c:	009b      	lslcc	r3, r3, #2
 800977e:	3002      	addcc	r0, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	db05      	blt.n	8009790 <__hi0bits+0x3c>
 8009784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009788:	f100 0001 	add.w	r0, r0, #1
 800978c:	bf08      	it	eq
 800978e:	2020      	moveq	r0, #32
 8009790:	4770      	bx	lr

08009792 <__lo0bits>:
 8009792:	6803      	ldr	r3, [r0, #0]
 8009794:	4602      	mov	r2, r0
 8009796:	f013 0007 	ands.w	r0, r3, #7
 800979a:	d00b      	beq.n	80097b4 <__lo0bits+0x22>
 800979c:	07d9      	lsls	r1, r3, #31
 800979e:	d421      	bmi.n	80097e4 <__lo0bits+0x52>
 80097a0:	0798      	lsls	r0, r3, #30
 80097a2:	bf49      	itett	mi
 80097a4:	085b      	lsrmi	r3, r3, #1
 80097a6:	089b      	lsrpl	r3, r3, #2
 80097a8:	2001      	movmi	r0, #1
 80097aa:	6013      	strmi	r3, [r2, #0]
 80097ac:	bf5c      	itt	pl
 80097ae:	6013      	strpl	r3, [r2, #0]
 80097b0:	2002      	movpl	r0, #2
 80097b2:	4770      	bx	lr
 80097b4:	b299      	uxth	r1, r3
 80097b6:	b909      	cbnz	r1, 80097bc <__lo0bits+0x2a>
 80097b8:	0c1b      	lsrs	r3, r3, #16
 80097ba:	2010      	movs	r0, #16
 80097bc:	b2d9      	uxtb	r1, r3
 80097be:	b909      	cbnz	r1, 80097c4 <__lo0bits+0x32>
 80097c0:	3008      	adds	r0, #8
 80097c2:	0a1b      	lsrs	r3, r3, #8
 80097c4:	0719      	lsls	r1, r3, #28
 80097c6:	bf04      	itt	eq
 80097c8:	091b      	lsreq	r3, r3, #4
 80097ca:	3004      	addeq	r0, #4
 80097cc:	0799      	lsls	r1, r3, #30
 80097ce:	bf04      	itt	eq
 80097d0:	089b      	lsreq	r3, r3, #2
 80097d2:	3002      	addeq	r0, #2
 80097d4:	07d9      	lsls	r1, r3, #31
 80097d6:	d403      	bmi.n	80097e0 <__lo0bits+0x4e>
 80097d8:	085b      	lsrs	r3, r3, #1
 80097da:	f100 0001 	add.w	r0, r0, #1
 80097de:	d003      	beq.n	80097e8 <__lo0bits+0x56>
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	4770      	bx	lr
 80097e4:	2000      	movs	r0, #0
 80097e6:	4770      	bx	lr
 80097e8:	2020      	movs	r0, #32
 80097ea:	4770      	bx	lr

080097ec <__i2b>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	460c      	mov	r4, r1
 80097f0:	2101      	movs	r1, #1
 80097f2:	f7ff febd 	bl	8009570 <_Balloc>
 80097f6:	4602      	mov	r2, r0
 80097f8:	b928      	cbnz	r0, 8009806 <__i2b+0x1a>
 80097fa:	4b05      	ldr	r3, [pc, #20]	@ (8009810 <__i2b+0x24>)
 80097fc:	4805      	ldr	r0, [pc, #20]	@ (8009814 <__i2b+0x28>)
 80097fe:	f240 1145 	movw	r1, #325	@ 0x145
 8009802:	f001 fc41 	bl	800b088 <__assert_func>
 8009806:	2301      	movs	r3, #1
 8009808:	6144      	str	r4, [r0, #20]
 800980a:	6103      	str	r3, [r0, #16]
 800980c:	bd10      	pop	{r4, pc}
 800980e:	bf00      	nop
 8009810:	0800bec1 	.word	0x0800bec1
 8009814:	0800bed2 	.word	0x0800bed2

08009818 <__multiply>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	4614      	mov	r4, r2
 800981e:	690a      	ldr	r2, [r1, #16]
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	429a      	cmp	r2, r3
 8009824:	bfa8      	it	ge
 8009826:	4623      	movge	r3, r4
 8009828:	460f      	mov	r7, r1
 800982a:	bfa4      	itt	ge
 800982c:	460c      	movge	r4, r1
 800982e:	461f      	movge	r7, r3
 8009830:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009834:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009838:	68a3      	ldr	r3, [r4, #8]
 800983a:	6861      	ldr	r1, [r4, #4]
 800983c:	eb0a 0609 	add.w	r6, sl, r9
 8009840:	42b3      	cmp	r3, r6
 8009842:	b085      	sub	sp, #20
 8009844:	bfb8      	it	lt
 8009846:	3101      	addlt	r1, #1
 8009848:	f7ff fe92 	bl	8009570 <_Balloc>
 800984c:	b930      	cbnz	r0, 800985c <__multiply+0x44>
 800984e:	4602      	mov	r2, r0
 8009850:	4b44      	ldr	r3, [pc, #272]	@ (8009964 <__multiply+0x14c>)
 8009852:	4845      	ldr	r0, [pc, #276]	@ (8009968 <__multiply+0x150>)
 8009854:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009858:	f001 fc16 	bl	800b088 <__assert_func>
 800985c:	f100 0514 	add.w	r5, r0, #20
 8009860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009864:	462b      	mov	r3, r5
 8009866:	2200      	movs	r2, #0
 8009868:	4543      	cmp	r3, r8
 800986a:	d321      	bcc.n	80098b0 <__multiply+0x98>
 800986c:	f107 0114 	add.w	r1, r7, #20
 8009870:	f104 0214 	add.w	r2, r4, #20
 8009874:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009878:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	1b13      	subs	r3, r2, r4
 8009880:	3b15      	subs	r3, #21
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	3304      	adds	r3, #4
 8009888:	f104 0715 	add.w	r7, r4, #21
 800988c:	42ba      	cmp	r2, r7
 800988e:	bf38      	it	cc
 8009890:	2304      	movcc	r3, #4
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	9b02      	ldr	r3, [sp, #8]
 8009896:	9103      	str	r1, [sp, #12]
 8009898:	428b      	cmp	r3, r1
 800989a:	d80c      	bhi.n	80098b6 <__multiply+0x9e>
 800989c:	2e00      	cmp	r6, #0
 800989e:	dd03      	ble.n	80098a8 <__multiply+0x90>
 80098a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d05b      	beq.n	8009960 <__multiply+0x148>
 80098a8:	6106      	str	r6, [r0, #16]
 80098aa:	b005      	add	sp, #20
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	f843 2b04 	str.w	r2, [r3], #4
 80098b4:	e7d8      	b.n	8009868 <__multiply+0x50>
 80098b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80098ba:	f1ba 0f00 	cmp.w	sl, #0
 80098be:	d024      	beq.n	800990a <__multiply+0xf2>
 80098c0:	f104 0e14 	add.w	lr, r4, #20
 80098c4:	46a9      	mov	r9, r5
 80098c6:	f04f 0c00 	mov.w	ip, #0
 80098ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098ce:	f8d9 3000 	ldr.w	r3, [r9]
 80098d2:	fa1f fb87 	uxth.w	fp, r7
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80098dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80098e0:	f8d9 7000 	ldr.w	r7, [r9]
 80098e4:	4463      	add	r3, ip
 80098e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80098ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098f8:	4572      	cmp	r2, lr
 80098fa:	f849 3b04 	str.w	r3, [r9], #4
 80098fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009902:	d8e2      	bhi.n	80098ca <__multiply+0xb2>
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	f845 c003 	str.w	ip, [r5, r3]
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009910:	3104      	adds	r1, #4
 8009912:	f1b9 0f00 	cmp.w	r9, #0
 8009916:	d021      	beq.n	800995c <__multiply+0x144>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	f104 0c14 	add.w	ip, r4, #20
 800991e:	46ae      	mov	lr, r5
 8009920:	f04f 0a00 	mov.w	sl, #0
 8009924:	f8bc b000 	ldrh.w	fp, [ip]
 8009928:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800992c:	fb09 770b 	mla	r7, r9, fp, r7
 8009930:	4457      	add	r7, sl
 8009932:	b29b      	uxth	r3, r3
 8009934:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009938:	f84e 3b04 	str.w	r3, [lr], #4
 800993c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009944:	f8be 3000 	ldrh.w	r3, [lr]
 8009948:	fb09 330a 	mla	r3, r9, sl, r3
 800994c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009950:	4562      	cmp	r2, ip
 8009952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009956:	d8e5      	bhi.n	8009924 <__multiply+0x10c>
 8009958:	9f01      	ldr	r7, [sp, #4]
 800995a:	51eb      	str	r3, [r5, r7]
 800995c:	3504      	adds	r5, #4
 800995e:	e799      	b.n	8009894 <__multiply+0x7c>
 8009960:	3e01      	subs	r6, #1
 8009962:	e79b      	b.n	800989c <__multiply+0x84>
 8009964:	0800bec1 	.word	0x0800bec1
 8009968:	0800bed2 	.word	0x0800bed2

0800996c <__pow5mult>:
 800996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009970:	4615      	mov	r5, r2
 8009972:	f012 0203 	ands.w	r2, r2, #3
 8009976:	4607      	mov	r7, r0
 8009978:	460e      	mov	r6, r1
 800997a:	d007      	beq.n	800998c <__pow5mult+0x20>
 800997c:	4c25      	ldr	r4, [pc, #148]	@ (8009a14 <__pow5mult+0xa8>)
 800997e:	3a01      	subs	r2, #1
 8009980:	2300      	movs	r3, #0
 8009982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009986:	f7ff fe55 	bl	8009634 <__multadd>
 800998a:	4606      	mov	r6, r0
 800998c:	10ad      	asrs	r5, r5, #2
 800998e:	d03d      	beq.n	8009a0c <__pow5mult+0xa0>
 8009990:	69fc      	ldr	r4, [r7, #28]
 8009992:	b97c      	cbnz	r4, 80099b4 <__pow5mult+0x48>
 8009994:	2010      	movs	r0, #16
 8009996:	f7ff fd35 	bl	8009404 <malloc>
 800999a:	4602      	mov	r2, r0
 800999c:	61f8      	str	r0, [r7, #28]
 800999e:	b928      	cbnz	r0, 80099ac <__pow5mult+0x40>
 80099a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a18 <__pow5mult+0xac>)
 80099a2:	481e      	ldr	r0, [pc, #120]	@ (8009a1c <__pow5mult+0xb0>)
 80099a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099a8:	f001 fb6e 	bl	800b088 <__assert_func>
 80099ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099b0:	6004      	str	r4, [r0, #0]
 80099b2:	60c4      	str	r4, [r0, #12]
 80099b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099bc:	b94c      	cbnz	r4, 80099d2 <__pow5mult+0x66>
 80099be:	f240 2171 	movw	r1, #625	@ 0x271
 80099c2:	4638      	mov	r0, r7
 80099c4:	f7ff ff12 	bl	80097ec <__i2b>
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ce:	4604      	mov	r4, r0
 80099d0:	6003      	str	r3, [r0, #0]
 80099d2:	f04f 0900 	mov.w	r9, #0
 80099d6:	07eb      	lsls	r3, r5, #31
 80099d8:	d50a      	bpl.n	80099f0 <__pow5mult+0x84>
 80099da:	4631      	mov	r1, r6
 80099dc:	4622      	mov	r2, r4
 80099de:	4638      	mov	r0, r7
 80099e0:	f7ff ff1a 	bl	8009818 <__multiply>
 80099e4:	4631      	mov	r1, r6
 80099e6:	4680      	mov	r8, r0
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7ff fe01 	bl	80095f0 <_Bfree>
 80099ee:	4646      	mov	r6, r8
 80099f0:	106d      	asrs	r5, r5, #1
 80099f2:	d00b      	beq.n	8009a0c <__pow5mult+0xa0>
 80099f4:	6820      	ldr	r0, [r4, #0]
 80099f6:	b938      	cbnz	r0, 8009a08 <__pow5mult+0x9c>
 80099f8:	4622      	mov	r2, r4
 80099fa:	4621      	mov	r1, r4
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff ff0b 	bl	8009818 <__multiply>
 8009a02:	6020      	str	r0, [r4, #0]
 8009a04:	f8c0 9000 	str.w	r9, [r0]
 8009a08:	4604      	mov	r4, r0
 8009a0a:	e7e4      	b.n	80099d6 <__pow5mult+0x6a>
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a12:	bf00      	nop
 8009a14:	0800bf2c 	.word	0x0800bf2c
 8009a18:	0800be52 	.word	0x0800be52
 8009a1c:	0800bed2 	.word	0x0800bed2

08009a20 <__lshift>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	6849      	ldr	r1, [r1, #4]
 8009a28:	6923      	ldr	r3, [r4, #16]
 8009a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	4607      	mov	r7, r0
 8009a32:	4691      	mov	r9, r2
 8009a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a38:	f108 0601 	add.w	r6, r8, #1
 8009a3c:	42b3      	cmp	r3, r6
 8009a3e:	db0b      	blt.n	8009a58 <__lshift+0x38>
 8009a40:	4638      	mov	r0, r7
 8009a42:	f7ff fd95 	bl	8009570 <_Balloc>
 8009a46:	4605      	mov	r5, r0
 8009a48:	b948      	cbnz	r0, 8009a5e <__lshift+0x3e>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	4b28      	ldr	r3, [pc, #160]	@ (8009af0 <__lshift+0xd0>)
 8009a4e:	4829      	ldr	r0, [pc, #164]	@ (8009af4 <__lshift+0xd4>)
 8009a50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a54:	f001 fb18 	bl	800b088 <__assert_func>
 8009a58:	3101      	adds	r1, #1
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	e7ee      	b.n	8009a3c <__lshift+0x1c>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f100 0114 	add.w	r1, r0, #20
 8009a64:	f100 0210 	add.w	r2, r0, #16
 8009a68:	4618      	mov	r0, r3
 8009a6a:	4553      	cmp	r3, sl
 8009a6c:	db33      	blt.n	8009ad6 <__lshift+0xb6>
 8009a6e:	6920      	ldr	r0, [r4, #16]
 8009a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a74:	f104 0314 	add.w	r3, r4, #20
 8009a78:	f019 091f 	ands.w	r9, r9, #31
 8009a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a84:	d02b      	beq.n	8009ade <__lshift+0xbe>
 8009a86:	f1c9 0e20 	rsb	lr, r9, #32
 8009a8a:	468a      	mov	sl, r1
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	fa00 f009 	lsl.w	r0, r0, r9
 8009a94:	4310      	orrs	r0, r2
 8009a96:	f84a 0b04 	str.w	r0, [sl], #4
 8009a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9e:	459c      	cmp	ip, r3
 8009aa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009aa4:	d8f3      	bhi.n	8009a8e <__lshift+0x6e>
 8009aa6:	ebac 0304 	sub.w	r3, ip, r4
 8009aaa:	3b15      	subs	r3, #21
 8009aac:	f023 0303 	bic.w	r3, r3, #3
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	f104 0015 	add.w	r0, r4, #21
 8009ab6:	4584      	cmp	ip, r0
 8009ab8:	bf38      	it	cc
 8009aba:	2304      	movcc	r3, #4
 8009abc:	50ca      	str	r2, [r1, r3]
 8009abe:	b10a      	cbz	r2, 8009ac4 <__lshift+0xa4>
 8009ac0:	f108 0602 	add.w	r6, r8, #2
 8009ac4:	3e01      	subs	r6, #1
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	612e      	str	r6, [r5, #16]
 8009aca:	4621      	mov	r1, r4
 8009acc:	f7ff fd90 	bl	80095f0 <_Bfree>
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ada:	3301      	adds	r3, #1
 8009adc:	e7c5      	b.n	8009a6a <__lshift+0x4a>
 8009ade:	3904      	subs	r1, #4
 8009ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ae8:	459c      	cmp	ip, r3
 8009aea:	d8f9      	bhi.n	8009ae0 <__lshift+0xc0>
 8009aec:	e7ea      	b.n	8009ac4 <__lshift+0xa4>
 8009aee:	bf00      	nop
 8009af0:	0800bec1 	.word	0x0800bec1
 8009af4:	0800bed2 	.word	0x0800bed2

08009af8 <__mcmp>:
 8009af8:	690a      	ldr	r2, [r1, #16]
 8009afa:	4603      	mov	r3, r0
 8009afc:	6900      	ldr	r0, [r0, #16]
 8009afe:	1a80      	subs	r0, r0, r2
 8009b00:	b530      	push	{r4, r5, lr}
 8009b02:	d10e      	bne.n	8009b22 <__mcmp+0x2a>
 8009b04:	3314      	adds	r3, #20
 8009b06:	3114      	adds	r1, #20
 8009b08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b18:	4295      	cmp	r5, r2
 8009b1a:	d003      	beq.n	8009b24 <__mcmp+0x2c>
 8009b1c:	d205      	bcs.n	8009b2a <__mcmp+0x32>
 8009b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b22:	bd30      	pop	{r4, r5, pc}
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	d3f3      	bcc.n	8009b10 <__mcmp+0x18>
 8009b28:	e7fb      	b.n	8009b22 <__mcmp+0x2a>
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	e7f9      	b.n	8009b22 <__mcmp+0x2a>
	...

08009b30 <__mdiff>:
 8009b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	4689      	mov	r9, r1
 8009b36:	4606      	mov	r6, r0
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4648      	mov	r0, r9
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	f7ff ffdb 	bl	8009af8 <__mcmp>
 8009b42:	1e05      	subs	r5, r0, #0
 8009b44:	d112      	bne.n	8009b6c <__mdiff+0x3c>
 8009b46:	4629      	mov	r1, r5
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7ff fd11 	bl	8009570 <_Balloc>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	b928      	cbnz	r0, 8009b5e <__mdiff+0x2e>
 8009b52:	4b3f      	ldr	r3, [pc, #252]	@ (8009c50 <__mdiff+0x120>)
 8009b54:	f240 2137 	movw	r1, #567	@ 0x237
 8009b58:	483e      	ldr	r0, [pc, #248]	@ (8009c54 <__mdiff+0x124>)
 8009b5a:	f001 fa95 	bl	800b088 <__assert_func>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b64:	4610      	mov	r0, r2
 8009b66:	b003      	add	sp, #12
 8009b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6c:	bfbc      	itt	lt
 8009b6e:	464b      	movlt	r3, r9
 8009b70:	46a1      	movlt	r9, r4
 8009b72:	4630      	mov	r0, r6
 8009b74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b78:	bfba      	itte	lt
 8009b7a:	461c      	movlt	r4, r3
 8009b7c:	2501      	movlt	r5, #1
 8009b7e:	2500      	movge	r5, #0
 8009b80:	f7ff fcf6 	bl	8009570 <_Balloc>
 8009b84:	4602      	mov	r2, r0
 8009b86:	b918      	cbnz	r0, 8009b90 <__mdiff+0x60>
 8009b88:	4b31      	ldr	r3, [pc, #196]	@ (8009c50 <__mdiff+0x120>)
 8009b8a:	f240 2145 	movw	r1, #581	@ 0x245
 8009b8e:	e7e3      	b.n	8009b58 <__mdiff+0x28>
 8009b90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b94:	6926      	ldr	r6, [r4, #16]
 8009b96:	60c5      	str	r5, [r0, #12]
 8009b98:	f109 0310 	add.w	r3, r9, #16
 8009b9c:	f109 0514 	add.w	r5, r9, #20
 8009ba0:	f104 0e14 	add.w	lr, r4, #20
 8009ba4:	f100 0b14 	add.w	fp, r0, #20
 8009ba8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009bac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	46d9      	mov	r9, fp
 8009bb4:	f04f 0c00 	mov.w	ip, #0
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009bbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	fa1f f38a 	uxth.w	r3, sl
 8009bc8:	4619      	mov	r1, r3
 8009bca:	b283      	uxth	r3, r0
 8009bcc:	1acb      	subs	r3, r1, r3
 8009bce:	0c00      	lsrs	r0, r0, #16
 8009bd0:	4463      	add	r3, ip
 8009bd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009bd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009be0:	4576      	cmp	r6, lr
 8009be2:	f849 3b04 	str.w	r3, [r9], #4
 8009be6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bea:	d8e5      	bhi.n	8009bb8 <__mdiff+0x88>
 8009bec:	1b33      	subs	r3, r6, r4
 8009bee:	3b15      	subs	r3, #21
 8009bf0:	f023 0303 	bic.w	r3, r3, #3
 8009bf4:	3415      	adds	r4, #21
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	42a6      	cmp	r6, r4
 8009bfa:	bf38      	it	cc
 8009bfc:	2304      	movcc	r3, #4
 8009bfe:	441d      	add	r5, r3
 8009c00:	445b      	add	r3, fp
 8009c02:	461e      	mov	r6, r3
 8009c04:	462c      	mov	r4, r5
 8009c06:	4544      	cmp	r4, r8
 8009c08:	d30e      	bcc.n	8009c28 <__mdiff+0xf8>
 8009c0a:	f108 0103 	add.w	r1, r8, #3
 8009c0e:	1b49      	subs	r1, r1, r5
 8009c10:	f021 0103 	bic.w	r1, r1, #3
 8009c14:	3d03      	subs	r5, #3
 8009c16:	45a8      	cmp	r8, r5
 8009c18:	bf38      	it	cc
 8009c1a:	2100      	movcc	r1, #0
 8009c1c:	440b      	add	r3, r1
 8009c1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c22:	b191      	cbz	r1, 8009c4a <__mdiff+0x11a>
 8009c24:	6117      	str	r7, [r2, #16]
 8009c26:	e79d      	b.n	8009b64 <__mdiff+0x34>
 8009c28:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c2c:	46e6      	mov	lr, ip
 8009c2e:	0c08      	lsrs	r0, r1, #16
 8009c30:	fa1c fc81 	uxtah	ip, ip, r1
 8009c34:	4471      	add	r1, lr
 8009c36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c3a:	b289      	uxth	r1, r1
 8009c3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c40:	f846 1b04 	str.w	r1, [r6], #4
 8009c44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c48:	e7dd      	b.n	8009c06 <__mdiff+0xd6>
 8009c4a:	3f01      	subs	r7, #1
 8009c4c:	e7e7      	b.n	8009c1e <__mdiff+0xee>
 8009c4e:	bf00      	nop
 8009c50:	0800bec1 	.word	0x0800bec1
 8009c54:	0800bed2 	.word	0x0800bed2

08009c58 <__ulp>:
 8009c58:	b082      	sub	sp, #8
 8009c5a:	ed8d 0b00 	vstr	d0, [sp]
 8009c5e:	9a01      	ldr	r2, [sp, #4]
 8009c60:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca0 <__ulp+0x48>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	dc08      	bgt.n	8009c7e <__ulp+0x26>
 8009c6c:	425b      	negs	r3, r3
 8009c6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009c72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c76:	da04      	bge.n	8009c82 <__ulp+0x2a>
 8009c78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c7c:	4113      	asrs	r3, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	e008      	b.n	8009c94 <__ulp+0x3c>
 8009c82:	f1a2 0314 	sub.w	r3, r2, #20
 8009c86:	2b1e      	cmp	r3, #30
 8009c88:	bfda      	itte	le
 8009c8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009c8e:	40da      	lsrle	r2, r3
 8009c90:	2201      	movgt	r2, #1
 8009c92:	2300      	movs	r3, #0
 8009c94:	4619      	mov	r1, r3
 8009c96:	4610      	mov	r0, r2
 8009c98:	ec41 0b10 	vmov	d0, r0, r1
 8009c9c:	b002      	add	sp, #8
 8009c9e:	4770      	bx	lr
 8009ca0:	7ff00000 	.word	0x7ff00000

08009ca4 <__b2d>:
 8009ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	6906      	ldr	r6, [r0, #16]
 8009caa:	f100 0814 	add.w	r8, r0, #20
 8009cae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009cb2:	1f37      	subs	r7, r6, #4
 8009cb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009cb8:	4610      	mov	r0, r2
 8009cba:	f7ff fd4b 	bl	8009754 <__hi0bits>
 8009cbe:	f1c0 0320 	rsb	r3, r0, #32
 8009cc2:	280a      	cmp	r0, #10
 8009cc4:	600b      	str	r3, [r1, #0]
 8009cc6:	491b      	ldr	r1, [pc, #108]	@ (8009d34 <__b2d+0x90>)
 8009cc8:	dc15      	bgt.n	8009cf6 <__b2d+0x52>
 8009cca:	f1c0 0c0b 	rsb	ip, r0, #11
 8009cce:	fa22 f30c 	lsr.w	r3, r2, ip
 8009cd2:	45b8      	cmp	r8, r7
 8009cd4:	ea43 0501 	orr.w	r5, r3, r1
 8009cd8:	bf34      	ite	cc
 8009cda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009cde:	2300      	movcs	r3, #0
 8009ce0:	3015      	adds	r0, #21
 8009ce2:	fa02 f000 	lsl.w	r0, r2, r0
 8009ce6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009cea:	4303      	orrs	r3, r0
 8009cec:	461c      	mov	r4, r3
 8009cee:	ec45 4b10 	vmov	d0, r4, r5
 8009cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf6:	45b8      	cmp	r8, r7
 8009cf8:	bf3a      	itte	cc
 8009cfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009cfe:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d02:	2300      	movcs	r3, #0
 8009d04:	380b      	subs	r0, #11
 8009d06:	d012      	beq.n	8009d2e <__b2d+0x8a>
 8009d08:	f1c0 0120 	rsb	r1, r0, #32
 8009d0c:	fa23 f401 	lsr.w	r4, r3, r1
 8009d10:	4082      	lsls	r2, r0
 8009d12:	4322      	orrs	r2, r4
 8009d14:	4547      	cmp	r7, r8
 8009d16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009d1a:	bf8c      	ite	hi
 8009d1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d20:	2200      	movls	r2, #0
 8009d22:	4083      	lsls	r3, r0
 8009d24:	40ca      	lsrs	r2, r1
 8009d26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	e7de      	b.n	8009cec <__b2d+0x48>
 8009d2e:	ea42 0501 	orr.w	r5, r2, r1
 8009d32:	e7db      	b.n	8009cec <__b2d+0x48>
 8009d34:	3ff00000 	.word	0x3ff00000

08009d38 <__d2b>:
 8009d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	460f      	mov	r7, r1
 8009d3e:	2101      	movs	r1, #1
 8009d40:	ec59 8b10 	vmov	r8, r9, d0
 8009d44:	4616      	mov	r6, r2
 8009d46:	f7ff fc13 	bl	8009570 <_Balloc>
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	b930      	cbnz	r0, 8009d5c <__d2b+0x24>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	4b23      	ldr	r3, [pc, #140]	@ (8009de0 <__d2b+0xa8>)
 8009d52:	4824      	ldr	r0, [pc, #144]	@ (8009de4 <__d2b+0xac>)
 8009d54:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d58:	f001 f996 	bl	800b088 <__assert_func>
 8009d5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d64:	b10d      	cbz	r5, 8009d6a <__d2b+0x32>
 8009d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	f1b8 0300 	subs.w	r3, r8, #0
 8009d70:	d023      	beq.n	8009dba <__d2b+0x82>
 8009d72:	4668      	mov	r0, sp
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	f7ff fd0c 	bl	8009792 <__lo0bits>
 8009d7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d7e:	b1d0      	cbz	r0, 8009db6 <__d2b+0x7e>
 8009d80:	f1c0 0320 	rsb	r3, r0, #32
 8009d84:	fa02 f303 	lsl.w	r3, r2, r3
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	40c2      	lsrs	r2, r0
 8009d8c:	6163      	str	r3, [r4, #20]
 8009d8e:	9201      	str	r2, [sp, #4]
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	61a3      	str	r3, [r4, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bf0c      	ite	eq
 8009d98:	2201      	moveq	r2, #1
 8009d9a:	2202      	movne	r2, #2
 8009d9c:	6122      	str	r2, [r4, #16]
 8009d9e:	b1a5      	cbz	r5, 8009dca <__d2b+0x92>
 8009da0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009da4:	4405      	add	r5, r0
 8009da6:	603d      	str	r5, [r7, #0]
 8009da8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009dac:	6030      	str	r0, [r6, #0]
 8009dae:	4620      	mov	r0, r4
 8009db0:	b003      	add	sp, #12
 8009db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009db6:	6161      	str	r1, [r4, #20]
 8009db8:	e7ea      	b.n	8009d90 <__d2b+0x58>
 8009dba:	a801      	add	r0, sp, #4
 8009dbc:	f7ff fce9 	bl	8009792 <__lo0bits>
 8009dc0:	9b01      	ldr	r3, [sp, #4]
 8009dc2:	6163      	str	r3, [r4, #20]
 8009dc4:	3020      	adds	r0, #32
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	e7e8      	b.n	8009d9c <__d2b+0x64>
 8009dca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009dd2:	6038      	str	r0, [r7, #0]
 8009dd4:	6918      	ldr	r0, [r3, #16]
 8009dd6:	f7ff fcbd 	bl	8009754 <__hi0bits>
 8009dda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dde:	e7e5      	b.n	8009dac <__d2b+0x74>
 8009de0:	0800bec1 	.word	0x0800bec1
 8009de4:	0800bed2 	.word	0x0800bed2

08009de8 <__ratio>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	b085      	sub	sp, #20
 8009dee:	e9cd 1000 	strd	r1, r0, [sp]
 8009df2:	a902      	add	r1, sp, #8
 8009df4:	f7ff ff56 	bl	8009ca4 <__b2d>
 8009df8:	9800      	ldr	r0, [sp, #0]
 8009dfa:	a903      	add	r1, sp, #12
 8009dfc:	ec55 4b10 	vmov	r4, r5, d0
 8009e00:	f7ff ff50 	bl	8009ca4 <__b2d>
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	6919      	ldr	r1, [r3, #16]
 8009e08:	9b00      	ldr	r3, [sp, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	1ac9      	subs	r1, r1, r3
 8009e0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	ec5b ab10 	vmov	sl, fp, d0
 8009e18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfce      	itee	gt
 8009e20:	462a      	movgt	r2, r5
 8009e22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e26:	465a      	movle	r2, fp
 8009e28:	462f      	mov	r7, r5
 8009e2a:	46d9      	mov	r9, fp
 8009e2c:	bfcc      	ite	gt
 8009e2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e36:	464b      	mov	r3, r9
 8009e38:	4652      	mov	r2, sl
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	f7f6 fd0d 	bl	800085c <__aeabi_ddiv>
 8009e42:	ec41 0b10 	vmov	d0, r0, r1
 8009e46:	b005      	add	sp, #20
 8009e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e4c <__copybits>:
 8009e4c:	3901      	subs	r1, #1
 8009e4e:	b570      	push	{r4, r5, r6, lr}
 8009e50:	1149      	asrs	r1, r1, #5
 8009e52:	6914      	ldr	r4, [r2, #16]
 8009e54:	3101      	adds	r1, #1
 8009e56:	f102 0314 	add.w	r3, r2, #20
 8009e5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e62:	1f05      	subs	r5, r0, #4
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	d30c      	bcc.n	8009e82 <__copybits+0x36>
 8009e68:	1aa3      	subs	r3, r4, r2
 8009e6a:	3b11      	subs	r3, #17
 8009e6c:	f023 0303 	bic.w	r3, r3, #3
 8009e70:	3211      	adds	r2, #17
 8009e72:	42a2      	cmp	r2, r4
 8009e74:	bf88      	it	hi
 8009e76:	2300      	movhi	r3, #0
 8009e78:	4418      	add	r0, r3
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	4288      	cmp	r0, r1
 8009e7e:	d305      	bcc.n	8009e8c <__copybits+0x40>
 8009e80:	bd70      	pop	{r4, r5, r6, pc}
 8009e82:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e86:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e8a:	e7eb      	b.n	8009e64 <__copybits+0x18>
 8009e8c:	f840 3b04 	str.w	r3, [r0], #4
 8009e90:	e7f4      	b.n	8009e7c <__copybits+0x30>

08009e92 <__any_on>:
 8009e92:	f100 0214 	add.w	r2, r0, #20
 8009e96:	6900      	ldr	r0, [r0, #16]
 8009e98:	114b      	asrs	r3, r1, #5
 8009e9a:	4298      	cmp	r0, r3
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	db11      	blt.n	8009ec4 <__any_on+0x32>
 8009ea0:	dd0a      	ble.n	8009eb8 <__any_on+0x26>
 8009ea2:	f011 011f 	ands.w	r1, r1, #31
 8009ea6:	d007      	beq.n	8009eb8 <__any_on+0x26>
 8009ea8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009eac:	fa24 f001 	lsr.w	r0, r4, r1
 8009eb0:	fa00 f101 	lsl.w	r1, r0, r1
 8009eb4:	428c      	cmp	r4, r1
 8009eb6:	d10b      	bne.n	8009ed0 <__any_on+0x3e>
 8009eb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d803      	bhi.n	8009ec8 <__any_on+0x36>
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	bd10      	pop	{r4, pc}
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	e7f7      	b.n	8009eb8 <__any_on+0x26>
 8009ec8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d0f5      	beq.n	8009ebc <__any_on+0x2a>
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	e7f6      	b.n	8009ec2 <__any_on+0x30>

08009ed4 <sulp>:
 8009ed4:	b570      	push	{r4, r5, r6, lr}
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	460d      	mov	r5, r1
 8009eda:	ec45 4b10 	vmov	d0, r4, r5
 8009ede:	4616      	mov	r6, r2
 8009ee0:	f7ff feba 	bl	8009c58 <__ulp>
 8009ee4:	ec51 0b10 	vmov	r0, r1, d0
 8009ee8:	b17e      	cbz	r6, 8009f0a <sulp+0x36>
 8009eea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009eee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	dd09      	ble.n	8009f0a <sulp+0x36>
 8009ef6:	051b      	lsls	r3, r3, #20
 8009ef8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009efc:	2400      	movs	r4, #0
 8009efe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f02:	4622      	mov	r2, r4
 8009f04:	462b      	mov	r3, r5
 8009f06:	f7f6 fb7f 	bl	8000608 <__aeabi_dmul>
 8009f0a:	ec41 0b10 	vmov	d0, r0, r1
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}

08009f10 <_strtod_l>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	b09f      	sub	sp, #124	@ 0x7c
 8009f16:	460c      	mov	r4, r1
 8009f18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f1e:	9005      	str	r0, [sp, #20]
 8009f20:	f04f 0a00 	mov.w	sl, #0
 8009f24:	f04f 0b00 	mov.w	fp, #0
 8009f28:	460a      	mov	r2, r1
 8009f2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f2c:	7811      	ldrb	r1, [r2, #0]
 8009f2e:	292b      	cmp	r1, #43	@ 0x2b
 8009f30:	d04a      	beq.n	8009fc8 <_strtod_l+0xb8>
 8009f32:	d838      	bhi.n	8009fa6 <_strtod_l+0x96>
 8009f34:	290d      	cmp	r1, #13
 8009f36:	d832      	bhi.n	8009f9e <_strtod_l+0x8e>
 8009f38:	2908      	cmp	r1, #8
 8009f3a:	d832      	bhi.n	8009fa2 <_strtod_l+0x92>
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	d03b      	beq.n	8009fb8 <_strtod_l+0xa8>
 8009f40:	2200      	movs	r2, #0
 8009f42:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009f46:	782a      	ldrb	r2, [r5, #0]
 8009f48:	2a30      	cmp	r2, #48	@ 0x30
 8009f4a:	f040 80b3 	bne.w	800a0b4 <_strtod_l+0x1a4>
 8009f4e:	786a      	ldrb	r2, [r5, #1]
 8009f50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f54:	2a58      	cmp	r2, #88	@ 0x58
 8009f56:	d16e      	bne.n	800a036 <_strtod_l+0x126>
 8009f58:	9302      	str	r3, [sp, #8]
 8009f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	4a8e      	ldr	r2, [pc, #568]	@ (800a19c <_strtod_l+0x28c>)
 8009f64:	9805      	ldr	r0, [sp, #20]
 8009f66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009f68:	a919      	add	r1, sp, #100	@ 0x64
 8009f6a:	f001 f927 	bl	800b1bc <__gethex>
 8009f6e:	f010 060f 	ands.w	r6, r0, #15
 8009f72:	4604      	mov	r4, r0
 8009f74:	d005      	beq.n	8009f82 <_strtod_l+0x72>
 8009f76:	2e06      	cmp	r6, #6
 8009f78:	d128      	bne.n	8009fcc <_strtod_l+0xbc>
 8009f7a:	3501      	adds	r5, #1
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f040 858e 	bne.w	800aaa6 <_strtod_l+0xb96>
 8009f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f8c:	b1cb      	cbz	r3, 8009fc2 <_strtod_l+0xb2>
 8009f8e:	4652      	mov	r2, sl
 8009f90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009f94:	ec43 2b10 	vmov	d0, r2, r3
 8009f98:	b01f      	add	sp, #124	@ 0x7c
 8009f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9e:	2920      	cmp	r1, #32
 8009fa0:	d1ce      	bne.n	8009f40 <_strtod_l+0x30>
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	e7c1      	b.n	8009f2a <_strtod_l+0x1a>
 8009fa6:	292d      	cmp	r1, #45	@ 0x2d
 8009fa8:	d1ca      	bne.n	8009f40 <_strtod_l+0x30>
 8009faa:	2101      	movs	r1, #1
 8009fac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009fae:	1c51      	adds	r1, r2, #1
 8009fb0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009fb2:	7852      	ldrb	r2, [r2, #1]
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	d1c5      	bne.n	8009f44 <_strtod_l+0x34>
 8009fb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fba:	9419      	str	r4, [sp, #100]	@ 0x64
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f040 8570 	bne.w	800aaa2 <_strtod_l+0xb92>
 8009fc2:	4652      	mov	r2, sl
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	e7e5      	b.n	8009f94 <_strtod_l+0x84>
 8009fc8:	2100      	movs	r1, #0
 8009fca:	e7ef      	b.n	8009fac <_strtod_l+0x9c>
 8009fcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009fce:	b13a      	cbz	r2, 8009fe0 <_strtod_l+0xd0>
 8009fd0:	2135      	movs	r1, #53	@ 0x35
 8009fd2:	a81c      	add	r0, sp, #112	@ 0x70
 8009fd4:	f7ff ff3a 	bl	8009e4c <__copybits>
 8009fd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fda:	9805      	ldr	r0, [sp, #20]
 8009fdc:	f7ff fb08 	bl	80095f0 <_Bfree>
 8009fe0:	3e01      	subs	r6, #1
 8009fe2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009fe4:	2e04      	cmp	r6, #4
 8009fe6:	d806      	bhi.n	8009ff6 <_strtod_l+0xe6>
 8009fe8:	e8df f006 	tbb	[pc, r6]
 8009fec:	201d0314 	.word	0x201d0314
 8009ff0:	14          	.byte	0x14
 8009ff1:	00          	.byte	0x00
 8009ff2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ff6:	05e1      	lsls	r1, r4, #23
 8009ff8:	bf48      	it	mi
 8009ffa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a002:	0d1b      	lsrs	r3, r3, #20
 800a004:	051b      	lsls	r3, r3, #20
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1bb      	bne.n	8009f82 <_strtod_l+0x72>
 800a00a:	f7fe fb31 	bl	8008670 <__errno>
 800a00e:	2322      	movs	r3, #34	@ 0x22
 800a010:	6003      	str	r3, [r0, #0]
 800a012:	e7b6      	b.n	8009f82 <_strtod_l+0x72>
 800a014:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a018:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a01c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a020:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a024:	e7e7      	b.n	8009ff6 <_strtod_l+0xe6>
 800a026:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a1a4 <_strtod_l+0x294>
 800a02a:	e7e4      	b.n	8009ff6 <_strtod_l+0xe6>
 800a02c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a030:	f04f 3aff 	mov.w	sl, #4294967295
 800a034:	e7df      	b.n	8009ff6 <_strtod_l+0xe6>
 800a036:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a03c:	785b      	ldrb	r3, [r3, #1]
 800a03e:	2b30      	cmp	r3, #48	@ 0x30
 800a040:	d0f9      	beq.n	800a036 <_strtod_l+0x126>
 800a042:	2b00      	cmp	r3, #0
 800a044:	d09d      	beq.n	8009f82 <_strtod_l+0x72>
 800a046:	2301      	movs	r3, #1
 800a048:	9309      	str	r3, [sp, #36]	@ 0x24
 800a04a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a04c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a04e:	2300      	movs	r3, #0
 800a050:	9308      	str	r3, [sp, #32]
 800a052:	930a      	str	r3, [sp, #40]	@ 0x28
 800a054:	461f      	mov	r7, r3
 800a056:	220a      	movs	r2, #10
 800a058:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a05a:	7805      	ldrb	r5, [r0, #0]
 800a05c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a060:	b2d9      	uxtb	r1, r3
 800a062:	2909      	cmp	r1, #9
 800a064:	d928      	bls.n	800a0b8 <_strtod_l+0x1a8>
 800a066:	494e      	ldr	r1, [pc, #312]	@ (800a1a0 <_strtod_l+0x290>)
 800a068:	2201      	movs	r2, #1
 800a06a:	f000 ffd5 	bl	800b018 <strncmp>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d032      	beq.n	800a0d8 <_strtod_l+0x1c8>
 800a072:	2000      	movs	r0, #0
 800a074:	462a      	mov	r2, r5
 800a076:	4681      	mov	r9, r0
 800a078:	463d      	mov	r5, r7
 800a07a:	4603      	mov	r3, r0
 800a07c:	2a65      	cmp	r2, #101	@ 0x65
 800a07e:	d001      	beq.n	800a084 <_strtod_l+0x174>
 800a080:	2a45      	cmp	r2, #69	@ 0x45
 800a082:	d114      	bne.n	800a0ae <_strtod_l+0x19e>
 800a084:	b91d      	cbnz	r5, 800a08e <_strtod_l+0x17e>
 800a086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a088:	4302      	orrs	r2, r0
 800a08a:	d095      	beq.n	8009fb8 <_strtod_l+0xa8>
 800a08c:	2500      	movs	r5, #0
 800a08e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a090:	1c62      	adds	r2, r4, #1
 800a092:	9219      	str	r2, [sp, #100]	@ 0x64
 800a094:	7862      	ldrb	r2, [r4, #1]
 800a096:	2a2b      	cmp	r2, #43	@ 0x2b
 800a098:	d077      	beq.n	800a18a <_strtod_l+0x27a>
 800a09a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a09c:	d07b      	beq.n	800a196 <_strtod_l+0x286>
 800a09e:	f04f 0c00 	mov.w	ip, #0
 800a0a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a0a6:	2909      	cmp	r1, #9
 800a0a8:	f240 8082 	bls.w	800a1b0 <_strtod_l+0x2a0>
 800a0ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800a0ae:	f04f 0800 	mov.w	r8, #0
 800a0b2:	e0a2      	b.n	800a1fa <_strtod_l+0x2ea>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	e7c7      	b.n	800a048 <_strtod_l+0x138>
 800a0b8:	2f08      	cmp	r7, #8
 800a0ba:	bfd5      	itete	le
 800a0bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a0be:	9908      	ldrgt	r1, [sp, #32]
 800a0c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a0c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a0c8:	f100 0001 	add.w	r0, r0, #1
 800a0cc:	bfd4      	ite	le
 800a0ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a0d0:	9308      	strgt	r3, [sp, #32]
 800a0d2:	3701      	adds	r7, #1
 800a0d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0d6:	e7bf      	b.n	800a058 <_strtod_l+0x148>
 800a0d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0da:	1c5a      	adds	r2, r3, #1
 800a0dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0de:	785a      	ldrb	r2, [r3, #1]
 800a0e0:	b37f      	cbz	r7, 800a142 <_strtod_l+0x232>
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	463d      	mov	r5, r7
 800a0e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a0ea:	2b09      	cmp	r3, #9
 800a0ec:	d912      	bls.n	800a114 <_strtod_l+0x204>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e7c4      	b.n	800a07c <_strtod_l+0x16c>
 800a0f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0f8:	785a      	ldrb	r2, [r3, #1]
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	2a30      	cmp	r2, #48	@ 0x30
 800a0fe:	d0f8      	beq.n	800a0f2 <_strtod_l+0x1e2>
 800a100:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a104:	2b08      	cmp	r3, #8
 800a106:	f200 84d3 	bhi.w	800aab0 <_strtod_l+0xba0>
 800a10a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a10c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a10e:	4681      	mov	r9, r0
 800a110:	2000      	movs	r0, #0
 800a112:	4605      	mov	r5, r0
 800a114:	3a30      	subs	r2, #48	@ 0x30
 800a116:	f100 0301 	add.w	r3, r0, #1
 800a11a:	d02a      	beq.n	800a172 <_strtod_l+0x262>
 800a11c:	4499      	add	r9, r3
 800a11e:	eb00 0c05 	add.w	ip, r0, r5
 800a122:	462b      	mov	r3, r5
 800a124:	210a      	movs	r1, #10
 800a126:	4563      	cmp	r3, ip
 800a128:	d10d      	bne.n	800a146 <_strtod_l+0x236>
 800a12a:	1c69      	adds	r1, r5, #1
 800a12c:	4401      	add	r1, r0
 800a12e:	4428      	add	r0, r5
 800a130:	2808      	cmp	r0, #8
 800a132:	dc16      	bgt.n	800a162 <_strtod_l+0x252>
 800a134:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a136:	230a      	movs	r3, #10
 800a138:	fb03 2300 	mla	r3, r3, r0, r2
 800a13c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a13e:	2300      	movs	r3, #0
 800a140:	e018      	b.n	800a174 <_strtod_l+0x264>
 800a142:	4638      	mov	r0, r7
 800a144:	e7da      	b.n	800a0fc <_strtod_l+0x1ec>
 800a146:	2b08      	cmp	r3, #8
 800a148:	f103 0301 	add.w	r3, r3, #1
 800a14c:	dc03      	bgt.n	800a156 <_strtod_l+0x246>
 800a14e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a150:	434e      	muls	r6, r1
 800a152:	960a      	str	r6, [sp, #40]	@ 0x28
 800a154:	e7e7      	b.n	800a126 <_strtod_l+0x216>
 800a156:	2b10      	cmp	r3, #16
 800a158:	bfde      	ittt	le
 800a15a:	9e08      	ldrle	r6, [sp, #32]
 800a15c:	434e      	mulle	r6, r1
 800a15e:	9608      	strle	r6, [sp, #32]
 800a160:	e7e1      	b.n	800a126 <_strtod_l+0x216>
 800a162:	280f      	cmp	r0, #15
 800a164:	dceb      	bgt.n	800a13e <_strtod_l+0x22e>
 800a166:	9808      	ldr	r0, [sp, #32]
 800a168:	230a      	movs	r3, #10
 800a16a:	fb03 2300 	mla	r3, r3, r0, r2
 800a16e:	9308      	str	r3, [sp, #32]
 800a170:	e7e5      	b.n	800a13e <_strtod_l+0x22e>
 800a172:	4629      	mov	r1, r5
 800a174:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a176:	1c50      	adds	r0, r2, #1
 800a178:	9019      	str	r0, [sp, #100]	@ 0x64
 800a17a:	7852      	ldrb	r2, [r2, #1]
 800a17c:	4618      	mov	r0, r3
 800a17e:	460d      	mov	r5, r1
 800a180:	e7b1      	b.n	800a0e6 <_strtod_l+0x1d6>
 800a182:	f04f 0900 	mov.w	r9, #0
 800a186:	2301      	movs	r3, #1
 800a188:	e77d      	b.n	800a086 <_strtod_l+0x176>
 800a18a:	f04f 0c00 	mov.w	ip, #0
 800a18e:	1ca2      	adds	r2, r4, #2
 800a190:	9219      	str	r2, [sp, #100]	@ 0x64
 800a192:	78a2      	ldrb	r2, [r4, #2]
 800a194:	e785      	b.n	800a0a2 <_strtod_l+0x192>
 800a196:	f04f 0c01 	mov.w	ip, #1
 800a19a:	e7f8      	b.n	800a18e <_strtod_l+0x27e>
 800a19c:	0800c040 	.word	0x0800c040
 800a1a0:	0800c028 	.word	0x0800c028
 800a1a4:	7ff00000 	.word	0x7ff00000
 800a1a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1aa:	1c51      	adds	r1, r2, #1
 800a1ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1ae:	7852      	ldrb	r2, [r2, #1]
 800a1b0:	2a30      	cmp	r2, #48	@ 0x30
 800a1b2:	d0f9      	beq.n	800a1a8 <_strtod_l+0x298>
 800a1b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a1b8:	2908      	cmp	r1, #8
 800a1ba:	f63f af78 	bhi.w	800a0ae <_strtod_l+0x19e>
 800a1be:	3a30      	subs	r2, #48	@ 0x30
 800a1c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a1c6:	f04f 080a 	mov.w	r8, #10
 800a1ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1cc:	1c56      	adds	r6, r2, #1
 800a1ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800a1d0:	7852      	ldrb	r2, [r2, #1]
 800a1d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a1d6:	f1be 0f09 	cmp.w	lr, #9
 800a1da:	d939      	bls.n	800a250 <_strtod_l+0x340>
 800a1dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a1de:	1a76      	subs	r6, r6, r1
 800a1e0:	2e08      	cmp	r6, #8
 800a1e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a1e6:	dc03      	bgt.n	800a1f0 <_strtod_l+0x2e0>
 800a1e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a1ea:	4588      	cmp	r8, r1
 800a1ec:	bfa8      	it	ge
 800a1ee:	4688      	movge	r8, r1
 800a1f0:	f1bc 0f00 	cmp.w	ip, #0
 800a1f4:	d001      	beq.n	800a1fa <_strtod_l+0x2ea>
 800a1f6:	f1c8 0800 	rsb	r8, r8, #0
 800a1fa:	2d00      	cmp	r5, #0
 800a1fc:	d14e      	bne.n	800a29c <_strtod_l+0x38c>
 800a1fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a200:	4308      	orrs	r0, r1
 800a202:	f47f aebe 	bne.w	8009f82 <_strtod_l+0x72>
 800a206:	2b00      	cmp	r3, #0
 800a208:	f47f aed6 	bne.w	8009fb8 <_strtod_l+0xa8>
 800a20c:	2a69      	cmp	r2, #105	@ 0x69
 800a20e:	d028      	beq.n	800a262 <_strtod_l+0x352>
 800a210:	dc25      	bgt.n	800a25e <_strtod_l+0x34e>
 800a212:	2a49      	cmp	r2, #73	@ 0x49
 800a214:	d025      	beq.n	800a262 <_strtod_l+0x352>
 800a216:	2a4e      	cmp	r2, #78	@ 0x4e
 800a218:	f47f aece 	bne.w	8009fb8 <_strtod_l+0xa8>
 800a21c:	499b      	ldr	r1, [pc, #620]	@ (800a48c <_strtod_l+0x57c>)
 800a21e:	a819      	add	r0, sp, #100	@ 0x64
 800a220:	f001 f9ee 	bl	800b600 <__match>
 800a224:	2800      	cmp	r0, #0
 800a226:	f43f aec7 	beq.w	8009fb8 <_strtod_l+0xa8>
 800a22a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b28      	cmp	r3, #40	@ 0x28
 800a230:	d12e      	bne.n	800a290 <_strtod_l+0x380>
 800a232:	4997      	ldr	r1, [pc, #604]	@ (800a490 <_strtod_l+0x580>)
 800a234:	aa1c      	add	r2, sp, #112	@ 0x70
 800a236:	a819      	add	r0, sp, #100	@ 0x64
 800a238:	f001 f9f6 	bl	800b628 <__hexnan>
 800a23c:	2805      	cmp	r0, #5
 800a23e:	d127      	bne.n	800a290 <_strtod_l+0x380>
 800a240:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a242:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a246:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a24a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a24e:	e698      	b.n	8009f82 <_strtod_l+0x72>
 800a250:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a252:	fb08 2101 	mla	r1, r8, r1, r2
 800a256:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a25a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a25c:	e7b5      	b.n	800a1ca <_strtod_l+0x2ba>
 800a25e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a260:	e7da      	b.n	800a218 <_strtod_l+0x308>
 800a262:	498c      	ldr	r1, [pc, #560]	@ (800a494 <_strtod_l+0x584>)
 800a264:	a819      	add	r0, sp, #100	@ 0x64
 800a266:	f001 f9cb 	bl	800b600 <__match>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	f43f aea4 	beq.w	8009fb8 <_strtod_l+0xa8>
 800a270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a272:	4989      	ldr	r1, [pc, #548]	@ (800a498 <_strtod_l+0x588>)
 800a274:	3b01      	subs	r3, #1
 800a276:	a819      	add	r0, sp, #100	@ 0x64
 800a278:	9319      	str	r3, [sp, #100]	@ 0x64
 800a27a:	f001 f9c1 	bl	800b600 <__match>
 800a27e:	b910      	cbnz	r0, 800a286 <_strtod_l+0x376>
 800a280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a282:	3301      	adds	r3, #1
 800a284:	9319      	str	r3, [sp, #100]	@ 0x64
 800a286:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a4a8 <_strtod_l+0x598>
 800a28a:	f04f 0a00 	mov.w	sl, #0
 800a28e:	e678      	b.n	8009f82 <_strtod_l+0x72>
 800a290:	4882      	ldr	r0, [pc, #520]	@ (800a49c <_strtod_l+0x58c>)
 800a292:	f000 fef1 	bl	800b078 <nan>
 800a296:	ec5b ab10 	vmov	sl, fp, d0
 800a29a:	e672      	b.n	8009f82 <_strtod_l+0x72>
 800a29c:	eba8 0309 	sub.w	r3, r8, r9
 800a2a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a4:	2f00      	cmp	r7, #0
 800a2a6:	bf08      	it	eq
 800a2a8:	462f      	moveq	r7, r5
 800a2aa:	2d10      	cmp	r5, #16
 800a2ac:	462c      	mov	r4, r5
 800a2ae:	bfa8      	it	ge
 800a2b0:	2410      	movge	r4, #16
 800a2b2:	f7f6 f92f 	bl	8000514 <__aeabi_ui2d>
 800a2b6:	2d09      	cmp	r5, #9
 800a2b8:	4682      	mov	sl, r0
 800a2ba:	468b      	mov	fp, r1
 800a2bc:	dc13      	bgt.n	800a2e6 <_strtod_l+0x3d6>
 800a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f43f ae5e 	beq.w	8009f82 <_strtod_l+0x72>
 800a2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c8:	dd78      	ble.n	800a3bc <_strtod_l+0x4ac>
 800a2ca:	2b16      	cmp	r3, #22
 800a2cc:	dc5f      	bgt.n	800a38e <_strtod_l+0x47e>
 800a2ce:	4974      	ldr	r1, [pc, #464]	@ (800a4a0 <_strtod_l+0x590>)
 800a2d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d8:	4652      	mov	r2, sl
 800a2da:	465b      	mov	r3, fp
 800a2dc:	f7f6 f994 	bl	8000608 <__aeabi_dmul>
 800a2e0:	4682      	mov	sl, r0
 800a2e2:	468b      	mov	fp, r1
 800a2e4:	e64d      	b.n	8009f82 <_strtod_l+0x72>
 800a2e6:	4b6e      	ldr	r3, [pc, #440]	@ (800a4a0 <_strtod_l+0x590>)
 800a2e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a2f0:	f7f6 f98a 	bl	8000608 <__aeabi_dmul>
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	9808      	ldr	r0, [sp, #32]
 800a2f8:	468b      	mov	fp, r1
 800a2fa:	f7f6 f90b 	bl	8000514 <__aeabi_ui2d>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4650      	mov	r0, sl
 800a304:	4659      	mov	r1, fp
 800a306:	f7f5 ffc9 	bl	800029c <__adddf3>
 800a30a:	2d0f      	cmp	r5, #15
 800a30c:	4682      	mov	sl, r0
 800a30e:	468b      	mov	fp, r1
 800a310:	ddd5      	ble.n	800a2be <_strtod_l+0x3ae>
 800a312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a314:	1b2c      	subs	r4, r5, r4
 800a316:	441c      	add	r4, r3
 800a318:	2c00      	cmp	r4, #0
 800a31a:	f340 8096 	ble.w	800a44a <_strtod_l+0x53a>
 800a31e:	f014 030f 	ands.w	r3, r4, #15
 800a322:	d00a      	beq.n	800a33a <_strtod_l+0x42a>
 800a324:	495e      	ldr	r1, [pc, #376]	@ (800a4a0 <_strtod_l+0x590>)
 800a326:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a32a:	4652      	mov	r2, sl
 800a32c:	465b      	mov	r3, fp
 800a32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a332:	f7f6 f969 	bl	8000608 <__aeabi_dmul>
 800a336:	4682      	mov	sl, r0
 800a338:	468b      	mov	fp, r1
 800a33a:	f034 040f 	bics.w	r4, r4, #15
 800a33e:	d073      	beq.n	800a428 <_strtod_l+0x518>
 800a340:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a344:	dd48      	ble.n	800a3d8 <_strtod_l+0x4c8>
 800a346:	2400      	movs	r4, #0
 800a348:	46a0      	mov	r8, r4
 800a34a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a34c:	46a1      	mov	r9, r4
 800a34e:	9a05      	ldr	r2, [sp, #20]
 800a350:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a4a8 <_strtod_l+0x598>
 800a354:	2322      	movs	r3, #34	@ 0x22
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	f04f 0a00 	mov.w	sl, #0
 800a35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f43f ae0f 	beq.w	8009f82 <_strtod_l+0x72>
 800a364:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a366:	9805      	ldr	r0, [sp, #20]
 800a368:	f7ff f942 	bl	80095f0 <_Bfree>
 800a36c:	9805      	ldr	r0, [sp, #20]
 800a36e:	4649      	mov	r1, r9
 800a370:	f7ff f93e 	bl	80095f0 <_Bfree>
 800a374:	9805      	ldr	r0, [sp, #20]
 800a376:	4641      	mov	r1, r8
 800a378:	f7ff f93a 	bl	80095f0 <_Bfree>
 800a37c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a37e:	9805      	ldr	r0, [sp, #20]
 800a380:	f7ff f936 	bl	80095f0 <_Bfree>
 800a384:	9805      	ldr	r0, [sp, #20]
 800a386:	4621      	mov	r1, r4
 800a388:	f7ff f932 	bl	80095f0 <_Bfree>
 800a38c:	e5f9      	b.n	8009f82 <_strtod_l+0x72>
 800a38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a390:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a394:	4293      	cmp	r3, r2
 800a396:	dbbc      	blt.n	800a312 <_strtod_l+0x402>
 800a398:	4c41      	ldr	r4, [pc, #260]	@ (800a4a0 <_strtod_l+0x590>)
 800a39a:	f1c5 050f 	rsb	r5, r5, #15
 800a39e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3a2:	4652      	mov	r2, sl
 800a3a4:	465b      	mov	r3, fp
 800a3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3aa:	f7f6 f92d 	bl	8000608 <__aeabi_dmul>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b0:	1b5d      	subs	r5, r3, r5
 800a3b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3ba:	e78f      	b.n	800a2dc <_strtod_l+0x3cc>
 800a3bc:	3316      	adds	r3, #22
 800a3be:	dba8      	blt.n	800a312 <_strtod_l+0x402>
 800a3c0:	4b37      	ldr	r3, [pc, #220]	@ (800a4a0 <_strtod_l+0x590>)
 800a3c2:	eba9 0808 	sub.w	r8, r9, r8
 800a3c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a3ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	f7f6 fa43 	bl	800085c <__aeabi_ddiv>
 800a3d6:	e783      	b.n	800a2e0 <_strtod_l+0x3d0>
 800a3d8:	4b32      	ldr	r3, [pc, #200]	@ (800a4a4 <_strtod_l+0x594>)
 800a3da:	9308      	str	r3, [sp, #32]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	1124      	asrs	r4, r4, #4
 800a3e0:	4650      	mov	r0, sl
 800a3e2:	4659      	mov	r1, fp
 800a3e4:	461e      	mov	r6, r3
 800a3e6:	2c01      	cmp	r4, #1
 800a3e8:	dc21      	bgt.n	800a42e <_strtod_l+0x51e>
 800a3ea:	b10b      	cbz	r3, 800a3f0 <_strtod_l+0x4e0>
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	468b      	mov	fp, r1
 800a3f0:	492c      	ldr	r1, [pc, #176]	@ (800a4a4 <_strtod_l+0x594>)
 800a3f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a3f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a402:	f7f6 f901 	bl	8000608 <__aeabi_dmul>
 800a406:	4b28      	ldr	r3, [pc, #160]	@ (800a4a8 <_strtod_l+0x598>)
 800a408:	460a      	mov	r2, r1
 800a40a:	400b      	ands	r3, r1
 800a40c:	4927      	ldr	r1, [pc, #156]	@ (800a4ac <_strtod_l+0x59c>)
 800a40e:	428b      	cmp	r3, r1
 800a410:	4682      	mov	sl, r0
 800a412:	d898      	bhi.n	800a346 <_strtod_l+0x436>
 800a414:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a418:	428b      	cmp	r3, r1
 800a41a:	bf86      	itte	hi
 800a41c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a4b0 <_strtod_l+0x5a0>
 800a420:	f04f 3aff 	movhi.w	sl, #4294967295
 800a424:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a428:	2300      	movs	r3, #0
 800a42a:	9308      	str	r3, [sp, #32]
 800a42c:	e07a      	b.n	800a524 <_strtod_l+0x614>
 800a42e:	07e2      	lsls	r2, r4, #31
 800a430:	d505      	bpl.n	800a43e <_strtod_l+0x52e>
 800a432:	9b08      	ldr	r3, [sp, #32]
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	f7f6 f8e6 	bl	8000608 <__aeabi_dmul>
 800a43c:	2301      	movs	r3, #1
 800a43e:	9a08      	ldr	r2, [sp, #32]
 800a440:	3208      	adds	r2, #8
 800a442:	3601      	adds	r6, #1
 800a444:	1064      	asrs	r4, r4, #1
 800a446:	9208      	str	r2, [sp, #32]
 800a448:	e7cd      	b.n	800a3e6 <_strtod_l+0x4d6>
 800a44a:	d0ed      	beq.n	800a428 <_strtod_l+0x518>
 800a44c:	4264      	negs	r4, r4
 800a44e:	f014 020f 	ands.w	r2, r4, #15
 800a452:	d00a      	beq.n	800a46a <_strtod_l+0x55a>
 800a454:	4b12      	ldr	r3, [pc, #72]	@ (800a4a0 <_strtod_l+0x590>)
 800a456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a45a:	4650      	mov	r0, sl
 800a45c:	4659      	mov	r1, fp
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f6 f9fb 	bl	800085c <__aeabi_ddiv>
 800a466:	4682      	mov	sl, r0
 800a468:	468b      	mov	fp, r1
 800a46a:	1124      	asrs	r4, r4, #4
 800a46c:	d0dc      	beq.n	800a428 <_strtod_l+0x518>
 800a46e:	2c1f      	cmp	r4, #31
 800a470:	dd20      	ble.n	800a4b4 <_strtod_l+0x5a4>
 800a472:	2400      	movs	r4, #0
 800a474:	46a0      	mov	r8, r4
 800a476:	940a      	str	r4, [sp, #40]	@ 0x28
 800a478:	46a1      	mov	r9, r4
 800a47a:	9a05      	ldr	r2, [sp, #20]
 800a47c:	2322      	movs	r3, #34	@ 0x22
 800a47e:	f04f 0a00 	mov.w	sl, #0
 800a482:	f04f 0b00 	mov.w	fp, #0
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	e768      	b.n	800a35c <_strtod_l+0x44c>
 800a48a:	bf00      	nop
 800a48c:	0800be19 	.word	0x0800be19
 800a490:	0800c02c 	.word	0x0800c02c
 800a494:	0800be11 	.word	0x0800be11
 800a498:	0800be48 	.word	0x0800be48
 800a49c:	0800c1d5 	.word	0x0800c1d5
 800a4a0:	0800bf60 	.word	0x0800bf60
 800a4a4:	0800bf38 	.word	0x0800bf38
 800a4a8:	7ff00000 	.word	0x7ff00000
 800a4ac:	7ca00000 	.word	0x7ca00000
 800a4b0:	7fefffff 	.word	0x7fefffff
 800a4b4:	f014 0310 	ands.w	r3, r4, #16
 800a4b8:	bf18      	it	ne
 800a4ba:	236a      	movne	r3, #106	@ 0x6a
 800a4bc:	4ea9      	ldr	r6, [pc, #676]	@ (800a764 <_strtod_l+0x854>)
 800a4be:	9308      	str	r3, [sp, #32]
 800a4c0:	4650      	mov	r0, sl
 800a4c2:	4659      	mov	r1, fp
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	07e2      	lsls	r2, r4, #31
 800a4c8:	d504      	bpl.n	800a4d4 <_strtod_l+0x5c4>
 800a4ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4ce:	f7f6 f89b 	bl	8000608 <__aeabi_dmul>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	1064      	asrs	r4, r4, #1
 800a4d6:	f106 0608 	add.w	r6, r6, #8
 800a4da:	d1f4      	bne.n	800a4c6 <_strtod_l+0x5b6>
 800a4dc:	b10b      	cbz	r3, 800a4e2 <_strtod_l+0x5d2>
 800a4de:	4682      	mov	sl, r0
 800a4e0:	468b      	mov	fp, r1
 800a4e2:	9b08      	ldr	r3, [sp, #32]
 800a4e4:	b1b3      	cbz	r3, 800a514 <_strtod_l+0x604>
 800a4e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a4ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	4659      	mov	r1, fp
 800a4f2:	dd0f      	ble.n	800a514 <_strtod_l+0x604>
 800a4f4:	2b1f      	cmp	r3, #31
 800a4f6:	dd55      	ble.n	800a5a4 <_strtod_l+0x694>
 800a4f8:	2b34      	cmp	r3, #52	@ 0x34
 800a4fa:	bfde      	ittt	le
 800a4fc:	f04f 33ff 	movle.w	r3, #4294967295
 800a500:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a504:	4093      	lslle	r3, r2
 800a506:	f04f 0a00 	mov.w	sl, #0
 800a50a:	bfcc      	ite	gt
 800a50c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a510:	ea03 0b01 	andle.w	fp, r3, r1
 800a514:	2200      	movs	r2, #0
 800a516:	2300      	movs	r3, #0
 800a518:	4650      	mov	r0, sl
 800a51a:	4659      	mov	r1, fp
 800a51c:	f7f6 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a520:	2800      	cmp	r0, #0
 800a522:	d1a6      	bne.n	800a472 <_strtod_l+0x562>
 800a524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a52a:	9805      	ldr	r0, [sp, #20]
 800a52c:	462b      	mov	r3, r5
 800a52e:	463a      	mov	r2, r7
 800a530:	f7ff f8c6 	bl	80096c0 <__s2b>
 800a534:	900a      	str	r0, [sp, #40]	@ 0x28
 800a536:	2800      	cmp	r0, #0
 800a538:	f43f af05 	beq.w	800a346 <_strtod_l+0x436>
 800a53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a53e:	2a00      	cmp	r2, #0
 800a540:	eba9 0308 	sub.w	r3, r9, r8
 800a544:	bfa8      	it	ge
 800a546:	2300      	movge	r3, #0
 800a548:	9312      	str	r3, [sp, #72]	@ 0x48
 800a54a:	2400      	movs	r4, #0
 800a54c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a550:	9316      	str	r3, [sp, #88]	@ 0x58
 800a552:	46a0      	mov	r8, r4
 800a554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a556:	9805      	ldr	r0, [sp, #20]
 800a558:	6859      	ldr	r1, [r3, #4]
 800a55a:	f7ff f809 	bl	8009570 <_Balloc>
 800a55e:	4681      	mov	r9, r0
 800a560:	2800      	cmp	r0, #0
 800a562:	f43f aef4 	beq.w	800a34e <_strtod_l+0x43e>
 800a566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a568:	691a      	ldr	r2, [r3, #16]
 800a56a:	3202      	adds	r2, #2
 800a56c:	f103 010c 	add.w	r1, r3, #12
 800a570:	0092      	lsls	r2, r2, #2
 800a572:	300c      	adds	r0, #12
 800a574:	f000 fd72 	bl	800b05c <memcpy>
 800a578:	ec4b ab10 	vmov	d0, sl, fp
 800a57c:	9805      	ldr	r0, [sp, #20]
 800a57e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a580:	a91b      	add	r1, sp, #108	@ 0x6c
 800a582:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a586:	f7ff fbd7 	bl	8009d38 <__d2b>
 800a58a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f43f aede 	beq.w	800a34e <_strtod_l+0x43e>
 800a592:	9805      	ldr	r0, [sp, #20]
 800a594:	2101      	movs	r1, #1
 800a596:	f7ff f929 	bl	80097ec <__i2b>
 800a59a:	4680      	mov	r8, r0
 800a59c:	b948      	cbnz	r0, 800a5b2 <_strtod_l+0x6a2>
 800a59e:	f04f 0800 	mov.w	r8, #0
 800a5a2:	e6d4      	b.n	800a34e <_strtod_l+0x43e>
 800a5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ac:	ea03 0a0a 	and.w	sl, r3, sl
 800a5b0:	e7b0      	b.n	800a514 <_strtod_l+0x604>
 800a5b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a5b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	bfab      	itete	ge
 800a5ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a5bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a5be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a5c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a5c2:	bfac      	ite	ge
 800a5c4:	18ef      	addge	r7, r5, r3
 800a5c6:	1b5e      	sublt	r6, r3, r5
 800a5c8:	9b08      	ldr	r3, [sp, #32]
 800a5ca:	1aed      	subs	r5, r5, r3
 800a5cc:	4415      	add	r5, r2
 800a5ce:	4b66      	ldr	r3, [pc, #408]	@ (800a768 <_strtod_l+0x858>)
 800a5d0:	3d01      	subs	r5, #1
 800a5d2:	429d      	cmp	r5, r3
 800a5d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a5d8:	da50      	bge.n	800a67c <_strtod_l+0x76c>
 800a5da:	1b5b      	subs	r3, r3, r5
 800a5dc:	2b1f      	cmp	r3, #31
 800a5de:	eba2 0203 	sub.w	r2, r2, r3
 800a5e2:	f04f 0101 	mov.w	r1, #1
 800a5e6:	dc3d      	bgt.n	800a664 <_strtod_l+0x754>
 800a5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5f2:	18bd      	adds	r5, r7, r2
 800a5f4:	9b08      	ldr	r3, [sp, #32]
 800a5f6:	42af      	cmp	r7, r5
 800a5f8:	4416      	add	r6, r2
 800a5fa:	441e      	add	r6, r3
 800a5fc:	463b      	mov	r3, r7
 800a5fe:	bfa8      	it	ge
 800a600:	462b      	movge	r3, r5
 800a602:	42b3      	cmp	r3, r6
 800a604:	bfa8      	it	ge
 800a606:	4633      	movge	r3, r6
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bfc2      	ittt	gt
 800a60c:	1aed      	subgt	r5, r5, r3
 800a60e:	1af6      	subgt	r6, r6, r3
 800a610:	1aff      	subgt	r7, r7, r3
 800a612:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a614:	2b00      	cmp	r3, #0
 800a616:	dd16      	ble.n	800a646 <_strtod_l+0x736>
 800a618:	4641      	mov	r1, r8
 800a61a:	9805      	ldr	r0, [sp, #20]
 800a61c:	461a      	mov	r2, r3
 800a61e:	f7ff f9a5 	bl	800996c <__pow5mult>
 800a622:	4680      	mov	r8, r0
 800a624:	2800      	cmp	r0, #0
 800a626:	d0ba      	beq.n	800a59e <_strtod_l+0x68e>
 800a628:	4601      	mov	r1, r0
 800a62a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a62c:	9805      	ldr	r0, [sp, #20]
 800a62e:	f7ff f8f3 	bl	8009818 <__multiply>
 800a632:	900e      	str	r0, [sp, #56]	@ 0x38
 800a634:	2800      	cmp	r0, #0
 800a636:	f43f ae8a 	beq.w	800a34e <_strtod_l+0x43e>
 800a63a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a63c:	9805      	ldr	r0, [sp, #20]
 800a63e:	f7fe ffd7 	bl	80095f0 <_Bfree>
 800a642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a644:	931a      	str	r3, [sp, #104]	@ 0x68
 800a646:	2d00      	cmp	r5, #0
 800a648:	dc1d      	bgt.n	800a686 <_strtod_l+0x776>
 800a64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dd23      	ble.n	800a698 <_strtod_l+0x788>
 800a650:	4649      	mov	r1, r9
 800a652:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a654:	9805      	ldr	r0, [sp, #20]
 800a656:	f7ff f989 	bl	800996c <__pow5mult>
 800a65a:	4681      	mov	r9, r0
 800a65c:	b9e0      	cbnz	r0, 800a698 <_strtod_l+0x788>
 800a65e:	f04f 0900 	mov.w	r9, #0
 800a662:	e674      	b.n	800a34e <_strtod_l+0x43e>
 800a664:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a668:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a66c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a670:	35e2      	adds	r5, #226	@ 0xe2
 800a672:	fa01 f305 	lsl.w	r3, r1, r5
 800a676:	9310      	str	r3, [sp, #64]	@ 0x40
 800a678:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a67a:	e7ba      	b.n	800a5f2 <_strtod_l+0x6e2>
 800a67c:	2300      	movs	r3, #0
 800a67e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a680:	2301      	movs	r3, #1
 800a682:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a684:	e7b5      	b.n	800a5f2 <_strtod_l+0x6e2>
 800a686:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a688:	9805      	ldr	r0, [sp, #20]
 800a68a:	462a      	mov	r2, r5
 800a68c:	f7ff f9c8 	bl	8009a20 <__lshift>
 800a690:	901a      	str	r0, [sp, #104]	@ 0x68
 800a692:	2800      	cmp	r0, #0
 800a694:	d1d9      	bne.n	800a64a <_strtod_l+0x73a>
 800a696:	e65a      	b.n	800a34e <_strtod_l+0x43e>
 800a698:	2e00      	cmp	r6, #0
 800a69a:	dd07      	ble.n	800a6ac <_strtod_l+0x79c>
 800a69c:	4649      	mov	r1, r9
 800a69e:	9805      	ldr	r0, [sp, #20]
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	f7ff f9bd 	bl	8009a20 <__lshift>
 800a6a6:	4681      	mov	r9, r0
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d0d8      	beq.n	800a65e <_strtod_l+0x74e>
 800a6ac:	2f00      	cmp	r7, #0
 800a6ae:	dd08      	ble.n	800a6c2 <_strtod_l+0x7b2>
 800a6b0:	4641      	mov	r1, r8
 800a6b2:	9805      	ldr	r0, [sp, #20]
 800a6b4:	463a      	mov	r2, r7
 800a6b6:	f7ff f9b3 	bl	8009a20 <__lshift>
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f43f ae46 	beq.w	800a34e <_strtod_l+0x43e>
 800a6c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6c4:	9805      	ldr	r0, [sp, #20]
 800a6c6:	464a      	mov	r2, r9
 800a6c8:	f7ff fa32 	bl	8009b30 <__mdiff>
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f43f ae3d 	beq.w	800a34e <_strtod_l+0x43e>
 800a6d4:	68c3      	ldr	r3, [r0, #12]
 800a6d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6d8:	2300      	movs	r3, #0
 800a6da:	60c3      	str	r3, [r0, #12]
 800a6dc:	4641      	mov	r1, r8
 800a6de:	f7ff fa0b 	bl	8009af8 <__mcmp>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	da46      	bge.n	800a774 <_strtod_l+0x864>
 800a6e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6e8:	ea53 030a 	orrs.w	r3, r3, sl
 800a6ec:	d16c      	bne.n	800a7c8 <_strtod_l+0x8b8>
 800a6ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d168      	bne.n	800a7c8 <_strtod_l+0x8b8>
 800a6f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6fa:	0d1b      	lsrs	r3, r3, #20
 800a6fc:	051b      	lsls	r3, r3, #20
 800a6fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a702:	d961      	bls.n	800a7c8 <_strtod_l+0x8b8>
 800a704:	6963      	ldr	r3, [r4, #20]
 800a706:	b913      	cbnz	r3, 800a70e <_strtod_l+0x7fe>
 800a708:	6923      	ldr	r3, [r4, #16]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	dd5c      	ble.n	800a7c8 <_strtod_l+0x8b8>
 800a70e:	4621      	mov	r1, r4
 800a710:	2201      	movs	r2, #1
 800a712:	9805      	ldr	r0, [sp, #20]
 800a714:	f7ff f984 	bl	8009a20 <__lshift>
 800a718:	4641      	mov	r1, r8
 800a71a:	4604      	mov	r4, r0
 800a71c:	f7ff f9ec 	bl	8009af8 <__mcmp>
 800a720:	2800      	cmp	r0, #0
 800a722:	dd51      	ble.n	800a7c8 <_strtod_l+0x8b8>
 800a724:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a728:	9a08      	ldr	r2, [sp, #32]
 800a72a:	0d1b      	lsrs	r3, r3, #20
 800a72c:	051b      	lsls	r3, r3, #20
 800a72e:	2a00      	cmp	r2, #0
 800a730:	d06b      	beq.n	800a80a <_strtod_l+0x8fa>
 800a732:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a736:	d868      	bhi.n	800a80a <_strtod_l+0x8fa>
 800a738:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a73c:	f67f ae9d 	bls.w	800a47a <_strtod_l+0x56a>
 800a740:	4b0a      	ldr	r3, [pc, #40]	@ (800a76c <_strtod_l+0x85c>)
 800a742:	4650      	mov	r0, sl
 800a744:	4659      	mov	r1, fp
 800a746:	2200      	movs	r2, #0
 800a748:	f7f5 ff5e 	bl	8000608 <__aeabi_dmul>
 800a74c:	4b08      	ldr	r3, [pc, #32]	@ (800a770 <_strtod_l+0x860>)
 800a74e:	400b      	ands	r3, r1
 800a750:	4682      	mov	sl, r0
 800a752:	468b      	mov	fp, r1
 800a754:	2b00      	cmp	r3, #0
 800a756:	f47f ae05 	bne.w	800a364 <_strtod_l+0x454>
 800a75a:	9a05      	ldr	r2, [sp, #20]
 800a75c:	2322      	movs	r3, #34	@ 0x22
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	e600      	b.n	800a364 <_strtod_l+0x454>
 800a762:	bf00      	nop
 800a764:	0800c058 	.word	0x0800c058
 800a768:	fffffc02 	.word	0xfffffc02
 800a76c:	39500000 	.word	0x39500000
 800a770:	7ff00000 	.word	0x7ff00000
 800a774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a778:	d165      	bne.n	800a846 <_strtod_l+0x936>
 800a77a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a780:	b35a      	cbz	r2, 800a7da <_strtod_l+0x8ca>
 800a782:	4a9f      	ldr	r2, [pc, #636]	@ (800aa00 <_strtod_l+0xaf0>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d12b      	bne.n	800a7e0 <_strtod_l+0x8d0>
 800a788:	9b08      	ldr	r3, [sp, #32]
 800a78a:	4651      	mov	r1, sl
 800a78c:	b303      	cbz	r3, 800a7d0 <_strtod_l+0x8c0>
 800a78e:	4b9d      	ldr	r3, [pc, #628]	@ (800aa04 <_strtod_l+0xaf4>)
 800a790:	465a      	mov	r2, fp
 800a792:	4013      	ands	r3, r2
 800a794:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a798:	f04f 32ff 	mov.w	r2, #4294967295
 800a79c:	d81b      	bhi.n	800a7d6 <_strtod_l+0x8c6>
 800a79e:	0d1b      	lsrs	r3, r3, #20
 800a7a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a8:	4299      	cmp	r1, r3
 800a7aa:	d119      	bne.n	800a7e0 <_strtod_l+0x8d0>
 800a7ac:	4b96      	ldr	r3, [pc, #600]	@ (800aa08 <_strtod_l+0xaf8>)
 800a7ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d102      	bne.n	800a7ba <_strtod_l+0x8aa>
 800a7b4:	3101      	adds	r1, #1
 800a7b6:	f43f adca 	beq.w	800a34e <_strtod_l+0x43e>
 800a7ba:	4b92      	ldr	r3, [pc, #584]	@ (800aa04 <_strtod_l+0xaf4>)
 800a7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7be:	401a      	ands	r2, r3
 800a7c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a7c4:	f04f 0a00 	mov.w	sl, #0
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1b8      	bne.n	800a740 <_strtod_l+0x830>
 800a7ce:	e5c9      	b.n	800a364 <_strtod_l+0x454>
 800a7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d4:	e7e8      	b.n	800a7a8 <_strtod_l+0x898>
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	e7e6      	b.n	800a7a8 <_strtod_l+0x898>
 800a7da:	ea53 030a 	orrs.w	r3, r3, sl
 800a7de:	d0a1      	beq.n	800a724 <_strtod_l+0x814>
 800a7e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7e2:	b1db      	cbz	r3, 800a81c <_strtod_l+0x90c>
 800a7e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7e6:	4213      	tst	r3, r2
 800a7e8:	d0ee      	beq.n	800a7c8 <_strtod_l+0x8b8>
 800a7ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ec:	9a08      	ldr	r2, [sp, #32]
 800a7ee:	4650      	mov	r0, sl
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	b1bb      	cbz	r3, 800a824 <_strtod_l+0x914>
 800a7f4:	f7ff fb6e 	bl	8009ed4 <sulp>
 800a7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7fc:	ec53 2b10 	vmov	r2, r3, d0
 800a800:	f7f5 fd4c 	bl	800029c <__adddf3>
 800a804:	4682      	mov	sl, r0
 800a806:	468b      	mov	fp, r1
 800a808:	e7de      	b.n	800a7c8 <_strtod_l+0x8b8>
 800a80a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a80e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a812:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a816:	f04f 3aff 	mov.w	sl, #4294967295
 800a81a:	e7d5      	b.n	800a7c8 <_strtod_l+0x8b8>
 800a81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a81e:	ea13 0f0a 	tst.w	r3, sl
 800a822:	e7e1      	b.n	800a7e8 <_strtod_l+0x8d8>
 800a824:	f7ff fb56 	bl	8009ed4 <sulp>
 800a828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a82c:	ec53 2b10 	vmov	r2, r3, d0
 800a830:	f7f5 fd32 	bl	8000298 <__aeabi_dsub>
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	4682      	mov	sl, r0
 800a83a:	468b      	mov	fp, r1
 800a83c:	f7f6 f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a840:	2800      	cmp	r0, #0
 800a842:	d0c1      	beq.n	800a7c8 <_strtod_l+0x8b8>
 800a844:	e619      	b.n	800a47a <_strtod_l+0x56a>
 800a846:	4641      	mov	r1, r8
 800a848:	4620      	mov	r0, r4
 800a84a:	f7ff facd 	bl	8009de8 <__ratio>
 800a84e:	ec57 6b10 	vmov	r6, r7, d0
 800a852:	2200      	movs	r2, #0
 800a854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f6 f950 	bl	8000b00 <__aeabi_dcmple>
 800a860:	2800      	cmp	r0, #0
 800a862:	d06f      	beq.n	800a944 <_strtod_l+0xa34>
 800a864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a866:	2b00      	cmp	r3, #0
 800a868:	d17a      	bne.n	800a960 <_strtod_l+0xa50>
 800a86a:	f1ba 0f00 	cmp.w	sl, #0
 800a86e:	d158      	bne.n	800a922 <_strtod_l+0xa12>
 800a870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a876:	2b00      	cmp	r3, #0
 800a878:	d15a      	bne.n	800a930 <_strtod_l+0xa20>
 800a87a:	4b64      	ldr	r3, [pc, #400]	@ (800aa0c <_strtod_l+0xafc>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f6 f933 	bl	8000aec <__aeabi_dcmplt>
 800a886:	2800      	cmp	r0, #0
 800a888:	d159      	bne.n	800a93e <_strtod_l+0xa2e>
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	4b60      	ldr	r3, [pc, #384]	@ (800aa10 <_strtod_l+0xb00>)
 800a890:	2200      	movs	r2, #0
 800a892:	f7f5 feb9 	bl	8000608 <__aeabi_dmul>
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a89e:	9606      	str	r6, [sp, #24]
 800a8a0:	9307      	str	r3, [sp, #28]
 800a8a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8a6:	4d57      	ldr	r5, [pc, #348]	@ (800aa04 <_strtod_l+0xaf4>)
 800a8a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8ae:	401d      	ands	r5, r3
 800a8b0:	4b58      	ldr	r3, [pc, #352]	@ (800aa14 <_strtod_l+0xb04>)
 800a8b2:	429d      	cmp	r5, r3
 800a8b4:	f040 80b2 	bne.w	800aa1c <_strtod_l+0xb0c>
 800a8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a8be:	ec4b ab10 	vmov	d0, sl, fp
 800a8c2:	f7ff f9c9 	bl	8009c58 <__ulp>
 800a8c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8ca:	ec51 0b10 	vmov	r0, r1, d0
 800a8ce:	f7f5 fe9b 	bl	8000608 <__aeabi_dmul>
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	f7f5 fce1 	bl	800029c <__adddf3>
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4949      	ldr	r1, [pc, #292]	@ (800aa04 <_strtod_l+0xaf4>)
 800a8de:	4a4e      	ldr	r2, [pc, #312]	@ (800aa18 <_strtod_l+0xb08>)
 800a8e0:	4019      	ands	r1, r3
 800a8e2:	4291      	cmp	r1, r2
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	d942      	bls.n	800a96e <_strtod_l+0xa5e>
 800a8e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a8ea:	4b47      	ldr	r3, [pc, #284]	@ (800aa08 <_strtod_l+0xaf8>)
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d103      	bne.n	800a8f8 <_strtod_l+0x9e8>
 800a8f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	f43f ad2b 	beq.w	800a34e <_strtod_l+0x43e>
 800a8f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa08 <_strtod_l+0xaf8>
 800a8fc:	f04f 3aff 	mov.w	sl, #4294967295
 800a900:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a902:	9805      	ldr	r0, [sp, #20]
 800a904:	f7fe fe74 	bl	80095f0 <_Bfree>
 800a908:	9805      	ldr	r0, [sp, #20]
 800a90a:	4649      	mov	r1, r9
 800a90c:	f7fe fe70 	bl	80095f0 <_Bfree>
 800a910:	9805      	ldr	r0, [sp, #20]
 800a912:	4641      	mov	r1, r8
 800a914:	f7fe fe6c 	bl	80095f0 <_Bfree>
 800a918:	9805      	ldr	r0, [sp, #20]
 800a91a:	4621      	mov	r1, r4
 800a91c:	f7fe fe68 	bl	80095f0 <_Bfree>
 800a920:	e618      	b.n	800a554 <_strtod_l+0x644>
 800a922:	f1ba 0f01 	cmp.w	sl, #1
 800a926:	d103      	bne.n	800a930 <_strtod_l+0xa20>
 800a928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f43f ada5 	beq.w	800a47a <_strtod_l+0x56a>
 800a930:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a9e0 <_strtod_l+0xad0>
 800a934:	4f35      	ldr	r7, [pc, #212]	@ (800aa0c <_strtod_l+0xafc>)
 800a936:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a93a:	2600      	movs	r6, #0
 800a93c:	e7b1      	b.n	800a8a2 <_strtod_l+0x992>
 800a93e:	4f34      	ldr	r7, [pc, #208]	@ (800aa10 <_strtod_l+0xb00>)
 800a940:	2600      	movs	r6, #0
 800a942:	e7aa      	b.n	800a89a <_strtod_l+0x98a>
 800a944:	4b32      	ldr	r3, [pc, #200]	@ (800aa10 <_strtod_l+0xb00>)
 800a946:	4630      	mov	r0, r6
 800a948:	4639      	mov	r1, r7
 800a94a:	2200      	movs	r2, #0
 800a94c:	f7f5 fe5c 	bl	8000608 <__aeabi_dmul>
 800a950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d09f      	beq.n	800a89a <_strtod_l+0x98a>
 800a95a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a95e:	e7a0      	b.n	800a8a2 <_strtod_l+0x992>
 800a960:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a9e8 <_strtod_l+0xad8>
 800a964:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a968:	ec57 6b17 	vmov	r6, r7, d7
 800a96c:	e799      	b.n	800a8a2 <_strtod_l+0x992>
 800a96e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a972:	9b08      	ldr	r3, [sp, #32]
 800a974:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1c1      	bne.n	800a900 <_strtod_l+0x9f0>
 800a97c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a980:	0d1b      	lsrs	r3, r3, #20
 800a982:	051b      	lsls	r3, r3, #20
 800a984:	429d      	cmp	r5, r3
 800a986:	d1bb      	bne.n	800a900 <_strtod_l+0x9f0>
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f6 f99c 	bl	8000cc8 <__aeabi_d2lz>
 800a990:	f7f5 fe0c 	bl	80005ac <__aeabi_l2d>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f5 fc7c 	bl	8000298 <__aeabi_dsub>
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a9a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ae:	ea46 060a 	orr.w	r6, r6, sl
 800a9b2:	431e      	orrs	r6, r3
 800a9b4:	d06f      	beq.n	800aa96 <_strtod_l+0xb86>
 800a9b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a9f0 <_strtod_l+0xae0>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f7f6 f896 	bl	8000aec <__aeabi_dcmplt>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	f47f accf 	bne.w	800a364 <_strtod_l+0x454>
 800a9c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a9f8 <_strtod_l+0xae8>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9d0:	f7f6 f8aa 	bl	8000b28 <__aeabi_dcmpgt>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d093      	beq.n	800a900 <_strtod_l+0x9f0>
 800a9d8:	e4c4      	b.n	800a364 <_strtod_l+0x454>
 800a9da:	bf00      	nop
 800a9dc:	f3af 8000 	nop.w
 800a9e0:	00000000 	.word	0x00000000
 800a9e4:	bff00000 	.word	0xbff00000
 800a9e8:	00000000 	.word	0x00000000
 800a9ec:	3ff00000 	.word	0x3ff00000
 800a9f0:	94a03595 	.word	0x94a03595
 800a9f4:	3fdfffff 	.word	0x3fdfffff
 800a9f8:	35afe535 	.word	0x35afe535
 800a9fc:	3fe00000 	.word	0x3fe00000
 800aa00:	000fffff 	.word	0x000fffff
 800aa04:	7ff00000 	.word	0x7ff00000
 800aa08:	7fefffff 	.word	0x7fefffff
 800aa0c:	3ff00000 	.word	0x3ff00000
 800aa10:	3fe00000 	.word	0x3fe00000
 800aa14:	7fe00000 	.word	0x7fe00000
 800aa18:	7c9fffff 	.word	0x7c9fffff
 800aa1c:	9b08      	ldr	r3, [sp, #32]
 800aa1e:	b323      	cbz	r3, 800aa6a <_strtod_l+0xb5a>
 800aa20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa24:	d821      	bhi.n	800aa6a <_strtod_l+0xb5a>
 800aa26:	a328      	add	r3, pc, #160	@ (adr r3, 800aac8 <_strtod_l+0xbb8>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	4639      	mov	r1, r7
 800aa30:	f7f6 f866 	bl	8000b00 <__aeabi_dcmple>
 800aa34:	b1a0      	cbz	r0, 800aa60 <_strtod_l+0xb50>
 800aa36:	4639      	mov	r1, r7
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7f6 f8bd 	bl	8000bb8 <__aeabi_d2uiz>
 800aa3e:	2801      	cmp	r0, #1
 800aa40:	bf38      	it	cc
 800aa42:	2001      	movcc	r0, #1
 800aa44:	f7f5 fd66 	bl	8000514 <__aeabi_ui2d>
 800aa48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	b9fb      	cbnz	r3, 800aa90 <_strtod_l+0xb80>
 800aa50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa54:	9014      	str	r0, [sp, #80]	@ 0x50
 800aa56:	9315      	str	r3, [sp, #84]	@ 0x54
 800aa58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aa5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aa66:	1b5b      	subs	r3, r3, r5
 800aa68:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aa72:	f7ff f8f1 	bl	8009c58 <__ulp>
 800aa76:	4650      	mov	r0, sl
 800aa78:	ec53 2b10 	vmov	r2, r3, d0
 800aa7c:	4659      	mov	r1, fp
 800aa7e:	f7f5 fdc3 	bl	8000608 <__aeabi_dmul>
 800aa82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aa86:	f7f5 fc09 	bl	800029c <__adddf3>
 800aa8a:	4682      	mov	sl, r0
 800aa8c:	468b      	mov	fp, r1
 800aa8e:	e770      	b.n	800a972 <_strtod_l+0xa62>
 800aa90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aa94:	e7e0      	b.n	800aa58 <_strtod_l+0xb48>
 800aa96:	a30e      	add	r3, pc, #56	@ (adr r3, 800aad0 <_strtod_l+0xbc0>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f7f6 f826 	bl	8000aec <__aeabi_dcmplt>
 800aaa0:	e798      	b.n	800a9d4 <_strtod_l+0xac4>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaa6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aaa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	f7ff ba6d 	b.w	8009f8a <_strtod_l+0x7a>
 800aab0:	2a65      	cmp	r2, #101	@ 0x65
 800aab2:	f43f ab66 	beq.w	800a182 <_strtod_l+0x272>
 800aab6:	2a45      	cmp	r2, #69	@ 0x45
 800aab8:	f43f ab63 	beq.w	800a182 <_strtod_l+0x272>
 800aabc:	2301      	movs	r3, #1
 800aabe:	f7ff bb9e 	b.w	800a1fe <_strtod_l+0x2ee>
 800aac2:	bf00      	nop
 800aac4:	f3af 8000 	nop.w
 800aac8:	ffc00000 	.word	0xffc00000
 800aacc:	41dfffff 	.word	0x41dfffff
 800aad0:	94a03595 	.word	0x94a03595
 800aad4:	3fcfffff 	.word	0x3fcfffff

0800aad8 <_strtod_r>:
 800aad8:	4b01      	ldr	r3, [pc, #4]	@ (800aae0 <_strtod_r+0x8>)
 800aada:	f7ff ba19 	b.w	8009f10 <_strtod_l>
 800aade:	bf00      	nop
 800aae0:	20000080 	.word	0x20000080

0800aae4 <_strtol_l.constprop.0>:
 800aae4:	2b24      	cmp	r3, #36	@ 0x24
 800aae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaea:	4686      	mov	lr, r0
 800aaec:	4690      	mov	r8, r2
 800aaee:	d801      	bhi.n	800aaf4 <_strtol_l.constprop.0+0x10>
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d106      	bne.n	800ab02 <_strtol_l.constprop.0+0x1e>
 800aaf4:	f7fd fdbc 	bl	8008670 <__errno>
 800aaf8:	2316      	movs	r3, #22
 800aafa:	6003      	str	r3, [r0, #0]
 800aafc:	2000      	movs	r0, #0
 800aafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab02:	4834      	ldr	r0, [pc, #208]	@ (800abd4 <_strtol_l.constprop.0+0xf0>)
 800ab04:	460d      	mov	r5, r1
 800ab06:	462a      	mov	r2, r5
 800ab08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab0c:	5d06      	ldrb	r6, [r0, r4]
 800ab0e:	f016 0608 	ands.w	r6, r6, #8
 800ab12:	d1f8      	bne.n	800ab06 <_strtol_l.constprop.0+0x22>
 800ab14:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab16:	d12d      	bne.n	800ab74 <_strtol_l.constprop.0+0x90>
 800ab18:	782c      	ldrb	r4, [r5, #0]
 800ab1a:	2601      	movs	r6, #1
 800ab1c:	1c95      	adds	r5, r2, #2
 800ab1e:	f033 0210 	bics.w	r2, r3, #16
 800ab22:	d109      	bne.n	800ab38 <_strtol_l.constprop.0+0x54>
 800ab24:	2c30      	cmp	r4, #48	@ 0x30
 800ab26:	d12a      	bne.n	800ab7e <_strtol_l.constprop.0+0x9a>
 800ab28:	782a      	ldrb	r2, [r5, #0]
 800ab2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab2e:	2a58      	cmp	r2, #88	@ 0x58
 800ab30:	d125      	bne.n	800ab7e <_strtol_l.constprop.0+0x9a>
 800ab32:	786c      	ldrb	r4, [r5, #1]
 800ab34:	2310      	movs	r3, #16
 800ab36:	3502      	adds	r5, #2
 800ab38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab40:	2200      	movs	r2, #0
 800ab42:	fbbc f9f3 	udiv	r9, ip, r3
 800ab46:	4610      	mov	r0, r2
 800ab48:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab50:	2f09      	cmp	r7, #9
 800ab52:	d81b      	bhi.n	800ab8c <_strtol_l.constprop.0+0xa8>
 800ab54:	463c      	mov	r4, r7
 800ab56:	42a3      	cmp	r3, r4
 800ab58:	dd27      	ble.n	800abaa <_strtol_l.constprop.0+0xc6>
 800ab5a:	1c57      	adds	r7, r2, #1
 800ab5c:	d007      	beq.n	800ab6e <_strtol_l.constprop.0+0x8a>
 800ab5e:	4581      	cmp	r9, r0
 800ab60:	d320      	bcc.n	800aba4 <_strtol_l.constprop.0+0xc0>
 800ab62:	d101      	bne.n	800ab68 <_strtol_l.constprop.0+0x84>
 800ab64:	45a2      	cmp	sl, r4
 800ab66:	db1d      	blt.n	800aba4 <_strtol_l.constprop.0+0xc0>
 800ab68:	fb00 4003 	mla	r0, r0, r3, r4
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab72:	e7eb      	b.n	800ab4c <_strtol_l.constprop.0+0x68>
 800ab74:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab76:	bf04      	itt	eq
 800ab78:	782c      	ldrbeq	r4, [r5, #0]
 800ab7a:	1c95      	addeq	r5, r2, #2
 800ab7c:	e7cf      	b.n	800ab1e <_strtol_l.constprop.0+0x3a>
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1da      	bne.n	800ab38 <_strtol_l.constprop.0+0x54>
 800ab82:	2c30      	cmp	r4, #48	@ 0x30
 800ab84:	bf0c      	ite	eq
 800ab86:	2308      	moveq	r3, #8
 800ab88:	230a      	movne	r3, #10
 800ab8a:	e7d5      	b.n	800ab38 <_strtol_l.constprop.0+0x54>
 800ab8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab90:	2f19      	cmp	r7, #25
 800ab92:	d801      	bhi.n	800ab98 <_strtol_l.constprop.0+0xb4>
 800ab94:	3c37      	subs	r4, #55	@ 0x37
 800ab96:	e7de      	b.n	800ab56 <_strtol_l.constprop.0+0x72>
 800ab98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ab9c:	2f19      	cmp	r7, #25
 800ab9e:	d804      	bhi.n	800abaa <_strtol_l.constprop.0+0xc6>
 800aba0:	3c57      	subs	r4, #87	@ 0x57
 800aba2:	e7d8      	b.n	800ab56 <_strtol_l.constprop.0+0x72>
 800aba4:	f04f 32ff 	mov.w	r2, #4294967295
 800aba8:	e7e1      	b.n	800ab6e <_strtol_l.constprop.0+0x8a>
 800abaa:	1c53      	adds	r3, r2, #1
 800abac:	d108      	bne.n	800abc0 <_strtol_l.constprop.0+0xdc>
 800abae:	2322      	movs	r3, #34	@ 0x22
 800abb0:	f8ce 3000 	str.w	r3, [lr]
 800abb4:	4660      	mov	r0, ip
 800abb6:	f1b8 0f00 	cmp.w	r8, #0
 800abba:	d0a0      	beq.n	800aafe <_strtol_l.constprop.0+0x1a>
 800abbc:	1e69      	subs	r1, r5, #1
 800abbe:	e006      	b.n	800abce <_strtol_l.constprop.0+0xea>
 800abc0:	b106      	cbz	r6, 800abc4 <_strtol_l.constprop.0+0xe0>
 800abc2:	4240      	negs	r0, r0
 800abc4:	f1b8 0f00 	cmp.w	r8, #0
 800abc8:	d099      	beq.n	800aafe <_strtol_l.constprop.0+0x1a>
 800abca:	2a00      	cmp	r2, #0
 800abcc:	d1f6      	bne.n	800abbc <_strtol_l.constprop.0+0xd8>
 800abce:	f8c8 1000 	str.w	r1, [r8]
 800abd2:	e794      	b.n	800aafe <_strtol_l.constprop.0+0x1a>
 800abd4:	0800c081 	.word	0x0800c081

0800abd8 <_strtol_r>:
 800abd8:	f7ff bf84 	b.w	800aae4 <_strtol_l.constprop.0>

0800abdc <__ssputs_r>:
 800abdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe0:	688e      	ldr	r6, [r1, #8]
 800abe2:	461f      	mov	r7, r3
 800abe4:	42be      	cmp	r6, r7
 800abe6:	680b      	ldr	r3, [r1, #0]
 800abe8:	4682      	mov	sl, r0
 800abea:	460c      	mov	r4, r1
 800abec:	4690      	mov	r8, r2
 800abee:	d82d      	bhi.n	800ac4c <__ssputs_r+0x70>
 800abf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abf8:	d026      	beq.n	800ac48 <__ssputs_r+0x6c>
 800abfa:	6965      	ldr	r5, [r4, #20]
 800abfc:	6909      	ldr	r1, [r1, #16]
 800abfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac02:	eba3 0901 	sub.w	r9, r3, r1
 800ac06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac0a:	1c7b      	adds	r3, r7, #1
 800ac0c:	444b      	add	r3, r9
 800ac0e:	106d      	asrs	r5, r5, #1
 800ac10:	429d      	cmp	r5, r3
 800ac12:	bf38      	it	cc
 800ac14:	461d      	movcc	r5, r3
 800ac16:	0553      	lsls	r3, r2, #21
 800ac18:	d527      	bpl.n	800ac6a <__ssputs_r+0x8e>
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f7fe fc1c 	bl	8009458 <_malloc_r>
 800ac20:	4606      	mov	r6, r0
 800ac22:	b360      	cbz	r0, 800ac7e <__ssputs_r+0xa2>
 800ac24:	6921      	ldr	r1, [r4, #16]
 800ac26:	464a      	mov	r2, r9
 800ac28:	f000 fa18 	bl	800b05c <memcpy>
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac36:	81a3      	strh	r3, [r4, #12]
 800ac38:	6126      	str	r6, [r4, #16]
 800ac3a:	6165      	str	r5, [r4, #20]
 800ac3c:	444e      	add	r6, r9
 800ac3e:	eba5 0509 	sub.w	r5, r5, r9
 800ac42:	6026      	str	r6, [r4, #0]
 800ac44:	60a5      	str	r5, [r4, #8]
 800ac46:	463e      	mov	r6, r7
 800ac48:	42be      	cmp	r6, r7
 800ac4a:	d900      	bls.n	800ac4e <__ssputs_r+0x72>
 800ac4c:	463e      	mov	r6, r7
 800ac4e:	6820      	ldr	r0, [r4, #0]
 800ac50:	4632      	mov	r2, r6
 800ac52:	4641      	mov	r1, r8
 800ac54:	f000 f9c6 	bl	800afe4 <memmove>
 800ac58:	68a3      	ldr	r3, [r4, #8]
 800ac5a:	1b9b      	subs	r3, r3, r6
 800ac5c:	60a3      	str	r3, [r4, #8]
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	4433      	add	r3, r6
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	2000      	movs	r0, #0
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	462a      	mov	r2, r5
 800ac6c:	f000 fd89 	bl	800b782 <_realloc_r>
 800ac70:	4606      	mov	r6, r0
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d1e0      	bne.n	800ac38 <__ssputs_r+0x5c>
 800ac76:	6921      	ldr	r1, [r4, #16]
 800ac78:	4650      	mov	r0, sl
 800ac7a:	f7fe fb79 	bl	8009370 <_free_r>
 800ac7e:	230c      	movs	r3, #12
 800ac80:	f8ca 3000 	str.w	r3, [sl]
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac8a:	81a3      	strh	r3, [r4, #12]
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	e7e9      	b.n	800ac66 <__ssputs_r+0x8a>
	...

0800ac94 <_svfiprintf_r>:
 800ac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	4698      	mov	r8, r3
 800ac9a:	898b      	ldrh	r3, [r1, #12]
 800ac9c:	061b      	lsls	r3, r3, #24
 800ac9e:	b09d      	sub	sp, #116	@ 0x74
 800aca0:	4607      	mov	r7, r0
 800aca2:	460d      	mov	r5, r1
 800aca4:	4614      	mov	r4, r2
 800aca6:	d510      	bpl.n	800acca <_svfiprintf_r+0x36>
 800aca8:	690b      	ldr	r3, [r1, #16]
 800acaa:	b973      	cbnz	r3, 800acca <_svfiprintf_r+0x36>
 800acac:	2140      	movs	r1, #64	@ 0x40
 800acae:	f7fe fbd3 	bl	8009458 <_malloc_r>
 800acb2:	6028      	str	r0, [r5, #0]
 800acb4:	6128      	str	r0, [r5, #16]
 800acb6:	b930      	cbnz	r0, 800acc6 <_svfiprintf_r+0x32>
 800acb8:	230c      	movs	r3, #12
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	b01d      	add	sp, #116	@ 0x74
 800acc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc6:	2340      	movs	r3, #64	@ 0x40
 800acc8:	616b      	str	r3, [r5, #20]
 800acca:	2300      	movs	r3, #0
 800accc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acce:	2320      	movs	r3, #32
 800acd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800acd8:	2330      	movs	r3, #48	@ 0x30
 800acda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae78 <_svfiprintf_r+0x1e4>
 800acde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ace2:	f04f 0901 	mov.w	r9, #1
 800ace6:	4623      	mov	r3, r4
 800ace8:	469a      	mov	sl, r3
 800acea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acee:	b10a      	cbz	r2, 800acf4 <_svfiprintf_r+0x60>
 800acf0:	2a25      	cmp	r2, #37	@ 0x25
 800acf2:	d1f9      	bne.n	800ace8 <_svfiprintf_r+0x54>
 800acf4:	ebba 0b04 	subs.w	fp, sl, r4
 800acf8:	d00b      	beq.n	800ad12 <_svfiprintf_r+0x7e>
 800acfa:	465b      	mov	r3, fp
 800acfc:	4622      	mov	r2, r4
 800acfe:	4629      	mov	r1, r5
 800ad00:	4638      	mov	r0, r7
 800ad02:	f7ff ff6b 	bl	800abdc <__ssputs_r>
 800ad06:	3001      	adds	r0, #1
 800ad08:	f000 80a7 	beq.w	800ae5a <_svfiprintf_r+0x1c6>
 800ad0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad0e:	445a      	add	r2, fp
 800ad10:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad12:	f89a 3000 	ldrb.w	r3, [sl]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f000 809f 	beq.w	800ae5a <_svfiprintf_r+0x1c6>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad26:	f10a 0a01 	add.w	sl, sl, #1
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	9307      	str	r3, [sp, #28]
 800ad2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad34:	4654      	mov	r4, sl
 800ad36:	2205      	movs	r2, #5
 800ad38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad3c:	484e      	ldr	r0, [pc, #312]	@ (800ae78 <_svfiprintf_r+0x1e4>)
 800ad3e:	f7f5 fa4f 	bl	80001e0 <memchr>
 800ad42:	9a04      	ldr	r2, [sp, #16]
 800ad44:	b9d8      	cbnz	r0, 800ad7e <_svfiprintf_r+0xea>
 800ad46:	06d0      	lsls	r0, r2, #27
 800ad48:	bf44      	itt	mi
 800ad4a:	2320      	movmi	r3, #32
 800ad4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad50:	0711      	lsls	r1, r2, #28
 800ad52:	bf44      	itt	mi
 800ad54:	232b      	movmi	r3, #43	@ 0x2b
 800ad56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad60:	d015      	beq.n	800ad8e <_svfiprintf_r+0xfa>
 800ad62:	9a07      	ldr	r2, [sp, #28]
 800ad64:	4654      	mov	r4, sl
 800ad66:	2000      	movs	r0, #0
 800ad68:	f04f 0c0a 	mov.w	ip, #10
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad72:	3b30      	subs	r3, #48	@ 0x30
 800ad74:	2b09      	cmp	r3, #9
 800ad76:	d94b      	bls.n	800ae10 <_svfiprintf_r+0x17c>
 800ad78:	b1b0      	cbz	r0, 800ada8 <_svfiprintf_r+0x114>
 800ad7a:	9207      	str	r2, [sp, #28]
 800ad7c:	e014      	b.n	800ada8 <_svfiprintf_r+0x114>
 800ad7e:	eba0 0308 	sub.w	r3, r0, r8
 800ad82:	fa09 f303 	lsl.w	r3, r9, r3
 800ad86:	4313      	orrs	r3, r2
 800ad88:	9304      	str	r3, [sp, #16]
 800ad8a:	46a2      	mov	sl, r4
 800ad8c:	e7d2      	b.n	800ad34 <_svfiprintf_r+0xa0>
 800ad8e:	9b03      	ldr	r3, [sp, #12]
 800ad90:	1d19      	adds	r1, r3, #4
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	9103      	str	r1, [sp, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfbb      	ittet	lt
 800ad9a:	425b      	neglt	r3, r3
 800ad9c:	f042 0202 	orrlt.w	r2, r2, #2
 800ada0:	9307      	strge	r3, [sp, #28]
 800ada2:	9307      	strlt	r3, [sp, #28]
 800ada4:	bfb8      	it	lt
 800ada6:	9204      	strlt	r2, [sp, #16]
 800ada8:	7823      	ldrb	r3, [r4, #0]
 800adaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800adac:	d10a      	bne.n	800adc4 <_svfiprintf_r+0x130>
 800adae:	7863      	ldrb	r3, [r4, #1]
 800adb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800adb2:	d132      	bne.n	800ae1a <_svfiprintf_r+0x186>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	1d1a      	adds	r2, r3, #4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	9203      	str	r2, [sp, #12]
 800adbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adc0:	3402      	adds	r4, #2
 800adc2:	9305      	str	r3, [sp, #20]
 800adc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae88 <_svfiprintf_r+0x1f4>
 800adc8:	7821      	ldrb	r1, [r4, #0]
 800adca:	2203      	movs	r2, #3
 800adcc:	4650      	mov	r0, sl
 800adce:	f7f5 fa07 	bl	80001e0 <memchr>
 800add2:	b138      	cbz	r0, 800ade4 <_svfiprintf_r+0x150>
 800add4:	9b04      	ldr	r3, [sp, #16]
 800add6:	eba0 000a 	sub.w	r0, r0, sl
 800adda:	2240      	movs	r2, #64	@ 0x40
 800addc:	4082      	lsls	r2, r0
 800adde:	4313      	orrs	r3, r2
 800ade0:	3401      	adds	r4, #1
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade8:	4824      	ldr	r0, [pc, #144]	@ (800ae7c <_svfiprintf_r+0x1e8>)
 800adea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adee:	2206      	movs	r2, #6
 800adf0:	f7f5 f9f6 	bl	80001e0 <memchr>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d036      	beq.n	800ae66 <_svfiprintf_r+0x1d2>
 800adf8:	4b21      	ldr	r3, [pc, #132]	@ (800ae80 <_svfiprintf_r+0x1ec>)
 800adfa:	bb1b      	cbnz	r3, 800ae44 <_svfiprintf_r+0x1b0>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	3307      	adds	r3, #7
 800ae00:	f023 0307 	bic.w	r3, r3, #7
 800ae04:	3308      	adds	r3, #8
 800ae06:	9303      	str	r3, [sp, #12]
 800ae08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0a:	4433      	add	r3, r6
 800ae0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae0e:	e76a      	b.n	800ace6 <_svfiprintf_r+0x52>
 800ae10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae14:	460c      	mov	r4, r1
 800ae16:	2001      	movs	r0, #1
 800ae18:	e7a8      	b.n	800ad6c <_svfiprintf_r+0xd8>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	3401      	adds	r4, #1
 800ae1e:	9305      	str	r3, [sp, #20]
 800ae20:	4619      	mov	r1, r3
 800ae22:	f04f 0c0a 	mov.w	ip, #10
 800ae26:	4620      	mov	r0, r4
 800ae28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae2c:	3a30      	subs	r2, #48	@ 0x30
 800ae2e:	2a09      	cmp	r2, #9
 800ae30:	d903      	bls.n	800ae3a <_svfiprintf_r+0x1a6>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0c6      	beq.n	800adc4 <_svfiprintf_r+0x130>
 800ae36:	9105      	str	r1, [sp, #20]
 800ae38:	e7c4      	b.n	800adc4 <_svfiprintf_r+0x130>
 800ae3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae3e:	4604      	mov	r4, r0
 800ae40:	2301      	movs	r3, #1
 800ae42:	e7f0      	b.n	800ae26 <_svfiprintf_r+0x192>
 800ae44:	ab03      	add	r3, sp, #12
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	462a      	mov	r2, r5
 800ae4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae84 <_svfiprintf_r+0x1f0>)
 800ae4c:	a904      	add	r1, sp, #16
 800ae4e:	4638      	mov	r0, r7
 800ae50:	f7fc fc96 	bl	8007780 <_printf_float>
 800ae54:	1c42      	adds	r2, r0, #1
 800ae56:	4606      	mov	r6, r0
 800ae58:	d1d6      	bne.n	800ae08 <_svfiprintf_r+0x174>
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	065b      	lsls	r3, r3, #25
 800ae5e:	f53f af2d 	bmi.w	800acbc <_svfiprintf_r+0x28>
 800ae62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae64:	e72c      	b.n	800acc0 <_svfiprintf_r+0x2c>
 800ae66:	ab03      	add	r3, sp, #12
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4b05      	ldr	r3, [pc, #20]	@ (800ae84 <_svfiprintf_r+0x1f0>)
 800ae6e:	a904      	add	r1, sp, #16
 800ae70:	4638      	mov	r0, r7
 800ae72:	f7fc ff1d 	bl	8007cb0 <_printf_i>
 800ae76:	e7ed      	b.n	800ae54 <_svfiprintf_r+0x1c0>
 800ae78:	0800c181 	.word	0x0800c181
 800ae7c:	0800c18b 	.word	0x0800c18b
 800ae80:	08007781 	.word	0x08007781
 800ae84:	0800abdd 	.word	0x0800abdd
 800ae88:	0800c187 	.word	0x0800c187

0800ae8c <__sflush_r>:
 800ae8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	0716      	lsls	r6, r2, #28
 800ae96:	4605      	mov	r5, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	d454      	bmi.n	800af46 <__sflush_r+0xba>
 800ae9c:	684b      	ldr	r3, [r1, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dc02      	bgt.n	800aea8 <__sflush_r+0x1c>
 800aea2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dd48      	ble.n	800af3a <__sflush_r+0xae>
 800aea8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aeaa:	2e00      	cmp	r6, #0
 800aeac:	d045      	beq.n	800af3a <__sflush_r+0xae>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aeb4:	682f      	ldr	r7, [r5, #0]
 800aeb6:	6a21      	ldr	r1, [r4, #32]
 800aeb8:	602b      	str	r3, [r5, #0]
 800aeba:	d030      	beq.n	800af1e <__sflush_r+0x92>
 800aebc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	0759      	lsls	r1, r3, #29
 800aec2:	d505      	bpl.n	800aed0 <__sflush_r+0x44>
 800aec4:	6863      	ldr	r3, [r4, #4]
 800aec6:	1ad2      	subs	r2, r2, r3
 800aec8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aeca:	b10b      	cbz	r3, 800aed0 <__sflush_r+0x44>
 800aecc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	2300      	movs	r3, #0
 800aed2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aed4:	6a21      	ldr	r1, [r4, #32]
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b0      	blx	r6
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	d106      	bne.n	800aeee <__sflush_r+0x62>
 800aee0:	6829      	ldr	r1, [r5, #0]
 800aee2:	291d      	cmp	r1, #29
 800aee4:	d82b      	bhi.n	800af3e <__sflush_r+0xb2>
 800aee6:	4a2a      	ldr	r2, [pc, #168]	@ (800af90 <__sflush_r+0x104>)
 800aee8:	410a      	asrs	r2, r1
 800aeea:	07d6      	lsls	r6, r2, #31
 800aeec:	d427      	bmi.n	800af3e <__sflush_r+0xb2>
 800aeee:	2200      	movs	r2, #0
 800aef0:	6062      	str	r2, [r4, #4]
 800aef2:	04d9      	lsls	r1, r3, #19
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	6022      	str	r2, [r4, #0]
 800aef8:	d504      	bpl.n	800af04 <__sflush_r+0x78>
 800aefa:	1c42      	adds	r2, r0, #1
 800aefc:	d101      	bne.n	800af02 <__sflush_r+0x76>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	b903      	cbnz	r3, 800af04 <__sflush_r+0x78>
 800af02:	6560      	str	r0, [r4, #84]	@ 0x54
 800af04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af06:	602f      	str	r7, [r5, #0]
 800af08:	b1b9      	cbz	r1, 800af3a <__sflush_r+0xae>
 800af0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af0e:	4299      	cmp	r1, r3
 800af10:	d002      	beq.n	800af18 <__sflush_r+0x8c>
 800af12:	4628      	mov	r0, r5
 800af14:	f7fe fa2c 	bl	8009370 <_free_r>
 800af18:	2300      	movs	r3, #0
 800af1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af1c:	e00d      	b.n	800af3a <__sflush_r+0xae>
 800af1e:	2301      	movs	r3, #1
 800af20:	4628      	mov	r0, r5
 800af22:	47b0      	blx	r6
 800af24:	4602      	mov	r2, r0
 800af26:	1c50      	adds	r0, r2, #1
 800af28:	d1c9      	bne.n	800aebe <__sflush_r+0x32>
 800af2a:	682b      	ldr	r3, [r5, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0c6      	beq.n	800aebe <__sflush_r+0x32>
 800af30:	2b1d      	cmp	r3, #29
 800af32:	d001      	beq.n	800af38 <__sflush_r+0xac>
 800af34:	2b16      	cmp	r3, #22
 800af36:	d11e      	bne.n	800af76 <__sflush_r+0xea>
 800af38:	602f      	str	r7, [r5, #0]
 800af3a:	2000      	movs	r0, #0
 800af3c:	e022      	b.n	800af84 <__sflush_r+0xf8>
 800af3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af42:	b21b      	sxth	r3, r3
 800af44:	e01b      	b.n	800af7e <__sflush_r+0xf2>
 800af46:	690f      	ldr	r7, [r1, #16]
 800af48:	2f00      	cmp	r7, #0
 800af4a:	d0f6      	beq.n	800af3a <__sflush_r+0xae>
 800af4c:	0793      	lsls	r3, r2, #30
 800af4e:	680e      	ldr	r6, [r1, #0]
 800af50:	bf08      	it	eq
 800af52:	694b      	ldreq	r3, [r1, #20]
 800af54:	600f      	str	r7, [r1, #0]
 800af56:	bf18      	it	ne
 800af58:	2300      	movne	r3, #0
 800af5a:	eba6 0807 	sub.w	r8, r6, r7
 800af5e:	608b      	str	r3, [r1, #8]
 800af60:	f1b8 0f00 	cmp.w	r8, #0
 800af64:	dde9      	ble.n	800af3a <__sflush_r+0xae>
 800af66:	6a21      	ldr	r1, [r4, #32]
 800af68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af6a:	4643      	mov	r3, r8
 800af6c:	463a      	mov	r2, r7
 800af6e:	4628      	mov	r0, r5
 800af70:	47b0      	blx	r6
 800af72:	2800      	cmp	r0, #0
 800af74:	dc08      	bgt.n	800af88 <__sflush_r+0xfc>
 800af76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af88:	4407      	add	r7, r0
 800af8a:	eba8 0800 	sub.w	r8, r8, r0
 800af8e:	e7e7      	b.n	800af60 <__sflush_r+0xd4>
 800af90:	dfbffffe 	.word	0xdfbffffe

0800af94 <_fflush_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	4605      	mov	r5, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	b913      	cbnz	r3, 800afa4 <_fflush_r+0x10>
 800af9e:	2500      	movs	r5, #0
 800afa0:	4628      	mov	r0, r5
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	b118      	cbz	r0, 800afae <_fflush_r+0x1a>
 800afa6:	6a03      	ldr	r3, [r0, #32]
 800afa8:	b90b      	cbnz	r3, 800afae <_fflush_r+0x1a>
 800afaa:	f7fd fa41 	bl	8008430 <__sinit>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0f3      	beq.n	800af9e <_fflush_r+0xa>
 800afb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afb8:	07d0      	lsls	r0, r2, #31
 800afba:	d404      	bmi.n	800afc6 <_fflush_r+0x32>
 800afbc:	0599      	lsls	r1, r3, #22
 800afbe:	d402      	bmi.n	800afc6 <_fflush_r+0x32>
 800afc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afc2:	f7fd fb80 	bl	80086c6 <__retarget_lock_acquire_recursive>
 800afc6:	4628      	mov	r0, r5
 800afc8:	4621      	mov	r1, r4
 800afca:	f7ff ff5f 	bl	800ae8c <__sflush_r>
 800afce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afd0:	07da      	lsls	r2, r3, #31
 800afd2:	4605      	mov	r5, r0
 800afd4:	d4e4      	bmi.n	800afa0 <_fflush_r+0xc>
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	059b      	lsls	r3, r3, #22
 800afda:	d4e1      	bmi.n	800afa0 <_fflush_r+0xc>
 800afdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afde:	f7fd fb73 	bl	80086c8 <__retarget_lock_release_recursive>
 800afe2:	e7dd      	b.n	800afa0 <_fflush_r+0xc>

0800afe4 <memmove>:
 800afe4:	4288      	cmp	r0, r1
 800afe6:	b510      	push	{r4, lr}
 800afe8:	eb01 0402 	add.w	r4, r1, r2
 800afec:	d902      	bls.n	800aff4 <memmove+0x10>
 800afee:	4284      	cmp	r4, r0
 800aff0:	4623      	mov	r3, r4
 800aff2:	d807      	bhi.n	800b004 <memmove+0x20>
 800aff4:	1e43      	subs	r3, r0, #1
 800aff6:	42a1      	cmp	r1, r4
 800aff8:	d008      	beq.n	800b00c <memmove+0x28>
 800affa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800affe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b002:	e7f8      	b.n	800aff6 <memmove+0x12>
 800b004:	4402      	add	r2, r0
 800b006:	4601      	mov	r1, r0
 800b008:	428a      	cmp	r2, r1
 800b00a:	d100      	bne.n	800b00e <memmove+0x2a>
 800b00c:	bd10      	pop	{r4, pc}
 800b00e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b016:	e7f7      	b.n	800b008 <memmove+0x24>

0800b018 <strncmp>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	b16a      	cbz	r2, 800b038 <strncmp+0x20>
 800b01c:	3901      	subs	r1, #1
 800b01e:	1884      	adds	r4, r0, r2
 800b020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b024:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b028:	429a      	cmp	r2, r3
 800b02a:	d103      	bne.n	800b034 <strncmp+0x1c>
 800b02c:	42a0      	cmp	r0, r4
 800b02e:	d001      	beq.n	800b034 <strncmp+0x1c>
 800b030:	2a00      	cmp	r2, #0
 800b032:	d1f5      	bne.n	800b020 <strncmp+0x8>
 800b034:	1ad0      	subs	r0, r2, r3
 800b036:	bd10      	pop	{r4, pc}
 800b038:	4610      	mov	r0, r2
 800b03a:	e7fc      	b.n	800b036 <strncmp+0x1e>

0800b03c <_sbrk_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	4d06      	ldr	r5, [pc, #24]	@ (800b058 <_sbrk_r+0x1c>)
 800b040:	2300      	movs	r3, #0
 800b042:	4604      	mov	r4, r0
 800b044:	4608      	mov	r0, r1
 800b046:	602b      	str	r3, [r5, #0]
 800b048:	f7f6 fd2e 	bl	8001aa8 <_sbrk>
 800b04c:	1c43      	adds	r3, r0, #1
 800b04e:	d102      	bne.n	800b056 <_sbrk_r+0x1a>
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	b103      	cbz	r3, 800b056 <_sbrk_r+0x1a>
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	bd38      	pop	{r3, r4, r5, pc}
 800b058:	20000578 	.word	0x20000578

0800b05c <memcpy>:
 800b05c:	440a      	add	r2, r1
 800b05e:	4291      	cmp	r1, r2
 800b060:	f100 33ff 	add.w	r3, r0, #4294967295
 800b064:	d100      	bne.n	800b068 <memcpy+0xc>
 800b066:	4770      	bx	lr
 800b068:	b510      	push	{r4, lr}
 800b06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b072:	4291      	cmp	r1, r2
 800b074:	d1f9      	bne.n	800b06a <memcpy+0xe>
 800b076:	bd10      	pop	{r4, pc}

0800b078 <nan>:
 800b078:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b080 <nan+0x8>
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	00000000 	.word	0x00000000
 800b084:	7ff80000 	.word	0x7ff80000

0800b088 <__assert_func>:
 800b088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b08a:	4614      	mov	r4, r2
 800b08c:	461a      	mov	r2, r3
 800b08e:	4b09      	ldr	r3, [pc, #36]	@ (800b0b4 <__assert_func+0x2c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4605      	mov	r5, r0
 800b094:	68d8      	ldr	r0, [r3, #12]
 800b096:	b954      	cbnz	r4, 800b0ae <__assert_func+0x26>
 800b098:	4b07      	ldr	r3, [pc, #28]	@ (800b0b8 <__assert_func+0x30>)
 800b09a:	461c      	mov	r4, r3
 800b09c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0a0:	9100      	str	r1, [sp, #0]
 800b0a2:	462b      	mov	r3, r5
 800b0a4:	4905      	ldr	r1, [pc, #20]	@ (800b0bc <__assert_func+0x34>)
 800b0a6:	f000 fba7 	bl	800b7f8 <fiprintf>
 800b0aa:	f000 fbb7 	bl	800b81c <abort>
 800b0ae:	4b04      	ldr	r3, [pc, #16]	@ (800b0c0 <__assert_func+0x38>)
 800b0b0:	e7f4      	b.n	800b09c <__assert_func+0x14>
 800b0b2:	bf00      	nop
 800b0b4:	20000030 	.word	0x20000030
 800b0b8:	0800c1d5 	.word	0x0800c1d5
 800b0bc:	0800c1a7 	.word	0x0800c1a7
 800b0c0:	0800c19a 	.word	0x0800c19a

0800b0c4 <_calloc_r>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	fba1 5402 	umull	r5, r4, r1, r2
 800b0ca:	b93c      	cbnz	r4, 800b0dc <_calloc_r+0x18>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7fe f9c3 	bl	8009458 <_malloc_r>
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	b928      	cbnz	r0, 800b0e2 <_calloc_r+0x1e>
 800b0d6:	2600      	movs	r6, #0
 800b0d8:	4630      	mov	r0, r6
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	220c      	movs	r2, #12
 800b0de:	6002      	str	r2, [r0, #0]
 800b0e0:	e7f9      	b.n	800b0d6 <_calloc_r+0x12>
 800b0e2:	462a      	mov	r2, r5
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	f7fd fa70 	bl	80085ca <memset>
 800b0ea:	e7f5      	b.n	800b0d8 <_calloc_r+0x14>

0800b0ec <rshift>:
 800b0ec:	6903      	ldr	r3, [r0, #16]
 800b0ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0fa:	f100 0414 	add.w	r4, r0, #20
 800b0fe:	dd45      	ble.n	800b18c <rshift+0xa0>
 800b100:	f011 011f 	ands.w	r1, r1, #31
 800b104:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b108:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b10c:	d10c      	bne.n	800b128 <rshift+0x3c>
 800b10e:	f100 0710 	add.w	r7, r0, #16
 800b112:	4629      	mov	r1, r5
 800b114:	42b1      	cmp	r1, r6
 800b116:	d334      	bcc.n	800b182 <rshift+0x96>
 800b118:	1a9b      	subs	r3, r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	1eea      	subs	r2, r5, #3
 800b11e:	4296      	cmp	r6, r2
 800b120:	bf38      	it	cc
 800b122:	2300      	movcc	r3, #0
 800b124:	4423      	add	r3, r4
 800b126:	e015      	b.n	800b154 <rshift+0x68>
 800b128:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b12c:	f1c1 0820 	rsb	r8, r1, #32
 800b130:	40cf      	lsrs	r7, r1
 800b132:	f105 0e04 	add.w	lr, r5, #4
 800b136:	46a1      	mov	r9, r4
 800b138:	4576      	cmp	r6, lr
 800b13a:	46f4      	mov	ip, lr
 800b13c:	d815      	bhi.n	800b16a <rshift+0x7e>
 800b13e:	1a9a      	subs	r2, r3, r2
 800b140:	0092      	lsls	r2, r2, #2
 800b142:	3a04      	subs	r2, #4
 800b144:	3501      	adds	r5, #1
 800b146:	42ae      	cmp	r6, r5
 800b148:	bf38      	it	cc
 800b14a:	2200      	movcc	r2, #0
 800b14c:	18a3      	adds	r3, r4, r2
 800b14e:	50a7      	str	r7, [r4, r2]
 800b150:	b107      	cbz	r7, 800b154 <rshift+0x68>
 800b152:	3304      	adds	r3, #4
 800b154:	1b1a      	subs	r2, r3, r4
 800b156:	42a3      	cmp	r3, r4
 800b158:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b15c:	bf08      	it	eq
 800b15e:	2300      	moveq	r3, #0
 800b160:	6102      	str	r2, [r0, #16]
 800b162:	bf08      	it	eq
 800b164:	6143      	streq	r3, [r0, #20]
 800b166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b16a:	f8dc c000 	ldr.w	ip, [ip]
 800b16e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b172:	ea4c 0707 	orr.w	r7, ip, r7
 800b176:	f849 7b04 	str.w	r7, [r9], #4
 800b17a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b17e:	40cf      	lsrs	r7, r1
 800b180:	e7da      	b.n	800b138 <rshift+0x4c>
 800b182:	f851 cb04 	ldr.w	ip, [r1], #4
 800b186:	f847 cf04 	str.w	ip, [r7, #4]!
 800b18a:	e7c3      	b.n	800b114 <rshift+0x28>
 800b18c:	4623      	mov	r3, r4
 800b18e:	e7e1      	b.n	800b154 <rshift+0x68>

0800b190 <__hexdig_fun>:
 800b190:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b194:	2b09      	cmp	r3, #9
 800b196:	d802      	bhi.n	800b19e <__hexdig_fun+0xe>
 800b198:	3820      	subs	r0, #32
 800b19a:	b2c0      	uxtb	r0, r0
 800b19c:	4770      	bx	lr
 800b19e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	d801      	bhi.n	800b1aa <__hexdig_fun+0x1a>
 800b1a6:	3847      	subs	r0, #71	@ 0x47
 800b1a8:	e7f7      	b.n	800b19a <__hexdig_fun+0xa>
 800b1aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	d801      	bhi.n	800b1b6 <__hexdig_fun+0x26>
 800b1b2:	3827      	subs	r0, #39	@ 0x27
 800b1b4:	e7f1      	b.n	800b19a <__hexdig_fun+0xa>
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	4770      	bx	lr
	...

0800b1bc <__gethex>:
 800b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	b085      	sub	sp, #20
 800b1c2:	468a      	mov	sl, r1
 800b1c4:	9302      	str	r3, [sp, #8]
 800b1c6:	680b      	ldr	r3, [r1, #0]
 800b1c8:	9001      	str	r0, [sp, #4]
 800b1ca:	4690      	mov	r8, r2
 800b1cc:	1c9c      	adds	r4, r3, #2
 800b1ce:	46a1      	mov	r9, r4
 800b1d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b1d4:	2830      	cmp	r0, #48	@ 0x30
 800b1d6:	d0fa      	beq.n	800b1ce <__gethex+0x12>
 800b1d8:	eba9 0303 	sub.w	r3, r9, r3
 800b1dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800b1e0:	f7ff ffd6 	bl	800b190 <__hexdig_fun>
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d168      	bne.n	800b2bc <__gethex+0x100>
 800b1ea:	49a0      	ldr	r1, [pc, #640]	@ (800b46c <__gethex+0x2b0>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	4648      	mov	r0, r9
 800b1f0:	f7ff ff12 	bl	800b018 <strncmp>
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d167      	bne.n	800b2ca <__gethex+0x10e>
 800b1fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b1fe:	4626      	mov	r6, r4
 800b200:	f7ff ffc6 	bl	800b190 <__hexdig_fun>
 800b204:	2800      	cmp	r0, #0
 800b206:	d062      	beq.n	800b2ce <__gethex+0x112>
 800b208:	4623      	mov	r3, r4
 800b20a:	7818      	ldrb	r0, [r3, #0]
 800b20c:	2830      	cmp	r0, #48	@ 0x30
 800b20e:	4699      	mov	r9, r3
 800b210:	f103 0301 	add.w	r3, r3, #1
 800b214:	d0f9      	beq.n	800b20a <__gethex+0x4e>
 800b216:	f7ff ffbb 	bl	800b190 <__hexdig_fun>
 800b21a:	fab0 f580 	clz	r5, r0
 800b21e:	096d      	lsrs	r5, r5, #5
 800b220:	f04f 0b01 	mov.w	fp, #1
 800b224:	464a      	mov	r2, r9
 800b226:	4616      	mov	r6, r2
 800b228:	3201      	adds	r2, #1
 800b22a:	7830      	ldrb	r0, [r6, #0]
 800b22c:	f7ff ffb0 	bl	800b190 <__hexdig_fun>
 800b230:	2800      	cmp	r0, #0
 800b232:	d1f8      	bne.n	800b226 <__gethex+0x6a>
 800b234:	498d      	ldr	r1, [pc, #564]	@ (800b46c <__gethex+0x2b0>)
 800b236:	2201      	movs	r2, #1
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff feed 	bl	800b018 <strncmp>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d13f      	bne.n	800b2c2 <__gethex+0x106>
 800b242:	b944      	cbnz	r4, 800b256 <__gethex+0x9a>
 800b244:	1c74      	adds	r4, r6, #1
 800b246:	4622      	mov	r2, r4
 800b248:	4616      	mov	r6, r2
 800b24a:	3201      	adds	r2, #1
 800b24c:	7830      	ldrb	r0, [r6, #0]
 800b24e:	f7ff ff9f 	bl	800b190 <__hexdig_fun>
 800b252:	2800      	cmp	r0, #0
 800b254:	d1f8      	bne.n	800b248 <__gethex+0x8c>
 800b256:	1ba4      	subs	r4, r4, r6
 800b258:	00a7      	lsls	r7, r4, #2
 800b25a:	7833      	ldrb	r3, [r6, #0]
 800b25c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b260:	2b50      	cmp	r3, #80	@ 0x50
 800b262:	d13e      	bne.n	800b2e2 <__gethex+0x126>
 800b264:	7873      	ldrb	r3, [r6, #1]
 800b266:	2b2b      	cmp	r3, #43	@ 0x2b
 800b268:	d033      	beq.n	800b2d2 <__gethex+0x116>
 800b26a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b26c:	d034      	beq.n	800b2d8 <__gethex+0x11c>
 800b26e:	1c71      	adds	r1, r6, #1
 800b270:	2400      	movs	r4, #0
 800b272:	7808      	ldrb	r0, [r1, #0]
 800b274:	f7ff ff8c 	bl	800b190 <__hexdig_fun>
 800b278:	1e43      	subs	r3, r0, #1
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b18      	cmp	r3, #24
 800b27e:	d830      	bhi.n	800b2e2 <__gethex+0x126>
 800b280:	f1a0 0210 	sub.w	r2, r0, #16
 800b284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b288:	f7ff ff82 	bl	800b190 <__hexdig_fun>
 800b28c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b290:	fa5f fc8c 	uxtb.w	ip, ip
 800b294:	f1bc 0f18 	cmp.w	ip, #24
 800b298:	f04f 030a 	mov.w	r3, #10
 800b29c:	d91e      	bls.n	800b2dc <__gethex+0x120>
 800b29e:	b104      	cbz	r4, 800b2a2 <__gethex+0xe6>
 800b2a0:	4252      	negs	r2, r2
 800b2a2:	4417      	add	r7, r2
 800b2a4:	f8ca 1000 	str.w	r1, [sl]
 800b2a8:	b1ed      	cbz	r5, 800b2e6 <__gethex+0x12a>
 800b2aa:	f1bb 0f00 	cmp.w	fp, #0
 800b2ae:	bf0c      	ite	eq
 800b2b0:	2506      	moveq	r5, #6
 800b2b2:	2500      	movne	r5, #0
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	b005      	add	sp, #20
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	2500      	movs	r5, #0
 800b2be:	462c      	mov	r4, r5
 800b2c0:	e7b0      	b.n	800b224 <__gethex+0x68>
 800b2c2:	2c00      	cmp	r4, #0
 800b2c4:	d1c7      	bne.n	800b256 <__gethex+0x9a>
 800b2c6:	4627      	mov	r7, r4
 800b2c8:	e7c7      	b.n	800b25a <__gethex+0x9e>
 800b2ca:	464e      	mov	r6, r9
 800b2cc:	462f      	mov	r7, r5
 800b2ce:	2501      	movs	r5, #1
 800b2d0:	e7c3      	b.n	800b25a <__gethex+0x9e>
 800b2d2:	2400      	movs	r4, #0
 800b2d4:	1cb1      	adds	r1, r6, #2
 800b2d6:	e7cc      	b.n	800b272 <__gethex+0xb6>
 800b2d8:	2401      	movs	r4, #1
 800b2da:	e7fb      	b.n	800b2d4 <__gethex+0x118>
 800b2dc:	fb03 0002 	mla	r0, r3, r2, r0
 800b2e0:	e7ce      	b.n	800b280 <__gethex+0xc4>
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	e7de      	b.n	800b2a4 <__gethex+0xe8>
 800b2e6:	eba6 0309 	sub.w	r3, r6, r9
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	2b07      	cmp	r3, #7
 800b2f0:	dc0a      	bgt.n	800b308 <__gethex+0x14c>
 800b2f2:	9801      	ldr	r0, [sp, #4]
 800b2f4:	f7fe f93c 	bl	8009570 <_Balloc>
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	b940      	cbnz	r0, 800b30e <__gethex+0x152>
 800b2fc:	4b5c      	ldr	r3, [pc, #368]	@ (800b470 <__gethex+0x2b4>)
 800b2fe:	4602      	mov	r2, r0
 800b300:	21e4      	movs	r1, #228	@ 0xe4
 800b302:	485c      	ldr	r0, [pc, #368]	@ (800b474 <__gethex+0x2b8>)
 800b304:	f7ff fec0 	bl	800b088 <__assert_func>
 800b308:	3101      	adds	r1, #1
 800b30a:	105b      	asrs	r3, r3, #1
 800b30c:	e7ef      	b.n	800b2ee <__gethex+0x132>
 800b30e:	f100 0a14 	add.w	sl, r0, #20
 800b312:	2300      	movs	r3, #0
 800b314:	4655      	mov	r5, sl
 800b316:	469b      	mov	fp, r3
 800b318:	45b1      	cmp	r9, r6
 800b31a:	d337      	bcc.n	800b38c <__gethex+0x1d0>
 800b31c:	f845 bb04 	str.w	fp, [r5], #4
 800b320:	eba5 050a 	sub.w	r5, r5, sl
 800b324:	10ad      	asrs	r5, r5, #2
 800b326:	6125      	str	r5, [r4, #16]
 800b328:	4658      	mov	r0, fp
 800b32a:	f7fe fa13 	bl	8009754 <__hi0bits>
 800b32e:	016d      	lsls	r5, r5, #5
 800b330:	f8d8 6000 	ldr.w	r6, [r8]
 800b334:	1a2d      	subs	r5, r5, r0
 800b336:	42b5      	cmp	r5, r6
 800b338:	dd54      	ble.n	800b3e4 <__gethex+0x228>
 800b33a:	1bad      	subs	r5, r5, r6
 800b33c:	4629      	mov	r1, r5
 800b33e:	4620      	mov	r0, r4
 800b340:	f7fe fda7 	bl	8009e92 <__any_on>
 800b344:	4681      	mov	r9, r0
 800b346:	b178      	cbz	r0, 800b368 <__gethex+0x1ac>
 800b348:	1e6b      	subs	r3, r5, #1
 800b34a:	1159      	asrs	r1, r3, #5
 800b34c:	f003 021f 	and.w	r2, r3, #31
 800b350:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b354:	f04f 0901 	mov.w	r9, #1
 800b358:	fa09 f202 	lsl.w	r2, r9, r2
 800b35c:	420a      	tst	r2, r1
 800b35e:	d003      	beq.n	800b368 <__gethex+0x1ac>
 800b360:	454b      	cmp	r3, r9
 800b362:	dc36      	bgt.n	800b3d2 <__gethex+0x216>
 800b364:	f04f 0902 	mov.w	r9, #2
 800b368:	4629      	mov	r1, r5
 800b36a:	4620      	mov	r0, r4
 800b36c:	f7ff febe 	bl	800b0ec <rshift>
 800b370:	442f      	add	r7, r5
 800b372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b376:	42bb      	cmp	r3, r7
 800b378:	da42      	bge.n	800b400 <__gethex+0x244>
 800b37a:	9801      	ldr	r0, [sp, #4]
 800b37c:	4621      	mov	r1, r4
 800b37e:	f7fe f937 	bl	80095f0 <_Bfree>
 800b382:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b384:	2300      	movs	r3, #0
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	25a3      	movs	r5, #163	@ 0xa3
 800b38a:	e793      	b.n	800b2b4 <__gethex+0xf8>
 800b38c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b390:	2a2e      	cmp	r2, #46	@ 0x2e
 800b392:	d012      	beq.n	800b3ba <__gethex+0x1fe>
 800b394:	2b20      	cmp	r3, #32
 800b396:	d104      	bne.n	800b3a2 <__gethex+0x1e6>
 800b398:	f845 bb04 	str.w	fp, [r5], #4
 800b39c:	f04f 0b00 	mov.w	fp, #0
 800b3a0:	465b      	mov	r3, fp
 800b3a2:	7830      	ldrb	r0, [r6, #0]
 800b3a4:	9303      	str	r3, [sp, #12]
 800b3a6:	f7ff fef3 	bl	800b190 <__hexdig_fun>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	f000 000f 	and.w	r0, r0, #15
 800b3b0:	4098      	lsls	r0, r3
 800b3b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	e7ae      	b.n	800b318 <__gethex+0x15c>
 800b3ba:	45b1      	cmp	r9, r6
 800b3bc:	d8ea      	bhi.n	800b394 <__gethex+0x1d8>
 800b3be:	492b      	ldr	r1, [pc, #172]	@ (800b46c <__gethex+0x2b0>)
 800b3c0:	9303      	str	r3, [sp, #12]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f7ff fe27 	bl	800b018 <strncmp>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d1e1      	bne.n	800b394 <__gethex+0x1d8>
 800b3d0:	e7a2      	b.n	800b318 <__gethex+0x15c>
 800b3d2:	1ea9      	subs	r1, r5, #2
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f7fe fd5c 	bl	8009e92 <__any_on>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d0c2      	beq.n	800b364 <__gethex+0x1a8>
 800b3de:	f04f 0903 	mov.w	r9, #3
 800b3e2:	e7c1      	b.n	800b368 <__gethex+0x1ac>
 800b3e4:	da09      	bge.n	800b3fa <__gethex+0x23e>
 800b3e6:	1b75      	subs	r5, r6, r5
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	9801      	ldr	r0, [sp, #4]
 800b3ec:	462a      	mov	r2, r5
 800b3ee:	f7fe fb17 	bl	8009a20 <__lshift>
 800b3f2:	1b7f      	subs	r7, r7, r5
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	f100 0a14 	add.w	sl, r0, #20
 800b3fa:	f04f 0900 	mov.w	r9, #0
 800b3fe:	e7b8      	b.n	800b372 <__gethex+0x1b6>
 800b400:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b404:	42bd      	cmp	r5, r7
 800b406:	dd6f      	ble.n	800b4e8 <__gethex+0x32c>
 800b408:	1bed      	subs	r5, r5, r7
 800b40a:	42ae      	cmp	r6, r5
 800b40c:	dc34      	bgt.n	800b478 <__gethex+0x2bc>
 800b40e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d022      	beq.n	800b45c <__gethex+0x2a0>
 800b416:	2b03      	cmp	r3, #3
 800b418:	d024      	beq.n	800b464 <__gethex+0x2a8>
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d115      	bne.n	800b44a <__gethex+0x28e>
 800b41e:	42ae      	cmp	r6, r5
 800b420:	d113      	bne.n	800b44a <__gethex+0x28e>
 800b422:	2e01      	cmp	r6, #1
 800b424:	d10b      	bne.n	800b43e <__gethex+0x282>
 800b426:	9a02      	ldr	r2, [sp, #8]
 800b428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	2301      	movs	r3, #1
 800b430:	6123      	str	r3, [r4, #16]
 800b432:	f8ca 3000 	str.w	r3, [sl]
 800b436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b438:	2562      	movs	r5, #98	@ 0x62
 800b43a:	601c      	str	r4, [r3, #0]
 800b43c:	e73a      	b.n	800b2b4 <__gethex+0xf8>
 800b43e:	1e71      	subs	r1, r6, #1
 800b440:	4620      	mov	r0, r4
 800b442:	f7fe fd26 	bl	8009e92 <__any_on>
 800b446:	2800      	cmp	r0, #0
 800b448:	d1ed      	bne.n	800b426 <__gethex+0x26a>
 800b44a:	9801      	ldr	r0, [sp, #4]
 800b44c:	4621      	mov	r1, r4
 800b44e:	f7fe f8cf 	bl	80095f0 <_Bfree>
 800b452:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b454:	2300      	movs	r3, #0
 800b456:	6013      	str	r3, [r2, #0]
 800b458:	2550      	movs	r5, #80	@ 0x50
 800b45a:	e72b      	b.n	800b2b4 <__gethex+0xf8>
 800b45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1f3      	bne.n	800b44a <__gethex+0x28e>
 800b462:	e7e0      	b.n	800b426 <__gethex+0x26a>
 800b464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1dd      	bne.n	800b426 <__gethex+0x26a>
 800b46a:	e7ee      	b.n	800b44a <__gethex+0x28e>
 800b46c:	0800c028 	.word	0x0800c028
 800b470:	0800bec1 	.word	0x0800bec1
 800b474:	0800c1d6 	.word	0x0800c1d6
 800b478:	1e6f      	subs	r7, r5, #1
 800b47a:	f1b9 0f00 	cmp.w	r9, #0
 800b47e:	d130      	bne.n	800b4e2 <__gethex+0x326>
 800b480:	b127      	cbz	r7, 800b48c <__gethex+0x2d0>
 800b482:	4639      	mov	r1, r7
 800b484:	4620      	mov	r0, r4
 800b486:	f7fe fd04 	bl	8009e92 <__any_on>
 800b48a:	4681      	mov	r9, r0
 800b48c:	117a      	asrs	r2, r7, #5
 800b48e:	2301      	movs	r3, #1
 800b490:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b494:	f007 071f 	and.w	r7, r7, #31
 800b498:	40bb      	lsls	r3, r7
 800b49a:	4213      	tst	r3, r2
 800b49c:	4629      	mov	r1, r5
 800b49e:	4620      	mov	r0, r4
 800b4a0:	bf18      	it	ne
 800b4a2:	f049 0902 	orrne.w	r9, r9, #2
 800b4a6:	f7ff fe21 	bl	800b0ec <rshift>
 800b4aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b4ae:	1b76      	subs	r6, r6, r5
 800b4b0:	2502      	movs	r5, #2
 800b4b2:	f1b9 0f00 	cmp.w	r9, #0
 800b4b6:	d047      	beq.n	800b548 <__gethex+0x38c>
 800b4b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d015      	beq.n	800b4ec <__gethex+0x330>
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d017      	beq.n	800b4f4 <__gethex+0x338>
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d109      	bne.n	800b4dc <__gethex+0x320>
 800b4c8:	f019 0f02 	tst.w	r9, #2
 800b4cc:	d006      	beq.n	800b4dc <__gethex+0x320>
 800b4ce:	f8da 3000 	ldr.w	r3, [sl]
 800b4d2:	ea49 0903 	orr.w	r9, r9, r3
 800b4d6:	f019 0f01 	tst.w	r9, #1
 800b4da:	d10e      	bne.n	800b4fa <__gethex+0x33e>
 800b4dc:	f045 0510 	orr.w	r5, r5, #16
 800b4e0:	e032      	b.n	800b548 <__gethex+0x38c>
 800b4e2:	f04f 0901 	mov.w	r9, #1
 800b4e6:	e7d1      	b.n	800b48c <__gethex+0x2d0>
 800b4e8:	2501      	movs	r5, #1
 800b4ea:	e7e2      	b.n	800b4b2 <__gethex+0x2f6>
 800b4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ee:	f1c3 0301 	rsb	r3, r3, #1
 800b4f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d0f0      	beq.n	800b4dc <__gethex+0x320>
 800b4fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b4fe:	f104 0314 	add.w	r3, r4, #20
 800b502:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b506:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b50a:	f04f 0c00 	mov.w	ip, #0
 800b50e:	4618      	mov	r0, r3
 800b510:	f853 2b04 	ldr.w	r2, [r3], #4
 800b514:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b518:	d01b      	beq.n	800b552 <__gethex+0x396>
 800b51a:	3201      	adds	r2, #1
 800b51c:	6002      	str	r2, [r0, #0]
 800b51e:	2d02      	cmp	r5, #2
 800b520:	f104 0314 	add.w	r3, r4, #20
 800b524:	d13c      	bne.n	800b5a0 <__gethex+0x3e4>
 800b526:	f8d8 2000 	ldr.w	r2, [r8]
 800b52a:	3a01      	subs	r2, #1
 800b52c:	42b2      	cmp	r2, r6
 800b52e:	d109      	bne.n	800b544 <__gethex+0x388>
 800b530:	1171      	asrs	r1, r6, #5
 800b532:	2201      	movs	r2, #1
 800b534:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b538:	f006 061f 	and.w	r6, r6, #31
 800b53c:	fa02 f606 	lsl.w	r6, r2, r6
 800b540:	421e      	tst	r6, r3
 800b542:	d13a      	bne.n	800b5ba <__gethex+0x3fe>
 800b544:	f045 0520 	orr.w	r5, r5, #32
 800b548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b54a:	601c      	str	r4, [r3, #0]
 800b54c:	9b02      	ldr	r3, [sp, #8]
 800b54e:	601f      	str	r7, [r3, #0]
 800b550:	e6b0      	b.n	800b2b4 <__gethex+0xf8>
 800b552:	4299      	cmp	r1, r3
 800b554:	f843 cc04 	str.w	ip, [r3, #-4]
 800b558:	d8d9      	bhi.n	800b50e <__gethex+0x352>
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	459b      	cmp	fp, r3
 800b55e:	db17      	blt.n	800b590 <__gethex+0x3d4>
 800b560:	6861      	ldr	r1, [r4, #4]
 800b562:	9801      	ldr	r0, [sp, #4]
 800b564:	3101      	adds	r1, #1
 800b566:	f7fe f803 	bl	8009570 <_Balloc>
 800b56a:	4681      	mov	r9, r0
 800b56c:	b918      	cbnz	r0, 800b576 <__gethex+0x3ba>
 800b56e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d8 <__gethex+0x41c>)
 800b570:	4602      	mov	r2, r0
 800b572:	2184      	movs	r1, #132	@ 0x84
 800b574:	e6c5      	b.n	800b302 <__gethex+0x146>
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	3202      	adds	r2, #2
 800b57a:	f104 010c 	add.w	r1, r4, #12
 800b57e:	0092      	lsls	r2, r2, #2
 800b580:	300c      	adds	r0, #12
 800b582:	f7ff fd6b 	bl	800b05c <memcpy>
 800b586:	4621      	mov	r1, r4
 800b588:	9801      	ldr	r0, [sp, #4]
 800b58a:	f7fe f831 	bl	80095f0 <_Bfree>
 800b58e:	464c      	mov	r4, r9
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	1c5a      	adds	r2, r3, #1
 800b594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b598:	6122      	str	r2, [r4, #16]
 800b59a:	2201      	movs	r2, #1
 800b59c:	615a      	str	r2, [r3, #20]
 800b59e:	e7be      	b.n	800b51e <__gethex+0x362>
 800b5a0:	6922      	ldr	r2, [r4, #16]
 800b5a2:	455a      	cmp	r2, fp
 800b5a4:	dd0b      	ble.n	800b5be <__gethex+0x402>
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f7ff fd9f 	bl	800b0ec <rshift>
 800b5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5b2:	3701      	adds	r7, #1
 800b5b4:	42bb      	cmp	r3, r7
 800b5b6:	f6ff aee0 	blt.w	800b37a <__gethex+0x1be>
 800b5ba:	2501      	movs	r5, #1
 800b5bc:	e7c2      	b.n	800b544 <__gethex+0x388>
 800b5be:	f016 061f 	ands.w	r6, r6, #31
 800b5c2:	d0fa      	beq.n	800b5ba <__gethex+0x3fe>
 800b5c4:	4453      	add	r3, sl
 800b5c6:	f1c6 0620 	rsb	r6, r6, #32
 800b5ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b5ce:	f7fe f8c1 	bl	8009754 <__hi0bits>
 800b5d2:	42b0      	cmp	r0, r6
 800b5d4:	dbe7      	blt.n	800b5a6 <__gethex+0x3ea>
 800b5d6:	e7f0      	b.n	800b5ba <__gethex+0x3fe>
 800b5d8:	0800bec1 	.word	0x0800bec1

0800b5dc <L_shift>:
 800b5dc:	f1c2 0208 	rsb	r2, r2, #8
 800b5e0:	0092      	lsls	r2, r2, #2
 800b5e2:	b570      	push	{r4, r5, r6, lr}
 800b5e4:	f1c2 0620 	rsb	r6, r2, #32
 800b5e8:	6843      	ldr	r3, [r0, #4]
 800b5ea:	6804      	ldr	r4, [r0, #0]
 800b5ec:	fa03 f506 	lsl.w	r5, r3, r6
 800b5f0:	432c      	orrs	r4, r5
 800b5f2:	40d3      	lsrs	r3, r2
 800b5f4:	6004      	str	r4, [r0, #0]
 800b5f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b5fa:	4288      	cmp	r0, r1
 800b5fc:	d3f4      	bcc.n	800b5e8 <L_shift+0xc>
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}

0800b600 <__match>:
 800b600:	b530      	push	{r4, r5, lr}
 800b602:	6803      	ldr	r3, [r0, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b60a:	b914      	cbnz	r4, 800b612 <__match+0x12>
 800b60c:	6003      	str	r3, [r0, #0]
 800b60e:	2001      	movs	r0, #1
 800b610:	bd30      	pop	{r4, r5, pc}
 800b612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b616:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b61a:	2d19      	cmp	r5, #25
 800b61c:	bf98      	it	ls
 800b61e:	3220      	addls	r2, #32
 800b620:	42a2      	cmp	r2, r4
 800b622:	d0f0      	beq.n	800b606 <__match+0x6>
 800b624:	2000      	movs	r0, #0
 800b626:	e7f3      	b.n	800b610 <__match+0x10>

0800b628 <__hexnan>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	680b      	ldr	r3, [r1, #0]
 800b62e:	6801      	ldr	r1, [r0, #0]
 800b630:	115e      	asrs	r6, r3, #5
 800b632:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b636:	f013 031f 	ands.w	r3, r3, #31
 800b63a:	b087      	sub	sp, #28
 800b63c:	bf18      	it	ne
 800b63e:	3604      	addne	r6, #4
 800b640:	2500      	movs	r5, #0
 800b642:	1f37      	subs	r7, r6, #4
 800b644:	4682      	mov	sl, r0
 800b646:	4690      	mov	r8, r2
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b64e:	46b9      	mov	r9, r7
 800b650:	463c      	mov	r4, r7
 800b652:	9502      	str	r5, [sp, #8]
 800b654:	46ab      	mov	fp, r5
 800b656:	784a      	ldrb	r2, [r1, #1]
 800b658:	1c4b      	adds	r3, r1, #1
 800b65a:	9303      	str	r3, [sp, #12]
 800b65c:	b342      	cbz	r2, 800b6b0 <__hexnan+0x88>
 800b65e:	4610      	mov	r0, r2
 800b660:	9105      	str	r1, [sp, #20]
 800b662:	9204      	str	r2, [sp, #16]
 800b664:	f7ff fd94 	bl	800b190 <__hexdig_fun>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d151      	bne.n	800b710 <__hexnan+0xe8>
 800b66c:	9a04      	ldr	r2, [sp, #16]
 800b66e:	9905      	ldr	r1, [sp, #20]
 800b670:	2a20      	cmp	r2, #32
 800b672:	d818      	bhi.n	800b6a6 <__hexnan+0x7e>
 800b674:	9b02      	ldr	r3, [sp, #8]
 800b676:	459b      	cmp	fp, r3
 800b678:	dd13      	ble.n	800b6a2 <__hexnan+0x7a>
 800b67a:	454c      	cmp	r4, r9
 800b67c:	d206      	bcs.n	800b68c <__hexnan+0x64>
 800b67e:	2d07      	cmp	r5, #7
 800b680:	dc04      	bgt.n	800b68c <__hexnan+0x64>
 800b682:	462a      	mov	r2, r5
 800b684:	4649      	mov	r1, r9
 800b686:	4620      	mov	r0, r4
 800b688:	f7ff ffa8 	bl	800b5dc <L_shift>
 800b68c:	4544      	cmp	r4, r8
 800b68e:	d952      	bls.n	800b736 <__hexnan+0x10e>
 800b690:	2300      	movs	r3, #0
 800b692:	f1a4 0904 	sub.w	r9, r4, #4
 800b696:	f844 3c04 	str.w	r3, [r4, #-4]
 800b69a:	f8cd b008 	str.w	fp, [sp, #8]
 800b69e:	464c      	mov	r4, r9
 800b6a0:	461d      	mov	r5, r3
 800b6a2:	9903      	ldr	r1, [sp, #12]
 800b6a4:	e7d7      	b.n	800b656 <__hexnan+0x2e>
 800b6a6:	2a29      	cmp	r2, #41	@ 0x29
 800b6a8:	d157      	bne.n	800b75a <__hexnan+0x132>
 800b6aa:	3102      	adds	r1, #2
 800b6ac:	f8ca 1000 	str.w	r1, [sl]
 800b6b0:	f1bb 0f00 	cmp.w	fp, #0
 800b6b4:	d051      	beq.n	800b75a <__hexnan+0x132>
 800b6b6:	454c      	cmp	r4, r9
 800b6b8:	d206      	bcs.n	800b6c8 <__hexnan+0xa0>
 800b6ba:	2d07      	cmp	r5, #7
 800b6bc:	dc04      	bgt.n	800b6c8 <__hexnan+0xa0>
 800b6be:	462a      	mov	r2, r5
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7ff ff8a 	bl	800b5dc <L_shift>
 800b6c8:	4544      	cmp	r4, r8
 800b6ca:	d936      	bls.n	800b73a <__hexnan+0x112>
 800b6cc:	f1a8 0204 	sub.w	r2, r8, #4
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b6d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b6da:	429f      	cmp	r7, r3
 800b6dc:	d2f9      	bcs.n	800b6d2 <__hexnan+0xaa>
 800b6de:	1b3b      	subs	r3, r7, r4
 800b6e0:	f023 0303 	bic.w	r3, r3, #3
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	3401      	adds	r4, #1
 800b6e8:	3e03      	subs	r6, #3
 800b6ea:	42b4      	cmp	r4, r6
 800b6ec:	bf88      	it	hi
 800b6ee:	2304      	movhi	r3, #4
 800b6f0:	4443      	add	r3, r8
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f843 2b04 	str.w	r2, [r3], #4
 800b6f8:	429f      	cmp	r7, r3
 800b6fa:	d2fb      	bcs.n	800b6f4 <__hexnan+0xcc>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	b91b      	cbnz	r3, 800b708 <__hexnan+0xe0>
 800b700:	4547      	cmp	r7, r8
 800b702:	d128      	bne.n	800b756 <__hexnan+0x12e>
 800b704:	2301      	movs	r3, #1
 800b706:	603b      	str	r3, [r7, #0]
 800b708:	2005      	movs	r0, #5
 800b70a:	b007      	add	sp, #28
 800b70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	3501      	adds	r5, #1
 800b712:	2d08      	cmp	r5, #8
 800b714:	f10b 0b01 	add.w	fp, fp, #1
 800b718:	dd06      	ble.n	800b728 <__hexnan+0x100>
 800b71a:	4544      	cmp	r4, r8
 800b71c:	d9c1      	bls.n	800b6a2 <__hexnan+0x7a>
 800b71e:	2300      	movs	r3, #0
 800b720:	f844 3c04 	str.w	r3, [r4, #-4]
 800b724:	2501      	movs	r5, #1
 800b726:	3c04      	subs	r4, #4
 800b728:	6822      	ldr	r2, [r4, #0]
 800b72a:	f000 000f 	and.w	r0, r0, #15
 800b72e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b732:	6020      	str	r0, [r4, #0]
 800b734:	e7b5      	b.n	800b6a2 <__hexnan+0x7a>
 800b736:	2508      	movs	r5, #8
 800b738:	e7b3      	b.n	800b6a2 <__hexnan+0x7a>
 800b73a:	9b01      	ldr	r3, [sp, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0dd      	beq.n	800b6fc <__hexnan+0xd4>
 800b740:	f1c3 0320 	rsb	r3, r3, #32
 800b744:	f04f 32ff 	mov.w	r2, #4294967295
 800b748:	40da      	lsrs	r2, r3
 800b74a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b74e:	4013      	ands	r3, r2
 800b750:	f846 3c04 	str.w	r3, [r6, #-4]
 800b754:	e7d2      	b.n	800b6fc <__hexnan+0xd4>
 800b756:	3f04      	subs	r7, #4
 800b758:	e7d0      	b.n	800b6fc <__hexnan+0xd4>
 800b75a:	2004      	movs	r0, #4
 800b75c:	e7d5      	b.n	800b70a <__hexnan+0xe2>

0800b75e <__ascii_mbtowc>:
 800b75e:	b082      	sub	sp, #8
 800b760:	b901      	cbnz	r1, 800b764 <__ascii_mbtowc+0x6>
 800b762:	a901      	add	r1, sp, #4
 800b764:	b142      	cbz	r2, 800b778 <__ascii_mbtowc+0x1a>
 800b766:	b14b      	cbz	r3, 800b77c <__ascii_mbtowc+0x1e>
 800b768:	7813      	ldrb	r3, [r2, #0]
 800b76a:	600b      	str	r3, [r1, #0]
 800b76c:	7812      	ldrb	r2, [r2, #0]
 800b76e:	1e10      	subs	r0, r2, #0
 800b770:	bf18      	it	ne
 800b772:	2001      	movne	r0, #1
 800b774:	b002      	add	sp, #8
 800b776:	4770      	bx	lr
 800b778:	4610      	mov	r0, r2
 800b77a:	e7fb      	b.n	800b774 <__ascii_mbtowc+0x16>
 800b77c:	f06f 0001 	mvn.w	r0, #1
 800b780:	e7f8      	b.n	800b774 <__ascii_mbtowc+0x16>

0800b782 <_realloc_r>:
 800b782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b786:	4680      	mov	r8, r0
 800b788:	4615      	mov	r5, r2
 800b78a:	460c      	mov	r4, r1
 800b78c:	b921      	cbnz	r1, 800b798 <_realloc_r+0x16>
 800b78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b792:	4611      	mov	r1, r2
 800b794:	f7fd be60 	b.w	8009458 <_malloc_r>
 800b798:	b92a      	cbnz	r2, 800b7a6 <_realloc_r+0x24>
 800b79a:	f7fd fde9 	bl	8009370 <_free_r>
 800b79e:	2400      	movs	r4, #0
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a6:	f000 f840 	bl	800b82a <_malloc_usable_size_r>
 800b7aa:	4285      	cmp	r5, r0
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	d802      	bhi.n	800b7b6 <_realloc_r+0x34>
 800b7b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7b4:	d8f4      	bhi.n	800b7a0 <_realloc_r+0x1e>
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4640      	mov	r0, r8
 800b7ba:	f7fd fe4d 	bl	8009458 <_malloc_r>
 800b7be:	4607      	mov	r7, r0
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d0ec      	beq.n	800b79e <_realloc_r+0x1c>
 800b7c4:	42b5      	cmp	r5, r6
 800b7c6:	462a      	mov	r2, r5
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	bf28      	it	cs
 800b7cc:	4632      	movcs	r2, r6
 800b7ce:	f7ff fc45 	bl	800b05c <memcpy>
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	f7fd fdcb 	bl	8009370 <_free_r>
 800b7da:	463c      	mov	r4, r7
 800b7dc:	e7e0      	b.n	800b7a0 <_realloc_r+0x1e>

0800b7de <__ascii_wctomb>:
 800b7de:	4603      	mov	r3, r0
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	b141      	cbz	r1, 800b7f6 <__ascii_wctomb+0x18>
 800b7e4:	2aff      	cmp	r2, #255	@ 0xff
 800b7e6:	d904      	bls.n	800b7f2 <__ascii_wctomb+0x14>
 800b7e8:	228a      	movs	r2, #138	@ 0x8a
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	4770      	bx	lr
 800b7f2:	700a      	strb	r2, [r1, #0]
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	4770      	bx	lr

0800b7f8 <fiprintf>:
 800b7f8:	b40e      	push	{r1, r2, r3}
 800b7fa:	b503      	push	{r0, r1, lr}
 800b7fc:	4601      	mov	r1, r0
 800b7fe:	ab03      	add	r3, sp, #12
 800b800:	4805      	ldr	r0, [pc, #20]	@ (800b818 <fiprintf+0x20>)
 800b802:	f853 2b04 	ldr.w	r2, [r3], #4
 800b806:	6800      	ldr	r0, [r0, #0]
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	f000 f83f 	bl	800b88c <_vfiprintf_r>
 800b80e:	b002      	add	sp, #8
 800b810:	f85d eb04 	ldr.w	lr, [sp], #4
 800b814:	b003      	add	sp, #12
 800b816:	4770      	bx	lr
 800b818:	20000030 	.word	0x20000030

0800b81c <abort>:
 800b81c:	b508      	push	{r3, lr}
 800b81e:	2006      	movs	r0, #6
 800b820:	f000 fa08 	bl	800bc34 <raise>
 800b824:	2001      	movs	r0, #1
 800b826:	f7f6 f8c7 	bl	80019b8 <_exit>

0800b82a <_malloc_usable_size_r>:
 800b82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b82e:	1f18      	subs	r0, r3, #4
 800b830:	2b00      	cmp	r3, #0
 800b832:	bfbc      	itt	lt
 800b834:	580b      	ldrlt	r3, [r1, r0]
 800b836:	18c0      	addlt	r0, r0, r3
 800b838:	4770      	bx	lr

0800b83a <__sfputc_r>:
 800b83a:	6893      	ldr	r3, [r2, #8]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	b410      	push	{r4}
 800b842:	6093      	str	r3, [r2, #8]
 800b844:	da08      	bge.n	800b858 <__sfputc_r+0x1e>
 800b846:	6994      	ldr	r4, [r2, #24]
 800b848:	42a3      	cmp	r3, r4
 800b84a:	db01      	blt.n	800b850 <__sfputc_r+0x16>
 800b84c:	290a      	cmp	r1, #10
 800b84e:	d103      	bne.n	800b858 <__sfputc_r+0x1e>
 800b850:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b854:	f000 b932 	b.w	800babc <__swbuf_r>
 800b858:	6813      	ldr	r3, [r2, #0]
 800b85a:	1c58      	adds	r0, r3, #1
 800b85c:	6010      	str	r0, [r2, #0]
 800b85e:	7019      	strb	r1, [r3, #0]
 800b860:	4608      	mov	r0, r1
 800b862:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <__sfputs_r>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	4606      	mov	r6, r0
 800b86c:	460f      	mov	r7, r1
 800b86e:	4614      	mov	r4, r2
 800b870:	18d5      	adds	r5, r2, r3
 800b872:	42ac      	cmp	r4, r5
 800b874:	d101      	bne.n	800b87a <__sfputs_r+0x12>
 800b876:	2000      	movs	r0, #0
 800b878:	e007      	b.n	800b88a <__sfputs_r+0x22>
 800b87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87e:	463a      	mov	r2, r7
 800b880:	4630      	mov	r0, r6
 800b882:	f7ff ffda 	bl	800b83a <__sfputc_r>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d1f3      	bne.n	800b872 <__sfputs_r+0xa>
 800b88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b88c <_vfiprintf_r>:
 800b88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b890:	460d      	mov	r5, r1
 800b892:	b09d      	sub	sp, #116	@ 0x74
 800b894:	4614      	mov	r4, r2
 800b896:	4698      	mov	r8, r3
 800b898:	4606      	mov	r6, r0
 800b89a:	b118      	cbz	r0, 800b8a4 <_vfiprintf_r+0x18>
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <_vfiprintf_r+0x18>
 800b8a0:	f7fc fdc6 	bl	8008430 <__sinit>
 800b8a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8a6:	07d9      	lsls	r1, r3, #31
 800b8a8:	d405      	bmi.n	800b8b6 <_vfiprintf_r+0x2a>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	059a      	lsls	r2, r3, #22
 800b8ae:	d402      	bmi.n	800b8b6 <_vfiprintf_r+0x2a>
 800b8b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8b2:	f7fc ff08 	bl	80086c6 <__retarget_lock_acquire_recursive>
 800b8b6:	89ab      	ldrh	r3, [r5, #12]
 800b8b8:	071b      	lsls	r3, r3, #28
 800b8ba:	d501      	bpl.n	800b8c0 <_vfiprintf_r+0x34>
 800b8bc:	692b      	ldr	r3, [r5, #16]
 800b8be:	b99b      	cbnz	r3, 800b8e8 <_vfiprintf_r+0x5c>
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	f000 f938 	bl	800bb38 <__swsetup_r>
 800b8c8:	b170      	cbz	r0, 800b8e8 <_vfiprintf_r+0x5c>
 800b8ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8cc:	07dc      	lsls	r4, r3, #31
 800b8ce:	d504      	bpl.n	800b8da <_vfiprintf_r+0x4e>
 800b8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d4:	b01d      	add	sp, #116	@ 0x74
 800b8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	0598      	lsls	r0, r3, #22
 800b8de:	d4f7      	bmi.n	800b8d0 <_vfiprintf_r+0x44>
 800b8e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8e2:	f7fc fef1 	bl	80086c8 <__retarget_lock_release_recursive>
 800b8e6:	e7f3      	b.n	800b8d0 <_vfiprintf_r+0x44>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ec:	2320      	movs	r3, #32
 800b8ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f6:	2330      	movs	r3, #48	@ 0x30
 800b8f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800baa8 <_vfiprintf_r+0x21c>
 800b8fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b900:	f04f 0901 	mov.w	r9, #1
 800b904:	4623      	mov	r3, r4
 800b906:	469a      	mov	sl, r3
 800b908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b90c:	b10a      	cbz	r2, 800b912 <_vfiprintf_r+0x86>
 800b90e:	2a25      	cmp	r2, #37	@ 0x25
 800b910:	d1f9      	bne.n	800b906 <_vfiprintf_r+0x7a>
 800b912:	ebba 0b04 	subs.w	fp, sl, r4
 800b916:	d00b      	beq.n	800b930 <_vfiprintf_r+0xa4>
 800b918:	465b      	mov	r3, fp
 800b91a:	4622      	mov	r2, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	4630      	mov	r0, r6
 800b920:	f7ff ffa2 	bl	800b868 <__sfputs_r>
 800b924:	3001      	adds	r0, #1
 800b926:	f000 80a7 	beq.w	800ba78 <_vfiprintf_r+0x1ec>
 800b92a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b92c:	445a      	add	r2, fp
 800b92e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b930:	f89a 3000 	ldrb.w	r3, [sl]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 809f 	beq.w	800ba78 <_vfiprintf_r+0x1ec>
 800b93a:	2300      	movs	r3, #0
 800b93c:	f04f 32ff 	mov.w	r2, #4294967295
 800b940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b944:	f10a 0a01 	add.w	sl, sl, #1
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	9307      	str	r3, [sp, #28]
 800b94c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b950:	931a      	str	r3, [sp, #104]	@ 0x68
 800b952:	4654      	mov	r4, sl
 800b954:	2205      	movs	r2, #5
 800b956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95a:	4853      	ldr	r0, [pc, #332]	@ (800baa8 <_vfiprintf_r+0x21c>)
 800b95c:	f7f4 fc40 	bl	80001e0 <memchr>
 800b960:	9a04      	ldr	r2, [sp, #16]
 800b962:	b9d8      	cbnz	r0, 800b99c <_vfiprintf_r+0x110>
 800b964:	06d1      	lsls	r1, r2, #27
 800b966:	bf44      	itt	mi
 800b968:	2320      	movmi	r3, #32
 800b96a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b96e:	0713      	lsls	r3, r2, #28
 800b970:	bf44      	itt	mi
 800b972:	232b      	movmi	r3, #43	@ 0x2b
 800b974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b978:	f89a 3000 	ldrb.w	r3, [sl]
 800b97c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b97e:	d015      	beq.n	800b9ac <_vfiprintf_r+0x120>
 800b980:	9a07      	ldr	r2, [sp, #28]
 800b982:	4654      	mov	r4, sl
 800b984:	2000      	movs	r0, #0
 800b986:	f04f 0c0a 	mov.w	ip, #10
 800b98a:	4621      	mov	r1, r4
 800b98c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b990:	3b30      	subs	r3, #48	@ 0x30
 800b992:	2b09      	cmp	r3, #9
 800b994:	d94b      	bls.n	800ba2e <_vfiprintf_r+0x1a2>
 800b996:	b1b0      	cbz	r0, 800b9c6 <_vfiprintf_r+0x13a>
 800b998:	9207      	str	r2, [sp, #28]
 800b99a:	e014      	b.n	800b9c6 <_vfiprintf_r+0x13a>
 800b99c:	eba0 0308 	sub.w	r3, r0, r8
 800b9a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	9304      	str	r3, [sp, #16]
 800b9a8:	46a2      	mov	sl, r4
 800b9aa:	e7d2      	b.n	800b952 <_vfiprintf_r+0xc6>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	1d19      	adds	r1, r3, #4
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	9103      	str	r1, [sp, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	bfbb      	ittet	lt
 800b9b8:	425b      	neglt	r3, r3
 800b9ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b9be:	9307      	strge	r3, [sp, #28]
 800b9c0:	9307      	strlt	r3, [sp, #28]
 800b9c2:	bfb8      	it	lt
 800b9c4:	9204      	strlt	r2, [sp, #16]
 800b9c6:	7823      	ldrb	r3, [r4, #0]
 800b9c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9ca:	d10a      	bne.n	800b9e2 <_vfiprintf_r+0x156>
 800b9cc:	7863      	ldrb	r3, [r4, #1]
 800b9ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9d0:	d132      	bne.n	800ba38 <_vfiprintf_r+0x1ac>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	1d1a      	adds	r2, r3, #4
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	9203      	str	r2, [sp, #12]
 800b9da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9de:	3402      	adds	r4, #2
 800b9e0:	9305      	str	r3, [sp, #20]
 800b9e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bab8 <_vfiprintf_r+0x22c>
 800b9e6:	7821      	ldrb	r1, [r4, #0]
 800b9e8:	2203      	movs	r2, #3
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	f7f4 fbf8 	bl	80001e0 <memchr>
 800b9f0:	b138      	cbz	r0, 800ba02 <_vfiprintf_r+0x176>
 800b9f2:	9b04      	ldr	r3, [sp, #16]
 800b9f4:	eba0 000a 	sub.w	r0, r0, sl
 800b9f8:	2240      	movs	r2, #64	@ 0x40
 800b9fa:	4082      	lsls	r2, r0
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	3401      	adds	r4, #1
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba06:	4829      	ldr	r0, [pc, #164]	@ (800baac <_vfiprintf_r+0x220>)
 800ba08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba0c:	2206      	movs	r2, #6
 800ba0e:	f7f4 fbe7 	bl	80001e0 <memchr>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d03f      	beq.n	800ba96 <_vfiprintf_r+0x20a>
 800ba16:	4b26      	ldr	r3, [pc, #152]	@ (800bab0 <_vfiprintf_r+0x224>)
 800ba18:	bb1b      	cbnz	r3, 800ba62 <_vfiprintf_r+0x1d6>
 800ba1a:	9b03      	ldr	r3, [sp, #12]
 800ba1c:	3307      	adds	r3, #7
 800ba1e:	f023 0307 	bic.w	r3, r3, #7
 800ba22:	3308      	adds	r3, #8
 800ba24:	9303      	str	r3, [sp, #12]
 800ba26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba28:	443b      	add	r3, r7
 800ba2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2c:	e76a      	b.n	800b904 <_vfiprintf_r+0x78>
 800ba2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba32:	460c      	mov	r4, r1
 800ba34:	2001      	movs	r0, #1
 800ba36:	e7a8      	b.n	800b98a <_vfiprintf_r+0xfe>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	3401      	adds	r4, #1
 800ba3c:	9305      	str	r3, [sp, #20]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	f04f 0c0a 	mov.w	ip, #10
 800ba44:	4620      	mov	r0, r4
 800ba46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba4a:	3a30      	subs	r2, #48	@ 0x30
 800ba4c:	2a09      	cmp	r2, #9
 800ba4e:	d903      	bls.n	800ba58 <_vfiprintf_r+0x1cc>
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d0c6      	beq.n	800b9e2 <_vfiprintf_r+0x156>
 800ba54:	9105      	str	r1, [sp, #20]
 800ba56:	e7c4      	b.n	800b9e2 <_vfiprintf_r+0x156>
 800ba58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e7f0      	b.n	800ba44 <_vfiprintf_r+0x1b8>
 800ba62:	ab03      	add	r3, sp, #12
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	462a      	mov	r2, r5
 800ba68:	4b12      	ldr	r3, [pc, #72]	@ (800bab4 <_vfiprintf_r+0x228>)
 800ba6a:	a904      	add	r1, sp, #16
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7fb fe87 	bl	8007780 <_printf_float>
 800ba72:	4607      	mov	r7, r0
 800ba74:	1c78      	adds	r0, r7, #1
 800ba76:	d1d6      	bne.n	800ba26 <_vfiprintf_r+0x19a>
 800ba78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba7a:	07d9      	lsls	r1, r3, #31
 800ba7c:	d405      	bmi.n	800ba8a <_vfiprintf_r+0x1fe>
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	059a      	lsls	r2, r3, #22
 800ba82:	d402      	bmi.n	800ba8a <_vfiprintf_r+0x1fe>
 800ba84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba86:	f7fc fe1f 	bl	80086c8 <__retarget_lock_release_recursive>
 800ba8a:	89ab      	ldrh	r3, [r5, #12]
 800ba8c:	065b      	lsls	r3, r3, #25
 800ba8e:	f53f af1f 	bmi.w	800b8d0 <_vfiprintf_r+0x44>
 800ba92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba94:	e71e      	b.n	800b8d4 <_vfiprintf_r+0x48>
 800ba96:	ab03      	add	r3, sp, #12
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	4b05      	ldr	r3, [pc, #20]	@ (800bab4 <_vfiprintf_r+0x228>)
 800ba9e:	a904      	add	r1, sp, #16
 800baa0:	4630      	mov	r0, r6
 800baa2:	f7fc f905 	bl	8007cb0 <_printf_i>
 800baa6:	e7e4      	b.n	800ba72 <_vfiprintf_r+0x1e6>
 800baa8:	0800c181 	.word	0x0800c181
 800baac:	0800c18b 	.word	0x0800c18b
 800bab0:	08007781 	.word	0x08007781
 800bab4:	0800b869 	.word	0x0800b869
 800bab8:	0800c187 	.word	0x0800c187

0800babc <__swbuf_r>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	460e      	mov	r6, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	4605      	mov	r5, r0
 800bac4:	b118      	cbz	r0, 800bace <__swbuf_r+0x12>
 800bac6:	6a03      	ldr	r3, [r0, #32]
 800bac8:	b90b      	cbnz	r3, 800bace <__swbuf_r+0x12>
 800baca:	f7fc fcb1 	bl	8008430 <__sinit>
 800bace:	69a3      	ldr	r3, [r4, #24]
 800bad0:	60a3      	str	r3, [r4, #8]
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	071a      	lsls	r2, r3, #28
 800bad6:	d501      	bpl.n	800badc <__swbuf_r+0x20>
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	b943      	cbnz	r3, 800baee <__swbuf_r+0x32>
 800badc:	4621      	mov	r1, r4
 800bade:	4628      	mov	r0, r5
 800bae0:	f000 f82a 	bl	800bb38 <__swsetup_r>
 800bae4:	b118      	cbz	r0, 800baee <__swbuf_r+0x32>
 800bae6:	f04f 37ff 	mov.w	r7, #4294967295
 800baea:	4638      	mov	r0, r7
 800baec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	6922      	ldr	r2, [r4, #16]
 800baf2:	1a98      	subs	r0, r3, r2
 800baf4:	6963      	ldr	r3, [r4, #20]
 800baf6:	b2f6      	uxtb	r6, r6
 800baf8:	4283      	cmp	r3, r0
 800bafa:	4637      	mov	r7, r6
 800bafc:	dc05      	bgt.n	800bb0a <__swbuf_r+0x4e>
 800bafe:	4621      	mov	r1, r4
 800bb00:	4628      	mov	r0, r5
 800bb02:	f7ff fa47 	bl	800af94 <_fflush_r>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d1ed      	bne.n	800bae6 <__swbuf_r+0x2a>
 800bb0a:	68a3      	ldr	r3, [r4, #8]
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	60a3      	str	r3, [r4, #8]
 800bb10:	6823      	ldr	r3, [r4, #0]
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	6022      	str	r2, [r4, #0]
 800bb16:	701e      	strb	r6, [r3, #0]
 800bb18:	6962      	ldr	r2, [r4, #20]
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d004      	beq.n	800bb2a <__swbuf_r+0x6e>
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	07db      	lsls	r3, r3, #31
 800bb24:	d5e1      	bpl.n	800baea <__swbuf_r+0x2e>
 800bb26:	2e0a      	cmp	r6, #10
 800bb28:	d1df      	bne.n	800baea <__swbuf_r+0x2e>
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	f7ff fa31 	bl	800af94 <_fflush_r>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0d9      	beq.n	800baea <__swbuf_r+0x2e>
 800bb36:	e7d6      	b.n	800bae6 <__swbuf_r+0x2a>

0800bb38 <__swsetup_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4b29      	ldr	r3, [pc, #164]	@ (800bbe0 <__swsetup_r+0xa8>)
 800bb3c:	4605      	mov	r5, r0
 800bb3e:	6818      	ldr	r0, [r3, #0]
 800bb40:	460c      	mov	r4, r1
 800bb42:	b118      	cbz	r0, 800bb4c <__swsetup_r+0x14>
 800bb44:	6a03      	ldr	r3, [r0, #32]
 800bb46:	b90b      	cbnz	r3, 800bb4c <__swsetup_r+0x14>
 800bb48:	f7fc fc72 	bl	8008430 <__sinit>
 800bb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb50:	0719      	lsls	r1, r3, #28
 800bb52:	d422      	bmi.n	800bb9a <__swsetup_r+0x62>
 800bb54:	06da      	lsls	r2, r3, #27
 800bb56:	d407      	bmi.n	800bb68 <__swsetup_r+0x30>
 800bb58:	2209      	movs	r2, #9
 800bb5a:	602a      	str	r2, [r5, #0]
 800bb5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb60:	81a3      	strh	r3, [r4, #12]
 800bb62:	f04f 30ff 	mov.w	r0, #4294967295
 800bb66:	e033      	b.n	800bbd0 <__swsetup_r+0x98>
 800bb68:	0758      	lsls	r0, r3, #29
 800bb6a:	d512      	bpl.n	800bb92 <__swsetup_r+0x5a>
 800bb6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb6e:	b141      	cbz	r1, 800bb82 <__swsetup_r+0x4a>
 800bb70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb74:	4299      	cmp	r1, r3
 800bb76:	d002      	beq.n	800bb7e <__swsetup_r+0x46>
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7fd fbf9 	bl	8009370 <_free_r>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	6063      	str	r3, [r4, #4]
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f043 0308 	orr.w	r3, r3, #8
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	b94b      	cbnz	r3, 800bbb2 <__swsetup_r+0x7a>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba8:	d003      	beq.n	800bbb2 <__swsetup_r+0x7a>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f883 	bl	800bcb8 <__smakebuf_r>
 800bbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb6:	f013 0201 	ands.w	r2, r3, #1
 800bbba:	d00a      	beq.n	800bbd2 <__swsetup_r+0x9a>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	60a2      	str	r2, [r4, #8]
 800bbc0:	6962      	ldr	r2, [r4, #20]
 800bbc2:	4252      	negs	r2, r2
 800bbc4:	61a2      	str	r2, [r4, #24]
 800bbc6:	6922      	ldr	r2, [r4, #16]
 800bbc8:	b942      	cbnz	r2, 800bbdc <__swsetup_r+0xa4>
 800bbca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bbce:	d1c5      	bne.n	800bb5c <__swsetup_r+0x24>
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
 800bbd2:	0799      	lsls	r1, r3, #30
 800bbd4:	bf58      	it	pl
 800bbd6:	6962      	ldrpl	r2, [r4, #20]
 800bbd8:	60a2      	str	r2, [r4, #8]
 800bbda:	e7f4      	b.n	800bbc6 <__swsetup_r+0x8e>
 800bbdc:	2000      	movs	r0, #0
 800bbde:	e7f7      	b.n	800bbd0 <__swsetup_r+0x98>
 800bbe0:	20000030 	.word	0x20000030

0800bbe4 <_raise_r>:
 800bbe4:	291f      	cmp	r1, #31
 800bbe6:	b538      	push	{r3, r4, r5, lr}
 800bbe8:	4605      	mov	r5, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	d904      	bls.n	800bbf8 <_raise_r+0x14>
 800bbee:	2316      	movs	r3, #22
 800bbf0:	6003      	str	r3, [r0, #0]
 800bbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbfa:	b112      	cbz	r2, 800bc02 <_raise_r+0x1e>
 800bbfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc00:	b94b      	cbnz	r3, 800bc16 <_raise_r+0x32>
 800bc02:	4628      	mov	r0, r5
 800bc04:	f000 f830 	bl	800bc68 <_getpid_r>
 800bc08:	4622      	mov	r2, r4
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc12:	f000 b817 	b.w	800bc44 <_kill_r>
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d00a      	beq.n	800bc30 <_raise_r+0x4c>
 800bc1a:	1c59      	adds	r1, r3, #1
 800bc1c:	d103      	bne.n	800bc26 <_raise_r+0x42>
 800bc1e:	2316      	movs	r3, #22
 800bc20:	6003      	str	r3, [r0, #0]
 800bc22:	2001      	movs	r0, #1
 800bc24:	e7e7      	b.n	800bbf6 <_raise_r+0x12>
 800bc26:	2100      	movs	r1, #0
 800bc28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4798      	blx	r3
 800bc30:	2000      	movs	r0, #0
 800bc32:	e7e0      	b.n	800bbf6 <_raise_r+0x12>

0800bc34 <raise>:
 800bc34:	4b02      	ldr	r3, [pc, #8]	@ (800bc40 <raise+0xc>)
 800bc36:	4601      	mov	r1, r0
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	f7ff bfd3 	b.w	800bbe4 <_raise_r>
 800bc3e:	bf00      	nop
 800bc40:	20000030 	.word	0x20000030

0800bc44 <_kill_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	@ (800bc64 <_kill_r+0x20>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	4611      	mov	r1, r2
 800bc50:	602b      	str	r3, [r5, #0]
 800bc52:	f7f5 fea1 	bl	8001998 <_kill>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d102      	bne.n	800bc60 <_kill_r+0x1c>
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	b103      	cbz	r3, 800bc60 <_kill_r+0x1c>
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop
 800bc64:	20000578 	.word	0x20000578

0800bc68 <_getpid_r>:
 800bc68:	f7f5 be8e 	b.w	8001988 <_getpid>

0800bc6c <__swhatbuf_r>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	460c      	mov	r4, r1
 800bc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc74:	2900      	cmp	r1, #0
 800bc76:	b096      	sub	sp, #88	@ 0x58
 800bc78:	4615      	mov	r5, r2
 800bc7a:	461e      	mov	r6, r3
 800bc7c:	da0d      	bge.n	800bc9a <__swhatbuf_r+0x2e>
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc84:	f04f 0100 	mov.w	r1, #0
 800bc88:	bf14      	ite	ne
 800bc8a:	2340      	movne	r3, #64	@ 0x40
 800bc8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc90:	2000      	movs	r0, #0
 800bc92:	6031      	str	r1, [r6, #0]
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	b016      	add	sp, #88	@ 0x58
 800bc98:	bd70      	pop	{r4, r5, r6, pc}
 800bc9a:	466a      	mov	r2, sp
 800bc9c:	f000 f848 	bl	800bd30 <_fstat_r>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	dbec      	blt.n	800bc7e <__swhatbuf_r+0x12>
 800bca4:	9901      	ldr	r1, [sp, #4]
 800bca6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcae:	4259      	negs	r1, r3
 800bcb0:	4159      	adcs	r1, r3
 800bcb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcb6:	e7eb      	b.n	800bc90 <__swhatbuf_r+0x24>

0800bcb8 <__smakebuf_r>:
 800bcb8:	898b      	ldrh	r3, [r1, #12]
 800bcba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcbc:	079d      	lsls	r5, r3, #30
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	d507      	bpl.n	800bcd4 <__smakebuf_r+0x1c>
 800bcc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	6123      	str	r3, [r4, #16]
 800bccc:	2301      	movs	r3, #1
 800bcce:	6163      	str	r3, [r4, #20]
 800bcd0:	b003      	add	sp, #12
 800bcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd4:	ab01      	add	r3, sp, #4
 800bcd6:	466a      	mov	r2, sp
 800bcd8:	f7ff ffc8 	bl	800bc6c <__swhatbuf_r>
 800bcdc:	9f00      	ldr	r7, [sp, #0]
 800bcde:	4605      	mov	r5, r0
 800bce0:	4639      	mov	r1, r7
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7fd fbb8 	bl	8009458 <_malloc_r>
 800bce8:	b948      	cbnz	r0, 800bcfe <__smakebuf_r+0x46>
 800bcea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcee:	059a      	lsls	r2, r3, #22
 800bcf0:	d4ee      	bmi.n	800bcd0 <__smakebuf_r+0x18>
 800bcf2:	f023 0303 	bic.w	r3, r3, #3
 800bcf6:	f043 0302 	orr.w	r3, r3, #2
 800bcfa:	81a3      	strh	r3, [r4, #12]
 800bcfc:	e7e2      	b.n	800bcc4 <__smakebuf_r+0xc>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	6020      	str	r0, [r4, #0]
 800bd02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd06:	81a3      	strh	r3, [r4, #12]
 800bd08:	9b01      	ldr	r3, [sp, #4]
 800bd0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd0e:	b15b      	cbz	r3, 800bd28 <__smakebuf_r+0x70>
 800bd10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd14:	4630      	mov	r0, r6
 800bd16:	f000 f81d 	bl	800bd54 <_isatty_r>
 800bd1a:	b128      	cbz	r0, 800bd28 <__smakebuf_r+0x70>
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	f023 0303 	bic.w	r3, r3, #3
 800bd22:	f043 0301 	orr.w	r3, r3, #1
 800bd26:	81a3      	strh	r3, [r4, #12]
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	431d      	orrs	r5, r3
 800bd2c:	81a5      	strh	r5, [r4, #12]
 800bd2e:	e7cf      	b.n	800bcd0 <__smakebuf_r+0x18>

0800bd30 <_fstat_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d07      	ldr	r5, [pc, #28]	@ (800bd50 <_fstat_r+0x20>)
 800bd34:	2300      	movs	r3, #0
 800bd36:	4604      	mov	r4, r0
 800bd38:	4608      	mov	r0, r1
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	602b      	str	r3, [r5, #0]
 800bd3e:	f7f5 fe8b 	bl	8001a58 <_fstat>
 800bd42:	1c43      	adds	r3, r0, #1
 800bd44:	d102      	bne.n	800bd4c <_fstat_r+0x1c>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	b103      	cbz	r3, 800bd4c <_fstat_r+0x1c>
 800bd4a:	6023      	str	r3, [r4, #0]
 800bd4c:	bd38      	pop	{r3, r4, r5, pc}
 800bd4e:	bf00      	nop
 800bd50:	20000578 	.word	0x20000578

0800bd54 <_isatty_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	@ (800bd70 <_isatty_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f7f5 fe8a 	bl	8001a78 <_isatty>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_isatty_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_isatty_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	20000578 	.word	0x20000578

0800bd74 <_init>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	bf00      	nop
 800bd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7a:	bc08      	pop	{r3}
 800bd7c:	469e      	mov	lr, r3
 800bd7e:	4770      	bx	lr

0800bd80 <_fini>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	bf00      	nop
 800bd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd86:	bc08      	pop	{r3}
 800bd88:	469e      	mov	lr, r3
 800bd8a:	4770      	bx	lr
