
MEMS_1c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800bdd8  0800bdd8  0000cdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c288  0800c288  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c288  0800c288  0000d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c290  0800c290  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c290  0800c290  0000d290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c294  0800c294  0000d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c298  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200001ec  0800c484  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800c484  0000e58c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010539  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219f  00000000  00000000  0001e755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  000208f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c94  00000000  00000000  000218e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176d6  00000000  00000000  00022574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129a0  00000000  00000000  00039c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d37  00000000  00000000  0004c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b4  00000000  00000000  000de364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e3d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bdbc 	.word	0x0800bdbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800bdbc 	.word	0x0800bdbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	xyz_data[0] = 0;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
	xyz_data[2] = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001004:	2200      	movs	r2, #0
 8001006:	709a      	strb	r2, [r3, #2]
	xyz_data[4] = 0;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800100a:	2200      	movs	r2, #0
 800100c:	711a      	strb	r2, [r3, #4]
    // Transmit the X register address with auto-increment enabled
	HAL_I2C_Master_Transmit_DMA(&hi2c1, MEMS_WR_ADDRESS, (uint8_t*)&MEMS_REGISTER_X_AUTO_INCREMENT, size);
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001010:	8819      	ldrh	r1, [r3, #0]
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001018:	4807      	ldr	r0, [pc, #28]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800101a:	f001 ff71 	bl	8002f00 <HAL_I2C_Master_Transmit_DMA>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000430 	.word	0x20000430
 800102c:	20000000 	.word	0x20000000
 8001030:	20000010 	.word	0x20000010
 8001034:	2000000e 	.word	0x2000000e
 8001038:	20000208 	.word	0x20000208

0800103c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    // Transmit complete, now initiate a receive to read X, Y, Z
	HAL_I2C_Master_Receive_DMA(&hi2c1, (MEMS_WR_ADDRESS + 1), (uint8_t*)xyz_data, multiple_size);
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	b299      	uxth	r1, r3
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8001052:	4806      	ldr	r0, [pc, #24]	@ (800106c <HAL_I2C_MasterTxCpltCallback+0x30>)
 8001054:	f002 f880 	bl	8003158 <HAL_I2C_Master_Receive_DMA>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000012 	.word	0x20000012
 8001068:	20000430 	.word	0x20000430
 800106c:	20000208 	.word	0x20000208

08001070 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef *hi2c){
 8001070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001074:	b08c      	sub	sp, #48	@ 0x30
 8001076:	af06      	add	r7, sp, #24
 8001078:	6078      	str	r0, [r7, #4]
	float acc_g_x = xyz_data[0] / 64.0;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 800107c:	f993 3000 	ldrsb.w	r3, [r3]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa57 	bl	8000534 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 800108c:	f7ff fbe6 	bl	800085c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fdae 	bl	8000bf8 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	617b      	str	r3, [r7, #20]
	float acc_g_y = xyz_data[2] / 64.0;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 80010a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa44 	bl	8000534 <__aeabi_i2d>
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 80010b2:	f7ff fbd3 	bl	800085c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd9b 	bl	8000bf8 <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	613b      	str	r3, [r7, #16]
	float acc_g_z = xyz_data[4] / 64.0;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 80010c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa31 	bl	8000534 <__aeabi_i2d>
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 80010d8:	f7ff fbc0 	bl	800085c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd88 	bl	8000bf8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	60fb      	str	r3, [r7, #12]
	string_length = snprintf(string, sizeof(string), "X: %.2f g, Y: %.2f g, Z: %.2f g\n", acc_g_x, acc_g_y, acc_g_z);
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f7ff fa33 	bl	8000558 <__aeabi_f2d>
 80010f2:	4604      	mov	r4, r0
 80010f4:	460d      	mov	r5, r1
 80010f6:	6938      	ldr	r0, [r7, #16]
 80010f8:	f7ff fa2e 	bl	8000558 <__aeabi_f2d>
 80010fc:	4680      	mov	r8, r0
 80010fe:	4689      	mov	r9, r1
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff fa29 	bl	8000558 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800110e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001112:	e9cd 4500 	strd	r4, r5, [sp]
 8001116:	4a0c      	ldr	r2, [pc, #48]	@ (8001148 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8001118:	2120      	movs	r1, #32
 800111a:	480c      	ldr	r0, [pc, #48]	@ (800114c <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800111c:	f007 f9e2 	bl	80084e4 <sniprintf>
 8001120:	4603      	mov	r3, r0
 8001122:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8001124:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)string, string_length);
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4907      	ldr	r1, [pc, #28]	@ (800114c <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <HAL_I2C_MasterRxCpltCallback+0xe4>)
 8001132:	f005 fa95 	bl	8006660 <HAL_UART_Transmit_DMA>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001140:	20000430 	.word	0x20000430
 8001144:	40500000 	.word	0x40500000
 8001148:	0800bdd8 	.word	0x0800bdd8
 800114c:	2000040c 	.word	0x2000040c
 8001150:	2000042c 	.word	0x2000042c
 8001154:	20000364 	.word	0x20000364

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 fd39 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f87b 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f000 f9bb 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800116a:	f000 f989 	bl	8001480 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800116e:	f000 f95d 	bl	800142c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001172:	f000 f8df 	bl	8001334 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001176:	f000 f90b 	bl	8001390 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK) {
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <main+0xcc>)
 800117c:	8819      	ldrh	r1, [r3, #0]
 800117e:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <main+0xd0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2302      	movs	r3, #2
 8001186:	4a29      	ldr	r2, [pc, #164]	@ (800122c <main+0xd4>)
 8001188:	4829      	ldr	r0, [pc, #164]	@ (8001230 <main+0xd8>)
 800118a:	f001 fdbb 	bl	8002d04 <HAL_I2C_Master_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d108      	bne.n	80011a6 <main+0x4e>
	  string_length = snprintf(string, sizeof(string), "LIS2DE found!\n");
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <main+0xdc>)
 8001196:	2120      	movs	r1, #32
 8001198:	4827      	ldr	r0, [pc, #156]	@ (8001238 <main+0xe0>)
 800119a:	f007 f9a3 	bl	80084e4 <sniprintf>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a26      	ldr	r2, [pc, #152]	@ (800123c <main+0xe4>)
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e01d      	b.n	80011e2 <main+0x8a>
  }
  else {
      if (HAL_I2C_Master_Transmit(&hi2c1, MEMS12_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK) {
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <main+0xe8>)
 80011a8:	8819      	ldrh	r1, [r3, #0]
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <main+0xd0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2302      	movs	r3, #2
 80011b2:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <main+0xd4>)
 80011b4:	481e      	ldr	r0, [pc, #120]	@ (8001230 <main+0xd8>)
 80011b6:	f001 fda5 	bl	8002d04 <HAL_I2C_Master_Transmit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d108      	bne.n	80011d2 <main+0x7a>
    	  string_length = snprintf(string, sizeof(string), "LIS2DE12 found!\n");
 80011c0:	4a20      	ldr	r2, [pc, #128]	@ (8001244 <main+0xec>)
 80011c2:	2120      	movs	r1, #32
 80011c4:	481c      	ldr	r0, [pc, #112]	@ (8001238 <main+0xe0>)
 80011c6:	f007 f98d 	bl	80084e4 <sniprintf>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <main+0xe4>)
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e007      	b.n	80011e2 <main+0x8a>
      }
      else {
          string_length = snprintf(string, sizeof(string), "Error! No device found!\n");
 80011d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <main+0xf0>)
 80011d4:	2120      	movs	r1, #32
 80011d6:	4818      	ldr	r0, [pc, #96]	@ (8001238 <main+0xe0>)
 80011d8:	f007 f984 	bl	80084e4 <sniprintf>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <main+0xe4>)
 80011e0:	6013      	str	r3, [r2, #0]
      }
  }

  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)string, string_length);
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <main+0xe4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	4913      	ldr	r1, [pc, #76]	@ (8001238 <main+0xe0>)
 80011ec:	4817      	ldr	r0, [pc, #92]	@ (800124c <main+0xf4>)
 80011ee:	f005 fa37 	bl	8006660 <HAL_UART_Transmit_DMA>

  HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG2, sizeof(CTRL_REG2), timeout);
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <main+0xcc>)
 80011f4:	8819      	ldrh	r1, [r3, #0]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <main+0xd0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <main+0xf8>)
 8001200:	480b      	ldr	r0, [pc, #44]	@ (8001230 <main+0xd8>)
 8001202:	f001 fd7f 	bl	8002d04 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG4, sizeof(CTRL_REG4), timeout);
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <main+0xcc>)
 8001208:	8819      	ldrh	r1, [r3, #0]
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <main+0xd0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2302      	movs	r3, #2
 8001212:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <main+0xfc>)
 8001214:	4806      	ldr	r0, [pc, #24]	@ (8001230 <main+0xd8>)
 8001216:	f001 fd75 	bl	8002d04 <HAL_I2C_Master_Transmit>

  HAL_TIM_Base_Start_IT(&htim2);
 800121a:	480f      	ldr	r0, [pc, #60]	@ (8001258 <main+0x100>)
 800121c:	f004 fde6 	bl	8005dec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <main+0xc8>
 8001224:	20000000 	.word	0x20000000
 8001228:	20000014 	.word	0x20000014
 800122c:	20000004 	.word	0x20000004
 8001230:	20000208 	.word	0x20000208
 8001234:	0800bdfc 	.word	0x0800bdfc
 8001238:	2000040c 	.word	0x2000040c
 800123c:	2000042c 	.word	0x2000042c
 8001240:	20000002 	.word	0x20000002
 8001244:	0800be0c 	.word	0x0800be0c
 8001248:	0800be20 	.word	0x0800be20
 800124c:	20000364 	.word	0x20000364
 8001250:	20000008 	.word	0x20000008
 8001254:	2000000c 	.word	0x2000000c
 8001258:	2000031c 	.word	0x2000031c

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	@ 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	@ 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f007 f9d1 	bl	8008612 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <SystemClock_Config+0xd0>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	4a28      	ldr	r2, [pc, #160]	@ (800132c <SystemClock_Config+0xd0>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <SystemClock_Config+0xd0>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <SystemClock_Config+0xd4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012a8:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <SystemClock_Config+0xd4>)
 80012aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <SystemClock_Config+0xd4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012d0:	2310      	movs	r3, #16
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012da:	2304      	movs	r3, #4
 80012dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012de:	2307      	movs	r3, #7
 80012e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 f898 	bl	800541c <HAL_RCC_OscConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012f2:	f000 f963 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f6:	230f      	movs	r3, #15
 80012f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fa:	2302      	movs	r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2102      	movs	r1, #2
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fafa 	bl	800590c <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800131e:	f000 f94d 	bl	80015bc <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	@ 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_I2C1_Init+0x50>)
 800133a:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <MX_I2C1_Init+0x54>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001340:	4a12      	ldr	r2, [pc, #72]	@ (800138c <MX_I2C1_Init+0x58>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_I2C1_Init+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001352:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001356:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001372:	f001 fb6d 	bl	8002a50 <HAL_I2C_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800137c:	f000 f91e 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000208 	.word	0x20000208
 8001388:	40005400 	.word	0x40005400
 800138c:	000186a0 	.word	0x000186a0

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013b6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10)-1;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013c4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d6:	4814      	ldr	r0, [pc, #80]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013d8:	f004 fcb8 	bl	8005d4c <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013e2:	f000 f8eb 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013f4:	f004 fe4c 	bl	8006090 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013fe:	f000 f8dd 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <MX_TIM2_Init+0x98>)
 8001410:	f005 f854 	bl	80064bc <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f000 f8cf 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000031c 	.word	0x2000031c

0800142c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <MX_USART2_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001464:	f005 f8ac 	bl	80065c0 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 f8a5 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000364 	.word	0x20000364
 800147c:	40004400 	.word	0x40004400

08001480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_DMA_Init+0x5c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a13      	ldr	r2, [pc, #76]	@ (80014dc <MX_DMA_Init+0x5c>)
 8001490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_DMA_Init+0x5c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	200b      	movs	r0, #11
 80014a8:	f000 fce1 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014ac:	200b      	movs	r0, #11
 80014ae:	f000 fcfa 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2011      	movs	r0, #17
 80014b8:	f000 fcd9 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014bc:	2011      	movs	r0, #17
 80014be:	f000 fcf2 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	202f      	movs	r0, #47	@ 0x2f
 80014c8:	f000 fcd1 	bl	8001e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80014cc:	202f      	movs	r0, #47	@ 0x2f
 80014ce:	f000 fcea 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a2c      	ldr	r2, [pc, #176]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a25      	ldr	r2, [pc, #148]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a17      	ldr	r2, [pc, #92]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <MX_GPIO_Init+0xd0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2120      	movs	r1, #32
 800156a:	4812      	ldr	r0, [pc, #72]	@ (80015b4 <MX_GPIO_Init+0xd4>)
 800156c:	f001 fa56 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001570:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001576:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <MX_GPIO_Init+0xd8>)
 8001588:	f001 f8c4 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800158c:	2320      	movs	r3, #32
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_GPIO_Init+0xd4>)
 80015a4:	f001 f8b6 	bl	8002714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020800 	.word	0x40020800

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001614 <HAL_MspInit+0x4c>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_MspInit+0x4c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001606:	2007      	movs	r0, #7
 8001608:	f000 fc26 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a50      	ldr	r2, [pc, #320]	@ (8001778 <HAL_I2C_MspInit+0x160>)
 8001636:	4293      	cmp	r3, r2
 8001638:	f040 8099 	bne.w	800176e <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	4b4e      	ldr	r3, [pc, #312]	@ (800177c <HAL_I2C_MspInit+0x164>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001644:	4a4d      	ldr	r2, [pc, #308]	@ (800177c <HAL_I2C_MspInit+0x164>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	6313      	str	r3, [r2, #48]	@ 0x30
 800164c:	4b4b      	ldr	r3, [pc, #300]	@ (800177c <HAL_I2C_MspInit+0x164>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001658:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165e:	2312      	movs	r3, #18
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166a:	2304      	movs	r3, #4
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4842      	ldr	r0, [pc, #264]	@ (8001780 <HAL_I2C_MspInit+0x168>)
 8001676:	f001 f84d 	bl	8002714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b3f      	ldr	r3, [pc, #252]	@ (800177c <HAL_I2C_MspInit+0x164>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	4a3e      	ldr	r2, [pc, #248]	@ (800177c <HAL_I2C_MspInit+0x164>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001688:	6413      	str	r3, [r2, #64]	@ 0x40
 800168a:	4b3c      	ldr	r3, [pc, #240]	@ (800177c <HAL_I2C_MspInit+0x164>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 8001698:	4a3b      	ldr	r2, [pc, #236]	@ (8001788 <HAL_I2C_MspInit+0x170>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800169c:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 800169e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a4:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016d6:	482b      	ldr	r0, [pc, #172]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016d8:	f000 fc00 	bl	8001edc <HAL_DMA_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80016e2:	f7ff ff6b 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80016ec:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <HAL_I2C_MspInit+0x16c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80016f2:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_I2C_MspInit+0x174>)
 80016f4:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <HAL_I2C_MspInit+0x178>)
 80016f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_I2C_MspInit+0x174>)
 80016fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_I2C_MspInit+0x174>)
 8001702:	2240      	movs	r2, #64	@ 0x40
 8001704:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_I2C_MspInit+0x174>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_I2C_MspInit+0x174>)
 800170e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001712:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001714:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <HAL_I2C_MspInit+0x174>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_I2C_MspInit+0x174>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <HAL_I2C_MspInit+0x174>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_I2C_MspInit+0x174>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <HAL_I2C_MspInit+0x174>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001732:	4816      	ldr	r0, [pc, #88]	@ (800178c <HAL_I2C_MspInit+0x174>)
 8001734:	f000 fbd2 	bl	8001edc <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800173e:	f7ff ff3d 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_I2C_MspInit+0x174>)
 8001746:	635a      	str	r2, [r3, #52]	@ 0x34
 8001748:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_I2C_MspInit+0x174>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	201f      	movs	r0, #31
 8001754:	f000 fb8b 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001758:	201f      	movs	r0, #31
 800175a:	f000 fba4 	bl	8001ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2020      	movs	r0, #32
 8001764:	f000 fb83 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001768:	2020      	movs	r0, #32
 800176a:	f000 fb9c 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005400 	.word	0x40005400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400
 8001784:	2000025c 	.word	0x2000025c
 8001788:	40026010 	.word	0x40026010
 800178c:	200002bc 	.word	0x200002bc
 8001790:	400260b8 	.word	0x400260b8

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a4:	d115      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4a0b      	ldr	r2, [pc, #44]	@ (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_TIM_Base_MspInit+0x48>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	201c      	movs	r0, #28
 80017c8:	f000 fb51 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017cc:	201c      	movs	r0, #28
 80017ce:	f000 fb6a 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_UART_MspInit+0xf0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d161      	bne.n	80018c6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b33      	ldr	r3, [pc, #204]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
 800180c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001810:	6413      	str	r3, [r2, #64]	@ 0x40
 8001812:	4b30      	ldr	r3, [pc, #192]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800183a:	230c      	movs	r3, #12
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184a:	2307      	movs	r3, #7
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4820      	ldr	r0, [pc, #128]	@ (80018d8 <HAL_UART_MspInit+0xf8>)
 8001856:	f000 ff5d 	bl	8002714 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 800185c:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <HAL_UART_MspInit+0x100>)
 800185e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001860:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 8001862:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001866:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 800186a:	2240      	movs	r2, #64	@ 0x40
 800186c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 8001876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800189a:	4810      	ldr	r0, [pc, #64]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 800189c:	f000 fb1e 	bl	8001edc <HAL_DMA_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80018a6:	f7ff fe89 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0b      	ldr	r2, [pc, #44]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 80018ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2026      	movs	r0, #38	@ 0x26
 80018bc:	f000 fad7 	bl	8001e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c0:	2026      	movs	r0, #38	@ 0x26
 80018c2:	f000 faf0 	bl	8001ea6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020000 	.word	0x40020000
 80018dc:	200003ac 	.word	0x200003ac
 80018e0:	400260a0 	.word	0x400260a0

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <NMI_Handler+0x4>

080018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <UsageFault_Handler+0x4>

0800190c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f000 f99d 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA1_Stream0_IRQHandler+0x10>)
 800194a:	f000 fc5f 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000025c 	.word	0x2000025c

08001958 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA1_Stream6_IRQHandler+0x10>)
 800195e:	f000 fc55 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200003ac 	.word	0x200003ac

0800196c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <TIM2_IRQHandler+0x10>)
 8001972:	f004 fa9d 	bl	8005eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000031c 	.word	0x2000031c

08001980 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <I2C1_EV_IRQHandler+0x10>)
 8001986:	f001 fd13 	bl	80033b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000208 	.word	0x20000208

08001994 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <I2C1_ER_IRQHandler+0x10>)
 800199a:	f001 fe5c 	bl	8003656 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000208 	.word	0x20000208

080019a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <USART2_IRQHandler+0x10>)
 80019ae:	f004 fec7 	bl	8006740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000364 	.word	0x20000364

080019bc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <DMA1_Stream7_IRQHandler+0x10>)
 80019c2:	f000 fc23 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200002bc 	.word	0x200002bc

080019d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return 1;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_kill>:

int _kill(int pid, int sig)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ea:	f006 fe65 	bl	80086b8 <__errno>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2216      	movs	r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
  return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_exit>:

void _exit (int status)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffe7 	bl	80019e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a12:	bf00      	nop
 8001a14:	e7fd      	b.n	8001a12 <_exit+0x12>

08001a16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e00a      	b.n	8001a3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a28:	f3af 8000 	nop.w
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	b2ca      	uxtb	r2, r1
 8001a36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf0      	blt.n	8001a28 <_read+0x12>
  }

  return len;
 8001a46:	687b      	ldr	r3, [r7, #4]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e009      	b.n	8001a76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbf1      	blt.n	8001a62 <_write+0x12>
  }
  return len;
 8001a7e:	687b      	ldr	r3, [r7, #4]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_close>:

int _close(int file)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_isatty>:

int _isatty(int file)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	@ (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f006 fdca 	bl	80086b8 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20018000 	.word	0x20018000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	20000438 	.word	0x20000438
 8001b58:	20000590 	.word	0x20000590

08001b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b84:	f7ff ffea 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	@ (8001bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f006 fd89 	bl	80086c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7ff fad1 	bl	8001158 <main>
  bx  lr    
 8001bb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001bc4:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 8001bc8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001bcc:	2000058c 	.word	0x2000058c

08001bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <HAL_Init+0x40>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_Init+0x40>)
 8001bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_Init+0x40>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f92b 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fcde 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f943 	bl	8001ec2 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 f90b 	bl	8001e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	@ (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000018 	.word	0x20000018
 8001c70:	20000020 	.word	0x20000020
 8001c74:	2000001c 	.word	0x2000001c

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000020 	.word	0x20000020
 8001c9c:	2000043c 	.word	0x2000043c

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2000043c 	.word	0x2000043c

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4907      	ldr	r1, [pc, #28]	@ (8001d54 <__NVIC_EnableIRQ+0x38>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	@ (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	@ 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff8e 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff29 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff3e 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff8e 	bl	8001dac <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5d 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff31 	bl	8001d1c <__NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffa2 	bl	8001e14 <SysTick_Config>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff feda 	bl	8001ca0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e099      	b.n	800202c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f18:	e00f      	b.n	8001f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1a:	f7ff fec1 	bl	8001ca0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d908      	bls.n	8001f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e078      	b.n	800202c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1e8      	bne.n	8001f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <HAL_DMA_Init+0x158>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d107      	bne.n	8001fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d117      	bne.n	8001ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00e      	beq.n	8001ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fb1b 	bl	800261c <DMA_CheckFifoParam>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2240      	movs	r2, #64	@ 0x40
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e016      	b.n	800202c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fad2 	bl	80025b0 <DMA_CalcBaseAndBitshift>
 800200c:	4603      	mov	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	223f      	movs	r2, #63	@ 0x3f
 8002016:	409a      	lsls	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	f010803f 	.word	0xf010803f

08002038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_DMA_Start_IT+0x26>
 800205a:	2302      	movs	r3, #2
 800205c:	e040      	b.n	80020e0 <HAL_DMA_Start_IT+0xa8>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d12f      	bne.n	80020d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fa64 	bl	8002554 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	223f      	movs	r2, #63	@ 0x3f
 8002092:	409a      	lsls	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0216 	orr.w	r2, r2, #22
 80020a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0208 	orr.w	r2, r2, #8
 80020be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e005      	b.n	80020de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020f6:	f7ff fdd3 	bl	8001ca0 <HAL_GetTick>
 80020fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d008      	beq.n	800211a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e052      	b.n	80021c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0216 	bic.w	r2, r2, #22
 8002128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <HAL_DMA_Abort+0x62>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0208 	bic.w	r2, r2, #8
 8002158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216a:	e013      	b.n	8002194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216c:	f7ff fd98 	bl	8001ca0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b05      	cmp	r3, #5
 8002178:	d90c      	bls.n	8002194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2203      	movs	r2, #3
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e015      	b.n	80021c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1e4      	bne.n	800216c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	223f      	movs	r2, #63	@ 0x3f
 80021a8:	409a      	lsls	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d004      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2280      	movs	r2, #128	@ 0x80
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00c      	b.n	8002200 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2205      	movs	r2, #5
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002218:	4b8e      	ldr	r3, [pc, #568]	@ (8002454 <HAL_DMA_IRQHandler+0x248>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a8e      	ldr	r2, [pc, #568]	@ (8002458 <HAL_DMA_IRQHandler+0x24c>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2208      	movs	r2, #8
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01a      	beq.n	8002278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0204 	bic.w	r2, r2, #4
 800225e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	2208      	movs	r2, #8
 8002266:	409a      	lsls	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2201      	movs	r2, #1
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	2201      	movs	r2, #1
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2204      	movs	r2, #4
 80022b4:	409a      	lsls	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d012      	beq.n	80022e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d0:	2204      	movs	r2, #4
 80022d2:	409a      	lsls	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	2210      	movs	r2, #16
 80022ea:	409a      	lsls	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d043      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03c      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	2210      	movs	r2, #16
 8002308:	409a      	lsls	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d018      	beq.n	800234e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d108      	bne.n	800233c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d024      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
 800233a:	e01f      	b.n	800237c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e016      	b.n	800237c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0208 	bic.w	r2, r2, #8
 800236a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002380:	2220      	movs	r2, #32
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 808f 	beq.w	80024ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8087 	beq.w	80024ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	2220      	movs	r2, #32
 80023a4:	409a      	lsls	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d136      	bne.n	8002424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0216 	bic.w	r2, r2, #22
 80023c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x1da>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0208 	bic.w	r2, r2, #8
 80023f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	223f      	movs	r2, #63	@ 0x3f
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002416:	2b00      	cmp	r3, #0
 8002418:	d07e      	beq.n	8002518 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	4798      	blx	r3
        }
        return;
 8002422:	e079      	b.n	8002518 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01d      	beq.n	800246e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10d      	bne.n	800245c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	2b00      	cmp	r3, #0
 8002446:	d031      	beq.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
 8002450:	e02c      	b.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
 8002452:	bf00      	nop
 8002454:	20000018 	.word	0x20000018
 8002458:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
 800246c:	e01e      	b.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10f      	bne.n	800249c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0210 	bic.w	r2, r2, #16
 800248a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d032      	beq.n	800251a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d022      	beq.n	8002506 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2205      	movs	r2, #5
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3301      	adds	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d307      	bcc.n	80024f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f2      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x2cc>
 80024f2:	e000      	b.n	80024f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
 8002516:	e000      	b.n	800251a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002518:	bf00      	nop
    }
  }
}
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800252e:	b2db      	uxtb	r3, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002570:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b40      	cmp	r3, #64	@ 0x40
 8002580:	d108      	bne.n	8002594 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002592:	e007      	b.n	80025a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	60da      	str	r2, [r3, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	3b10      	subs	r3, #16
 80025c0:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <DMA_CalcBaseAndBitshift+0x64>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <DMA_CalcBaseAndBitshift+0x68>)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d909      	bls.n	80025f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80025f0:	e007      	b.n	8002602 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	aaaaaaab 	.word	0xaaaaaaab
 8002618:	0800be54 	.word	0x0800be54

0800261c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11f      	bne.n	8002676 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d856      	bhi.n	80026ea <DMA_CheckFifoParam+0xce>
 800263c:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <DMA_CheckFifoParam+0x28>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	08002655 	.word	0x08002655
 8002648:	08002667 	.word	0x08002667
 800264c:	08002655 	.word	0x08002655
 8002650:	080026eb 	.word	0x080026eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d046      	beq.n	80026ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002664:	e043      	b.n	80026ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800266e:	d140      	bne.n	80026f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002674:	e03d      	b.n	80026f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800267e:	d121      	bne.n	80026c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d837      	bhi.n	80026f6 <DMA_CheckFifoParam+0xda>
 8002686:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <DMA_CheckFifoParam+0x70>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026a3 	.word	0x080026a3
 8002694:	0800269d 	.word	0x0800269d
 8002698:	080026b5 	.word	0x080026b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e030      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d025      	beq.n	80026fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b2:	e022      	b.n	80026fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026bc:	d11f      	bne.n	80026fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026c2:	e01c      	b.n	80026fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d903      	bls.n	80026d2 <DMA_CheckFifoParam+0xb6>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d003      	beq.n	80026d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026d0:	e018      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      break;
 80026d6:	e015      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00e      	beq.n	8002702 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      break;
 80026e8:	e00b      	b.n	8002702 <DMA_CheckFifoParam+0xe6>
      break;
 80026ea:	bf00      	nop
 80026ec:	e00a      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026ee:	bf00      	nop
 80026f0:	e008      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026f2:	bf00      	nop
 80026f4:	e006      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026f6:	bf00      	nop
 80026f8:	e004      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;   
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
    }
  } 
  
  return status; 
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e159      	b.n	80029e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002730:	2201      	movs	r2, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	f040 8148 	bne.w	80029de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d005      	beq.n	8002766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	2b02      	cmp	r3, #2
 8002764:	d130      	bne.n	80027c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0201 	and.w	r2, r3, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d017      	beq.n	8002804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d123      	bne.n	8002858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	08da      	lsrs	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3208      	adds	r2, #8
 8002818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0203 	and.w	r2, r3, #3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a2 	beq.w	80029de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b57      	ldr	r3, [pc, #348]	@ (80029fc <HAL_GPIO_Init+0x2e8>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	4a56      	ldr	r2, [pc, #344]	@ (80029fc <HAL_GPIO_Init+0x2e8>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028aa:	4b54      	ldr	r3, [pc, #336]	@ (80029fc <HAL_GPIO_Init+0x2e8>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b6:	4a52      	ldr	r2, [pc, #328]	@ (8002a00 <HAL_GPIO_Init+0x2ec>)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	220f      	movs	r2, #15
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a49      	ldr	r2, [pc, #292]	@ (8002a04 <HAL_GPIO_Init+0x2f0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d019      	beq.n	8002916 <HAL_GPIO_Init+0x202>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a48      	ldr	r2, [pc, #288]	@ (8002a08 <HAL_GPIO_Init+0x2f4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <HAL_GPIO_Init+0x1fe>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a47      	ldr	r2, [pc, #284]	@ (8002a0c <HAL_GPIO_Init+0x2f8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00d      	beq.n	800290e <HAL_GPIO_Init+0x1fa>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a46      	ldr	r2, [pc, #280]	@ (8002a10 <HAL_GPIO_Init+0x2fc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <HAL_GPIO_Init+0x1f6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a45      	ldr	r2, [pc, #276]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <HAL_GPIO_Init+0x1f2>
 8002902:	2304      	movs	r3, #4
 8002904:	e008      	b.n	8002918 <HAL_GPIO_Init+0x204>
 8002906:	2307      	movs	r3, #7
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x204>
 800290a:	2303      	movs	r3, #3
 800290c:	e004      	b.n	8002918 <HAL_GPIO_Init+0x204>
 800290e:	2302      	movs	r3, #2
 8002910:	e002      	b.n	8002918 <HAL_GPIO_Init+0x204>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x204>
 8002916:	2300      	movs	r3, #0
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f002 0203 	and.w	r2, r2, #3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4093      	lsls	r3, r2
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002928:	4935      	ldr	r1, [pc, #212]	@ (8002a00 <HAL_GPIO_Init+0x2ec>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002936:	4b38      	ldr	r3, [pc, #224]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295a:	4a2f      	ldr	r2, [pc, #188]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002960:	4b2d      	ldr	r3, [pc, #180]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002984:	4a24      	ldr	r2, [pc, #144]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800298a:	4b23      	ldr	r3, [pc, #140]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b4:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a18 <HAL_GPIO_Init+0x304>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	f67f aea2 	bls.w	8002730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3724      	adds	r7, #36	@ 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e12b      	b.n	8002cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe fdce 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2224      	movs	r2, #36	@ 0x24
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f003 f922 	bl	8005cfc <HAL_RCC_GetPCLK1Freq>
 8002ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4a81      	ldr	r2, [pc, #516]	@ (8002cc4 <HAL_I2C_Init+0x274>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d807      	bhi.n	8002ad4 <HAL_I2C_Init+0x84>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a80      	ldr	r2, [pc, #512]	@ (8002cc8 <HAL_I2C_Init+0x278>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e006      	b.n	8002ae2 <HAL_I2C_Init+0x92>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8002ccc <HAL_I2C_Init+0x27c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bf94      	ite	ls
 8002adc:	2301      	movls	r3, #1
 8002ade:	2300      	movhi	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0e7      	b.n	8002cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a78      	ldr	r2, [pc, #480]	@ (8002cd0 <HAL_I2C_Init+0x280>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0c9b      	lsrs	r3, r3, #18
 8002af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a6a      	ldr	r2, [pc, #424]	@ (8002cc4 <HAL_I2C_Init+0x274>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d802      	bhi.n	8002b24 <HAL_I2C_Init+0xd4>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	e009      	b.n	8002b38 <HAL_I2C_Init+0xe8>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4a69      	ldr	r2, [pc, #420]	@ (8002cd4 <HAL_I2C_Init+0x284>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	3301      	adds	r3, #1
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	495c      	ldr	r1, [pc, #368]	@ (8002cc4 <HAL_I2C_Init+0x274>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d819      	bhi.n	8002b8c <HAL_I2C_Init+0x13c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1e59      	subs	r1, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b66:	1c59      	adds	r1, r3, #1
 8002b68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_I2C_Init+0x138>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e59      	subs	r1, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b86:	e051      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e04f      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <HAL_I2C_Init+0x168>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e012      	b.n	8002bde <HAL_I2C_Init+0x18e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	0099      	lsls	r1, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Init+0x196>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e022      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10e      	bne.n	8002c0c <HAL_I2C_Init+0x1bc>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1e58      	subs	r0, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	440b      	add	r3, r1
 8002bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c0a:	e00f      	b.n	8002c2c <HAL_I2C_Init+0x1dc>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	0099      	lsls	r1, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	6809      	ldr	r1, [r1, #0]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6911      	ldr	r1, [r2, #16]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68d2      	ldr	r2, [r2, #12]
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	000186a0 	.word	0x000186a0
 8002cc8:	001e847f 	.word	0x001e847f
 8002ccc:	003d08ff 	.word	0x003d08ff
 8002cd0:	431bde83 	.word	0x431bde83
 8002cd4:	10624dd3 	.word	0x10624dd3

08002cd8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d103      	bne.n	8002cf6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	460b      	mov	r3, r1
 8002d12:	817b      	strh	r3, [r7, #10]
 8002d14:	4613      	mov	r3, r2
 8002d16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7fe ffc2 	bl	8001ca0 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	f040 80e0 	bne.w	8002eec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2319      	movs	r3, #25
 8002d32:	2201      	movs	r2, #1
 8002d34:	4970      	ldr	r1, [pc, #448]	@ (8002ef8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f002 f94a 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0d3      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2C_Master_Transmit+0x50>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e0cc      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ea>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d007      	beq.n	8002d7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2221      	movs	r2, #33	@ 0x21
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2210      	movs	r2, #16
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a50      	ldr	r2, [pc, #320]	@ (8002efc <HAL_I2C_Master_Transmit+0x1f8>)
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dbc:	8979      	ldrh	r1, [r7, #10]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6a3a      	ldr	r2, [r7, #32]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f001 febe 	bl	8004b44 <I2C_MasterRequestWrite>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e08d      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002de8:	e066      	b.n	8002eb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	6a39      	ldr	r1, [r7, #32]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f002 fa08 	bl	8005204 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d107      	bne.n	8002e12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e06b      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d11b      	bne.n	8002e8c <HAL_I2C_Master_Transmit+0x188>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d017      	beq.n	8002e8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	6a39      	ldr	r1, [r7, #32]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f002 f9ff 	bl	8005294 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d107      	bne.n	8002eb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e01a      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d194      	bne.n	8002dea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	00100002 	.word	0x00100002
 8002efc:	ffff0000 	.word	0xffff0000

08002f00 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	817b      	strh	r3, [r7, #10]
 8002f10:	4613      	mov	r3, r2
 8002f12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	f040 8109 	bne.w	8003138 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f26:	4b87      	ldr	r3, [pc, #540]	@ (8003144 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	08db      	lsrs	r3, r3, #3
 8002f2c:	4a86      	ldr	r2, [pc, #536]	@ (8003148 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0a1a      	lsrs	r2, r3, #8
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009a      	lsls	r2, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d112      	bne.n	8002f72 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e0e3      	b.n	800313a <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d0df      	beq.n	8002f40 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Master_Transmit_DMA+0x8e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0d5      	b.n	800313a <HAL_I2C_Master_Transmit_DMA+0x23a>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d007      	beq.n	8002fb4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2221      	movs	r2, #33	@ 0x21
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	893a      	ldrh	r2, [r7, #8]
 8002fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002ff6:	897a      	ldrh	r2, [r7, #10]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d07b      	beq.n	80030fc <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02a      	beq.n	8003062 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003010:	4a4f      	ldr	r2, [pc, #316]	@ (8003150 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003012:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	4a4e      	ldr	r2, [pc, #312]	@ (8003154 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800301a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003020:	2200      	movs	r2, #0
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003030:	2200      	movs	r2, #0
 8003032:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003038:	2200      	movs	r2, #0
 800303a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	4619      	mov	r1, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3310      	adds	r3, #16
 800304c:	461a      	mov	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	f7fe fff1 	bl	8002038 <HAL_DMA_Start_IT>
 8003056:	4603      	mov	r3, r0
 8003058:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d139      	bne.n	80030d4 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8003060:	e013      	b.n	800308a <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e057      	b.n	800313a <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80030a0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030b0:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030c0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e02f      	b.n	8003134 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f043 0210 	orr.w	r2, r3, #16
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e01e      	b.n	800313a <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800310a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800311a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003132:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000018 	.word	0x20000018
 8003148:	14f8b589 	.word	0x14f8b589
 800314c:	ffff0000 	.word	0xffff0000
 8003150:	08004c49 	.word	0x08004c49
 8003154:	08004e07 	.word	0x08004e07

08003158 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	460b      	mov	r3, r1
 8003166:	817b      	strh	r3, [r7, #10]
 8003168:	4613      	mov	r3, r2
 800316a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b20      	cmp	r3, #32
 800317a:	f040 8109 	bne.w	8003390 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800317e:	4b87      	ldr	r3, [pc, #540]	@ (800339c <HAL_I2C_Master_Receive_DMA+0x244>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	08db      	lsrs	r3, r3, #3
 8003184:	4a86      	ldr	r2, [pc, #536]	@ (80033a0 <HAL_I2C_Master_Receive_DMA+0x248>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0a1a      	lsrs	r2, r3, #8
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	3b01      	subs	r3, #1
 800319c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d112      	bne.n	80031ca <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0e3      	b.n	8003392 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d0df      	beq.n	8003198 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_I2C_Master_Receive_DMA+0x8e>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e0d5      	b.n	8003392 <HAL_I2C_Master_Receive_DMA+0x23a>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d007      	beq.n	800320c <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800321a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2222      	movs	r2, #34	@ 0x22
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2210      	movs	r2, #16
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	893a      	ldrh	r2, [r7, #8]
 800323c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a56      	ldr	r2, [pc, #344]	@ (80033a4 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800324c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800324e:	897a      	ldrh	r2, [r7, #10]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d07b      	beq.n	8003354 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d02a      	beq.n	80032ba <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_I2C_Master_Receive_DMA+0x250>)
 800326a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	4a4e      	ldr	r2, [pc, #312]	@ (80033ac <HAL_I2C_Master_Receive_DMA+0x254>)
 8003272:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	2200      	movs	r2, #0
 800328a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	2200      	movs	r2, #0
 8003292:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3310      	adds	r3, #16
 800329e:	4619      	mov	r1, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	461a      	mov	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	f7fe fec5 	bl	8002038 <HAL_DMA_Start_IT>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d139      	bne.n	800332c <HAL_I2C_Master_Receive_DMA+0x1d4>
 80032b8:	e013      	b.n	80032e2 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e057      	b.n	8003392 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032f0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003300:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003318:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	e02f      	b.n	800338c <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	f043 0210 	orr.w	r2, r3, #16
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01e      	b.n	8003392 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800336a:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800337a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000018 	.word	0x20000018
 80033a0:	14f8b589 	.word	0x14f8b589
 80033a4:	ffff0000 	.word	0xffff0000
 80033a8:	08004c49 	.word	0x08004c49
 80033ac:	08004e07 	.word	0x08004e07

080033b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d003      	beq.n	80033e8 <HAL_I2C_EV_IRQHandler+0x38>
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	f040 80b1 	bne.w	800354a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <HAL_I2C_EV_IRQHandler+0x6e>
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003408:	d003      	beq.n	8003412 <HAL_I2C_EV_IRQHandler+0x62>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003410:	d101      	bne.n	8003416 <HAL_I2C_EV_IRQHandler+0x66>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_I2C_EV_IRQHandler+0x68>
 8003416:	2300      	movs	r3, #0
 8003418:	2b01      	cmp	r3, #1
 800341a:	f000 8114 	beq.w	8003646 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x90>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 ffd7 	bl	80053e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fd66 	bl	8003f0a <I2C_Master_SB>
 800343e:	e083      	b.n	8003548 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0xac>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fdde 	bl	8004016 <I2C_Master_ADD10>
 800345a:	e075      	b.n	8003548 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0xc8>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fdfa 	bl	800406a <I2C_Master_ADDR>
 8003476:	e067      	b.n	8003548 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d036      	beq.n	80034f0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003490:	f000 80db 	beq.w	800364a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x10a>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x10a>
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9c2 	bl	800383c <I2C_MasterTransmit_TXE>
 80034b8:	e046      	b.n	8003548 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80c2 	beq.w	800364a <HAL_I2C_EV_IRQHandler+0x29a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80bc 	beq.w	800364a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034d2:	7bbb      	ldrb	r3, [r7, #14]
 80034d4:	2b21      	cmp	r3, #33	@ 0x21
 80034d6:	d103      	bne.n	80034e0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fa4b 	bl	8003974 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034de:	e0b4      	b.n	800364a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	2b40      	cmp	r3, #64	@ 0x40
 80034e4:	f040 80b1 	bne.w	800364a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fab9 	bl	8003a60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	e0ac      	b.n	800364a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034fe:	f000 80a4 	beq.w	800364a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x178>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x178>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fb35 	bl	8003b90 <I2C_MasterReceive_RXNE>
 8003526:	e00f      	b.n	8003548 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 808b 	beq.w	800364a <HAL_I2C_EV_IRQHandler+0x29a>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8085 	beq.w	800364a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fbed 	bl	8003d20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003546:	e080      	b.n	800364a <HAL_I2C_EV_IRQHandler+0x29a>
 8003548:	e07f      	b.n	800364a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	e007      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d011      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x1ea>
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 ffb8 	bl	8004508 <I2C_Slave_ADDR>
 8003598:	e05a      	b.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x206>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fff2 	bl	8004598 <I2C_Slave_STOPF>
 80035b4:	e04c      	b.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035b6:	7bbb      	ldrb	r3, [r7, #14]
 80035b8:	2b21      	cmp	r3, #33	@ 0x21
 80035ba:	d002      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x212>
 80035bc:	7bbb      	ldrb	r3, [r7, #14]
 80035be:	2b29      	cmp	r3, #41	@ 0x29
 80035c0:	d120      	bne.n	8003604 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <HAL_I2C_EV_IRQHandler+0x238>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_I2C_EV_IRQHandler+0x238>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fed3 	bl	800438c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035e6:	e032      	b.n	800364e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02d      	beq.n	800364e <HAL_I2C_EV_IRQHandler+0x29e>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d028      	beq.n	800364e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 ff02 	bl	8004406 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003602:	e024      	b.n	800364e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0x27a>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0x27a>
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ff10 	bl	8004448 <I2C_SlaveReceive_RXNE>
 8003628:	e012      	b.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 ff40 	bl	80044c4 <I2C_SlaveReceive_BTF>
 8003644:	e004      	b.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800364e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	@ 0x28
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003678:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00d      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x4a>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800369e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_I2C_ER_IRQHandler+0x70>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	f043 0302 	orr.w	r3, r3, #2
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80036c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d03e      	beq.n	800374e <HAL_I2C_ER_IRQHandler+0xf8>
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d039      	beq.n	800374e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80036da:	7efb      	ldrb	r3, [r7, #27]
 80036dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80036f4:	7ebb      	ldrb	r3, [r7, #26]
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d112      	bne.n	8003720 <HAL_I2C_ER_IRQHandler+0xca>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10f      	bne.n	8003720 <HAL_I2C_ER_IRQHandler+0xca>
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	2b21      	cmp	r3, #33	@ 0x21
 8003704:	d008      	beq.n	8003718 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b29      	cmp	r3, #41	@ 0x29
 800370a:	d005      	beq.n	8003718 <HAL_I2C_ER_IRQHandler+0xc2>
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b28      	cmp	r3, #40	@ 0x28
 8003710:	d106      	bne.n	8003720 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b21      	cmp	r3, #33	@ 0x21
 8003716:	d103      	bne.n	8003720 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f001 f86d 	bl	80047f8 <I2C_Slave_AF>
 800371e:	e016      	b.n	800374e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003728:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003732:	7efb      	ldrb	r3, [r7, #27]
 8003734:	2b10      	cmp	r3, #16
 8003736:	d002      	beq.n	800373e <HAL_I2C_ER_IRQHandler+0xe8>
 8003738:	7efb      	ldrb	r3, [r7, #27]
 800373a:	2b40      	cmp	r3, #64	@ 0x40
 800373c:	d107      	bne.n	800374e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_I2C_ER_IRQHandler+0x11e>
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	f043 0308 	orr.w	r3, r3, #8
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003772:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 f8aa 	bl	80048e0 <I2C_ITError>
  }
}
 800378c:	bf00      	nop
 800378e:	3728      	adds	r7, #40	@ 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	70fb      	strb	r3, [r7, #3]
 80037c8:	4613      	mov	r3, r2
 80037ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003852:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003858:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d150      	bne.n	8003904 <I2C_MasterTransmit_TXE+0xc8>
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b21      	cmp	r3, #33	@ 0x21
 8003866:	d14d      	bne.n	8003904 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b08      	cmp	r3, #8
 800386c:	d01d      	beq.n	80038aa <I2C_MasterTransmit_TXE+0x6e>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b20      	cmp	r3, #32
 8003872:	d01a      	beq.n	80038aa <I2C_MasterTransmit_TXE+0x6e>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800387a:	d016      	beq.n	80038aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800388a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2211      	movs	r2, #17
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fbca 	bl	800103c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038a8:	e060      	b.n	800396c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b40      	cmp	r3, #64	@ 0x40
 80038e2:	d107      	bne.n	80038f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff7d 	bl	80037ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038f2:	e03b      	b.n	800396c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fd fb9d 	bl	800103c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003902:	e033      	b.n	800396c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b21      	cmp	r3, #33	@ 0x21
 8003908:	d005      	beq.n	8003916 <I2C_MasterTransmit_TXE+0xda>
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	d12d      	bne.n	800396c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b22      	cmp	r3, #34	@ 0x22
 8003914:	d12a      	bne.n	800396c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d108      	bne.n	8003932 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003930:	e01c      	b.n	800396c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d103      	bne.n	8003946 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f88e 	bl	8003a60 <I2C_MemoryTransmit_TXE_BTF>
}
 8003944:	e012      	b.n	800396c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800396a:	e7ff      	b.n	800396c <I2C_MasterTransmit_TXE+0x130>
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b21      	cmp	r3, #33	@ 0x21
 800398c:	d164      	bne.n	8003a58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d012      	beq.n	80039be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80039bc:	e04c      	b.n	8003a58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d01d      	beq.n	8003a00 <I2C_MasterTransmit_BTF+0x8c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d01a      	beq.n	8003a00 <I2C_MasterTransmit_BTF+0x8c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039d0:	d016      	beq.n	8003a00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2211      	movs	r2, #17
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd fb1f 	bl	800103c <HAL_I2C_MasterTxCpltCallback>
}
 80039fe:	e02b      	b.n	8003a58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	d107      	bne.n	8003a4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fed2 	bl	80037ec <HAL_I2C_MemTxCpltCallback>
}
 8003a48:	e006      	b.n	8003a58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd faf2 	bl	800103c <HAL_I2C_MasterTxCpltCallback>
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11d      	bne.n	8003ab4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10b      	bne.n	8003a98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a90:	1c9a      	adds	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003a96:	e077      	b.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	121b      	asrs	r3, r3, #8
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ab2:	e069      	b.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10b      	bne.n	8003ad4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ad2:	e059      	b.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d152      	bne.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b22      	cmp	r3, #34	@ 0x22
 8003ae0:	d10d      	bne.n	8003afe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003afc:	e044      	b.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b21      	cmp	r3, #33	@ 0x21
 8003b0c:	d112      	bne.n	8003b34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b32:	e029      	b.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d124      	bne.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b21      	cmp	r3, #33	@ 0x21
 8003b42:	d121      	bne.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b52:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fe36 	bl	80037ec <HAL_I2C_MemTxCpltCallback>
}
 8003b80:	e002      	b.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff f8a8 	bl	8002cd8 <I2C_Flush_DR>
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b22      	cmp	r3, #34	@ 0x22
 8003ba2:	f040 80b9 	bne.w	8003d18 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d921      	bls.n	8003bfe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	f040 8096 	bne.w	8003d18 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003bfc:	e08c      	b.n	8003d18 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d07f      	beq.n	8003d06 <I2C_MasterReceive_RXNE+0x176>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d002      	beq.n	8003c12 <I2C_MasterReceive_RXNE+0x82>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d179      	bne.n	8003d06 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f001 fb86 	bl	8005324 <I2C_WaitOnSTOPRequestThroughIT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d14c      	bne.n	8003cb8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d10a      	bne.n	8003c8e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fdba 	bl	8003800 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c8c:	e044      	b.n	8003d18 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d002      	beq.n	8003ca2 <I2C_MasterReceive_RXNE+0x112>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d103      	bne.n	8003caa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca8:	e002      	b.n	8003cb0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2212      	movs	r2, #18
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fd f9dd 	bl	8001070 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cb6:	e02f      	b.n	8003d18 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fd88 	bl	8003814 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d04:	e008      	b.n	8003d18 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d14:	605a      	str	r2, [r3, #4]
}
 8003d16:	e7ff      	b.n	8003d18 <I2C_MasterReceive_RXNE+0x188>
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11b      	bne.n	8003d70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d6e:	e0c8      	b.n	8003f02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d129      	bne.n	8003dce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d00a      	beq.n	8003da6 <I2C_MasterReceive_BTF+0x86>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d007      	beq.n	8003da6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dcc:	e099      	b.n	8003f02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f040 8081 	bne.w	8003edc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d002      	beq.n	8003de6 <I2C_MasterReceive_BTF+0xc6>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d108      	bne.n	8003df8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e019      	b.n	8003e2c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d002      	beq.n	8003e04 <I2C_MasterReceive_BTF+0xe4>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d108      	bne.n	8003e16 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e00a      	b.n	8003e2c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d007      	beq.n	8003e2c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b40      	cmp	r3, #64	@ 0x40
 8003e9a:	d10a      	bne.n	8003eb2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fca8 	bl	8003800 <HAL_I2C_MemRxCpltCallback>
}
 8003eb0:	e027      	b.n	8003f02 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d002      	beq.n	8003ec6 <I2C_MasterReceive_BTF+0x1a6>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d103      	bne.n	8003ece <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ecc:	e002      	b.n	8003ed4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2212      	movs	r2, #18
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fd f8cb 	bl	8001070 <HAL_I2C_MasterRxCpltCallback>
}
 8003eda:	e012      	b.n	8003f02 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b40      	cmp	r3, #64	@ 0x40
 8003f1c:	d117      	bne.n	8003f4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f38:	e067      	b.n	800400a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
}
 8003f4c:	e05d      	b.n	800400a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f56:	d133      	bne.n	8003fc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b21      	cmp	r3, #33	@ 0x21
 8003f62:	d109      	bne.n	8003f78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f74:	611a      	str	r2, [r3, #16]
 8003f76:	e008      	b.n	8003f8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <I2C_Master_SB+0x92>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d032      	beq.n	800400a <I2C_Master_SB+0x100>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02d      	beq.n	800400a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fbc:	605a      	str	r2, [r3, #4]
}
 8003fbe:	e024      	b.n	800400a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10e      	bne.n	8003fe6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	11db      	asrs	r3, r3, #7
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f003 0306 	and.w	r3, r3, #6
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f063 030f 	orn	r3, r3, #15
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]
}
 8003fe4:	e011      	b.n	800400a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10d      	bne.n	800400a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	11db      	asrs	r3, r3, #7
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0306 	and.w	r3, r3, #6
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f063 030e 	orn	r3, r3, #14
 8004002:	b2da      	uxtb	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	b2da      	uxtb	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <I2C_Master_ADD10+0x26>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d108      	bne.n	800404e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <I2C_Master_ADD10+0x48>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800405c:	605a      	str	r2, [r3, #4]
  }
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800406a:	b480      	push	{r7}
 800406c:	b091      	sub	sp, #68	@ 0x44
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004078:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b22      	cmp	r3, #34	@ 0x22
 8004092:	f040 8169 	bne.w	8004368 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10f      	bne.n	80040be <I2C_Master_ADDR+0x54>
 800409e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040a2:	2b40      	cmp	r3, #64	@ 0x40
 80040a4:	d10b      	bne.n	80040be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	2300      	movs	r3, #0
 80040a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	e160      	b.n	8004380 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11d      	bne.n	8004102 <I2C_Master_ADDR+0x98>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040ce:	d118      	bne.n	8004102 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004100:	e13e      	b.n	8004380 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d113      	bne.n	8004134 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410c:	2300      	movs	r3, #0
 800410e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e115      	b.n	8004360 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	f040 808a 	bne.w	8004254 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004146:	d137      	bne.n	80041b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004156:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004166:	d113      	bne.n	8004190 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004176:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	e0e7      	b.n	8004360 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004190:	2300      	movs	r3, #0
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e0d3      	b.n	8004360 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d02e      	beq.n	800421c <I2C_Master_ADDR+0x1b2>
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d02b      	beq.n	800421c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c6:	2b12      	cmp	r3, #18
 80041c8:	d102      	bne.n	80041d0 <I2C_Master_ADDR+0x166>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d125      	bne.n	800421c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d00e      	beq.n	80041f4 <I2C_Master_ADDR+0x18a>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d00b      	beq.n	80041f4 <I2C_Master_ADDR+0x18a>
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d008      	beq.n	80041f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e007      	b.n	8004204 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004202:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	e0a1      	b.n	8004360 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e085      	b.n	8004360 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d14d      	bne.n	80042fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	2b04      	cmp	r3, #4
 8004262:	d016      	beq.n	8004292 <I2C_Master_ADDR+0x228>
 8004264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004266:	2b02      	cmp	r3, #2
 8004268:	d013      	beq.n	8004292 <I2C_Master_ADDR+0x228>
 800426a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426c:	2b10      	cmp	r3, #16
 800426e:	d010      	beq.n	8004292 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800427e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e007      	b.n	80042a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b0:	d117      	bne.n	80042e2 <I2C_Master_ADDR+0x278>
 80042b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042b8:	d00b      	beq.n	80042d2 <I2C_Master_ADDR+0x268>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d008      	beq.n	80042d2 <I2C_Master_ADDR+0x268>
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d005      	beq.n	80042d2 <I2C_Master_ADDR+0x268>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d002      	beq.n	80042d2 <I2C_Master_ADDR+0x268>
 80042cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d107      	bne.n	80042e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	e032      	b.n	8004360 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004308:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004314:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004318:	d117      	bne.n	800434a <I2C_Master_ADDR+0x2e0>
 800431a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004320:	d00b      	beq.n	800433a <I2C_Master_ADDR+0x2d0>
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	2b01      	cmp	r3, #1
 8004326:	d008      	beq.n	800433a <I2C_Master_ADDR+0x2d0>
 8004328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432a:	2b08      	cmp	r3, #8
 800432c:	d005      	beq.n	800433a <I2C_Master_ADDR+0x2d0>
 800432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004330:	2b10      	cmp	r3, #16
 8004332:	d002      	beq.n	800433a <I2C_Master_ADDR+0x2d0>
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	2b20      	cmp	r3, #32
 8004338:	d107      	bne.n	800434a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004348:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004366:	e00b      	b.n	8004380 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
}
 800437e:	e7ff      	b.n	8004380 <I2C_Master_ADDR+0x316>
 8004380:	bf00      	nop
 8004382:	3744      	adds	r7, #68	@ 0x44
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d02b      	beq.n	80043fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d114      	bne.n	80043fe <I2C_SlaveTransmit_TXE+0x72>
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b29      	cmp	r3, #41	@ 0x29
 80043d8:	d111      	bne.n	80043fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2221      	movs	r2, #33	@ 0x21
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2228      	movs	r2, #40	@ 0x28
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff f9cb 	bl	8003794 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d011      	beq.n	800443c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004456:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d02c      	beq.n	80044bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d114      	bne.n	80044bc <I2C_SlaveReceive_RXNE+0x74>
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	2b2a      	cmp	r3, #42	@ 0x2a
 8004496:	d111      	bne.n	80044bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2222      	movs	r2, #34	@ 0x22
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2228      	movs	r2, #40	@ 0x28
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff f976 	bl	80037a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d012      	beq.n	80044fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004522:	2b28      	cmp	r3, #40	@ 0x28
 8004524:	d125      	bne.n	8004572 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004534:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	81bb      	strh	r3, [r7, #12]
 8004554:	e002      	b.n	800455c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004564:	89ba      	ldrh	r2, [r7, #12]
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff f926 	bl	80037bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004570:	e00e      	b.n	8004590 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f4:	d172      	bne.n	80046dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b22      	cmp	r3, #34	@ 0x22
 80045fa:	d002      	beq.n	8004602 <I2C_Slave_STOPF+0x6a>
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004600:	d135      	bne.n	800466e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004634:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd ff70 	bl	8002520 <HAL_DMA_GetState>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d049      	beq.n	80046da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	4a69      	ldr	r2, [pc, #420]	@ (80047f0 <I2C_Slave_STOPF+0x258>)
 800464c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd fdb8 	bl	80021c8 <HAL_DMA_Abort_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d03d      	beq.n	80046da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004668:	4610      	mov	r0, r2
 800466a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800466c:	e035      	b.n	80046da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	f043 0204 	orr.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd ff3a 	bl	8002520 <HAL_DMA_GetState>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d014      	beq.n	80046dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b6:	4a4e      	ldr	r2, [pc, #312]	@ (80047f0 <I2C_Slave_STOPF+0x258>)
 80046b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fd fd82 	bl	80021c8 <HAL_DMA_Abort_IT>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
 80046d8:	e000      	b.n	80046dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03e      	beq.n	8004764 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d112      	bne.n	800471a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d112      	bne.n	800474e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8b7 	bl	80048e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004772:	e039      	b.n	80047e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b2a      	cmp	r3, #42	@ 0x2a
 8004778:	d109      	bne.n	800478e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2228      	movs	r2, #40	@ 0x28
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff f80d 	bl	80037a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b28      	cmp	r3, #40	@ 0x28
 8004798:	d111      	bne.n	80047be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <I2C_Slave_STOPF+0x25c>)
 800479e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff f80e 	bl	80037d8 <HAL_I2C_ListenCpltCallback>
}
 80047bc:	e014      	b.n	80047e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	2b22      	cmp	r3, #34	@ 0x22
 80047c4:	d002      	beq.n	80047cc <I2C_Slave_STOPF+0x234>
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b22      	cmp	r3, #34	@ 0x22
 80047ca:	d10d      	bne.n	80047e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe ffe0 	bl	80037a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	08004e81 	.word	0x08004e81
 80047f4:	ffff0000 	.word	0xffff0000

080047f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004806:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d002      	beq.n	800481a <I2C_Slave_AF+0x22>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b20      	cmp	r3, #32
 8004818:	d129      	bne.n	800486e <I2C_Slave_AF+0x76>
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2b28      	cmp	r3, #40	@ 0x28
 800481e:	d126      	bne.n	800486e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a2e      	ldr	r2, [pc, #184]	@ (80048dc <I2C_Slave_AF+0xe4>)
 8004824:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004834:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800483e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fe ffb6 	bl	80037d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800486c:	e031      	b.n	80048d2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b21      	cmp	r3, #33	@ 0x21
 8004872:	d129      	bne.n	80048c8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a19      	ldr	r2, [pc, #100]	@ (80048dc <I2C_Slave_AF+0xe4>)
 8004878:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2221      	movs	r2, #33	@ 0x21
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800489e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fe fa0c 	bl	8002cd8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fe ff67 	bl	8003794 <HAL_I2C_SlaveTxCpltCallback>
}
 80048c6:	e004      	b.n	80048d2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048d0:	615a      	str	r2, [r3, #20]
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	ffff0000 	.word	0xffff0000

080048e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d002      	beq.n	8004904 <I2C_ITError+0x24>
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	2b40      	cmp	r3, #64	@ 0x40
 8004902:	d10a      	bne.n	800491a <I2C_ITError+0x3a>
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b22      	cmp	r3, #34	@ 0x22
 8004908:	d107      	bne.n	800491a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004918:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004920:	2b28      	cmp	r3, #40	@ 0x28
 8004922:	d107      	bne.n	8004934 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2228      	movs	r2, #40	@ 0x28
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004932:	e015      	b.n	8004960 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004942:	d00a      	beq.n	800495a <I2C_ITError+0x7a>
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b60      	cmp	r3, #96	@ 0x60
 8004948:	d007      	beq.n	800495a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800496a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800496e:	d162      	bne.n	8004a36 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800497e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d020      	beq.n	80049d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004992:	4a6a      	ldr	r2, [pc, #424]	@ (8004b3c <I2C_ITError+0x25c>)
 8004994:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd fc14 	bl	80021c8 <HAL_DMA_Abort_IT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8089 	beq.w	8004aba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049ca:	4610      	mov	r0, r2
 80049cc:	4798      	blx	r3
 80049ce:	e074      	b.n	8004aba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	4a59      	ldr	r2, [pc, #356]	@ (8004b3c <I2C_ITError+0x25c>)
 80049d6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fd fbf3 	bl	80021c8 <HAL_DMA_Abort_IT>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d068      	beq.n	8004aba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b40      	cmp	r3, #64	@ 0x40
 80049f4:	d10b      	bne.n	8004a0e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a30:	4610      	mov	r0, r2
 8004a32:	4798      	blx	r3
 8004a34:	e041      	b.n	8004aba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b60      	cmp	r3, #96	@ 0x60
 8004a40:	d125      	bne.n	8004a8e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5a:	2b40      	cmp	r3, #64	@ 0x40
 8004a5c:	d10b      	bne.n	8004a76 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fe fece 	bl	8003828 <HAL_I2C_AbortCpltCallback>
 8004a8c:	e015      	b.n	8004aba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a98:	2b40      	cmp	r3, #64	@ 0x40
 8004a9a:	d10b      	bne.n	8004ab4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fe fead 	bl	8003814 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10e      	bne.n	8004ae8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004af6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d113      	bne.n	8004b34 <I2C_ITError+0x254>
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b28      	cmp	r3, #40	@ 0x28
 8004b10:	d110      	bne.n	8004b34 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a0a      	ldr	r2, [pc, #40]	@ (8004b40 <I2C_ITError+0x260>)
 8004b16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fe fe52 	bl	80037d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	08004e81 	.word	0x08004e81
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d006      	beq.n	8004b6e <I2C_MasterRequestWrite+0x2a>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d003      	beq.n	8004b6e <I2C_MasterRequestWrite+0x2a>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b6c:	d108      	bne.n	8004b80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e00b      	b.n	8004b98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	2b12      	cmp	r3, #18
 8004b86:	d107      	bne.n	8004b98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fa13 	bl	8004fd0 <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bbe:	d103      	bne.n	8004bc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e035      	b.n	8004c38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd4:	d108      	bne.n	8004be8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	e01b      	b.n	8004c20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	11db      	asrs	r3, r3, #7
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0306 	and.w	r3, r3, #6
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f063 030f 	orn	r3, r3, #15
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	490e      	ldr	r1, [pc, #56]	@ (8004c40 <I2C_MasterRequestWrite+0xfc>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fa5c 	bl	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e010      	b.n	8004c38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4907      	ldr	r1, [pc, #28]	@ (8004c44 <I2C_MasterRequestWrite+0x100>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fa4c 	bl	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	00010008 	.word	0x00010008
 8004c44:	00010002 	.word	0x00010002

08004c48 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c64:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	2200      	movs	r2, #0
 8004c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004ca2:	2b21      	cmp	r3, #33	@ 0x21
 8004ca4:	d007      	beq.n	8004cb6 <I2C_DMAXferCplt+0x6e>
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004cac:	2b22      	cmp	r3, #34	@ 0x22
 8004cae:	d131      	bne.n	8004d14 <I2C_DMAXferCplt+0xcc>
 8004cb0:	7cbb      	ldrb	r3, [r7, #18]
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d12e      	bne.n	8004d14 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	2b29      	cmp	r3, #41	@ 0x29
 8004cd0:	d10a      	bne.n	8004ce8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2221      	movs	r2, #33	@ 0x21
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2228      	movs	r2, #40	@ 0x28
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ce0:	6978      	ldr	r0, [r7, #20]
 8004ce2:	f7fe fd57 	bl	8003794 <HAL_I2C_SlaveTxCpltCallback>
 8004ce6:	e00c      	b.n	8004d02 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
 8004cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cec:	d109      	bne.n	8004d02 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2222      	movs	r2, #34	@ 0x22
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2228      	movs	r2, #40	@ 0x28
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cfc:	6978      	ldr	r0, [r7, #20]
 8004cfe:	f7fe fd53 	bl	80037a8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004d10:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d12:	e074      	b.n	8004dfe <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d06e      	beq.n	8004dfe <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d38:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d48:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d50:	d009      	beq.n	8004d66 <I2C_DMAXferCplt+0x11e>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d006      	beq.n	8004d66 <I2C_DMAXferCplt+0x11e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004d5e:	d002      	beq.n	8004d66 <I2C_DMAXferCplt+0x11e>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d107      	bne.n	8004d76 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d74:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d84:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d94:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004da4:	6978      	ldr	r0, [r7, #20]
 8004da6:	f7fe fd35 	bl	8003814 <HAL_I2C_ErrorCallback>
}
 8004daa:	e028      	b.n	8004dfe <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b40      	cmp	r3, #64	@ 0x40
 8004dbe:	d10a      	bne.n	8004dd6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004dce:	6978      	ldr	r0, [r7, #20]
 8004dd0:	f7fe fd16 	bl	8003800 <HAL_I2C_MemRxCpltCallback>
}
 8004dd4:	e013      	b.n	8004dfe <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d002      	beq.n	8004dea <I2C_DMAXferCplt+0x1a2>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d103      	bne.n	8004df2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
 8004df0:	e002      	b.n	8004df8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2212      	movs	r2, #18
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004df8:	6978      	ldr	r0, [r7, #20]
 8004dfa:	f7fc f939 	bl	8001070 <HAL_I2C_MasterRxCpltCallback>
}
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e20:	2200      	movs	r2, #0
 8004e22:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	2200      	movs	r2, #0
 8004e32:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fd fb81 	bl	800253c <HAL_DMA_GetError>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d01b      	beq.n	8004e78 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	f043 0210 	orr.w	r2, r3, #16
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7fe fcce 	bl	8003814 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e98:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc8 <I2C_DMAAbort+0x148>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	08db      	lsrs	r3, r3, #3
 8004ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8004fcc <I2C_DMAAbort+0x14c>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	0a1a      	lsrs	r2, r3, #8
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	00da      	lsls	r2, r3, #3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	f043 0220 	orr.w	r2, r3, #32
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004ec6:	e00a      	b.n	8004ede <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004edc:	d0ea      	beq.n	8004eb4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eea:	2200      	movs	r2, #0
 8004eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	2200      	movs	r2, #0
 8004efc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f20:	2200      	movs	r2, #0
 8004f22:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	2200      	movs	r2, #0
 8004f32:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b60      	cmp	r3, #96	@ 0x60
 8004f4e:	d10e      	bne.n	8004f6e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f66:	6978      	ldr	r0, [r7, #20]
 8004f68:	f7fe fc5e 	bl	8003828 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f6c:	e027      	b.n	8004fbe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f74:	2b28      	cmp	r3, #40	@ 0x28
 8004f76:	d117      	bne.n	8004fa8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2228      	movs	r2, #40	@ 0x28
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004fa6:	e007      	b.n	8004fb8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004fb8:	6978      	ldr	r0, [r7, #20]
 8004fba:	f7fe fc2b 	bl	8003814 <HAL_I2C_ErrorCallback>
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000018 	.word	0x20000018
 8004fcc:	14f8b589 	.word	0x14f8b589

08004fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe0:	e048      	b.n	8005074 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d044      	beq.n	8005074 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fc fe59 	bl	8001ca0 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d139      	bne.n	8005074 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d10d      	bne.n	8005026 <I2C_WaitOnFlagUntilTimeout+0x56>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	43da      	mvns	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	e00c      	b.n	8005040 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	43da      	mvns	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4013      	ands	r3, r2
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	429a      	cmp	r2, r3
 8005044:	d116      	bne.n	8005074 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e023      	b.n	80050bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d10d      	bne.n	800509a <I2C_WaitOnFlagUntilTimeout+0xca>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	43da      	mvns	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	e00c      	b.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	43da      	mvns	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4013      	ands	r3, r2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf0c      	ite	eq
 80050ac:	2301      	moveq	r3, #1
 80050ae:	2300      	movne	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d093      	beq.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d2:	e071      	b.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e2:	d123      	bne.n	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	f043 0204 	orr.w	r2, r3, #4
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e067      	b.n	80051fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d041      	beq.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005134:	f7fc fdb4 	bl	8001ca0 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d136      	bne.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10c      	bne.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	43da      	mvns	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e00b      	b.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	43da      	mvns	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4013      	ands	r3, r2
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e021      	b.n	80051fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10c      	bne.n	80051dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	43da      	mvns	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf14      	ite	ne
 80051d4:	2301      	movne	r3, #1
 80051d6:	2300      	moveq	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e00b      	b.n	80051f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf14      	ite	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	2300      	moveq	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f47f af6d 	bne.w	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005210:	e034      	b.n	800527c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f8b8 	bl	8005388 <I2C_IsAcknowledgeFailed>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e034      	b.n	800528c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d028      	beq.n	800527c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7fc fd39 	bl	8001ca0 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11d      	bne.n	800527c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524a:	2b80      	cmp	r3, #128	@ 0x80
 800524c:	d016      	beq.n	800527c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e007      	b.n	800528c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005286:	2b80      	cmp	r3, #128	@ 0x80
 8005288:	d1c3      	bne.n	8005212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052a0:	e034      	b.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f870 	bl	8005388 <I2C_IsAcknowledgeFailed>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e034      	b.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d028      	beq.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fc fcf1 	bl	8001ca0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11d      	bne.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d016      	beq.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e007      	b.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b04      	cmp	r3, #4
 8005318:	d1c3      	bne.n	80052a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005330:	4b13      	ldr	r3, [pc, #76]	@ (8005380 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	08db      	lsrs	r3, r3, #3
 8005336:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	0a1a      	lsrs	r2, r3, #8
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3b01      	subs	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d107      	bne.n	8005362 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e008      	b.n	8005374 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800536c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005370:	d0e9      	beq.n	8005346 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000018 	.word	0x20000018
 8005384:	14f8b589 	.word	0x14f8b589

08005388 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539e:	d11b      	bne.n	80053d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	f043 0204 	orr.w	r2, r3, #4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80053f6:	d103      	bne.n	8005400 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053fe:	e007      	b.n	8005410 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005408:	d102      	bne.n	8005410 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2208      	movs	r2, #8
 800540e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e267      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d075      	beq.n	8005526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800543a:	4b88      	ldr	r3, [pc, #544]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b04      	cmp	r3, #4
 8005444:	d00c      	beq.n	8005460 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005446:	4b85      	ldr	r3, [pc, #532]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800544e:	2b08      	cmp	r3, #8
 8005450:	d112      	bne.n	8005478 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005452:	4b82      	ldr	r3, [pc, #520]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800545e:	d10b      	bne.n	8005478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	4b7e      	ldr	r3, [pc, #504]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d05b      	beq.n	8005524 <HAL_RCC_OscConfig+0x108>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d157      	bne.n	8005524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e242      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005480:	d106      	bne.n	8005490 <HAL_RCC_OscConfig+0x74>
 8005482:	4b76      	ldr	r3, [pc, #472]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a75      	ldr	r2, [pc, #468]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e01d      	b.n	80054cc <HAL_RCC_OscConfig+0xb0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005498:	d10c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x98>
 800549a:	4b70      	ldr	r3, [pc, #448]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a6f      	ldr	r2, [pc, #444]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	4b6d      	ldr	r3, [pc, #436]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a6c      	ldr	r2, [pc, #432]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e00b      	b.n	80054cc <HAL_RCC_OscConfig+0xb0>
 80054b4:	4b69      	ldr	r3, [pc, #420]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a68      	ldr	r2, [pc, #416]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b66      	ldr	r3, [pc, #408]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a65      	ldr	r2, [pc, #404]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d013      	beq.n	80054fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fc fbe4 	bl	8001ca0 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fc fbe0 	bl	8001ca0 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	@ 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e207      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	4b5b      	ldr	r3, [pc, #364]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0xc0>
 80054fa:	e014      	b.n	8005526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fc:	f7fc fbd0 	bl	8001ca0 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005504:	f7fc fbcc 	bl	8001ca0 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	@ 0x64
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e1f3      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005516:	4b51      	ldr	r3, [pc, #324]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0xe8>
 8005522:	e000      	b.n	8005526 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d063      	beq.n	80055fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005532:	4b4a      	ldr	r3, [pc, #296]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800553e:	4b47      	ldr	r3, [pc, #284]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005546:	2b08      	cmp	r3, #8
 8005548:	d11c      	bne.n	8005584 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800554a:	4b44      	ldr	r3, [pc, #272]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d116      	bne.n	8005584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	4b41      	ldr	r3, [pc, #260]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_RCC_OscConfig+0x152>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d001      	beq.n	800556e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e1c7      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556e:	4b3b      	ldr	r3, [pc, #236]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4937      	ldr	r1, [pc, #220]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005582:	e03a      	b.n	80055fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800558c:	4b34      	ldr	r3, [pc, #208]	@ (8005660 <HAL_RCC_OscConfig+0x244>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fc fb85 	bl	8001ca0 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800559a:	f7fc fb81 	bl	8001ca0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e1a8      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ac:	4b2b      	ldr	r3, [pc, #172]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b8:	4b28      	ldr	r3, [pc, #160]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4925      	ldr	r1, [pc, #148]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]
 80055cc:	e015      	b.n	80055fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ce:	4b24      	ldr	r3, [pc, #144]	@ (8005660 <HAL_RCC_OscConfig+0x244>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fc fb64 	bl	8001ca0 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055dc:	f7fc fb60 	bl	8001ca0 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e187      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ee:	4b1b      	ldr	r3, [pc, #108]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d036      	beq.n	8005674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800560e:	4b15      	ldr	r3, [pc, #84]	@ (8005664 <HAL_RCC_OscConfig+0x248>)
 8005610:	2201      	movs	r2, #1
 8005612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fc fb44 	bl	8001ca0 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561c:	f7fc fb40 	bl	8001ca0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e167      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800562e:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <HAL_RCC_OscConfig+0x240>)
 8005630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x200>
 800563a:	e01b      	b.n	8005674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800563c:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <HAL_RCC_OscConfig+0x248>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005642:	f7fc fb2d 	bl	8001ca0 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005648:	e00e      	b.n	8005668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800564a:	f7fc fb29 	bl	8001ca0 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d907      	bls.n	8005668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e150      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
 800565c:	40023800 	.word	0x40023800
 8005660:	42470000 	.word	0x42470000
 8005664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005668:	4b88      	ldr	r3, [pc, #544]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 800566a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ea      	bne.n	800564a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8097 	beq.w	80057b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005682:	2300      	movs	r3, #0
 8005684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005686:	4b81      	ldr	r3, [pc, #516]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10f      	bne.n	80056b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	4b7d      	ldr	r3, [pc, #500]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	4a7c      	ldr	r2, [pc, #496]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 800569c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80056a2:	4b7a      	ldr	r3, [pc, #488]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	60bb      	str	r3, [r7, #8]
 80056ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	4b77      	ldr	r3, [pc, #476]	@ (8005890 <HAL_RCC_OscConfig+0x474>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d118      	bne.n	80056f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056be:	4b74      	ldr	r3, [pc, #464]	@ (8005890 <HAL_RCC_OscConfig+0x474>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a73      	ldr	r2, [pc, #460]	@ (8005890 <HAL_RCC_OscConfig+0x474>)
 80056c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ca:	f7fc fae9 	bl	8001ca0 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d2:	f7fc fae5 	bl	8001ca0 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e10c      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005890 <HAL_RCC_OscConfig+0x474>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d106      	bne.n	8005706 <HAL_RCC_OscConfig+0x2ea>
 80056f8:	4b64      	ldr	r3, [pc, #400]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fc:	4a63      	ldr	r2, [pc, #396]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	6713      	str	r3, [r2, #112]	@ 0x70
 8005704:	e01c      	b.n	8005740 <HAL_RCC_OscConfig+0x324>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b05      	cmp	r3, #5
 800570c:	d10c      	bne.n	8005728 <HAL_RCC_OscConfig+0x30c>
 800570e:	4b5f      	ldr	r3, [pc, #380]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005712:	4a5e      	ldr	r2, [pc, #376]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005714:	f043 0304 	orr.w	r3, r3, #4
 8005718:	6713      	str	r3, [r2, #112]	@ 0x70
 800571a:	4b5c      	ldr	r3, [pc, #368]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571e:	4a5b      	ldr	r2, [pc, #364]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	6713      	str	r3, [r2, #112]	@ 0x70
 8005726:	e00b      	b.n	8005740 <HAL_RCC_OscConfig+0x324>
 8005728:	4b58      	ldr	r3, [pc, #352]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572c:	4a57      	ldr	r2, [pc, #348]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	6713      	str	r3, [r2, #112]	@ 0x70
 8005734:	4b55      	ldr	r3, [pc, #340]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005738:	4a54      	ldr	r2, [pc, #336]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 800573a:	f023 0304 	bic.w	r3, r3, #4
 800573e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d015      	beq.n	8005774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fc faaa 	bl	8001ca0 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fc faa6 	bl	8001ca0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0cb      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005766:	4b49      	ldr	r3, [pc, #292]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ee      	beq.n	8005750 <HAL_RCC_OscConfig+0x334>
 8005772:	e014      	b.n	800579e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005774:	f7fc fa94 	bl	8001ca0 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800577a:	e00a      	b.n	8005792 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577c:	f7fc fa90 	bl	8001ca0 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e0b5      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005792:	4b3e      	ldr	r3, [pc, #248]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ee      	bne.n	800577c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d105      	bne.n	80057b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a4:	4b39      	ldr	r3, [pc, #228]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 80057a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a8:	4a38      	ldr	r2, [pc, #224]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 80057aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80a1 	beq.w	80058fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ba:	4b34      	ldr	r3, [pc, #208]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d05c      	beq.n	8005880 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d141      	bne.n	8005852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ce:	4b31      	ldr	r3, [pc, #196]	@ (8005894 <HAL_RCC_OscConfig+0x478>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fc fa64 	bl	8001ca0 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fc fa60 	bl	8001ca0 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e087      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ee:	4b27      	ldr	r3, [pc, #156]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69da      	ldr	r2, [r3, #28]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	019b      	lsls	r3, r3, #6
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	3b01      	subs	r3, #1
 8005814:	041b      	lsls	r3, r3, #16
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	061b      	lsls	r3, r3, #24
 800581e:	491b      	ldr	r1, [pc, #108]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005820:	4313      	orrs	r3, r2
 8005822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005824:	4b1b      	ldr	r3, [pc, #108]	@ (8005894 <HAL_RCC_OscConfig+0x478>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582a:	f7fc fa39 	bl	8001ca0 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005832:	f7fc fa35 	bl	8001ca0 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e05c      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005844:	4b11      	ldr	r3, [pc, #68]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x416>
 8005850:	e054      	b.n	80058fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005852:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <HAL_RCC_OscConfig+0x478>)
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fc fa22 	bl	8001ca0 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005860:	f7fc fa1e 	bl	8001ca0 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e045      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005872:	4b06      	ldr	r3, [pc, #24]	@ (800588c <HAL_RCC_OscConfig+0x470>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x444>
 800587e:	e03d      	b.n	80058fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d107      	bne.n	8005898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e038      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
 800588c:	40023800 	.word	0x40023800
 8005890:	40007000 	.word	0x40007000
 8005894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005898:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <HAL_RCC_OscConfig+0x4ec>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d028      	beq.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d121      	bne.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d11a      	bne.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80058c8:	4013      	ands	r3, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d111      	bne.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	3b01      	subs	r3, #1
 80058e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800

0800590c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0cc      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005920:	4b68      	ldr	r3, [pc, #416]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d90c      	bls.n	8005948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b65      	ldr	r3, [pc, #404]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b63      	ldr	r3, [pc, #396]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0b8      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d020      	beq.n	8005996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005960:	4b59      	ldr	r3, [pc, #356]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a58      	ldr	r2, [pc, #352]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800596a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005978:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4a52      	ldr	r2, [pc, #328]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005984:	4b50      	ldr	r3, [pc, #320]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	494d      	ldr	r1, [pc, #308]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d044      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	4b47      	ldr	r3, [pc, #284]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d119      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e07f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d003      	beq.n	80059ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ca:	4b3f      	ldr	r3, [pc, #252]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e06f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059da:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e067      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ea:	4b37      	ldr	r3, [pc, #220]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 0203 	bic.w	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4934      	ldr	r1, [pc, #208]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059fc:	f7fc f950 	bl	8001ca0 <HAL_GetTick>
 8005a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a04:	f7fc f94c 	bl	8001ca0 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e04f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 020c 	and.w	r2, r3, #12
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d1eb      	bne.n	8005a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b25      	ldr	r3, [pc, #148]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d20c      	bcs.n	8005a54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b22      	ldr	r3, [pc, #136]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b20      	ldr	r3, [pc, #128]	@ (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e032      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a60:	4b19      	ldr	r3, [pc, #100]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4916      	ldr	r1, [pc, #88]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a7e:	4b12      	ldr	r3, [pc, #72]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	490e      	ldr	r1, [pc, #56]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a92:	f000 f821 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8005a96:	4602      	mov	r2, r0
 8005a98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	490a      	ldr	r1, [pc, #40]	@ (8005acc <HAL_RCC_ClockConfig+0x1c0>)
 8005aa4:	5ccb      	ldrb	r3, [r1, r3]
 8005aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aaa:	4a09      	ldr	r2, [pc, #36]	@ (8005ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005aae:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fc f8b0 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023c00 	.word	0x40023c00
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	0800be3c 	.word	0x0800be3c
 8005ad0:	20000018 	.word	0x20000018
 8005ad4:	2000001c 	.word	0x2000001c

08005ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005adc:	b094      	sub	sp, #80	@ 0x50
 8005ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005af0:	4b79      	ldr	r3, [pc, #484]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d00d      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x40>
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	f200 80e1 	bhi.w	8005cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0x34>
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d003      	beq.n	8005b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b0a:	e0db      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b0c:	4b73      	ldr	r3, [pc, #460]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b10:	e0db      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b12:	4b73      	ldr	r3, [pc, #460]	@ (8005ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b16:	e0d8      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b18:	4b6f      	ldr	r3, [pc, #444]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b22:	4b6d      	ldr	r3, [pc, #436]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d063      	beq.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	2200      	movs	r2, #0
 8005b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b42:	2300      	movs	r3, #0
 8005b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	f04f 0000 	mov.w	r0, #0
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	0159      	lsls	r1, r3, #5
 8005b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b5c:	0150      	lsls	r0, r2, #5
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4621      	mov	r1, r4
 8005b64:	1a51      	subs	r1, r2, r1
 8005b66:	6139      	str	r1, [r7, #16]
 8005b68:	4629      	mov	r1, r5
 8005b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	018b      	lsls	r3, r1, #6
 8005b80:	4651      	mov	r1, sl
 8005b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b86:	4651      	mov	r1, sl
 8005b88:	018a      	lsls	r2, r1, #6
 8005b8a:	4651      	mov	r1, sl
 8005b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b90:	4659      	mov	r1, fp
 8005b92:	eb63 0901 	sbc.w	r9, r3, r1
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005baa:	4690      	mov	r8, r2
 8005bac:	4699      	mov	r9, r3
 8005bae:	4623      	mov	r3, r4
 8005bb0:	eb18 0303 	adds.w	r3, r8, r3
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	eb49 0303 	adc.w	r3, r9, r3
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bca:	4629      	mov	r1, r5
 8005bcc:	024b      	lsls	r3, r1, #9
 8005bce:	4621      	mov	r1, r4
 8005bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	024a      	lsls	r2, r1, #9
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bde:	2200      	movs	r2, #0
 8005be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005be8:	f7fb f856 	bl	8000c98 <__aeabi_uldivmod>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf4:	e058      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf6:	4b38      	ldr	r3, [pc, #224]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	099b      	lsrs	r3, r3, #6
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	4611      	mov	r1, r2
 8005c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c10:	4642      	mov	r2, r8
 8005c12:	464b      	mov	r3, r9
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f04f 0100 	mov.w	r1, #0
 8005c1c:	0159      	lsls	r1, r3, #5
 8005c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c22:	0150      	lsls	r0, r2, #5
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4641      	mov	r1, r8
 8005c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c2e:	4649      	mov	r1, r9
 8005c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c48:	ebb2 040a 	subs.w	r4, r2, sl
 8005c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	00eb      	lsls	r3, r5, #3
 8005c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c5e:	00e2      	lsls	r2, r4, #3
 8005c60:	4614      	mov	r4, r2
 8005c62:	461d      	mov	r5, r3
 8005c64:	4643      	mov	r3, r8
 8005c66:	18e3      	adds	r3, r4, r3
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	eb45 0303 	adc.w	r3, r5, r3
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c7e:	4629      	mov	r1, r5
 8005c80:	028b      	lsls	r3, r1, #10
 8005c82:	4621      	mov	r1, r4
 8005c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c88:	4621      	mov	r1, r4
 8005c8a:	028a      	lsls	r2, r1, #10
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c92:	2200      	movs	r2, #0
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	61fa      	str	r2, [r7, #28]
 8005c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c9c:	f7fa fffc 	bl	8000c98 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cc2:	e002      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cc4:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3750      	adds	r7, #80	@ 0x50
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	00f42400 	.word	0x00f42400
 8005ce0:	007a1200 	.word	0x007a1200

08005ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce8:	4b03      	ldr	r3, [pc, #12]	@ (8005cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000018 	.word	0x20000018

08005cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d00:	f7ff fff0 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	0a9b      	lsrs	r3, r3, #10
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	4903      	ldr	r1, [pc, #12]	@ (8005d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	0800be4c 	.word	0x0800be4c

08005d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d28:	f7ff ffdc 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0b5b      	lsrs	r3, r3, #13
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4903      	ldr	r1, [pc, #12]	@ (8005d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40023800 	.word	0x40023800
 8005d48:	0800be4c 	.word	0x0800be4c

08005d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e041      	b.n	8005de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fb fd0e 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 fa70 	bl	8006270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e044      	b.n	8005e8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1e      	ldr	r2, [pc, #120]	@ (8005e9c <HAL_TIM_Base_Start_IT+0xb0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2e:	d013      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a19      	ldr	r2, [pc, #100]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a17      	ldr	r2, [pc, #92]	@ (8005ea8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x6c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a16      	ldr	r2, [pc, #88]	@ (8005eac <HAL_TIM_Base_Start_IT+0xc0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d111      	bne.n	8005e7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b06      	cmp	r3, #6
 8005e68:	d010      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	e007      	b.n	8005e8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40014000 	.word	0x40014000

08005eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d020      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0202 	mvn.w	r2, #2
 8005ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f999 	bl	8006232 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f98b 	bl	800621e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f99c 	bl	8006246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0304 	and.w	r3, r3, #4
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0204 	mvn.w	r2, #4
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2202      	movs	r2, #2
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f973 	bl	8006232 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f965 	bl	800621e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f976 	bl	8006246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0208 	mvn.w	r2, #8
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2204      	movs	r2, #4
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f94d 	bl	8006232 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f93f 	bl	800621e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f950 	bl	8006246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0210 	mvn.w	r2, #16
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f927 	bl	8006232 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f919 	bl	800621e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f92a 	bl	8006246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00c      	beq.n	800601c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0201 	mvn.w	r2, #1
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fa ffec 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fab6 	bl	80065ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00c      	beq.n	8006064 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800605c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f8fb 	bl	800625a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0220 	mvn.w	r2, #32
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa88 	bl	8006598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_ConfigClockSource+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0b4      	b.n	8006216 <HAL_TIM_ConfigClockSource+0x186>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e4:	d03e      	beq.n	8006164 <HAL_TIM_ConfigClockSource+0xd4>
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ea:	f200 8087 	bhi.w	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f2:	f000 8086 	beq.w	8006202 <HAL_TIM_ConfigClockSource+0x172>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fa:	d87f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b70      	cmp	r3, #112	@ 0x70
 80060fe:	d01a      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0xa6>
 8006100:	2b70      	cmp	r3, #112	@ 0x70
 8006102:	d87b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b60      	cmp	r3, #96	@ 0x60
 8006106:	d050      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x11a>
 8006108:	2b60      	cmp	r3, #96	@ 0x60
 800610a:	d877      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b50      	cmp	r3, #80	@ 0x50
 800610e:	d03c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0xfa>
 8006110:	2b50      	cmp	r3, #80	@ 0x50
 8006112:	d873      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b40      	cmp	r3, #64	@ 0x40
 8006116:	d058      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x13a>
 8006118:	2b40      	cmp	r3, #64	@ 0x40
 800611a:	d86f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b30      	cmp	r3, #48	@ 0x30
 800611e:	d064      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	2b30      	cmp	r3, #48	@ 0x30
 8006122:	d86b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d060      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d867      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d05c      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	2b10      	cmp	r3, #16
 8006132:	d05a      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006134:	e062      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006146:	f000 f999 	bl	800647c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	609a      	str	r2, [r3, #8]
      break;
 8006162:	e04f      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006174:	f000 f982 	bl	800647c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006186:	609a      	str	r2, [r3, #8]
      break;
 8006188:	e03c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	461a      	mov	r2, r3
 8006198:	f000 f8f6 	bl	8006388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2150      	movs	r1, #80	@ 0x50
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f94f 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 80061a8:	e02c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 f915 	bl	80063e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2160      	movs	r1, #96	@ 0x60
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f93f 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e01c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 f8d6 	bl	8006388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2140      	movs	r1, #64	@ 0x40
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f92f 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e00c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f000 f926 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 80061fa:	e003      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e000      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a3a      	ldr	r2, [pc, #232]	@ (800636c <TIM_Base_SetConfig+0xfc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00f      	beq.n	80062a8 <TIM_Base_SetConfig+0x38>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628e:	d00b      	beq.n	80062a8 <TIM_Base_SetConfig+0x38>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a37      	ldr	r2, [pc, #220]	@ (8006370 <TIM_Base_SetConfig+0x100>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <TIM_Base_SetConfig+0x38>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a36      	ldr	r2, [pc, #216]	@ (8006374 <TIM_Base_SetConfig+0x104>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_Base_SetConfig+0x38>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a35      	ldr	r2, [pc, #212]	@ (8006378 <TIM_Base_SetConfig+0x108>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d108      	bne.n	80062ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a2b      	ldr	r2, [pc, #172]	@ (800636c <TIM_Base_SetConfig+0xfc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01b      	beq.n	80062fa <TIM_Base_SetConfig+0x8a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c8:	d017      	beq.n	80062fa <TIM_Base_SetConfig+0x8a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a28      	ldr	r2, [pc, #160]	@ (8006370 <TIM_Base_SetConfig+0x100>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <TIM_Base_SetConfig+0x8a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a27      	ldr	r2, [pc, #156]	@ (8006374 <TIM_Base_SetConfig+0x104>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00f      	beq.n	80062fa <TIM_Base_SetConfig+0x8a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a26      	ldr	r2, [pc, #152]	@ (8006378 <TIM_Base_SetConfig+0x108>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00b      	beq.n	80062fa <TIM_Base_SetConfig+0x8a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a25      	ldr	r2, [pc, #148]	@ (800637c <TIM_Base_SetConfig+0x10c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_Base_SetConfig+0x8a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a24      	ldr	r2, [pc, #144]	@ (8006380 <TIM_Base_SetConfig+0x110>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_Base_SetConfig+0x8a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a23      	ldr	r2, [pc, #140]	@ (8006384 <TIM_Base_SetConfig+0x114>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0e      	ldr	r2, [pc, #56]	@ (800636c <TIM_Base_SetConfig+0xfc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d103      	bne.n	8006340 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d105      	bne.n	800635e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f023 0201 	bic.w	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	611a      	str	r2, [r3, #16]
  }
}
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40010000 	.word	0x40010000
 8006370:	40000400 	.word	0x40000400
 8006374:	40000800 	.word	0x40000800
 8006378:	40000c00 	.word	0x40000c00
 800637c:	40014000 	.word	0x40014000
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800

08006388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 030a 	bic.w	r3, r3, #10
 80063c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f023 0210 	bic.w	r2, r3, #16
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006422:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	f043 0307 	orr.w	r3, r3, #7
 8006468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	431a      	orrs	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e050      	b.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1c      	ldr	r2, [pc, #112]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006520:	d013      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a16      	ldr	r2, [pc, #88]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a13      	ldr	r2, [pc, #76]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d10c      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4313      	orrs	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40014000 	.word	0x40014000

08006598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e042      	b.n	8006658 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fb f8fa 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2224      	movs	r2, #36	@ 0x24
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fdcb 	bl	80071a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08c      	sub	sp, #48	@ 0x30
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b20      	cmp	r3, #32
 8006678:	d156      	bne.n	8006728 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_UART_Transmit_DMA+0x26>
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e04f      	b.n	800672a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	88fa      	ldrh	r2, [r7, #6]
 8006694:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	88fa      	ldrh	r2, [r7, #6]
 800669a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2221      	movs	r2, #33	@ 0x21
 80066a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	4a21      	ldr	r2, [pc, #132]	@ (8006734 <HAL_UART_Transmit_DMA+0xd4>)
 80066b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b6:	4a20      	ldr	r2, [pc, #128]	@ (8006738 <HAL_UART_Transmit_DMA+0xd8>)
 80066b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	4a1f      	ldr	r2, [pc, #124]	@ (800673c <HAL_UART_Transmit_DMA+0xdc>)
 80066c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c6:	2200      	movs	r2, #0
 80066c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066ca:	f107 0308 	add.w	r3, r7, #8
 80066ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	6819      	ldr	r1, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3304      	adds	r3, #4
 80066de:	461a      	mov	r2, r3
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	f7fb fca9 	bl	8002038 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3314      	adds	r3, #20
 80066f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3314      	adds	r3, #20
 800670e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006710:	627a      	str	r2, [r7, #36]	@ 0x24
 8006712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6a39      	ldr	r1, [r7, #32]
 8006716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	61fb      	str	r3, [r7, #28]
   return(result);
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e5      	bne.n	80066f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	e000      	b.n	800672a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3730      	adds	r7, #48	@ 0x30
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	08006ccd 	.word	0x08006ccd
 8006738:	08006d67 	.word	0x08006d67
 800673c:	08006d83 	.word	0x08006d83

08006740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b0ba      	sub	sp, #232	@ 0xe8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006766:	2300      	movs	r3, #0
 8006768:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800676c:	2300      	movs	r3, #0
 800676e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800677e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10f      	bne.n	80067a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <HAL_UART_IRQHandler+0x66>
 8006792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fc40 	bl	8007024 <UART_Receive_IT>
      return;
 80067a4:	e25b      	b.n	8006c5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80de 	beq.w	800696c <HAL_UART_IRQHandler+0x22c>
 80067b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80d1 	beq.w	800696c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <HAL_UART_IRQHandler+0xae>
 80067d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e6:	f043 0201 	orr.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_UART_IRQHandler+0xd2>
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680a:	f043 0202 	orr.w	r2, r3, #2
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <HAL_UART_IRQHandler+0xf6>
 800681e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f043 0204 	orr.w	r2, r3, #4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d011      	beq.n	8006866 <HAL_UART_IRQHandler+0x126>
 8006842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800684e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685e:	f043 0208 	orr.w	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 81f2 	beq.w	8006c54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <HAL_UART_IRQHandler+0x14e>
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fbcb 	bl	8007024 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006898:	2b40      	cmp	r3, #64	@ 0x40
 800689a:	bf0c      	ite	eq
 800689c:	2301      	moveq	r3, #1
 800689e:	2300      	movne	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <HAL_UART_IRQHandler+0x17a>
 80068b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d04f      	beq.n	800695a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fad3 	bl	8006e66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d141      	bne.n	8006952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3314      	adds	r3, #20
 80068f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1d9      	bne.n	80068ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d013      	beq.n	800694a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006926:	4a7e      	ldr	r2, [pc, #504]	@ (8006b20 <HAL_UART_IRQHandler+0x3e0>)
 8006928:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692e:	4618      	mov	r0, r3
 8006930:	f7fb fc4a 	bl	80021c8 <HAL_DMA_Abort_IT>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d016      	beq.n	8006968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	e00e      	b.n	8006968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9a8 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006950:	e00a      	b.n	8006968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f9a4 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	e006      	b.n	8006968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9a0 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006966:	e175      	b.n	8006c54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006968:	bf00      	nop
    return;
 800696a:	e173      	b.n	8006c54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006970:	2b01      	cmp	r3, #1
 8006972:	f040 814f 	bne.w	8006c14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8148 	beq.w	8006c14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8141 	beq.w	8006c14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b2:	2b40      	cmp	r3, #64	@ 0x40
 80069b4:	f040 80b6 	bne.w	8006b24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8145 	beq.w	8006c58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069d6:	429a      	cmp	r2, r3
 80069d8:	f080 813e 	bcs.w	8006c58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ee:	f000 8088 	beq.w	8006b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1d9      	bne.n	80069f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3314      	adds	r3, #20
 8006a44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e1      	bne.n	8006a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006aa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e3      	bne.n	8006a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad2:	f023 0310 	bic.w	r3, r3, #16
 8006ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ae4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ae6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e3      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fb faf3 	bl	80020e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8cb 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b1e:	e09b      	b.n	8006c58 <HAL_UART_IRQHandler+0x518>
 8006b20:	08006f2d 	.word	0x08006f2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 808e 	beq.w	8006c5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8089 	beq.w	8006c5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e3      	bne.n	8006b4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	623b      	str	r3, [r7, #32]
   return(result);
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e3      	bne.n	8006b82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006bec:	61fa      	str	r2, [r7, #28]
 8006bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e3      	bne.n	8006bc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f851 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c12:	e023      	b.n	8006c5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <HAL_UART_IRQHandler+0x4f4>
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f991 	bl	8006f54 <UART_Transmit_IT>
    return;
 8006c32:	e014      	b.n	8006c5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00e      	beq.n	8006c5e <HAL_UART_IRQHandler+0x51e>
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f9d1 	bl	8006ff4 <UART_EndTransmit_IT>
    return;
 8006c52:	e004      	b.n	8006c5e <HAL_UART_IRQHandler+0x51e>
    return;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c5c:	bf00      	nop
  }
}
 8006c5e:	37e8      	adds	r7, #232	@ 0xe8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b090      	sub	sp, #64	@ 0x40
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d137      	bne.n	8006d58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cea:	2200      	movs	r2, #0
 8006cec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3314      	adds	r3, #20
 8006d0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d42:	61fa      	str	r2, [r7, #28]
 8006d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	69b9      	ldr	r1, [r7, #24]
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d56:	e002      	b.n	8006d5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006d5a:	f7ff ff83 	bl	8006c64 <HAL_UART_TxCpltCallback>
}
 8006d5e:	bf00      	nop
 8006d60:	3740      	adds	r7, #64	@ 0x40
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff ff7f 	bl	8006c78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9e:	2b80      	cmp	r3, #128	@ 0x80
 8006da0:	bf0c      	ite	eq
 8006da2:	2301      	moveq	r3, #1
 8006da4:	2300      	movne	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b21      	cmp	r3, #33	@ 0x21
 8006db4:	d108      	bne.n	8006dc8 <UART_DMAError+0x46>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006dc2:	68b8      	ldr	r0, [r7, #8]
 8006dc4:	f000 f827 	bl	8006e16 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd2:	2b40      	cmp	r3, #64	@ 0x40
 8006dd4:	bf0c      	ite	eq
 8006dd6:	2301      	moveq	r3, #1
 8006dd8:	2300      	movne	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b22      	cmp	r3, #34	@ 0x22
 8006de8:	d108      	bne.n	8006dfc <UART_DMAError+0x7a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006df6:	68b8      	ldr	r0, [r7, #8]
 8006df8:	f000 f835 	bl	8006e66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e00:	f043 0210 	orr.w	r2, r3, #16
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e08:	68b8      	ldr	r0, [r7, #8]
 8006e0a:	f7ff ff49 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b089      	sub	sp, #36	@ 0x24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	61ba      	str	r2, [r7, #24]
 8006e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6979      	ldr	r1, [r7, #20]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e5      	bne.n	8006e1e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e5a:	bf00      	nop
 8006e5c:	3724      	adds	r7, #36	@ 0x24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b095      	sub	sp, #84	@ 0x54
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	330c      	adds	r3, #12
 8006e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3314      	adds	r3, #20
 8006ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d119      	bne.n	8006f12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f023 0310 	bic.w	r3, r3, #16
 8006ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006efe:	61ba      	str	r2, [r7, #24]
 8006f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6979      	ldr	r1, [r7, #20]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e5      	bne.n	8006ede <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f20:	bf00      	nop
 8006f22:	3754      	adds	r7, #84	@ 0x54
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff feaa 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b21      	cmp	r3, #33	@ 0x21
 8006f66:	d13e      	bne.n	8006fe6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f70:	d114      	bne.n	8006f9c <UART_Transmit_IT+0x48>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d110      	bne.n	8006f9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]
 8006f9a:	e008      	b.n	8006fae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	1c59      	adds	r1, r3, #1
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6211      	str	r1, [r2, #32]
 8006fa6:	781a      	ldrb	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10f      	bne.n	8006fe2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fe0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800700a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fe25 	bl	8006c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08c      	sub	sp, #48	@ 0x30
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b22      	cmp	r3, #34	@ 0x22
 8007036:	f040 80ae 	bne.w	8007196 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007042:	d117      	bne.n	8007074 <UART_Receive_IT+0x50>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d113      	bne.n	8007074 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800704c:	2300      	movs	r3, #0
 800704e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	b29b      	uxth	r3, r3
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	b29a      	uxth	r2, r3
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	1c9a      	adds	r2, r3, #2
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	629a      	str	r2, [r3, #40]	@ 0x28
 8007072:	e026      	b.n	80070c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007086:	d007      	beq.n	8007098 <UART_Receive_IT+0x74>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <UART_Receive_IT+0x82>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e008      	b.n	80070b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4619      	mov	r1, r3
 80070d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d15d      	bne.n	8007192 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0220 	bic.w	r2, r2, #32
 80070e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	695a      	ldr	r2, [r3, #20]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007118:	2b01      	cmp	r3, #1
 800711a:	d135      	bne.n	8007188 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	613b      	str	r3, [r7, #16]
   return(result);
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f023 0310 	bic.w	r3, r3, #16
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	330c      	adds	r3, #12
 8007140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007142:	623a      	str	r2, [r7, #32]
 8007144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	69f9      	ldr	r1, [r7, #28]
 8007148:	6a3a      	ldr	r2, [r7, #32]
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e5      	bne.n	8007122 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b10      	cmp	r3, #16
 8007162:	d10a      	bne.n	800717a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fd97 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
 8007186:	e002      	b.n	800718e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fd7f 	bl	8006c8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e002      	b.n	8007198 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3730      	adds	r7, #48	@ 0x30
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071a4:	b0c0      	sub	sp, #256	@ 0x100
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071bc:	68d9      	ldr	r1, [r3, #12]
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	ea40 0301 	orr.w	r3, r0, r1
 80071c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	431a      	orrs	r2, r3
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071f8:	f021 010c 	bic.w	r1, r1, #12
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007206:	430b      	orrs	r3, r1
 8007208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721a:	6999      	ldr	r1, [r3, #24]
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	ea40 0301 	orr.w	r3, r0, r1
 8007226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	4b8f      	ldr	r3, [pc, #572]	@ (800746c <UART_SetConfig+0x2cc>)
 8007230:	429a      	cmp	r2, r3
 8007232:	d005      	beq.n	8007240 <UART_SetConfig+0xa0>
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b8d      	ldr	r3, [pc, #564]	@ (8007470 <UART_SetConfig+0x2d0>)
 800723c:	429a      	cmp	r2, r3
 800723e:	d104      	bne.n	800724a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007240:	f7fe fd70 	bl	8005d24 <HAL_RCC_GetPCLK2Freq>
 8007244:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007248:	e003      	b.n	8007252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800724a:	f7fe fd57 	bl	8005cfc <HAL_RCC_GetPCLK1Freq>
 800724e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800725c:	f040 810c 	bne.w	8007478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007264:	2200      	movs	r2, #0
 8007266:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800726a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800726e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007272:	4622      	mov	r2, r4
 8007274:	462b      	mov	r3, r5
 8007276:	1891      	adds	r1, r2, r2
 8007278:	65b9      	str	r1, [r7, #88]	@ 0x58
 800727a:	415b      	adcs	r3, r3
 800727c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800727e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007282:	4621      	mov	r1, r4
 8007284:	eb12 0801 	adds.w	r8, r2, r1
 8007288:	4629      	mov	r1, r5
 800728a:	eb43 0901 	adc.w	r9, r3, r1
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800729a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800729e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072a2:	4690      	mov	r8, r2
 80072a4:	4699      	mov	r9, r3
 80072a6:	4623      	mov	r3, r4
 80072a8:	eb18 0303 	adds.w	r3, r8, r3
 80072ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072b0:	462b      	mov	r3, r5
 80072b2:	eb49 0303 	adc.w	r3, r9, r3
 80072b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072ce:	460b      	mov	r3, r1
 80072d0:	18db      	adds	r3, r3, r3
 80072d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80072d4:	4613      	mov	r3, r2
 80072d6:	eb42 0303 	adc.w	r3, r2, r3
 80072da:	657b      	str	r3, [r7, #84]	@ 0x54
 80072dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072e4:	f7f9 fcd8 	bl	8000c98 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4b61      	ldr	r3, [pc, #388]	@ (8007474 <UART_SetConfig+0x2d4>)
 80072ee:	fba3 2302 	umull	r2, r3, r3, r2
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	011c      	lsls	r4, r3, #4
 80072f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007300:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	1891      	adds	r1, r2, r2
 800730e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007310:	415b      	adcs	r3, r3
 8007312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007318:	4641      	mov	r1, r8
 800731a:	eb12 0a01 	adds.w	sl, r2, r1
 800731e:	4649      	mov	r1, r9
 8007320:	eb43 0b01 	adc.w	fp, r3, r1
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007338:	4692      	mov	sl, r2
 800733a:	469b      	mov	fp, r3
 800733c:	4643      	mov	r3, r8
 800733e:	eb1a 0303 	adds.w	r3, sl, r3
 8007342:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007346:	464b      	mov	r3, r9
 8007348:	eb4b 0303 	adc.w	r3, fp, r3
 800734c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800735c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007364:	460b      	mov	r3, r1
 8007366:	18db      	adds	r3, r3, r3
 8007368:	643b      	str	r3, [r7, #64]	@ 0x40
 800736a:	4613      	mov	r3, r2
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	647b      	str	r3, [r7, #68]	@ 0x44
 8007372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800737a:	f7f9 fc8d 	bl	8000c98 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4611      	mov	r1, r2
 8007384:	4b3b      	ldr	r3, [pc, #236]	@ (8007474 <UART_SetConfig+0x2d4>)
 8007386:	fba3 2301 	umull	r2, r3, r3, r1
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	2264      	movs	r2, #100	@ 0x64
 800738e:	fb02 f303 	mul.w	r3, r2, r3
 8007392:	1acb      	subs	r3, r1, r3
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800739a:	4b36      	ldr	r3, [pc, #216]	@ (8007474 <UART_SetConfig+0x2d4>)
 800739c:	fba3 2302 	umull	r2, r3, r3, r2
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80073a8:	441c      	add	r4, r3
 80073aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073bc:	4642      	mov	r2, r8
 80073be:	464b      	mov	r3, r9
 80073c0:	1891      	adds	r1, r2, r2
 80073c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073c4:	415b      	adcs	r3, r3
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073cc:	4641      	mov	r1, r8
 80073ce:	1851      	adds	r1, r2, r1
 80073d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80073d2:	4649      	mov	r1, r9
 80073d4:	414b      	adcs	r3, r1
 80073d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073e4:	4659      	mov	r1, fp
 80073e6:	00cb      	lsls	r3, r1, #3
 80073e8:	4651      	mov	r1, sl
 80073ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ee:	4651      	mov	r1, sl
 80073f0:	00ca      	lsls	r2, r1, #3
 80073f2:	4610      	mov	r0, r2
 80073f4:	4619      	mov	r1, r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	4642      	mov	r2, r8
 80073fa:	189b      	adds	r3, r3, r2
 80073fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007400:	464b      	mov	r3, r9
 8007402:	460a      	mov	r2, r1
 8007404:	eb42 0303 	adc.w	r3, r2, r3
 8007408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007418:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800741c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007420:	460b      	mov	r3, r1
 8007422:	18db      	adds	r3, r3, r3
 8007424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007426:	4613      	mov	r3, r2
 8007428:	eb42 0303 	adc.w	r3, r2, r3
 800742c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800742e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007436:	f7f9 fc2f 	bl	8000c98 <__aeabi_uldivmod>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <UART_SetConfig+0x2d4>)
 8007440:	fba3 1302 	umull	r1, r3, r3, r2
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	2164      	movs	r1, #100	@ 0x64
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	3332      	adds	r3, #50	@ 0x32
 8007452:	4a08      	ldr	r2, [pc, #32]	@ (8007474 <UART_SetConfig+0x2d4>)
 8007454:	fba2 2303 	umull	r2, r3, r2, r3
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	f003 0207 	and.w	r2, r3, #7
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4422      	add	r2, r4
 8007466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007468:	e106      	b.n	8007678 <UART_SetConfig+0x4d8>
 800746a:	bf00      	nop
 800746c:	40011000 	.word	0x40011000
 8007470:	40011400 	.word	0x40011400
 8007474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800747c:	2200      	movs	r2, #0
 800747e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007482:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800748a:	4642      	mov	r2, r8
 800748c:	464b      	mov	r3, r9
 800748e:	1891      	adds	r1, r2, r2
 8007490:	6239      	str	r1, [r7, #32]
 8007492:	415b      	adcs	r3, r3
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
 8007496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800749a:	4641      	mov	r1, r8
 800749c:	1854      	adds	r4, r2, r1
 800749e:	4649      	mov	r1, r9
 80074a0:	eb43 0501 	adc.w	r5, r3, r1
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	00eb      	lsls	r3, r5, #3
 80074ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074b2:	00e2      	lsls	r2, r4, #3
 80074b4:	4614      	mov	r4, r2
 80074b6:	461d      	mov	r5, r3
 80074b8:	4643      	mov	r3, r8
 80074ba:	18e3      	adds	r3, r4, r3
 80074bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074c0:	464b      	mov	r3, r9
 80074c2:	eb45 0303 	adc.w	r3, r5, r3
 80074c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074e6:	4629      	mov	r1, r5
 80074e8:	008b      	lsls	r3, r1, #2
 80074ea:	4621      	mov	r1, r4
 80074ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074f0:	4621      	mov	r1, r4
 80074f2:	008a      	lsls	r2, r1, #2
 80074f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074f8:	f7f9 fbce 	bl	8000c98 <__aeabi_uldivmod>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4b60      	ldr	r3, [pc, #384]	@ (8007684 <UART_SetConfig+0x4e4>)
 8007502:	fba3 2302 	umull	r2, r3, r3, r2
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	011c      	lsls	r4, r3, #4
 800750a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800750e:	2200      	movs	r2, #0
 8007510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007514:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800751c:	4642      	mov	r2, r8
 800751e:	464b      	mov	r3, r9
 8007520:	1891      	adds	r1, r2, r2
 8007522:	61b9      	str	r1, [r7, #24]
 8007524:	415b      	adcs	r3, r3
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800752c:	4641      	mov	r1, r8
 800752e:	1851      	adds	r1, r2, r1
 8007530:	6139      	str	r1, [r7, #16]
 8007532:	4649      	mov	r1, r9
 8007534:	414b      	adcs	r3, r1
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007544:	4659      	mov	r1, fp
 8007546:	00cb      	lsls	r3, r1, #3
 8007548:	4651      	mov	r1, sl
 800754a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800754e:	4651      	mov	r1, sl
 8007550:	00ca      	lsls	r2, r1, #3
 8007552:	4610      	mov	r0, r2
 8007554:	4619      	mov	r1, r3
 8007556:	4603      	mov	r3, r0
 8007558:	4642      	mov	r2, r8
 800755a:	189b      	adds	r3, r3, r2
 800755c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007560:	464b      	mov	r3, r9
 8007562:	460a      	mov	r2, r1
 8007564:	eb42 0303 	adc.w	r3, r2, r3
 8007568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007576:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007578:	f04f 0200 	mov.w	r2, #0
 800757c:	f04f 0300 	mov.w	r3, #0
 8007580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007584:	4649      	mov	r1, r9
 8007586:	008b      	lsls	r3, r1, #2
 8007588:	4641      	mov	r1, r8
 800758a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800758e:	4641      	mov	r1, r8
 8007590:	008a      	lsls	r2, r1, #2
 8007592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007596:	f7f9 fb7f 	bl	8000c98 <__aeabi_uldivmod>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4611      	mov	r1, r2
 80075a0:	4b38      	ldr	r3, [pc, #224]	@ (8007684 <UART_SetConfig+0x4e4>)
 80075a2:	fba3 2301 	umull	r2, r3, r3, r1
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	2264      	movs	r2, #100	@ 0x64
 80075aa:	fb02 f303 	mul.w	r3, r2, r3
 80075ae:	1acb      	subs	r3, r1, r3
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	3332      	adds	r3, #50	@ 0x32
 80075b4:	4a33      	ldr	r2, [pc, #204]	@ (8007684 <UART_SetConfig+0x4e4>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075c0:	441c      	add	r4, r3
 80075c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c6:	2200      	movs	r2, #0
 80075c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80075ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80075cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	1891      	adds	r1, r2, r2
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	415b      	adcs	r3, r3
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075e0:	4641      	mov	r1, r8
 80075e2:	1851      	adds	r1, r2, r1
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	4649      	mov	r1, r9
 80075e8:	414b      	adcs	r3, r1
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075f8:	4659      	mov	r1, fp
 80075fa:	00cb      	lsls	r3, r1, #3
 80075fc:	4651      	mov	r1, sl
 80075fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007602:	4651      	mov	r1, sl
 8007604:	00ca      	lsls	r2, r1, #3
 8007606:	4610      	mov	r0, r2
 8007608:	4619      	mov	r1, r3
 800760a:	4603      	mov	r3, r0
 800760c:	4642      	mov	r2, r8
 800760e:	189b      	adds	r3, r3, r2
 8007610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007612:	464b      	mov	r3, r9
 8007614:	460a      	mov	r2, r1
 8007616:	eb42 0303 	adc.w	r3, r2, r3
 800761a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	663b      	str	r3, [r7, #96]	@ 0x60
 8007626:	667a      	str	r2, [r7, #100]	@ 0x64
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007634:	4649      	mov	r1, r9
 8007636:	008b      	lsls	r3, r1, #2
 8007638:	4641      	mov	r1, r8
 800763a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800763e:	4641      	mov	r1, r8
 8007640:	008a      	lsls	r2, r1, #2
 8007642:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007646:	f7f9 fb27 	bl	8000c98 <__aeabi_uldivmod>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <UART_SetConfig+0x4e4>)
 8007650:	fba3 1302 	umull	r1, r3, r3, r2
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	2164      	movs	r1, #100	@ 0x64
 8007658:	fb01 f303 	mul.w	r3, r1, r3
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	3332      	adds	r3, #50	@ 0x32
 8007662:	4a08      	ldr	r2, [pc, #32]	@ (8007684 <UART_SetConfig+0x4e4>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4422      	add	r2, r4
 8007676:	609a      	str	r2, [r3, #8]
}
 8007678:	bf00      	nop
 800767a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800767e:	46bd      	mov	sp, r7
 8007680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007684:	51eb851f 	.word	0x51eb851f

08007688 <__cvt>:
 8007688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800768c:	ec57 6b10 	vmov	r6, r7, d0
 8007690:	2f00      	cmp	r7, #0
 8007692:	460c      	mov	r4, r1
 8007694:	4619      	mov	r1, r3
 8007696:	463b      	mov	r3, r7
 8007698:	bfbb      	ittet	lt
 800769a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800769e:	461f      	movlt	r7, r3
 80076a0:	2300      	movge	r3, #0
 80076a2:	232d      	movlt	r3, #45	@ 0x2d
 80076a4:	700b      	strb	r3, [r1, #0]
 80076a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076ac:	4691      	mov	r9, r2
 80076ae:	f023 0820 	bic.w	r8, r3, #32
 80076b2:	bfbc      	itt	lt
 80076b4:	4632      	movlt	r2, r6
 80076b6:	4616      	movlt	r6, r2
 80076b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076bc:	d005      	beq.n	80076ca <__cvt+0x42>
 80076be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076c2:	d100      	bne.n	80076c6 <__cvt+0x3e>
 80076c4:	3401      	adds	r4, #1
 80076c6:	2102      	movs	r1, #2
 80076c8:	e000      	b.n	80076cc <__cvt+0x44>
 80076ca:	2103      	movs	r1, #3
 80076cc:	ab03      	add	r3, sp, #12
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	ab02      	add	r3, sp, #8
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	ec47 6b10 	vmov	d0, r6, r7
 80076d8:	4653      	mov	r3, sl
 80076da:	4622      	mov	r2, r4
 80076dc:	f001 f8a8 	bl	8008830 <_dtoa_r>
 80076e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80076e4:	4605      	mov	r5, r0
 80076e6:	d119      	bne.n	800771c <__cvt+0x94>
 80076e8:	f019 0f01 	tst.w	r9, #1
 80076ec:	d00e      	beq.n	800770c <__cvt+0x84>
 80076ee:	eb00 0904 	add.w	r9, r0, r4
 80076f2:	2200      	movs	r2, #0
 80076f4:	2300      	movs	r3, #0
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f9 f9ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80076fe:	b108      	cbz	r0, 8007704 <__cvt+0x7c>
 8007700:	f8cd 900c 	str.w	r9, [sp, #12]
 8007704:	2230      	movs	r2, #48	@ 0x30
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	454b      	cmp	r3, r9
 800770a:	d31e      	bcc.n	800774a <__cvt+0xc2>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007710:	1b5b      	subs	r3, r3, r5
 8007712:	4628      	mov	r0, r5
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	b004      	add	sp, #16
 8007718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007720:	eb00 0904 	add.w	r9, r0, r4
 8007724:	d1e5      	bne.n	80076f2 <__cvt+0x6a>
 8007726:	7803      	ldrb	r3, [r0, #0]
 8007728:	2b30      	cmp	r3, #48	@ 0x30
 800772a:	d10a      	bne.n	8007742 <__cvt+0xba>
 800772c:	2200      	movs	r2, #0
 800772e:	2300      	movs	r3, #0
 8007730:	4630      	mov	r0, r6
 8007732:	4639      	mov	r1, r7
 8007734:	f7f9 f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007738:	b918      	cbnz	r0, 8007742 <__cvt+0xba>
 800773a:	f1c4 0401 	rsb	r4, r4, #1
 800773e:	f8ca 4000 	str.w	r4, [sl]
 8007742:	f8da 3000 	ldr.w	r3, [sl]
 8007746:	4499      	add	r9, r3
 8007748:	e7d3      	b.n	80076f2 <__cvt+0x6a>
 800774a:	1c59      	adds	r1, r3, #1
 800774c:	9103      	str	r1, [sp, #12]
 800774e:	701a      	strb	r2, [r3, #0]
 8007750:	e7d9      	b.n	8007706 <__cvt+0x7e>

08007752 <__exponent>:
 8007752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007754:	2900      	cmp	r1, #0
 8007756:	bfba      	itte	lt
 8007758:	4249      	neglt	r1, r1
 800775a:	232d      	movlt	r3, #45	@ 0x2d
 800775c:	232b      	movge	r3, #43	@ 0x2b
 800775e:	2909      	cmp	r1, #9
 8007760:	7002      	strb	r2, [r0, #0]
 8007762:	7043      	strb	r3, [r0, #1]
 8007764:	dd29      	ble.n	80077ba <__exponent+0x68>
 8007766:	f10d 0307 	add.w	r3, sp, #7
 800776a:	461d      	mov	r5, r3
 800776c:	270a      	movs	r7, #10
 800776e:	461a      	mov	r2, r3
 8007770:	fbb1 f6f7 	udiv	r6, r1, r7
 8007774:	fb07 1416 	mls	r4, r7, r6, r1
 8007778:	3430      	adds	r4, #48	@ 0x30
 800777a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800777e:	460c      	mov	r4, r1
 8007780:	2c63      	cmp	r4, #99	@ 0x63
 8007782:	f103 33ff 	add.w	r3, r3, #4294967295
 8007786:	4631      	mov	r1, r6
 8007788:	dcf1      	bgt.n	800776e <__exponent+0x1c>
 800778a:	3130      	adds	r1, #48	@ 0x30
 800778c:	1e94      	subs	r4, r2, #2
 800778e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007792:	1c41      	adds	r1, r0, #1
 8007794:	4623      	mov	r3, r4
 8007796:	42ab      	cmp	r3, r5
 8007798:	d30a      	bcc.n	80077b0 <__exponent+0x5e>
 800779a:	f10d 0309 	add.w	r3, sp, #9
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	42ac      	cmp	r4, r5
 80077a2:	bf88      	it	hi
 80077a4:	2300      	movhi	r3, #0
 80077a6:	3302      	adds	r3, #2
 80077a8:	4403      	add	r3, r0
 80077aa:	1a18      	subs	r0, r3, r0
 80077ac:	b003      	add	sp, #12
 80077ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077b8:	e7ed      	b.n	8007796 <__exponent+0x44>
 80077ba:	2330      	movs	r3, #48	@ 0x30
 80077bc:	3130      	adds	r1, #48	@ 0x30
 80077be:	7083      	strb	r3, [r0, #2]
 80077c0:	70c1      	strb	r1, [r0, #3]
 80077c2:	1d03      	adds	r3, r0, #4
 80077c4:	e7f1      	b.n	80077aa <__exponent+0x58>
	...

080077c8 <_printf_float>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	b08d      	sub	sp, #52	@ 0x34
 80077ce:	460c      	mov	r4, r1
 80077d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077d4:	4616      	mov	r6, r2
 80077d6:	461f      	mov	r7, r3
 80077d8:	4605      	mov	r5, r0
 80077da:	f000 ff23 	bl	8008624 <_localeconv_r>
 80077de:	6803      	ldr	r3, [r0, #0]
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7f8 fd4c 	bl	8000280 <strlen>
 80077e8:	2300      	movs	r3, #0
 80077ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ec:	f8d8 3000 	ldr.w	r3, [r8]
 80077f0:	9005      	str	r0, [sp, #20]
 80077f2:	3307      	adds	r3, #7
 80077f4:	f023 0307 	bic.w	r3, r3, #7
 80077f8:	f103 0208 	add.w	r2, r3, #8
 80077fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007800:	f8d4 b000 	ldr.w	fp, [r4]
 8007804:	f8c8 2000 	str.w	r2, [r8]
 8007808:	e9d3 8900 	ldrd	r8, r9, [r3]
 800780c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	f8cd 8018 	str.w	r8, [sp, #24]
 8007816:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800781a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800781e:	4b9c      	ldr	r3, [pc, #624]	@ (8007a90 <_printf_float+0x2c8>)
 8007820:	f04f 32ff 	mov.w	r2, #4294967295
 8007824:	f7f9 f98a 	bl	8000b3c <__aeabi_dcmpun>
 8007828:	bb70      	cbnz	r0, 8007888 <_printf_float+0xc0>
 800782a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800782e:	4b98      	ldr	r3, [pc, #608]	@ (8007a90 <_printf_float+0x2c8>)
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	f7f9 f964 	bl	8000b00 <__aeabi_dcmple>
 8007838:	bb30      	cbnz	r0, 8007888 <_printf_float+0xc0>
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f9 f953 	bl	8000aec <__aeabi_dcmplt>
 8007846:	b110      	cbz	r0, 800784e <_printf_float+0x86>
 8007848:	232d      	movs	r3, #45	@ 0x2d
 800784a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800784e:	4a91      	ldr	r2, [pc, #580]	@ (8007a94 <_printf_float+0x2cc>)
 8007850:	4b91      	ldr	r3, [pc, #580]	@ (8007a98 <_printf_float+0x2d0>)
 8007852:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007856:	bf94      	ite	ls
 8007858:	4690      	movls	r8, r2
 800785a:	4698      	movhi	r8, r3
 800785c:	2303      	movs	r3, #3
 800785e:	6123      	str	r3, [r4, #16]
 8007860:	f02b 0304 	bic.w	r3, fp, #4
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	f04f 0900 	mov.w	r9, #0
 800786a:	9700      	str	r7, [sp, #0]
 800786c:	4633      	mov	r3, r6
 800786e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007870:	4621      	mov	r1, r4
 8007872:	4628      	mov	r0, r5
 8007874:	f000 f9d2 	bl	8007c1c <_printf_common>
 8007878:	3001      	adds	r0, #1
 800787a:	f040 808d 	bne.w	8007998 <_printf_float+0x1d0>
 800787e:	f04f 30ff 	mov.w	r0, #4294967295
 8007882:	b00d      	add	sp, #52	@ 0x34
 8007884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	4640      	mov	r0, r8
 800788e:	4649      	mov	r1, r9
 8007890:	f7f9 f954 	bl	8000b3c <__aeabi_dcmpun>
 8007894:	b140      	cbz	r0, 80078a8 <_printf_float+0xe0>
 8007896:	464b      	mov	r3, r9
 8007898:	2b00      	cmp	r3, #0
 800789a:	bfbc      	itt	lt
 800789c:	232d      	movlt	r3, #45	@ 0x2d
 800789e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078a2:	4a7e      	ldr	r2, [pc, #504]	@ (8007a9c <_printf_float+0x2d4>)
 80078a4:	4b7e      	ldr	r3, [pc, #504]	@ (8007aa0 <_printf_float+0x2d8>)
 80078a6:	e7d4      	b.n	8007852 <_printf_float+0x8a>
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078ae:	9206      	str	r2, [sp, #24]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	d13b      	bne.n	800792c <_printf_float+0x164>
 80078b4:	2306      	movs	r3, #6
 80078b6:	6063      	str	r3, [r4, #4]
 80078b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078bc:	2300      	movs	r3, #0
 80078be:	6022      	str	r2, [r4, #0]
 80078c0:	9303      	str	r3, [sp, #12]
 80078c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80078c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078c8:	ab09      	add	r3, sp, #36	@ 0x24
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	ec49 8b10 	vmov	d0, r8, r9
 80078d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7ff fed6 	bl	8007688 <__cvt>
 80078dc:	9b06      	ldr	r3, [sp, #24]
 80078de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078e0:	2b47      	cmp	r3, #71	@ 0x47
 80078e2:	4680      	mov	r8, r0
 80078e4:	d129      	bne.n	800793a <_printf_float+0x172>
 80078e6:	1cc8      	adds	r0, r1, #3
 80078e8:	db02      	blt.n	80078f0 <_printf_float+0x128>
 80078ea:	6863      	ldr	r3, [r4, #4]
 80078ec:	4299      	cmp	r1, r3
 80078ee:	dd41      	ble.n	8007974 <_printf_float+0x1ac>
 80078f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80078f4:	fa5f fa8a 	uxtb.w	sl, sl
 80078f8:	3901      	subs	r1, #1
 80078fa:	4652      	mov	r2, sl
 80078fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007900:	9109      	str	r1, [sp, #36]	@ 0x24
 8007902:	f7ff ff26 	bl	8007752 <__exponent>
 8007906:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007908:	1813      	adds	r3, r2, r0
 800790a:	2a01      	cmp	r2, #1
 800790c:	4681      	mov	r9, r0
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	dc02      	bgt.n	8007918 <_printf_float+0x150>
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	07d2      	lsls	r2, r2, #31
 8007916:	d501      	bpl.n	800791c <_printf_float+0x154>
 8007918:	3301      	adds	r3, #1
 800791a:	6123      	str	r3, [r4, #16]
 800791c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0a2      	beq.n	800786a <_printf_float+0xa2>
 8007924:	232d      	movs	r3, #45	@ 0x2d
 8007926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800792a:	e79e      	b.n	800786a <_printf_float+0xa2>
 800792c:	9a06      	ldr	r2, [sp, #24]
 800792e:	2a47      	cmp	r2, #71	@ 0x47
 8007930:	d1c2      	bne.n	80078b8 <_printf_float+0xf0>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1c0      	bne.n	80078b8 <_printf_float+0xf0>
 8007936:	2301      	movs	r3, #1
 8007938:	e7bd      	b.n	80078b6 <_printf_float+0xee>
 800793a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800793e:	d9db      	bls.n	80078f8 <_printf_float+0x130>
 8007940:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007944:	d118      	bne.n	8007978 <_printf_float+0x1b0>
 8007946:	2900      	cmp	r1, #0
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	dd0b      	ble.n	8007964 <_printf_float+0x19c>
 800794c:	6121      	str	r1, [r4, #16]
 800794e:	b913      	cbnz	r3, 8007956 <_printf_float+0x18e>
 8007950:	6822      	ldr	r2, [r4, #0]
 8007952:	07d0      	lsls	r0, r2, #31
 8007954:	d502      	bpl.n	800795c <_printf_float+0x194>
 8007956:	3301      	adds	r3, #1
 8007958:	440b      	add	r3, r1
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	e7db      	b.n	800791c <_printf_float+0x154>
 8007964:	b913      	cbnz	r3, 800796c <_printf_float+0x1a4>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	07d2      	lsls	r2, r2, #31
 800796a:	d501      	bpl.n	8007970 <_printf_float+0x1a8>
 800796c:	3302      	adds	r3, #2
 800796e:	e7f4      	b.n	800795a <_printf_float+0x192>
 8007970:	2301      	movs	r3, #1
 8007972:	e7f2      	b.n	800795a <_printf_float+0x192>
 8007974:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800797a:	4299      	cmp	r1, r3
 800797c:	db05      	blt.n	800798a <_printf_float+0x1c2>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	6121      	str	r1, [r4, #16]
 8007982:	07d8      	lsls	r0, r3, #31
 8007984:	d5ea      	bpl.n	800795c <_printf_float+0x194>
 8007986:	1c4b      	adds	r3, r1, #1
 8007988:	e7e7      	b.n	800795a <_printf_float+0x192>
 800798a:	2900      	cmp	r1, #0
 800798c:	bfd4      	ite	le
 800798e:	f1c1 0202 	rsble	r2, r1, #2
 8007992:	2201      	movgt	r2, #1
 8007994:	4413      	add	r3, r2
 8007996:	e7e0      	b.n	800795a <_printf_float+0x192>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	055a      	lsls	r2, r3, #21
 800799c:	d407      	bmi.n	80079ae <_printf_float+0x1e6>
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	4642      	mov	r2, r8
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	d12b      	bne.n	8007a04 <_printf_float+0x23c>
 80079ac:	e767      	b.n	800787e <_printf_float+0xb6>
 80079ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079b2:	f240 80dd 	bls.w	8007b70 <_printf_float+0x3a8>
 80079b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079ba:	2200      	movs	r2, #0
 80079bc:	2300      	movs	r3, #0
 80079be:	f7f9 f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d033      	beq.n	8007a2e <_printf_float+0x266>
 80079c6:	4a37      	ldr	r2, [pc, #220]	@ (8007aa4 <_printf_float+0x2dc>)
 80079c8:	2301      	movs	r3, #1
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	f43f af54 	beq.w	800787e <_printf_float+0xb6>
 80079d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079da:	4543      	cmp	r3, r8
 80079dc:	db02      	blt.n	80079e4 <_printf_float+0x21c>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	07d8      	lsls	r0, r3, #31
 80079e2:	d50f      	bpl.n	8007a04 <_printf_float+0x23c>
 80079e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af45 	beq.w	800787e <_printf_float+0xb6>
 80079f4:	f04f 0900 	mov.w	r9, #0
 80079f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80079fc:	f104 0a1a 	add.w	sl, r4, #26
 8007a00:	45c8      	cmp	r8, r9
 8007a02:	dc09      	bgt.n	8007a18 <_printf_float+0x250>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	079b      	lsls	r3, r3, #30
 8007a08:	f100 8103 	bmi.w	8007c12 <_printf_float+0x44a>
 8007a0c:	68e0      	ldr	r0, [r4, #12]
 8007a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a10:	4298      	cmp	r0, r3
 8007a12:	bfb8      	it	lt
 8007a14:	4618      	movlt	r0, r3
 8007a16:	e734      	b.n	8007882 <_printf_float+0xba>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	f43f af2b 	beq.w	800787e <_printf_float+0xb6>
 8007a28:	f109 0901 	add.w	r9, r9, #1
 8007a2c:	e7e8      	b.n	8007a00 <_printf_float+0x238>
 8007a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	dc39      	bgt.n	8007aa8 <_printf_float+0x2e0>
 8007a34:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa4 <_printf_float+0x2dc>)
 8007a36:	2301      	movs	r3, #1
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f af1d 	beq.w	800787e <_printf_float+0xb6>
 8007a44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a48:	ea59 0303 	orrs.w	r3, r9, r3
 8007a4c:	d102      	bne.n	8007a54 <_printf_float+0x28c>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	07d9      	lsls	r1, r3, #31
 8007a52:	d5d7      	bpl.n	8007a04 <_printf_float+0x23c>
 8007a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f af0d 	beq.w	800787e <_printf_float+0xb6>
 8007a64:	f04f 0a00 	mov.w	sl, #0
 8007a68:	f104 0b1a 	add.w	fp, r4, #26
 8007a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6e:	425b      	negs	r3, r3
 8007a70:	4553      	cmp	r3, sl
 8007a72:	dc01      	bgt.n	8007a78 <_printf_float+0x2b0>
 8007a74:	464b      	mov	r3, r9
 8007a76:	e793      	b.n	80079a0 <_printf_float+0x1d8>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	465a      	mov	r2, fp
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f aefb 	beq.w	800787e <_printf_float+0xb6>
 8007a88:	f10a 0a01 	add.w	sl, sl, #1
 8007a8c:	e7ee      	b.n	8007a6c <_printf_float+0x2a4>
 8007a8e:	bf00      	nop
 8007a90:	7fefffff 	.word	0x7fefffff
 8007a94:	0800be5c 	.word	0x0800be5c
 8007a98:	0800be60 	.word	0x0800be60
 8007a9c:	0800be64 	.word	0x0800be64
 8007aa0:	0800be68 	.word	0x0800be68
 8007aa4:	0800be6c 	.word	0x0800be6c
 8007aa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007aaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007aae:	4553      	cmp	r3, sl
 8007ab0:	bfa8      	it	ge
 8007ab2:	4653      	movge	r3, sl
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	4699      	mov	r9, r3
 8007ab8:	dc36      	bgt.n	8007b28 <_printf_float+0x360>
 8007aba:	f04f 0b00 	mov.w	fp, #0
 8007abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ac2:	f104 021a 	add.w	r2, r4, #26
 8007ac6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ac8:	9306      	str	r3, [sp, #24]
 8007aca:	eba3 0309 	sub.w	r3, r3, r9
 8007ace:	455b      	cmp	r3, fp
 8007ad0:	dc31      	bgt.n	8007b36 <_printf_float+0x36e>
 8007ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad4:	459a      	cmp	sl, r3
 8007ad6:	dc3a      	bgt.n	8007b4e <_printf_float+0x386>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	07da      	lsls	r2, r3, #31
 8007adc:	d437      	bmi.n	8007b4e <_printf_float+0x386>
 8007ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae0:	ebaa 0903 	sub.w	r9, sl, r3
 8007ae4:	9b06      	ldr	r3, [sp, #24]
 8007ae6:	ebaa 0303 	sub.w	r3, sl, r3
 8007aea:	4599      	cmp	r9, r3
 8007aec:	bfa8      	it	ge
 8007aee:	4699      	movge	r9, r3
 8007af0:	f1b9 0f00 	cmp.w	r9, #0
 8007af4:	dc33      	bgt.n	8007b5e <_printf_float+0x396>
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007afe:	f104 0b1a 	add.w	fp, r4, #26
 8007b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b04:	ebaa 0303 	sub.w	r3, sl, r3
 8007b08:	eba3 0309 	sub.w	r3, r3, r9
 8007b0c:	4543      	cmp	r3, r8
 8007b0e:	f77f af79 	ble.w	8007a04 <_printf_float+0x23c>
 8007b12:	2301      	movs	r3, #1
 8007b14:	465a      	mov	r2, fp
 8007b16:	4631      	mov	r1, r6
 8007b18:	4628      	mov	r0, r5
 8007b1a:	47b8      	blx	r7
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	f43f aeae 	beq.w	800787e <_printf_float+0xb6>
 8007b22:	f108 0801 	add.w	r8, r8, #1
 8007b26:	e7ec      	b.n	8007b02 <_printf_float+0x33a>
 8007b28:	4642      	mov	r2, r8
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b8      	blx	r7
 8007b30:	3001      	adds	r0, #1
 8007b32:	d1c2      	bne.n	8007aba <_printf_float+0x2f2>
 8007b34:	e6a3      	b.n	800787e <_printf_float+0xb6>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	9206      	str	r2, [sp, #24]
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f ae9c 	beq.w	800787e <_printf_float+0xb6>
 8007b46:	9a06      	ldr	r2, [sp, #24]
 8007b48:	f10b 0b01 	add.w	fp, fp, #1
 8007b4c:	e7bb      	b.n	8007ac6 <_printf_float+0x2fe>
 8007b4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d1c0      	bne.n	8007ade <_printf_float+0x316>
 8007b5c:	e68f      	b.n	800787e <_printf_float+0xb6>
 8007b5e:	9a06      	ldr	r2, [sp, #24]
 8007b60:	464b      	mov	r3, r9
 8007b62:	4442      	add	r2, r8
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d1c3      	bne.n	8007af6 <_printf_float+0x32e>
 8007b6e:	e686      	b.n	800787e <_printf_float+0xb6>
 8007b70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b74:	f1ba 0f01 	cmp.w	sl, #1
 8007b78:	dc01      	bgt.n	8007b7e <_printf_float+0x3b6>
 8007b7a:	07db      	lsls	r3, r3, #31
 8007b7c:	d536      	bpl.n	8007bec <_printf_float+0x424>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4642      	mov	r2, r8
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f ae78 	beq.w	800787e <_printf_float+0xb6>
 8007b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f ae70 	beq.w	800787e <_printf_float+0xb6>
 8007b9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007baa:	f7f8 ff95 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bae:	b9c0      	cbnz	r0, 8007be2 <_printf_float+0x41a>
 8007bb0:	4653      	mov	r3, sl
 8007bb2:	f108 0201 	add.w	r2, r8, #1
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d10c      	bne.n	8007bda <_printf_float+0x412>
 8007bc0:	e65d      	b.n	800787e <_printf_float+0xb6>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	465a      	mov	r2, fp
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f ae56 	beq.w	800787e <_printf_float+0xb6>
 8007bd2:	f108 0801 	add.w	r8, r8, #1
 8007bd6:	45d0      	cmp	r8, sl
 8007bd8:	dbf3      	blt.n	8007bc2 <_printf_float+0x3fa>
 8007bda:	464b      	mov	r3, r9
 8007bdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007be0:	e6df      	b.n	80079a2 <_printf_float+0x1da>
 8007be2:	f04f 0800 	mov.w	r8, #0
 8007be6:	f104 0b1a 	add.w	fp, r4, #26
 8007bea:	e7f4      	b.n	8007bd6 <_printf_float+0x40e>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4642      	mov	r2, r8
 8007bf0:	e7e1      	b.n	8007bb6 <_printf_float+0x3ee>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	464a      	mov	r2, r9
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f43f ae3e 	beq.w	800787e <_printf_float+0xb6>
 8007c02:	f108 0801 	add.w	r8, r8, #1
 8007c06:	68e3      	ldr	r3, [r4, #12]
 8007c08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c0a:	1a5b      	subs	r3, r3, r1
 8007c0c:	4543      	cmp	r3, r8
 8007c0e:	dcf0      	bgt.n	8007bf2 <_printf_float+0x42a>
 8007c10:	e6fc      	b.n	8007a0c <_printf_float+0x244>
 8007c12:	f04f 0800 	mov.w	r8, #0
 8007c16:	f104 0919 	add.w	r9, r4, #25
 8007c1a:	e7f4      	b.n	8007c06 <_printf_float+0x43e>

08007c1c <_printf_common>:
 8007c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c20:	4616      	mov	r6, r2
 8007c22:	4698      	mov	r8, r3
 8007c24:	688a      	ldr	r2, [r1, #8]
 8007c26:	690b      	ldr	r3, [r1, #16]
 8007c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	bfb8      	it	lt
 8007c30:	4613      	movlt	r3, r2
 8007c32:	6033      	str	r3, [r6, #0]
 8007c34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c38:	4607      	mov	r7, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	b10a      	cbz	r2, 8007c42 <_printf_common+0x26>
 8007c3e:	3301      	adds	r3, #1
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	0699      	lsls	r1, r3, #26
 8007c46:	bf42      	ittt	mi
 8007c48:	6833      	ldrmi	r3, [r6, #0]
 8007c4a:	3302      	addmi	r3, #2
 8007c4c:	6033      	strmi	r3, [r6, #0]
 8007c4e:	6825      	ldr	r5, [r4, #0]
 8007c50:	f015 0506 	ands.w	r5, r5, #6
 8007c54:	d106      	bne.n	8007c64 <_printf_common+0x48>
 8007c56:	f104 0a19 	add.w	sl, r4, #25
 8007c5a:	68e3      	ldr	r3, [r4, #12]
 8007c5c:	6832      	ldr	r2, [r6, #0]
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	dc26      	bgt.n	8007cb2 <_printf_common+0x96>
 8007c64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	3b00      	subs	r3, #0
 8007c6c:	bf18      	it	ne
 8007c6e:	2301      	movne	r3, #1
 8007c70:	0692      	lsls	r2, r2, #26
 8007c72:	d42b      	bmi.n	8007ccc <_printf_common+0xb0>
 8007c74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c78:	4641      	mov	r1, r8
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	47c8      	blx	r9
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d01e      	beq.n	8007cc0 <_printf_common+0xa4>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	6922      	ldr	r2, [r4, #16]
 8007c86:	f003 0306 	and.w	r3, r3, #6
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	bf02      	ittt	eq
 8007c8e:	68e5      	ldreq	r5, [r4, #12]
 8007c90:	6833      	ldreq	r3, [r6, #0]
 8007c92:	1aed      	subeq	r5, r5, r3
 8007c94:	68a3      	ldr	r3, [r4, #8]
 8007c96:	bf0c      	ite	eq
 8007c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c9c:	2500      	movne	r5, #0
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	bfc4      	itt	gt
 8007ca2:	1a9b      	subgt	r3, r3, r2
 8007ca4:	18ed      	addgt	r5, r5, r3
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	341a      	adds	r4, #26
 8007caa:	42b5      	cmp	r5, r6
 8007cac:	d11a      	bne.n	8007ce4 <_printf_common+0xc8>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e008      	b.n	8007cc4 <_printf_common+0xa8>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	4638      	mov	r0, r7
 8007cba:	47c8      	blx	r9
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d103      	bne.n	8007cc8 <_printf_common+0xac>
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc8:	3501      	adds	r5, #1
 8007cca:	e7c6      	b.n	8007c5a <_printf_common+0x3e>
 8007ccc:	18e1      	adds	r1, r4, r3
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	2030      	movs	r0, #48	@ 0x30
 8007cd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cd6:	4422      	add	r2, r4
 8007cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	e7c7      	b.n	8007c74 <_printf_common+0x58>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	4641      	mov	r1, r8
 8007cea:	4638      	mov	r0, r7
 8007cec:	47c8      	blx	r9
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d0e6      	beq.n	8007cc0 <_printf_common+0xa4>
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7d9      	b.n	8007caa <_printf_common+0x8e>
	...

08007cf8 <_printf_i>:
 8007cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfc:	7e0f      	ldrb	r7, [r1, #24]
 8007cfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d00:	2f78      	cmp	r7, #120	@ 0x78
 8007d02:	4691      	mov	r9, r2
 8007d04:	4680      	mov	r8, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	469a      	mov	sl, r3
 8007d0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d0e:	d807      	bhi.n	8007d20 <_printf_i+0x28>
 8007d10:	2f62      	cmp	r7, #98	@ 0x62
 8007d12:	d80a      	bhi.n	8007d2a <_printf_i+0x32>
 8007d14:	2f00      	cmp	r7, #0
 8007d16:	f000 80d2 	beq.w	8007ebe <_printf_i+0x1c6>
 8007d1a:	2f58      	cmp	r7, #88	@ 0x58
 8007d1c:	f000 80b9 	beq.w	8007e92 <_printf_i+0x19a>
 8007d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d28:	e03a      	b.n	8007da0 <_printf_i+0xa8>
 8007d2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d2e:	2b15      	cmp	r3, #21
 8007d30:	d8f6      	bhi.n	8007d20 <_printf_i+0x28>
 8007d32:	a101      	add	r1, pc, #4	@ (adr r1, 8007d38 <_printf_i+0x40>)
 8007d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d38:	08007d91 	.word	0x08007d91
 8007d3c:	08007da5 	.word	0x08007da5
 8007d40:	08007d21 	.word	0x08007d21
 8007d44:	08007d21 	.word	0x08007d21
 8007d48:	08007d21 	.word	0x08007d21
 8007d4c:	08007d21 	.word	0x08007d21
 8007d50:	08007da5 	.word	0x08007da5
 8007d54:	08007d21 	.word	0x08007d21
 8007d58:	08007d21 	.word	0x08007d21
 8007d5c:	08007d21 	.word	0x08007d21
 8007d60:	08007d21 	.word	0x08007d21
 8007d64:	08007ea5 	.word	0x08007ea5
 8007d68:	08007dcf 	.word	0x08007dcf
 8007d6c:	08007e5f 	.word	0x08007e5f
 8007d70:	08007d21 	.word	0x08007d21
 8007d74:	08007d21 	.word	0x08007d21
 8007d78:	08007ec7 	.word	0x08007ec7
 8007d7c:	08007d21 	.word	0x08007d21
 8007d80:	08007dcf 	.word	0x08007dcf
 8007d84:	08007d21 	.word	0x08007d21
 8007d88:	08007d21 	.word	0x08007d21
 8007d8c:	08007e67 	.word	0x08007e67
 8007d90:	6833      	ldr	r3, [r6, #0]
 8007d92:	1d1a      	adds	r2, r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6032      	str	r2, [r6, #0]
 8007d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007da0:	2301      	movs	r3, #1
 8007da2:	e09d      	b.n	8007ee0 <_printf_i+0x1e8>
 8007da4:	6833      	ldr	r3, [r6, #0]
 8007da6:	6820      	ldr	r0, [r4, #0]
 8007da8:	1d19      	adds	r1, r3, #4
 8007daa:	6031      	str	r1, [r6, #0]
 8007dac:	0606      	lsls	r6, r0, #24
 8007dae:	d501      	bpl.n	8007db4 <_printf_i+0xbc>
 8007db0:	681d      	ldr	r5, [r3, #0]
 8007db2:	e003      	b.n	8007dbc <_printf_i+0xc4>
 8007db4:	0645      	lsls	r5, r0, #25
 8007db6:	d5fb      	bpl.n	8007db0 <_printf_i+0xb8>
 8007db8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007dbc:	2d00      	cmp	r5, #0
 8007dbe:	da03      	bge.n	8007dc8 <_printf_i+0xd0>
 8007dc0:	232d      	movs	r3, #45	@ 0x2d
 8007dc2:	426d      	negs	r5, r5
 8007dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dc8:	4859      	ldr	r0, [pc, #356]	@ (8007f30 <_printf_i+0x238>)
 8007dca:	230a      	movs	r3, #10
 8007dcc:	e011      	b.n	8007df2 <_printf_i+0xfa>
 8007dce:	6821      	ldr	r1, [r4, #0]
 8007dd0:	6833      	ldr	r3, [r6, #0]
 8007dd2:	0608      	lsls	r0, r1, #24
 8007dd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dd8:	d402      	bmi.n	8007de0 <_printf_i+0xe8>
 8007dda:	0649      	lsls	r1, r1, #25
 8007ddc:	bf48      	it	mi
 8007dde:	b2ad      	uxthmi	r5, r5
 8007de0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007de2:	4853      	ldr	r0, [pc, #332]	@ (8007f30 <_printf_i+0x238>)
 8007de4:	6033      	str	r3, [r6, #0]
 8007de6:	bf14      	ite	ne
 8007de8:	230a      	movne	r3, #10
 8007dea:	2308      	moveq	r3, #8
 8007dec:	2100      	movs	r1, #0
 8007dee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007df2:	6866      	ldr	r6, [r4, #4]
 8007df4:	60a6      	str	r6, [r4, #8]
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	bfa2      	ittt	ge
 8007dfa:	6821      	ldrge	r1, [r4, #0]
 8007dfc:	f021 0104 	bicge.w	r1, r1, #4
 8007e00:	6021      	strge	r1, [r4, #0]
 8007e02:	b90d      	cbnz	r5, 8007e08 <_printf_i+0x110>
 8007e04:	2e00      	cmp	r6, #0
 8007e06:	d04b      	beq.n	8007ea0 <_printf_i+0x1a8>
 8007e08:	4616      	mov	r6, r2
 8007e0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e0e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e12:	5dc7      	ldrb	r7, [r0, r7]
 8007e14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e18:	462f      	mov	r7, r5
 8007e1a:	42bb      	cmp	r3, r7
 8007e1c:	460d      	mov	r5, r1
 8007e1e:	d9f4      	bls.n	8007e0a <_printf_i+0x112>
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d10b      	bne.n	8007e3c <_printf_i+0x144>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	07df      	lsls	r7, r3, #31
 8007e28:	d508      	bpl.n	8007e3c <_printf_i+0x144>
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	6861      	ldr	r1, [r4, #4]
 8007e2e:	4299      	cmp	r1, r3
 8007e30:	bfde      	ittt	le
 8007e32:	2330      	movle	r3, #48	@ 0x30
 8007e34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e3c:	1b92      	subs	r2, r2, r6
 8007e3e:	6122      	str	r2, [r4, #16]
 8007e40:	f8cd a000 	str.w	sl, [sp]
 8007e44:	464b      	mov	r3, r9
 8007e46:	aa03      	add	r2, sp, #12
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	f7ff fee6 	bl	8007c1c <_printf_common>
 8007e50:	3001      	adds	r0, #1
 8007e52:	d14a      	bne.n	8007eea <_printf_i+0x1f2>
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	b004      	add	sp, #16
 8007e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	f043 0320 	orr.w	r3, r3, #32
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	4833      	ldr	r0, [pc, #204]	@ (8007f34 <_printf_i+0x23c>)
 8007e68:	2778      	movs	r7, #120	@ 0x78
 8007e6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	6831      	ldr	r1, [r6, #0]
 8007e72:	061f      	lsls	r7, r3, #24
 8007e74:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e78:	d402      	bmi.n	8007e80 <_printf_i+0x188>
 8007e7a:	065f      	lsls	r7, r3, #25
 8007e7c:	bf48      	it	mi
 8007e7e:	b2ad      	uxthmi	r5, r5
 8007e80:	6031      	str	r1, [r6, #0]
 8007e82:	07d9      	lsls	r1, r3, #31
 8007e84:	bf44      	itt	mi
 8007e86:	f043 0320 	orrmi.w	r3, r3, #32
 8007e8a:	6023      	strmi	r3, [r4, #0]
 8007e8c:	b11d      	cbz	r5, 8007e96 <_printf_i+0x19e>
 8007e8e:	2310      	movs	r3, #16
 8007e90:	e7ac      	b.n	8007dec <_printf_i+0xf4>
 8007e92:	4827      	ldr	r0, [pc, #156]	@ (8007f30 <_printf_i+0x238>)
 8007e94:	e7e9      	b.n	8007e6a <_printf_i+0x172>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f023 0320 	bic.w	r3, r3, #32
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	e7f6      	b.n	8007e8e <_printf_i+0x196>
 8007ea0:	4616      	mov	r6, r2
 8007ea2:	e7bd      	b.n	8007e20 <_printf_i+0x128>
 8007ea4:	6833      	ldr	r3, [r6, #0]
 8007ea6:	6825      	ldr	r5, [r4, #0]
 8007ea8:	6961      	ldr	r1, [r4, #20]
 8007eaa:	1d18      	adds	r0, r3, #4
 8007eac:	6030      	str	r0, [r6, #0]
 8007eae:	062e      	lsls	r6, r5, #24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_i+0x1c0>
 8007eb4:	6019      	str	r1, [r3, #0]
 8007eb6:	e002      	b.n	8007ebe <_printf_i+0x1c6>
 8007eb8:	0668      	lsls	r0, r5, #25
 8007eba:	d5fb      	bpl.n	8007eb4 <_printf_i+0x1bc>
 8007ebc:	8019      	strh	r1, [r3, #0]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	4616      	mov	r6, r2
 8007ec4:	e7bc      	b.n	8007e40 <_printf_i+0x148>
 8007ec6:	6833      	ldr	r3, [r6, #0]
 8007ec8:	1d1a      	adds	r2, r3, #4
 8007eca:	6032      	str	r2, [r6, #0]
 8007ecc:	681e      	ldr	r6, [r3, #0]
 8007ece:	6862      	ldr	r2, [r4, #4]
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7f8 f984 	bl	80001e0 <memchr>
 8007ed8:	b108      	cbz	r0, 8007ede <_printf_i+0x1e6>
 8007eda:	1b80      	subs	r0, r0, r6
 8007edc:	6060      	str	r0, [r4, #4]
 8007ede:	6863      	ldr	r3, [r4, #4]
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ee8:	e7aa      	b.n	8007e40 <_printf_i+0x148>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	4632      	mov	r2, r6
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	47d0      	blx	sl
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d0ad      	beq.n	8007e54 <_printf_i+0x15c>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	079b      	lsls	r3, r3, #30
 8007efc:	d413      	bmi.n	8007f26 <_printf_i+0x22e>
 8007efe:	68e0      	ldr	r0, [r4, #12]
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	4298      	cmp	r0, r3
 8007f04:	bfb8      	it	lt
 8007f06:	4618      	movlt	r0, r3
 8007f08:	e7a6      	b.n	8007e58 <_printf_i+0x160>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	4649      	mov	r1, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	47d0      	blx	sl
 8007f14:	3001      	adds	r0, #1
 8007f16:	d09d      	beq.n	8007e54 <_printf_i+0x15c>
 8007f18:	3501      	adds	r5, #1
 8007f1a:	68e3      	ldr	r3, [r4, #12]
 8007f1c:	9903      	ldr	r1, [sp, #12]
 8007f1e:	1a5b      	subs	r3, r3, r1
 8007f20:	42ab      	cmp	r3, r5
 8007f22:	dcf2      	bgt.n	8007f0a <_printf_i+0x212>
 8007f24:	e7eb      	b.n	8007efe <_printf_i+0x206>
 8007f26:	2500      	movs	r5, #0
 8007f28:	f104 0619 	add.w	r6, r4, #25
 8007f2c:	e7f5      	b.n	8007f1a <_printf_i+0x222>
 8007f2e:	bf00      	nop
 8007f30:	0800be6e 	.word	0x0800be6e
 8007f34:	0800be7f 	.word	0x0800be7f

08007f38 <_scanf_float>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	b087      	sub	sp, #28
 8007f3e:	4617      	mov	r7, r2
 8007f40:	9303      	str	r3, [sp, #12]
 8007f42:	688b      	ldr	r3, [r1, #8]
 8007f44:	1e5a      	subs	r2, r3, #1
 8007f46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f4a:	bf81      	itttt	hi
 8007f4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f50:	eb03 0b05 	addhi.w	fp, r3, r5
 8007f54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f58:	608b      	strhi	r3, [r1, #8]
 8007f5a:	680b      	ldr	r3, [r1, #0]
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	f04f 0500 	mov.w	r5, #0
 8007f62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007f66:	f842 3b1c 	str.w	r3, [r2], #28
 8007f6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f6e:	4680      	mov	r8, r0
 8007f70:	460c      	mov	r4, r1
 8007f72:	bf98      	it	ls
 8007f74:	f04f 0b00 	movls.w	fp, #0
 8007f78:	9201      	str	r2, [sp, #4]
 8007f7a:	4616      	mov	r6, r2
 8007f7c:	46aa      	mov	sl, r5
 8007f7e:	46a9      	mov	r9, r5
 8007f80:	9502      	str	r5, [sp, #8]
 8007f82:	68a2      	ldr	r2, [r4, #8]
 8007f84:	b152      	cbz	r2, 8007f9c <_scanf_float+0x64>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f8c:	d864      	bhi.n	8008058 <_scanf_float+0x120>
 8007f8e:	2b40      	cmp	r3, #64	@ 0x40
 8007f90:	d83c      	bhi.n	800800c <_scanf_float+0xd4>
 8007f92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007f96:	b2c8      	uxtb	r0, r1
 8007f98:	280e      	cmp	r0, #14
 8007f9a:	d93a      	bls.n	8008012 <_scanf_float+0xda>
 8007f9c:	f1b9 0f00 	cmp.w	r9, #0
 8007fa0:	d003      	beq.n	8007faa <_scanf_float+0x72>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fae:	f1ba 0f01 	cmp.w	sl, #1
 8007fb2:	f200 8117 	bhi.w	80081e4 <_scanf_float+0x2ac>
 8007fb6:	9b01      	ldr	r3, [sp, #4]
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	f200 8108 	bhi.w	80081ce <_scanf_float+0x296>
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	b007      	add	sp, #28
 8007fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007fca:	2a0d      	cmp	r2, #13
 8007fcc:	d8e6      	bhi.n	8007f9c <_scanf_float+0x64>
 8007fce:	a101      	add	r1, pc, #4	@ (adr r1, 8007fd4 <_scanf_float+0x9c>)
 8007fd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fd4:	0800811b 	.word	0x0800811b
 8007fd8:	08007f9d 	.word	0x08007f9d
 8007fdc:	08007f9d 	.word	0x08007f9d
 8007fe0:	08007f9d 	.word	0x08007f9d
 8007fe4:	0800817b 	.word	0x0800817b
 8007fe8:	08008153 	.word	0x08008153
 8007fec:	08007f9d 	.word	0x08007f9d
 8007ff0:	08007f9d 	.word	0x08007f9d
 8007ff4:	08008129 	.word	0x08008129
 8007ff8:	08007f9d 	.word	0x08007f9d
 8007ffc:	08007f9d 	.word	0x08007f9d
 8008000:	08007f9d 	.word	0x08007f9d
 8008004:	08007f9d 	.word	0x08007f9d
 8008008:	080080e1 	.word	0x080080e1
 800800c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008010:	e7db      	b.n	8007fca <_scanf_float+0x92>
 8008012:	290e      	cmp	r1, #14
 8008014:	d8c2      	bhi.n	8007f9c <_scanf_float+0x64>
 8008016:	a001      	add	r0, pc, #4	@ (adr r0, 800801c <_scanf_float+0xe4>)
 8008018:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800801c:	080080d1 	.word	0x080080d1
 8008020:	08007f9d 	.word	0x08007f9d
 8008024:	080080d1 	.word	0x080080d1
 8008028:	08008167 	.word	0x08008167
 800802c:	08007f9d 	.word	0x08007f9d
 8008030:	08008079 	.word	0x08008079
 8008034:	080080b7 	.word	0x080080b7
 8008038:	080080b7 	.word	0x080080b7
 800803c:	080080b7 	.word	0x080080b7
 8008040:	080080b7 	.word	0x080080b7
 8008044:	080080b7 	.word	0x080080b7
 8008048:	080080b7 	.word	0x080080b7
 800804c:	080080b7 	.word	0x080080b7
 8008050:	080080b7 	.word	0x080080b7
 8008054:	080080b7 	.word	0x080080b7
 8008058:	2b6e      	cmp	r3, #110	@ 0x6e
 800805a:	d809      	bhi.n	8008070 <_scanf_float+0x138>
 800805c:	2b60      	cmp	r3, #96	@ 0x60
 800805e:	d8b2      	bhi.n	8007fc6 <_scanf_float+0x8e>
 8008060:	2b54      	cmp	r3, #84	@ 0x54
 8008062:	d07b      	beq.n	800815c <_scanf_float+0x224>
 8008064:	2b59      	cmp	r3, #89	@ 0x59
 8008066:	d199      	bne.n	8007f9c <_scanf_float+0x64>
 8008068:	2d07      	cmp	r5, #7
 800806a:	d197      	bne.n	8007f9c <_scanf_float+0x64>
 800806c:	2508      	movs	r5, #8
 800806e:	e02c      	b.n	80080ca <_scanf_float+0x192>
 8008070:	2b74      	cmp	r3, #116	@ 0x74
 8008072:	d073      	beq.n	800815c <_scanf_float+0x224>
 8008074:	2b79      	cmp	r3, #121	@ 0x79
 8008076:	e7f6      	b.n	8008066 <_scanf_float+0x12e>
 8008078:	6821      	ldr	r1, [r4, #0]
 800807a:	05c8      	lsls	r0, r1, #23
 800807c:	d51b      	bpl.n	80080b6 <_scanf_float+0x17e>
 800807e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008082:	6021      	str	r1, [r4, #0]
 8008084:	f109 0901 	add.w	r9, r9, #1
 8008088:	f1bb 0f00 	cmp.w	fp, #0
 800808c:	d003      	beq.n	8008096 <_scanf_float+0x15e>
 800808e:	3201      	adds	r2, #1
 8008090:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008094:	60a2      	str	r2, [r4, #8]
 8008096:	68a3      	ldr	r3, [r4, #8]
 8008098:	3b01      	subs	r3, #1
 800809a:	60a3      	str	r3, [r4, #8]
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	3301      	adds	r3, #1
 80080a0:	6123      	str	r3, [r4, #16]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	607b      	str	r3, [r7, #4]
 80080aa:	f340 8087 	ble.w	80081bc <_scanf_float+0x284>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	e765      	b.n	8007f82 <_scanf_float+0x4a>
 80080b6:	eb1a 0105 	adds.w	r1, sl, r5
 80080ba:	f47f af6f 	bne.w	8007f9c <_scanf_float+0x64>
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80080c4:	6022      	str	r2, [r4, #0]
 80080c6:	460d      	mov	r5, r1
 80080c8:	468a      	mov	sl, r1
 80080ca:	f806 3b01 	strb.w	r3, [r6], #1
 80080ce:	e7e2      	b.n	8008096 <_scanf_float+0x15e>
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	0610      	lsls	r0, r2, #24
 80080d4:	f57f af62 	bpl.w	8007f9c <_scanf_float+0x64>
 80080d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080dc:	6022      	str	r2, [r4, #0]
 80080de:	e7f4      	b.n	80080ca <_scanf_float+0x192>
 80080e0:	f1ba 0f00 	cmp.w	sl, #0
 80080e4:	d10e      	bne.n	8008104 <_scanf_float+0x1cc>
 80080e6:	f1b9 0f00 	cmp.w	r9, #0
 80080ea:	d10e      	bne.n	800810a <_scanf_float+0x1d2>
 80080ec:	6822      	ldr	r2, [r4, #0]
 80080ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80080f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80080f6:	d108      	bne.n	800810a <_scanf_float+0x1d2>
 80080f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080fc:	6022      	str	r2, [r4, #0]
 80080fe:	f04f 0a01 	mov.w	sl, #1
 8008102:	e7e2      	b.n	80080ca <_scanf_float+0x192>
 8008104:	f1ba 0f02 	cmp.w	sl, #2
 8008108:	d055      	beq.n	80081b6 <_scanf_float+0x27e>
 800810a:	2d01      	cmp	r5, #1
 800810c:	d002      	beq.n	8008114 <_scanf_float+0x1dc>
 800810e:	2d04      	cmp	r5, #4
 8008110:	f47f af44 	bne.w	8007f9c <_scanf_float+0x64>
 8008114:	3501      	adds	r5, #1
 8008116:	b2ed      	uxtb	r5, r5
 8008118:	e7d7      	b.n	80080ca <_scanf_float+0x192>
 800811a:	f1ba 0f01 	cmp.w	sl, #1
 800811e:	f47f af3d 	bne.w	8007f9c <_scanf_float+0x64>
 8008122:	f04f 0a02 	mov.w	sl, #2
 8008126:	e7d0      	b.n	80080ca <_scanf_float+0x192>
 8008128:	b97d      	cbnz	r5, 800814a <_scanf_float+0x212>
 800812a:	f1b9 0f00 	cmp.w	r9, #0
 800812e:	f47f af38 	bne.w	8007fa2 <_scanf_float+0x6a>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008138:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800813c:	f040 8108 	bne.w	8008350 <_scanf_float+0x418>
 8008140:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008144:	6022      	str	r2, [r4, #0]
 8008146:	2501      	movs	r5, #1
 8008148:	e7bf      	b.n	80080ca <_scanf_float+0x192>
 800814a:	2d03      	cmp	r5, #3
 800814c:	d0e2      	beq.n	8008114 <_scanf_float+0x1dc>
 800814e:	2d05      	cmp	r5, #5
 8008150:	e7de      	b.n	8008110 <_scanf_float+0x1d8>
 8008152:	2d02      	cmp	r5, #2
 8008154:	f47f af22 	bne.w	8007f9c <_scanf_float+0x64>
 8008158:	2503      	movs	r5, #3
 800815a:	e7b6      	b.n	80080ca <_scanf_float+0x192>
 800815c:	2d06      	cmp	r5, #6
 800815e:	f47f af1d 	bne.w	8007f9c <_scanf_float+0x64>
 8008162:	2507      	movs	r5, #7
 8008164:	e7b1      	b.n	80080ca <_scanf_float+0x192>
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	0591      	lsls	r1, r2, #22
 800816a:	f57f af17 	bpl.w	8007f9c <_scanf_float+0x64>
 800816e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008172:	6022      	str	r2, [r4, #0]
 8008174:	f8cd 9008 	str.w	r9, [sp, #8]
 8008178:	e7a7      	b.n	80080ca <_scanf_float+0x192>
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008180:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008184:	d006      	beq.n	8008194 <_scanf_float+0x25c>
 8008186:	0550      	lsls	r0, r2, #21
 8008188:	f57f af08 	bpl.w	8007f9c <_scanf_float+0x64>
 800818c:	f1b9 0f00 	cmp.w	r9, #0
 8008190:	f000 80de 	beq.w	8008350 <_scanf_float+0x418>
 8008194:	0591      	lsls	r1, r2, #22
 8008196:	bf58      	it	pl
 8008198:	9902      	ldrpl	r1, [sp, #8]
 800819a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800819e:	bf58      	it	pl
 80081a0:	eba9 0101 	subpl.w	r1, r9, r1
 80081a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80081a8:	bf58      	it	pl
 80081aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081ae:	6022      	str	r2, [r4, #0]
 80081b0:	f04f 0900 	mov.w	r9, #0
 80081b4:	e789      	b.n	80080ca <_scanf_float+0x192>
 80081b6:	f04f 0a03 	mov.w	sl, #3
 80081ba:	e786      	b.n	80080ca <_scanf_float+0x192>
 80081bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80081c0:	4639      	mov	r1, r7
 80081c2:	4640      	mov	r0, r8
 80081c4:	4798      	blx	r3
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f43f aedb 	beq.w	8007f82 <_scanf_float+0x4a>
 80081cc:	e6e6      	b.n	8007f9c <_scanf_float+0x64>
 80081ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081d6:	463a      	mov	r2, r7
 80081d8:	4640      	mov	r0, r8
 80081da:	4798      	blx	r3
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	3b01      	subs	r3, #1
 80081e0:	6123      	str	r3, [r4, #16]
 80081e2:	e6e8      	b.n	8007fb6 <_scanf_float+0x7e>
 80081e4:	1e6b      	subs	r3, r5, #1
 80081e6:	2b06      	cmp	r3, #6
 80081e8:	d824      	bhi.n	8008234 <_scanf_float+0x2fc>
 80081ea:	2d02      	cmp	r5, #2
 80081ec:	d836      	bhi.n	800825c <_scanf_float+0x324>
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	429e      	cmp	r6, r3
 80081f2:	f67f aee4 	bls.w	8007fbe <_scanf_float+0x86>
 80081f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081fe:	463a      	mov	r2, r7
 8008200:	4640      	mov	r0, r8
 8008202:	4798      	blx	r3
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	3b01      	subs	r3, #1
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	e7f0      	b.n	80081ee <_scanf_float+0x2b6>
 800820c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008210:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008214:	463a      	mov	r2, r7
 8008216:	4640      	mov	r0, r8
 8008218:	4798      	blx	r3
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	3b01      	subs	r3, #1
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008224:	fa5f fa8a 	uxtb.w	sl, sl
 8008228:	f1ba 0f02 	cmp.w	sl, #2
 800822c:	d1ee      	bne.n	800820c <_scanf_float+0x2d4>
 800822e:	3d03      	subs	r5, #3
 8008230:	b2ed      	uxtb	r5, r5
 8008232:	1b76      	subs	r6, r6, r5
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	05da      	lsls	r2, r3, #23
 8008238:	d530      	bpl.n	800829c <_scanf_float+0x364>
 800823a:	055b      	lsls	r3, r3, #21
 800823c:	d511      	bpl.n	8008262 <_scanf_float+0x32a>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	429e      	cmp	r6, r3
 8008242:	f67f aebc 	bls.w	8007fbe <_scanf_float+0x86>
 8008246:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800824a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800824e:	463a      	mov	r2, r7
 8008250:	4640      	mov	r0, r8
 8008252:	4798      	blx	r3
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	3b01      	subs	r3, #1
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	e7f0      	b.n	800823e <_scanf_float+0x306>
 800825c:	46aa      	mov	sl, r5
 800825e:	46b3      	mov	fp, r6
 8008260:	e7de      	b.n	8008220 <_scanf_float+0x2e8>
 8008262:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	2965      	cmp	r1, #101	@ 0x65
 800826a:	f103 33ff 	add.w	r3, r3, #4294967295
 800826e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	d00c      	beq.n	8008290 <_scanf_float+0x358>
 8008276:	2945      	cmp	r1, #69	@ 0x45
 8008278:	d00a      	beq.n	8008290 <_scanf_float+0x358>
 800827a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800827e:	463a      	mov	r2, r7
 8008280:	4640      	mov	r0, r8
 8008282:	4798      	blx	r3
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800828a:	3b01      	subs	r3, #1
 800828c:	1eb5      	subs	r5, r6, #2
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008294:	463a      	mov	r2, r7
 8008296:	4640      	mov	r0, r8
 8008298:	4798      	blx	r3
 800829a:	462e      	mov	r6, r5
 800829c:	6822      	ldr	r2, [r4, #0]
 800829e:	f012 0210 	ands.w	r2, r2, #16
 80082a2:	d001      	beq.n	80082a8 <_scanf_float+0x370>
 80082a4:	2000      	movs	r0, #0
 80082a6:	e68b      	b.n	8007fc0 <_scanf_float+0x88>
 80082a8:	7032      	strb	r2, [r6, #0]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b4:	d11c      	bne.n	80082f0 <_scanf_float+0x3b8>
 80082b6:	9b02      	ldr	r3, [sp, #8]
 80082b8:	454b      	cmp	r3, r9
 80082ba:	eba3 0209 	sub.w	r2, r3, r9
 80082be:	d123      	bne.n	8008308 <_scanf_float+0x3d0>
 80082c0:	9901      	ldr	r1, [sp, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	4640      	mov	r0, r8
 80082c6:	f002 fc2b 	bl	800ab20 <_strtod_r>
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	6821      	ldr	r1, [r4, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f011 0f02 	tst.w	r1, #2
 80082d4:	ec57 6b10 	vmov	r6, r7, d0
 80082d8:	f103 0204 	add.w	r2, r3, #4
 80082dc:	d01f      	beq.n	800831e <_scanf_float+0x3e6>
 80082de:	9903      	ldr	r1, [sp, #12]
 80082e0:	600a      	str	r2, [r1, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	e9c3 6700 	strd	r6, r7, [r3]
 80082e8:	68e3      	ldr	r3, [r4, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60e3      	str	r3, [r4, #12]
 80082ee:	e7d9      	b.n	80082a4 <_scanf_float+0x36c>
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0e4      	beq.n	80082c0 <_scanf_float+0x388>
 80082f6:	9905      	ldr	r1, [sp, #20]
 80082f8:	230a      	movs	r3, #10
 80082fa:	3101      	adds	r1, #1
 80082fc:	4640      	mov	r0, r8
 80082fe:	f002 fc8f 	bl	800ac20 <_strtol_r>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	9e05      	ldr	r6, [sp, #20]
 8008306:	1ac2      	subs	r2, r0, r3
 8008308:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800830c:	429e      	cmp	r6, r3
 800830e:	bf28      	it	cs
 8008310:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008314:	4910      	ldr	r1, [pc, #64]	@ (8008358 <_scanf_float+0x420>)
 8008316:	4630      	mov	r0, r6
 8008318:	f000 f918 	bl	800854c <siprintf>
 800831c:	e7d0      	b.n	80082c0 <_scanf_float+0x388>
 800831e:	f011 0f04 	tst.w	r1, #4
 8008322:	9903      	ldr	r1, [sp, #12]
 8008324:	600a      	str	r2, [r1, #0]
 8008326:	d1dc      	bne.n	80082e2 <_scanf_float+0x3aa>
 8008328:	681d      	ldr	r5, [r3, #0]
 800832a:	4632      	mov	r2, r6
 800832c:	463b      	mov	r3, r7
 800832e:	4630      	mov	r0, r6
 8008330:	4639      	mov	r1, r7
 8008332:	f7f8 fc03 	bl	8000b3c <__aeabi_dcmpun>
 8008336:	b128      	cbz	r0, 8008344 <_scanf_float+0x40c>
 8008338:	4808      	ldr	r0, [pc, #32]	@ (800835c <_scanf_float+0x424>)
 800833a:	f000 f9eb 	bl	8008714 <nanf>
 800833e:	ed85 0a00 	vstr	s0, [r5]
 8008342:	e7d1      	b.n	80082e8 <_scanf_float+0x3b0>
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f8 fc56 	bl	8000bf8 <__aeabi_d2f>
 800834c:	6028      	str	r0, [r5, #0]
 800834e:	e7cb      	b.n	80082e8 <_scanf_float+0x3b0>
 8008350:	f04f 0900 	mov.w	r9, #0
 8008354:	e629      	b.n	8007faa <_scanf_float+0x72>
 8008356:	bf00      	nop
 8008358:	0800be90 	.word	0x0800be90
 800835c:	0800c225 	.word	0x0800c225

08008360 <std>:
 8008360:	2300      	movs	r3, #0
 8008362:	b510      	push	{r4, lr}
 8008364:	4604      	mov	r4, r0
 8008366:	e9c0 3300 	strd	r3, r3, [r0]
 800836a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800836e:	6083      	str	r3, [r0, #8]
 8008370:	8181      	strh	r1, [r0, #12]
 8008372:	6643      	str	r3, [r0, #100]	@ 0x64
 8008374:	81c2      	strh	r2, [r0, #14]
 8008376:	6183      	str	r3, [r0, #24]
 8008378:	4619      	mov	r1, r3
 800837a:	2208      	movs	r2, #8
 800837c:	305c      	adds	r0, #92	@ 0x5c
 800837e:	f000 f948 	bl	8008612 <memset>
 8008382:	4b0d      	ldr	r3, [pc, #52]	@ (80083b8 <std+0x58>)
 8008384:	6263      	str	r3, [r4, #36]	@ 0x24
 8008386:	4b0d      	ldr	r3, [pc, #52]	@ (80083bc <std+0x5c>)
 8008388:	62a3      	str	r3, [r4, #40]	@ 0x28
 800838a:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <std+0x60>)
 800838c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800838e:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <std+0x64>)
 8008390:	6323      	str	r3, [r4, #48]	@ 0x30
 8008392:	4b0d      	ldr	r3, [pc, #52]	@ (80083c8 <std+0x68>)
 8008394:	6224      	str	r4, [r4, #32]
 8008396:	429c      	cmp	r4, r3
 8008398:	d006      	beq.n	80083a8 <std+0x48>
 800839a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800839e:	4294      	cmp	r4, r2
 80083a0:	d002      	beq.n	80083a8 <std+0x48>
 80083a2:	33d0      	adds	r3, #208	@ 0xd0
 80083a4:	429c      	cmp	r4, r3
 80083a6:	d105      	bne.n	80083b4 <std+0x54>
 80083a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b0:	f000 b9ac 	b.w	800870c <__retarget_lock_init_recursive>
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	bf00      	nop
 80083b8:	0800858d 	.word	0x0800858d
 80083bc:	080085af 	.word	0x080085af
 80083c0:	080085e7 	.word	0x080085e7
 80083c4:	0800860b 	.word	0x0800860b
 80083c8:	20000440 	.word	0x20000440

080083cc <stdio_exit_handler>:
 80083cc:	4a02      	ldr	r2, [pc, #8]	@ (80083d8 <stdio_exit_handler+0xc>)
 80083ce:	4903      	ldr	r1, [pc, #12]	@ (80083dc <stdio_exit_handler+0x10>)
 80083d0:	4803      	ldr	r0, [pc, #12]	@ (80083e0 <stdio_exit_handler+0x14>)
 80083d2:	f000 b869 	b.w	80084a8 <_fwalk_sglue>
 80083d6:	bf00      	nop
 80083d8:	20000024 	.word	0x20000024
 80083dc:	0800afdd 	.word	0x0800afdd
 80083e0:	20000034 	.word	0x20000034

080083e4 <cleanup_stdio>:
 80083e4:	6841      	ldr	r1, [r0, #4]
 80083e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008418 <cleanup_stdio+0x34>)
 80083e8:	4299      	cmp	r1, r3
 80083ea:	b510      	push	{r4, lr}
 80083ec:	4604      	mov	r4, r0
 80083ee:	d001      	beq.n	80083f4 <cleanup_stdio+0x10>
 80083f0:	f002 fdf4 	bl	800afdc <_fflush_r>
 80083f4:	68a1      	ldr	r1, [r4, #8]
 80083f6:	4b09      	ldr	r3, [pc, #36]	@ (800841c <cleanup_stdio+0x38>)
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d002      	beq.n	8008402 <cleanup_stdio+0x1e>
 80083fc:	4620      	mov	r0, r4
 80083fe:	f002 fded 	bl	800afdc <_fflush_r>
 8008402:	68e1      	ldr	r1, [r4, #12]
 8008404:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <cleanup_stdio+0x3c>)
 8008406:	4299      	cmp	r1, r3
 8008408:	d004      	beq.n	8008414 <cleanup_stdio+0x30>
 800840a:	4620      	mov	r0, r4
 800840c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008410:	f002 bde4 	b.w	800afdc <_fflush_r>
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	20000440 	.word	0x20000440
 800841c:	200004a8 	.word	0x200004a8
 8008420:	20000510 	.word	0x20000510

08008424 <global_stdio_init.part.0>:
 8008424:	b510      	push	{r4, lr}
 8008426:	4b0b      	ldr	r3, [pc, #44]	@ (8008454 <global_stdio_init.part.0+0x30>)
 8008428:	4c0b      	ldr	r4, [pc, #44]	@ (8008458 <global_stdio_init.part.0+0x34>)
 800842a:	4a0c      	ldr	r2, [pc, #48]	@ (800845c <global_stdio_init.part.0+0x38>)
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	4620      	mov	r0, r4
 8008430:	2200      	movs	r2, #0
 8008432:	2104      	movs	r1, #4
 8008434:	f7ff ff94 	bl	8008360 <std>
 8008438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800843c:	2201      	movs	r2, #1
 800843e:	2109      	movs	r1, #9
 8008440:	f7ff ff8e 	bl	8008360 <std>
 8008444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008448:	2202      	movs	r2, #2
 800844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800844e:	2112      	movs	r1, #18
 8008450:	f7ff bf86 	b.w	8008360 <std>
 8008454:	20000578 	.word	0x20000578
 8008458:	20000440 	.word	0x20000440
 800845c:	080083cd 	.word	0x080083cd

08008460 <__sfp_lock_acquire>:
 8008460:	4801      	ldr	r0, [pc, #4]	@ (8008468 <__sfp_lock_acquire+0x8>)
 8008462:	f000 b954 	b.w	800870e <__retarget_lock_acquire_recursive>
 8008466:	bf00      	nop
 8008468:	20000581 	.word	0x20000581

0800846c <__sfp_lock_release>:
 800846c:	4801      	ldr	r0, [pc, #4]	@ (8008474 <__sfp_lock_release+0x8>)
 800846e:	f000 b94f 	b.w	8008710 <__retarget_lock_release_recursive>
 8008472:	bf00      	nop
 8008474:	20000581 	.word	0x20000581

08008478 <__sinit>:
 8008478:	b510      	push	{r4, lr}
 800847a:	4604      	mov	r4, r0
 800847c:	f7ff fff0 	bl	8008460 <__sfp_lock_acquire>
 8008480:	6a23      	ldr	r3, [r4, #32]
 8008482:	b11b      	cbz	r3, 800848c <__sinit+0x14>
 8008484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008488:	f7ff bff0 	b.w	800846c <__sfp_lock_release>
 800848c:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <__sinit+0x28>)
 800848e:	6223      	str	r3, [r4, #32]
 8008490:	4b04      	ldr	r3, [pc, #16]	@ (80084a4 <__sinit+0x2c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f5      	bne.n	8008484 <__sinit+0xc>
 8008498:	f7ff ffc4 	bl	8008424 <global_stdio_init.part.0>
 800849c:	e7f2      	b.n	8008484 <__sinit+0xc>
 800849e:	bf00      	nop
 80084a0:	080083e5 	.word	0x080083e5
 80084a4:	20000578 	.word	0x20000578

080084a8 <_fwalk_sglue>:
 80084a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ac:	4607      	mov	r7, r0
 80084ae:	4688      	mov	r8, r1
 80084b0:	4614      	mov	r4, r2
 80084b2:	2600      	movs	r6, #0
 80084b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084b8:	f1b9 0901 	subs.w	r9, r9, #1
 80084bc:	d505      	bpl.n	80084ca <_fwalk_sglue+0x22>
 80084be:	6824      	ldr	r4, [r4, #0]
 80084c0:	2c00      	cmp	r4, #0
 80084c2:	d1f7      	bne.n	80084b4 <_fwalk_sglue+0xc>
 80084c4:	4630      	mov	r0, r6
 80084c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ca:	89ab      	ldrh	r3, [r5, #12]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d907      	bls.n	80084e0 <_fwalk_sglue+0x38>
 80084d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084d4:	3301      	adds	r3, #1
 80084d6:	d003      	beq.n	80084e0 <_fwalk_sglue+0x38>
 80084d8:	4629      	mov	r1, r5
 80084da:	4638      	mov	r0, r7
 80084dc:	47c0      	blx	r8
 80084de:	4306      	orrs	r6, r0
 80084e0:	3568      	adds	r5, #104	@ 0x68
 80084e2:	e7e9      	b.n	80084b8 <_fwalk_sglue+0x10>

080084e4 <sniprintf>:
 80084e4:	b40c      	push	{r2, r3}
 80084e6:	b530      	push	{r4, r5, lr}
 80084e8:	4b17      	ldr	r3, [pc, #92]	@ (8008548 <sniprintf+0x64>)
 80084ea:	1e0c      	subs	r4, r1, #0
 80084ec:	681d      	ldr	r5, [r3, #0]
 80084ee:	b09d      	sub	sp, #116	@ 0x74
 80084f0:	da08      	bge.n	8008504 <sniprintf+0x20>
 80084f2:	238b      	movs	r3, #139	@ 0x8b
 80084f4:	602b      	str	r3, [r5, #0]
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	b01d      	add	sp, #116	@ 0x74
 80084fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008500:	b002      	add	sp, #8
 8008502:	4770      	bx	lr
 8008504:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008508:	f8ad 3014 	strh.w	r3, [sp, #20]
 800850c:	bf14      	ite	ne
 800850e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008512:	4623      	moveq	r3, r4
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800851c:	9002      	str	r0, [sp, #8]
 800851e:	9006      	str	r0, [sp, #24]
 8008520:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008524:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008526:	ab21      	add	r3, sp, #132	@ 0x84
 8008528:	a902      	add	r1, sp, #8
 800852a:	4628      	mov	r0, r5
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	f002 fbd5 	bl	800acdc <_svfiprintf_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	bfbc      	itt	lt
 8008536:	238b      	movlt	r3, #139	@ 0x8b
 8008538:	602b      	strlt	r3, [r5, #0]
 800853a:	2c00      	cmp	r4, #0
 800853c:	d0dd      	beq.n	80084fa <sniprintf+0x16>
 800853e:	9b02      	ldr	r3, [sp, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
 8008544:	e7d9      	b.n	80084fa <sniprintf+0x16>
 8008546:	bf00      	nop
 8008548:	20000030 	.word	0x20000030

0800854c <siprintf>:
 800854c:	b40e      	push	{r1, r2, r3}
 800854e:	b500      	push	{lr}
 8008550:	b09c      	sub	sp, #112	@ 0x70
 8008552:	ab1d      	add	r3, sp, #116	@ 0x74
 8008554:	9002      	str	r0, [sp, #8]
 8008556:	9006      	str	r0, [sp, #24]
 8008558:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800855c:	4809      	ldr	r0, [pc, #36]	@ (8008584 <siprintf+0x38>)
 800855e:	9107      	str	r1, [sp, #28]
 8008560:	9104      	str	r1, [sp, #16]
 8008562:	4909      	ldr	r1, [pc, #36]	@ (8008588 <siprintf+0x3c>)
 8008564:	f853 2b04 	ldr.w	r2, [r3], #4
 8008568:	9105      	str	r1, [sp, #20]
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	9301      	str	r3, [sp, #4]
 800856e:	a902      	add	r1, sp, #8
 8008570:	f002 fbb4 	bl	800acdc <_svfiprintf_r>
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	2200      	movs	r2, #0
 8008578:	701a      	strb	r2, [r3, #0]
 800857a:	b01c      	add	sp, #112	@ 0x70
 800857c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008580:	b003      	add	sp, #12
 8008582:	4770      	bx	lr
 8008584:	20000030 	.word	0x20000030
 8008588:	ffff0208 	.word	0xffff0208

0800858c <__sread>:
 800858c:	b510      	push	{r4, lr}
 800858e:	460c      	mov	r4, r1
 8008590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008594:	f000 f86c 	bl	8008670 <_read_r>
 8008598:	2800      	cmp	r0, #0
 800859a:	bfab      	itete	ge
 800859c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800859e:	89a3      	ldrhlt	r3, [r4, #12]
 80085a0:	181b      	addge	r3, r3, r0
 80085a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085a6:	bfac      	ite	ge
 80085a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085aa:	81a3      	strhlt	r3, [r4, #12]
 80085ac:	bd10      	pop	{r4, pc}

080085ae <__swrite>:
 80085ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b2:	461f      	mov	r7, r3
 80085b4:	898b      	ldrh	r3, [r1, #12]
 80085b6:	05db      	lsls	r3, r3, #23
 80085b8:	4605      	mov	r5, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	4616      	mov	r6, r2
 80085be:	d505      	bpl.n	80085cc <__swrite+0x1e>
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	2302      	movs	r3, #2
 80085c6:	2200      	movs	r2, #0
 80085c8:	f000 f840 	bl	800864c <_lseek_r>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	4632      	mov	r2, r6
 80085da:	463b      	mov	r3, r7
 80085dc:	4628      	mov	r0, r5
 80085de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085e2:	f000 b857 	b.w	8008694 <_write_r>

080085e6 <__sseek>:
 80085e6:	b510      	push	{r4, lr}
 80085e8:	460c      	mov	r4, r1
 80085ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ee:	f000 f82d 	bl	800864c <_lseek_r>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	bf15      	itete	ne
 80085f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008602:	81a3      	strheq	r3, [r4, #12]
 8008604:	bf18      	it	ne
 8008606:	81a3      	strhne	r3, [r4, #12]
 8008608:	bd10      	pop	{r4, pc}

0800860a <__sclose>:
 800860a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860e:	f000 b80d 	b.w	800862c <_close_r>

08008612 <memset>:
 8008612:	4402      	add	r2, r0
 8008614:	4603      	mov	r3, r0
 8008616:	4293      	cmp	r3, r2
 8008618:	d100      	bne.n	800861c <memset+0xa>
 800861a:	4770      	bx	lr
 800861c:	f803 1b01 	strb.w	r1, [r3], #1
 8008620:	e7f9      	b.n	8008616 <memset+0x4>
	...

08008624 <_localeconv_r>:
 8008624:	4800      	ldr	r0, [pc, #0]	@ (8008628 <_localeconv_r+0x4>)
 8008626:	4770      	bx	lr
 8008628:	20000170 	.word	0x20000170

0800862c <_close_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4d06      	ldr	r5, [pc, #24]	@ (8008648 <_close_r+0x1c>)
 8008630:	2300      	movs	r3, #0
 8008632:	4604      	mov	r4, r0
 8008634:	4608      	mov	r0, r1
 8008636:	602b      	str	r3, [r5, #0]
 8008638:	f7f9 fa26 	bl	8001a88 <_close>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d102      	bne.n	8008646 <_close_r+0x1a>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	b103      	cbz	r3, 8008646 <_close_r+0x1a>
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	2000057c 	.word	0x2000057c

0800864c <_lseek_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d07      	ldr	r5, [pc, #28]	@ (800866c <_lseek_r+0x20>)
 8008650:	4604      	mov	r4, r0
 8008652:	4608      	mov	r0, r1
 8008654:	4611      	mov	r1, r2
 8008656:	2200      	movs	r2, #0
 8008658:	602a      	str	r2, [r5, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f7f9 fa3b 	bl	8001ad6 <_lseek>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_lseek_r+0x1e>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_lseek_r+0x1e>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	2000057c 	.word	0x2000057c

08008670 <_read_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d07      	ldr	r5, [pc, #28]	@ (8008690 <_read_r+0x20>)
 8008674:	4604      	mov	r4, r0
 8008676:	4608      	mov	r0, r1
 8008678:	4611      	mov	r1, r2
 800867a:	2200      	movs	r2, #0
 800867c:	602a      	str	r2, [r5, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	f7f9 f9c9 	bl	8001a16 <_read>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_read_r+0x1e>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_read_r+0x1e>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	2000057c 	.word	0x2000057c

08008694 <_write_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d07      	ldr	r5, [pc, #28]	@ (80086b4 <_write_r+0x20>)
 8008698:	4604      	mov	r4, r0
 800869a:	4608      	mov	r0, r1
 800869c:	4611      	mov	r1, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	602a      	str	r2, [r5, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f7f9 f9d4 	bl	8001a50 <_write>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_write_r+0x1e>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_write_r+0x1e>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	2000057c 	.word	0x2000057c

080086b8 <__errno>:
 80086b8:	4b01      	ldr	r3, [pc, #4]	@ (80086c0 <__errno+0x8>)
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	20000030 	.word	0x20000030

080086c4 <__libc_init_array>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	4d0d      	ldr	r5, [pc, #52]	@ (80086fc <__libc_init_array+0x38>)
 80086c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008700 <__libc_init_array+0x3c>)
 80086ca:	1b64      	subs	r4, r4, r5
 80086cc:	10a4      	asrs	r4, r4, #2
 80086ce:	2600      	movs	r6, #0
 80086d0:	42a6      	cmp	r6, r4
 80086d2:	d109      	bne.n	80086e8 <__libc_init_array+0x24>
 80086d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008704 <__libc_init_array+0x40>)
 80086d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008708 <__libc_init_array+0x44>)
 80086d8:	f003 fb70 	bl	800bdbc <_init>
 80086dc:	1b64      	subs	r4, r4, r5
 80086de:	10a4      	asrs	r4, r4, #2
 80086e0:	2600      	movs	r6, #0
 80086e2:	42a6      	cmp	r6, r4
 80086e4:	d105      	bne.n	80086f2 <__libc_init_array+0x2e>
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ec:	4798      	blx	r3
 80086ee:	3601      	adds	r6, #1
 80086f0:	e7ee      	b.n	80086d0 <__libc_init_array+0xc>
 80086f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f6:	4798      	blx	r3
 80086f8:	3601      	adds	r6, #1
 80086fa:	e7f2      	b.n	80086e2 <__libc_init_array+0x1e>
 80086fc:	0800c290 	.word	0x0800c290
 8008700:	0800c290 	.word	0x0800c290
 8008704:	0800c290 	.word	0x0800c290
 8008708:	0800c294 	.word	0x0800c294

0800870c <__retarget_lock_init_recursive>:
 800870c:	4770      	bx	lr

0800870e <__retarget_lock_acquire_recursive>:
 800870e:	4770      	bx	lr

08008710 <__retarget_lock_release_recursive>:
 8008710:	4770      	bx	lr
	...

08008714 <nanf>:
 8008714:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800871c <nanf+0x8>
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	7fc00000 	.word	0x7fc00000

08008720 <quorem>:
 8008720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	6903      	ldr	r3, [r0, #16]
 8008726:	690c      	ldr	r4, [r1, #16]
 8008728:	42a3      	cmp	r3, r4
 800872a:	4607      	mov	r7, r0
 800872c:	db7e      	blt.n	800882c <quorem+0x10c>
 800872e:	3c01      	subs	r4, #1
 8008730:	f101 0814 	add.w	r8, r1, #20
 8008734:	00a3      	lsls	r3, r4, #2
 8008736:	f100 0514 	add.w	r5, r0, #20
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800874a:	3301      	adds	r3, #1
 800874c:	429a      	cmp	r2, r3
 800874e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008752:	fbb2 f6f3 	udiv	r6, r2, r3
 8008756:	d32e      	bcc.n	80087b6 <quorem+0x96>
 8008758:	f04f 0a00 	mov.w	sl, #0
 800875c:	46c4      	mov	ip, r8
 800875e:	46ae      	mov	lr, r5
 8008760:	46d3      	mov	fp, sl
 8008762:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008766:	b298      	uxth	r0, r3
 8008768:	fb06 a000 	mla	r0, r6, r0, sl
 800876c:	0c02      	lsrs	r2, r0, #16
 800876e:	0c1b      	lsrs	r3, r3, #16
 8008770:	fb06 2303 	mla	r3, r6, r3, r2
 8008774:	f8de 2000 	ldr.w	r2, [lr]
 8008778:	b280      	uxth	r0, r0
 800877a:	b292      	uxth	r2, r2
 800877c:	1a12      	subs	r2, r2, r0
 800877e:	445a      	add	r2, fp
 8008780:	f8de 0000 	ldr.w	r0, [lr]
 8008784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008788:	b29b      	uxth	r3, r3
 800878a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800878e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008792:	b292      	uxth	r2, r2
 8008794:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008798:	45e1      	cmp	r9, ip
 800879a:	f84e 2b04 	str.w	r2, [lr], #4
 800879e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087a2:	d2de      	bcs.n	8008762 <quorem+0x42>
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	58eb      	ldr	r3, [r5, r3]
 80087a8:	b92b      	cbnz	r3, 80087b6 <quorem+0x96>
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	3b04      	subs	r3, #4
 80087ae:	429d      	cmp	r5, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	d32f      	bcc.n	8008814 <quorem+0xf4>
 80087b4:	613c      	str	r4, [r7, #16]
 80087b6:	4638      	mov	r0, r7
 80087b8:	f001 f9c2 	bl	8009b40 <__mcmp>
 80087bc:	2800      	cmp	r0, #0
 80087be:	db25      	blt.n	800880c <quorem+0xec>
 80087c0:	4629      	mov	r1, r5
 80087c2:	2000      	movs	r0, #0
 80087c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80087c8:	f8d1 c000 	ldr.w	ip, [r1]
 80087cc:	fa1f fe82 	uxth.w	lr, r2
 80087d0:	fa1f f38c 	uxth.w	r3, ip
 80087d4:	eba3 030e 	sub.w	r3, r3, lr
 80087d8:	4403      	add	r3, r0
 80087da:	0c12      	lsrs	r2, r2, #16
 80087dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ea:	45c1      	cmp	r9, r8
 80087ec:	f841 3b04 	str.w	r3, [r1], #4
 80087f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087f4:	d2e6      	bcs.n	80087c4 <quorem+0xa4>
 80087f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087fe:	b922      	cbnz	r2, 800880a <quorem+0xea>
 8008800:	3b04      	subs	r3, #4
 8008802:	429d      	cmp	r5, r3
 8008804:	461a      	mov	r2, r3
 8008806:	d30b      	bcc.n	8008820 <quorem+0x100>
 8008808:	613c      	str	r4, [r7, #16]
 800880a:	3601      	adds	r6, #1
 800880c:	4630      	mov	r0, r6
 800880e:	b003      	add	sp, #12
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	6812      	ldr	r2, [r2, #0]
 8008816:	3b04      	subs	r3, #4
 8008818:	2a00      	cmp	r2, #0
 800881a:	d1cb      	bne.n	80087b4 <quorem+0x94>
 800881c:	3c01      	subs	r4, #1
 800881e:	e7c6      	b.n	80087ae <quorem+0x8e>
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	3b04      	subs	r3, #4
 8008824:	2a00      	cmp	r2, #0
 8008826:	d1ef      	bne.n	8008808 <quorem+0xe8>
 8008828:	3c01      	subs	r4, #1
 800882a:	e7ea      	b.n	8008802 <quorem+0xe2>
 800882c:	2000      	movs	r0, #0
 800882e:	e7ee      	b.n	800880e <quorem+0xee>

08008830 <_dtoa_r>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	69c7      	ldr	r7, [r0, #28]
 8008836:	b099      	sub	sp, #100	@ 0x64
 8008838:	ed8d 0b02 	vstr	d0, [sp, #8]
 800883c:	ec55 4b10 	vmov	r4, r5, d0
 8008840:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008842:	9109      	str	r1, [sp, #36]	@ 0x24
 8008844:	4683      	mov	fp, r0
 8008846:	920e      	str	r2, [sp, #56]	@ 0x38
 8008848:	9313      	str	r3, [sp, #76]	@ 0x4c
 800884a:	b97f      	cbnz	r7, 800886c <_dtoa_r+0x3c>
 800884c:	2010      	movs	r0, #16
 800884e:	f000 fdfd 	bl	800944c <malloc>
 8008852:	4602      	mov	r2, r0
 8008854:	f8cb 001c 	str.w	r0, [fp, #28]
 8008858:	b920      	cbnz	r0, 8008864 <_dtoa_r+0x34>
 800885a:	4ba7      	ldr	r3, [pc, #668]	@ (8008af8 <_dtoa_r+0x2c8>)
 800885c:	21ef      	movs	r1, #239	@ 0xef
 800885e:	48a7      	ldr	r0, [pc, #668]	@ (8008afc <_dtoa_r+0x2cc>)
 8008860:	f002 fc36 	bl	800b0d0 <__assert_func>
 8008864:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008868:	6007      	str	r7, [r0, #0]
 800886a:	60c7      	str	r7, [r0, #12]
 800886c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008870:	6819      	ldr	r1, [r3, #0]
 8008872:	b159      	cbz	r1, 800888c <_dtoa_r+0x5c>
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	604a      	str	r2, [r1, #4]
 8008878:	2301      	movs	r3, #1
 800887a:	4093      	lsls	r3, r2
 800887c:	608b      	str	r3, [r1, #8]
 800887e:	4658      	mov	r0, fp
 8008880:	f000 feda 	bl	8009638 <_Bfree>
 8008884:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	1e2b      	subs	r3, r5, #0
 800888e:	bfb9      	ittee	lt
 8008890:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008894:	9303      	strlt	r3, [sp, #12]
 8008896:	2300      	movge	r3, #0
 8008898:	6033      	strge	r3, [r6, #0]
 800889a:	9f03      	ldr	r7, [sp, #12]
 800889c:	4b98      	ldr	r3, [pc, #608]	@ (8008b00 <_dtoa_r+0x2d0>)
 800889e:	bfbc      	itt	lt
 80088a0:	2201      	movlt	r2, #1
 80088a2:	6032      	strlt	r2, [r6, #0]
 80088a4:	43bb      	bics	r3, r7
 80088a6:	d112      	bne.n	80088ce <_dtoa_r+0x9e>
 80088a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088b4:	4323      	orrs	r3, r4
 80088b6:	f000 854d 	beq.w	8009354 <_dtoa_r+0xb24>
 80088ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b14 <_dtoa_r+0x2e4>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 854f 	beq.w	8009364 <_dtoa_r+0xb34>
 80088c6:	f10a 0303 	add.w	r3, sl, #3
 80088ca:	f000 bd49 	b.w	8009360 <_dtoa_r+0xb30>
 80088ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088d2:	2200      	movs	r2, #0
 80088d4:	ec51 0b17 	vmov	r0, r1, d7
 80088d8:	2300      	movs	r3, #0
 80088da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80088de:	f7f8 f8fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80088e2:	4680      	mov	r8, r0
 80088e4:	b158      	cbz	r0, 80088fe <_dtoa_r+0xce>
 80088e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088e8:	2301      	movs	r3, #1
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088ee:	b113      	cbz	r3, 80088f6 <_dtoa_r+0xc6>
 80088f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088f2:	4b84      	ldr	r3, [pc, #528]	@ (8008b04 <_dtoa_r+0x2d4>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b18 <_dtoa_r+0x2e8>
 80088fa:	f000 bd33 	b.w	8009364 <_dtoa_r+0xb34>
 80088fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008902:	aa16      	add	r2, sp, #88	@ 0x58
 8008904:	a917      	add	r1, sp, #92	@ 0x5c
 8008906:	4658      	mov	r0, fp
 8008908:	f001 fa3a 	bl	8009d80 <__d2b>
 800890c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008910:	4681      	mov	r9, r0
 8008912:	2e00      	cmp	r6, #0
 8008914:	d077      	beq.n	8008a06 <_dtoa_r+0x1d6>
 8008916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008918:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800891c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008924:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008928:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800892c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008930:	4619      	mov	r1, r3
 8008932:	2200      	movs	r2, #0
 8008934:	4b74      	ldr	r3, [pc, #464]	@ (8008b08 <_dtoa_r+0x2d8>)
 8008936:	f7f7 fcaf 	bl	8000298 <__aeabi_dsub>
 800893a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ae0 <_dtoa_r+0x2b0>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fe62 	bl	8000608 <__aeabi_dmul>
 8008944:	a368      	add	r3, pc, #416	@ (adr r3, 8008ae8 <_dtoa_r+0x2b8>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fca7 	bl	800029c <__adddf3>
 800894e:	4604      	mov	r4, r0
 8008950:	4630      	mov	r0, r6
 8008952:	460d      	mov	r5, r1
 8008954:	f7f7 fdee 	bl	8000534 <__aeabi_i2d>
 8008958:	a365      	add	r3, pc, #404	@ (adr r3, 8008af0 <_dtoa_r+0x2c0>)
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	f7f7 fe53 	bl	8000608 <__aeabi_dmul>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4620      	mov	r0, r4
 8008968:	4629      	mov	r1, r5
 800896a:	f7f7 fc97 	bl	800029c <__adddf3>
 800896e:	4604      	mov	r4, r0
 8008970:	460d      	mov	r5, r1
 8008972:	f7f8 f8f9 	bl	8000b68 <__aeabi_d2iz>
 8008976:	2200      	movs	r2, #0
 8008978:	4607      	mov	r7, r0
 800897a:	2300      	movs	r3, #0
 800897c:	4620      	mov	r0, r4
 800897e:	4629      	mov	r1, r5
 8008980:	f7f8 f8b4 	bl	8000aec <__aeabi_dcmplt>
 8008984:	b140      	cbz	r0, 8008998 <_dtoa_r+0x168>
 8008986:	4638      	mov	r0, r7
 8008988:	f7f7 fdd4 	bl	8000534 <__aeabi_i2d>
 800898c:	4622      	mov	r2, r4
 800898e:	462b      	mov	r3, r5
 8008990:	f7f8 f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008994:	b900      	cbnz	r0, 8008998 <_dtoa_r+0x168>
 8008996:	3f01      	subs	r7, #1
 8008998:	2f16      	cmp	r7, #22
 800899a:	d851      	bhi.n	8008a40 <_dtoa_r+0x210>
 800899c:	4b5b      	ldr	r3, [pc, #364]	@ (8008b0c <_dtoa_r+0x2dc>)
 800899e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089aa:	f7f8 f89f 	bl	8000aec <__aeabi_dcmplt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d048      	beq.n	8008a44 <_dtoa_r+0x214>
 80089b2:	3f01      	subs	r7, #1
 80089b4:	2300      	movs	r3, #0
 80089b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80089b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089ba:	1b9b      	subs	r3, r3, r6
 80089bc:	1e5a      	subs	r2, r3, #1
 80089be:	bf44      	itt	mi
 80089c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80089c4:	2300      	movmi	r3, #0
 80089c6:	9208      	str	r2, [sp, #32]
 80089c8:	bf54      	ite	pl
 80089ca:	f04f 0800 	movpl.w	r8, #0
 80089ce:	9308      	strmi	r3, [sp, #32]
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	db39      	blt.n	8008a48 <_dtoa_r+0x218>
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80089d8:	443b      	add	r3, r7
 80089da:	9308      	str	r3, [sp, #32]
 80089dc:	2300      	movs	r3, #0
 80089de:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e2:	2b09      	cmp	r3, #9
 80089e4:	d864      	bhi.n	8008ab0 <_dtoa_r+0x280>
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	bfc4      	itt	gt
 80089ea:	3b04      	subgt	r3, #4
 80089ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f0:	f1a3 0302 	sub.w	r3, r3, #2
 80089f4:	bfcc      	ite	gt
 80089f6:	2400      	movgt	r4, #0
 80089f8:	2401      	movle	r4, #1
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d863      	bhi.n	8008ac6 <_dtoa_r+0x296>
 80089fe:	e8df f003 	tbb	[pc, r3]
 8008a02:	372a      	.short	0x372a
 8008a04:	5535      	.short	0x5535
 8008a06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a0a:	441e      	add	r6, r3
 8008a0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a10:	2b20      	cmp	r3, #32
 8008a12:	bfc1      	itttt	gt
 8008a14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a18:	409f      	lslgt	r7, r3
 8008a1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a22:	bfd6      	itet	le
 8008a24:	f1c3 0320 	rsble	r3, r3, #32
 8008a28:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a2c:	fa04 f003 	lslle.w	r0, r4, r3
 8008a30:	f7f7 fd70 	bl	8000514 <__aeabi_ui2d>
 8008a34:	2201      	movs	r2, #1
 8008a36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a3a:	3e01      	subs	r6, #1
 8008a3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a3e:	e777      	b.n	8008930 <_dtoa_r+0x100>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7b8      	b.n	80089b6 <_dtoa_r+0x186>
 8008a44:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a46:	e7b7      	b.n	80089b8 <_dtoa_r+0x188>
 8008a48:	427b      	negs	r3, r7
 8008a4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	eba8 0807 	sub.w	r8, r8, r7
 8008a52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a54:	e7c4      	b.n	80089e0 <_dtoa_r+0x1b0>
 8008a56:	2300      	movs	r3, #0
 8008a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dc35      	bgt.n	8008acc <_dtoa_r+0x29c>
 8008a60:	2301      	movs	r3, #1
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	9307      	str	r3, [sp, #28]
 8008a66:	461a      	mov	r2, r3
 8008a68:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a6a:	e00b      	b.n	8008a84 <_dtoa_r+0x254>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e7f3      	b.n	8008a58 <_dtoa_r+0x228>
 8008a70:	2300      	movs	r3, #0
 8008a72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	9307      	str	r3, [sp, #28]
 8008a80:	bfb8      	it	lt
 8008a82:	2301      	movlt	r3, #1
 8008a84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2204      	movs	r2, #4
 8008a8c:	f102 0514 	add.w	r5, r2, #20
 8008a90:	429d      	cmp	r5, r3
 8008a92:	d91f      	bls.n	8008ad4 <_dtoa_r+0x2a4>
 8008a94:	6041      	str	r1, [r0, #4]
 8008a96:	4658      	mov	r0, fp
 8008a98:	f000 fd8e 	bl	80095b8 <_Balloc>
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d13c      	bne.n	8008b1c <_dtoa_r+0x2ec>
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b10 <_dtoa_r+0x2e0>)
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008aaa:	e6d8      	b.n	800885e <_dtoa_r+0x2e>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e7e0      	b.n	8008a72 <_dtoa_r+0x242>
 8008ab0:	2401      	movs	r4, #1
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ab6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2312      	movs	r3, #18
 8008ac4:	e7d0      	b.n	8008a68 <_dtoa_r+0x238>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aca:	e7f5      	b.n	8008ab8 <_dtoa_r+0x288>
 8008acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	e7d7      	b.n	8008a84 <_dtoa_r+0x254>
 8008ad4:	3101      	adds	r1, #1
 8008ad6:	0052      	lsls	r2, r2, #1
 8008ad8:	e7d8      	b.n	8008a8c <_dtoa_r+0x25c>
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w
 8008ae0:	636f4361 	.word	0x636f4361
 8008ae4:	3fd287a7 	.word	0x3fd287a7
 8008ae8:	8b60c8b3 	.word	0x8b60c8b3
 8008aec:	3fc68a28 	.word	0x3fc68a28
 8008af0:	509f79fb 	.word	0x509f79fb
 8008af4:	3fd34413 	.word	0x3fd34413
 8008af8:	0800bea2 	.word	0x0800bea2
 8008afc:	0800beb9 	.word	0x0800beb9
 8008b00:	7ff00000 	.word	0x7ff00000
 8008b04:	0800be6d 	.word	0x0800be6d
 8008b08:	3ff80000 	.word	0x3ff80000
 8008b0c:	0800bfb0 	.word	0x0800bfb0
 8008b10:	0800bf11 	.word	0x0800bf11
 8008b14:	0800be9e 	.word	0x0800be9e
 8008b18:	0800be6c 	.word	0x0800be6c
 8008b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b20:	6018      	str	r0, [r3, #0]
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	2b0e      	cmp	r3, #14
 8008b26:	f200 80a4 	bhi.w	8008c72 <_dtoa_r+0x442>
 8008b2a:	2c00      	cmp	r4, #0
 8008b2c:	f000 80a1 	beq.w	8008c72 <_dtoa_r+0x442>
 8008b30:	2f00      	cmp	r7, #0
 8008b32:	dd33      	ble.n	8008b9c <_dtoa_r+0x36c>
 8008b34:	4bad      	ldr	r3, [pc, #692]	@ (8008dec <_dtoa_r+0x5bc>)
 8008b36:	f007 020f 	and.w	r2, r7, #15
 8008b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b3e:	ed93 7b00 	vldr	d7, [r3]
 8008b42:	05f8      	lsls	r0, r7, #23
 8008b44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b4c:	d516      	bpl.n	8008b7c <_dtoa_r+0x34c>
 8008b4e:	4ba8      	ldr	r3, [pc, #672]	@ (8008df0 <_dtoa_r+0x5c0>)
 8008b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b58:	f7f7 fe80 	bl	800085c <__aeabi_ddiv>
 8008b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b60:	f004 040f 	and.w	r4, r4, #15
 8008b64:	2603      	movs	r6, #3
 8008b66:	4da2      	ldr	r5, [pc, #648]	@ (8008df0 <_dtoa_r+0x5c0>)
 8008b68:	b954      	cbnz	r4, 8008b80 <_dtoa_r+0x350>
 8008b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b72:	f7f7 fe73 	bl	800085c <__aeabi_ddiv>
 8008b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b7a:	e028      	b.n	8008bce <_dtoa_r+0x39e>
 8008b7c:	2602      	movs	r6, #2
 8008b7e:	e7f2      	b.n	8008b66 <_dtoa_r+0x336>
 8008b80:	07e1      	lsls	r1, r4, #31
 8008b82:	d508      	bpl.n	8008b96 <_dtoa_r+0x366>
 8008b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b8c:	f7f7 fd3c 	bl	8000608 <__aeabi_dmul>
 8008b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b94:	3601      	adds	r6, #1
 8008b96:	1064      	asrs	r4, r4, #1
 8008b98:	3508      	adds	r5, #8
 8008b9a:	e7e5      	b.n	8008b68 <_dtoa_r+0x338>
 8008b9c:	f000 80d2 	beq.w	8008d44 <_dtoa_r+0x514>
 8008ba0:	427c      	negs	r4, r7
 8008ba2:	4b92      	ldr	r3, [pc, #584]	@ (8008dec <_dtoa_r+0x5bc>)
 8008ba4:	4d92      	ldr	r5, [pc, #584]	@ (8008df0 <_dtoa_r+0x5c0>)
 8008ba6:	f004 020f 	and.w	r2, r4, #15
 8008baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bb6:	f7f7 fd27 	bl	8000608 <__aeabi_dmul>
 8008bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bbe:	1124      	asrs	r4, r4, #4
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2602      	movs	r6, #2
 8008bc4:	2c00      	cmp	r4, #0
 8008bc6:	f040 80b2 	bne.w	8008d2e <_dtoa_r+0x4fe>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1d3      	bne.n	8008b76 <_dtoa_r+0x346>
 8008bce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80b7 	beq.w	8008d48 <_dtoa_r+0x518>
 8008bda:	4b86      	ldr	r3, [pc, #536]	@ (8008df4 <_dtoa_r+0x5c4>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 ff83 	bl	8000aec <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f000 80ae 	beq.w	8008d48 <_dtoa_r+0x518>
 8008bec:	9b07      	ldr	r3, [sp, #28]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80aa 	beq.w	8008d48 <_dtoa_r+0x518>
 8008bf4:	9b00      	ldr	r3, [sp, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dd37      	ble.n	8008c6a <_dtoa_r+0x43a>
 8008bfa:	1e7b      	subs	r3, r7, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	4620      	mov	r0, r4
 8008c00:	4b7d      	ldr	r3, [pc, #500]	@ (8008df8 <_dtoa_r+0x5c8>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7f7 fcff 	bl	8000608 <__aeabi_dmul>
 8008c0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c0e:	9c00      	ldr	r4, [sp, #0]
 8008c10:	3601      	adds	r6, #1
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7f7 fc8e 	bl	8000534 <__aeabi_i2d>
 8008c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1c:	f7f7 fcf4 	bl	8000608 <__aeabi_dmul>
 8008c20:	4b76      	ldr	r3, [pc, #472]	@ (8008dfc <_dtoa_r+0x5cc>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	f7f7 fb3a 	bl	800029c <__adddf3>
 8008c28:	4605      	mov	r5, r0
 8008c2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c2e:	2c00      	cmp	r4, #0
 8008c30:	f040 808d 	bne.w	8008d4e <_dtoa_r+0x51e>
 8008c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c38:	4b71      	ldr	r3, [pc, #452]	@ (8008e00 <_dtoa_r+0x5d0>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4633      	mov	r3, r6
 8008c4c:	f7f7 ff6c 	bl	8000b28 <__aeabi_dcmpgt>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f040 828b 	bne.w	800916c <_dtoa_r+0x93c>
 8008c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c60:	f7f7 ff44 	bl	8000aec <__aeabi_dcmplt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f040 8128 	bne.w	8008eba <_dtoa_r+0x68a>
 8008c6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f2c0 815a 	blt.w	8008f2e <_dtoa_r+0x6fe>
 8008c7a:	2f0e      	cmp	r7, #14
 8008c7c:	f300 8157 	bgt.w	8008f2e <_dtoa_r+0x6fe>
 8008c80:	4b5a      	ldr	r3, [pc, #360]	@ (8008dec <_dtoa_r+0x5bc>)
 8008c82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c86:	ed93 7b00 	vldr	d7, [r3]
 8008c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	ed8d 7b00 	vstr	d7, [sp]
 8008c92:	da03      	bge.n	8008c9c <_dtoa_r+0x46c>
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f340 8101 	ble.w	8008e9e <_dtoa_r+0x66e>
 8008c9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ca0:	4656      	mov	r6, sl
 8008ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 fdd7 	bl	800085c <__aeabi_ddiv>
 8008cae:	f7f7 ff5b 	bl	8000b68 <__aeabi_d2iz>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	f7f7 fc3e 	bl	8000534 <__aeabi_i2d>
 8008cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008ccc:	f7f7 fae4 	bl	8000298 <__aeabi_dsub>
 8008cd0:	f806 4b01 	strb.w	r4, [r6], #1
 8008cd4:	9d07      	ldr	r5, [sp, #28]
 8008cd6:	eba6 040a 	sub.w	r4, r6, sl
 8008cda:	42a5      	cmp	r5, r4
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	f040 8117 	bne.w	8008f12 <_dtoa_r+0x6e2>
 8008ce4:	f7f7 fada 	bl	800029c <__adddf3>
 8008ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	f7f7 ff1a 	bl	8000b28 <__aeabi_dcmpgt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f040 80f9 	bne.w	8008eec <_dtoa_r+0x6bc>
 8008cfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d06:	b118      	cbz	r0, 8008d10 <_dtoa_r+0x4e0>
 8008d08:	f018 0f01 	tst.w	r8, #1
 8008d0c:	f040 80ee 	bne.w	8008eec <_dtoa_r+0x6bc>
 8008d10:	4649      	mov	r1, r9
 8008d12:	4658      	mov	r0, fp
 8008d14:	f000 fc90 	bl	8009638 <_Bfree>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	7033      	strb	r3, [r6, #0]
 8008d1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d1e:	3701      	adds	r7, #1
 8008d20:	601f      	str	r7, [r3, #0]
 8008d22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 831d 	beq.w	8009364 <_dtoa_r+0xb34>
 8008d2a:	601e      	str	r6, [r3, #0]
 8008d2c:	e31a      	b.n	8009364 <_dtoa_r+0xb34>
 8008d2e:	07e2      	lsls	r2, r4, #31
 8008d30:	d505      	bpl.n	8008d3e <_dtoa_r+0x50e>
 8008d32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d36:	f7f7 fc67 	bl	8000608 <__aeabi_dmul>
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	1064      	asrs	r4, r4, #1
 8008d40:	3508      	adds	r5, #8
 8008d42:	e73f      	b.n	8008bc4 <_dtoa_r+0x394>
 8008d44:	2602      	movs	r6, #2
 8008d46:	e742      	b.n	8008bce <_dtoa_r+0x39e>
 8008d48:	9c07      	ldr	r4, [sp, #28]
 8008d4a:	9704      	str	r7, [sp, #16]
 8008d4c:	e761      	b.n	8008c12 <_dtoa_r+0x3e2>
 8008d4e:	4b27      	ldr	r3, [pc, #156]	@ (8008dec <_dtoa_r+0x5bc>)
 8008d50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d5a:	4454      	add	r4, sl
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	d053      	beq.n	8008e08 <_dtoa_r+0x5d8>
 8008d60:	4928      	ldr	r1, [pc, #160]	@ (8008e04 <_dtoa_r+0x5d4>)
 8008d62:	2000      	movs	r0, #0
 8008d64:	f7f7 fd7a 	bl	800085c <__aeabi_ddiv>
 8008d68:	4633      	mov	r3, r6
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	f7f7 fa94 	bl	8000298 <__aeabi_dsub>
 8008d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d74:	4656      	mov	r6, sl
 8008d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d7a:	f7f7 fef5 	bl	8000b68 <__aeabi_d2iz>
 8008d7e:	4605      	mov	r5, r0
 8008d80:	f7f7 fbd8 	bl	8000534 <__aeabi_i2d>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d8c:	f7f7 fa84 	bl	8000298 <__aeabi_dsub>
 8008d90:	3530      	adds	r5, #48	@ 0x30
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d9a:	f806 5b01 	strb.w	r5, [r6], #1
 8008d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008da2:	f7f7 fea3 	bl	8000aec <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d171      	bne.n	8008e8e <_dtoa_r+0x65e>
 8008daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dae:	4911      	ldr	r1, [pc, #68]	@ (8008df4 <_dtoa_r+0x5c4>)
 8008db0:	2000      	movs	r0, #0
 8008db2:	f7f7 fa71 	bl	8000298 <__aeabi_dsub>
 8008db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dba:	f7f7 fe97 	bl	8000aec <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f040 8095 	bne.w	8008eee <_dtoa_r+0x6be>
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	f43f af50 	beq.w	8008c6a <_dtoa_r+0x43a>
 8008dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dce:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <_dtoa_r+0x5c8>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7f7 fc19 	bl	8000608 <__aeabi_dmul>
 8008dd6:	4b08      	ldr	r3, [pc, #32]	@ (8008df8 <_dtoa_r+0x5c8>)
 8008dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ddc:	2200      	movs	r2, #0
 8008dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de2:	f7f7 fc11 	bl	8000608 <__aeabi_dmul>
 8008de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dea:	e7c4      	b.n	8008d76 <_dtoa_r+0x546>
 8008dec:	0800bfb0 	.word	0x0800bfb0
 8008df0:	0800bf88 	.word	0x0800bf88
 8008df4:	3ff00000 	.word	0x3ff00000
 8008df8:	40240000 	.word	0x40240000
 8008dfc:	401c0000 	.word	0x401c0000
 8008e00:	40140000 	.word	0x40140000
 8008e04:	3fe00000 	.word	0x3fe00000
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f7f7 fbfc 	bl	8000608 <__aeabi_dmul>
 8008e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e14:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e16:	4656      	mov	r6, sl
 8008e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1c:	f7f7 fea4 	bl	8000b68 <__aeabi_d2iz>
 8008e20:	4605      	mov	r5, r0
 8008e22:	f7f7 fb87 	bl	8000534 <__aeabi_i2d>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2e:	f7f7 fa33 	bl	8000298 <__aeabi_dsub>
 8008e32:	3530      	adds	r5, #48	@ 0x30
 8008e34:	f806 5b01 	strb.w	r5, [r6], #1
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	42a6      	cmp	r6, r4
 8008e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	d124      	bne.n	8008e92 <_dtoa_r+0x662>
 8008e48:	4bac      	ldr	r3, [pc, #688]	@ (80090fc <_dtoa_r+0x8cc>)
 8008e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e4e:	f7f7 fa25 	bl	800029c <__adddf3>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5a:	f7f7 fe65 	bl	8000b28 <__aeabi_dcmpgt>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d145      	bne.n	8008eee <_dtoa_r+0x6be>
 8008e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e66:	49a5      	ldr	r1, [pc, #660]	@ (80090fc <_dtoa_r+0x8cc>)
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f7f7 fa15 	bl	8000298 <__aeabi_dsub>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e76:	f7f7 fe39 	bl	8000aec <__aeabi_dcmplt>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	f43f aef5 	beq.w	8008c6a <_dtoa_r+0x43a>
 8008e80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e82:	1e73      	subs	r3, r6, #1
 8008e84:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e8a:	2b30      	cmp	r3, #48	@ 0x30
 8008e8c:	d0f8      	beq.n	8008e80 <_dtoa_r+0x650>
 8008e8e:	9f04      	ldr	r7, [sp, #16]
 8008e90:	e73e      	b.n	8008d10 <_dtoa_r+0x4e0>
 8008e92:	4b9b      	ldr	r3, [pc, #620]	@ (8009100 <_dtoa_r+0x8d0>)
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e9c:	e7bc      	b.n	8008e18 <_dtoa_r+0x5e8>
 8008e9e:	d10c      	bne.n	8008eba <_dtoa_r+0x68a>
 8008ea0:	4b98      	ldr	r3, [pc, #608]	@ (8009104 <_dtoa_r+0x8d4>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ea8:	f7f7 fbae 	bl	8000608 <__aeabi_dmul>
 8008eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb0:	f7f7 fe30 	bl	8000b14 <__aeabi_dcmpge>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f000 8157 	beq.w	8009168 <_dtoa_r+0x938>
 8008eba:	2400      	movs	r4, #0
 8008ebc:	4625      	mov	r5, r4
 8008ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	4656      	mov	r6, sl
 8008ec6:	2700      	movs	r7, #0
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4658      	mov	r0, fp
 8008ecc:	f000 fbb4 	bl	8009638 <_Bfree>
 8008ed0:	2d00      	cmp	r5, #0
 8008ed2:	d0dc      	beq.n	8008e8e <_dtoa_r+0x65e>
 8008ed4:	b12f      	cbz	r7, 8008ee2 <_dtoa_r+0x6b2>
 8008ed6:	42af      	cmp	r7, r5
 8008ed8:	d003      	beq.n	8008ee2 <_dtoa_r+0x6b2>
 8008eda:	4639      	mov	r1, r7
 8008edc:	4658      	mov	r0, fp
 8008ede:	f000 fbab 	bl	8009638 <_Bfree>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4658      	mov	r0, fp
 8008ee6:	f000 fba7 	bl	8009638 <_Bfree>
 8008eea:	e7d0      	b.n	8008e8e <_dtoa_r+0x65e>
 8008eec:	9704      	str	r7, [sp, #16]
 8008eee:	4633      	mov	r3, r6
 8008ef0:	461e      	mov	r6, r3
 8008ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ef6:	2a39      	cmp	r2, #57	@ 0x39
 8008ef8:	d107      	bne.n	8008f0a <_dtoa_r+0x6da>
 8008efa:	459a      	cmp	sl, r3
 8008efc:	d1f8      	bne.n	8008ef0 <_dtoa_r+0x6c0>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	3201      	adds	r2, #1
 8008f02:	9204      	str	r2, [sp, #16]
 8008f04:	2230      	movs	r2, #48	@ 0x30
 8008f06:	f88a 2000 	strb.w	r2, [sl]
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	3201      	adds	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	e7bd      	b.n	8008e8e <_dtoa_r+0x65e>
 8008f12:	4b7b      	ldr	r3, [pc, #492]	@ (8009100 <_dtoa_r+0x8d0>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	f7f7 fb77 	bl	8000608 <__aeabi_dmul>
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	f7f7 fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f43f aebb 	beq.w	8008ca2 <_dtoa_r+0x472>
 8008f2c:	e6f0      	b.n	8008d10 <_dtoa_r+0x4e0>
 8008f2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	f000 80db 	beq.w	80090ec <_dtoa_r+0x8bc>
 8008f36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f38:	2a01      	cmp	r2, #1
 8008f3a:	f300 80bf 	bgt.w	80090bc <_dtoa_r+0x88c>
 8008f3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	f000 80b7 	beq.w	80090b4 <_dtoa_r+0x884>
 8008f46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f4c:	4646      	mov	r6, r8
 8008f4e:	9a08      	ldr	r2, [sp, #32]
 8008f50:	2101      	movs	r1, #1
 8008f52:	441a      	add	r2, r3
 8008f54:	4658      	mov	r0, fp
 8008f56:	4498      	add	r8, r3
 8008f58:	9208      	str	r2, [sp, #32]
 8008f5a:	f000 fc6b 	bl	8009834 <__i2b>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b15e      	cbz	r6, 8008f7a <_dtoa_r+0x74a>
 8008f62:	9b08      	ldr	r3, [sp, #32]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dd08      	ble.n	8008f7a <_dtoa_r+0x74a>
 8008f68:	42b3      	cmp	r3, r6
 8008f6a:	9a08      	ldr	r2, [sp, #32]
 8008f6c:	bfa8      	it	ge
 8008f6e:	4633      	movge	r3, r6
 8008f70:	eba8 0803 	sub.w	r8, r8, r3
 8008f74:	1af6      	subs	r6, r6, r3
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	9308      	str	r3, [sp, #32]
 8008f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7c:	b1f3      	cbz	r3, 8008fbc <_dtoa_r+0x78c>
 8008f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 80b7 	beq.w	80090f4 <_dtoa_r+0x8c4>
 8008f86:	b18c      	cbz	r4, 8008fac <_dtoa_r+0x77c>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	4658      	mov	r0, fp
 8008f8e:	f000 fd11 	bl	80099b4 <__pow5mult>
 8008f92:	464a      	mov	r2, r9
 8008f94:	4601      	mov	r1, r0
 8008f96:	4605      	mov	r5, r0
 8008f98:	4658      	mov	r0, fp
 8008f9a:	f000 fc61 	bl	8009860 <__multiply>
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	9004      	str	r0, [sp, #16]
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f000 fb48 	bl	8009638 <_Bfree>
 8008fa8:	9b04      	ldr	r3, [sp, #16]
 8008faa:	4699      	mov	r9, r3
 8008fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fae:	1b1a      	subs	r2, r3, r4
 8008fb0:	d004      	beq.n	8008fbc <_dtoa_r+0x78c>
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	4658      	mov	r0, fp
 8008fb6:	f000 fcfd 	bl	80099b4 <__pow5mult>
 8008fba:	4681      	mov	r9, r0
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 fc38 	bl	8009834 <__i2b>
 8008fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 81cf 	beq.w	800936c <_dtoa_r+0xb3c>
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	4658      	mov	r0, fp
 8008fd4:	f000 fcee 	bl	80099b4 <__pow5mult>
 8008fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	4604      	mov	r4, r0
 8008fde:	f300 8095 	bgt.w	800910c <_dtoa_r+0x8dc>
 8008fe2:	9b02      	ldr	r3, [sp, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f040 8087 	bne.w	80090f8 <_dtoa_r+0x8c8>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f040 8089 	bne.w	8009108 <_dtoa_r+0x8d8>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ffc:	0d1b      	lsrs	r3, r3, #20
 8008ffe:	051b      	lsls	r3, r3, #20
 8009000:	b12b      	cbz	r3, 800900e <_dtoa_r+0x7de>
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	3301      	adds	r3, #1
 8009006:	9308      	str	r3, [sp, #32]
 8009008:	f108 0801 	add.w	r8, r8, #1
 800900c:	2301      	movs	r3, #1
 800900e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 81b0 	beq.w	8009378 <_dtoa_r+0xb48>
 8009018:	6923      	ldr	r3, [r4, #16]
 800901a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800901e:	6918      	ldr	r0, [r3, #16]
 8009020:	f000 fbbc 	bl	800979c <__hi0bits>
 8009024:	f1c0 0020 	rsb	r0, r0, #32
 8009028:	9b08      	ldr	r3, [sp, #32]
 800902a:	4418      	add	r0, r3
 800902c:	f010 001f 	ands.w	r0, r0, #31
 8009030:	d077      	beq.n	8009122 <_dtoa_r+0x8f2>
 8009032:	f1c0 0320 	rsb	r3, r0, #32
 8009036:	2b04      	cmp	r3, #4
 8009038:	dd6b      	ble.n	8009112 <_dtoa_r+0x8e2>
 800903a:	9b08      	ldr	r3, [sp, #32]
 800903c:	f1c0 001c 	rsb	r0, r0, #28
 8009040:	4403      	add	r3, r0
 8009042:	4480      	add	r8, r0
 8009044:	4406      	add	r6, r0
 8009046:	9308      	str	r3, [sp, #32]
 8009048:	f1b8 0f00 	cmp.w	r8, #0
 800904c:	dd05      	ble.n	800905a <_dtoa_r+0x82a>
 800904e:	4649      	mov	r1, r9
 8009050:	4642      	mov	r2, r8
 8009052:	4658      	mov	r0, fp
 8009054:	f000 fd08 	bl	8009a68 <__lshift>
 8009058:	4681      	mov	r9, r0
 800905a:	9b08      	ldr	r3, [sp, #32]
 800905c:	2b00      	cmp	r3, #0
 800905e:	dd05      	ble.n	800906c <_dtoa_r+0x83c>
 8009060:	4621      	mov	r1, r4
 8009062:	461a      	mov	r2, r3
 8009064:	4658      	mov	r0, fp
 8009066:	f000 fcff 	bl	8009a68 <__lshift>
 800906a:	4604      	mov	r4, r0
 800906c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800906e:	2b00      	cmp	r3, #0
 8009070:	d059      	beq.n	8009126 <_dtoa_r+0x8f6>
 8009072:	4621      	mov	r1, r4
 8009074:	4648      	mov	r0, r9
 8009076:	f000 fd63 	bl	8009b40 <__mcmp>
 800907a:	2800      	cmp	r0, #0
 800907c:	da53      	bge.n	8009126 <_dtoa_r+0x8f6>
 800907e:	1e7b      	subs	r3, r7, #1
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	4649      	mov	r1, r9
 8009084:	2300      	movs	r3, #0
 8009086:	220a      	movs	r2, #10
 8009088:	4658      	mov	r0, fp
 800908a:	f000 faf7 	bl	800967c <__multadd>
 800908e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009090:	4681      	mov	r9, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 8172 	beq.w	800937c <_dtoa_r+0xb4c>
 8009098:	2300      	movs	r3, #0
 800909a:	4629      	mov	r1, r5
 800909c:	220a      	movs	r2, #10
 800909e:	4658      	mov	r0, fp
 80090a0:	f000 faec 	bl	800967c <__multadd>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	4605      	mov	r5, r0
 80090aa:	dc67      	bgt.n	800917c <_dtoa_r+0x94c>
 80090ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	dc41      	bgt.n	8009136 <_dtoa_r+0x906>
 80090b2:	e063      	b.n	800917c <_dtoa_r+0x94c>
 80090b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090ba:	e746      	b.n	8008f4a <_dtoa_r+0x71a>
 80090bc:	9b07      	ldr	r3, [sp, #28]
 80090be:	1e5c      	subs	r4, r3, #1
 80090c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c2:	42a3      	cmp	r3, r4
 80090c4:	bfbf      	itttt	lt
 80090c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80090ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090cc:	1ae3      	sublt	r3, r4, r3
 80090ce:	bfb4      	ite	lt
 80090d0:	18d2      	addlt	r2, r2, r3
 80090d2:	1b1c      	subge	r4, r3, r4
 80090d4:	9b07      	ldr	r3, [sp, #28]
 80090d6:	bfbc      	itt	lt
 80090d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80090da:	2400      	movlt	r4, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfb5      	itete	lt
 80090e0:	eba8 0603 	sublt.w	r6, r8, r3
 80090e4:	9b07      	ldrge	r3, [sp, #28]
 80090e6:	2300      	movlt	r3, #0
 80090e8:	4646      	movge	r6, r8
 80090ea:	e730      	b.n	8008f4e <_dtoa_r+0x71e>
 80090ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090f0:	4646      	mov	r6, r8
 80090f2:	e735      	b.n	8008f60 <_dtoa_r+0x730>
 80090f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090f6:	e75c      	b.n	8008fb2 <_dtoa_r+0x782>
 80090f8:	2300      	movs	r3, #0
 80090fa:	e788      	b.n	800900e <_dtoa_r+0x7de>
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	40240000 	.word	0x40240000
 8009104:	40140000 	.word	0x40140000
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	e780      	b.n	800900e <_dtoa_r+0x7de>
 800910c:	2300      	movs	r3, #0
 800910e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009110:	e782      	b.n	8009018 <_dtoa_r+0x7e8>
 8009112:	d099      	beq.n	8009048 <_dtoa_r+0x818>
 8009114:	9a08      	ldr	r2, [sp, #32]
 8009116:	331c      	adds	r3, #28
 8009118:	441a      	add	r2, r3
 800911a:	4498      	add	r8, r3
 800911c:	441e      	add	r6, r3
 800911e:	9208      	str	r2, [sp, #32]
 8009120:	e792      	b.n	8009048 <_dtoa_r+0x818>
 8009122:	4603      	mov	r3, r0
 8009124:	e7f6      	b.n	8009114 <_dtoa_r+0x8e4>
 8009126:	9b07      	ldr	r3, [sp, #28]
 8009128:	9704      	str	r7, [sp, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dc20      	bgt.n	8009170 <_dtoa_r+0x940>
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009132:	2b02      	cmp	r3, #2
 8009134:	dd1e      	ble.n	8009174 <_dtoa_r+0x944>
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f47f aec0 	bne.w	8008ebe <_dtoa_r+0x68e>
 800913e:	4621      	mov	r1, r4
 8009140:	2205      	movs	r2, #5
 8009142:	4658      	mov	r0, fp
 8009144:	f000 fa9a 	bl	800967c <__multadd>
 8009148:	4601      	mov	r1, r0
 800914a:	4604      	mov	r4, r0
 800914c:	4648      	mov	r0, r9
 800914e:	f000 fcf7 	bl	8009b40 <__mcmp>
 8009152:	2800      	cmp	r0, #0
 8009154:	f77f aeb3 	ble.w	8008ebe <_dtoa_r+0x68e>
 8009158:	4656      	mov	r6, sl
 800915a:	2331      	movs	r3, #49	@ 0x31
 800915c:	f806 3b01 	strb.w	r3, [r6], #1
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	3301      	adds	r3, #1
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	e6ae      	b.n	8008ec6 <_dtoa_r+0x696>
 8009168:	9c07      	ldr	r4, [sp, #28]
 800916a:	9704      	str	r7, [sp, #16]
 800916c:	4625      	mov	r5, r4
 800916e:	e7f3      	b.n	8009158 <_dtoa_r+0x928>
 8009170:	9b07      	ldr	r3, [sp, #28]
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 8104 	beq.w	8009384 <_dtoa_r+0xb54>
 800917c:	2e00      	cmp	r6, #0
 800917e:	dd05      	ble.n	800918c <_dtoa_r+0x95c>
 8009180:	4629      	mov	r1, r5
 8009182:	4632      	mov	r2, r6
 8009184:	4658      	mov	r0, fp
 8009186:	f000 fc6f 	bl	8009a68 <__lshift>
 800918a:	4605      	mov	r5, r0
 800918c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d05a      	beq.n	8009248 <_dtoa_r+0xa18>
 8009192:	6869      	ldr	r1, [r5, #4]
 8009194:	4658      	mov	r0, fp
 8009196:	f000 fa0f 	bl	80095b8 <_Balloc>
 800919a:	4606      	mov	r6, r0
 800919c:	b928      	cbnz	r0, 80091aa <_dtoa_r+0x97a>
 800919e:	4b84      	ldr	r3, [pc, #528]	@ (80093b0 <_dtoa_r+0xb80>)
 80091a0:	4602      	mov	r2, r0
 80091a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091a6:	f7ff bb5a 	b.w	800885e <_dtoa_r+0x2e>
 80091aa:	692a      	ldr	r2, [r5, #16]
 80091ac:	3202      	adds	r2, #2
 80091ae:	0092      	lsls	r2, r2, #2
 80091b0:	f105 010c 	add.w	r1, r5, #12
 80091b4:	300c      	adds	r0, #12
 80091b6:	f001 ff75 	bl	800b0a4 <memcpy>
 80091ba:	2201      	movs	r2, #1
 80091bc:	4631      	mov	r1, r6
 80091be:	4658      	mov	r0, fp
 80091c0:	f000 fc52 	bl	8009a68 <__lshift>
 80091c4:	f10a 0301 	add.w	r3, sl, #1
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	4453      	add	r3, sl
 80091ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	462f      	mov	r7, r5
 80091d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80091da:	4605      	mov	r5, r0
 80091dc:	9b07      	ldr	r3, [sp, #28]
 80091de:	4621      	mov	r1, r4
 80091e0:	3b01      	subs	r3, #1
 80091e2:	4648      	mov	r0, r9
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	f7ff fa9b 	bl	8008720 <quorem>
 80091ea:	4639      	mov	r1, r7
 80091ec:	9002      	str	r0, [sp, #8]
 80091ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091f2:	4648      	mov	r0, r9
 80091f4:	f000 fca4 	bl	8009b40 <__mcmp>
 80091f8:	462a      	mov	r2, r5
 80091fa:	9008      	str	r0, [sp, #32]
 80091fc:	4621      	mov	r1, r4
 80091fe:	4658      	mov	r0, fp
 8009200:	f000 fcba 	bl	8009b78 <__mdiff>
 8009204:	68c2      	ldr	r2, [r0, #12]
 8009206:	4606      	mov	r6, r0
 8009208:	bb02      	cbnz	r2, 800924c <_dtoa_r+0xa1c>
 800920a:	4601      	mov	r1, r0
 800920c:	4648      	mov	r0, r9
 800920e:	f000 fc97 	bl	8009b40 <__mcmp>
 8009212:	4602      	mov	r2, r0
 8009214:	4631      	mov	r1, r6
 8009216:	4658      	mov	r0, fp
 8009218:	920e      	str	r2, [sp, #56]	@ 0x38
 800921a:	f000 fa0d 	bl	8009638 <_Bfree>
 800921e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009222:	9e07      	ldr	r6, [sp, #28]
 8009224:	ea43 0102 	orr.w	r1, r3, r2
 8009228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922a:	4319      	orrs	r1, r3
 800922c:	d110      	bne.n	8009250 <_dtoa_r+0xa20>
 800922e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009232:	d029      	beq.n	8009288 <_dtoa_r+0xa58>
 8009234:	9b08      	ldr	r3, [sp, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	dd02      	ble.n	8009240 <_dtoa_r+0xa10>
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009240:	9b00      	ldr	r3, [sp, #0]
 8009242:	f883 8000 	strb.w	r8, [r3]
 8009246:	e63f      	b.n	8008ec8 <_dtoa_r+0x698>
 8009248:	4628      	mov	r0, r5
 800924a:	e7bb      	b.n	80091c4 <_dtoa_r+0x994>
 800924c:	2201      	movs	r2, #1
 800924e:	e7e1      	b.n	8009214 <_dtoa_r+0x9e4>
 8009250:	9b08      	ldr	r3, [sp, #32]
 8009252:	2b00      	cmp	r3, #0
 8009254:	db04      	blt.n	8009260 <_dtoa_r+0xa30>
 8009256:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009258:	430b      	orrs	r3, r1
 800925a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800925c:	430b      	orrs	r3, r1
 800925e:	d120      	bne.n	80092a2 <_dtoa_r+0xa72>
 8009260:	2a00      	cmp	r2, #0
 8009262:	dded      	ble.n	8009240 <_dtoa_r+0xa10>
 8009264:	4649      	mov	r1, r9
 8009266:	2201      	movs	r2, #1
 8009268:	4658      	mov	r0, fp
 800926a:	f000 fbfd 	bl	8009a68 <__lshift>
 800926e:	4621      	mov	r1, r4
 8009270:	4681      	mov	r9, r0
 8009272:	f000 fc65 	bl	8009b40 <__mcmp>
 8009276:	2800      	cmp	r0, #0
 8009278:	dc03      	bgt.n	8009282 <_dtoa_r+0xa52>
 800927a:	d1e1      	bne.n	8009240 <_dtoa_r+0xa10>
 800927c:	f018 0f01 	tst.w	r8, #1
 8009280:	d0de      	beq.n	8009240 <_dtoa_r+0xa10>
 8009282:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009286:	d1d8      	bne.n	800923a <_dtoa_r+0xa0a>
 8009288:	9a00      	ldr	r2, [sp, #0]
 800928a:	2339      	movs	r3, #57	@ 0x39
 800928c:	7013      	strb	r3, [r2, #0]
 800928e:	4633      	mov	r3, r6
 8009290:	461e      	mov	r6, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009298:	2a39      	cmp	r2, #57	@ 0x39
 800929a:	d052      	beq.n	8009342 <_dtoa_r+0xb12>
 800929c:	3201      	adds	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	e612      	b.n	8008ec8 <_dtoa_r+0x698>
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	dd07      	ble.n	80092b6 <_dtoa_r+0xa86>
 80092a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092aa:	d0ed      	beq.n	8009288 <_dtoa_r+0xa58>
 80092ac:	9a00      	ldr	r2, [sp, #0]
 80092ae:	f108 0301 	add.w	r3, r8, #1
 80092b2:	7013      	strb	r3, [r2, #0]
 80092b4:	e608      	b.n	8008ec8 <_dtoa_r+0x698>
 80092b6:	9b07      	ldr	r3, [sp, #28]
 80092b8:	9a07      	ldr	r2, [sp, #28]
 80092ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d028      	beq.n	8009316 <_dtoa_r+0xae6>
 80092c4:	4649      	mov	r1, r9
 80092c6:	2300      	movs	r3, #0
 80092c8:	220a      	movs	r2, #10
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 f9d6 	bl	800967c <__multadd>
 80092d0:	42af      	cmp	r7, r5
 80092d2:	4681      	mov	r9, r0
 80092d4:	f04f 0300 	mov.w	r3, #0
 80092d8:	f04f 020a 	mov.w	r2, #10
 80092dc:	4639      	mov	r1, r7
 80092de:	4658      	mov	r0, fp
 80092e0:	d107      	bne.n	80092f2 <_dtoa_r+0xac2>
 80092e2:	f000 f9cb 	bl	800967c <__multadd>
 80092e6:	4607      	mov	r7, r0
 80092e8:	4605      	mov	r5, r0
 80092ea:	9b07      	ldr	r3, [sp, #28]
 80092ec:	3301      	adds	r3, #1
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	e774      	b.n	80091dc <_dtoa_r+0x9ac>
 80092f2:	f000 f9c3 	bl	800967c <__multadd>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4607      	mov	r7, r0
 80092fa:	2300      	movs	r3, #0
 80092fc:	220a      	movs	r2, #10
 80092fe:	4658      	mov	r0, fp
 8009300:	f000 f9bc 	bl	800967c <__multadd>
 8009304:	4605      	mov	r5, r0
 8009306:	e7f0      	b.n	80092ea <_dtoa_r+0xaba>
 8009308:	9b00      	ldr	r3, [sp, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	bfcc      	ite	gt
 800930e:	461e      	movgt	r6, r3
 8009310:	2601      	movle	r6, #1
 8009312:	4456      	add	r6, sl
 8009314:	2700      	movs	r7, #0
 8009316:	4649      	mov	r1, r9
 8009318:	2201      	movs	r2, #1
 800931a:	4658      	mov	r0, fp
 800931c:	f000 fba4 	bl	8009a68 <__lshift>
 8009320:	4621      	mov	r1, r4
 8009322:	4681      	mov	r9, r0
 8009324:	f000 fc0c 	bl	8009b40 <__mcmp>
 8009328:	2800      	cmp	r0, #0
 800932a:	dcb0      	bgt.n	800928e <_dtoa_r+0xa5e>
 800932c:	d102      	bne.n	8009334 <_dtoa_r+0xb04>
 800932e:	f018 0f01 	tst.w	r8, #1
 8009332:	d1ac      	bne.n	800928e <_dtoa_r+0xa5e>
 8009334:	4633      	mov	r3, r6
 8009336:	461e      	mov	r6, r3
 8009338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800933c:	2a30      	cmp	r2, #48	@ 0x30
 800933e:	d0fa      	beq.n	8009336 <_dtoa_r+0xb06>
 8009340:	e5c2      	b.n	8008ec8 <_dtoa_r+0x698>
 8009342:	459a      	cmp	sl, r3
 8009344:	d1a4      	bne.n	8009290 <_dtoa_r+0xa60>
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	3301      	adds	r3, #1
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	2331      	movs	r3, #49	@ 0x31
 800934e:	f88a 3000 	strb.w	r3, [sl]
 8009352:	e5b9      	b.n	8008ec8 <_dtoa_r+0x698>
 8009354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009356:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093b4 <_dtoa_r+0xb84>
 800935a:	b11b      	cbz	r3, 8009364 <_dtoa_r+0xb34>
 800935c:	f10a 0308 	add.w	r3, sl, #8
 8009360:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	4650      	mov	r0, sl
 8009366:	b019      	add	sp, #100	@ 0x64
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936e:	2b01      	cmp	r3, #1
 8009370:	f77f ae37 	ble.w	8008fe2 <_dtoa_r+0x7b2>
 8009374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009376:	930a      	str	r3, [sp, #40]	@ 0x28
 8009378:	2001      	movs	r0, #1
 800937a:	e655      	b.n	8009028 <_dtoa_r+0x7f8>
 800937c:	9b00      	ldr	r3, [sp, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f77f aed6 	ble.w	8009130 <_dtoa_r+0x900>
 8009384:	4656      	mov	r6, sl
 8009386:	4621      	mov	r1, r4
 8009388:	4648      	mov	r0, r9
 800938a:	f7ff f9c9 	bl	8008720 <quorem>
 800938e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009392:	f806 8b01 	strb.w	r8, [r6], #1
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	eba6 020a 	sub.w	r2, r6, sl
 800939c:	4293      	cmp	r3, r2
 800939e:	ddb3      	ble.n	8009308 <_dtoa_r+0xad8>
 80093a0:	4649      	mov	r1, r9
 80093a2:	2300      	movs	r3, #0
 80093a4:	220a      	movs	r2, #10
 80093a6:	4658      	mov	r0, fp
 80093a8:	f000 f968 	bl	800967c <__multadd>
 80093ac:	4681      	mov	r9, r0
 80093ae:	e7ea      	b.n	8009386 <_dtoa_r+0xb56>
 80093b0:	0800bf11 	.word	0x0800bf11
 80093b4:	0800be95 	.word	0x0800be95

080093b8 <_free_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4605      	mov	r5, r0
 80093bc:	2900      	cmp	r1, #0
 80093be:	d041      	beq.n	8009444 <_free_r+0x8c>
 80093c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c4:	1f0c      	subs	r4, r1, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bfb8      	it	lt
 80093ca:	18e4      	addlt	r4, r4, r3
 80093cc:	f000 f8e8 	bl	80095a0 <__malloc_lock>
 80093d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009448 <_free_r+0x90>)
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	b933      	cbnz	r3, 80093e4 <_free_r+0x2c>
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	6014      	str	r4, [r2, #0]
 80093da:	4628      	mov	r0, r5
 80093dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093e0:	f000 b8e4 	b.w	80095ac <__malloc_unlock>
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d908      	bls.n	80093fa <_free_r+0x42>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	1821      	adds	r1, r4, r0
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf01      	itttt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	e7ed      	b.n	80093d6 <_free_r+0x1e>
 80093fa:	461a      	mov	r2, r3
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	b10b      	cbz	r3, 8009404 <_free_r+0x4c>
 8009400:	42a3      	cmp	r3, r4
 8009402:	d9fa      	bls.n	80093fa <_free_r+0x42>
 8009404:	6811      	ldr	r1, [r2, #0]
 8009406:	1850      	adds	r0, r2, r1
 8009408:	42a0      	cmp	r0, r4
 800940a:	d10b      	bne.n	8009424 <_free_r+0x6c>
 800940c:	6820      	ldr	r0, [r4, #0]
 800940e:	4401      	add	r1, r0
 8009410:	1850      	adds	r0, r2, r1
 8009412:	4283      	cmp	r3, r0
 8009414:	6011      	str	r1, [r2, #0]
 8009416:	d1e0      	bne.n	80093da <_free_r+0x22>
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	6053      	str	r3, [r2, #4]
 800941e:	4408      	add	r0, r1
 8009420:	6010      	str	r0, [r2, #0]
 8009422:	e7da      	b.n	80093da <_free_r+0x22>
 8009424:	d902      	bls.n	800942c <_free_r+0x74>
 8009426:	230c      	movs	r3, #12
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	e7d6      	b.n	80093da <_free_r+0x22>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	1821      	adds	r1, r4, r0
 8009430:	428b      	cmp	r3, r1
 8009432:	bf04      	itt	eq
 8009434:	6819      	ldreq	r1, [r3, #0]
 8009436:	685b      	ldreq	r3, [r3, #4]
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	bf04      	itt	eq
 800943c:	1809      	addeq	r1, r1, r0
 800943e:	6021      	streq	r1, [r4, #0]
 8009440:	6054      	str	r4, [r2, #4]
 8009442:	e7ca      	b.n	80093da <_free_r+0x22>
 8009444:	bd38      	pop	{r3, r4, r5, pc}
 8009446:	bf00      	nop
 8009448:	20000588 	.word	0x20000588

0800944c <malloc>:
 800944c:	4b02      	ldr	r3, [pc, #8]	@ (8009458 <malloc+0xc>)
 800944e:	4601      	mov	r1, r0
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f000 b825 	b.w	80094a0 <_malloc_r>
 8009456:	bf00      	nop
 8009458:	20000030 	.word	0x20000030

0800945c <sbrk_aligned>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4e0f      	ldr	r6, [pc, #60]	@ (800949c <sbrk_aligned+0x40>)
 8009460:	460c      	mov	r4, r1
 8009462:	6831      	ldr	r1, [r6, #0]
 8009464:	4605      	mov	r5, r0
 8009466:	b911      	cbnz	r1, 800946e <sbrk_aligned+0x12>
 8009468:	f001 fe0c 	bl	800b084 <_sbrk_r>
 800946c:	6030      	str	r0, [r6, #0]
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f001 fe07 	bl	800b084 <_sbrk_r>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d103      	bne.n	8009482 <sbrk_aligned+0x26>
 800947a:	f04f 34ff 	mov.w	r4, #4294967295
 800947e:	4620      	mov	r0, r4
 8009480:	bd70      	pop	{r4, r5, r6, pc}
 8009482:	1cc4      	adds	r4, r0, #3
 8009484:	f024 0403 	bic.w	r4, r4, #3
 8009488:	42a0      	cmp	r0, r4
 800948a:	d0f8      	beq.n	800947e <sbrk_aligned+0x22>
 800948c:	1a21      	subs	r1, r4, r0
 800948e:	4628      	mov	r0, r5
 8009490:	f001 fdf8 	bl	800b084 <_sbrk_r>
 8009494:	3001      	adds	r0, #1
 8009496:	d1f2      	bne.n	800947e <sbrk_aligned+0x22>
 8009498:	e7ef      	b.n	800947a <sbrk_aligned+0x1e>
 800949a:	bf00      	nop
 800949c:	20000584 	.word	0x20000584

080094a0 <_malloc_r>:
 80094a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a4:	1ccd      	adds	r5, r1, #3
 80094a6:	f025 0503 	bic.w	r5, r5, #3
 80094aa:	3508      	adds	r5, #8
 80094ac:	2d0c      	cmp	r5, #12
 80094ae:	bf38      	it	cc
 80094b0:	250c      	movcc	r5, #12
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	4606      	mov	r6, r0
 80094b6:	db01      	blt.n	80094bc <_malloc_r+0x1c>
 80094b8:	42a9      	cmp	r1, r5
 80094ba:	d904      	bls.n	80094c6 <_malloc_r+0x26>
 80094bc:	230c      	movs	r3, #12
 80094be:	6033      	str	r3, [r6, #0]
 80094c0:	2000      	movs	r0, #0
 80094c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800959c <_malloc_r+0xfc>
 80094ca:	f000 f869 	bl	80095a0 <__malloc_lock>
 80094ce:	f8d8 3000 	ldr.w	r3, [r8]
 80094d2:	461c      	mov	r4, r3
 80094d4:	bb44      	cbnz	r4, 8009528 <_malloc_r+0x88>
 80094d6:	4629      	mov	r1, r5
 80094d8:	4630      	mov	r0, r6
 80094da:	f7ff ffbf 	bl	800945c <sbrk_aligned>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	4604      	mov	r4, r0
 80094e2:	d158      	bne.n	8009596 <_malloc_r+0xf6>
 80094e4:	f8d8 4000 	ldr.w	r4, [r8]
 80094e8:	4627      	mov	r7, r4
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	d143      	bne.n	8009576 <_malloc_r+0xd6>
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	d04b      	beq.n	800958a <_malloc_r+0xea>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	4639      	mov	r1, r7
 80094f6:	4630      	mov	r0, r6
 80094f8:	eb04 0903 	add.w	r9, r4, r3
 80094fc:	f001 fdc2 	bl	800b084 <_sbrk_r>
 8009500:	4581      	cmp	r9, r0
 8009502:	d142      	bne.n	800958a <_malloc_r+0xea>
 8009504:	6821      	ldr	r1, [r4, #0]
 8009506:	1a6d      	subs	r5, r5, r1
 8009508:	4629      	mov	r1, r5
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff ffa6 	bl	800945c <sbrk_aligned>
 8009510:	3001      	adds	r0, #1
 8009512:	d03a      	beq.n	800958a <_malloc_r+0xea>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	442b      	add	r3, r5
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	f8d8 3000 	ldr.w	r3, [r8]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	bb62      	cbnz	r2, 800957c <_malloc_r+0xdc>
 8009522:	f8c8 7000 	str.w	r7, [r8]
 8009526:	e00f      	b.n	8009548 <_malloc_r+0xa8>
 8009528:	6822      	ldr	r2, [r4, #0]
 800952a:	1b52      	subs	r2, r2, r5
 800952c:	d420      	bmi.n	8009570 <_malloc_r+0xd0>
 800952e:	2a0b      	cmp	r2, #11
 8009530:	d917      	bls.n	8009562 <_malloc_r+0xc2>
 8009532:	1961      	adds	r1, r4, r5
 8009534:	42a3      	cmp	r3, r4
 8009536:	6025      	str	r5, [r4, #0]
 8009538:	bf18      	it	ne
 800953a:	6059      	strne	r1, [r3, #4]
 800953c:	6863      	ldr	r3, [r4, #4]
 800953e:	bf08      	it	eq
 8009540:	f8c8 1000 	streq.w	r1, [r8]
 8009544:	5162      	str	r2, [r4, r5]
 8009546:	604b      	str	r3, [r1, #4]
 8009548:	4630      	mov	r0, r6
 800954a:	f000 f82f 	bl	80095ac <__malloc_unlock>
 800954e:	f104 000b 	add.w	r0, r4, #11
 8009552:	1d23      	adds	r3, r4, #4
 8009554:	f020 0007 	bic.w	r0, r0, #7
 8009558:	1ac2      	subs	r2, r0, r3
 800955a:	bf1c      	itt	ne
 800955c:	1a1b      	subne	r3, r3, r0
 800955e:	50a3      	strne	r3, [r4, r2]
 8009560:	e7af      	b.n	80094c2 <_malloc_r+0x22>
 8009562:	6862      	ldr	r2, [r4, #4]
 8009564:	42a3      	cmp	r3, r4
 8009566:	bf0c      	ite	eq
 8009568:	f8c8 2000 	streq.w	r2, [r8]
 800956c:	605a      	strne	r2, [r3, #4]
 800956e:	e7eb      	b.n	8009548 <_malloc_r+0xa8>
 8009570:	4623      	mov	r3, r4
 8009572:	6864      	ldr	r4, [r4, #4]
 8009574:	e7ae      	b.n	80094d4 <_malloc_r+0x34>
 8009576:	463c      	mov	r4, r7
 8009578:	687f      	ldr	r7, [r7, #4]
 800957a:	e7b6      	b.n	80094ea <_malloc_r+0x4a>
 800957c:	461a      	mov	r2, r3
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	42a3      	cmp	r3, r4
 8009582:	d1fb      	bne.n	800957c <_malloc_r+0xdc>
 8009584:	2300      	movs	r3, #0
 8009586:	6053      	str	r3, [r2, #4]
 8009588:	e7de      	b.n	8009548 <_malloc_r+0xa8>
 800958a:	230c      	movs	r3, #12
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	4630      	mov	r0, r6
 8009590:	f000 f80c 	bl	80095ac <__malloc_unlock>
 8009594:	e794      	b.n	80094c0 <_malloc_r+0x20>
 8009596:	6005      	str	r5, [r0, #0]
 8009598:	e7d6      	b.n	8009548 <_malloc_r+0xa8>
 800959a:	bf00      	nop
 800959c:	20000588 	.word	0x20000588

080095a0 <__malloc_lock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	@ (80095a8 <__malloc_lock+0x8>)
 80095a2:	f7ff b8b4 	b.w	800870e <__retarget_lock_acquire_recursive>
 80095a6:	bf00      	nop
 80095a8:	20000580 	.word	0x20000580

080095ac <__malloc_unlock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	@ (80095b4 <__malloc_unlock+0x8>)
 80095ae:	f7ff b8af 	b.w	8008710 <__retarget_lock_release_recursive>
 80095b2:	bf00      	nop
 80095b4:	20000580 	.word	0x20000580

080095b8 <_Balloc>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	69c6      	ldr	r6, [r0, #28]
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	b976      	cbnz	r6, 80095e0 <_Balloc+0x28>
 80095c2:	2010      	movs	r0, #16
 80095c4:	f7ff ff42 	bl	800944c <malloc>
 80095c8:	4602      	mov	r2, r0
 80095ca:	61e0      	str	r0, [r4, #28]
 80095cc:	b920      	cbnz	r0, 80095d8 <_Balloc+0x20>
 80095ce:	4b18      	ldr	r3, [pc, #96]	@ (8009630 <_Balloc+0x78>)
 80095d0:	4818      	ldr	r0, [pc, #96]	@ (8009634 <_Balloc+0x7c>)
 80095d2:	216b      	movs	r1, #107	@ 0x6b
 80095d4:	f001 fd7c 	bl	800b0d0 <__assert_func>
 80095d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095dc:	6006      	str	r6, [r0, #0]
 80095de:	60c6      	str	r6, [r0, #12]
 80095e0:	69e6      	ldr	r6, [r4, #28]
 80095e2:	68f3      	ldr	r3, [r6, #12]
 80095e4:	b183      	cbz	r3, 8009608 <_Balloc+0x50>
 80095e6:	69e3      	ldr	r3, [r4, #28]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ee:	b9b8      	cbnz	r0, 8009620 <_Balloc+0x68>
 80095f0:	2101      	movs	r1, #1
 80095f2:	fa01 f605 	lsl.w	r6, r1, r5
 80095f6:	1d72      	adds	r2, r6, #5
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	4620      	mov	r0, r4
 80095fc:	f001 fd86 	bl	800b10c <_calloc_r>
 8009600:	b160      	cbz	r0, 800961c <_Balloc+0x64>
 8009602:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009606:	e00e      	b.n	8009626 <_Balloc+0x6e>
 8009608:	2221      	movs	r2, #33	@ 0x21
 800960a:	2104      	movs	r1, #4
 800960c:	4620      	mov	r0, r4
 800960e:	f001 fd7d 	bl	800b10c <_calloc_r>
 8009612:	69e3      	ldr	r3, [r4, #28]
 8009614:	60f0      	str	r0, [r6, #12]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e4      	bne.n	80095e6 <_Balloc+0x2e>
 800961c:	2000      	movs	r0, #0
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	6802      	ldr	r2, [r0, #0]
 8009622:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009626:	2300      	movs	r3, #0
 8009628:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800962c:	e7f7      	b.n	800961e <_Balloc+0x66>
 800962e:	bf00      	nop
 8009630:	0800bea2 	.word	0x0800bea2
 8009634:	0800bf22 	.word	0x0800bf22

08009638 <_Bfree>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	69c6      	ldr	r6, [r0, #28]
 800963c:	4605      	mov	r5, r0
 800963e:	460c      	mov	r4, r1
 8009640:	b976      	cbnz	r6, 8009660 <_Bfree+0x28>
 8009642:	2010      	movs	r0, #16
 8009644:	f7ff ff02 	bl	800944c <malloc>
 8009648:	4602      	mov	r2, r0
 800964a:	61e8      	str	r0, [r5, #28]
 800964c:	b920      	cbnz	r0, 8009658 <_Bfree+0x20>
 800964e:	4b09      	ldr	r3, [pc, #36]	@ (8009674 <_Bfree+0x3c>)
 8009650:	4809      	ldr	r0, [pc, #36]	@ (8009678 <_Bfree+0x40>)
 8009652:	218f      	movs	r1, #143	@ 0x8f
 8009654:	f001 fd3c 	bl	800b0d0 <__assert_func>
 8009658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800965c:	6006      	str	r6, [r0, #0]
 800965e:	60c6      	str	r6, [r0, #12]
 8009660:	b13c      	cbz	r4, 8009672 <_Bfree+0x3a>
 8009662:	69eb      	ldr	r3, [r5, #28]
 8009664:	6862      	ldr	r2, [r4, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800966c:	6021      	str	r1, [r4, #0]
 800966e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	0800bea2 	.word	0x0800bea2
 8009678:	0800bf22 	.word	0x0800bf22

0800967c <__multadd>:
 800967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009680:	690d      	ldr	r5, [r1, #16]
 8009682:	4607      	mov	r7, r0
 8009684:	460c      	mov	r4, r1
 8009686:	461e      	mov	r6, r3
 8009688:	f101 0c14 	add.w	ip, r1, #20
 800968c:	2000      	movs	r0, #0
 800968e:	f8dc 3000 	ldr.w	r3, [ip]
 8009692:	b299      	uxth	r1, r3
 8009694:	fb02 6101 	mla	r1, r2, r1, r6
 8009698:	0c1e      	lsrs	r6, r3, #16
 800969a:	0c0b      	lsrs	r3, r1, #16
 800969c:	fb02 3306 	mla	r3, r2, r6, r3
 80096a0:	b289      	uxth	r1, r1
 80096a2:	3001      	adds	r0, #1
 80096a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096a8:	4285      	cmp	r5, r0
 80096aa:	f84c 1b04 	str.w	r1, [ip], #4
 80096ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096b2:	dcec      	bgt.n	800968e <__multadd+0x12>
 80096b4:	b30e      	cbz	r6, 80096fa <__multadd+0x7e>
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	42ab      	cmp	r3, r5
 80096ba:	dc19      	bgt.n	80096f0 <__multadd+0x74>
 80096bc:	6861      	ldr	r1, [r4, #4]
 80096be:	4638      	mov	r0, r7
 80096c0:	3101      	adds	r1, #1
 80096c2:	f7ff ff79 	bl	80095b8 <_Balloc>
 80096c6:	4680      	mov	r8, r0
 80096c8:	b928      	cbnz	r0, 80096d6 <__multadd+0x5a>
 80096ca:	4602      	mov	r2, r0
 80096cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009700 <__multadd+0x84>)
 80096ce:	480d      	ldr	r0, [pc, #52]	@ (8009704 <__multadd+0x88>)
 80096d0:	21ba      	movs	r1, #186	@ 0xba
 80096d2:	f001 fcfd 	bl	800b0d0 <__assert_func>
 80096d6:	6922      	ldr	r2, [r4, #16]
 80096d8:	3202      	adds	r2, #2
 80096da:	f104 010c 	add.w	r1, r4, #12
 80096de:	0092      	lsls	r2, r2, #2
 80096e0:	300c      	adds	r0, #12
 80096e2:	f001 fcdf 	bl	800b0a4 <memcpy>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff ffa5 	bl	8009638 <_Bfree>
 80096ee:	4644      	mov	r4, r8
 80096f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096f4:	3501      	adds	r5, #1
 80096f6:	615e      	str	r6, [r3, #20]
 80096f8:	6125      	str	r5, [r4, #16]
 80096fa:	4620      	mov	r0, r4
 80096fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009700:	0800bf11 	.word	0x0800bf11
 8009704:	0800bf22 	.word	0x0800bf22

08009708 <__s2b>:
 8009708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800970c:	460c      	mov	r4, r1
 800970e:	4615      	mov	r5, r2
 8009710:	461f      	mov	r7, r3
 8009712:	2209      	movs	r2, #9
 8009714:	3308      	adds	r3, #8
 8009716:	4606      	mov	r6, r0
 8009718:	fb93 f3f2 	sdiv	r3, r3, r2
 800971c:	2100      	movs	r1, #0
 800971e:	2201      	movs	r2, #1
 8009720:	429a      	cmp	r2, r3
 8009722:	db09      	blt.n	8009738 <__s2b+0x30>
 8009724:	4630      	mov	r0, r6
 8009726:	f7ff ff47 	bl	80095b8 <_Balloc>
 800972a:	b940      	cbnz	r0, 800973e <__s2b+0x36>
 800972c:	4602      	mov	r2, r0
 800972e:	4b19      	ldr	r3, [pc, #100]	@ (8009794 <__s2b+0x8c>)
 8009730:	4819      	ldr	r0, [pc, #100]	@ (8009798 <__s2b+0x90>)
 8009732:	21d3      	movs	r1, #211	@ 0xd3
 8009734:	f001 fccc 	bl	800b0d0 <__assert_func>
 8009738:	0052      	lsls	r2, r2, #1
 800973a:	3101      	adds	r1, #1
 800973c:	e7f0      	b.n	8009720 <__s2b+0x18>
 800973e:	9b08      	ldr	r3, [sp, #32]
 8009740:	6143      	str	r3, [r0, #20]
 8009742:	2d09      	cmp	r5, #9
 8009744:	f04f 0301 	mov.w	r3, #1
 8009748:	6103      	str	r3, [r0, #16]
 800974a:	dd16      	ble.n	800977a <__s2b+0x72>
 800974c:	f104 0909 	add.w	r9, r4, #9
 8009750:	46c8      	mov	r8, r9
 8009752:	442c      	add	r4, r5
 8009754:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009758:	4601      	mov	r1, r0
 800975a:	3b30      	subs	r3, #48	@ 0x30
 800975c:	220a      	movs	r2, #10
 800975e:	4630      	mov	r0, r6
 8009760:	f7ff ff8c 	bl	800967c <__multadd>
 8009764:	45a0      	cmp	r8, r4
 8009766:	d1f5      	bne.n	8009754 <__s2b+0x4c>
 8009768:	f1a5 0408 	sub.w	r4, r5, #8
 800976c:	444c      	add	r4, r9
 800976e:	1b2d      	subs	r5, r5, r4
 8009770:	1963      	adds	r3, r4, r5
 8009772:	42bb      	cmp	r3, r7
 8009774:	db04      	blt.n	8009780 <__s2b+0x78>
 8009776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977a:	340a      	adds	r4, #10
 800977c:	2509      	movs	r5, #9
 800977e:	e7f6      	b.n	800976e <__s2b+0x66>
 8009780:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009784:	4601      	mov	r1, r0
 8009786:	3b30      	subs	r3, #48	@ 0x30
 8009788:	220a      	movs	r2, #10
 800978a:	4630      	mov	r0, r6
 800978c:	f7ff ff76 	bl	800967c <__multadd>
 8009790:	e7ee      	b.n	8009770 <__s2b+0x68>
 8009792:	bf00      	nop
 8009794:	0800bf11 	.word	0x0800bf11
 8009798:	0800bf22 	.word	0x0800bf22

0800979c <__hi0bits>:
 800979c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097a0:	4603      	mov	r3, r0
 80097a2:	bf36      	itet	cc
 80097a4:	0403      	lslcc	r3, r0, #16
 80097a6:	2000      	movcs	r0, #0
 80097a8:	2010      	movcc	r0, #16
 80097aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097ae:	bf3c      	itt	cc
 80097b0:	021b      	lslcc	r3, r3, #8
 80097b2:	3008      	addcc	r0, #8
 80097b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097b8:	bf3c      	itt	cc
 80097ba:	011b      	lslcc	r3, r3, #4
 80097bc:	3004      	addcc	r0, #4
 80097be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097c2:	bf3c      	itt	cc
 80097c4:	009b      	lslcc	r3, r3, #2
 80097c6:	3002      	addcc	r0, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	db05      	blt.n	80097d8 <__hi0bits+0x3c>
 80097cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097d0:	f100 0001 	add.w	r0, r0, #1
 80097d4:	bf08      	it	eq
 80097d6:	2020      	moveq	r0, #32
 80097d8:	4770      	bx	lr

080097da <__lo0bits>:
 80097da:	6803      	ldr	r3, [r0, #0]
 80097dc:	4602      	mov	r2, r0
 80097de:	f013 0007 	ands.w	r0, r3, #7
 80097e2:	d00b      	beq.n	80097fc <__lo0bits+0x22>
 80097e4:	07d9      	lsls	r1, r3, #31
 80097e6:	d421      	bmi.n	800982c <__lo0bits+0x52>
 80097e8:	0798      	lsls	r0, r3, #30
 80097ea:	bf49      	itett	mi
 80097ec:	085b      	lsrmi	r3, r3, #1
 80097ee:	089b      	lsrpl	r3, r3, #2
 80097f0:	2001      	movmi	r0, #1
 80097f2:	6013      	strmi	r3, [r2, #0]
 80097f4:	bf5c      	itt	pl
 80097f6:	6013      	strpl	r3, [r2, #0]
 80097f8:	2002      	movpl	r0, #2
 80097fa:	4770      	bx	lr
 80097fc:	b299      	uxth	r1, r3
 80097fe:	b909      	cbnz	r1, 8009804 <__lo0bits+0x2a>
 8009800:	0c1b      	lsrs	r3, r3, #16
 8009802:	2010      	movs	r0, #16
 8009804:	b2d9      	uxtb	r1, r3
 8009806:	b909      	cbnz	r1, 800980c <__lo0bits+0x32>
 8009808:	3008      	adds	r0, #8
 800980a:	0a1b      	lsrs	r3, r3, #8
 800980c:	0719      	lsls	r1, r3, #28
 800980e:	bf04      	itt	eq
 8009810:	091b      	lsreq	r3, r3, #4
 8009812:	3004      	addeq	r0, #4
 8009814:	0799      	lsls	r1, r3, #30
 8009816:	bf04      	itt	eq
 8009818:	089b      	lsreq	r3, r3, #2
 800981a:	3002      	addeq	r0, #2
 800981c:	07d9      	lsls	r1, r3, #31
 800981e:	d403      	bmi.n	8009828 <__lo0bits+0x4e>
 8009820:	085b      	lsrs	r3, r3, #1
 8009822:	f100 0001 	add.w	r0, r0, #1
 8009826:	d003      	beq.n	8009830 <__lo0bits+0x56>
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	4770      	bx	lr
 800982c:	2000      	movs	r0, #0
 800982e:	4770      	bx	lr
 8009830:	2020      	movs	r0, #32
 8009832:	4770      	bx	lr

08009834 <__i2b>:
 8009834:	b510      	push	{r4, lr}
 8009836:	460c      	mov	r4, r1
 8009838:	2101      	movs	r1, #1
 800983a:	f7ff febd 	bl	80095b8 <_Balloc>
 800983e:	4602      	mov	r2, r0
 8009840:	b928      	cbnz	r0, 800984e <__i2b+0x1a>
 8009842:	4b05      	ldr	r3, [pc, #20]	@ (8009858 <__i2b+0x24>)
 8009844:	4805      	ldr	r0, [pc, #20]	@ (800985c <__i2b+0x28>)
 8009846:	f240 1145 	movw	r1, #325	@ 0x145
 800984a:	f001 fc41 	bl	800b0d0 <__assert_func>
 800984e:	2301      	movs	r3, #1
 8009850:	6144      	str	r4, [r0, #20]
 8009852:	6103      	str	r3, [r0, #16]
 8009854:	bd10      	pop	{r4, pc}
 8009856:	bf00      	nop
 8009858:	0800bf11 	.word	0x0800bf11
 800985c:	0800bf22 	.word	0x0800bf22

08009860 <__multiply>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	4614      	mov	r4, r2
 8009866:	690a      	ldr	r2, [r1, #16]
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	429a      	cmp	r2, r3
 800986c:	bfa8      	it	ge
 800986e:	4623      	movge	r3, r4
 8009870:	460f      	mov	r7, r1
 8009872:	bfa4      	itt	ge
 8009874:	460c      	movge	r4, r1
 8009876:	461f      	movge	r7, r3
 8009878:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800987c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	6861      	ldr	r1, [r4, #4]
 8009884:	eb0a 0609 	add.w	r6, sl, r9
 8009888:	42b3      	cmp	r3, r6
 800988a:	b085      	sub	sp, #20
 800988c:	bfb8      	it	lt
 800988e:	3101      	addlt	r1, #1
 8009890:	f7ff fe92 	bl	80095b8 <_Balloc>
 8009894:	b930      	cbnz	r0, 80098a4 <__multiply+0x44>
 8009896:	4602      	mov	r2, r0
 8009898:	4b44      	ldr	r3, [pc, #272]	@ (80099ac <__multiply+0x14c>)
 800989a:	4845      	ldr	r0, [pc, #276]	@ (80099b0 <__multiply+0x150>)
 800989c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098a0:	f001 fc16 	bl	800b0d0 <__assert_func>
 80098a4:	f100 0514 	add.w	r5, r0, #20
 80098a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098ac:	462b      	mov	r3, r5
 80098ae:	2200      	movs	r2, #0
 80098b0:	4543      	cmp	r3, r8
 80098b2:	d321      	bcc.n	80098f8 <__multiply+0x98>
 80098b4:	f107 0114 	add.w	r1, r7, #20
 80098b8:	f104 0214 	add.w	r2, r4, #20
 80098bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098c4:	9302      	str	r3, [sp, #8]
 80098c6:	1b13      	subs	r3, r2, r4
 80098c8:	3b15      	subs	r3, #21
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	3304      	adds	r3, #4
 80098d0:	f104 0715 	add.w	r7, r4, #21
 80098d4:	42ba      	cmp	r2, r7
 80098d6:	bf38      	it	cc
 80098d8:	2304      	movcc	r3, #4
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	9103      	str	r1, [sp, #12]
 80098e0:	428b      	cmp	r3, r1
 80098e2:	d80c      	bhi.n	80098fe <__multiply+0x9e>
 80098e4:	2e00      	cmp	r6, #0
 80098e6:	dd03      	ble.n	80098f0 <__multiply+0x90>
 80098e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d05b      	beq.n	80099a8 <__multiply+0x148>
 80098f0:	6106      	str	r6, [r0, #16]
 80098f2:	b005      	add	sp, #20
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	f843 2b04 	str.w	r2, [r3], #4
 80098fc:	e7d8      	b.n	80098b0 <__multiply+0x50>
 80098fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009902:	f1ba 0f00 	cmp.w	sl, #0
 8009906:	d024      	beq.n	8009952 <__multiply+0xf2>
 8009908:	f104 0e14 	add.w	lr, r4, #20
 800990c:	46a9      	mov	r9, r5
 800990e:	f04f 0c00 	mov.w	ip, #0
 8009912:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009916:	f8d9 3000 	ldr.w	r3, [r9]
 800991a:	fa1f fb87 	uxth.w	fp, r7
 800991e:	b29b      	uxth	r3, r3
 8009920:	fb0a 330b 	mla	r3, sl, fp, r3
 8009924:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009928:	f8d9 7000 	ldr.w	r7, [r9]
 800992c:	4463      	add	r3, ip
 800992e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009932:	fb0a c70b 	mla	r7, sl, fp, ip
 8009936:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800993a:	b29b      	uxth	r3, r3
 800993c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009940:	4572      	cmp	r2, lr
 8009942:	f849 3b04 	str.w	r3, [r9], #4
 8009946:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800994a:	d8e2      	bhi.n	8009912 <__multiply+0xb2>
 800994c:	9b01      	ldr	r3, [sp, #4]
 800994e:	f845 c003 	str.w	ip, [r5, r3]
 8009952:	9b03      	ldr	r3, [sp, #12]
 8009954:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009958:	3104      	adds	r1, #4
 800995a:	f1b9 0f00 	cmp.w	r9, #0
 800995e:	d021      	beq.n	80099a4 <__multiply+0x144>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	f104 0c14 	add.w	ip, r4, #20
 8009966:	46ae      	mov	lr, r5
 8009968:	f04f 0a00 	mov.w	sl, #0
 800996c:	f8bc b000 	ldrh.w	fp, [ip]
 8009970:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009974:	fb09 770b 	mla	r7, r9, fp, r7
 8009978:	4457      	add	r7, sl
 800997a:	b29b      	uxth	r3, r3
 800997c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009980:	f84e 3b04 	str.w	r3, [lr], #4
 8009984:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800998c:	f8be 3000 	ldrh.w	r3, [lr]
 8009990:	fb09 330a 	mla	r3, r9, sl, r3
 8009994:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009998:	4562      	cmp	r2, ip
 800999a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800999e:	d8e5      	bhi.n	800996c <__multiply+0x10c>
 80099a0:	9f01      	ldr	r7, [sp, #4]
 80099a2:	51eb      	str	r3, [r5, r7]
 80099a4:	3504      	adds	r5, #4
 80099a6:	e799      	b.n	80098dc <__multiply+0x7c>
 80099a8:	3e01      	subs	r6, #1
 80099aa:	e79b      	b.n	80098e4 <__multiply+0x84>
 80099ac:	0800bf11 	.word	0x0800bf11
 80099b0:	0800bf22 	.word	0x0800bf22

080099b4 <__pow5mult>:
 80099b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b8:	4615      	mov	r5, r2
 80099ba:	f012 0203 	ands.w	r2, r2, #3
 80099be:	4607      	mov	r7, r0
 80099c0:	460e      	mov	r6, r1
 80099c2:	d007      	beq.n	80099d4 <__pow5mult+0x20>
 80099c4:	4c25      	ldr	r4, [pc, #148]	@ (8009a5c <__pow5mult+0xa8>)
 80099c6:	3a01      	subs	r2, #1
 80099c8:	2300      	movs	r3, #0
 80099ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099ce:	f7ff fe55 	bl	800967c <__multadd>
 80099d2:	4606      	mov	r6, r0
 80099d4:	10ad      	asrs	r5, r5, #2
 80099d6:	d03d      	beq.n	8009a54 <__pow5mult+0xa0>
 80099d8:	69fc      	ldr	r4, [r7, #28]
 80099da:	b97c      	cbnz	r4, 80099fc <__pow5mult+0x48>
 80099dc:	2010      	movs	r0, #16
 80099de:	f7ff fd35 	bl	800944c <malloc>
 80099e2:	4602      	mov	r2, r0
 80099e4:	61f8      	str	r0, [r7, #28]
 80099e6:	b928      	cbnz	r0, 80099f4 <__pow5mult+0x40>
 80099e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009a60 <__pow5mult+0xac>)
 80099ea:	481e      	ldr	r0, [pc, #120]	@ (8009a64 <__pow5mult+0xb0>)
 80099ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099f0:	f001 fb6e 	bl	800b0d0 <__assert_func>
 80099f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099f8:	6004      	str	r4, [r0, #0]
 80099fa:	60c4      	str	r4, [r0, #12]
 80099fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a04:	b94c      	cbnz	r4, 8009a1a <__pow5mult+0x66>
 8009a06:	f240 2171 	movw	r1, #625	@ 0x271
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	f7ff ff12 	bl	8009834 <__i2b>
 8009a10:	2300      	movs	r3, #0
 8009a12:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a16:	4604      	mov	r4, r0
 8009a18:	6003      	str	r3, [r0, #0]
 8009a1a:	f04f 0900 	mov.w	r9, #0
 8009a1e:	07eb      	lsls	r3, r5, #31
 8009a20:	d50a      	bpl.n	8009a38 <__pow5mult+0x84>
 8009a22:	4631      	mov	r1, r6
 8009a24:	4622      	mov	r2, r4
 8009a26:	4638      	mov	r0, r7
 8009a28:	f7ff ff1a 	bl	8009860 <__multiply>
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4638      	mov	r0, r7
 8009a32:	f7ff fe01 	bl	8009638 <_Bfree>
 8009a36:	4646      	mov	r6, r8
 8009a38:	106d      	asrs	r5, r5, #1
 8009a3a:	d00b      	beq.n	8009a54 <__pow5mult+0xa0>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	b938      	cbnz	r0, 8009a50 <__pow5mult+0x9c>
 8009a40:	4622      	mov	r2, r4
 8009a42:	4621      	mov	r1, r4
 8009a44:	4638      	mov	r0, r7
 8009a46:	f7ff ff0b 	bl	8009860 <__multiply>
 8009a4a:	6020      	str	r0, [r4, #0]
 8009a4c:	f8c0 9000 	str.w	r9, [r0]
 8009a50:	4604      	mov	r4, r0
 8009a52:	e7e4      	b.n	8009a1e <__pow5mult+0x6a>
 8009a54:	4630      	mov	r0, r6
 8009a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0800bf7c 	.word	0x0800bf7c
 8009a60:	0800bea2 	.word	0x0800bea2
 8009a64:	0800bf22 	.word	0x0800bf22

08009a68 <__lshift>:
 8009a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	6849      	ldr	r1, [r1, #4]
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	4607      	mov	r7, r0
 8009a7a:	4691      	mov	r9, r2
 8009a7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a80:	f108 0601 	add.w	r6, r8, #1
 8009a84:	42b3      	cmp	r3, r6
 8009a86:	db0b      	blt.n	8009aa0 <__lshift+0x38>
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff fd95 	bl	80095b8 <_Balloc>
 8009a8e:	4605      	mov	r5, r0
 8009a90:	b948      	cbnz	r0, 8009aa6 <__lshift+0x3e>
 8009a92:	4602      	mov	r2, r0
 8009a94:	4b28      	ldr	r3, [pc, #160]	@ (8009b38 <__lshift+0xd0>)
 8009a96:	4829      	ldr	r0, [pc, #164]	@ (8009b3c <__lshift+0xd4>)
 8009a98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a9c:	f001 fb18 	bl	800b0d0 <__assert_func>
 8009aa0:	3101      	adds	r1, #1
 8009aa2:	005b      	lsls	r3, r3, #1
 8009aa4:	e7ee      	b.n	8009a84 <__lshift+0x1c>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f100 0114 	add.w	r1, r0, #20
 8009aac:	f100 0210 	add.w	r2, r0, #16
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	4553      	cmp	r3, sl
 8009ab4:	db33      	blt.n	8009b1e <__lshift+0xb6>
 8009ab6:	6920      	ldr	r0, [r4, #16]
 8009ab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009abc:	f104 0314 	add.w	r3, r4, #20
 8009ac0:	f019 091f 	ands.w	r9, r9, #31
 8009ac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009acc:	d02b      	beq.n	8009b26 <__lshift+0xbe>
 8009ace:	f1c9 0e20 	rsb	lr, r9, #32
 8009ad2:	468a      	mov	sl, r1
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	6818      	ldr	r0, [r3, #0]
 8009ad8:	fa00 f009 	lsl.w	r0, r0, r9
 8009adc:	4310      	orrs	r0, r2
 8009ade:	f84a 0b04 	str.w	r0, [sl], #4
 8009ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae6:	459c      	cmp	ip, r3
 8009ae8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009aec:	d8f3      	bhi.n	8009ad6 <__lshift+0x6e>
 8009aee:	ebac 0304 	sub.w	r3, ip, r4
 8009af2:	3b15      	subs	r3, #21
 8009af4:	f023 0303 	bic.w	r3, r3, #3
 8009af8:	3304      	adds	r3, #4
 8009afa:	f104 0015 	add.w	r0, r4, #21
 8009afe:	4584      	cmp	ip, r0
 8009b00:	bf38      	it	cc
 8009b02:	2304      	movcc	r3, #4
 8009b04:	50ca      	str	r2, [r1, r3]
 8009b06:	b10a      	cbz	r2, 8009b0c <__lshift+0xa4>
 8009b08:	f108 0602 	add.w	r6, r8, #2
 8009b0c:	3e01      	subs	r6, #1
 8009b0e:	4638      	mov	r0, r7
 8009b10:	612e      	str	r6, [r5, #16]
 8009b12:	4621      	mov	r1, r4
 8009b14:	f7ff fd90 	bl	8009638 <_Bfree>
 8009b18:	4628      	mov	r0, r5
 8009b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b22:	3301      	adds	r3, #1
 8009b24:	e7c5      	b.n	8009ab2 <__lshift+0x4a>
 8009b26:	3904      	subs	r1, #4
 8009b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b30:	459c      	cmp	ip, r3
 8009b32:	d8f9      	bhi.n	8009b28 <__lshift+0xc0>
 8009b34:	e7ea      	b.n	8009b0c <__lshift+0xa4>
 8009b36:	bf00      	nop
 8009b38:	0800bf11 	.word	0x0800bf11
 8009b3c:	0800bf22 	.word	0x0800bf22

08009b40 <__mcmp>:
 8009b40:	690a      	ldr	r2, [r1, #16]
 8009b42:	4603      	mov	r3, r0
 8009b44:	6900      	ldr	r0, [r0, #16]
 8009b46:	1a80      	subs	r0, r0, r2
 8009b48:	b530      	push	{r4, r5, lr}
 8009b4a:	d10e      	bne.n	8009b6a <__mcmp+0x2a>
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	3114      	adds	r1, #20
 8009b50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b60:	4295      	cmp	r5, r2
 8009b62:	d003      	beq.n	8009b6c <__mcmp+0x2c>
 8009b64:	d205      	bcs.n	8009b72 <__mcmp+0x32>
 8009b66:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6a:	bd30      	pop	{r4, r5, pc}
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	d3f3      	bcc.n	8009b58 <__mcmp+0x18>
 8009b70:	e7fb      	b.n	8009b6a <__mcmp+0x2a>
 8009b72:	2001      	movs	r0, #1
 8009b74:	e7f9      	b.n	8009b6a <__mcmp+0x2a>
	...

08009b78 <__mdiff>:
 8009b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	4689      	mov	r9, r1
 8009b7e:	4606      	mov	r6, r0
 8009b80:	4611      	mov	r1, r2
 8009b82:	4648      	mov	r0, r9
 8009b84:	4614      	mov	r4, r2
 8009b86:	f7ff ffdb 	bl	8009b40 <__mcmp>
 8009b8a:	1e05      	subs	r5, r0, #0
 8009b8c:	d112      	bne.n	8009bb4 <__mdiff+0x3c>
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7ff fd11 	bl	80095b8 <_Balloc>
 8009b96:	4602      	mov	r2, r0
 8009b98:	b928      	cbnz	r0, 8009ba6 <__mdiff+0x2e>
 8009b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8009c98 <__mdiff+0x120>)
 8009b9c:	f240 2137 	movw	r1, #567	@ 0x237
 8009ba0:	483e      	ldr	r0, [pc, #248]	@ (8009c9c <__mdiff+0x124>)
 8009ba2:	f001 fa95 	bl	800b0d0 <__assert_func>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bac:	4610      	mov	r0, r2
 8009bae:	b003      	add	sp, #12
 8009bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb4:	bfbc      	itt	lt
 8009bb6:	464b      	movlt	r3, r9
 8009bb8:	46a1      	movlt	r9, r4
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bc0:	bfba      	itte	lt
 8009bc2:	461c      	movlt	r4, r3
 8009bc4:	2501      	movlt	r5, #1
 8009bc6:	2500      	movge	r5, #0
 8009bc8:	f7ff fcf6 	bl	80095b8 <_Balloc>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	b918      	cbnz	r0, 8009bd8 <__mdiff+0x60>
 8009bd0:	4b31      	ldr	r3, [pc, #196]	@ (8009c98 <__mdiff+0x120>)
 8009bd2:	f240 2145 	movw	r1, #581	@ 0x245
 8009bd6:	e7e3      	b.n	8009ba0 <__mdiff+0x28>
 8009bd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009bdc:	6926      	ldr	r6, [r4, #16]
 8009bde:	60c5      	str	r5, [r0, #12]
 8009be0:	f109 0310 	add.w	r3, r9, #16
 8009be4:	f109 0514 	add.w	r5, r9, #20
 8009be8:	f104 0e14 	add.w	lr, r4, #20
 8009bec:	f100 0b14 	add.w	fp, r0, #20
 8009bf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009bf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	46d9      	mov	r9, fp
 8009bfc:	f04f 0c00 	mov.w	ip, #0
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	fa1f f38a 	uxth.w	r3, sl
 8009c10:	4619      	mov	r1, r3
 8009c12:	b283      	uxth	r3, r0
 8009c14:	1acb      	subs	r3, r1, r3
 8009c16:	0c00      	lsrs	r0, r0, #16
 8009c18:	4463      	add	r3, ip
 8009c1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c28:	4576      	cmp	r6, lr
 8009c2a:	f849 3b04 	str.w	r3, [r9], #4
 8009c2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c32:	d8e5      	bhi.n	8009c00 <__mdiff+0x88>
 8009c34:	1b33      	subs	r3, r6, r4
 8009c36:	3b15      	subs	r3, #21
 8009c38:	f023 0303 	bic.w	r3, r3, #3
 8009c3c:	3415      	adds	r4, #21
 8009c3e:	3304      	adds	r3, #4
 8009c40:	42a6      	cmp	r6, r4
 8009c42:	bf38      	it	cc
 8009c44:	2304      	movcc	r3, #4
 8009c46:	441d      	add	r5, r3
 8009c48:	445b      	add	r3, fp
 8009c4a:	461e      	mov	r6, r3
 8009c4c:	462c      	mov	r4, r5
 8009c4e:	4544      	cmp	r4, r8
 8009c50:	d30e      	bcc.n	8009c70 <__mdiff+0xf8>
 8009c52:	f108 0103 	add.w	r1, r8, #3
 8009c56:	1b49      	subs	r1, r1, r5
 8009c58:	f021 0103 	bic.w	r1, r1, #3
 8009c5c:	3d03      	subs	r5, #3
 8009c5e:	45a8      	cmp	r8, r5
 8009c60:	bf38      	it	cc
 8009c62:	2100      	movcc	r1, #0
 8009c64:	440b      	add	r3, r1
 8009c66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c6a:	b191      	cbz	r1, 8009c92 <__mdiff+0x11a>
 8009c6c:	6117      	str	r7, [r2, #16]
 8009c6e:	e79d      	b.n	8009bac <__mdiff+0x34>
 8009c70:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c74:	46e6      	mov	lr, ip
 8009c76:	0c08      	lsrs	r0, r1, #16
 8009c78:	fa1c fc81 	uxtah	ip, ip, r1
 8009c7c:	4471      	add	r1, lr
 8009c7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c82:	b289      	uxth	r1, r1
 8009c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c88:	f846 1b04 	str.w	r1, [r6], #4
 8009c8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c90:	e7dd      	b.n	8009c4e <__mdiff+0xd6>
 8009c92:	3f01      	subs	r7, #1
 8009c94:	e7e7      	b.n	8009c66 <__mdiff+0xee>
 8009c96:	bf00      	nop
 8009c98:	0800bf11 	.word	0x0800bf11
 8009c9c:	0800bf22 	.word	0x0800bf22

08009ca0 <__ulp>:
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	ed8d 0b00 	vstr	d0, [sp]
 8009ca6:	9a01      	ldr	r2, [sp, #4]
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce8 <__ulp+0x48>)
 8009caa:	4013      	ands	r3, r2
 8009cac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dc08      	bgt.n	8009cc6 <__ulp+0x26>
 8009cb4:	425b      	negs	r3, r3
 8009cb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009cba:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009cbe:	da04      	bge.n	8009cca <__ulp+0x2a>
 8009cc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009cc4:	4113      	asrs	r3, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	e008      	b.n	8009cdc <__ulp+0x3c>
 8009cca:	f1a2 0314 	sub.w	r3, r2, #20
 8009cce:	2b1e      	cmp	r3, #30
 8009cd0:	bfda      	itte	le
 8009cd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009cd6:	40da      	lsrle	r2, r3
 8009cd8:	2201      	movgt	r2, #1
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	ec41 0b10 	vmov	d0, r0, r1
 8009ce4:	b002      	add	sp, #8
 8009ce6:	4770      	bx	lr
 8009ce8:	7ff00000 	.word	0x7ff00000

08009cec <__b2d>:
 8009cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	6906      	ldr	r6, [r0, #16]
 8009cf2:	f100 0814 	add.w	r8, r0, #20
 8009cf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009cfa:	1f37      	subs	r7, r6, #4
 8009cfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d00:	4610      	mov	r0, r2
 8009d02:	f7ff fd4b 	bl	800979c <__hi0bits>
 8009d06:	f1c0 0320 	rsb	r3, r0, #32
 8009d0a:	280a      	cmp	r0, #10
 8009d0c:	600b      	str	r3, [r1, #0]
 8009d0e:	491b      	ldr	r1, [pc, #108]	@ (8009d7c <__b2d+0x90>)
 8009d10:	dc15      	bgt.n	8009d3e <__b2d+0x52>
 8009d12:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d16:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d1a:	45b8      	cmp	r8, r7
 8009d1c:	ea43 0501 	orr.w	r5, r3, r1
 8009d20:	bf34      	ite	cc
 8009d22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d26:	2300      	movcs	r3, #0
 8009d28:	3015      	adds	r0, #21
 8009d2a:	fa02 f000 	lsl.w	r0, r2, r0
 8009d2e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d32:	4303      	orrs	r3, r0
 8009d34:	461c      	mov	r4, r3
 8009d36:	ec45 4b10 	vmov	d0, r4, r5
 8009d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d3e:	45b8      	cmp	r8, r7
 8009d40:	bf3a      	itte	cc
 8009d42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d46:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d4a:	2300      	movcs	r3, #0
 8009d4c:	380b      	subs	r0, #11
 8009d4e:	d012      	beq.n	8009d76 <__b2d+0x8a>
 8009d50:	f1c0 0120 	rsb	r1, r0, #32
 8009d54:	fa23 f401 	lsr.w	r4, r3, r1
 8009d58:	4082      	lsls	r2, r0
 8009d5a:	4322      	orrs	r2, r4
 8009d5c:	4547      	cmp	r7, r8
 8009d5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009d62:	bf8c      	ite	hi
 8009d64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d68:	2200      	movls	r2, #0
 8009d6a:	4083      	lsls	r3, r0
 8009d6c:	40ca      	lsrs	r2, r1
 8009d6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d72:	4313      	orrs	r3, r2
 8009d74:	e7de      	b.n	8009d34 <__b2d+0x48>
 8009d76:	ea42 0501 	orr.w	r5, r2, r1
 8009d7a:	e7db      	b.n	8009d34 <__b2d+0x48>
 8009d7c:	3ff00000 	.word	0x3ff00000

08009d80 <__d2b>:
 8009d80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d84:	460f      	mov	r7, r1
 8009d86:	2101      	movs	r1, #1
 8009d88:	ec59 8b10 	vmov	r8, r9, d0
 8009d8c:	4616      	mov	r6, r2
 8009d8e:	f7ff fc13 	bl	80095b8 <_Balloc>
 8009d92:	4604      	mov	r4, r0
 8009d94:	b930      	cbnz	r0, 8009da4 <__d2b+0x24>
 8009d96:	4602      	mov	r2, r0
 8009d98:	4b23      	ldr	r3, [pc, #140]	@ (8009e28 <__d2b+0xa8>)
 8009d9a:	4824      	ldr	r0, [pc, #144]	@ (8009e2c <__d2b+0xac>)
 8009d9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009da0:	f001 f996 	bl	800b0d0 <__assert_func>
 8009da4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dac:	b10d      	cbz	r5, 8009db2 <__d2b+0x32>
 8009dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	f1b8 0300 	subs.w	r3, r8, #0
 8009db8:	d023      	beq.n	8009e02 <__d2b+0x82>
 8009dba:	4668      	mov	r0, sp
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	f7ff fd0c 	bl	80097da <__lo0bits>
 8009dc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dc6:	b1d0      	cbz	r0, 8009dfe <__d2b+0x7e>
 8009dc8:	f1c0 0320 	rsb	r3, r0, #32
 8009dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	40c2      	lsrs	r2, r0
 8009dd4:	6163      	str	r3, [r4, #20]
 8009dd6:	9201      	str	r2, [sp, #4]
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	61a3      	str	r3, [r4, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bf0c      	ite	eq
 8009de0:	2201      	moveq	r2, #1
 8009de2:	2202      	movne	r2, #2
 8009de4:	6122      	str	r2, [r4, #16]
 8009de6:	b1a5      	cbz	r5, 8009e12 <__d2b+0x92>
 8009de8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009dec:	4405      	add	r5, r0
 8009dee:	603d      	str	r5, [r7, #0]
 8009df0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	4620      	mov	r0, r4
 8009df8:	b003      	add	sp, #12
 8009dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dfe:	6161      	str	r1, [r4, #20]
 8009e00:	e7ea      	b.n	8009dd8 <__d2b+0x58>
 8009e02:	a801      	add	r0, sp, #4
 8009e04:	f7ff fce9 	bl	80097da <__lo0bits>
 8009e08:	9b01      	ldr	r3, [sp, #4]
 8009e0a:	6163      	str	r3, [r4, #20]
 8009e0c:	3020      	adds	r0, #32
 8009e0e:	2201      	movs	r2, #1
 8009e10:	e7e8      	b.n	8009de4 <__d2b+0x64>
 8009e12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e1a:	6038      	str	r0, [r7, #0]
 8009e1c:	6918      	ldr	r0, [r3, #16]
 8009e1e:	f7ff fcbd 	bl	800979c <__hi0bits>
 8009e22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e26:	e7e5      	b.n	8009df4 <__d2b+0x74>
 8009e28:	0800bf11 	.word	0x0800bf11
 8009e2c:	0800bf22 	.word	0x0800bf22

08009e30 <__ratio>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	b085      	sub	sp, #20
 8009e36:	e9cd 1000 	strd	r1, r0, [sp]
 8009e3a:	a902      	add	r1, sp, #8
 8009e3c:	f7ff ff56 	bl	8009cec <__b2d>
 8009e40:	9800      	ldr	r0, [sp, #0]
 8009e42:	a903      	add	r1, sp, #12
 8009e44:	ec55 4b10 	vmov	r4, r5, d0
 8009e48:	f7ff ff50 	bl	8009cec <__b2d>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	6919      	ldr	r1, [r3, #16]
 8009e50:	9b00      	ldr	r3, [sp, #0]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	1ac9      	subs	r1, r1, r3
 8009e56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	ec5b ab10 	vmov	sl, fp, d0
 8009e60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	bfce      	itee	gt
 8009e68:	462a      	movgt	r2, r5
 8009e6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e6e:	465a      	movle	r2, fp
 8009e70:	462f      	mov	r7, r5
 8009e72:	46d9      	mov	r9, fp
 8009e74:	bfcc      	ite	gt
 8009e76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e7e:	464b      	mov	r3, r9
 8009e80:	4652      	mov	r2, sl
 8009e82:	4620      	mov	r0, r4
 8009e84:	4639      	mov	r1, r7
 8009e86:	f7f6 fce9 	bl	800085c <__aeabi_ddiv>
 8009e8a:	ec41 0b10 	vmov	d0, r0, r1
 8009e8e:	b005      	add	sp, #20
 8009e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e94 <__copybits>:
 8009e94:	3901      	subs	r1, #1
 8009e96:	b570      	push	{r4, r5, r6, lr}
 8009e98:	1149      	asrs	r1, r1, #5
 8009e9a:	6914      	ldr	r4, [r2, #16]
 8009e9c:	3101      	adds	r1, #1
 8009e9e:	f102 0314 	add.w	r3, r2, #20
 8009ea2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ea6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009eaa:	1f05      	subs	r5, r0, #4
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	d30c      	bcc.n	8009eca <__copybits+0x36>
 8009eb0:	1aa3      	subs	r3, r4, r2
 8009eb2:	3b11      	subs	r3, #17
 8009eb4:	f023 0303 	bic.w	r3, r3, #3
 8009eb8:	3211      	adds	r2, #17
 8009eba:	42a2      	cmp	r2, r4
 8009ebc:	bf88      	it	hi
 8009ebe:	2300      	movhi	r3, #0
 8009ec0:	4418      	add	r0, r3
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4288      	cmp	r0, r1
 8009ec6:	d305      	bcc.n	8009ed4 <__copybits+0x40>
 8009ec8:	bd70      	pop	{r4, r5, r6, pc}
 8009eca:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ece:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ed2:	e7eb      	b.n	8009eac <__copybits+0x18>
 8009ed4:	f840 3b04 	str.w	r3, [r0], #4
 8009ed8:	e7f4      	b.n	8009ec4 <__copybits+0x30>

08009eda <__any_on>:
 8009eda:	f100 0214 	add.w	r2, r0, #20
 8009ede:	6900      	ldr	r0, [r0, #16]
 8009ee0:	114b      	asrs	r3, r1, #5
 8009ee2:	4298      	cmp	r0, r3
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	db11      	blt.n	8009f0c <__any_on+0x32>
 8009ee8:	dd0a      	ble.n	8009f00 <__any_on+0x26>
 8009eea:	f011 011f 	ands.w	r1, r1, #31
 8009eee:	d007      	beq.n	8009f00 <__any_on+0x26>
 8009ef0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ef4:	fa24 f001 	lsr.w	r0, r4, r1
 8009ef8:	fa00 f101 	lsl.w	r1, r0, r1
 8009efc:	428c      	cmp	r4, r1
 8009efe:	d10b      	bne.n	8009f18 <__any_on+0x3e>
 8009f00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d803      	bhi.n	8009f10 <__any_on+0x36>
 8009f08:	2000      	movs	r0, #0
 8009f0a:	bd10      	pop	{r4, pc}
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	e7f7      	b.n	8009f00 <__any_on+0x26>
 8009f10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f14:	2900      	cmp	r1, #0
 8009f16:	d0f5      	beq.n	8009f04 <__any_on+0x2a>
 8009f18:	2001      	movs	r0, #1
 8009f1a:	e7f6      	b.n	8009f0a <__any_on+0x30>

08009f1c <sulp>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460d      	mov	r5, r1
 8009f22:	ec45 4b10 	vmov	d0, r4, r5
 8009f26:	4616      	mov	r6, r2
 8009f28:	f7ff feba 	bl	8009ca0 <__ulp>
 8009f2c:	ec51 0b10 	vmov	r0, r1, d0
 8009f30:	b17e      	cbz	r6, 8009f52 <sulp+0x36>
 8009f32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dd09      	ble.n	8009f52 <sulp+0x36>
 8009f3e:	051b      	lsls	r3, r3, #20
 8009f40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f44:	2400      	movs	r4, #0
 8009f46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	f7f6 fb5b 	bl	8000608 <__aeabi_dmul>
 8009f52:	ec41 0b10 	vmov	d0, r0, r1
 8009f56:	bd70      	pop	{r4, r5, r6, pc}

08009f58 <_strtod_l>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	b09f      	sub	sp, #124	@ 0x7c
 8009f5e:	460c      	mov	r4, r1
 8009f60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f62:	2200      	movs	r2, #0
 8009f64:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f66:	9005      	str	r0, [sp, #20]
 8009f68:	f04f 0a00 	mov.w	sl, #0
 8009f6c:	f04f 0b00 	mov.w	fp, #0
 8009f70:	460a      	mov	r2, r1
 8009f72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f74:	7811      	ldrb	r1, [r2, #0]
 8009f76:	292b      	cmp	r1, #43	@ 0x2b
 8009f78:	d04a      	beq.n	800a010 <_strtod_l+0xb8>
 8009f7a:	d838      	bhi.n	8009fee <_strtod_l+0x96>
 8009f7c:	290d      	cmp	r1, #13
 8009f7e:	d832      	bhi.n	8009fe6 <_strtod_l+0x8e>
 8009f80:	2908      	cmp	r1, #8
 8009f82:	d832      	bhi.n	8009fea <_strtod_l+0x92>
 8009f84:	2900      	cmp	r1, #0
 8009f86:	d03b      	beq.n	800a000 <_strtod_l+0xa8>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009f8e:	782a      	ldrb	r2, [r5, #0]
 8009f90:	2a30      	cmp	r2, #48	@ 0x30
 8009f92:	f040 80b3 	bne.w	800a0fc <_strtod_l+0x1a4>
 8009f96:	786a      	ldrb	r2, [r5, #1]
 8009f98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f9c:	2a58      	cmp	r2, #88	@ 0x58
 8009f9e:	d16e      	bne.n	800a07e <_strtod_l+0x126>
 8009fa0:	9302      	str	r3, [sp, #8]
 8009fa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	ab1a      	add	r3, sp, #104	@ 0x68
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	4a8e      	ldr	r2, [pc, #568]	@ (800a1e4 <_strtod_l+0x28c>)
 8009fac:	9805      	ldr	r0, [sp, #20]
 8009fae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009fb0:	a919      	add	r1, sp, #100	@ 0x64
 8009fb2:	f001 f927 	bl	800b204 <__gethex>
 8009fb6:	f010 060f 	ands.w	r6, r0, #15
 8009fba:	4604      	mov	r4, r0
 8009fbc:	d005      	beq.n	8009fca <_strtod_l+0x72>
 8009fbe:	2e06      	cmp	r6, #6
 8009fc0:	d128      	bne.n	800a014 <_strtod_l+0xbc>
 8009fc2:	3501      	adds	r5, #1
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 858e 	bne.w	800aaee <_strtod_l+0xb96>
 8009fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd4:	b1cb      	cbz	r3, 800a00a <_strtod_l+0xb2>
 8009fd6:	4652      	mov	r2, sl
 8009fd8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009fdc:	ec43 2b10 	vmov	d0, r2, r3
 8009fe0:	b01f      	add	sp, #124	@ 0x7c
 8009fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe6:	2920      	cmp	r1, #32
 8009fe8:	d1ce      	bne.n	8009f88 <_strtod_l+0x30>
 8009fea:	3201      	adds	r2, #1
 8009fec:	e7c1      	b.n	8009f72 <_strtod_l+0x1a>
 8009fee:	292d      	cmp	r1, #45	@ 0x2d
 8009ff0:	d1ca      	bne.n	8009f88 <_strtod_l+0x30>
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ff6:	1c51      	adds	r1, r2, #1
 8009ff8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ffa:	7852      	ldrb	r2, [r2, #1]
 8009ffc:	2a00      	cmp	r2, #0
 8009ffe:	d1c5      	bne.n	8009f8c <_strtod_l+0x34>
 800a000:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a002:	9419      	str	r4, [sp, #100]	@ 0x64
 800a004:	2b00      	cmp	r3, #0
 800a006:	f040 8570 	bne.w	800aaea <_strtod_l+0xb92>
 800a00a:	4652      	mov	r2, sl
 800a00c:	465b      	mov	r3, fp
 800a00e:	e7e5      	b.n	8009fdc <_strtod_l+0x84>
 800a010:	2100      	movs	r1, #0
 800a012:	e7ef      	b.n	8009ff4 <_strtod_l+0x9c>
 800a014:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a016:	b13a      	cbz	r2, 800a028 <_strtod_l+0xd0>
 800a018:	2135      	movs	r1, #53	@ 0x35
 800a01a:	a81c      	add	r0, sp, #112	@ 0x70
 800a01c:	f7ff ff3a 	bl	8009e94 <__copybits>
 800a020:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a022:	9805      	ldr	r0, [sp, #20]
 800a024:	f7ff fb08 	bl	8009638 <_Bfree>
 800a028:	3e01      	subs	r6, #1
 800a02a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a02c:	2e04      	cmp	r6, #4
 800a02e:	d806      	bhi.n	800a03e <_strtod_l+0xe6>
 800a030:	e8df f006 	tbb	[pc, r6]
 800a034:	201d0314 	.word	0x201d0314
 800a038:	14          	.byte	0x14
 800a039:	00          	.byte	0x00
 800a03a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a03e:	05e1      	lsls	r1, r4, #23
 800a040:	bf48      	it	mi
 800a042:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a046:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a04a:	0d1b      	lsrs	r3, r3, #20
 800a04c:	051b      	lsls	r3, r3, #20
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1bb      	bne.n	8009fca <_strtod_l+0x72>
 800a052:	f7fe fb31 	bl	80086b8 <__errno>
 800a056:	2322      	movs	r3, #34	@ 0x22
 800a058:	6003      	str	r3, [r0, #0]
 800a05a:	e7b6      	b.n	8009fca <_strtod_l+0x72>
 800a05c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a060:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a064:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a068:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a06c:	e7e7      	b.n	800a03e <_strtod_l+0xe6>
 800a06e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a1ec <_strtod_l+0x294>
 800a072:	e7e4      	b.n	800a03e <_strtod_l+0xe6>
 800a074:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a078:	f04f 3aff 	mov.w	sl, #4294967295
 800a07c:	e7df      	b.n	800a03e <_strtod_l+0xe6>
 800a07e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	9219      	str	r2, [sp, #100]	@ 0x64
 800a084:	785b      	ldrb	r3, [r3, #1]
 800a086:	2b30      	cmp	r3, #48	@ 0x30
 800a088:	d0f9      	beq.n	800a07e <_strtod_l+0x126>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d09d      	beq.n	8009fca <_strtod_l+0x72>
 800a08e:	2301      	movs	r3, #1
 800a090:	9309      	str	r3, [sp, #36]	@ 0x24
 800a092:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a094:	930c      	str	r3, [sp, #48]	@ 0x30
 800a096:	2300      	movs	r3, #0
 800a098:	9308      	str	r3, [sp, #32]
 800a09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a09c:	461f      	mov	r7, r3
 800a09e:	220a      	movs	r2, #10
 800a0a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a0a2:	7805      	ldrb	r5, [r0, #0]
 800a0a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a0a8:	b2d9      	uxtb	r1, r3
 800a0aa:	2909      	cmp	r1, #9
 800a0ac:	d928      	bls.n	800a100 <_strtod_l+0x1a8>
 800a0ae:	494e      	ldr	r1, [pc, #312]	@ (800a1e8 <_strtod_l+0x290>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f000 ffd5 	bl	800b060 <strncmp>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d032      	beq.n	800a120 <_strtod_l+0x1c8>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	462a      	mov	r2, r5
 800a0be:	4681      	mov	r9, r0
 800a0c0:	463d      	mov	r5, r7
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2a65      	cmp	r2, #101	@ 0x65
 800a0c6:	d001      	beq.n	800a0cc <_strtod_l+0x174>
 800a0c8:	2a45      	cmp	r2, #69	@ 0x45
 800a0ca:	d114      	bne.n	800a0f6 <_strtod_l+0x19e>
 800a0cc:	b91d      	cbnz	r5, 800a0d6 <_strtod_l+0x17e>
 800a0ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d0:	4302      	orrs	r2, r0
 800a0d2:	d095      	beq.n	800a000 <_strtod_l+0xa8>
 800a0d4:	2500      	movs	r5, #0
 800a0d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a0d8:	1c62      	adds	r2, r4, #1
 800a0da:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0dc:	7862      	ldrb	r2, [r4, #1]
 800a0de:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0e0:	d077      	beq.n	800a1d2 <_strtod_l+0x27a>
 800a0e2:	2a2d      	cmp	r2, #45	@ 0x2d
 800a0e4:	d07b      	beq.n	800a1de <_strtod_l+0x286>
 800a0e6:	f04f 0c00 	mov.w	ip, #0
 800a0ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a0ee:	2909      	cmp	r1, #9
 800a0f0:	f240 8082 	bls.w	800a1f8 <_strtod_l+0x2a0>
 800a0f4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a0f6:	f04f 0800 	mov.w	r8, #0
 800a0fa:	e0a2      	b.n	800a242 <_strtod_l+0x2ea>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e7c7      	b.n	800a090 <_strtod_l+0x138>
 800a100:	2f08      	cmp	r7, #8
 800a102:	bfd5      	itete	le
 800a104:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a106:	9908      	ldrgt	r1, [sp, #32]
 800a108:	fb02 3301 	mlale	r3, r2, r1, r3
 800a10c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a110:	f100 0001 	add.w	r0, r0, #1
 800a114:	bfd4      	ite	le
 800a116:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a118:	9308      	strgt	r3, [sp, #32]
 800a11a:	3701      	adds	r7, #1
 800a11c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a11e:	e7bf      	b.n	800a0a0 <_strtod_l+0x148>
 800a120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	9219      	str	r2, [sp, #100]	@ 0x64
 800a126:	785a      	ldrb	r2, [r3, #1]
 800a128:	b37f      	cbz	r7, 800a18a <_strtod_l+0x232>
 800a12a:	4681      	mov	r9, r0
 800a12c:	463d      	mov	r5, r7
 800a12e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a132:	2b09      	cmp	r3, #9
 800a134:	d912      	bls.n	800a15c <_strtod_l+0x204>
 800a136:	2301      	movs	r3, #1
 800a138:	e7c4      	b.n	800a0c4 <_strtod_l+0x16c>
 800a13a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a13c:	1c5a      	adds	r2, r3, #1
 800a13e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a140:	785a      	ldrb	r2, [r3, #1]
 800a142:	3001      	adds	r0, #1
 800a144:	2a30      	cmp	r2, #48	@ 0x30
 800a146:	d0f8      	beq.n	800a13a <_strtod_l+0x1e2>
 800a148:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	f200 84d3 	bhi.w	800aaf8 <_strtod_l+0xba0>
 800a152:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a154:	930c      	str	r3, [sp, #48]	@ 0x30
 800a156:	4681      	mov	r9, r0
 800a158:	2000      	movs	r0, #0
 800a15a:	4605      	mov	r5, r0
 800a15c:	3a30      	subs	r2, #48	@ 0x30
 800a15e:	f100 0301 	add.w	r3, r0, #1
 800a162:	d02a      	beq.n	800a1ba <_strtod_l+0x262>
 800a164:	4499      	add	r9, r3
 800a166:	eb00 0c05 	add.w	ip, r0, r5
 800a16a:	462b      	mov	r3, r5
 800a16c:	210a      	movs	r1, #10
 800a16e:	4563      	cmp	r3, ip
 800a170:	d10d      	bne.n	800a18e <_strtod_l+0x236>
 800a172:	1c69      	adds	r1, r5, #1
 800a174:	4401      	add	r1, r0
 800a176:	4428      	add	r0, r5
 800a178:	2808      	cmp	r0, #8
 800a17a:	dc16      	bgt.n	800a1aa <_strtod_l+0x252>
 800a17c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a17e:	230a      	movs	r3, #10
 800a180:	fb03 2300 	mla	r3, r3, r0, r2
 800a184:	930a      	str	r3, [sp, #40]	@ 0x28
 800a186:	2300      	movs	r3, #0
 800a188:	e018      	b.n	800a1bc <_strtod_l+0x264>
 800a18a:	4638      	mov	r0, r7
 800a18c:	e7da      	b.n	800a144 <_strtod_l+0x1ec>
 800a18e:	2b08      	cmp	r3, #8
 800a190:	f103 0301 	add.w	r3, r3, #1
 800a194:	dc03      	bgt.n	800a19e <_strtod_l+0x246>
 800a196:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a198:	434e      	muls	r6, r1
 800a19a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a19c:	e7e7      	b.n	800a16e <_strtod_l+0x216>
 800a19e:	2b10      	cmp	r3, #16
 800a1a0:	bfde      	ittt	le
 800a1a2:	9e08      	ldrle	r6, [sp, #32]
 800a1a4:	434e      	mulle	r6, r1
 800a1a6:	9608      	strle	r6, [sp, #32]
 800a1a8:	e7e1      	b.n	800a16e <_strtod_l+0x216>
 800a1aa:	280f      	cmp	r0, #15
 800a1ac:	dceb      	bgt.n	800a186 <_strtod_l+0x22e>
 800a1ae:	9808      	ldr	r0, [sp, #32]
 800a1b0:	230a      	movs	r3, #10
 800a1b2:	fb03 2300 	mla	r3, r3, r0, r2
 800a1b6:	9308      	str	r3, [sp, #32]
 800a1b8:	e7e5      	b.n	800a186 <_strtod_l+0x22e>
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1be:	1c50      	adds	r0, r2, #1
 800a1c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a1c2:	7852      	ldrb	r2, [r2, #1]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	e7b1      	b.n	800a12e <_strtod_l+0x1d6>
 800a1ca:	f04f 0900 	mov.w	r9, #0
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e77d      	b.n	800a0ce <_strtod_l+0x176>
 800a1d2:	f04f 0c00 	mov.w	ip, #0
 800a1d6:	1ca2      	adds	r2, r4, #2
 800a1d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1da:	78a2      	ldrb	r2, [r4, #2]
 800a1dc:	e785      	b.n	800a0ea <_strtod_l+0x192>
 800a1de:	f04f 0c01 	mov.w	ip, #1
 800a1e2:	e7f8      	b.n	800a1d6 <_strtod_l+0x27e>
 800a1e4:	0800c090 	.word	0x0800c090
 800a1e8:	0800c078 	.word	0x0800c078
 800a1ec:	7ff00000 	.word	0x7ff00000
 800a1f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1f2:	1c51      	adds	r1, r2, #1
 800a1f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1f6:	7852      	ldrb	r2, [r2, #1]
 800a1f8:	2a30      	cmp	r2, #48	@ 0x30
 800a1fa:	d0f9      	beq.n	800a1f0 <_strtod_l+0x298>
 800a1fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a200:	2908      	cmp	r1, #8
 800a202:	f63f af78 	bhi.w	800a0f6 <_strtod_l+0x19e>
 800a206:	3a30      	subs	r2, #48	@ 0x30
 800a208:	920e      	str	r2, [sp, #56]	@ 0x38
 800a20a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a20c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a20e:	f04f 080a 	mov.w	r8, #10
 800a212:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a214:	1c56      	adds	r6, r2, #1
 800a216:	9619      	str	r6, [sp, #100]	@ 0x64
 800a218:	7852      	ldrb	r2, [r2, #1]
 800a21a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a21e:	f1be 0f09 	cmp.w	lr, #9
 800a222:	d939      	bls.n	800a298 <_strtod_l+0x340>
 800a224:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a226:	1a76      	subs	r6, r6, r1
 800a228:	2e08      	cmp	r6, #8
 800a22a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a22e:	dc03      	bgt.n	800a238 <_strtod_l+0x2e0>
 800a230:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a232:	4588      	cmp	r8, r1
 800a234:	bfa8      	it	ge
 800a236:	4688      	movge	r8, r1
 800a238:	f1bc 0f00 	cmp.w	ip, #0
 800a23c:	d001      	beq.n	800a242 <_strtod_l+0x2ea>
 800a23e:	f1c8 0800 	rsb	r8, r8, #0
 800a242:	2d00      	cmp	r5, #0
 800a244:	d14e      	bne.n	800a2e4 <_strtod_l+0x38c>
 800a246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a248:	4308      	orrs	r0, r1
 800a24a:	f47f aebe 	bne.w	8009fca <_strtod_l+0x72>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f47f aed6 	bne.w	800a000 <_strtod_l+0xa8>
 800a254:	2a69      	cmp	r2, #105	@ 0x69
 800a256:	d028      	beq.n	800a2aa <_strtod_l+0x352>
 800a258:	dc25      	bgt.n	800a2a6 <_strtod_l+0x34e>
 800a25a:	2a49      	cmp	r2, #73	@ 0x49
 800a25c:	d025      	beq.n	800a2aa <_strtod_l+0x352>
 800a25e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a260:	f47f aece 	bne.w	800a000 <_strtod_l+0xa8>
 800a264:	499b      	ldr	r1, [pc, #620]	@ (800a4d4 <_strtod_l+0x57c>)
 800a266:	a819      	add	r0, sp, #100	@ 0x64
 800a268:	f001 f9ee 	bl	800b648 <__match>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f43f aec7 	beq.w	800a000 <_strtod_l+0xa8>
 800a272:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b28      	cmp	r3, #40	@ 0x28
 800a278:	d12e      	bne.n	800a2d8 <_strtod_l+0x380>
 800a27a:	4997      	ldr	r1, [pc, #604]	@ (800a4d8 <_strtod_l+0x580>)
 800a27c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a27e:	a819      	add	r0, sp, #100	@ 0x64
 800a280:	f001 f9f6 	bl	800b670 <__hexnan>
 800a284:	2805      	cmp	r0, #5
 800a286:	d127      	bne.n	800a2d8 <_strtod_l+0x380>
 800a288:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a28a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a28e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a292:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a296:	e698      	b.n	8009fca <_strtod_l+0x72>
 800a298:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a29a:	fb08 2101 	mla	r1, r8, r1, r2
 800a29e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a2a2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2a4:	e7b5      	b.n	800a212 <_strtod_l+0x2ba>
 800a2a6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a2a8:	e7da      	b.n	800a260 <_strtod_l+0x308>
 800a2aa:	498c      	ldr	r1, [pc, #560]	@ (800a4dc <_strtod_l+0x584>)
 800a2ac:	a819      	add	r0, sp, #100	@ 0x64
 800a2ae:	f001 f9cb 	bl	800b648 <__match>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f43f aea4 	beq.w	800a000 <_strtod_l+0xa8>
 800a2b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2ba:	4989      	ldr	r1, [pc, #548]	@ (800a4e0 <_strtod_l+0x588>)
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	a819      	add	r0, sp, #100	@ 0x64
 800a2c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2c2:	f001 f9c1 	bl	800b648 <__match>
 800a2c6:	b910      	cbnz	r0, 800a2ce <_strtod_l+0x376>
 800a2c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a4f0 <_strtod_l+0x598>
 800a2d2:	f04f 0a00 	mov.w	sl, #0
 800a2d6:	e678      	b.n	8009fca <_strtod_l+0x72>
 800a2d8:	4882      	ldr	r0, [pc, #520]	@ (800a4e4 <_strtod_l+0x58c>)
 800a2da:	f000 fef1 	bl	800b0c0 <nan>
 800a2de:	ec5b ab10 	vmov	sl, fp, d0
 800a2e2:	e672      	b.n	8009fca <_strtod_l+0x72>
 800a2e4:	eba8 0309 	sub.w	r3, r8, r9
 800a2e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ec:	2f00      	cmp	r7, #0
 800a2ee:	bf08      	it	eq
 800a2f0:	462f      	moveq	r7, r5
 800a2f2:	2d10      	cmp	r5, #16
 800a2f4:	462c      	mov	r4, r5
 800a2f6:	bfa8      	it	ge
 800a2f8:	2410      	movge	r4, #16
 800a2fa:	f7f6 f90b 	bl	8000514 <__aeabi_ui2d>
 800a2fe:	2d09      	cmp	r5, #9
 800a300:	4682      	mov	sl, r0
 800a302:	468b      	mov	fp, r1
 800a304:	dc13      	bgt.n	800a32e <_strtod_l+0x3d6>
 800a306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f43f ae5e 	beq.w	8009fca <_strtod_l+0x72>
 800a30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a310:	dd78      	ble.n	800a404 <_strtod_l+0x4ac>
 800a312:	2b16      	cmp	r3, #22
 800a314:	dc5f      	bgt.n	800a3d6 <_strtod_l+0x47e>
 800a316:	4974      	ldr	r1, [pc, #464]	@ (800a4e8 <_strtod_l+0x590>)
 800a318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a320:	4652      	mov	r2, sl
 800a322:	465b      	mov	r3, fp
 800a324:	f7f6 f970 	bl	8000608 <__aeabi_dmul>
 800a328:	4682      	mov	sl, r0
 800a32a:	468b      	mov	fp, r1
 800a32c:	e64d      	b.n	8009fca <_strtod_l+0x72>
 800a32e:	4b6e      	ldr	r3, [pc, #440]	@ (800a4e8 <_strtod_l+0x590>)
 800a330:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a334:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a338:	f7f6 f966 	bl	8000608 <__aeabi_dmul>
 800a33c:	4682      	mov	sl, r0
 800a33e:	9808      	ldr	r0, [sp, #32]
 800a340:	468b      	mov	fp, r1
 800a342:	f7f6 f8e7 	bl	8000514 <__aeabi_ui2d>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4650      	mov	r0, sl
 800a34c:	4659      	mov	r1, fp
 800a34e:	f7f5 ffa5 	bl	800029c <__adddf3>
 800a352:	2d0f      	cmp	r5, #15
 800a354:	4682      	mov	sl, r0
 800a356:	468b      	mov	fp, r1
 800a358:	ddd5      	ble.n	800a306 <_strtod_l+0x3ae>
 800a35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a35c:	1b2c      	subs	r4, r5, r4
 800a35e:	441c      	add	r4, r3
 800a360:	2c00      	cmp	r4, #0
 800a362:	f340 8096 	ble.w	800a492 <_strtod_l+0x53a>
 800a366:	f014 030f 	ands.w	r3, r4, #15
 800a36a:	d00a      	beq.n	800a382 <_strtod_l+0x42a>
 800a36c:	495e      	ldr	r1, [pc, #376]	@ (800a4e8 <_strtod_l+0x590>)
 800a36e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a372:	4652      	mov	r2, sl
 800a374:	465b      	mov	r3, fp
 800a376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a37a:	f7f6 f945 	bl	8000608 <__aeabi_dmul>
 800a37e:	4682      	mov	sl, r0
 800a380:	468b      	mov	fp, r1
 800a382:	f034 040f 	bics.w	r4, r4, #15
 800a386:	d073      	beq.n	800a470 <_strtod_l+0x518>
 800a388:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a38c:	dd48      	ble.n	800a420 <_strtod_l+0x4c8>
 800a38e:	2400      	movs	r4, #0
 800a390:	46a0      	mov	r8, r4
 800a392:	940a      	str	r4, [sp, #40]	@ 0x28
 800a394:	46a1      	mov	r9, r4
 800a396:	9a05      	ldr	r2, [sp, #20]
 800a398:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a4f0 <_strtod_l+0x598>
 800a39c:	2322      	movs	r3, #34	@ 0x22
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	f04f 0a00 	mov.w	sl, #0
 800a3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f43f ae0f 	beq.w	8009fca <_strtod_l+0x72>
 800a3ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3ae:	9805      	ldr	r0, [sp, #20]
 800a3b0:	f7ff f942 	bl	8009638 <_Bfree>
 800a3b4:	9805      	ldr	r0, [sp, #20]
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7ff f93e 	bl	8009638 <_Bfree>
 800a3bc:	9805      	ldr	r0, [sp, #20]
 800a3be:	4641      	mov	r1, r8
 800a3c0:	f7ff f93a 	bl	8009638 <_Bfree>
 800a3c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3c6:	9805      	ldr	r0, [sp, #20]
 800a3c8:	f7ff f936 	bl	8009638 <_Bfree>
 800a3cc:	9805      	ldr	r0, [sp, #20]
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f7ff f932 	bl	8009638 <_Bfree>
 800a3d4:	e5f9      	b.n	8009fca <_strtod_l+0x72>
 800a3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	dbbc      	blt.n	800a35a <_strtod_l+0x402>
 800a3e0:	4c41      	ldr	r4, [pc, #260]	@ (800a4e8 <_strtod_l+0x590>)
 800a3e2:	f1c5 050f 	rsb	r5, r5, #15
 800a3e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	465b      	mov	r3, fp
 800a3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f2:	f7f6 f909 	bl	8000608 <__aeabi_dmul>
 800a3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f8:	1b5d      	subs	r5, r3, r5
 800a3fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a402:	e78f      	b.n	800a324 <_strtod_l+0x3cc>
 800a404:	3316      	adds	r3, #22
 800a406:	dba8      	blt.n	800a35a <_strtod_l+0x402>
 800a408:	4b37      	ldr	r3, [pc, #220]	@ (800a4e8 <_strtod_l+0x590>)
 800a40a:	eba9 0808 	sub.w	r8, r9, r8
 800a40e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a412:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a416:	4650      	mov	r0, sl
 800a418:	4659      	mov	r1, fp
 800a41a:	f7f6 fa1f 	bl	800085c <__aeabi_ddiv>
 800a41e:	e783      	b.n	800a328 <_strtod_l+0x3d0>
 800a420:	4b32      	ldr	r3, [pc, #200]	@ (800a4ec <_strtod_l+0x594>)
 800a422:	9308      	str	r3, [sp, #32]
 800a424:	2300      	movs	r3, #0
 800a426:	1124      	asrs	r4, r4, #4
 800a428:	4650      	mov	r0, sl
 800a42a:	4659      	mov	r1, fp
 800a42c:	461e      	mov	r6, r3
 800a42e:	2c01      	cmp	r4, #1
 800a430:	dc21      	bgt.n	800a476 <_strtod_l+0x51e>
 800a432:	b10b      	cbz	r3, 800a438 <_strtod_l+0x4e0>
 800a434:	4682      	mov	sl, r0
 800a436:	468b      	mov	fp, r1
 800a438:	492c      	ldr	r1, [pc, #176]	@ (800a4ec <_strtod_l+0x594>)
 800a43a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a43e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a442:	4652      	mov	r2, sl
 800a444:	465b      	mov	r3, fp
 800a446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44a:	f7f6 f8dd 	bl	8000608 <__aeabi_dmul>
 800a44e:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <_strtod_l+0x598>)
 800a450:	460a      	mov	r2, r1
 800a452:	400b      	ands	r3, r1
 800a454:	4927      	ldr	r1, [pc, #156]	@ (800a4f4 <_strtod_l+0x59c>)
 800a456:	428b      	cmp	r3, r1
 800a458:	4682      	mov	sl, r0
 800a45a:	d898      	bhi.n	800a38e <_strtod_l+0x436>
 800a45c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a460:	428b      	cmp	r3, r1
 800a462:	bf86      	itte	hi
 800a464:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a4f8 <_strtod_l+0x5a0>
 800a468:	f04f 3aff 	movhi.w	sl, #4294967295
 800a46c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a470:	2300      	movs	r3, #0
 800a472:	9308      	str	r3, [sp, #32]
 800a474:	e07a      	b.n	800a56c <_strtod_l+0x614>
 800a476:	07e2      	lsls	r2, r4, #31
 800a478:	d505      	bpl.n	800a486 <_strtod_l+0x52e>
 800a47a:	9b08      	ldr	r3, [sp, #32]
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f6 f8c2 	bl	8000608 <__aeabi_dmul>
 800a484:	2301      	movs	r3, #1
 800a486:	9a08      	ldr	r2, [sp, #32]
 800a488:	3208      	adds	r2, #8
 800a48a:	3601      	adds	r6, #1
 800a48c:	1064      	asrs	r4, r4, #1
 800a48e:	9208      	str	r2, [sp, #32]
 800a490:	e7cd      	b.n	800a42e <_strtod_l+0x4d6>
 800a492:	d0ed      	beq.n	800a470 <_strtod_l+0x518>
 800a494:	4264      	negs	r4, r4
 800a496:	f014 020f 	ands.w	r2, r4, #15
 800a49a:	d00a      	beq.n	800a4b2 <_strtod_l+0x55a>
 800a49c:	4b12      	ldr	r3, [pc, #72]	@ (800a4e8 <_strtod_l+0x590>)
 800a49e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	4659      	mov	r1, fp
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f6 f9d7 	bl	800085c <__aeabi_ddiv>
 800a4ae:	4682      	mov	sl, r0
 800a4b0:	468b      	mov	fp, r1
 800a4b2:	1124      	asrs	r4, r4, #4
 800a4b4:	d0dc      	beq.n	800a470 <_strtod_l+0x518>
 800a4b6:	2c1f      	cmp	r4, #31
 800a4b8:	dd20      	ble.n	800a4fc <_strtod_l+0x5a4>
 800a4ba:	2400      	movs	r4, #0
 800a4bc:	46a0      	mov	r8, r4
 800a4be:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4c0:	46a1      	mov	r9, r4
 800a4c2:	9a05      	ldr	r2, [sp, #20]
 800a4c4:	2322      	movs	r3, #34	@ 0x22
 800a4c6:	f04f 0a00 	mov.w	sl, #0
 800a4ca:	f04f 0b00 	mov.w	fp, #0
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	e768      	b.n	800a3a4 <_strtod_l+0x44c>
 800a4d2:	bf00      	nop
 800a4d4:	0800be69 	.word	0x0800be69
 800a4d8:	0800c07c 	.word	0x0800c07c
 800a4dc:	0800be61 	.word	0x0800be61
 800a4e0:	0800be98 	.word	0x0800be98
 800a4e4:	0800c225 	.word	0x0800c225
 800a4e8:	0800bfb0 	.word	0x0800bfb0
 800a4ec:	0800bf88 	.word	0x0800bf88
 800a4f0:	7ff00000 	.word	0x7ff00000
 800a4f4:	7ca00000 	.word	0x7ca00000
 800a4f8:	7fefffff 	.word	0x7fefffff
 800a4fc:	f014 0310 	ands.w	r3, r4, #16
 800a500:	bf18      	it	ne
 800a502:	236a      	movne	r3, #106	@ 0x6a
 800a504:	4ea9      	ldr	r6, [pc, #676]	@ (800a7ac <_strtod_l+0x854>)
 800a506:	9308      	str	r3, [sp, #32]
 800a508:	4650      	mov	r0, sl
 800a50a:	4659      	mov	r1, fp
 800a50c:	2300      	movs	r3, #0
 800a50e:	07e2      	lsls	r2, r4, #31
 800a510:	d504      	bpl.n	800a51c <_strtod_l+0x5c4>
 800a512:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a516:	f7f6 f877 	bl	8000608 <__aeabi_dmul>
 800a51a:	2301      	movs	r3, #1
 800a51c:	1064      	asrs	r4, r4, #1
 800a51e:	f106 0608 	add.w	r6, r6, #8
 800a522:	d1f4      	bne.n	800a50e <_strtod_l+0x5b6>
 800a524:	b10b      	cbz	r3, 800a52a <_strtod_l+0x5d2>
 800a526:	4682      	mov	sl, r0
 800a528:	468b      	mov	fp, r1
 800a52a:	9b08      	ldr	r3, [sp, #32]
 800a52c:	b1b3      	cbz	r3, 800a55c <_strtod_l+0x604>
 800a52e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a532:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a536:	2b00      	cmp	r3, #0
 800a538:	4659      	mov	r1, fp
 800a53a:	dd0f      	ble.n	800a55c <_strtod_l+0x604>
 800a53c:	2b1f      	cmp	r3, #31
 800a53e:	dd55      	ble.n	800a5ec <_strtod_l+0x694>
 800a540:	2b34      	cmp	r3, #52	@ 0x34
 800a542:	bfde      	ittt	le
 800a544:	f04f 33ff 	movle.w	r3, #4294967295
 800a548:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a54c:	4093      	lslle	r3, r2
 800a54e:	f04f 0a00 	mov.w	sl, #0
 800a552:	bfcc      	ite	gt
 800a554:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a558:	ea03 0b01 	andle.w	fp, r3, r1
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	4650      	mov	r0, sl
 800a562:	4659      	mov	r1, fp
 800a564:	f7f6 fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d1a6      	bne.n	800a4ba <_strtod_l+0x562>
 800a56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a572:	9805      	ldr	r0, [sp, #20]
 800a574:	462b      	mov	r3, r5
 800a576:	463a      	mov	r2, r7
 800a578:	f7ff f8c6 	bl	8009708 <__s2b>
 800a57c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a57e:	2800      	cmp	r0, #0
 800a580:	f43f af05 	beq.w	800a38e <_strtod_l+0x436>
 800a584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a586:	2a00      	cmp	r2, #0
 800a588:	eba9 0308 	sub.w	r3, r9, r8
 800a58c:	bfa8      	it	ge
 800a58e:	2300      	movge	r3, #0
 800a590:	9312      	str	r3, [sp, #72]	@ 0x48
 800a592:	2400      	movs	r4, #0
 800a594:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a598:	9316      	str	r3, [sp, #88]	@ 0x58
 800a59a:	46a0      	mov	r8, r4
 800a59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a59e:	9805      	ldr	r0, [sp, #20]
 800a5a0:	6859      	ldr	r1, [r3, #4]
 800a5a2:	f7ff f809 	bl	80095b8 <_Balloc>
 800a5a6:	4681      	mov	r9, r0
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f43f aef4 	beq.w	800a396 <_strtod_l+0x43e>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b0:	691a      	ldr	r2, [r3, #16]
 800a5b2:	3202      	adds	r2, #2
 800a5b4:	f103 010c 	add.w	r1, r3, #12
 800a5b8:	0092      	lsls	r2, r2, #2
 800a5ba:	300c      	adds	r0, #12
 800a5bc:	f000 fd72 	bl	800b0a4 <memcpy>
 800a5c0:	ec4b ab10 	vmov	d0, sl, fp
 800a5c4:	9805      	ldr	r0, [sp, #20]
 800a5c6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a5c8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a5ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5ce:	f7ff fbd7 	bl	8009d80 <__d2b>
 800a5d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f43f aede 	beq.w	800a396 <_strtod_l+0x43e>
 800a5da:	9805      	ldr	r0, [sp, #20]
 800a5dc:	2101      	movs	r1, #1
 800a5de:	f7ff f929 	bl	8009834 <__i2b>
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	b948      	cbnz	r0, 800a5fa <_strtod_l+0x6a2>
 800a5e6:	f04f 0800 	mov.w	r8, #0
 800a5ea:	e6d4      	b.n	800a396 <_strtod_l+0x43e>
 800a5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a5f8:	e7b0      	b.n	800a55c <_strtod_l+0x604>
 800a5fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a5fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a5fe:	2d00      	cmp	r5, #0
 800a600:	bfab      	itete	ge
 800a602:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a604:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a606:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a608:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a60a:	bfac      	ite	ge
 800a60c:	18ef      	addge	r7, r5, r3
 800a60e:	1b5e      	sublt	r6, r3, r5
 800a610:	9b08      	ldr	r3, [sp, #32]
 800a612:	1aed      	subs	r5, r5, r3
 800a614:	4415      	add	r5, r2
 800a616:	4b66      	ldr	r3, [pc, #408]	@ (800a7b0 <_strtod_l+0x858>)
 800a618:	3d01      	subs	r5, #1
 800a61a:	429d      	cmp	r5, r3
 800a61c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a620:	da50      	bge.n	800a6c4 <_strtod_l+0x76c>
 800a622:	1b5b      	subs	r3, r3, r5
 800a624:	2b1f      	cmp	r3, #31
 800a626:	eba2 0203 	sub.w	r2, r2, r3
 800a62a:	f04f 0101 	mov.w	r1, #1
 800a62e:	dc3d      	bgt.n	800a6ac <_strtod_l+0x754>
 800a630:	fa01 f303 	lsl.w	r3, r1, r3
 800a634:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a636:	2300      	movs	r3, #0
 800a638:	9310      	str	r3, [sp, #64]	@ 0x40
 800a63a:	18bd      	adds	r5, r7, r2
 800a63c:	9b08      	ldr	r3, [sp, #32]
 800a63e:	42af      	cmp	r7, r5
 800a640:	4416      	add	r6, r2
 800a642:	441e      	add	r6, r3
 800a644:	463b      	mov	r3, r7
 800a646:	bfa8      	it	ge
 800a648:	462b      	movge	r3, r5
 800a64a:	42b3      	cmp	r3, r6
 800a64c:	bfa8      	it	ge
 800a64e:	4633      	movge	r3, r6
 800a650:	2b00      	cmp	r3, #0
 800a652:	bfc2      	ittt	gt
 800a654:	1aed      	subgt	r5, r5, r3
 800a656:	1af6      	subgt	r6, r6, r3
 800a658:	1aff      	subgt	r7, r7, r3
 800a65a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dd16      	ble.n	800a68e <_strtod_l+0x736>
 800a660:	4641      	mov	r1, r8
 800a662:	9805      	ldr	r0, [sp, #20]
 800a664:	461a      	mov	r2, r3
 800a666:	f7ff f9a5 	bl	80099b4 <__pow5mult>
 800a66a:	4680      	mov	r8, r0
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d0ba      	beq.n	800a5e6 <_strtod_l+0x68e>
 800a670:	4601      	mov	r1, r0
 800a672:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a674:	9805      	ldr	r0, [sp, #20]
 800a676:	f7ff f8f3 	bl	8009860 <__multiply>
 800a67a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a67c:	2800      	cmp	r0, #0
 800a67e:	f43f ae8a 	beq.w	800a396 <_strtod_l+0x43e>
 800a682:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a684:	9805      	ldr	r0, [sp, #20]
 800a686:	f7fe ffd7 	bl	8009638 <_Bfree>
 800a68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a68c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a68e:	2d00      	cmp	r5, #0
 800a690:	dc1d      	bgt.n	800a6ce <_strtod_l+0x776>
 800a692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a694:	2b00      	cmp	r3, #0
 800a696:	dd23      	ble.n	800a6e0 <_strtod_l+0x788>
 800a698:	4649      	mov	r1, r9
 800a69a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a69c:	9805      	ldr	r0, [sp, #20]
 800a69e:	f7ff f989 	bl	80099b4 <__pow5mult>
 800a6a2:	4681      	mov	r9, r0
 800a6a4:	b9e0      	cbnz	r0, 800a6e0 <_strtod_l+0x788>
 800a6a6:	f04f 0900 	mov.w	r9, #0
 800a6aa:	e674      	b.n	800a396 <_strtod_l+0x43e>
 800a6ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a6b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a6b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a6b8:	35e2      	adds	r5, #226	@ 0xe2
 800a6ba:	fa01 f305 	lsl.w	r3, r1, r5
 800a6be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a6c2:	e7ba      	b.n	800a63a <_strtod_l+0x6e2>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6cc:	e7b5      	b.n	800a63a <_strtod_l+0x6e2>
 800a6ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6d0:	9805      	ldr	r0, [sp, #20]
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	f7ff f9c8 	bl	8009a68 <__lshift>
 800a6d8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d1d9      	bne.n	800a692 <_strtod_l+0x73a>
 800a6de:	e65a      	b.n	800a396 <_strtod_l+0x43e>
 800a6e0:	2e00      	cmp	r6, #0
 800a6e2:	dd07      	ble.n	800a6f4 <_strtod_l+0x79c>
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	9805      	ldr	r0, [sp, #20]
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	f7ff f9bd 	bl	8009a68 <__lshift>
 800a6ee:	4681      	mov	r9, r0
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d0d8      	beq.n	800a6a6 <_strtod_l+0x74e>
 800a6f4:	2f00      	cmp	r7, #0
 800a6f6:	dd08      	ble.n	800a70a <_strtod_l+0x7b2>
 800a6f8:	4641      	mov	r1, r8
 800a6fa:	9805      	ldr	r0, [sp, #20]
 800a6fc:	463a      	mov	r2, r7
 800a6fe:	f7ff f9b3 	bl	8009a68 <__lshift>
 800a702:	4680      	mov	r8, r0
 800a704:	2800      	cmp	r0, #0
 800a706:	f43f ae46 	beq.w	800a396 <_strtod_l+0x43e>
 800a70a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a70c:	9805      	ldr	r0, [sp, #20]
 800a70e:	464a      	mov	r2, r9
 800a710:	f7ff fa32 	bl	8009b78 <__mdiff>
 800a714:	4604      	mov	r4, r0
 800a716:	2800      	cmp	r0, #0
 800a718:	f43f ae3d 	beq.w	800a396 <_strtod_l+0x43e>
 800a71c:	68c3      	ldr	r3, [r0, #12]
 800a71e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a720:	2300      	movs	r3, #0
 800a722:	60c3      	str	r3, [r0, #12]
 800a724:	4641      	mov	r1, r8
 800a726:	f7ff fa0b 	bl	8009b40 <__mcmp>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	da46      	bge.n	800a7bc <_strtod_l+0x864>
 800a72e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a730:	ea53 030a 	orrs.w	r3, r3, sl
 800a734:	d16c      	bne.n	800a810 <_strtod_l+0x8b8>
 800a736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d168      	bne.n	800a810 <_strtod_l+0x8b8>
 800a73e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a742:	0d1b      	lsrs	r3, r3, #20
 800a744:	051b      	lsls	r3, r3, #20
 800a746:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a74a:	d961      	bls.n	800a810 <_strtod_l+0x8b8>
 800a74c:	6963      	ldr	r3, [r4, #20]
 800a74e:	b913      	cbnz	r3, 800a756 <_strtod_l+0x7fe>
 800a750:	6923      	ldr	r3, [r4, #16]
 800a752:	2b01      	cmp	r3, #1
 800a754:	dd5c      	ble.n	800a810 <_strtod_l+0x8b8>
 800a756:	4621      	mov	r1, r4
 800a758:	2201      	movs	r2, #1
 800a75a:	9805      	ldr	r0, [sp, #20]
 800a75c:	f7ff f984 	bl	8009a68 <__lshift>
 800a760:	4641      	mov	r1, r8
 800a762:	4604      	mov	r4, r0
 800a764:	f7ff f9ec 	bl	8009b40 <__mcmp>
 800a768:	2800      	cmp	r0, #0
 800a76a:	dd51      	ble.n	800a810 <_strtod_l+0x8b8>
 800a76c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a770:	9a08      	ldr	r2, [sp, #32]
 800a772:	0d1b      	lsrs	r3, r3, #20
 800a774:	051b      	lsls	r3, r3, #20
 800a776:	2a00      	cmp	r2, #0
 800a778:	d06b      	beq.n	800a852 <_strtod_l+0x8fa>
 800a77a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a77e:	d868      	bhi.n	800a852 <_strtod_l+0x8fa>
 800a780:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a784:	f67f ae9d 	bls.w	800a4c2 <_strtod_l+0x56a>
 800a788:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b4 <_strtod_l+0x85c>)
 800a78a:	4650      	mov	r0, sl
 800a78c:	4659      	mov	r1, fp
 800a78e:	2200      	movs	r2, #0
 800a790:	f7f5 ff3a 	bl	8000608 <__aeabi_dmul>
 800a794:	4b08      	ldr	r3, [pc, #32]	@ (800a7b8 <_strtod_l+0x860>)
 800a796:	400b      	ands	r3, r1
 800a798:	4682      	mov	sl, r0
 800a79a:	468b      	mov	fp, r1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f47f ae05 	bne.w	800a3ac <_strtod_l+0x454>
 800a7a2:	9a05      	ldr	r2, [sp, #20]
 800a7a4:	2322      	movs	r3, #34	@ 0x22
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	e600      	b.n	800a3ac <_strtod_l+0x454>
 800a7aa:	bf00      	nop
 800a7ac:	0800c0a8 	.word	0x0800c0a8
 800a7b0:	fffffc02 	.word	0xfffffc02
 800a7b4:	39500000 	.word	0x39500000
 800a7b8:	7ff00000 	.word	0x7ff00000
 800a7bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a7c0:	d165      	bne.n	800a88e <_strtod_l+0x936>
 800a7c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a7c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7c8:	b35a      	cbz	r2, 800a822 <_strtod_l+0x8ca>
 800a7ca:	4a9f      	ldr	r2, [pc, #636]	@ (800aa48 <_strtod_l+0xaf0>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d12b      	bne.n	800a828 <_strtod_l+0x8d0>
 800a7d0:	9b08      	ldr	r3, [sp, #32]
 800a7d2:	4651      	mov	r1, sl
 800a7d4:	b303      	cbz	r3, 800a818 <_strtod_l+0x8c0>
 800a7d6:	4b9d      	ldr	r3, [pc, #628]	@ (800aa4c <_strtod_l+0xaf4>)
 800a7d8:	465a      	mov	r2, fp
 800a7da:	4013      	ands	r3, r2
 800a7dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e4:	d81b      	bhi.n	800a81e <_strtod_l+0x8c6>
 800a7e6:	0d1b      	lsrs	r3, r3, #20
 800a7e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	d119      	bne.n	800a828 <_strtod_l+0x8d0>
 800a7f4:	4b96      	ldr	r3, [pc, #600]	@ (800aa50 <_strtod_l+0xaf8>)
 800a7f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d102      	bne.n	800a802 <_strtod_l+0x8aa>
 800a7fc:	3101      	adds	r1, #1
 800a7fe:	f43f adca 	beq.w	800a396 <_strtod_l+0x43e>
 800a802:	4b92      	ldr	r3, [pc, #584]	@ (800aa4c <_strtod_l+0xaf4>)
 800a804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a806:	401a      	ands	r2, r3
 800a808:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a80c:	f04f 0a00 	mov.w	sl, #0
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1b8      	bne.n	800a788 <_strtod_l+0x830>
 800a816:	e5c9      	b.n	800a3ac <_strtod_l+0x454>
 800a818:	f04f 33ff 	mov.w	r3, #4294967295
 800a81c:	e7e8      	b.n	800a7f0 <_strtod_l+0x898>
 800a81e:	4613      	mov	r3, r2
 800a820:	e7e6      	b.n	800a7f0 <_strtod_l+0x898>
 800a822:	ea53 030a 	orrs.w	r3, r3, sl
 800a826:	d0a1      	beq.n	800a76c <_strtod_l+0x814>
 800a828:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a82a:	b1db      	cbz	r3, 800a864 <_strtod_l+0x90c>
 800a82c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a82e:	4213      	tst	r3, r2
 800a830:	d0ee      	beq.n	800a810 <_strtod_l+0x8b8>
 800a832:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a834:	9a08      	ldr	r2, [sp, #32]
 800a836:	4650      	mov	r0, sl
 800a838:	4659      	mov	r1, fp
 800a83a:	b1bb      	cbz	r3, 800a86c <_strtod_l+0x914>
 800a83c:	f7ff fb6e 	bl	8009f1c <sulp>
 800a840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a844:	ec53 2b10 	vmov	r2, r3, d0
 800a848:	f7f5 fd28 	bl	800029c <__adddf3>
 800a84c:	4682      	mov	sl, r0
 800a84e:	468b      	mov	fp, r1
 800a850:	e7de      	b.n	800a810 <_strtod_l+0x8b8>
 800a852:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a856:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a85a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a85e:	f04f 3aff 	mov.w	sl, #4294967295
 800a862:	e7d5      	b.n	800a810 <_strtod_l+0x8b8>
 800a864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a866:	ea13 0f0a 	tst.w	r3, sl
 800a86a:	e7e1      	b.n	800a830 <_strtod_l+0x8d8>
 800a86c:	f7ff fb56 	bl	8009f1c <sulp>
 800a870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a874:	ec53 2b10 	vmov	r2, r3, d0
 800a878:	f7f5 fd0e 	bl	8000298 <__aeabi_dsub>
 800a87c:	2200      	movs	r2, #0
 800a87e:	2300      	movs	r3, #0
 800a880:	4682      	mov	sl, r0
 800a882:	468b      	mov	fp, r1
 800a884:	f7f6 f928 	bl	8000ad8 <__aeabi_dcmpeq>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d0c1      	beq.n	800a810 <_strtod_l+0x8b8>
 800a88c:	e619      	b.n	800a4c2 <_strtod_l+0x56a>
 800a88e:	4641      	mov	r1, r8
 800a890:	4620      	mov	r0, r4
 800a892:	f7ff facd 	bl	8009e30 <__ratio>
 800a896:	ec57 6b10 	vmov	r6, r7, d0
 800a89a:	2200      	movs	r2, #0
 800a89c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	f7f6 f92c 	bl	8000b00 <__aeabi_dcmple>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d06f      	beq.n	800a98c <_strtod_l+0xa34>
 800a8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d17a      	bne.n	800a9a8 <_strtod_l+0xa50>
 800a8b2:	f1ba 0f00 	cmp.w	sl, #0
 800a8b6:	d158      	bne.n	800a96a <_strtod_l+0xa12>
 800a8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d15a      	bne.n	800a978 <_strtod_l+0xa20>
 800a8c2:	4b64      	ldr	r3, [pc, #400]	@ (800aa54 <_strtod_l+0xafc>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	f7f6 f90f 	bl	8000aec <__aeabi_dcmplt>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d159      	bne.n	800a986 <_strtod_l+0xa2e>
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	4b60      	ldr	r3, [pc, #384]	@ (800aa58 <_strtod_l+0xb00>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f7f5 fe95 	bl	8000608 <__aeabi_dmul>
 800a8de:	4606      	mov	r6, r0
 800a8e0:	460f      	mov	r7, r1
 800a8e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a8e6:	9606      	str	r6, [sp, #24]
 800a8e8:	9307      	str	r3, [sp, #28]
 800a8ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8ee:	4d57      	ldr	r5, [pc, #348]	@ (800aa4c <_strtod_l+0xaf4>)
 800a8f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8f6:	401d      	ands	r5, r3
 800a8f8:	4b58      	ldr	r3, [pc, #352]	@ (800aa5c <_strtod_l+0xb04>)
 800a8fa:	429d      	cmp	r5, r3
 800a8fc:	f040 80b2 	bne.w	800aa64 <_strtod_l+0xb0c>
 800a900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a902:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a906:	ec4b ab10 	vmov	d0, sl, fp
 800a90a:	f7ff f9c9 	bl	8009ca0 <__ulp>
 800a90e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a912:	ec51 0b10 	vmov	r0, r1, d0
 800a916:	f7f5 fe77 	bl	8000608 <__aeabi_dmul>
 800a91a:	4652      	mov	r2, sl
 800a91c:	465b      	mov	r3, fp
 800a91e:	f7f5 fcbd 	bl	800029c <__adddf3>
 800a922:	460b      	mov	r3, r1
 800a924:	4949      	ldr	r1, [pc, #292]	@ (800aa4c <_strtod_l+0xaf4>)
 800a926:	4a4e      	ldr	r2, [pc, #312]	@ (800aa60 <_strtod_l+0xb08>)
 800a928:	4019      	ands	r1, r3
 800a92a:	4291      	cmp	r1, r2
 800a92c:	4682      	mov	sl, r0
 800a92e:	d942      	bls.n	800a9b6 <_strtod_l+0xa5e>
 800a930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a932:	4b47      	ldr	r3, [pc, #284]	@ (800aa50 <_strtod_l+0xaf8>)
 800a934:	429a      	cmp	r2, r3
 800a936:	d103      	bne.n	800a940 <_strtod_l+0x9e8>
 800a938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a93a:	3301      	adds	r3, #1
 800a93c:	f43f ad2b 	beq.w	800a396 <_strtod_l+0x43e>
 800a940:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa50 <_strtod_l+0xaf8>
 800a944:	f04f 3aff 	mov.w	sl, #4294967295
 800a948:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a94a:	9805      	ldr	r0, [sp, #20]
 800a94c:	f7fe fe74 	bl	8009638 <_Bfree>
 800a950:	9805      	ldr	r0, [sp, #20]
 800a952:	4649      	mov	r1, r9
 800a954:	f7fe fe70 	bl	8009638 <_Bfree>
 800a958:	9805      	ldr	r0, [sp, #20]
 800a95a:	4641      	mov	r1, r8
 800a95c:	f7fe fe6c 	bl	8009638 <_Bfree>
 800a960:	9805      	ldr	r0, [sp, #20]
 800a962:	4621      	mov	r1, r4
 800a964:	f7fe fe68 	bl	8009638 <_Bfree>
 800a968:	e618      	b.n	800a59c <_strtod_l+0x644>
 800a96a:	f1ba 0f01 	cmp.w	sl, #1
 800a96e:	d103      	bne.n	800a978 <_strtod_l+0xa20>
 800a970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a972:	2b00      	cmp	r3, #0
 800a974:	f43f ada5 	beq.w	800a4c2 <_strtod_l+0x56a>
 800a978:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa28 <_strtod_l+0xad0>
 800a97c:	4f35      	ldr	r7, [pc, #212]	@ (800aa54 <_strtod_l+0xafc>)
 800a97e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a982:	2600      	movs	r6, #0
 800a984:	e7b1      	b.n	800a8ea <_strtod_l+0x992>
 800a986:	4f34      	ldr	r7, [pc, #208]	@ (800aa58 <_strtod_l+0xb00>)
 800a988:	2600      	movs	r6, #0
 800a98a:	e7aa      	b.n	800a8e2 <_strtod_l+0x98a>
 800a98c:	4b32      	ldr	r3, [pc, #200]	@ (800aa58 <_strtod_l+0xb00>)
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	2200      	movs	r2, #0
 800a994:	f7f5 fe38 	bl	8000608 <__aeabi_dmul>
 800a998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d09f      	beq.n	800a8e2 <_strtod_l+0x98a>
 800a9a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9a6:	e7a0      	b.n	800a8ea <_strtod_l+0x992>
 800a9a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa30 <_strtod_l+0xad8>
 800a9ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9b0:	ec57 6b17 	vmov	r6, r7, d7
 800a9b4:	e799      	b.n	800a8ea <_strtod_l+0x992>
 800a9b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1c1      	bne.n	800a948 <_strtod_l+0x9f0>
 800a9c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9c8:	0d1b      	lsrs	r3, r3, #20
 800a9ca:	051b      	lsls	r3, r3, #20
 800a9cc:	429d      	cmp	r5, r3
 800a9ce:	d1bb      	bne.n	800a948 <_strtod_l+0x9f0>
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	f7f6 f978 	bl	8000cc8 <__aeabi_d2lz>
 800a9d8:	f7f5 fde8 	bl	80005ac <__aeabi_l2d>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	f7f5 fc58 	bl	8000298 <__aeabi_dsub>
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a9f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9f6:	ea46 060a 	orr.w	r6, r6, sl
 800a9fa:	431e      	orrs	r6, r3
 800a9fc:	d06f      	beq.n	800aade <_strtod_l+0xb86>
 800a9fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa38 <_strtod_l+0xae0>)
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f6 f872 	bl	8000aec <__aeabi_dcmplt>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f47f accf 	bne.w	800a3ac <_strtod_l+0x454>
 800aa0e:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa40 <_strtod_l+0xae8>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa18:	f7f6 f886 	bl	8000b28 <__aeabi_dcmpgt>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d093      	beq.n	800a948 <_strtod_l+0x9f0>
 800aa20:	e4c4      	b.n	800a3ac <_strtod_l+0x454>
 800aa22:	bf00      	nop
 800aa24:	f3af 8000 	nop.w
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	bff00000 	.word	0xbff00000
 800aa30:	00000000 	.word	0x00000000
 800aa34:	3ff00000 	.word	0x3ff00000
 800aa38:	94a03595 	.word	0x94a03595
 800aa3c:	3fdfffff 	.word	0x3fdfffff
 800aa40:	35afe535 	.word	0x35afe535
 800aa44:	3fe00000 	.word	0x3fe00000
 800aa48:	000fffff 	.word	0x000fffff
 800aa4c:	7ff00000 	.word	0x7ff00000
 800aa50:	7fefffff 	.word	0x7fefffff
 800aa54:	3ff00000 	.word	0x3ff00000
 800aa58:	3fe00000 	.word	0x3fe00000
 800aa5c:	7fe00000 	.word	0x7fe00000
 800aa60:	7c9fffff 	.word	0x7c9fffff
 800aa64:	9b08      	ldr	r3, [sp, #32]
 800aa66:	b323      	cbz	r3, 800aab2 <_strtod_l+0xb5a>
 800aa68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa6c:	d821      	bhi.n	800aab2 <_strtod_l+0xb5a>
 800aa6e:	a328      	add	r3, pc, #160	@ (adr r3, 800ab10 <_strtod_l+0xbb8>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	4630      	mov	r0, r6
 800aa76:	4639      	mov	r1, r7
 800aa78:	f7f6 f842 	bl	8000b00 <__aeabi_dcmple>
 800aa7c:	b1a0      	cbz	r0, 800aaa8 <_strtod_l+0xb50>
 800aa7e:	4639      	mov	r1, r7
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7f6 f899 	bl	8000bb8 <__aeabi_d2uiz>
 800aa86:	2801      	cmp	r0, #1
 800aa88:	bf38      	it	cc
 800aa8a:	2001      	movcc	r0, #1
 800aa8c:	f7f5 fd42 	bl	8000514 <__aeabi_ui2d>
 800aa90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa92:	4606      	mov	r6, r0
 800aa94:	460f      	mov	r7, r1
 800aa96:	b9fb      	cbnz	r3, 800aad8 <_strtod_l+0xb80>
 800aa98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa9c:	9014      	str	r0, [sp, #80]	@ 0x50
 800aa9e:	9315      	str	r3, [sp, #84]	@ 0x54
 800aaa0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aaa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aaa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaaa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aaae:	1b5b      	subs	r3, r3, r5
 800aab0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aab2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aab6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aaba:	f7ff f8f1 	bl	8009ca0 <__ulp>
 800aabe:	4650      	mov	r0, sl
 800aac0:	ec53 2b10 	vmov	r2, r3, d0
 800aac4:	4659      	mov	r1, fp
 800aac6:	f7f5 fd9f 	bl	8000608 <__aeabi_dmul>
 800aaca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aace:	f7f5 fbe5 	bl	800029c <__adddf3>
 800aad2:	4682      	mov	sl, r0
 800aad4:	468b      	mov	fp, r1
 800aad6:	e770      	b.n	800a9ba <_strtod_l+0xa62>
 800aad8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aadc:	e7e0      	b.n	800aaa0 <_strtod_l+0xb48>
 800aade:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab18 <_strtod_l+0xbc0>)
 800aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae4:	f7f6 f802 	bl	8000aec <__aeabi_dcmplt>
 800aae8:	e798      	b.n	800aa1c <_strtod_l+0xac4>
 800aaea:	2300      	movs	r3, #0
 800aaec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aaf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	f7ff ba6d 	b.w	8009fd2 <_strtod_l+0x7a>
 800aaf8:	2a65      	cmp	r2, #101	@ 0x65
 800aafa:	f43f ab66 	beq.w	800a1ca <_strtod_l+0x272>
 800aafe:	2a45      	cmp	r2, #69	@ 0x45
 800ab00:	f43f ab63 	beq.w	800a1ca <_strtod_l+0x272>
 800ab04:	2301      	movs	r3, #1
 800ab06:	f7ff bb9e 	b.w	800a246 <_strtod_l+0x2ee>
 800ab0a:	bf00      	nop
 800ab0c:	f3af 8000 	nop.w
 800ab10:	ffc00000 	.word	0xffc00000
 800ab14:	41dfffff 	.word	0x41dfffff
 800ab18:	94a03595 	.word	0x94a03595
 800ab1c:	3fcfffff 	.word	0x3fcfffff

0800ab20 <_strtod_r>:
 800ab20:	4b01      	ldr	r3, [pc, #4]	@ (800ab28 <_strtod_r+0x8>)
 800ab22:	f7ff ba19 	b.w	8009f58 <_strtod_l>
 800ab26:	bf00      	nop
 800ab28:	20000080 	.word	0x20000080

0800ab2c <_strtol_l.constprop.0>:
 800ab2c:	2b24      	cmp	r3, #36	@ 0x24
 800ab2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab32:	4686      	mov	lr, r0
 800ab34:	4690      	mov	r8, r2
 800ab36:	d801      	bhi.n	800ab3c <_strtol_l.constprop.0+0x10>
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d106      	bne.n	800ab4a <_strtol_l.constprop.0+0x1e>
 800ab3c:	f7fd fdbc 	bl	80086b8 <__errno>
 800ab40:	2316      	movs	r3, #22
 800ab42:	6003      	str	r3, [r0, #0]
 800ab44:	2000      	movs	r0, #0
 800ab46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4a:	4834      	ldr	r0, [pc, #208]	@ (800ac1c <_strtol_l.constprop.0+0xf0>)
 800ab4c:	460d      	mov	r5, r1
 800ab4e:	462a      	mov	r2, r5
 800ab50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab54:	5d06      	ldrb	r6, [r0, r4]
 800ab56:	f016 0608 	ands.w	r6, r6, #8
 800ab5a:	d1f8      	bne.n	800ab4e <_strtol_l.constprop.0+0x22>
 800ab5c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab5e:	d12d      	bne.n	800abbc <_strtol_l.constprop.0+0x90>
 800ab60:	782c      	ldrb	r4, [r5, #0]
 800ab62:	2601      	movs	r6, #1
 800ab64:	1c95      	adds	r5, r2, #2
 800ab66:	f033 0210 	bics.w	r2, r3, #16
 800ab6a:	d109      	bne.n	800ab80 <_strtol_l.constprop.0+0x54>
 800ab6c:	2c30      	cmp	r4, #48	@ 0x30
 800ab6e:	d12a      	bne.n	800abc6 <_strtol_l.constprop.0+0x9a>
 800ab70:	782a      	ldrb	r2, [r5, #0]
 800ab72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab76:	2a58      	cmp	r2, #88	@ 0x58
 800ab78:	d125      	bne.n	800abc6 <_strtol_l.constprop.0+0x9a>
 800ab7a:	786c      	ldrb	r4, [r5, #1]
 800ab7c:	2310      	movs	r3, #16
 800ab7e:	3502      	adds	r5, #2
 800ab80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab84:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ab88:	2200      	movs	r2, #0
 800ab8a:	fbbc f9f3 	udiv	r9, ip, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	fb03 ca19 	mls	sl, r3, r9, ip
 800ab94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ab98:	2f09      	cmp	r7, #9
 800ab9a:	d81b      	bhi.n	800abd4 <_strtol_l.constprop.0+0xa8>
 800ab9c:	463c      	mov	r4, r7
 800ab9e:	42a3      	cmp	r3, r4
 800aba0:	dd27      	ble.n	800abf2 <_strtol_l.constprop.0+0xc6>
 800aba2:	1c57      	adds	r7, r2, #1
 800aba4:	d007      	beq.n	800abb6 <_strtol_l.constprop.0+0x8a>
 800aba6:	4581      	cmp	r9, r0
 800aba8:	d320      	bcc.n	800abec <_strtol_l.constprop.0+0xc0>
 800abaa:	d101      	bne.n	800abb0 <_strtol_l.constprop.0+0x84>
 800abac:	45a2      	cmp	sl, r4
 800abae:	db1d      	blt.n	800abec <_strtol_l.constprop.0+0xc0>
 800abb0:	fb00 4003 	mla	r0, r0, r3, r4
 800abb4:	2201      	movs	r2, #1
 800abb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abba:	e7eb      	b.n	800ab94 <_strtol_l.constprop.0+0x68>
 800abbc:	2c2b      	cmp	r4, #43	@ 0x2b
 800abbe:	bf04      	itt	eq
 800abc0:	782c      	ldrbeq	r4, [r5, #0]
 800abc2:	1c95      	addeq	r5, r2, #2
 800abc4:	e7cf      	b.n	800ab66 <_strtol_l.constprop.0+0x3a>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1da      	bne.n	800ab80 <_strtol_l.constprop.0+0x54>
 800abca:	2c30      	cmp	r4, #48	@ 0x30
 800abcc:	bf0c      	ite	eq
 800abce:	2308      	moveq	r3, #8
 800abd0:	230a      	movne	r3, #10
 800abd2:	e7d5      	b.n	800ab80 <_strtol_l.constprop.0+0x54>
 800abd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800abd8:	2f19      	cmp	r7, #25
 800abda:	d801      	bhi.n	800abe0 <_strtol_l.constprop.0+0xb4>
 800abdc:	3c37      	subs	r4, #55	@ 0x37
 800abde:	e7de      	b.n	800ab9e <_strtol_l.constprop.0+0x72>
 800abe0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800abe4:	2f19      	cmp	r7, #25
 800abe6:	d804      	bhi.n	800abf2 <_strtol_l.constprop.0+0xc6>
 800abe8:	3c57      	subs	r4, #87	@ 0x57
 800abea:	e7d8      	b.n	800ab9e <_strtol_l.constprop.0+0x72>
 800abec:	f04f 32ff 	mov.w	r2, #4294967295
 800abf0:	e7e1      	b.n	800abb6 <_strtol_l.constprop.0+0x8a>
 800abf2:	1c53      	adds	r3, r2, #1
 800abf4:	d108      	bne.n	800ac08 <_strtol_l.constprop.0+0xdc>
 800abf6:	2322      	movs	r3, #34	@ 0x22
 800abf8:	f8ce 3000 	str.w	r3, [lr]
 800abfc:	4660      	mov	r0, ip
 800abfe:	f1b8 0f00 	cmp.w	r8, #0
 800ac02:	d0a0      	beq.n	800ab46 <_strtol_l.constprop.0+0x1a>
 800ac04:	1e69      	subs	r1, r5, #1
 800ac06:	e006      	b.n	800ac16 <_strtol_l.constprop.0+0xea>
 800ac08:	b106      	cbz	r6, 800ac0c <_strtol_l.constprop.0+0xe0>
 800ac0a:	4240      	negs	r0, r0
 800ac0c:	f1b8 0f00 	cmp.w	r8, #0
 800ac10:	d099      	beq.n	800ab46 <_strtol_l.constprop.0+0x1a>
 800ac12:	2a00      	cmp	r2, #0
 800ac14:	d1f6      	bne.n	800ac04 <_strtol_l.constprop.0+0xd8>
 800ac16:	f8c8 1000 	str.w	r1, [r8]
 800ac1a:	e794      	b.n	800ab46 <_strtol_l.constprop.0+0x1a>
 800ac1c:	0800c0d1 	.word	0x0800c0d1

0800ac20 <_strtol_r>:
 800ac20:	f7ff bf84 	b.w	800ab2c <_strtol_l.constprop.0>

0800ac24 <__ssputs_r>:
 800ac24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac28:	688e      	ldr	r6, [r1, #8]
 800ac2a:	461f      	mov	r7, r3
 800ac2c:	42be      	cmp	r6, r7
 800ac2e:	680b      	ldr	r3, [r1, #0]
 800ac30:	4682      	mov	sl, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	4690      	mov	r8, r2
 800ac36:	d82d      	bhi.n	800ac94 <__ssputs_r+0x70>
 800ac38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac40:	d026      	beq.n	800ac90 <__ssputs_r+0x6c>
 800ac42:	6965      	ldr	r5, [r4, #20]
 800ac44:	6909      	ldr	r1, [r1, #16]
 800ac46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac4a:	eba3 0901 	sub.w	r9, r3, r1
 800ac4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac52:	1c7b      	adds	r3, r7, #1
 800ac54:	444b      	add	r3, r9
 800ac56:	106d      	asrs	r5, r5, #1
 800ac58:	429d      	cmp	r5, r3
 800ac5a:	bf38      	it	cc
 800ac5c:	461d      	movcc	r5, r3
 800ac5e:	0553      	lsls	r3, r2, #21
 800ac60:	d527      	bpl.n	800acb2 <__ssputs_r+0x8e>
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7fe fc1c 	bl	80094a0 <_malloc_r>
 800ac68:	4606      	mov	r6, r0
 800ac6a:	b360      	cbz	r0, 800acc6 <__ssputs_r+0xa2>
 800ac6c:	6921      	ldr	r1, [r4, #16]
 800ac6e:	464a      	mov	r2, r9
 800ac70:	f000 fa18 	bl	800b0a4 <memcpy>
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	6126      	str	r6, [r4, #16]
 800ac82:	6165      	str	r5, [r4, #20]
 800ac84:	444e      	add	r6, r9
 800ac86:	eba5 0509 	sub.w	r5, r5, r9
 800ac8a:	6026      	str	r6, [r4, #0]
 800ac8c:	60a5      	str	r5, [r4, #8]
 800ac8e:	463e      	mov	r6, r7
 800ac90:	42be      	cmp	r6, r7
 800ac92:	d900      	bls.n	800ac96 <__ssputs_r+0x72>
 800ac94:	463e      	mov	r6, r7
 800ac96:	6820      	ldr	r0, [r4, #0]
 800ac98:	4632      	mov	r2, r6
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	f000 f9c6 	bl	800b02c <memmove>
 800aca0:	68a3      	ldr	r3, [r4, #8]
 800aca2:	1b9b      	subs	r3, r3, r6
 800aca4:	60a3      	str	r3, [r4, #8]
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	4433      	add	r3, r6
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	2000      	movs	r0, #0
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	462a      	mov	r2, r5
 800acb4:	f000 fd89 	bl	800b7ca <_realloc_r>
 800acb8:	4606      	mov	r6, r0
 800acba:	2800      	cmp	r0, #0
 800acbc:	d1e0      	bne.n	800ac80 <__ssputs_r+0x5c>
 800acbe:	6921      	ldr	r1, [r4, #16]
 800acc0:	4650      	mov	r0, sl
 800acc2:	f7fe fb79 	bl	80093b8 <_free_r>
 800acc6:	230c      	movs	r3, #12
 800acc8:	f8ca 3000 	str.w	r3, [sl]
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	f04f 30ff 	mov.w	r0, #4294967295
 800acd8:	e7e9      	b.n	800acae <__ssputs_r+0x8a>
	...

0800acdc <_svfiprintf_r>:
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	4698      	mov	r8, r3
 800ace2:	898b      	ldrh	r3, [r1, #12]
 800ace4:	061b      	lsls	r3, r3, #24
 800ace6:	b09d      	sub	sp, #116	@ 0x74
 800ace8:	4607      	mov	r7, r0
 800acea:	460d      	mov	r5, r1
 800acec:	4614      	mov	r4, r2
 800acee:	d510      	bpl.n	800ad12 <_svfiprintf_r+0x36>
 800acf0:	690b      	ldr	r3, [r1, #16]
 800acf2:	b973      	cbnz	r3, 800ad12 <_svfiprintf_r+0x36>
 800acf4:	2140      	movs	r1, #64	@ 0x40
 800acf6:	f7fe fbd3 	bl	80094a0 <_malloc_r>
 800acfa:	6028      	str	r0, [r5, #0]
 800acfc:	6128      	str	r0, [r5, #16]
 800acfe:	b930      	cbnz	r0, 800ad0e <_svfiprintf_r+0x32>
 800ad00:	230c      	movs	r3, #12
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	f04f 30ff 	mov.w	r0, #4294967295
 800ad08:	b01d      	add	sp, #116	@ 0x74
 800ad0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0e:	2340      	movs	r3, #64	@ 0x40
 800ad10:	616b      	str	r3, [r5, #20]
 800ad12:	2300      	movs	r3, #0
 800ad14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad16:	2320      	movs	r3, #32
 800ad18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad20:	2330      	movs	r3, #48	@ 0x30
 800ad22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aec0 <_svfiprintf_r+0x1e4>
 800ad26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad2a:	f04f 0901 	mov.w	r9, #1
 800ad2e:	4623      	mov	r3, r4
 800ad30:	469a      	mov	sl, r3
 800ad32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad36:	b10a      	cbz	r2, 800ad3c <_svfiprintf_r+0x60>
 800ad38:	2a25      	cmp	r2, #37	@ 0x25
 800ad3a:	d1f9      	bne.n	800ad30 <_svfiprintf_r+0x54>
 800ad3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad40:	d00b      	beq.n	800ad5a <_svfiprintf_r+0x7e>
 800ad42:	465b      	mov	r3, fp
 800ad44:	4622      	mov	r2, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7ff ff6b 	bl	800ac24 <__ssputs_r>
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f000 80a7 	beq.w	800aea2 <_svfiprintf_r+0x1c6>
 800ad54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad56:	445a      	add	r2, fp
 800ad58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 809f 	beq.w	800aea2 <_svfiprintf_r+0x1c6>
 800ad64:	2300      	movs	r3, #0
 800ad66:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad6e:	f10a 0a01 	add.w	sl, sl, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	9307      	str	r3, [sp, #28]
 800ad76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad7c:	4654      	mov	r4, sl
 800ad7e:	2205      	movs	r2, #5
 800ad80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad84:	484e      	ldr	r0, [pc, #312]	@ (800aec0 <_svfiprintf_r+0x1e4>)
 800ad86:	f7f5 fa2b 	bl	80001e0 <memchr>
 800ad8a:	9a04      	ldr	r2, [sp, #16]
 800ad8c:	b9d8      	cbnz	r0, 800adc6 <_svfiprintf_r+0xea>
 800ad8e:	06d0      	lsls	r0, r2, #27
 800ad90:	bf44      	itt	mi
 800ad92:	2320      	movmi	r3, #32
 800ad94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad98:	0711      	lsls	r1, r2, #28
 800ad9a:	bf44      	itt	mi
 800ad9c:	232b      	movmi	r3, #43	@ 0x2b
 800ad9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ada2:	f89a 3000 	ldrb.w	r3, [sl]
 800ada6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ada8:	d015      	beq.n	800add6 <_svfiprintf_r+0xfa>
 800adaa:	9a07      	ldr	r2, [sp, #28]
 800adac:	4654      	mov	r4, sl
 800adae:	2000      	movs	r0, #0
 800adb0:	f04f 0c0a 	mov.w	ip, #10
 800adb4:	4621      	mov	r1, r4
 800adb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adba:	3b30      	subs	r3, #48	@ 0x30
 800adbc:	2b09      	cmp	r3, #9
 800adbe:	d94b      	bls.n	800ae58 <_svfiprintf_r+0x17c>
 800adc0:	b1b0      	cbz	r0, 800adf0 <_svfiprintf_r+0x114>
 800adc2:	9207      	str	r2, [sp, #28]
 800adc4:	e014      	b.n	800adf0 <_svfiprintf_r+0x114>
 800adc6:	eba0 0308 	sub.w	r3, r0, r8
 800adca:	fa09 f303 	lsl.w	r3, r9, r3
 800adce:	4313      	orrs	r3, r2
 800add0:	9304      	str	r3, [sp, #16]
 800add2:	46a2      	mov	sl, r4
 800add4:	e7d2      	b.n	800ad7c <_svfiprintf_r+0xa0>
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	1d19      	adds	r1, r3, #4
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	9103      	str	r1, [sp, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfbb      	ittet	lt
 800ade2:	425b      	neglt	r3, r3
 800ade4:	f042 0202 	orrlt.w	r2, r2, #2
 800ade8:	9307      	strge	r3, [sp, #28]
 800adea:	9307      	strlt	r3, [sp, #28]
 800adec:	bfb8      	it	lt
 800adee:	9204      	strlt	r2, [sp, #16]
 800adf0:	7823      	ldrb	r3, [r4, #0]
 800adf2:	2b2e      	cmp	r3, #46	@ 0x2e
 800adf4:	d10a      	bne.n	800ae0c <_svfiprintf_r+0x130>
 800adf6:	7863      	ldrb	r3, [r4, #1]
 800adf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800adfa:	d132      	bne.n	800ae62 <_svfiprintf_r+0x186>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	1d1a      	adds	r2, r3, #4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	9203      	str	r2, [sp, #12]
 800ae04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae08:	3402      	adds	r4, #2
 800ae0a:	9305      	str	r3, [sp, #20]
 800ae0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aed0 <_svfiprintf_r+0x1f4>
 800ae10:	7821      	ldrb	r1, [r4, #0]
 800ae12:	2203      	movs	r2, #3
 800ae14:	4650      	mov	r0, sl
 800ae16:	f7f5 f9e3 	bl	80001e0 <memchr>
 800ae1a:	b138      	cbz	r0, 800ae2c <_svfiprintf_r+0x150>
 800ae1c:	9b04      	ldr	r3, [sp, #16]
 800ae1e:	eba0 000a 	sub.w	r0, r0, sl
 800ae22:	2240      	movs	r2, #64	@ 0x40
 800ae24:	4082      	lsls	r2, r0
 800ae26:	4313      	orrs	r3, r2
 800ae28:	3401      	adds	r4, #1
 800ae2a:	9304      	str	r3, [sp, #16]
 800ae2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae30:	4824      	ldr	r0, [pc, #144]	@ (800aec4 <_svfiprintf_r+0x1e8>)
 800ae32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae36:	2206      	movs	r2, #6
 800ae38:	f7f5 f9d2 	bl	80001e0 <memchr>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d036      	beq.n	800aeae <_svfiprintf_r+0x1d2>
 800ae40:	4b21      	ldr	r3, [pc, #132]	@ (800aec8 <_svfiprintf_r+0x1ec>)
 800ae42:	bb1b      	cbnz	r3, 800ae8c <_svfiprintf_r+0x1b0>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	3307      	adds	r3, #7
 800ae48:	f023 0307 	bic.w	r3, r3, #7
 800ae4c:	3308      	adds	r3, #8
 800ae4e:	9303      	str	r3, [sp, #12]
 800ae50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae52:	4433      	add	r3, r6
 800ae54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae56:	e76a      	b.n	800ad2e <_svfiprintf_r+0x52>
 800ae58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	2001      	movs	r0, #1
 800ae60:	e7a8      	b.n	800adb4 <_svfiprintf_r+0xd8>
 800ae62:	2300      	movs	r3, #0
 800ae64:	3401      	adds	r4, #1
 800ae66:	9305      	str	r3, [sp, #20]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	f04f 0c0a 	mov.w	ip, #10
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae74:	3a30      	subs	r2, #48	@ 0x30
 800ae76:	2a09      	cmp	r2, #9
 800ae78:	d903      	bls.n	800ae82 <_svfiprintf_r+0x1a6>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0c6      	beq.n	800ae0c <_svfiprintf_r+0x130>
 800ae7e:	9105      	str	r1, [sp, #20]
 800ae80:	e7c4      	b.n	800ae0c <_svfiprintf_r+0x130>
 800ae82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae86:	4604      	mov	r4, r0
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e7f0      	b.n	800ae6e <_svfiprintf_r+0x192>
 800ae8c:	ab03      	add	r3, sp, #12
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	462a      	mov	r2, r5
 800ae92:	4b0e      	ldr	r3, [pc, #56]	@ (800aecc <_svfiprintf_r+0x1f0>)
 800ae94:	a904      	add	r1, sp, #16
 800ae96:	4638      	mov	r0, r7
 800ae98:	f7fc fc96 	bl	80077c8 <_printf_float>
 800ae9c:	1c42      	adds	r2, r0, #1
 800ae9e:	4606      	mov	r6, r0
 800aea0:	d1d6      	bne.n	800ae50 <_svfiprintf_r+0x174>
 800aea2:	89ab      	ldrh	r3, [r5, #12]
 800aea4:	065b      	lsls	r3, r3, #25
 800aea6:	f53f af2d 	bmi.w	800ad04 <_svfiprintf_r+0x28>
 800aeaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aeac:	e72c      	b.n	800ad08 <_svfiprintf_r+0x2c>
 800aeae:	ab03      	add	r3, sp, #12
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	462a      	mov	r2, r5
 800aeb4:	4b05      	ldr	r3, [pc, #20]	@ (800aecc <_svfiprintf_r+0x1f0>)
 800aeb6:	a904      	add	r1, sp, #16
 800aeb8:	4638      	mov	r0, r7
 800aeba:	f7fc ff1d 	bl	8007cf8 <_printf_i>
 800aebe:	e7ed      	b.n	800ae9c <_svfiprintf_r+0x1c0>
 800aec0:	0800c1d1 	.word	0x0800c1d1
 800aec4:	0800c1db 	.word	0x0800c1db
 800aec8:	080077c9 	.word	0x080077c9
 800aecc:	0800ac25 	.word	0x0800ac25
 800aed0:	0800c1d7 	.word	0x0800c1d7

0800aed4 <__sflush_r>:
 800aed4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	0716      	lsls	r6, r2, #28
 800aede:	4605      	mov	r5, r0
 800aee0:	460c      	mov	r4, r1
 800aee2:	d454      	bmi.n	800af8e <__sflush_r+0xba>
 800aee4:	684b      	ldr	r3, [r1, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	dc02      	bgt.n	800aef0 <__sflush_r+0x1c>
 800aeea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	dd48      	ble.n	800af82 <__sflush_r+0xae>
 800aef0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aef2:	2e00      	cmp	r6, #0
 800aef4:	d045      	beq.n	800af82 <__sflush_r+0xae>
 800aef6:	2300      	movs	r3, #0
 800aef8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aefc:	682f      	ldr	r7, [r5, #0]
 800aefe:	6a21      	ldr	r1, [r4, #32]
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	d030      	beq.n	800af66 <__sflush_r+0x92>
 800af04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	0759      	lsls	r1, r3, #29
 800af0a:	d505      	bpl.n	800af18 <__sflush_r+0x44>
 800af0c:	6863      	ldr	r3, [r4, #4]
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af12:	b10b      	cbz	r3, 800af18 <__sflush_r+0x44>
 800af14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af16:	1ad2      	subs	r2, r2, r3
 800af18:	2300      	movs	r3, #0
 800af1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af1c:	6a21      	ldr	r1, [r4, #32]
 800af1e:	4628      	mov	r0, r5
 800af20:	47b0      	blx	r6
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	d106      	bne.n	800af36 <__sflush_r+0x62>
 800af28:	6829      	ldr	r1, [r5, #0]
 800af2a:	291d      	cmp	r1, #29
 800af2c:	d82b      	bhi.n	800af86 <__sflush_r+0xb2>
 800af2e:	4a2a      	ldr	r2, [pc, #168]	@ (800afd8 <__sflush_r+0x104>)
 800af30:	410a      	asrs	r2, r1
 800af32:	07d6      	lsls	r6, r2, #31
 800af34:	d427      	bmi.n	800af86 <__sflush_r+0xb2>
 800af36:	2200      	movs	r2, #0
 800af38:	6062      	str	r2, [r4, #4]
 800af3a:	04d9      	lsls	r1, r3, #19
 800af3c:	6922      	ldr	r2, [r4, #16]
 800af3e:	6022      	str	r2, [r4, #0]
 800af40:	d504      	bpl.n	800af4c <__sflush_r+0x78>
 800af42:	1c42      	adds	r2, r0, #1
 800af44:	d101      	bne.n	800af4a <__sflush_r+0x76>
 800af46:	682b      	ldr	r3, [r5, #0]
 800af48:	b903      	cbnz	r3, 800af4c <__sflush_r+0x78>
 800af4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800af4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af4e:	602f      	str	r7, [r5, #0]
 800af50:	b1b9      	cbz	r1, 800af82 <__sflush_r+0xae>
 800af52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af56:	4299      	cmp	r1, r3
 800af58:	d002      	beq.n	800af60 <__sflush_r+0x8c>
 800af5a:	4628      	mov	r0, r5
 800af5c:	f7fe fa2c 	bl	80093b8 <_free_r>
 800af60:	2300      	movs	r3, #0
 800af62:	6363      	str	r3, [r4, #52]	@ 0x34
 800af64:	e00d      	b.n	800af82 <__sflush_r+0xae>
 800af66:	2301      	movs	r3, #1
 800af68:	4628      	mov	r0, r5
 800af6a:	47b0      	blx	r6
 800af6c:	4602      	mov	r2, r0
 800af6e:	1c50      	adds	r0, r2, #1
 800af70:	d1c9      	bne.n	800af06 <__sflush_r+0x32>
 800af72:	682b      	ldr	r3, [r5, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0c6      	beq.n	800af06 <__sflush_r+0x32>
 800af78:	2b1d      	cmp	r3, #29
 800af7a:	d001      	beq.n	800af80 <__sflush_r+0xac>
 800af7c:	2b16      	cmp	r3, #22
 800af7e:	d11e      	bne.n	800afbe <__sflush_r+0xea>
 800af80:	602f      	str	r7, [r5, #0]
 800af82:	2000      	movs	r0, #0
 800af84:	e022      	b.n	800afcc <__sflush_r+0xf8>
 800af86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af8a:	b21b      	sxth	r3, r3
 800af8c:	e01b      	b.n	800afc6 <__sflush_r+0xf2>
 800af8e:	690f      	ldr	r7, [r1, #16]
 800af90:	2f00      	cmp	r7, #0
 800af92:	d0f6      	beq.n	800af82 <__sflush_r+0xae>
 800af94:	0793      	lsls	r3, r2, #30
 800af96:	680e      	ldr	r6, [r1, #0]
 800af98:	bf08      	it	eq
 800af9a:	694b      	ldreq	r3, [r1, #20]
 800af9c:	600f      	str	r7, [r1, #0]
 800af9e:	bf18      	it	ne
 800afa0:	2300      	movne	r3, #0
 800afa2:	eba6 0807 	sub.w	r8, r6, r7
 800afa6:	608b      	str	r3, [r1, #8]
 800afa8:	f1b8 0f00 	cmp.w	r8, #0
 800afac:	dde9      	ble.n	800af82 <__sflush_r+0xae>
 800afae:	6a21      	ldr	r1, [r4, #32]
 800afb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afb2:	4643      	mov	r3, r8
 800afb4:	463a      	mov	r2, r7
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b0      	blx	r6
 800afba:	2800      	cmp	r0, #0
 800afbc:	dc08      	bgt.n	800afd0 <__sflush_r+0xfc>
 800afbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afc6:	81a3      	strh	r3, [r4, #12]
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	4407      	add	r7, r0
 800afd2:	eba8 0800 	sub.w	r8, r8, r0
 800afd6:	e7e7      	b.n	800afa8 <__sflush_r+0xd4>
 800afd8:	dfbffffe 	.word	0xdfbffffe

0800afdc <_fflush_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	690b      	ldr	r3, [r1, #16]
 800afe0:	4605      	mov	r5, r0
 800afe2:	460c      	mov	r4, r1
 800afe4:	b913      	cbnz	r3, 800afec <_fflush_r+0x10>
 800afe6:	2500      	movs	r5, #0
 800afe8:	4628      	mov	r0, r5
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	b118      	cbz	r0, 800aff6 <_fflush_r+0x1a>
 800afee:	6a03      	ldr	r3, [r0, #32]
 800aff0:	b90b      	cbnz	r3, 800aff6 <_fflush_r+0x1a>
 800aff2:	f7fd fa41 	bl	8008478 <__sinit>
 800aff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0f3      	beq.n	800afe6 <_fflush_r+0xa>
 800affe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b000:	07d0      	lsls	r0, r2, #31
 800b002:	d404      	bmi.n	800b00e <_fflush_r+0x32>
 800b004:	0599      	lsls	r1, r3, #22
 800b006:	d402      	bmi.n	800b00e <_fflush_r+0x32>
 800b008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b00a:	f7fd fb80 	bl	800870e <__retarget_lock_acquire_recursive>
 800b00e:	4628      	mov	r0, r5
 800b010:	4621      	mov	r1, r4
 800b012:	f7ff ff5f 	bl	800aed4 <__sflush_r>
 800b016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b018:	07da      	lsls	r2, r3, #31
 800b01a:	4605      	mov	r5, r0
 800b01c:	d4e4      	bmi.n	800afe8 <_fflush_r+0xc>
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	059b      	lsls	r3, r3, #22
 800b022:	d4e1      	bmi.n	800afe8 <_fflush_r+0xc>
 800b024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b026:	f7fd fb73 	bl	8008710 <__retarget_lock_release_recursive>
 800b02a:	e7dd      	b.n	800afe8 <_fflush_r+0xc>

0800b02c <memmove>:
 800b02c:	4288      	cmp	r0, r1
 800b02e:	b510      	push	{r4, lr}
 800b030:	eb01 0402 	add.w	r4, r1, r2
 800b034:	d902      	bls.n	800b03c <memmove+0x10>
 800b036:	4284      	cmp	r4, r0
 800b038:	4623      	mov	r3, r4
 800b03a:	d807      	bhi.n	800b04c <memmove+0x20>
 800b03c:	1e43      	subs	r3, r0, #1
 800b03e:	42a1      	cmp	r1, r4
 800b040:	d008      	beq.n	800b054 <memmove+0x28>
 800b042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b04a:	e7f8      	b.n	800b03e <memmove+0x12>
 800b04c:	4402      	add	r2, r0
 800b04e:	4601      	mov	r1, r0
 800b050:	428a      	cmp	r2, r1
 800b052:	d100      	bne.n	800b056 <memmove+0x2a>
 800b054:	bd10      	pop	{r4, pc}
 800b056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b05a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b05e:	e7f7      	b.n	800b050 <memmove+0x24>

0800b060 <strncmp>:
 800b060:	b510      	push	{r4, lr}
 800b062:	b16a      	cbz	r2, 800b080 <strncmp+0x20>
 800b064:	3901      	subs	r1, #1
 800b066:	1884      	adds	r4, r0, r2
 800b068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b06c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b070:	429a      	cmp	r2, r3
 800b072:	d103      	bne.n	800b07c <strncmp+0x1c>
 800b074:	42a0      	cmp	r0, r4
 800b076:	d001      	beq.n	800b07c <strncmp+0x1c>
 800b078:	2a00      	cmp	r2, #0
 800b07a:	d1f5      	bne.n	800b068 <strncmp+0x8>
 800b07c:	1ad0      	subs	r0, r2, r3
 800b07e:	bd10      	pop	{r4, pc}
 800b080:	4610      	mov	r0, r2
 800b082:	e7fc      	b.n	800b07e <strncmp+0x1e>

0800b084 <_sbrk_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d06      	ldr	r5, [pc, #24]	@ (800b0a0 <_sbrk_r+0x1c>)
 800b088:	2300      	movs	r3, #0
 800b08a:	4604      	mov	r4, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	f7f6 fd2e 	bl	8001af0 <_sbrk>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d102      	bne.n	800b09e <_sbrk_r+0x1a>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	b103      	cbz	r3, 800b09e <_sbrk_r+0x1a>
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	2000057c 	.word	0x2000057c

0800b0a4 <memcpy>:
 800b0a4:	440a      	add	r2, r1
 800b0a6:	4291      	cmp	r1, r2
 800b0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0ac:	d100      	bne.n	800b0b0 <memcpy+0xc>
 800b0ae:	4770      	bx	lr
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	d1f9      	bne.n	800b0b2 <memcpy+0xe>
 800b0be:	bd10      	pop	{r4, pc}

0800b0c0 <nan>:
 800b0c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b0c8 <nan+0x8>
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	00000000 	.word	0x00000000
 800b0cc:	7ff80000 	.word	0x7ff80000

0800b0d0 <__assert_func>:
 800b0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0d2:	4614      	mov	r4, r2
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4b09      	ldr	r3, [pc, #36]	@ (800b0fc <__assert_func+0x2c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4605      	mov	r5, r0
 800b0dc:	68d8      	ldr	r0, [r3, #12]
 800b0de:	b954      	cbnz	r4, 800b0f6 <__assert_func+0x26>
 800b0e0:	4b07      	ldr	r3, [pc, #28]	@ (800b100 <__assert_func+0x30>)
 800b0e2:	461c      	mov	r4, r3
 800b0e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0e8:	9100      	str	r1, [sp, #0]
 800b0ea:	462b      	mov	r3, r5
 800b0ec:	4905      	ldr	r1, [pc, #20]	@ (800b104 <__assert_func+0x34>)
 800b0ee:	f000 fba7 	bl	800b840 <fiprintf>
 800b0f2:	f000 fbb7 	bl	800b864 <abort>
 800b0f6:	4b04      	ldr	r3, [pc, #16]	@ (800b108 <__assert_func+0x38>)
 800b0f8:	e7f4      	b.n	800b0e4 <__assert_func+0x14>
 800b0fa:	bf00      	nop
 800b0fc:	20000030 	.word	0x20000030
 800b100:	0800c225 	.word	0x0800c225
 800b104:	0800c1f7 	.word	0x0800c1f7
 800b108:	0800c1ea 	.word	0x0800c1ea

0800b10c <_calloc_r>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	fba1 5402 	umull	r5, r4, r1, r2
 800b112:	b93c      	cbnz	r4, 800b124 <_calloc_r+0x18>
 800b114:	4629      	mov	r1, r5
 800b116:	f7fe f9c3 	bl	80094a0 <_malloc_r>
 800b11a:	4606      	mov	r6, r0
 800b11c:	b928      	cbnz	r0, 800b12a <_calloc_r+0x1e>
 800b11e:	2600      	movs	r6, #0
 800b120:	4630      	mov	r0, r6
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	220c      	movs	r2, #12
 800b126:	6002      	str	r2, [r0, #0]
 800b128:	e7f9      	b.n	800b11e <_calloc_r+0x12>
 800b12a:	462a      	mov	r2, r5
 800b12c:	4621      	mov	r1, r4
 800b12e:	f7fd fa70 	bl	8008612 <memset>
 800b132:	e7f5      	b.n	800b120 <_calloc_r+0x14>

0800b134 <rshift>:
 800b134:	6903      	ldr	r3, [r0, #16]
 800b136:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b13a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b13e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b142:	f100 0414 	add.w	r4, r0, #20
 800b146:	dd45      	ble.n	800b1d4 <rshift+0xa0>
 800b148:	f011 011f 	ands.w	r1, r1, #31
 800b14c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b150:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b154:	d10c      	bne.n	800b170 <rshift+0x3c>
 800b156:	f100 0710 	add.w	r7, r0, #16
 800b15a:	4629      	mov	r1, r5
 800b15c:	42b1      	cmp	r1, r6
 800b15e:	d334      	bcc.n	800b1ca <rshift+0x96>
 800b160:	1a9b      	subs	r3, r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	1eea      	subs	r2, r5, #3
 800b166:	4296      	cmp	r6, r2
 800b168:	bf38      	it	cc
 800b16a:	2300      	movcc	r3, #0
 800b16c:	4423      	add	r3, r4
 800b16e:	e015      	b.n	800b19c <rshift+0x68>
 800b170:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b174:	f1c1 0820 	rsb	r8, r1, #32
 800b178:	40cf      	lsrs	r7, r1
 800b17a:	f105 0e04 	add.w	lr, r5, #4
 800b17e:	46a1      	mov	r9, r4
 800b180:	4576      	cmp	r6, lr
 800b182:	46f4      	mov	ip, lr
 800b184:	d815      	bhi.n	800b1b2 <rshift+0x7e>
 800b186:	1a9a      	subs	r2, r3, r2
 800b188:	0092      	lsls	r2, r2, #2
 800b18a:	3a04      	subs	r2, #4
 800b18c:	3501      	adds	r5, #1
 800b18e:	42ae      	cmp	r6, r5
 800b190:	bf38      	it	cc
 800b192:	2200      	movcc	r2, #0
 800b194:	18a3      	adds	r3, r4, r2
 800b196:	50a7      	str	r7, [r4, r2]
 800b198:	b107      	cbz	r7, 800b19c <rshift+0x68>
 800b19a:	3304      	adds	r3, #4
 800b19c:	1b1a      	subs	r2, r3, r4
 800b19e:	42a3      	cmp	r3, r4
 800b1a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1a4:	bf08      	it	eq
 800b1a6:	2300      	moveq	r3, #0
 800b1a8:	6102      	str	r2, [r0, #16]
 800b1aa:	bf08      	it	eq
 800b1ac:	6143      	streq	r3, [r0, #20]
 800b1ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1b2:	f8dc c000 	ldr.w	ip, [ip]
 800b1b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1ba:	ea4c 0707 	orr.w	r7, ip, r7
 800b1be:	f849 7b04 	str.w	r7, [r9], #4
 800b1c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1c6:	40cf      	lsrs	r7, r1
 800b1c8:	e7da      	b.n	800b180 <rshift+0x4c>
 800b1ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1d2:	e7c3      	b.n	800b15c <rshift+0x28>
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	e7e1      	b.n	800b19c <rshift+0x68>

0800b1d8 <__hexdig_fun>:
 800b1d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	d802      	bhi.n	800b1e6 <__hexdig_fun+0xe>
 800b1e0:	3820      	subs	r0, #32
 800b1e2:	b2c0      	uxtb	r0, r0
 800b1e4:	4770      	bx	lr
 800b1e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d801      	bhi.n	800b1f2 <__hexdig_fun+0x1a>
 800b1ee:	3847      	subs	r0, #71	@ 0x47
 800b1f0:	e7f7      	b.n	800b1e2 <__hexdig_fun+0xa>
 800b1f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d801      	bhi.n	800b1fe <__hexdig_fun+0x26>
 800b1fa:	3827      	subs	r0, #39	@ 0x27
 800b1fc:	e7f1      	b.n	800b1e2 <__hexdig_fun+0xa>
 800b1fe:	2000      	movs	r0, #0
 800b200:	4770      	bx	lr
	...

0800b204 <__gethex>:
 800b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	b085      	sub	sp, #20
 800b20a:	468a      	mov	sl, r1
 800b20c:	9302      	str	r3, [sp, #8]
 800b20e:	680b      	ldr	r3, [r1, #0]
 800b210:	9001      	str	r0, [sp, #4]
 800b212:	4690      	mov	r8, r2
 800b214:	1c9c      	adds	r4, r3, #2
 800b216:	46a1      	mov	r9, r4
 800b218:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b21c:	2830      	cmp	r0, #48	@ 0x30
 800b21e:	d0fa      	beq.n	800b216 <__gethex+0x12>
 800b220:	eba9 0303 	sub.w	r3, r9, r3
 800b224:	f1a3 0b02 	sub.w	fp, r3, #2
 800b228:	f7ff ffd6 	bl	800b1d8 <__hexdig_fun>
 800b22c:	4605      	mov	r5, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d168      	bne.n	800b304 <__gethex+0x100>
 800b232:	49a0      	ldr	r1, [pc, #640]	@ (800b4b4 <__gethex+0x2b0>)
 800b234:	2201      	movs	r2, #1
 800b236:	4648      	mov	r0, r9
 800b238:	f7ff ff12 	bl	800b060 <strncmp>
 800b23c:	4607      	mov	r7, r0
 800b23e:	2800      	cmp	r0, #0
 800b240:	d167      	bne.n	800b312 <__gethex+0x10e>
 800b242:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b246:	4626      	mov	r6, r4
 800b248:	f7ff ffc6 	bl	800b1d8 <__hexdig_fun>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d062      	beq.n	800b316 <__gethex+0x112>
 800b250:	4623      	mov	r3, r4
 800b252:	7818      	ldrb	r0, [r3, #0]
 800b254:	2830      	cmp	r0, #48	@ 0x30
 800b256:	4699      	mov	r9, r3
 800b258:	f103 0301 	add.w	r3, r3, #1
 800b25c:	d0f9      	beq.n	800b252 <__gethex+0x4e>
 800b25e:	f7ff ffbb 	bl	800b1d8 <__hexdig_fun>
 800b262:	fab0 f580 	clz	r5, r0
 800b266:	096d      	lsrs	r5, r5, #5
 800b268:	f04f 0b01 	mov.w	fp, #1
 800b26c:	464a      	mov	r2, r9
 800b26e:	4616      	mov	r6, r2
 800b270:	3201      	adds	r2, #1
 800b272:	7830      	ldrb	r0, [r6, #0]
 800b274:	f7ff ffb0 	bl	800b1d8 <__hexdig_fun>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d1f8      	bne.n	800b26e <__gethex+0x6a>
 800b27c:	498d      	ldr	r1, [pc, #564]	@ (800b4b4 <__gethex+0x2b0>)
 800b27e:	2201      	movs	r2, #1
 800b280:	4630      	mov	r0, r6
 800b282:	f7ff feed 	bl	800b060 <strncmp>
 800b286:	2800      	cmp	r0, #0
 800b288:	d13f      	bne.n	800b30a <__gethex+0x106>
 800b28a:	b944      	cbnz	r4, 800b29e <__gethex+0x9a>
 800b28c:	1c74      	adds	r4, r6, #1
 800b28e:	4622      	mov	r2, r4
 800b290:	4616      	mov	r6, r2
 800b292:	3201      	adds	r2, #1
 800b294:	7830      	ldrb	r0, [r6, #0]
 800b296:	f7ff ff9f 	bl	800b1d8 <__hexdig_fun>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d1f8      	bne.n	800b290 <__gethex+0x8c>
 800b29e:	1ba4      	subs	r4, r4, r6
 800b2a0:	00a7      	lsls	r7, r4, #2
 800b2a2:	7833      	ldrb	r3, [r6, #0]
 800b2a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b2a8:	2b50      	cmp	r3, #80	@ 0x50
 800b2aa:	d13e      	bne.n	800b32a <__gethex+0x126>
 800b2ac:	7873      	ldrb	r3, [r6, #1]
 800b2ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800b2b0:	d033      	beq.n	800b31a <__gethex+0x116>
 800b2b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b2b4:	d034      	beq.n	800b320 <__gethex+0x11c>
 800b2b6:	1c71      	adds	r1, r6, #1
 800b2b8:	2400      	movs	r4, #0
 800b2ba:	7808      	ldrb	r0, [r1, #0]
 800b2bc:	f7ff ff8c 	bl	800b1d8 <__hexdig_fun>
 800b2c0:	1e43      	subs	r3, r0, #1
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b18      	cmp	r3, #24
 800b2c6:	d830      	bhi.n	800b32a <__gethex+0x126>
 800b2c8:	f1a0 0210 	sub.w	r2, r0, #16
 800b2cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2d0:	f7ff ff82 	bl	800b1d8 <__hexdig_fun>
 800b2d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b2d8:	fa5f fc8c 	uxtb.w	ip, ip
 800b2dc:	f1bc 0f18 	cmp.w	ip, #24
 800b2e0:	f04f 030a 	mov.w	r3, #10
 800b2e4:	d91e      	bls.n	800b324 <__gethex+0x120>
 800b2e6:	b104      	cbz	r4, 800b2ea <__gethex+0xe6>
 800b2e8:	4252      	negs	r2, r2
 800b2ea:	4417      	add	r7, r2
 800b2ec:	f8ca 1000 	str.w	r1, [sl]
 800b2f0:	b1ed      	cbz	r5, 800b32e <__gethex+0x12a>
 800b2f2:	f1bb 0f00 	cmp.w	fp, #0
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2506      	moveq	r5, #6
 800b2fa:	2500      	movne	r5, #0
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	b005      	add	sp, #20
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	2500      	movs	r5, #0
 800b306:	462c      	mov	r4, r5
 800b308:	e7b0      	b.n	800b26c <__gethex+0x68>
 800b30a:	2c00      	cmp	r4, #0
 800b30c:	d1c7      	bne.n	800b29e <__gethex+0x9a>
 800b30e:	4627      	mov	r7, r4
 800b310:	e7c7      	b.n	800b2a2 <__gethex+0x9e>
 800b312:	464e      	mov	r6, r9
 800b314:	462f      	mov	r7, r5
 800b316:	2501      	movs	r5, #1
 800b318:	e7c3      	b.n	800b2a2 <__gethex+0x9e>
 800b31a:	2400      	movs	r4, #0
 800b31c:	1cb1      	adds	r1, r6, #2
 800b31e:	e7cc      	b.n	800b2ba <__gethex+0xb6>
 800b320:	2401      	movs	r4, #1
 800b322:	e7fb      	b.n	800b31c <__gethex+0x118>
 800b324:	fb03 0002 	mla	r0, r3, r2, r0
 800b328:	e7ce      	b.n	800b2c8 <__gethex+0xc4>
 800b32a:	4631      	mov	r1, r6
 800b32c:	e7de      	b.n	800b2ec <__gethex+0xe8>
 800b32e:	eba6 0309 	sub.w	r3, r6, r9
 800b332:	3b01      	subs	r3, #1
 800b334:	4629      	mov	r1, r5
 800b336:	2b07      	cmp	r3, #7
 800b338:	dc0a      	bgt.n	800b350 <__gethex+0x14c>
 800b33a:	9801      	ldr	r0, [sp, #4]
 800b33c:	f7fe f93c 	bl	80095b8 <_Balloc>
 800b340:	4604      	mov	r4, r0
 800b342:	b940      	cbnz	r0, 800b356 <__gethex+0x152>
 800b344:	4b5c      	ldr	r3, [pc, #368]	@ (800b4b8 <__gethex+0x2b4>)
 800b346:	4602      	mov	r2, r0
 800b348:	21e4      	movs	r1, #228	@ 0xe4
 800b34a:	485c      	ldr	r0, [pc, #368]	@ (800b4bc <__gethex+0x2b8>)
 800b34c:	f7ff fec0 	bl	800b0d0 <__assert_func>
 800b350:	3101      	adds	r1, #1
 800b352:	105b      	asrs	r3, r3, #1
 800b354:	e7ef      	b.n	800b336 <__gethex+0x132>
 800b356:	f100 0a14 	add.w	sl, r0, #20
 800b35a:	2300      	movs	r3, #0
 800b35c:	4655      	mov	r5, sl
 800b35e:	469b      	mov	fp, r3
 800b360:	45b1      	cmp	r9, r6
 800b362:	d337      	bcc.n	800b3d4 <__gethex+0x1d0>
 800b364:	f845 bb04 	str.w	fp, [r5], #4
 800b368:	eba5 050a 	sub.w	r5, r5, sl
 800b36c:	10ad      	asrs	r5, r5, #2
 800b36e:	6125      	str	r5, [r4, #16]
 800b370:	4658      	mov	r0, fp
 800b372:	f7fe fa13 	bl	800979c <__hi0bits>
 800b376:	016d      	lsls	r5, r5, #5
 800b378:	f8d8 6000 	ldr.w	r6, [r8]
 800b37c:	1a2d      	subs	r5, r5, r0
 800b37e:	42b5      	cmp	r5, r6
 800b380:	dd54      	ble.n	800b42c <__gethex+0x228>
 800b382:	1bad      	subs	r5, r5, r6
 800b384:	4629      	mov	r1, r5
 800b386:	4620      	mov	r0, r4
 800b388:	f7fe fda7 	bl	8009eda <__any_on>
 800b38c:	4681      	mov	r9, r0
 800b38e:	b178      	cbz	r0, 800b3b0 <__gethex+0x1ac>
 800b390:	1e6b      	subs	r3, r5, #1
 800b392:	1159      	asrs	r1, r3, #5
 800b394:	f003 021f 	and.w	r2, r3, #31
 800b398:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b39c:	f04f 0901 	mov.w	r9, #1
 800b3a0:	fa09 f202 	lsl.w	r2, r9, r2
 800b3a4:	420a      	tst	r2, r1
 800b3a6:	d003      	beq.n	800b3b0 <__gethex+0x1ac>
 800b3a8:	454b      	cmp	r3, r9
 800b3aa:	dc36      	bgt.n	800b41a <__gethex+0x216>
 800b3ac:	f04f 0902 	mov.w	r9, #2
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f7ff febe 	bl	800b134 <rshift>
 800b3b8:	442f      	add	r7, r5
 800b3ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3be:	42bb      	cmp	r3, r7
 800b3c0:	da42      	bge.n	800b448 <__gethex+0x244>
 800b3c2:	9801      	ldr	r0, [sp, #4]
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	f7fe f937 	bl	8009638 <_Bfree>
 800b3ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	25a3      	movs	r5, #163	@ 0xa3
 800b3d2:	e793      	b.n	800b2fc <__gethex+0xf8>
 800b3d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b3d8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b3da:	d012      	beq.n	800b402 <__gethex+0x1fe>
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d104      	bne.n	800b3ea <__gethex+0x1e6>
 800b3e0:	f845 bb04 	str.w	fp, [r5], #4
 800b3e4:	f04f 0b00 	mov.w	fp, #0
 800b3e8:	465b      	mov	r3, fp
 800b3ea:	7830      	ldrb	r0, [r6, #0]
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	f7ff fef3 	bl	800b1d8 <__hexdig_fun>
 800b3f2:	9b03      	ldr	r3, [sp, #12]
 800b3f4:	f000 000f 	and.w	r0, r0, #15
 800b3f8:	4098      	lsls	r0, r3
 800b3fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800b3fe:	3304      	adds	r3, #4
 800b400:	e7ae      	b.n	800b360 <__gethex+0x15c>
 800b402:	45b1      	cmp	r9, r6
 800b404:	d8ea      	bhi.n	800b3dc <__gethex+0x1d8>
 800b406:	492b      	ldr	r1, [pc, #172]	@ (800b4b4 <__gethex+0x2b0>)
 800b408:	9303      	str	r3, [sp, #12]
 800b40a:	2201      	movs	r2, #1
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7ff fe27 	bl	800b060 <strncmp>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	2800      	cmp	r0, #0
 800b416:	d1e1      	bne.n	800b3dc <__gethex+0x1d8>
 800b418:	e7a2      	b.n	800b360 <__gethex+0x15c>
 800b41a:	1ea9      	subs	r1, r5, #2
 800b41c:	4620      	mov	r0, r4
 800b41e:	f7fe fd5c 	bl	8009eda <__any_on>
 800b422:	2800      	cmp	r0, #0
 800b424:	d0c2      	beq.n	800b3ac <__gethex+0x1a8>
 800b426:	f04f 0903 	mov.w	r9, #3
 800b42a:	e7c1      	b.n	800b3b0 <__gethex+0x1ac>
 800b42c:	da09      	bge.n	800b442 <__gethex+0x23e>
 800b42e:	1b75      	subs	r5, r6, r5
 800b430:	4621      	mov	r1, r4
 800b432:	9801      	ldr	r0, [sp, #4]
 800b434:	462a      	mov	r2, r5
 800b436:	f7fe fb17 	bl	8009a68 <__lshift>
 800b43a:	1b7f      	subs	r7, r7, r5
 800b43c:	4604      	mov	r4, r0
 800b43e:	f100 0a14 	add.w	sl, r0, #20
 800b442:	f04f 0900 	mov.w	r9, #0
 800b446:	e7b8      	b.n	800b3ba <__gethex+0x1b6>
 800b448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b44c:	42bd      	cmp	r5, r7
 800b44e:	dd6f      	ble.n	800b530 <__gethex+0x32c>
 800b450:	1bed      	subs	r5, r5, r7
 800b452:	42ae      	cmp	r6, r5
 800b454:	dc34      	bgt.n	800b4c0 <__gethex+0x2bc>
 800b456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d022      	beq.n	800b4a4 <__gethex+0x2a0>
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d024      	beq.n	800b4ac <__gethex+0x2a8>
 800b462:	2b01      	cmp	r3, #1
 800b464:	d115      	bne.n	800b492 <__gethex+0x28e>
 800b466:	42ae      	cmp	r6, r5
 800b468:	d113      	bne.n	800b492 <__gethex+0x28e>
 800b46a:	2e01      	cmp	r6, #1
 800b46c:	d10b      	bne.n	800b486 <__gethex+0x282>
 800b46e:	9a02      	ldr	r2, [sp, #8]
 800b470:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	2301      	movs	r3, #1
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	f8ca 3000 	str.w	r3, [sl]
 800b47e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b480:	2562      	movs	r5, #98	@ 0x62
 800b482:	601c      	str	r4, [r3, #0]
 800b484:	e73a      	b.n	800b2fc <__gethex+0xf8>
 800b486:	1e71      	subs	r1, r6, #1
 800b488:	4620      	mov	r0, r4
 800b48a:	f7fe fd26 	bl	8009eda <__any_on>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d1ed      	bne.n	800b46e <__gethex+0x26a>
 800b492:	9801      	ldr	r0, [sp, #4]
 800b494:	4621      	mov	r1, r4
 800b496:	f7fe f8cf 	bl	8009638 <_Bfree>
 800b49a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b49c:	2300      	movs	r3, #0
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	2550      	movs	r5, #80	@ 0x50
 800b4a2:	e72b      	b.n	800b2fc <__gethex+0xf8>
 800b4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1f3      	bne.n	800b492 <__gethex+0x28e>
 800b4aa:	e7e0      	b.n	800b46e <__gethex+0x26a>
 800b4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1dd      	bne.n	800b46e <__gethex+0x26a>
 800b4b2:	e7ee      	b.n	800b492 <__gethex+0x28e>
 800b4b4:	0800c078 	.word	0x0800c078
 800b4b8:	0800bf11 	.word	0x0800bf11
 800b4bc:	0800c226 	.word	0x0800c226
 800b4c0:	1e6f      	subs	r7, r5, #1
 800b4c2:	f1b9 0f00 	cmp.w	r9, #0
 800b4c6:	d130      	bne.n	800b52a <__gethex+0x326>
 800b4c8:	b127      	cbz	r7, 800b4d4 <__gethex+0x2d0>
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f7fe fd04 	bl	8009eda <__any_on>
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	117a      	asrs	r2, r7, #5
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b4dc:	f007 071f 	and.w	r7, r7, #31
 800b4e0:	40bb      	lsls	r3, r7
 800b4e2:	4213      	tst	r3, r2
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	bf18      	it	ne
 800b4ea:	f049 0902 	orrne.w	r9, r9, #2
 800b4ee:	f7ff fe21 	bl	800b134 <rshift>
 800b4f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b4f6:	1b76      	subs	r6, r6, r5
 800b4f8:	2502      	movs	r5, #2
 800b4fa:	f1b9 0f00 	cmp.w	r9, #0
 800b4fe:	d047      	beq.n	800b590 <__gethex+0x38c>
 800b500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d015      	beq.n	800b534 <__gethex+0x330>
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d017      	beq.n	800b53c <__gethex+0x338>
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d109      	bne.n	800b524 <__gethex+0x320>
 800b510:	f019 0f02 	tst.w	r9, #2
 800b514:	d006      	beq.n	800b524 <__gethex+0x320>
 800b516:	f8da 3000 	ldr.w	r3, [sl]
 800b51a:	ea49 0903 	orr.w	r9, r9, r3
 800b51e:	f019 0f01 	tst.w	r9, #1
 800b522:	d10e      	bne.n	800b542 <__gethex+0x33e>
 800b524:	f045 0510 	orr.w	r5, r5, #16
 800b528:	e032      	b.n	800b590 <__gethex+0x38c>
 800b52a:	f04f 0901 	mov.w	r9, #1
 800b52e:	e7d1      	b.n	800b4d4 <__gethex+0x2d0>
 800b530:	2501      	movs	r5, #1
 800b532:	e7e2      	b.n	800b4fa <__gethex+0x2f6>
 800b534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b536:	f1c3 0301 	rsb	r3, r3, #1
 800b53a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0f0      	beq.n	800b524 <__gethex+0x320>
 800b542:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b546:	f104 0314 	add.w	r3, r4, #20
 800b54a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b54e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b552:	f04f 0c00 	mov.w	ip, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f853 2b04 	ldr.w	r2, [r3], #4
 800b55c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b560:	d01b      	beq.n	800b59a <__gethex+0x396>
 800b562:	3201      	adds	r2, #1
 800b564:	6002      	str	r2, [r0, #0]
 800b566:	2d02      	cmp	r5, #2
 800b568:	f104 0314 	add.w	r3, r4, #20
 800b56c:	d13c      	bne.n	800b5e8 <__gethex+0x3e4>
 800b56e:	f8d8 2000 	ldr.w	r2, [r8]
 800b572:	3a01      	subs	r2, #1
 800b574:	42b2      	cmp	r2, r6
 800b576:	d109      	bne.n	800b58c <__gethex+0x388>
 800b578:	1171      	asrs	r1, r6, #5
 800b57a:	2201      	movs	r2, #1
 800b57c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b580:	f006 061f 	and.w	r6, r6, #31
 800b584:	fa02 f606 	lsl.w	r6, r2, r6
 800b588:	421e      	tst	r6, r3
 800b58a:	d13a      	bne.n	800b602 <__gethex+0x3fe>
 800b58c:	f045 0520 	orr.w	r5, r5, #32
 800b590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b592:	601c      	str	r4, [r3, #0]
 800b594:	9b02      	ldr	r3, [sp, #8]
 800b596:	601f      	str	r7, [r3, #0]
 800b598:	e6b0      	b.n	800b2fc <__gethex+0xf8>
 800b59a:	4299      	cmp	r1, r3
 800b59c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5a0:	d8d9      	bhi.n	800b556 <__gethex+0x352>
 800b5a2:	68a3      	ldr	r3, [r4, #8]
 800b5a4:	459b      	cmp	fp, r3
 800b5a6:	db17      	blt.n	800b5d8 <__gethex+0x3d4>
 800b5a8:	6861      	ldr	r1, [r4, #4]
 800b5aa:	9801      	ldr	r0, [sp, #4]
 800b5ac:	3101      	adds	r1, #1
 800b5ae:	f7fe f803 	bl	80095b8 <_Balloc>
 800b5b2:	4681      	mov	r9, r0
 800b5b4:	b918      	cbnz	r0, 800b5be <__gethex+0x3ba>
 800b5b6:	4b1a      	ldr	r3, [pc, #104]	@ (800b620 <__gethex+0x41c>)
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	2184      	movs	r1, #132	@ 0x84
 800b5bc:	e6c5      	b.n	800b34a <__gethex+0x146>
 800b5be:	6922      	ldr	r2, [r4, #16]
 800b5c0:	3202      	adds	r2, #2
 800b5c2:	f104 010c 	add.w	r1, r4, #12
 800b5c6:	0092      	lsls	r2, r2, #2
 800b5c8:	300c      	adds	r0, #12
 800b5ca:	f7ff fd6b 	bl	800b0a4 <memcpy>
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	9801      	ldr	r0, [sp, #4]
 800b5d2:	f7fe f831 	bl	8009638 <_Bfree>
 800b5d6:	464c      	mov	r4, r9
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5e0:	6122      	str	r2, [r4, #16]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	615a      	str	r2, [r3, #20]
 800b5e6:	e7be      	b.n	800b566 <__gethex+0x362>
 800b5e8:	6922      	ldr	r2, [r4, #16]
 800b5ea:	455a      	cmp	r2, fp
 800b5ec:	dd0b      	ble.n	800b606 <__gethex+0x402>
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f7ff fd9f 	bl	800b134 <rshift>
 800b5f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5fa:	3701      	adds	r7, #1
 800b5fc:	42bb      	cmp	r3, r7
 800b5fe:	f6ff aee0 	blt.w	800b3c2 <__gethex+0x1be>
 800b602:	2501      	movs	r5, #1
 800b604:	e7c2      	b.n	800b58c <__gethex+0x388>
 800b606:	f016 061f 	ands.w	r6, r6, #31
 800b60a:	d0fa      	beq.n	800b602 <__gethex+0x3fe>
 800b60c:	4453      	add	r3, sl
 800b60e:	f1c6 0620 	rsb	r6, r6, #32
 800b612:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b616:	f7fe f8c1 	bl	800979c <__hi0bits>
 800b61a:	42b0      	cmp	r0, r6
 800b61c:	dbe7      	blt.n	800b5ee <__gethex+0x3ea>
 800b61e:	e7f0      	b.n	800b602 <__gethex+0x3fe>
 800b620:	0800bf11 	.word	0x0800bf11

0800b624 <L_shift>:
 800b624:	f1c2 0208 	rsb	r2, r2, #8
 800b628:	0092      	lsls	r2, r2, #2
 800b62a:	b570      	push	{r4, r5, r6, lr}
 800b62c:	f1c2 0620 	rsb	r6, r2, #32
 800b630:	6843      	ldr	r3, [r0, #4]
 800b632:	6804      	ldr	r4, [r0, #0]
 800b634:	fa03 f506 	lsl.w	r5, r3, r6
 800b638:	432c      	orrs	r4, r5
 800b63a:	40d3      	lsrs	r3, r2
 800b63c:	6004      	str	r4, [r0, #0]
 800b63e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b642:	4288      	cmp	r0, r1
 800b644:	d3f4      	bcc.n	800b630 <L_shift+0xc>
 800b646:	bd70      	pop	{r4, r5, r6, pc}

0800b648 <__match>:
 800b648:	b530      	push	{r4, r5, lr}
 800b64a:	6803      	ldr	r3, [r0, #0]
 800b64c:	3301      	adds	r3, #1
 800b64e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b652:	b914      	cbnz	r4, 800b65a <__match+0x12>
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	2001      	movs	r0, #1
 800b658:	bd30      	pop	{r4, r5, pc}
 800b65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b65e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b662:	2d19      	cmp	r5, #25
 800b664:	bf98      	it	ls
 800b666:	3220      	addls	r2, #32
 800b668:	42a2      	cmp	r2, r4
 800b66a:	d0f0      	beq.n	800b64e <__match+0x6>
 800b66c:	2000      	movs	r0, #0
 800b66e:	e7f3      	b.n	800b658 <__match+0x10>

0800b670 <__hexnan>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	680b      	ldr	r3, [r1, #0]
 800b676:	6801      	ldr	r1, [r0, #0]
 800b678:	115e      	asrs	r6, r3, #5
 800b67a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b67e:	f013 031f 	ands.w	r3, r3, #31
 800b682:	b087      	sub	sp, #28
 800b684:	bf18      	it	ne
 800b686:	3604      	addne	r6, #4
 800b688:	2500      	movs	r5, #0
 800b68a:	1f37      	subs	r7, r6, #4
 800b68c:	4682      	mov	sl, r0
 800b68e:	4690      	mov	r8, r2
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	f846 5c04 	str.w	r5, [r6, #-4]
 800b696:	46b9      	mov	r9, r7
 800b698:	463c      	mov	r4, r7
 800b69a:	9502      	str	r5, [sp, #8]
 800b69c:	46ab      	mov	fp, r5
 800b69e:	784a      	ldrb	r2, [r1, #1]
 800b6a0:	1c4b      	adds	r3, r1, #1
 800b6a2:	9303      	str	r3, [sp, #12]
 800b6a4:	b342      	cbz	r2, 800b6f8 <__hexnan+0x88>
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	9105      	str	r1, [sp, #20]
 800b6aa:	9204      	str	r2, [sp, #16]
 800b6ac:	f7ff fd94 	bl	800b1d8 <__hexdig_fun>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d151      	bne.n	800b758 <__hexnan+0xe8>
 800b6b4:	9a04      	ldr	r2, [sp, #16]
 800b6b6:	9905      	ldr	r1, [sp, #20]
 800b6b8:	2a20      	cmp	r2, #32
 800b6ba:	d818      	bhi.n	800b6ee <__hexnan+0x7e>
 800b6bc:	9b02      	ldr	r3, [sp, #8]
 800b6be:	459b      	cmp	fp, r3
 800b6c0:	dd13      	ble.n	800b6ea <__hexnan+0x7a>
 800b6c2:	454c      	cmp	r4, r9
 800b6c4:	d206      	bcs.n	800b6d4 <__hexnan+0x64>
 800b6c6:	2d07      	cmp	r5, #7
 800b6c8:	dc04      	bgt.n	800b6d4 <__hexnan+0x64>
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f7ff ffa8 	bl	800b624 <L_shift>
 800b6d4:	4544      	cmp	r4, r8
 800b6d6:	d952      	bls.n	800b77e <__hexnan+0x10e>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f1a4 0904 	sub.w	r9, r4, #4
 800b6de:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6e2:	f8cd b008 	str.w	fp, [sp, #8]
 800b6e6:	464c      	mov	r4, r9
 800b6e8:	461d      	mov	r5, r3
 800b6ea:	9903      	ldr	r1, [sp, #12]
 800b6ec:	e7d7      	b.n	800b69e <__hexnan+0x2e>
 800b6ee:	2a29      	cmp	r2, #41	@ 0x29
 800b6f0:	d157      	bne.n	800b7a2 <__hexnan+0x132>
 800b6f2:	3102      	adds	r1, #2
 800b6f4:	f8ca 1000 	str.w	r1, [sl]
 800b6f8:	f1bb 0f00 	cmp.w	fp, #0
 800b6fc:	d051      	beq.n	800b7a2 <__hexnan+0x132>
 800b6fe:	454c      	cmp	r4, r9
 800b700:	d206      	bcs.n	800b710 <__hexnan+0xa0>
 800b702:	2d07      	cmp	r5, #7
 800b704:	dc04      	bgt.n	800b710 <__hexnan+0xa0>
 800b706:	462a      	mov	r2, r5
 800b708:	4649      	mov	r1, r9
 800b70a:	4620      	mov	r0, r4
 800b70c:	f7ff ff8a 	bl	800b624 <L_shift>
 800b710:	4544      	cmp	r4, r8
 800b712:	d936      	bls.n	800b782 <__hexnan+0x112>
 800b714:	f1a8 0204 	sub.w	r2, r8, #4
 800b718:	4623      	mov	r3, r4
 800b71a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b71e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b722:	429f      	cmp	r7, r3
 800b724:	d2f9      	bcs.n	800b71a <__hexnan+0xaa>
 800b726:	1b3b      	subs	r3, r7, r4
 800b728:	f023 0303 	bic.w	r3, r3, #3
 800b72c:	3304      	adds	r3, #4
 800b72e:	3401      	adds	r4, #1
 800b730:	3e03      	subs	r6, #3
 800b732:	42b4      	cmp	r4, r6
 800b734:	bf88      	it	hi
 800b736:	2304      	movhi	r3, #4
 800b738:	4443      	add	r3, r8
 800b73a:	2200      	movs	r2, #0
 800b73c:	f843 2b04 	str.w	r2, [r3], #4
 800b740:	429f      	cmp	r7, r3
 800b742:	d2fb      	bcs.n	800b73c <__hexnan+0xcc>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	b91b      	cbnz	r3, 800b750 <__hexnan+0xe0>
 800b748:	4547      	cmp	r7, r8
 800b74a:	d128      	bne.n	800b79e <__hexnan+0x12e>
 800b74c:	2301      	movs	r3, #1
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	2005      	movs	r0, #5
 800b752:	b007      	add	sp, #28
 800b754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b758:	3501      	adds	r5, #1
 800b75a:	2d08      	cmp	r5, #8
 800b75c:	f10b 0b01 	add.w	fp, fp, #1
 800b760:	dd06      	ble.n	800b770 <__hexnan+0x100>
 800b762:	4544      	cmp	r4, r8
 800b764:	d9c1      	bls.n	800b6ea <__hexnan+0x7a>
 800b766:	2300      	movs	r3, #0
 800b768:	f844 3c04 	str.w	r3, [r4, #-4]
 800b76c:	2501      	movs	r5, #1
 800b76e:	3c04      	subs	r4, #4
 800b770:	6822      	ldr	r2, [r4, #0]
 800b772:	f000 000f 	and.w	r0, r0, #15
 800b776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b77a:	6020      	str	r0, [r4, #0]
 800b77c:	e7b5      	b.n	800b6ea <__hexnan+0x7a>
 800b77e:	2508      	movs	r5, #8
 800b780:	e7b3      	b.n	800b6ea <__hexnan+0x7a>
 800b782:	9b01      	ldr	r3, [sp, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0dd      	beq.n	800b744 <__hexnan+0xd4>
 800b788:	f1c3 0320 	rsb	r3, r3, #32
 800b78c:	f04f 32ff 	mov.w	r2, #4294967295
 800b790:	40da      	lsrs	r2, r3
 800b792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b796:	4013      	ands	r3, r2
 800b798:	f846 3c04 	str.w	r3, [r6, #-4]
 800b79c:	e7d2      	b.n	800b744 <__hexnan+0xd4>
 800b79e:	3f04      	subs	r7, #4
 800b7a0:	e7d0      	b.n	800b744 <__hexnan+0xd4>
 800b7a2:	2004      	movs	r0, #4
 800b7a4:	e7d5      	b.n	800b752 <__hexnan+0xe2>

0800b7a6 <__ascii_mbtowc>:
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	b901      	cbnz	r1, 800b7ac <__ascii_mbtowc+0x6>
 800b7aa:	a901      	add	r1, sp, #4
 800b7ac:	b142      	cbz	r2, 800b7c0 <__ascii_mbtowc+0x1a>
 800b7ae:	b14b      	cbz	r3, 800b7c4 <__ascii_mbtowc+0x1e>
 800b7b0:	7813      	ldrb	r3, [r2, #0]
 800b7b2:	600b      	str	r3, [r1, #0]
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	1e10      	subs	r0, r2, #0
 800b7b8:	bf18      	it	ne
 800b7ba:	2001      	movne	r0, #1
 800b7bc:	b002      	add	sp, #8
 800b7be:	4770      	bx	lr
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	e7fb      	b.n	800b7bc <__ascii_mbtowc+0x16>
 800b7c4:	f06f 0001 	mvn.w	r0, #1
 800b7c8:	e7f8      	b.n	800b7bc <__ascii_mbtowc+0x16>

0800b7ca <_realloc_r>:
 800b7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	4615      	mov	r5, r2
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	b921      	cbnz	r1, 800b7e0 <_realloc_r+0x16>
 800b7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7da:	4611      	mov	r1, r2
 800b7dc:	f7fd be60 	b.w	80094a0 <_malloc_r>
 800b7e0:	b92a      	cbnz	r2, 800b7ee <_realloc_r+0x24>
 800b7e2:	f7fd fde9 	bl	80093b8 <_free_r>
 800b7e6:	2400      	movs	r4, #0
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ee:	f000 f840 	bl	800b872 <_malloc_usable_size_r>
 800b7f2:	4285      	cmp	r5, r0
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	d802      	bhi.n	800b7fe <_realloc_r+0x34>
 800b7f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7fc:	d8f4      	bhi.n	800b7e8 <_realloc_r+0x1e>
 800b7fe:	4629      	mov	r1, r5
 800b800:	4640      	mov	r0, r8
 800b802:	f7fd fe4d 	bl	80094a0 <_malloc_r>
 800b806:	4607      	mov	r7, r0
 800b808:	2800      	cmp	r0, #0
 800b80a:	d0ec      	beq.n	800b7e6 <_realloc_r+0x1c>
 800b80c:	42b5      	cmp	r5, r6
 800b80e:	462a      	mov	r2, r5
 800b810:	4621      	mov	r1, r4
 800b812:	bf28      	it	cs
 800b814:	4632      	movcs	r2, r6
 800b816:	f7ff fc45 	bl	800b0a4 <memcpy>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4640      	mov	r0, r8
 800b81e:	f7fd fdcb 	bl	80093b8 <_free_r>
 800b822:	463c      	mov	r4, r7
 800b824:	e7e0      	b.n	800b7e8 <_realloc_r+0x1e>

0800b826 <__ascii_wctomb>:
 800b826:	4603      	mov	r3, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	b141      	cbz	r1, 800b83e <__ascii_wctomb+0x18>
 800b82c:	2aff      	cmp	r2, #255	@ 0xff
 800b82e:	d904      	bls.n	800b83a <__ascii_wctomb+0x14>
 800b830:	228a      	movs	r2, #138	@ 0x8a
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	4770      	bx	lr
 800b83a:	700a      	strb	r2, [r1, #0]
 800b83c:	2001      	movs	r0, #1
 800b83e:	4770      	bx	lr

0800b840 <fiprintf>:
 800b840:	b40e      	push	{r1, r2, r3}
 800b842:	b503      	push	{r0, r1, lr}
 800b844:	4601      	mov	r1, r0
 800b846:	ab03      	add	r3, sp, #12
 800b848:	4805      	ldr	r0, [pc, #20]	@ (800b860 <fiprintf+0x20>)
 800b84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b84e:	6800      	ldr	r0, [r0, #0]
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	f000 f83f 	bl	800b8d4 <_vfiprintf_r>
 800b856:	b002      	add	sp, #8
 800b858:	f85d eb04 	ldr.w	lr, [sp], #4
 800b85c:	b003      	add	sp, #12
 800b85e:	4770      	bx	lr
 800b860:	20000030 	.word	0x20000030

0800b864 <abort>:
 800b864:	b508      	push	{r3, lr}
 800b866:	2006      	movs	r0, #6
 800b868:	f000 fa08 	bl	800bc7c <raise>
 800b86c:	2001      	movs	r0, #1
 800b86e:	f7f6 f8c7 	bl	8001a00 <_exit>

0800b872 <_malloc_usable_size_r>:
 800b872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b876:	1f18      	subs	r0, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	bfbc      	itt	lt
 800b87c:	580b      	ldrlt	r3, [r1, r0]
 800b87e:	18c0      	addlt	r0, r0, r3
 800b880:	4770      	bx	lr

0800b882 <__sfputc_r>:
 800b882:	6893      	ldr	r3, [r2, #8]
 800b884:	3b01      	subs	r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	b410      	push	{r4}
 800b88a:	6093      	str	r3, [r2, #8]
 800b88c:	da08      	bge.n	800b8a0 <__sfputc_r+0x1e>
 800b88e:	6994      	ldr	r4, [r2, #24]
 800b890:	42a3      	cmp	r3, r4
 800b892:	db01      	blt.n	800b898 <__sfputc_r+0x16>
 800b894:	290a      	cmp	r1, #10
 800b896:	d103      	bne.n	800b8a0 <__sfputc_r+0x1e>
 800b898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b89c:	f000 b932 	b.w	800bb04 <__swbuf_r>
 800b8a0:	6813      	ldr	r3, [r2, #0]
 800b8a2:	1c58      	adds	r0, r3, #1
 800b8a4:	6010      	str	r0, [r2, #0]
 800b8a6:	7019      	strb	r1, [r3, #0]
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <__sfputs_r>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	460f      	mov	r7, r1
 800b8b6:	4614      	mov	r4, r2
 800b8b8:	18d5      	adds	r5, r2, r3
 800b8ba:	42ac      	cmp	r4, r5
 800b8bc:	d101      	bne.n	800b8c2 <__sfputs_r+0x12>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	e007      	b.n	800b8d2 <__sfputs_r+0x22>
 800b8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c6:	463a      	mov	r2, r7
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7ff ffda 	bl	800b882 <__sfputc_r>
 800b8ce:	1c43      	adds	r3, r0, #1
 800b8d0:	d1f3      	bne.n	800b8ba <__sfputs_r+0xa>
 800b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8d4 <_vfiprintf_r>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	460d      	mov	r5, r1
 800b8da:	b09d      	sub	sp, #116	@ 0x74
 800b8dc:	4614      	mov	r4, r2
 800b8de:	4698      	mov	r8, r3
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	b118      	cbz	r0, 800b8ec <_vfiprintf_r+0x18>
 800b8e4:	6a03      	ldr	r3, [r0, #32]
 800b8e6:	b90b      	cbnz	r3, 800b8ec <_vfiprintf_r+0x18>
 800b8e8:	f7fc fdc6 	bl	8008478 <__sinit>
 800b8ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ee:	07d9      	lsls	r1, r3, #31
 800b8f0:	d405      	bmi.n	800b8fe <_vfiprintf_r+0x2a>
 800b8f2:	89ab      	ldrh	r3, [r5, #12]
 800b8f4:	059a      	lsls	r2, r3, #22
 800b8f6:	d402      	bmi.n	800b8fe <_vfiprintf_r+0x2a>
 800b8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8fa:	f7fc ff08 	bl	800870e <__retarget_lock_acquire_recursive>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	071b      	lsls	r3, r3, #28
 800b902:	d501      	bpl.n	800b908 <_vfiprintf_r+0x34>
 800b904:	692b      	ldr	r3, [r5, #16]
 800b906:	b99b      	cbnz	r3, 800b930 <_vfiprintf_r+0x5c>
 800b908:	4629      	mov	r1, r5
 800b90a:	4630      	mov	r0, r6
 800b90c:	f000 f938 	bl	800bb80 <__swsetup_r>
 800b910:	b170      	cbz	r0, 800b930 <_vfiprintf_r+0x5c>
 800b912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b914:	07dc      	lsls	r4, r3, #31
 800b916:	d504      	bpl.n	800b922 <_vfiprintf_r+0x4e>
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	b01d      	add	sp, #116	@ 0x74
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	0598      	lsls	r0, r3, #22
 800b926:	d4f7      	bmi.n	800b918 <_vfiprintf_r+0x44>
 800b928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b92a:	f7fc fef1 	bl	8008710 <__retarget_lock_release_recursive>
 800b92e:	e7f3      	b.n	800b918 <_vfiprintf_r+0x44>
 800b930:	2300      	movs	r3, #0
 800b932:	9309      	str	r3, [sp, #36]	@ 0x24
 800b934:	2320      	movs	r3, #32
 800b936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b93e:	2330      	movs	r3, #48	@ 0x30
 800b940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800baf0 <_vfiprintf_r+0x21c>
 800b944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b948:	f04f 0901 	mov.w	r9, #1
 800b94c:	4623      	mov	r3, r4
 800b94e:	469a      	mov	sl, r3
 800b950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b954:	b10a      	cbz	r2, 800b95a <_vfiprintf_r+0x86>
 800b956:	2a25      	cmp	r2, #37	@ 0x25
 800b958:	d1f9      	bne.n	800b94e <_vfiprintf_r+0x7a>
 800b95a:	ebba 0b04 	subs.w	fp, sl, r4
 800b95e:	d00b      	beq.n	800b978 <_vfiprintf_r+0xa4>
 800b960:	465b      	mov	r3, fp
 800b962:	4622      	mov	r2, r4
 800b964:	4629      	mov	r1, r5
 800b966:	4630      	mov	r0, r6
 800b968:	f7ff ffa2 	bl	800b8b0 <__sfputs_r>
 800b96c:	3001      	adds	r0, #1
 800b96e:	f000 80a7 	beq.w	800bac0 <_vfiprintf_r+0x1ec>
 800b972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b974:	445a      	add	r2, fp
 800b976:	9209      	str	r2, [sp, #36]	@ 0x24
 800b978:	f89a 3000 	ldrb.w	r3, [sl]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 809f 	beq.w	800bac0 <_vfiprintf_r+0x1ec>
 800b982:	2300      	movs	r3, #0
 800b984:	f04f 32ff 	mov.w	r2, #4294967295
 800b988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b98c:	f10a 0a01 	add.w	sl, sl, #1
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	9307      	str	r3, [sp, #28]
 800b994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b998:	931a      	str	r3, [sp, #104]	@ 0x68
 800b99a:	4654      	mov	r4, sl
 800b99c:	2205      	movs	r2, #5
 800b99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a2:	4853      	ldr	r0, [pc, #332]	@ (800baf0 <_vfiprintf_r+0x21c>)
 800b9a4:	f7f4 fc1c 	bl	80001e0 <memchr>
 800b9a8:	9a04      	ldr	r2, [sp, #16]
 800b9aa:	b9d8      	cbnz	r0, 800b9e4 <_vfiprintf_r+0x110>
 800b9ac:	06d1      	lsls	r1, r2, #27
 800b9ae:	bf44      	itt	mi
 800b9b0:	2320      	movmi	r3, #32
 800b9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9b6:	0713      	lsls	r3, r2, #28
 800b9b8:	bf44      	itt	mi
 800b9ba:	232b      	movmi	r3, #43	@ 0x2b
 800b9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9c6:	d015      	beq.n	800b9f4 <_vfiprintf_r+0x120>
 800b9c8:	9a07      	ldr	r2, [sp, #28]
 800b9ca:	4654      	mov	r4, sl
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	f04f 0c0a 	mov.w	ip, #10
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9d8:	3b30      	subs	r3, #48	@ 0x30
 800b9da:	2b09      	cmp	r3, #9
 800b9dc:	d94b      	bls.n	800ba76 <_vfiprintf_r+0x1a2>
 800b9de:	b1b0      	cbz	r0, 800ba0e <_vfiprintf_r+0x13a>
 800b9e0:	9207      	str	r2, [sp, #28]
 800b9e2:	e014      	b.n	800ba0e <_vfiprintf_r+0x13a>
 800b9e4:	eba0 0308 	sub.w	r3, r0, r8
 800b9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	9304      	str	r3, [sp, #16]
 800b9f0:	46a2      	mov	sl, r4
 800b9f2:	e7d2      	b.n	800b99a <_vfiprintf_r+0xc6>
 800b9f4:	9b03      	ldr	r3, [sp, #12]
 800b9f6:	1d19      	adds	r1, r3, #4
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	9103      	str	r1, [sp, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	bfbb      	ittet	lt
 800ba00:	425b      	neglt	r3, r3
 800ba02:	f042 0202 	orrlt.w	r2, r2, #2
 800ba06:	9307      	strge	r3, [sp, #28]
 800ba08:	9307      	strlt	r3, [sp, #28]
 800ba0a:	bfb8      	it	lt
 800ba0c:	9204      	strlt	r2, [sp, #16]
 800ba0e:	7823      	ldrb	r3, [r4, #0]
 800ba10:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba12:	d10a      	bne.n	800ba2a <_vfiprintf_r+0x156>
 800ba14:	7863      	ldrb	r3, [r4, #1]
 800ba16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba18:	d132      	bne.n	800ba80 <_vfiprintf_r+0x1ac>
 800ba1a:	9b03      	ldr	r3, [sp, #12]
 800ba1c:	1d1a      	adds	r2, r3, #4
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	9203      	str	r2, [sp, #12]
 800ba22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba26:	3402      	adds	r4, #2
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb00 <_vfiprintf_r+0x22c>
 800ba2e:	7821      	ldrb	r1, [r4, #0]
 800ba30:	2203      	movs	r2, #3
 800ba32:	4650      	mov	r0, sl
 800ba34:	f7f4 fbd4 	bl	80001e0 <memchr>
 800ba38:	b138      	cbz	r0, 800ba4a <_vfiprintf_r+0x176>
 800ba3a:	9b04      	ldr	r3, [sp, #16]
 800ba3c:	eba0 000a 	sub.w	r0, r0, sl
 800ba40:	2240      	movs	r2, #64	@ 0x40
 800ba42:	4082      	lsls	r2, r0
 800ba44:	4313      	orrs	r3, r2
 800ba46:	3401      	adds	r4, #1
 800ba48:	9304      	str	r3, [sp, #16]
 800ba4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4e:	4829      	ldr	r0, [pc, #164]	@ (800baf4 <_vfiprintf_r+0x220>)
 800ba50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba54:	2206      	movs	r2, #6
 800ba56:	f7f4 fbc3 	bl	80001e0 <memchr>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d03f      	beq.n	800bade <_vfiprintf_r+0x20a>
 800ba5e:	4b26      	ldr	r3, [pc, #152]	@ (800baf8 <_vfiprintf_r+0x224>)
 800ba60:	bb1b      	cbnz	r3, 800baaa <_vfiprintf_r+0x1d6>
 800ba62:	9b03      	ldr	r3, [sp, #12]
 800ba64:	3307      	adds	r3, #7
 800ba66:	f023 0307 	bic.w	r3, r3, #7
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	9303      	str	r3, [sp, #12]
 800ba6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba70:	443b      	add	r3, r7
 800ba72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba74:	e76a      	b.n	800b94c <_vfiprintf_r+0x78>
 800ba76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	2001      	movs	r0, #1
 800ba7e:	e7a8      	b.n	800b9d2 <_vfiprintf_r+0xfe>
 800ba80:	2300      	movs	r3, #0
 800ba82:	3401      	adds	r4, #1
 800ba84:	9305      	str	r3, [sp, #20]
 800ba86:	4619      	mov	r1, r3
 800ba88:	f04f 0c0a 	mov.w	ip, #10
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba92:	3a30      	subs	r2, #48	@ 0x30
 800ba94:	2a09      	cmp	r2, #9
 800ba96:	d903      	bls.n	800baa0 <_vfiprintf_r+0x1cc>
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0c6      	beq.n	800ba2a <_vfiprintf_r+0x156>
 800ba9c:	9105      	str	r1, [sp, #20]
 800ba9e:	e7c4      	b.n	800ba2a <_vfiprintf_r+0x156>
 800baa0:	fb0c 2101 	mla	r1, ip, r1, r2
 800baa4:	4604      	mov	r4, r0
 800baa6:	2301      	movs	r3, #1
 800baa8:	e7f0      	b.n	800ba8c <_vfiprintf_r+0x1b8>
 800baaa:	ab03      	add	r3, sp, #12
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	462a      	mov	r2, r5
 800bab0:	4b12      	ldr	r3, [pc, #72]	@ (800bafc <_vfiprintf_r+0x228>)
 800bab2:	a904      	add	r1, sp, #16
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7fb fe87 	bl	80077c8 <_printf_float>
 800baba:	4607      	mov	r7, r0
 800babc:	1c78      	adds	r0, r7, #1
 800babe:	d1d6      	bne.n	800ba6e <_vfiprintf_r+0x19a>
 800bac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bac2:	07d9      	lsls	r1, r3, #31
 800bac4:	d405      	bmi.n	800bad2 <_vfiprintf_r+0x1fe>
 800bac6:	89ab      	ldrh	r3, [r5, #12]
 800bac8:	059a      	lsls	r2, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_vfiprintf_r+0x1fe>
 800bacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bace:	f7fc fe1f 	bl	8008710 <__retarget_lock_release_recursive>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	065b      	lsls	r3, r3, #25
 800bad6:	f53f af1f 	bmi.w	800b918 <_vfiprintf_r+0x44>
 800bada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800badc:	e71e      	b.n	800b91c <_vfiprintf_r+0x48>
 800bade:	ab03      	add	r3, sp, #12
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	462a      	mov	r2, r5
 800bae4:	4b05      	ldr	r3, [pc, #20]	@ (800bafc <_vfiprintf_r+0x228>)
 800bae6:	a904      	add	r1, sp, #16
 800bae8:	4630      	mov	r0, r6
 800baea:	f7fc f905 	bl	8007cf8 <_printf_i>
 800baee:	e7e4      	b.n	800baba <_vfiprintf_r+0x1e6>
 800baf0:	0800c1d1 	.word	0x0800c1d1
 800baf4:	0800c1db 	.word	0x0800c1db
 800baf8:	080077c9 	.word	0x080077c9
 800bafc:	0800b8b1 	.word	0x0800b8b1
 800bb00:	0800c1d7 	.word	0x0800c1d7

0800bb04 <__swbuf_r>:
 800bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb06:	460e      	mov	r6, r1
 800bb08:	4614      	mov	r4, r2
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	b118      	cbz	r0, 800bb16 <__swbuf_r+0x12>
 800bb0e:	6a03      	ldr	r3, [r0, #32]
 800bb10:	b90b      	cbnz	r3, 800bb16 <__swbuf_r+0x12>
 800bb12:	f7fc fcb1 	bl	8008478 <__sinit>
 800bb16:	69a3      	ldr	r3, [r4, #24]
 800bb18:	60a3      	str	r3, [r4, #8]
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	071a      	lsls	r2, r3, #28
 800bb1e:	d501      	bpl.n	800bb24 <__swbuf_r+0x20>
 800bb20:	6923      	ldr	r3, [r4, #16]
 800bb22:	b943      	cbnz	r3, 800bb36 <__swbuf_r+0x32>
 800bb24:	4621      	mov	r1, r4
 800bb26:	4628      	mov	r0, r5
 800bb28:	f000 f82a 	bl	800bb80 <__swsetup_r>
 800bb2c:	b118      	cbz	r0, 800bb36 <__swbuf_r+0x32>
 800bb2e:	f04f 37ff 	mov.w	r7, #4294967295
 800bb32:	4638      	mov	r0, r7
 800bb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	6922      	ldr	r2, [r4, #16]
 800bb3a:	1a98      	subs	r0, r3, r2
 800bb3c:	6963      	ldr	r3, [r4, #20]
 800bb3e:	b2f6      	uxtb	r6, r6
 800bb40:	4283      	cmp	r3, r0
 800bb42:	4637      	mov	r7, r6
 800bb44:	dc05      	bgt.n	800bb52 <__swbuf_r+0x4e>
 800bb46:	4621      	mov	r1, r4
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f7ff fa47 	bl	800afdc <_fflush_r>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1ed      	bne.n	800bb2e <__swbuf_r+0x2a>
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	60a3      	str	r3, [r4, #8]
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	1c5a      	adds	r2, r3, #1
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	701e      	strb	r6, [r3, #0]
 800bb60:	6962      	ldr	r2, [r4, #20]
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d004      	beq.n	800bb72 <__swbuf_r+0x6e>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	07db      	lsls	r3, r3, #31
 800bb6c:	d5e1      	bpl.n	800bb32 <__swbuf_r+0x2e>
 800bb6e:	2e0a      	cmp	r6, #10
 800bb70:	d1df      	bne.n	800bb32 <__swbuf_r+0x2e>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4628      	mov	r0, r5
 800bb76:	f7ff fa31 	bl	800afdc <_fflush_r>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d0d9      	beq.n	800bb32 <__swbuf_r+0x2e>
 800bb7e:	e7d6      	b.n	800bb2e <__swbuf_r+0x2a>

0800bb80 <__swsetup_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4b29      	ldr	r3, [pc, #164]	@ (800bc28 <__swsetup_r+0xa8>)
 800bb84:	4605      	mov	r5, r0
 800bb86:	6818      	ldr	r0, [r3, #0]
 800bb88:	460c      	mov	r4, r1
 800bb8a:	b118      	cbz	r0, 800bb94 <__swsetup_r+0x14>
 800bb8c:	6a03      	ldr	r3, [r0, #32]
 800bb8e:	b90b      	cbnz	r3, 800bb94 <__swsetup_r+0x14>
 800bb90:	f7fc fc72 	bl	8008478 <__sinit>
 800bb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb98:	0719      	lsls	r1, r3, #28
 800bb9a:	d422      	bmi.n	800bbe2 <__swsetup_r+0x62>
 800bb9c:	06da      	lsls	r2, r3, #27
 800bb9e:	d407      	bmi.n	800bbb0 <__swsetup_r+0x30>
 800bba0:	2209      	movs	r2, #9
 800bba2:	602a      	str	r2, [r5, #0]
 800bba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bba8:	81a3      	strh	r3, [r4, #12]
 800bbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bbae:	e033      	b.n	800bc18 <__swsetup_r+0x98>
 800bbb0:	0758      	lsls	r0, r3, #29
 800bbb2:	d512      	bpl.n	800bbda <__swsetup_r+0x5a>
 800bbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbb6:	b141      	cbz	r1, 800bbca <__swsetup_r+0x4a>
 800bbb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbbc:	4299      	cmp	r1, r3
 800bbbe:	d002      	beq.n	800bbc6 <__swsetup_r+0x46>
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f7fd fbf9 	bl	80093b8 <_free_r>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	6063      	str	r3, [r4, #4]
 800bbd6:	6923      	ldr	r3, [r4, #16]
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	f043 0308 	orr.w	r3, r3, #8
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	b94b      	cbnz	r3, 800bbfa <__swsetup_r+0x7a>
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbf0:	d003      	beq.n	800bbfa <__swsetup_r+0x7a>
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	f000 f883 	bl	800bd00 <__smakebuf_r>
 800bbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbfe:	f013 0201 	ands.w	r2, r3, #1
 800bc02:	d00a      	beq.n	800bc1a <__swsetup_r+0x9a>
 800bc04:	2200      	movs	r2, #0
 800bc06:	60a2      	str	r2, [r4, #8]
 800bc08:	6962      	ldr	r2, [r4, #20]
 800bc0a:	4252      	negs	r2, r2
 800bc0c:	61a2      	str	r2, [r4, #24]
 800bc0e:	6922      	ldr	r2, [r4, #16]
 800bc10:	b942      	cbnz	r2, 800bc24 <__swsetup_r+0xa4>
 800bc12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc16:	d1c5      	bne.n	800bba4 <__swsetup_r+0x24>
 800bc18:	bd38      	pop	{r3, r4, r5, pc}
 800bc1a:	0799      	lsls	r1, r3, #30
 800bc1c:	bf58      	it	pl
 800bc1e:	6962      	ldrpl	r2, [r4, #20]
 800bc20:	60a2      	str	r2, [r4, #8]
 800bc22:	e7f4      	b.n	800bc0e <__swsetup_r+0x8e>
 800bc24:	2000      	movs	r0, #0
 800bc26:	e7f7      	b.n	800bc18 <__swsetup_r+0x98>
 800bc28:	20000030 	.word	0x20000030

0800bc2c <_raise_r>:
 800bc2c:	291f      	cmp	r1, #31
 800bc2e:	b538      	push	{r3, r4, r5, lr}
 800bc30:	4605      	mov	r5, r0
 800bc32:	460c      	mov	r4, r1
 800bc34:	d904      	bls.n	800bc40 <_raise_r+0x14>
 800bc36:	2316      	movs	r3, #22
 800bc38:	6003      	str	r3, [r0, #0]
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc42:	b112      	cbz	r2, 800bc4a <_raise_r+0x1e>
 800bc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc48:	b94b      	cbnz	r3, 800bc5e <_raise_r+0x32>
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	f000 f830 	bl	800bcb0 <_getpid_r>
 800bc50:	4622      	mov	r2, r4
 800bc52:	4601      	mov	r1, r0
 800bc54:	4628      	mov	r0, r5
 800bc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc5a:	f000 b817 	b.w	800bc8c <_kill_r>
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d00a      	beq.n	800bc78 <_raise_r+0x4c>
 800bc62:	1c59      	adds	r1, r3, #1
 800bc64:	d103      	bne.n	800bc6e <_raise_r+0x42>
 800bc66:	2316      	movs	r3, #22
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	e7e7      	b.n	800bc3e <_raise_r+0x12>
 800bc6e:	2100      	movs	r1, #0
 800bc70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc74:	4620      	mov	r0, r4
 800bc76:	4798      	blx	r3
 800bc78:	2000      	movs	r0, #0
 800bc7a:	e7e0      	b.n	800bc3e <_raise_r+0x12>

0800bc7c <raise>:
 800bc7c:	4b02      	ldr	r3, [pc, #8]	@ (800bc88 <raise+0xc>)
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	f7ff bfd3 	b.w	800bc2c <_raise_r>
 800bc86:	bf00      	nop
 800bc88:	20000030 	.word	0x20000030

0800bc8c <_kill_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d07      	ldr	r5, [pc, #28]	@ (800bcac <_kill_r+0x20>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	4611      	mov	r1, r2
 800bc98:	602b      	str	r3, [r5, #0]
 800bc9a:	f7f5 fea1 	bl	80019e0 <_kill>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	d102      	bne.n	800bca8 <_kill_r+0x1c>
 800bca2:	682b      	ldr	r3, [r5, #0]
 800bca4:	b103      	cbz	r3, 800bca8 <_kill_r+0x1c>
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	bd38      	pop	{r3, r4, r5, pc}
 800bcaa:	bf00      	nop
 800bcac:	2000057c 	.word	0x2000057c

0800bcb0 <_getpid_r>:
 800bcb0:	f7f5 be8e 	b.w	80019d0 <_getpid>

0800bcb4 <__swhatbuf_r>:
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcbc:	2900      	cmp	r1, #0
 800bcbe:	b096      	sub	sp, #88	@ 0x58
 800bcc0:	4615      	mov	r5, r2
 800bcc2:	461e      	mov	r6, r3
 800bcc4:	da0d      	bge.n	800bce2 <__swhatbuf_r+0x2e>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bccc:	f04f 0100 	mov.w	r1, #0
 800bcd0:	bf14      	ite	ne
 800bcd2:	2340      	movne	r3, #64	@ 0x40
 800bcd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcd8:	2000      	movs	r0, #0
 800bcda:	6031      	str	r1, [r6, #0]
 800bcdc:	602b      	str	r3, [r5, #0]
 800bcde:	b016      	add	sp, #88	@ 0x58
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	466a      	mov	r2, sp
 800bce4:	f000 f848 	bl	800bd78 <_fstat_r>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dbec      	blt.n	800bcc6 <__swhatbuf_r+0x12>
 800bcec:	9901      	ldr	r1, [sp, #4]
 800bcee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcf6:	4259      	negs	r1, r3
 800bcf8:	4159      	adcs	r1, r3
 800bcfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcfe:	e7eb      	b.n	800bcd8 <__swhatbuf_r+0x24>

0800bd00 <__smakebuf_r>:
 800bd00:	898b      	ldrh	r3, [r1, #12]
 800bd02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd04:	079d      	lsls	r5, r3, #30
 800bd06:	4606      	mov	r6, r0
 800bd08:	460c      	mov	r4, r1
 800bd0a:	d507      	bpl.n	800bd1c <__smakebuf_r+0x1c>
 800bd0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	6123      	str	r3, [r4, #16]
 800bd14:	2301      	movs	r3, #1
 800bd16:	6163      	str	r3, [r4, #20]
 800bd18:	b003      	add	sp, #12
 800bd1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd1c:	ab01      	add	r3, sp, #4
 800bd1e:	466a      	mov	r2, sp
 800bd20:	f7ff ffc8 	bl	800bcb4 <__swhatbuf_r>
 800bd24:	9f00      	ldr	r7, [sp, #0]
 800bd26:	4605      	mov	r5, r0
 800bd28:	4639      	mov	r1, r7
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f7fd fbb8 	bl	80094a0 <_malloc_r>
 800bd30:	b948      	cbnz	r0, 800bd46 <__smakebuf_r+0x46>
 800bd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd36:	059a      	lsls	r2, r3, #22
 800bd38:	d4ee      	bmi.n	800bd18 <__smakebuf_r+0x18>
 800bd3a:	f023 0303 	bic.w	r3, r3, #3
 800bd3e:	f043 0302 	orr.w	r3, r3, #2
 800bd42:	81a3      	strh	r3, [r4, #12]
 800bd44:	e7e2      	b.n	800bd0c <__smakebuf_r+0xc>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	6020      	str	r0, [r4, #0]
 800bd4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd4e:	81a3      	strh	r3, [r4, #12]
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd56:	b15b      	cbz	r3, 800bd70 <__smakebuf_r+0x70>
 800bd58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f000 f81d 	bl	800bd9c <_isatty_r>
 800bd62:	b128      	cbz	r0, 800bd70 <__smakebuf_r+0x70>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	81a3      	strh	r3, [r4, #12]
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	431d      	orrs	r5, r3
 800bd74:	81a5      	strh	r5, [r4, #12]
 800bd76:	e7cf      	b.n	800bd18 <__smakebuf_r+0x18>

0800bd78 <_fstat_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d07      	ldr	r5, [pc, #28]	@ (800bd98 <_fstat_r+0x20>)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	4611      	mov	r1, r2
 800bd84:	602b      	str	r3, [r5, #0]
 800bd86:	f7f5 fe8b 	bl	8001aa0 <_fstat>
 800bd8a:	1c43      	adds	r3, r0, #1
 800bd8c:	d102      	bne.n	800bd94 <_fstat_r+0x1c>
 800bd8e:	682b      	ldr	r3, [r5, #0]
 800bd90:	b103      	cbz	r3, 800bd94 <_fstat_r+0x1c>
 800bd92:	6023      	str	r3, [r4, #0]
 800bd94:	bd38      	pop	{r3, r4, r5, pc}
 800bd96:	bf00      	nop
 800bd98:	2000057c 	.word	0x2000057c

0800bd9c <_isatty_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4d06      	ldr	r5, [pc, #24]	@ (800bdb8 <_isatty_r+0x1c>)
 800bda0:	2300      	movs	r3, #0
 800bda2:	4604      	mov	r4, r0
 800bda4:	4608      	mov	r0, r1
 800bda6:	602b      	str	r3, [r5, #0]
 800bda8:	f7f5 fe8a 	bl	8001ac0 <_isatty>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	d102      	bne.n	800bdb6 <_isatty_r+0x1a>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	b103      	cbz	r3, 800bdb6 <_isatty_r+0x1a>
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	bd38      	pop	{r3, r4, r5, pc}
 800bdb8:	2000057c 	.word	0x2000057c

0800bdbc <_init>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	bf00      	nop
 800bdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc2:	bc08      	pop	{r3}
 800bdc4:	469e      	mov	lr, r3
 800bdc6:	4770      	bx	lr

0800bdc8 <_fini>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	bf00      	nop
 800bdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdce:	bc08      	pop	{r3}
 800bdd0:	469e      	mov	lr, r3
 800bdd2:	4770      	bx	lr
