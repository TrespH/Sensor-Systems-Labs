
MEMS_1c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800c558  0800c558  0000d558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca00  0800ca00  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca00  0800ca00  0000da00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca08  0800ca08  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca08  0800ca08  0000da08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca0c  0800ca0c  0000da0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800ca10  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001f0  0800cc00  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800cc00  0000e58c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105a9  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cc  00000000  00000000  0001e7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00020998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c88  00000000  00000000  00021970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017571  00000000  00000000  000225f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012833  00000000  00000000  00039b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d52  00000000  00000000  0004c39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de0ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  000de134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e3aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c53c 	.word	0x0800c53c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800c53c 	.word	0x0800c53c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8000ff4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff8:	b08c      	sub	sp, #48	@ 0x30
 8000ffa:	af06      	add	r7, sp, #24
 8000ffc:	6078      	str	r0, [r7, #4]
	 x = 0;
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
	 HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, &MEMS_REGISTER_X, size, timeout);
 8001004:	4b5c      	ldr	r3, [pc, #368]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001006:	8819      	ldrh	r1, [r3, #0]
 8001008:	4b5c      	ldr	r3, [pc, #368]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	4b5c      	ldr	r3, [pc, #368]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	4a5b      	ldr	r2, [pc, #364]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001016:	485c      	ldr	r0, [pc, #368]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001018:	f001 fea0 	bl	8002d5c <HAL_I2C_Master_Transmit>
	 HAL_I2C_Mem_Read_DMA(&hi2c1, MEMS_WR_ADDRESS+1, &MEMS_REGISTER_X, I2C_MEMADD_SIZE_8BIT, &x, size);
 800101c:	4b56      	ldr	r3, [pc, #344]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b299      	uxth	r1, r3
 8001024:	4b57      	ldr	r3, [pc, #348]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b54      	ldr	r3, [pc, #336]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	4b51      	ldr	r3, [pc, #324]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	4854      	ldr	r0, [pc, #336]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001036:	f002 f9c1 	bl	80033bc <HAL_I2C_Mem_Read_DMA>

	 y = 0;
 800103a:	4b54      	ldr	r3, [pc, #336]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
	 HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, &MEMS_REGISTER_Y, size, timeout);
 8001040:	4b4d      	ldr	r3, [pc, #308]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001042:	8819      	ldrh	r1, [r3, #0]
 8001044:	4b4d      	ldr	r3, [pc, #308]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	4b4d      	ldr	r3, [pc, #308]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	4613      	mov	r3, r2
 8001050:	4a4f      	ldr	r2, [pc, #316]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001052:	484d      	ldr	r0, [pc, #308]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001054:	f001 fe82 	bl	8002d5c <HAL_I2C_Master_Transmit>
	 HAL_I2C_Master_Receive(&hi2c1, MEMS_WR_ADDRESS+1, &y, size, timeout);
 8001058:	4b47      	ldr	r3, [pc, #284]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	b299      	uxth	r1, r3
 8001060:	4b46      	ldr	r3, [pc, #280]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	4b46      	ldr	r3, [pc, #280]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	4a47      	ldr	r2, [pc, #284]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x198>)
 800106e:	4846      	ldr	r0, [pc, #280]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001070:	f001 ff72 	bl	8002f58 <HAL_I2C_Master_Receive>

	 z = 0;
 8001074:	4b47      	ldr	r3, [pc, #284]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	 HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, &MEMS_REGISTER_Z, size, timeout);
 800107a:	4b3f      	ldr	r3, [pc, #252]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800107c:	8819      	ldrh	r1, [r3, #0]
 800107e:	4b3f      	ldr	r3, [pc, #252]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	4a43      	ldr	r2, [pc, #268]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800108c:	483e      	ldr	r0, [pc, #248]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800108e:	f001 fe65 	bl	8002d5c <HAL_I2C_Master_Transmit>
	 HAL_I2C_Master_Receive(&hi2c1, MEMS_WR_ADDRESS+1, &z, size, timeout);
 8001092:	4b39      	ldr	r3, [pc, #228]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	4b38      	ldr	r3, [pc, #224]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010a8:	4837      	ldr	r0, [pc, #220]	@ (8001188 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010aa:	f001 ff55 	bl	8002f58 <HAL_I2C_Master_Receive>

	 float acc_g_x = x / 64.0;
 80010ae:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80010b0:	f993 3000 	ldrsb.w	r3, [r3]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa3d 	bl	8000534 <__aeabi_i2d>
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b37      	ldr	r3, [pc, #220]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010c0:	f7ff fbcc 	bl	800085c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd94 	bl	8000bf8 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	617b      	str	r3, [r7, #20]
	 float acc_g_y = y / 64.0;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80010d6:	f993 3000 	ldrsb.w	r3, [r3]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa2a 	bl	8000534 <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010e6:	f7ff fbb9 	bl	800085c <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd81 	bl	8000bf8 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	613b      	str	r3, [r7, #16]
	 float acc_g_z = z / 64.0;
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa17 	bl	8000534 <__aeabi_i2d>
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800110c:	f7ff fba6 	bl	800085c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fd6e 	bl	8000bf8 <__aeabi_d2f>
 800111c:	4603      	mov	r3, r0
 800111e:	60fb      	str	r3, [r7, #12]

	 string_length = snprintf(string, sizeof(string), "X: %.2f, Y: %.2f, Z: %.2f\n", acc_g_x, acc_g_y, acc_g_z);
 8001120:	6978      	ldr	r0, [r7, #20]
 8001122:	f7ff fa19 	bl	8000558 <__aeabi_f2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f7ff fa14 	bl	8000558 <__aeabi_f2d>
 8001130:	4680      	mov	r8, r0
 8001132:	4689      	mov	r9, r1
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff fa0f 	bl	8000558 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001142:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001146:	e9cd 4500 	strd	r4, r5, [sp]
 800114a:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800114c:	2120      	movs	r1, #32
 800114e:	4815      	ldr	r0, [pc, #84]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001150:	f007 fd86 	bl	8008c60 <sniprintf>
 8001154:	4603      	mov	r3, r0
 8001156:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001158:	6013      	str	r3, [r2, #0]

	 HAL_UART_Transmit_DMA(&huart2, string, string_length);
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	4910      	ldr	r1, [pc, #64]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001164:	4811      	ldr	r0, [pc, #68]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001166:	f005 fe39 	bl	8006ddc <HAL_UART_Transmit_DMA>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001174:	20000434 	.word	0x20000434
 8001178:	20000000 	.word	0x20000000
 800117c:	20000014 	.word	0x20000014
 8001180:	20000018 	.word	0x20000018
 8001184:	2000000e 	.word	0x2000000e
 8001188:	2000020c 	.word	0x2000020c
 800118c:	20000435 	.word	0x20000435
 8001190:	20000010 	.word	0x20000010
 8001194:	20000436 	.word	0x20000436
 8001198:	20000012 	.word	0x20000012
 800119c:	40500000 	.word	0x40500000
 80011a0:	0800c558 	.word	0x0800c558
 80011a4:	20000410 	.word	0x20000410
 80011a8:	20000430 	.word	0x20000430
 80011ac:	20000368 	.word	0x20000368

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f000 fd39 	bl	8001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f87b 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f000 f9bb 	bl	8001538 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c2:	f000 f989 	bl	80014d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c6:	f000 f95d 	bl	8001484 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011ca:	f000 f8df 	bl	800138c <MX_I2C1_Init>
  MX_TIM2_Init();
 80011ce:	f000 f90b 	bl	80013e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);

  if (HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK) {
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <main+0xcc>)
 80011d4:	8819      	ldrh	r1, [r3, #0]
 80011d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <main+0xd0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2302      	movs	r3, #2
 80011de:	4a29      	ldr	r2, [pc, #164]	@ (8001284 <main+0xd4>)
 80011e0:	4829      	ldr	r0, [pc, #164]	@ (8001288 <main+0xd8>)
 80011e2:	f001 fdbb 	bl	8002d5c <HAL_I2C_Master_Transmit>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d108      	bne.n	80011fe <main+0x4e>
	  string_length = snprintf(string, sizeof(string), "LIS2DE found!\n");
 80011ec:	4a27      	ldr	r2, [pc, #156]	@ (800128c <main+0xdc>)
 80011ee:	2120      	movs	r1, #32
 80011f0:	4827      	ldr	r0, [pc, #156]	@ (8001290 <main+0xe0>)
 80011f2:	f007 fd35 	bl	8008c60 <sniprintf>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a26      	ldr	r2, [pc, #152]	@ (8001294 <main+0xe4>)
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e01d      	b.n	800123a <main+0x8a>
  }
  else {
      if (HAL_I2C_Master_Transmit(&hi2c1, MEMS12_WR_ADDRESS, CTRL_REG1, sizeof(CTRL_REG1), timeout) == HAL_OK) {
 80011fe:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <main+0xe8>)
 8001200:	8819      	ldrh	r1, [r3, #0]
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <main+0xd0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2302      	movs	r3, #2
 800120a:	4a1e      	ldr	r2, [pc, #120]	@ (8001284 <main+0xd4>)
 800120c:	481e      	ldr	r0, [pc, #120]	@ (8001288 <main+0xd8>)
 800120e:	f001 fda5 	bl	8002d5c <HAL_I2C_Master_Transmit>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d108      	bne.n	800122a <main+0x7a>
    	  string_length = snprintf(string, sizeof(string), "LIS2DE12 found!\n");
 8001218:	4a20      	ldr	r2, [pc, #128]	@ (800129c <main+0xec>)
 800121a:	2120      	movs	r1, #32
 800121c:	481c      	ldr	r0, [pc, #112]	@ (8001290 <main+0xe0>)
 800121e:	f007 fd1f 	bl	8008c60 <sniprintf>
 8001222:	4603      	mov	r3, r0
 8001224:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <main+0xe4>)
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e007      	b.n	800123a <main+0x8a>
      }
      else {
          string_length = snprintf(string, sizeof(string), "Error! No device found!\n");
 800122a:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <main+0xf0>)
 800122c:	2120      	movs	r1, #32
 800122e:	4818      	ldr	r0, [pc, #96]	@ (8001290 <main+0xe0>)
 8001230:	f007 fd16 	bl	8008c60 <sniprintf>
 8001234:	4603      	mov	r3, r0
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <main+0xe4>)
 8001238:	6013      	str	r3, [r2, #0]
      }
  }

  HAL_UART_Transmit_DMA(&huart2, string, string_length);
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <main+0xe4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	4913      	ldr	r1, [pc, #76]	@ (8001290 <main+0xe0>)
 8001244:	4817      	ldr	r0, [pc, #92]	@ (80012a4 <main+0xf4>)
 8001246:	f005 fdc9 	bl	8006ddc <HAL_UART_Transmit_DMA>

  HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG2, sizeof(CTRL_REG2), timeout);
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <main+0xcc>)
 800124c:	8819      	ldrh	r1, [r3, #0]
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <main+0xd0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2302      	movs	r3, #2
 8001256:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <main+0xf8>)
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <main+0xd8>)
 800125a:	f001 fd7f 	bl	8002d5c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, MEMS_WR_ADDRESS, CTRL_REG4, sizeof(CTRL_REG4), timeout);
 800125e:	4b07      	ldr	r3, [pc, #28]	@ (800127c <main+0xcc>)
 8001260:	8819      	ldrh	r1, [r3, #0]
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <main+0xd0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2302      	movs	r3, #2
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <main+0xfc>)
 800126c:	4806      	ldr	r0, [pc, #24]	@ (8001288 <main+0xd8>)
 800126e:	f001 fd75 	bl	8002d5c <HAL_I2C_Master_Transmit>

  HAL_TIM_Base_Start_IT(&htim2);
 8001272:	480f      	ldr	r0, [pc, #60]	@ (80012b0 <main+0x100>)
 8001274:	f005 f978 	bl	8006568 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <main+0xc8>
 800127c:	20000000 	.word	0x20000000
 8001280:	20000018 	.word	0x20000018
 8001284:	20000004 	.word	0x20000004
 8001288:	2000020c 	.word	0x2000020c
 800128c:	0800c574 	.word	0x0800c574
 8001290:	20000410 	.word	0x20000410
 8001294:	20000430 	.word	0x20000430
 8001298:	20000002 	.word	0x20000002
 800129c:	0800c584 	.word	0x0800c584
 80012a0:	0800c598 	.word	0x0800c598
 80012a4:	20000368 	.word	0x20000368
 80012a8:	20000008 	.word	0x20000008
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000320 	.word	0x20000320

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	@ 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	@ 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 fd63 	bl	8008d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <SystemClock_Config+0xd0>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	4a28      	ldr	r2, [pc, #160]	@ (8001384 <SystemClock_Config+0xd0>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e8:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <SystemClock_Config+0xd0>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <SystemClock_Config+0xd4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001300:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <SystemClock_Config+0xd4>)
 8001302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <SystemClock_Config+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	2302      	movs	r3, #2
 8001316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2310      	movs	r3, #16
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001328:	2310      	movs	r3, #16
 800132a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800132c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001332:	2304      	movs	r3, #4
 8001334:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001336:	2307      	movs	r3, #7
 8001338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	4618      	mov	r0, r3
 8001340:	f004 fc2a 	bl	8005b98 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800134a:	f000 f963 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2302      	movs	r3, #2
 8001354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2102      	movs	r1, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fe8c 	bl	8006088 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001376:	f000 f94d 	bl	8001614 <Error_Handler>
  }
}
 800137a:	bf00      	nop
 800137c:	3750      	adds	r7, #80	@ 0x50
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000

0800138c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <MX_I2C1_Init+0x50>)
 8001392:	4a13      	ldr	r2, [pc, #76]	@ (80013e0 <MX_I2C1_Init+0x54>)
 8001394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_I2C1_Init+0x50>)
 8001398:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <MX_I2C1_Init+0x58>)
 800139a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_I2C1_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_I2C1_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_I2C1_Init+0x50>)
 80013aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_I2C1_Init+0x50>)
 80013ca:	f001 fb6d 	bl	8002aa8 <HAL_I2C_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d4:	f000 f91e 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000020c 	.word	0x2000020c
 80013e0:	40005400 	.word	0x40005400
 80013e4:	000186a0 	.word	0x000186a0

080013e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_TIM2_Init+0x98>)
 8001406:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800140a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <MX_TIM2_Init+0x98>)
 800140e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_TIM2_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10)-1;
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <MX_TIM2_Init+0x98>)
 800141c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001420:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_TIM2_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_TIM2_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142e:	4814      	ldr	r0, [pc, #80]	@ (8001480 <MX_TIM2_Init+0x98>)
 8001430:	f005 f84a 	bl	80064c8 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800143a:	f000 f8eb 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001442:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <MX_TIM2_Init+0x98>)
 800144c:	f005 f9de 	bl	800680c <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001456:	f000 f8dd 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <MX_TIM2_Init+0x98>)
 8001468:	f005 fbe6 	bl	8006c38 <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001472:	f000 f8cf 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000320 	.word	0x20000320

08001484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <MX_USART2_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014bc:	f005 fc3e 	bl	8006d3c <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c6:	f000 f8a5 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000368 	.word	0x20000368
 80014d4:	40004400 	.word	0x40004400

080014d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_DMA_Init+0x5c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <MX_DMA_Init+0x5c>)
 80014e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_DMA_Init+0x5c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200b      	movs	r0, #11
 8001500:	f000 fce1 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001504:	200b      	movs	r0, #11
 8001506:	f000 fcfa 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2011      	movs	r0, #17
 8001510:	f000 fcd9 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001514:	2011      	movs	r0, #17
 8001516:	f000 fcf2 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	202f      	movs	r0, #47	@ 0x2f
 8001520:	f000 fcd1 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001524:	202f      	movs	r0, #47	@ 0x2f
 8001526:	f000 fcea 	bl	8001efe <HAL_NVIC_EnableIRQ>

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <MX_GPIO_Init+0xd0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <MX_GPIO_Init+0xd0>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <MX_GPIO_Init+0xd0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_GPIO_Init+0xd0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a25      	ldr	r2, [pc, #148]	@ (8001608 <MX_GPIO_Init+0xd0>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <MX_GPIO_Init+0xd0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a1e      	ldr	r2, [pc, #120]	@ (8001608 <MX_GPIO_Init+0xd0>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_GPIO_Init+0xd0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <MX_GPIO_Init+0xd0>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2120      	movs	r1, #32
 80015c2:	4812      	ldr	r0, [pc, #72]	@ (800160c <MX_GPIO_Init+0xd4>)
 80015c4:	f001 fa56 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	480c      	ldr	r0, [pc, #48]	@ (8001610 <MX_GPIO_Init+0xd8>)
 80015e0:	f001 f8c4 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e4:	2320      	movs	r3, #32
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_GPIO_Init+0xd4>)
 80015fc:	f001 f8b6 	bl	800276c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	@ 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020800 	.word	0x40020800

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <Error_Handler+0x8>

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <HAL_MspInit+0x4c>)
 8001630:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001634:	6453      	str	r3, [r2, #68]	@ 0x44
 8001636:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <HAL_MspInit+0x4c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800165e:	2007      	movs	r0, #7
 8001660:	f000 fc26 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a50      	ldr	r2, [pc, #320]	@ (80017d0 <HAL_I2C_MspInit+0x160>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 8099 	bne.w	80017c6 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b4e      	ldr	r3, [pc, #312]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	4a4d      	ldr	r2, [pc, #308]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a4:	4b4b      	ldr	r3, [pc, #300]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b6:	2312      	movs	r3, #18
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c2:	2304      	movs	r3, #4
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4842      	ldr	r0, [pc, #264]	@ (80017d8 <HAL_I2C_MspInit+0x168>)
 80016ce:	f001 f84d 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a3e      	ldr	r2, [pc, #248]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80016dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 80016f0:	4a3b      	ldr	r2, [pc, #236]	@ (80017e0 <HAL_I2C_MspInit+0x170>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016f4:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 80016f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fc:	4b37      	ldr	r3, [pc, #220]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001702:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001708:	4b34      	ldr	r3, [pc, #208]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 800170a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800171c:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001722:	4b2e      	ldr	r3, [pc, #184]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001728:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800172e:	482b      	ldr	r0, [pc, #172]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001730:	f000 fc00 	bl	8001f34 <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800173a:	f7ff ff6b 	bl	8001614 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001742:	639a      	str	r2, [r3, #56]	@ 0x38
 8001744:	4a25      	ldr	r2, [pc, #148]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 800174c:	4a26      	ldr	r2, [pc, #152]	@ (80017e8 <HAL_I2C_MspInit+0x178>)
 800174e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 8001752:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001756:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 800175a:	2240      	movs	r2, #64	@ 0x40
 800175c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 8001766:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800176a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800178a:	4816      	ldr	r0, [pc, #88]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 800178c:	f000 fbd2 	bl	8001f34 <HAL_DMA_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001796:	f7ff ff3d 	bl	8001614 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 800179e:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a0:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <HAL_I2C_MspInit+0x174>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201f      	movs	r0, #31
 80017ac:	f000 fb8b 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017b0:	201f      	movs	r0, #31
 80017b2:	f000 fba4 	bl	8001efe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2020      	movs	r0, #32
 80017bc:	f000 fb83 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017c0:	2020      	movs	r0, #32
 80017c2:	f000 fb9c 	bl	8001efe <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	@ 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400
 80017dc:	20000260 	.word	0x20000260
 80017e0:	40026010 	.word	0x40026010
 80017e4:	200002c0 	.word	0x200002c0
 80017e8:	400260b8 	.word	0x400260b8

080017ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017fc:	d115      	bne.n	800182a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_TIM_Base_MspInit+0x48>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	4a0b      	ldr	r2, [pc, #44]	@ (8001834 <HAL_TIM_Base_MspInit+0x48>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6413      	str	r3, [r2, #64]	@ 0x40
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_TIM_Base_MspInit+0x48>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	201c      	movs	r0, #28
 8001820:	f000 fb51 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001824:	201c      	movs	r0, #28
 8001826:	f000 fb6a 	bl	8001efe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a34      	ldr	r2, [pc, #208]	@ (8001928 <HAL_UART_MspInit+0xf0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d161      	bne.n	800191e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b33      	ldr	r3, [pc, #204]	@ (800192c <HAL_UART_MspInit+0xf4>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a32      	ldr	r2, [pc, #200]	@ (800192c <HAL_UART_MspInit+0xf4>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_UART_MspInit+0xf4>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b2c      	ldr	r3, [pc, #176]	@ (800192c <HAL_UART_MspInit+0xf4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a2b      	ldr	r2, [pc, #172]	@ (800192c <HAL_UART_MspInit+0xf4>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b29      	ldr	r3, [pc, #164]	@ (800192c <HAL_UART_MspInit+0xf4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001892:	230c      	movs	r3, #12
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4820      	ldr	r0, [pc, #128]	@ (8001930 <HAL_UART_MspInit+0xf8>)
 80018ae:	f000 ff5d 	bl	800276c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018b4:	4a20      	ldr	r2, [pc, #128]	@ (8001938 <HAL_UART_MspInit+0x100>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018c2:	2240      	movs	r2, #64	@ 0x40
 80018c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d4:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e6:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018f2:	4810      	ldr	r0, [pc, #64]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 80018f4:	f000 fb1e 	bl	8001f34 <HAL_DMA_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80018fe:	f7ff fe89 	bl	8001614 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 8001906:	639a      	str	r2, [r3, #56]	@ 0x38
 8001908:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_UART_MspInit+0xfc>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2026      	movs	r0, #38	@ 0x26
 8001914:	f000 fad7 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001918:	2026      	movs	r0, #38	@ 0x26
 800191a:	f000 faf0 	bl	8001efe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	@ 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000
 8001934:	200003b0 	.word	0x200003b0
 8001938:	400260a0 	.word	0x400260a0

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <NMI_Handler+0x4>

08001944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <MemManage_Handler+0x4>

08001954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <UsageFault_Handler+0x4>

08001964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001992:	f000 f99d 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <DMA1_Stream0_IRQHandler+0x10>)
 80019a2:	f000 fc5f 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000260 	.word	0x20000260

080019b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <DMA1_Stream6_IRQHandler+0x10>)
 80019b6:	f000 fc55 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200003b0 	.word	0x200003b0

080019c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM2_IRQHandler+0x10>)
 80019ca:	f004 fe2f 	bl	800662c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000320 	.word	0x20000320

080019d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <I2C1_EV_IRQHandler+0x10>)
 80019de:	f001 fe7d 	bl	80036dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000020c 	.word	0x2000020c

080019ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <I2C1_ER_IRQHandler+0x10>)
 80019f2:	f001 ffc6 	bl	8003982 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000020c 	.word	0x2000020c

08001a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <USART2_IRQHandler+0x10>)
 8001a06:	f005 fa59 	bl	8006ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000368 	.word	0x20000368

08001a14 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <DMA1_Stream7_IRQHandler+0x10>)
 8001a1a:	f000 fc23 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002c0 	.word	0x200002c0

08001a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a42:	f007 f9f7 	bl	8008e34 <__errno>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2216      	movs	r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_exit>:

void _exit (int status)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ffe7 	bl	8001a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6a:	bf00      	nop
 8001a6c:	e7fd      	b.n	8001a6a <_exit+0x12>

08001a6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e00a      	b.n	8001a96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a80:	f3af 8000 	nop.w
 8001a84:	4601      	mov	r1, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	60ba      	str	r2, [r7, #8]
 8001a8c:	b2ca      	uxtb	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbf0      	blt.n	8001a80 <_read+0x12>
  }

  return len;
 8001a9e:	687b      	ldr	r3, [r7, #4]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e009      	b.n	8001ace <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	60ba      	str	r2, [r7, #8]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf1      	blt.n	8001aba <_write+0x12>
  }
  return len;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_close>:

int _close(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b08:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_isatty>:

int _isatty(int file)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f007 f95c 	bl	8008e34 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20018000 	.word	0x20018000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000438 	.word	0x20000438
 8001bb0:	20000590 	.word	0x20000590

08001bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <SystemInit+0x20>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <SystemInit+0x20>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bdc:	f7ff ffea 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	@ (8001c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c06:	f007 f91b 	bl	8008e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0a:	f7ff fad1 	bl	80011b0 <main>
  bx  lr    
 8001c0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001c1c:	0800ca10 	.word	0x0800ca10
  ldr r2, =_sbss
 8001c20:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001c24:	2000058c 	.word	0x2000058c

08001c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC_IRQHandler>
	...

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c30:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <HAL_Init+0x40>)
 8001c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_Init+0x40>)
 8001c42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <HAL_Init+0x40>)
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c54:	2003      	movs	r0, #3
 8001c56:	f000 f92b 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 f808 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c60:	f7ff fcde 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023c00 	.word	0x40023c00

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_InitTick+0x54>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0x58>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f943 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00e      	b.n	8001cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b0f      	cmp	r3, #15
 8001ca2:	d80a      	bhi.n	8001cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f000 f90b 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb0:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <HAL_InitTick+0x5c>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000001c 	.word	0x2000001c
 8001cc8:	20000024 	.word	0x20000024
 8001ccc:	20000020 	.word	0x20000020

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000024 	.word	0x20000024
 8001cf4:	2000043c 	.word	0x2000043c

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000043c 	.word	0x2000043c

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	@ (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	@ (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	@ (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	@ 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff3e 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff31 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff feda 	bl	8001cf8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e099      	b.n	8002084 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f70:	e00f      	b.n	8001f92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f72:	f7ff fec1 	bl	8001cf8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d908      	bls.n	8001f92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e078      	b.n	8002084 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e8      	bne.n	8001f72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4b38      	ldr	r3, [pc, #224]	@ (800208c <HAL_DMA_Init+0x158>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d107      	bne.n	8001ffc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f023 0307 	bic.w	r3, r3, #7
 8002012:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	2b04      	cmp	r3, #4
 8002024:	d117      	bne.n	8002056 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00e      	beq.n	8002056 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fb1b 	bl	8002674 <DMA_CheckFifoParam>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002052:	2301      	movs	r3, #1
 8002054:	e016      	b.n	8002084 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fad2 	bl	8002608 <DMA_CalcBaseAndBitshift>
 8002064:	4603      	mov	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	223f      	movs	r2, #63	@ 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	f010803f 	.word	0xf010803f

08002090 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_DMA_Start_IT+0x26>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e040      	b.n	8002138 <HAL_DMA_Start_IT+0xa8>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d12f      	bne.n	800212a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fa64 	bl	80025ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	223f      	movs	r2, #63	@ 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0216 	orr.w	r2, r2, #22
 80020fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0208 	orr.w	r2, r2, #8
 8002116:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e005      	b.n	8002136 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002132:	2302      	movs	r3, #2
 8002134:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002136:	7dfb      	ldrb	r3, [r7, #23]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800214e:	f7ff fdd3 	bl	8001cf8 <HAL_GetTick>
 8002152:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d008      	beq.n	8002172 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e052      	b.n	8002218 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0216 	bic.w	r2, r2, #22
 8002180:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002190:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <HAL_DMA_Abort+0x62>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0208 	bic.w	r2, r2, #8
 80021b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	e013      	b.n	80021ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c4:	f7ff fd98 	bl	8001cf8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d90c      	bls.n	80021ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e015      	b.n	8002218 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e4      	bne.n	80021c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	223f      	movs	r2, #63	@ 0x3f
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d004      	beq.n	800223e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2280      	movs	r2, #128	@ 0x80
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00c      	b.n	8002258 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2205      	movs	r2, #5
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002270:	4b8e      	ldr	r3, [pc, #568]	@ (80024ac <HAL_DMA_IRQHandler+0x248>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a8e      	ldr	r2, [pc, #568]	@ (80024b0 <HAL_DMA_IRQHandler+0x24c>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a9b      	lsrs	r3, r3, #10
 800227c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	2208      	movs	r2, #8
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	2208      	movs	r2, #8
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	2201      	movs	r2, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	2204      	movs	r2, #4
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	2204      	movs	r2, #4
 800232a:	409a      	lsls	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002340:	2210      	movs	r2, #16
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d043      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03c      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235e:	2210      	movs	r2, #16
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d024      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e01f      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e016      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0208 	bic.w	r2, r2, #8
 80023c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d8:	2220      	movs	r2, #32
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 808f 	beq.w	8002504 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8087 	beq.w	8002504 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2220      	movs	r2, #32
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b05      	cmp	r3, #5
 800240c:	d136      	bne.n	800247c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0216 	bic.w	r2, r2, #22
 800241c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800242c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_DMA_IRQHandler+0x1da>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	223f      	movs	r2, #63	@ 0x3f
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246e:	2b00      	cmp	r3, #0
 8002470:	d07e      	beq.n	8002570 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
        }
        return;
 800247a:	e079      	b.n	8002570 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01d      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	2b00      	cmp	r3, #0
 800249e:	d031      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
 80024a8:	e02c      	b.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
 80024aa:	bf00      	nop
 80024ac:	2000001c 	.word	0x2000001c
 80024b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
 80024c4:	e01e      	b.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10f      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0210 	bic.w	r2, r2, #16
 80024e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002508:	2b00      	cmp	r3, #0
 800250a:	d032      	beq.n	8002572 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d022      	beq.n	800255e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	429a      	cmp	r2, r3
 800253a:	d307      	bcc.n	800254c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f2      	bne.n	8002530 <HAL_DMA_IRQHandler+0x2cc>
 800254a:	e000      	b.n	800254e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800254c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
 800256e:	e000      	b.n	8002572 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002570:	bf00      	nop
    }
  }
}
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002586:	b2db      	uxtb	r3, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b40      	cmp	r3, #64	@ 0x40
 80025d8:	d108      	bne.n	80025ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ea:	e007      	b.n	80025fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3b10      	subs	r3, #16
 8002618:	4a14      	ldr	r2, [pc, #80]	@ (800266c <DMA_CalcBaseAndBitshift+0x64>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002622:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <DMA_CalcBaseAndBitshift+0x68>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d909      	bls.n	800264a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	1d1a      	adds	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58
 8002648:	e007      	b.n	800265a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	aaaaaaab 	.word	0xaaaaaaab
 8002670:	0800c5cc 	.word	0x0800c5cc

08002674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11f      	bne.n	80026ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d856      	bhi.n	8002742 <DMA_CheckFifoParam+0xce>
 8002694:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <DMA_CheckFifoParam+0x28>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	080026bf 	.word	0x080026bf
 80026a4:	080026ad 	.word	0x080026ad
 80026a8:	08002743 	.word	0x08002743
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d046      	beq.n	8002746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e043      	b.n	8002746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026c6:	d140      	bne.n	800274a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e03d      	b.n	800274a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d6:	d121      	bne.n	800271c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d837      	bhi.n	800274e <DMA_CheckFifoParam+0xda>
 80026de:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <DMA_CheckFifoParam+0x70>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	080026fb 	.word	0x080026fb
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800270d 	.word	0x0800270d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e030      	b.n	800275c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d025      	beq.n	8002752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e022      	b.n	8002752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271a:	e01c      	b.n	8002756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d903      	bls.n	800272a <DMA_CheckFifoParam+0xb6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002728:	e018      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      break;
 800272e:	e015      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e00b      	b.n	800275a <DMA_CheckFifoParam+0xe6>
      break;
 8002742:	bf00      	nop
 8002744:	e00a      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e008      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e006      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;   
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
    }
  } 
  
  return status; 
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e159      	b.n	8002a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8148 	bne.w	8002a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d005      	beq.n	80027be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d130      	bne.n	8002820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0201 	and.w	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d017      	beq.n	800285c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a2 	beq.w	8002a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b57      	ldr	r3, [pc, #348]	@ (8002a54 <HAL_GPIO_Init+0x2e8>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4a56      	ldr	r2, [pc, #344]	@ (8002a54 <HAL_GPIO_Init+0x2e8>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002900:	6453      	str	r3, [r2, #68]	@ 0x44
 8002902:	4b54      	ldr	r3, [pc, #336]	@ (8002a54 <HAL_GPIO_Init+0x2e8>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a52      	ldr	r2, [pc, #328]	@ (8002a58 <HAL_GPIO_Init+0x2ec>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a49      	ldr	r2, [pc, #292]	@ (8002a5c <HAL_GPIO_Init+0x2f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x202>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a48      	ldr	r2, [pc, #288]	@ (8002a60 <HAL_GPIO_Init+0x2f4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x1fe>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a47      	ldr	r2, [pc, #284]	@ (8002a64 <HAL_GPIO_Init+0x2f8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x1fa>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a46      	ldr	r2, [pc, #280]	@ (8002a68 <HAL_GPIO_Init+0x2fc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x1f6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a45      	ldr	r2, [pc, #276]	@ (8002a6c <HAL_GPIO_Init+0x300>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x1f2>
 800295a:	2304      	movs	r3, #4
 800295c:	e008      	b.n	8002970 <HAL_GPIO_Init+0x204>
 800295e:	2307      	movs	r3, #7
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x204>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x204>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x204>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x204>
 800296e:	2300      	movs	r3, #0
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f002 0203 	and.w	r2, r2, #3
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002980:	4935      	ldr	r1, [pc, #212]	@ (8002a58 <HAL_GPIO_Init+0x2ec>)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298e:	4b38      	ldr	r3, [pc, #224]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029dc:	4a24      	ldr	r2, [pc, #144]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e2:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a06:	4a1a      	ldr	r2, [pc, #104]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a30:	4a0f      	ldr	r2, [pc, #60]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b0f      	cmp	r3, #15
 8002a40:	f67f aea2 	bls.w	8002788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3724      	adds	r7, #36	@ 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020800 	.word	0x40020800
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40013c00 	.word	0x40013c00

08002a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
 8002a80:	4613      	mov	r3, r2
 8002a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a90:	e003      	b.n	8002a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	041a      	lsls	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	619a      	str	r2, [r3, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e12b      	b.n	8002d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fdce 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	@ 0x24
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f003 fcb4 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 8002b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a81      	ldr	r2, [pc, #516]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d807      	bhi.n	8002b2c <HAL_I2C_Init+0x84>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a80      	ldr	r2, [pc, #512]	@ (8002d20 <HAL_I2C_Init+0x278>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e006      	b.n	8002b3a <HAL_I2C_Init+0x92>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d24 <HAL_I2C_Init+0x27c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	bf94      	ite	ls
 8002b34:	2301      	movls	r3, #1
 8002b36:	2300      	movhi	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0e7      	b.n	8002d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a78      	ldr	r2, [pc, #480]	@ (8002d28 <HAL_I2C_Init+0x280>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0c9b      	lsrs	r3, r3, #18
 8002b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a6a      	ldr	r2, [pc, #424]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d802      	bhi.n	8002b7c <HAL_I2C_Init+0xd4>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	e009      	b.n	8002b90 <HAL_I2C_Init+0xe8>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	4a69      	ldr	r2, [pc, #420]	@ (8002d2c <HAL_I2C_Init+0x284>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	3301      	adds	r3, #1
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ba2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	495c      	ldr	r1, [pc, #368]	@ (8002d1c <HAL_I2C_Init+0x274>)
 8002bac:	428b      	cmp	r3, r1
 8002bae:	d819      	bhi.n	8002be4 <HAL_I2C_Init+0x13c>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e59      	subs	r1, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bbe:	1c59      	adds	r1, r3, #1
 8002bc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_I2C_Init+0x138>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e59      	subs	r1, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bde:	e051      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002be0:	2304      	movs	r3, #4
 8002be2:	e04f      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <HAL_I2C_Init+0x168>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e012      	b.n	8002c36 <HAL_I2C_Init+0x18e>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	0099      	lsls	r1, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c26:	3301      	adds	r3, #1
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Init+0x196>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e022      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <HAL_I2C_Init+0x1bc>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1e58      	subs	r0, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	440b      	add	r3, r1
 8002c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c62:	e00f      	b.n	8002c84 <HAL_I2C_Init+0x1dc>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	0099      	lsls	r1, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	6809      	ldr	r1, [r1, #0]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6911      	ldr	r1, [r2, #16]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	000186a0 	.word	0x000186a0
 8002d20:	001e847f 	.word	0x001e847f
 8002d24:	003d08ff 	.word	0x003d08ff
 8002d28:	431bde83 	.word	0x431bde83
 8002d2c:	10624dd3 	.word	0x10624dd3

08002d30 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b80      	cmp	r3, #128	@ 0x80
 8002d44:	d103      	bne.n	8002d4e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	817b      	strh	r3, [r7, #10]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7fe ffc2 	bl	8001cf8 <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	f040 80e0 	bne.w	8002f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2319      	movs	r3, #25
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4970      	ldr	r1, [pc, #448]	@ (8002f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f002 fc7e 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0d3      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_I2C_Master_Transmit+0x50>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0cc      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d007      	beq.n	8002dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2221      	movs	r2, #33	@ 0x21
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2210      	movs	r2, #16
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	893a      	ldrh	r2, [r7, #8]
 8002e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a50      	ldr	r2, [pc, #320]	@ (8002f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f002 f83c 	bl	8004e98 <I2C_MasterRequestWrite>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e08d      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e40:	e066      	b.n	8002f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f002 fd3c 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06b      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_I2C_Master_Transmit+0x188>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	6a39      	ldr	r1, [r7, #32]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f002 fd33 	bl	8005954 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d107      	bne.n	8002f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e01a      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d194      	bne.n	8002e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	00100002 	.word	0x00100002
 8002f54:	ffff0000 	.word	0xffff0000

08002f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	@ 0x30
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	817b      	strh	r3, [r7, #10]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7fe fec4 	bl	8001cf8 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	f040 8217 	bne.w	80033ae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2319      	movs	r3, #25
 8002f86:	2201      	movs	r2, #1
 8002f88:	497c      	ldr	r1, [pc, #496]	@ (800317c <HAL_I2C_Master_Receive+0x224>)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f002 fb80 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	e20a      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2C_Master_Receive+0x50>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e203      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d007      	beq.n	8002fce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2222      	movs	r2, #34	@ 0x22
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	893a      	ldrh	r2, [r7, #8]
 8002ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4a5c      	ldr	r2, [pc, #368]	@ (8003180 <HAL_I2C_Master_Receive+0x228>)
 800300e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003010:	8979      	ldrh	r1, [r7, #10]
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f001 ffc0 	bl	8004f9c <I2C_MasterRequestRead>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1c4      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d113      	bne.n	8003056 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e198      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	2b01      	cmp	r3, #1
 800305c:	d11b      	bne.n	8003096 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800306c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e178      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	2b02      	cmp	r3, #2
 800309c:	d11b      	bne.n	80030d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	e158      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030fc:	e144      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	2b03      	cmp	r3, #3
 8003104:	f200 80f1 	bhi.w	80032ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310c:	2b01      	cmp	r3, #1
 800310e:	d123      	bne.n	8003158 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f002 fc97 	bl	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e145      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003156:	e117      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315c:	2b02      	cmp	r3, #2
 800315e:	d14e      	bne.n	80031fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003166:	2200      	movs	r2, #0
 8003168:	4906      	ldr	r1, [pc, #24]	@ (8003184 <HAL_I2C_Master_Receive+0x22c>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f002 fa90 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e11a      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
 800317a:	bf00      	nop
 800317c:	00100002 	.word	0x00100002
 8003180:	ffff0000 	.word	0xffff0000
 8003184:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031fc:	e0c4      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	2200      	movs	r2, #0
 8003206:	496c      	ldr	r1, [pc, #432]	@ (80033b8 <HAL_I2C_Master_Receive+0x460>)
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f002 fa41 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0cb      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	2200      	movs	r2, #0
 8003262:	4955      	ldr	r1, [pc, #340]	@ (80033b8 <HAL_I2C_Master_Receive+0x460>)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f002 fa13 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e09d      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032e8:	e04e      	b.n	8003388 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f002 fbaa 	bl	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e058      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d124      	bne.n	8003388 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003354:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	f47f aeb6 	bne.w	80030fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033ae:	2302      	movs	r3, #2
  }
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3728      	adds	r7, #40	@ 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	00010004 	.word	0x00010004

080033bc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	@ 0x30
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	460b      	mov	r3, r1
 80033d0:	813b      	strh	r3, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033d6:	f7fe fc8f 	bl	8001cf8 <HAL_GetTick>
 80033da:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	f040 8172 	bne.w	80036d2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ee:	4b93      	ldr	r3, [pc, #588]	@ (800363c <HAL_I2C_Mem_Read_DMA+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	08db      	lsrs	r3, r3, #3
 80033f4:	4a92      	ldr	r2, [pc, #584]	@ (8003640 <HAL_I2C_Mem_Read_DMA+0x284>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0a1a      	lsrs	r2, r3, #8
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	3b01      	subs	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d112      	bne.n	800343a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
 8003438:	e14c      	b.n	80036d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d0df      	beq.n	8003408 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2C_Mem_Read_DMA+0x9a>
 8003452:	2302      	movs	r3, #2
 8003454:	e13e      	b.n	80036d4 <HAL_I2C_Mem_Read_DMA+0x318>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d007      	beq.n	800347c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800348a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2222      	movs	r2, #34	@ 0x22
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a62      	ldr	r2, [pc, #392]	@ (8003644 <HAL_I2C_Mem_Read_DMA+0x288>)
 80034bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80034be:	897a      	ldrh	r2, [r7, #10]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80034c4:	893a      	ldrh	r2, [r7, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80cc 	beq.w	8003678 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02d      	beq.n	8003544 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	4a56      	ldr	r2, [pc, #344]	@ (8003648 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80034ee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	4a55      	ldr	r2, [pc, #340]	@ (800364c <HAL_I2C_Mem_Read_DMA+0x290>)
 80034f6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	2200      	movs	r2, #0
 8003506:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	2200      	movs	r2, #0
 800350e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3310      	adds	r3, #16
 8003522:	4619      	mov	r1, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	461a      	mov	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	f7fe fdaf 	bl	8002090 <HAL_DMA_Start_IT>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003538:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8087 	bne.w	8003650 <HAL_I2C_Mem_Read_DMA+0x294>
 8003542:	e013      	b.n	800356c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b3      	b.n	80036d4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800356c:	88f8      	ldrh	r0, [r7, #6]
 800356e:	893a      	ldrh	r2, [r7, #8]
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2323      	movs	r3, #35	@ 0x23
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	4603      	mov	r3, r0
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f001 fddb 	bl	8005138 <I2C_RequestMemoryRead>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fe47 	bl	8002220 <HAL_DMA_Abort_IT>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359c:	2200      	movs	r2, #0
 800359e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ae:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e081      	b.n	80036d4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e007      	b.n	80035fa <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003626:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	e049      	b.n	80036ce <HAL_I2C_Mem_Read_DMA+0x312>
 800363a:	bf00      	nop
 800363c:	2000001c 	.word	0x2000001c
 8003640:	14f8b589 	.word	0x14f8b589
 8003644:	ffff0000 	.word	0xffff0000
 8003648:	08005309 	.word	0x08005309
 800364c:	080054c7 	.word	0x080054c7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e02d      	b.n	80036d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003678:	88f8      	ldrh	r0, [r7, #6]
 800367a:	893a      	ldrh	r2, [r7, #8]
 800367c:	8979      	ldrh	r1, [r7, #10]
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2323      	movs	r3, #35	@ 0x23
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4603      	mov	r3, r0
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f001 fd55 	bl	8005138 <I2C_RequestMemoryRead>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01d      	b.n	80036d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036bc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	@ 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003704:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d003      	beq.n	8003714 <HAL_I2C_EV_IRQHandler+0x38>
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b40      	cmp	r3, #64	@ 0x40
 8003710:	f040 80b1 	bne.w	8003876 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_I2C_EV_IRQHandler+0x6e>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003734:	d003      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0x62>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800373c:	d101      	bne.n	8003742 <HAL_I2C_EV_IRQHandler+0x66>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x68>
 8003742:	2300      	movs	r3, #0
 8003744:	2b01      	cmp	r3, #1
 8003746:	f000 8114 	beq.w	8003972 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <HAL_I2C_EV_IRQHandler+0x90>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375a:	2b00      	cmp	r3, #0
 800375c:	d006      	beq.n	800376c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f002 f9fe 	bl	8005b60 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fd7a 	bl	800425e <I2C_Master_SB>
 800376a:	e083      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_I2C_EV_IRQHandler+0xac>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fdf2 	bl	800436a <I2C_Master_ADD10>
 8003786:	e075      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_I2C_EV_IRQHandler+0xc8>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fe0e 	bl	80043be <I2C_Master_ADDR>
 80037a2:	e067      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d036      	beq.n	800381c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037bc:	f000 80db 	beq.w	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <HAL_I2C_EV_IRQHandler+0x10a>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_I2C_EV_IRQHandler+0x10a>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9d6 	bl	8003b90 <I2C_MasterTransmit_TXE>
 80037e4:	e046      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80c2 	beq.w	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80bc 	beq.w	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b21      	cmp	r3, #33	@ 0x21
 8003802:	d103      	bne.n	800380c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa5f 	bl	8003cc8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800380a:	e0b4      	b.n	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	f040 80b1 	bne.w	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 facd 	bl	8003db4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381a:	e0ac      	b.n	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800382a:	f000 80a4 	beq.w	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00d      	beq.n	8003854 <HAL_I2C_EV_IRQHandler+0x178>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_I2C_EV_IRQHandler+0x178>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fb49 	bl	8003ee4 <I2C_MasterReceive_RXNE>
 8003852:	e00f      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 808b 	beq.w	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8085 	beq.w	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fc01 	bl	8004074 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003872:	e080      	b.n	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
 8003874:	e07f      	b.n	8003976 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e007      	b.n	8003898 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d011      	beq.n	80038c6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 ffcc 	bl	800485c <I2C_Slave_ADDR>
 80038c4:	e05a      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0x206>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f001 f806 	bl	80048ec <I2C_Slave_STOPF>
 80038e0:	e04c      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	2b21      	cmp	r3, #33	@ 0x21
 80038e6:	d002      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0x212>
 80038e8:	7bbb      	ldrb	r3, [r7, #14]
 80038ea:	2b29      	cmp	r3, #41	@ 0x29
 80038ec:	d120      	bne.n	8003930 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <HAL_I2C_EV_IRQHandler+0x238>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_I2C_EV_IRQHandler+0x238>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fee7 	bl	80046e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003912:	e032      	b.n	800397a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02d      	beq.n	800397a <HAL_I2C_EV_IRQHandler+0x29e>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003924:	2b00      	cmp	r3, #0
 8003926:	d028      	beq.n	800397a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 ff16 	bl	800475a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800392e:	e024      	b.n	800397a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0x27a>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_I2C_EV_IRQHandler+0x27a>
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 ff24 	bl	800479c <I2C_SlaveReceive_RXNE>
 8003954:	e012      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 ff54 	bl	8004818 <I2C_SlaveReceive_BTF>
 8003970:	e004      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800397a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b08a      	sub	sp, #40	@ 0x28
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_I2C_ER_IRQHandler+0x4a>
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <HAL_I2C_ER_IRQHandler+0x70>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80039f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d03e      	beq.n	8003a7a <HAL_I2C_ER_IRQHandler+0xf8>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d039      	beq.n	8003a7a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003a06:	7efb      	ldrb	r3, [r7, #27]
 8003a08:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a18:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a20:	7ebb      	ldrb	r3, [r7, #26]
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d112      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xca>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xca>
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b21      	cmp	r3, #33	@ 0x21
 8003a30:	d008      	beq.n	8003a44 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b29      	cmp	r3, #41	@ 0x29
 8003a36:	d005      	beq.n	8003a44 <HAL_I2C_ER_IRQHandler+0xc2>
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	2b28      	cmp	r3, #40	@ 0x28
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b21      	cmp	r3, #33	@ 0x21
 8003a42:	d103      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f001 f881 	bl	8004b4c <I2C_Slave_AF>
 8003a4a:	e016      	b.n	8003a7a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a54:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a5e:	7efb      	ldrb	r3, [r7, #27]
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d002      	beq.n	8003a6a <HAL_I2C_ER_IRQHandler+0xe8>
 8003a64:	7efb      	ldrb	r3, [r7, #27]
 8003a66:	2b40      	cmp	r3, #64	@ 0x40
 8003a68:	d107      	bne.n	8003a7a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a78:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_I2C_ER_IRQHandler+0x11e>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003a9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f001 f8be 	bl	8004c34 <I2C_ITError>
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3728      	adds	r7, #40	@ 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ba6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d150      	bne.n	8003c58 <I2C_MasterTransmit_TXE+0xc8>
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b21      	cmp	r3, #33	@ 0x21
 8003bba:	d14d      	bne.n	8003c58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d01d      	beq.n	8003bfe <I2C_MasterTransmit_TXE+0x6e>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d01a      	beq.n	8003bfe <I2C_MasterTransmit_TXE+0x6e>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bce:	d016      	beq.n	8003bfe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bde:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2211      	movs	r2, #17
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ff62 	bl	8003ac0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bfc:	e060      	b.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d107      	bne.n	8003c48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff7d 	bl	8003b40 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c46:	e03b      	b.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff35 	bl	8003ac0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c56:	e033      	b.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b21      	cmp	r3, #33	@ 0x21
 8003c5c:	d005      	beq.n	8003c6a <I2C_MasterTransmit_TXE+0xda>
 8003c5e:	7bbb      	ldrb	r3, [r7, #14]
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d12d      	bne.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b22      	cmp	r3, #34	@ 0x22
 8003c68:	d12a      	bne.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c84:	e01c      	b.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b40      	cmp	r3, #64	@ 0x40
 8003c90:	d103      	bne.n	8003c9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f88e 	bl	8003db4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003c98:	e012      	b.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cbe:	e7ff      	b.n	8003cc0 <I2C_MasterTransmit_TXE+0x130>
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b21      	cmp	r3, #33	@ 0x21
 8003ce0:	d164      	bne.n	8003dac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d10:	e04c      	b.n	8003dac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d01d      	beq.n	8003d54 <I2C_MasterTransmit_BTF+0x8c>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d01a      	beq.n	8003d54 <I2C_MasterTransmit_BTF+0x8c>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d24:	d016      	beq.n	8003d54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2211      	movs	r2, #17
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff feb7 	bl	8003ac0 <HAL_I2C_MasterTxCpltCallback>
}
 8003d52:	e02b      	b.n	8003dac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d107      	bne.n	8003d9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fed2 	bl	8003b40 <HAL_I2C_MemTxCpltCallback>
}
 8003d9c:	e006      	b.n	8003dac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe8a 	bl	8003ac0 <HAL_I2C_MasterTxCpltCallback>
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d11d      	bne.n	8003e08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d10b      	bne.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003dea:	e077      	b.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	121b      	asrs	r3, r3, #8
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e06:	e069      	b.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10b      	bne.n	8003e28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e26:	e059      	b.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d152      	bne.n	8003ed6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b22      	cmp	r3, #34	@ 0x22
 8003e34:	d10d      	bne.n	8003e52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e50:	e044      	b.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d015      	beq.n	8003e88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b21      	cmp	r3, #33	@ 0x21
 8003e60:	d112      	bne.n	8003e88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	781a      	ldrb	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e86:	e029      	b.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d124      	bne.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b21      	cmp	r3, #33	@ 0x21
 8003e96:	d121      	bne.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ea6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fe36 	bl	8003b40 <HAL_I2C_MemTxCpltCallback>
}
 8003ed4:	e002      	b.n	8003edc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fe ff2a 	bl	8002d30 <I2C_Flush_DR>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b22      	cmp	r3, #34	@ 0x22
 8003ef6:	f040 80b9 	bne.w	800406c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d921      	bls.n	8003f52 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	f040 8096 	bne.w	800406c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f50:	e08c      	b.n	800406c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d07f      	beq.n	800405a <I2C_MasterReceive_RXNE+0x176>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d002      	beq.n	8003f66 <I2C_MasterReceive_RXNE+0x82>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d179      	bne.n	800405a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f001 fd3c 	bl	80059e4 <I2C_WaitOnSTOPRequestThroughIT>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d14c      	bne.n	800400c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f80:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d10a      	bne.n	8003fe2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fdba 	bl	8003b54 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fe0:	e044      	b.n	800406c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d002      	beq.n	8003ff6 <I2C_MasterReceive_RXNE+0x112>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d103      	bne.n	8003ffe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ffc:	e002      	b.n	8004004 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2212      	movs	r2, #18
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fd65 	bl	8003ad4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800400a:	e02f      	b.n	800406c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800401a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fd88 	bl	8003b68 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004058:	e008      	b.n	800406c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004068:	605a      	str	r2, [r3, #4]
}
 800406a:	e7ff      	b.n	800406c <I2C_MasterReceive_RXNE+0x188>
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b04      	cmp	r3, #4
 800408a:	d11b      	bne.n	80040c4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80040c2:	e0c8      	b.n	8004256 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d129      	bne.n	8004122 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d00a      	beq.n	80040fa <I2C_MasterReceive_BTF+0x86>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d007      	beq.n	80040fa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004120:	e099      	b.n	8004256 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	f040 8081 	bne.w	8004230 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d002      	beq.n	800413a <I2C_MasterReceive_BTF+0xc6>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b10      	cmp	r3, #16
 8004138:	d108      	bne.n	800414c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e019      	b.n	8004180 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b04      	cmp	r3, #4
 8004150:	d002      	beq.n	8004158 <I2C_MasterReceive_BTF+0xe4>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d108      	bne.n	800416a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e00a      	b.n	8004180 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b10      	cmp	r3, #16
 800416e:	d007      	beq.n	8004180 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80041da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d10a      	bne.n	8004206 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fca8 	bl	8003b54 <HAL_I2C_MemRxCpltCallback>
}
 8004204:	e027      	b.n	8004256 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d002      	beq.n	800421a <I2C_MasterReceive_BTF+0x1a6>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b20      	cmp	r3, #32
 8004218:	d103      	bne.n	8004222 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004220:	e002      	b.n	8004228 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2212      	movs	r2, #18
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fc53 	bl	8003ad4 <HAL_I2C_MasterRxCpltCallback>
}
 800422e:	e012      	b.n	8004256 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d117      	bne.n	80042a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800428a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800428c:	e067      	b.n	800435e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]
}
 80042a0:	e05d      	b.n	800435e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042aa:	d133      	bne.n	8004314 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b21      	cmp	r3, #33	@ 0x21
 80042b6:	d109      	bne.n	80042cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042c8:	611a      	str	r2, [r3, #16]
 80042ca:	e008      	b.n	80042de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <I2C_Master_SB+0x92>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d108      	bne.n	8004302 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d032      	beq.n	800435e <I2C_Master_SB+0x100>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02d      	beq.n	800435e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004310:	605a      	str	r2, [r3, #4]
}
 8004312:	e024      	b.n	800435e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10e      	bne.n	800433a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004320:	b29b      	uxth	r3, r3
 8004322:	11db      	asrs	r3, r3, #7
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f003 0306 	and.w	r3, r3, #6
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f063 030f 	orn	r3, r3, #15
 8004330:	b2da      	uxtb	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	611a      	str	r2, [r3, #16]
}
 8004338:	e011      	b.n	800435e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10d      	bne.n	800435e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	b29b      	uxth	r3, r3
 8004348:	11db      	asrs	r3, r3, #7
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 0306 	and.w	r3, r3, #6
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f063 030e 	orn	r3, r3, #14
 8004356:	b2da      	uxtb	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	611a      	str	r2, [r3, #16]
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	b2da      	uxtb	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <I2C_Master_ADD10+0x26>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d108      	bne.n	80043a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <I2C_Master_ADD10+0x48>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b0:	605a      	str	r2, [r3, #4]
  }
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b091      	sub	sp, #68	@ 0x44
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b22      	cmp	r3, #34	@ 0x22
 80043e6:	f040 8169 	bne.w	80046bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10f      	bne.n	8004412 <I2C_Master_ADDR+0x54>
 80043f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80043f6:	2b40      	cmp	r3, #64	@ 0x40
 80043f8:	d10b      	bne.n	8004412 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	633b      	str	r3, [r7, #48]	@ 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	633b      	str	r3, [r7, #48]	@ 0x30
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	e160      	b.n	80046d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11d      	bne.n	8004456 <I2C_Master_ADDR+0x98>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004422:	d118      	bne.n	8004456 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004424:	2300      	movs	r3, #0
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004448:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	651a      	str	r2, [r3, #80]	@ 0x50
 8004454:	e13e      	b.n	80046d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004460:	2300      	movs	r3, #0
 8004462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e115      	b.n	80046b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 808a 	bne.w	80045a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800449a:	d137      	bne.n	800450c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ba:	d113      	bne.n	80044e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	e0e7      	b.n	80046b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e0d3      	b.n	80046b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800450c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450e:	2b08      	cmp	r3, #8
 8004510:	d02e      	beq.n	8004570 <I2C_Master_ADDR+0x1b2>
 8004512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004514:	2b20      	cmp	r3, #32
 8004516:	d02b      	beq.n	8004570 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451a:	2b12      	cmp	r3, #18
 800451c:	d102      	bne.n	8004524 <I2C_Master_ADDR+0x166>
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	2b01      	cmp	r3, #1
 8004522:	d125      	bne.n	8004570 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004526:	2b04      	cmp	r3, #4
 8004528:	d00e      	beq.n	8004548 <I2C_Master_ADDR+0x18a>
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	2b02      	cmp	r3, #2
 800452e:	d00b      	beq.n	8004548 <I2C_Master_ADDR+0x18a>
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	2b10      	cmp	r3, #16
 8004534:	d008      	beq.n	8004548 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e007      	b.n	8004558 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004556:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	e0a1      	b.n	80046b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800457e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e085      	b.n	80046b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d14d      	bne.n	800464e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d016      	beq.n	80045e6 <I2C_Master_ADDR+0x228>
 80045b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d013      	beq.n	80045e6 <I2C_Master_ADDR+0x228>
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d010      	beq.n	80045e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e007      	b.n	80045f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004604:	d117      	bne.n	8004636 <I2C_Master_ADDR+0x278>
 8004606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004608:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800460c:	d00b      	beq.n	8004626 <I2C_Master_ADDR+0x268>
 800460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004610:	2b01      	cmp	r3, #1
 8004612:	d008      	beq.n	8004626 <I2C_Master_ADDR+0x268>
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	2b08      	cmp	r3, #8
 8004618:	d005      	beq.n	8004626 <I2C_Master_ADDR+0x268>
 800461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461c:	2b10      	cmp	r3, #16
 800461e:	d002      	beq.n	8004626 <I2C_Master_ADDR+0x268>
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	2b20      	cmp	r3, #32
 8004624:	d107      	bne.n	8004636 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004634:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	e032      	b.n	80046b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800466c:	d117      	bne.n	800469e <I2C_Master_ADDR+0x2e0>
 800466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004670:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004674:	d00b      	beq.n	800468e <I2C_Master_ADDR+0x2d0>
 8004676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004678:	2b01      	cmp	r3, #1
 800467a:	d008      	beq.n	800468e <I2C_Master_ADDR+0x2d0>
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	2b08      	cmp	r3, #8
 8004680:	d005      	beq.n	800468e <I2C_Master_ADDR+0x2d0>
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	2b10      	cmp	r3, #16
 8004686:	d002      	beq.n	800468e <I2C_Master_ADDR+0x2d0>
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	2b20      	cmp	r3, #32
 800468c:	d107      	bne.n	800469e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800469c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80046ba:	e00b      	b.n	80046d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	e7ff      	b.n	80046d4 <I2C_Master_ADDR+0x316>
 80046d4:	bf00      	nop
 80046d6:	3744      	adds	r7, #68	@ 0x44
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d02b      	beq.n	8004752 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d114      	bne.n	8004752 <I2C_SlaveTransmit_TXE+0x72>
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b29      	cmp	r3, #41	@ 0x29
 800472c:	d111      	bne.n	8004752 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800473c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2221      	movs	r2, #33	@ 0x21
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2228      	movs	r2, #40	@ 0x28
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff f9cb 	bl	8003ae8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d011      	beq.n	8004790 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d02c      	beq.n	8004810 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <I2C_SlaveReceive_RXNE+0x74>
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ea:	d111      	bne.n	8004810 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2222      	movs	r2, #34	@ 0x22
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2228      	movs	r2, #40	@ 0x28
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff f976 	bl	8003afc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d012      	beq.n	8004850 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004876:	2b28      	cmp	r3, #40	@ 0x28
 8004878:	d125      	bne.n	80048c6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004888:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	81bb      	strh	r3, [r7, #12]
 80048a8:	e002      	b.n	80048b0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80048b8:	89ba      	ldrh	r2, [r7, #12]
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff f926 	bl	8003b10 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048c4:	e00e      	b.n	80048e4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800490a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004938:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004948:	d172      	bne.n	8004a30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b22      	cmp	r3, #34	@ 0x22
 800494e:	d002      	beq.n	8004956 <I2C_Slave_STOPF+0x6a>
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b2a      	cmp	r3, #42	@ 0x2a
 8004954:	d135      	bne.n	80049c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f043 0204 	orr.w	r2, r3, #4
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004988:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd fdf2 	bl	8002578 <HAL_DMA_GetState>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d049      	beq.n	8004a2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	4a69      	ldr	r2, [pc, #420]	@ (8004b44 <I2C_Slave_STOPF+0x258>)
 80049a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd fc3a 	bl	8002220 <HAL_DMA_Abort_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d03d      	beq.n	8004a2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049bc:	4610      	mov	r0, r2
 80049be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049c0:	e035      	b.n	8004a2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f043 0204 	orr.w	r2, r3, #4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd fdbc 	bl	8002578 <HAL_DMA_GetState>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d014      	beq.n	8004a30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8004b44 <I2C_Slave_STOPF+0x258>)
 8004a0c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd fc04 	bl	8002220 <HAL_DMA_Abort_IT>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4798      	blx	r3
 8004a2c:	e000      	b.n	8004a30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03e      	beq.n	8004ab8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d112      	bne.n	8004a6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b40      	cmp	r3, #64	@ 0x40
 8004a7a:	d112      	bne.n	8004aa2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	f043 0204 	orr.w	r2, r3, #4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8b7 	bl	8004c34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ac6:	e039      	b.n	8004b3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004acc:	d109      	bne.n	8004ae2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2228      	movs	r2, #40	@ 0x28
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff f80d 	bl	8003afc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b28      	cmp	r3, #40	@ 0x28
 8004aec:	d111      	bne.n	8004b12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a15      	ldr	r2, [pc, #84]	@ (8004b48 <I2C_Slave_STOPF+0x25c>)
 8004af2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff f80e 	bl	8003b2c <HAL_I2C_ListenCpltCallback>
}
 8004b10:	e014      	b.n	8004b3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	2b22      	cmp	r3, #34	@ 0x22
 8004b18:	d002      	beq.n	8004b20 <I2C_Slave_STOPF+0x234>
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b22      	cmp	r3, #34	@ 0x22
 8004b1e:	d10d      	bne.n	8004b3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fe ffe0 	bl	8003afc <HAL_I2C_SlaveRxCpltCallback>
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	08005541 	.word	0x08005541
 8004b48:	ffff0000 	.word	0xffff0000

08004b4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d002      	beq.n	8004b6e <I2C_Slave_AF+0x22>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d129      	bne.n	8004bc2 <I2C_Slave_AF+0x76>
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b28      	cmp	r3, #40	@ 0x28
 8004b72:	d126      	bne.n	8004bc2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a2e      	ldr	r2, [pc, #184]	@ (8004c30 <I2C_Slave_AF+0xe4>)
 8004b78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fe ffb6 	bl	8003b2c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004bc0:	e031      	b.n	8004c26 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b21      	cmp	r3, #33	@ 0x21
 8004bc6:	d129      	bne.n	8004c1c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <I2C_Slave_AF+0xe4>)
 8004bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2221      	movs	r2, #33	@ 0x21
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bf2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bfc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c0c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fe f88e 	bl	8002d30 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fe ff67 	bl	8003ae8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c1a:	e004      	b.n	8004c26 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c24:	615a      	str	r2, [r3, #20]
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	ffff0000 	.word	0xffff0000

08004c34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d002      	beq.n	8004c58 <I2C_ITError+0x24>
 8004c52:	7bbb      	ldrb	r3, [r7, #14]
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	d10a      	bne.n	8004c6e <I2C_ITError+0x3a>
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	2b22      	cmp	r3, #34	@ 0x22
 8004c5c:	d107      	bne.n	8004c6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c74:	2b28      	cmp	r3, #40	@ 0x28
 8004c76:	d107      	bne.n	8004c88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2228      	movs	r2, #40	@ 0x28
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c86:	e015      	b.n	8004cb4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c96:	d00a      	beq.n	8004cae <I2C_ITError+0x7a>
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b60      	cmp	r3, #96	@ 0x60
 8004c9c:	d007      	beq.n	8004cae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc2:	d162      	bne.n	8004d8a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d020      	beq.n	8004d24 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8004e90 <I2C_ITError+0x25c>)
 8004ce8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd fa96 	bl	8002220 <HAL_DMA_Abort_IT>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8089 	beq.w	8004e0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4798      	blx	r3
 8004d22:	e074      	b.n	8004e0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	4a59      	ldr	r2, [pc, #356]	@ (8004e90 <I2C_ITError+0x25c>)
 8004d2a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd fa75 	bl	8002220 <HAL_DMA_Abort_IT>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d068      	beq.n	8004e0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b40      	cmp	r3, #64	@ 0x40
 8004d48:	d10b      	bne.n	8004d62 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d84:	4610      	mov	r0, r2
 8004d86:	4798      	blx	r3
 8004d88:	e041      	b.n	8004e0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b60      	cmp	r3, #96	@ 0x60
 8004d94:	d125      	bne.n	8004de2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dae:	2b40      	cmp	r3, #64	@ 0x40
 8004db0:	d10b      	bne.n	8004dca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fe fece 	bl	8003b7c <HAL_I2C_AbortCpltCallback>
 8004de0:	e015      	b.n	8004e0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d10b      	bne.n	8004e08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fe fead 	bl	8003b68 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d109      	bne.n	8004e3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d113      	bne.n	8004e88 <I2C_ITError+0x254>
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b28      	cmp	r3, #40	@ 0x28
 8004e64:	d110      	bne.n	8004e88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a0a      	ldr	r2, [pc, #40]	@ (8004e94 <I2C_ITError+0x260>)
 8004e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fe fe52 	bl	8003b2c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	08005541 	.word	0x08005541
 8004e94:	ffff0000 	.word	0xffff0000

08004e98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d006      	beq.n	8004ec2 <I2C_MasterRequestWrite+0x2a>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d003      	beq.n	8004ec2 <I2C_MasterRequestWrite+0x2a>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ec0:	d108      	bne.n	8004ed4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e00b      	b.n	8004eec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed8:	2b12      	cmp	r3, #18
 8004eda:	d107      	bne.n	8004eec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fbc9 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00d      	beq.n	8004f20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f12:	d103      	bne.n	8004f1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e035      	b.n	8004f8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f28:	d108      	bne.n	8004f3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f2a:	897b      	ldrh	r3, [r7, #10]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f38:	611a      	str	r2, [r3, #16]
 8004f3a:	e01b      	b.n	8004f74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f3c:	897b      	ldrh	r3, [r7, #10]
 8004f3e:	11db      	asrs	r3, r3, #7
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0306 	and.w	r3, r3, #6
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f063 030f 	orn	r3, r3, #15
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	490e      	ldr	r1, [pc, #56]	@ (8004f94 <I2C_MasterRequestWrite+0xfc>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fc12 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e010      	b.n	8004f8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f6a:	897b      	ldrh	r3, [r7, #10]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4907      	ldr	r1, [pc, #28]	@ (8004f98 <I2C_MasterRequestWrite+0x100>)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fc02 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	00010008 	.word	0x00010008
 8004f98:	00010002 	.word	0x00010002

08004f9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d006      	beq.n	8004fd6 <I2C_MasterRequestRead+0x3a>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d003      	beq.n	8004fd6 <I2C_MasterRequestRead+0x3a>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fd4:	d108      	bne.n	8004fe8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e00b      	b.n	8005000 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	2b11      	cmp	r3, #17
 8004fee:	d107      	bne.n	8005000 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fb3f 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005026:	d103      	bne.n	8005030 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800502e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e079      	b.n	8005128 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800503c:	d108      	bne.n	8005050 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800503e:	897b      	ldrh	r3, [r7, #10]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]
 800504e:	e05f      	b.n	8005110 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005050:	897b      	ldrh	r3, [r7, #10]
 8005052:	11db      	asrs	r3, r3, #7
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0306 	and.w	r3, r3, #6
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f063 030f 	orn	r3, r3, #15
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4930      	ldr	r1, [pc, #192]	@ (8005130 <I2C_MasterRequestRead+0x194>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fb88 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e054      	b.n	8005128 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800507e:	897b      	ldrh	r3, [r7, #10]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4929      	ldr	r1, [pc, #164]	@ (8005134 <I2C_MasterRequestRead+0x198>)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fb78 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e044      	b.n	8005128 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fadd 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ea:	d103      	bne.n	80050f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050f2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e017      	b.n	8005128 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050f8:	897b      	ldrh	r3, [r7, #10]
 80050fa:	11db      	asrs	r3, r3, #7
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0306 	and.w	r3, r3, #6
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f063 030e 	orn	r3, r3, #14
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4907      	ldr	r1, [pc, #28]	@ (8005134 <I2C_MasterRequestRead+0x198>)
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fb34 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	00010008 	.word	0x00010008
 8005134:	00010002 	.word	0x00010002

08005138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	4608      	mov	r0, r1
 8005142:	4611      	mov	r1, r2
 8005144:	461a      	mov	r2, r3
 8005146:	4603      	mov	r3, r0
 8005148:	817b      	strh	r3, [r7, #10]
 800514a:	460b      	mov	r3, r1
 800514c:	813b      	strh	r3, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2200      	movs	r2, #0
 800517a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fa86 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005198:	d103      	bne.n	80051a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0aa      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051a6:	897b      	ldrh	r3, [r7, #10]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	4952      	ldr	r1, [pc, #328]	@ (8005304 <I2C_RequestMemoryRead+0x1cc>)
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fae1 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e097      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e4:	6a39      	ldr	r1, [r7, #32]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fb6c 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d107      	bne.n	800520a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e076      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d105      	bne.n	8005220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005214:	893b      	ldrh	r3, [r7, #8]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	e021      	b.n	8005264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005220:	893b      	ldrh	r3, [r7, #8]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	b29b      	uxth	r3, r3
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005230:	6a39      	ldr	r1, [r7, #32]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fb46 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00d      	beq.n	800525a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	2b04      	cmp	r3, #4
 8005244:	d107      	bne.n	8005256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e050      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525a:	893b      	ldrh	r3, [r7, #8]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005266:	6a39      	ldr	r1, [r7, #32]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fb2b 	bl	80058c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	2b04      	cmp	r3, #4
 800527a:	d107      	bne.n	800528c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800528a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e035      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800529e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f9ef 	bl	8005690 <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c6:	d103      	bne.n	80052d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e013      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052d4:	897b      	ldrh	r3, [r7, #10]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	4906      	ldr	r1, [pc, #24]	@ (8005304 <I2C_RequestMemoryRead+0x1cc>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fa4a 	bl	8005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	00010002 	.word	0x00010002

08005308 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005324:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800533a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005348:	2200      	movs	r2, #0
 800534a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005358:	2200      	movs	r2, #0
 800535a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005362:	2b21      	cmp	r3, #33	@ 0x21
 8005364:	d007      	beq.n	8005376 <I2C_DMAXferCplt+0x6e>
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800536c:	2b22      	cmp	r3, #34	@ 0x22
 800536e:	d131      	bne.n	80053d4 <I2C_DMAXferCplt+0xcc>
 8005370:	7cbb      	ldrb	r3, [r7, #18]
 8005372:	2b20      	cmp	r3, #32
 8005374:	d12e      	bne.n	80053d4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005384:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2200      	movs	r2, #0
 800538a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	2b29      	cmp	r3, #41	@ 0x29
 8005390:	d10a      	bne.n	80053a8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2221      	movs	r2, #33	@ 0x21
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2228      	movs	r2, #40	@ 0x28
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053a0:	6978      	ldr	r0, [r7, #20]
 80053a2:	f7fe fba1 	bl	8003ae8 <HAL_I2C_SlaveTxCpltCallback>
 80053a6:	e00c      	b.n	80053c2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80053ac:	d109      	bne.n	80053c2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2222      	movs	r2, #34	@ 0x22
 80053b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2228      	movs	r2, #40	@ 0x28
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053bc:	6978      	ldr	r0, [r7, #20]
 80053be:	f7fe fb9d 	bl	8003afc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80053d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80053d2:	e074      	b.n	80054be <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d06e      	beq.n	80054be <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005408:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005410:	d009      	beq.n	8005426 <I2C_DMAXferCplt+0x11e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d006      	beq.n	8005426 <I2C_DMAXferCplt+0x11e>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800541e:	d002      	beq.n	8005426 <I2C_DMAXferCplt+0x11e>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b20      	cmp	r3, #32
 8005424:	d107      	bne.n	8005436 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005434:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005444:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005454:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005464:	6978      	ldr	r0, [r7, #20]
 8005466:	f7fe fb7f 	bl	8003b68 <HAL_I2C_ErrorCallback>
}
 800546a:	e028      	b.n	80054be <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b40      	cmp	r3, #64	@ 0x40
 800547e:	d10a      	bne.n	8005496 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7fe fb60 	bl	8003b54 <HAL_I2C_MemRxCpltCallback>
}
 8005494:	e013      	b.n	80054be <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d002      	beq.n	80054aa <I2C_DMAXferCplt+0x1a2>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d103      	bne.n	80054b2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80054b0:	e002      	b.n	80054b8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2212      	movs	r2, #18
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f7fe fb0b 	bl	8003ad4 <HAL_I2C_MasterRxCpltCallback>
}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e0:	2200      	movs	r2, #0
 80054e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	2200      	movs	r2, #0
 80054f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fd f84d 	bl	8002594 <HAL_DMA_GetError>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d01b      	beq.n	8005538 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800550e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	f043 0210 	orr.w	r2, r3, #16
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7fe fb18 	bl	8003b68 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005558:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800555a:	4b4b      	ldr	r3, [pc, #300]	@ (8005688 <I2C_DMAAbort+0x148>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	4a4a      	ldr	r2, [pc, #296]	@ (800568c <I2C_DMAAbort+0x14c>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	0a1a      	lsrs	r2, r3, #8
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	00da      	lsls	r2, r3, #3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005586:	e00a      	b.n	800559e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800559c:	d0ea      	beq.n	8005574 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055aa:	2200      	movs	r2, #0
 80055ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ba:	2200      	movs	r2, #0
 80055bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2200      	movs	r2, #0
 80055d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e0:	2200      	movs	r2, #0
 80055e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	2200      	movs	r2, #0
 80055f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b60      	cmp	r3, #96	@ 0x60
 800560e:	d10e      	bne.n	800562e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2200      	movs	r2, #0
 8005624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7fe faa8 	bl	8003b7c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800562c:	e027      	b.n	800567e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005634:	2b28      	cmp	r3, #40	@ 0x28
 8005636:	d117      	bne.n	8005668 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005656:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2228      	movs	r2, #40	@ 0x28
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005666:	e007      	b.n	8005678 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	f7fe fa75 	bl	8003b68 <HAL_I2C_ErrorCallback>
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	2000001c 	.word	0x2000001c
 800568c:	14f8b589 	.word	0x14f8b589

08005690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a0:	e048      	b.n	8005734 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d044      	beq.n	8005734 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056aa:	f7fc fb25 	bl	8001cf8 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d302      	bcc.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d139      	bne.n	8005734 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10d      	bne.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	43da      	mvns	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	e00c      	b.n	8005700 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	429a      	cmp	r2, r3
 8005704:	d116      	bne.n	8005734 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e023      	b.n	800577c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	0c1b      	lsrs	r3, r3, #16
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d10d      	bne.n	800575a <I2C_WaitOnFlagUntilTimeout+0xca>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	43da      	mvns	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	e00c      	b.n	8005774 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	43da      	mvns	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4013      	ands	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	429a      	cmp	r2, r3
 8005778:	d093      	beq.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005792:	e071      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a2:	d123      	bne.n	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	f043 0204 	orr.w	r2, r3, #4
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e067      	b.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d041      	beq.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fc fa80 	bl	8001cf8 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d136      	bne.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d10c      	bne.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	43da      	mvns	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	e00b      	b.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	43da      	mvns	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e021      	b.n	80058bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d10c      	bne.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	43da      	mvns	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e00b      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	43da      	mvns	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4013      	ands	r3, r2
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f47f af6d 	bne.w	8005794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d0:	e034      	b.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f915 	bl	8005b02 <I2C_IsAcknowledgeFailed>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e034      	b.n	800594c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d028      	beq.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ea:	f7fc fa05 	bl	8001cf8 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d302      	bcc.n	8005900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11d      	bne.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d016      	beq.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e007      	b.n	800594c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005946:	2b80      	cmp	r3, #128	@ 0x80
 8005948:	d1c3      	bne.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005960:	e034      	b.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f8cd 	bl	8005b02 <I2C_IsAcknowledgeFailed>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e034      	b.n	80059dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d028      	beq.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc f9bd 	bl	8001cf8 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11d      	bne.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d016      	beq.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e007      	b.n	80059dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d1c3      	bne.n	8005962 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059f0:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	4a13      	ldr	r2, [pc, #76]	@ (8005a44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	0a1a      	lsrs	r2, r3, #8
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d107      	bne.n	8005a22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e008      	b.n	8005a34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a30:	d0e9      	beq.n	8005a06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	2000001c 	.word	0x2000001c
 8005a44:	14f8b589 	.word	0x14f8b589

08005a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a54:	e049      	b.n	8005aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d119      	bne.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e030      	b.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7fc f92e 	bl	8001cf8 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11d      	bne.n	8005aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab8:	2b40      	cmp	r3, #64	@ 0x40
 8005aba:	d016      	beq.n	8005aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e007      	b.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b40      	cmp	r3, #64	@ 0x40
 8005af6:	d1ae      	bne.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b18:	d11b      	bne.n	8005b52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	f043 0204 	orr.w	r2, r3, #4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005b70:	d103      	bne.n	8005b7a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b78:	e007      	b.n	8005b8a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005b82:	d102      	bne.n	8005b8a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2208      	movs	r2, #8
 8005b88:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e267      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d075      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bb6:	4b88      	ldr	r3, [pc, #544]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d00c      	beq.n	8005bdc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc2:	4b85      	ldr	r3, [pc, #532]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d112      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bce:	4b82      	ldr	r3, [pc, #520]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bda:	d10b      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bdc:	4b7e      	ldr	r3, [pc, #504]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05b      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x108>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d157      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e242      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCC_OscConfig+0x74>
 8005bfe:	4b76      	ldr	r3, [pc, #472]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a75      	ldr	r2, [pc, #468]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e01d      	b.n	8005c48 <HAL_RCC_OscConfig+0xb0>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c14:	d10c      	bne.n	8005c30 <HAL_RCC_OscConfig+0x98>
 8005c16:	4b70      	ldr	r3, [pc, #448]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a6f      	ldr	r2, [pc, #444]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a6c      	ldr	r2, [pc, #432]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e00b      	b.n	8005c48 <HAL_RCC_OscConfig+0xb0>
 8005c30:	4b69      	ldr	r3, [pc, #420]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a68      	ldr	r2, [pc, #416]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4b66      	ldr	r3, [pc, #408]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a65      	ldr	r2, [pc, #404]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fc f852 	bl	8001cf8 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fc f84e 	bl	8001cf8 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	@ 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e207      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0xc0>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fc f83e 	bl	8001cf8 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fc f83a 	bl	8001cf8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	@ 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e1f3      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c92:	4b51      	ldr	r3, [pc, #324]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0xe8>
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d063      	beq.n	8005d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cae:	4b4a      	ldr	r3, [pc, #296]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cba:	4b47      	ldr	r3, [pc, #284]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d11c      	bne.n	8005d00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cc6:	4b44      	ldr	r3, [pc, #272]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d116      	bne.n	8005d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd2:	4b41      	ldr	r3, [pc, #260]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_RCC_OscConfig+0x152>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d001      	beq.n	8005cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e1c7      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cea:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	4937      	ldr	r1, [pc, #220]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfe:	e03a      	b.n	8005d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d020      	beq.n	8005d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d08:	4b34      	ldr	r3, [pc, #208]	@ (8005ddc <HAL_RCC_OscConfig+0x244>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0e:	f7fb fff3 	bl	8001cf8 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d16:	f7fb ffef 	bl	8001cf8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e1a8      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d28:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d34:	4b28      	ldr	r3, [pc, #160]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4925      	ldr	r1, [pc, #148]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]
 8005d48:	e015      	b.n	8005d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d4a:	4b24      	ldr	r3, [pc, #144]	@ (8005ddc <HAL_RCC_OscConfig+0x244>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fb ffd2 	bl	8001cf8 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d58:	f7fb ffce 	bl	8001cf8 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e187      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d036      	beq.n	8005df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d8a:	4b15      	ldr	r3, [pc, #84]	@ (8005de0 <HAL_RCC_OscConfig+0x248>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d90:	f7fb ffb2 	bl	8001cf8 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d98:	f7fb ffae 	bl	8001cf8 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e167      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005daa:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd8 <HAL_RCC_OscConfig+0x240>)
 8005dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f0      	beq.n	8005d98 <HAL_RCC_OscConfig+0x200>
 8005db6:	e01b      	b.n	8005df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCC_OscConfig+0x248>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dbe:	f7fb ff9b 	bl	8001cf8 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc4:	e00e      	b.n	8005de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc6:	f7fb ff97 	bl	8001cf8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d907      	bls.n	8005de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e150      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	42470000 	.word	0x42470000
 8005de0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de4:	4b88      	ldr	r3, [pc, #544]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ea      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8097 	beq.w	8005f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e02:	4b81      	ldr	r3, [pc, #516]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	4b7d      	ldr	r3, [pc, #500]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	4a7c      	ldr	r2, [pc, #496]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e26:	60bb      	str	r3, [r7, #8]
 8005e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2e:	4b77      	ldr	r3, [pc, #476]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d118      	bne.n	8005e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e3a:	4b74      	ldr	r3, [pc, #464]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a73      	ldr	r2, [pc, #460]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e46:	f7fb ff57 	bl	8001cf8 <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e4e:	f7fb ff53 	bl	8001cf8 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e10c      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e60:	4b6a      	ldr	r3, [pc, #424]	@ (800600c <HAL_RCC_OscConfig+0x474>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d106      	bne.n	8005e82 <HAL_RCC_OscConfig+0x2ea>
 8005e74:	4b64      	ldr	r3, [pc, #400]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e78:	4a63      	ldr	r2, [pc, #396]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
 8005e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e80:	e01c      	b.n	8005ebc <HAL_RCC_OscConfig+0x324>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x30c>
 8005e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e90:	f043 0304 	orr.w	r3, r3, #4
 8005e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e96:	4b5c      	ldr	r3, [pc, #368]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCC_OscConfig+0x324>
 8005ea4:	4b58      	ldr	r3, [pc, #352]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea8:	4a57      	ldr	r2, [pc, #348]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eb0:	4b55      	ldr	r3, [pc, #340]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb4:	4a54      	ldr	r2, [pc, #336]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005eb6:	f023 0304 	bic.w	r3, r3, #4
 8005eba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fb ff18 	bl	8001cf8 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eca:	e00a      	b.n	8005ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f7fb ff14 	bl	8001cf8 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e0cb      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee2:	4b49      	ldr	r3, [pc, #292]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0ee      	beq.n	8005ecc <HAL_RCC_OscConfig+0x334>
 8005eee:	e014      	b.n	8005f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef0:	f7fb ff02 	bl	8001cf8 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef8:	f7fb fefe 	bl	8001cf8 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0b5      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ee      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f20:	4b39      	ldr	r3, [pc, #228]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	4a38      	ldr	r2, [pc, #224]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80a1 	beq.w	8006078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f36:	4b34      	ldr	r3, [pc, #208]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 030c 	and.w	r3, r3, #12
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d05c      	beq.n	8005ffc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d141      	bne.n	8005fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f4a:	4b31      	ldr	r3, [pc, #196]	@ (8006010 <HAL_RCC_OscConfig+0x478>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f50:	f7fb fed2 	bl	8001cf8 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fb fece 	bl	8001cf8 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e087      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6a:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	019b      	lsls	r3, r3, #6
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	041b      	lsls	r3, r3, #16
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	061b      	lsls	r3, r3, #24
 8005f9a:	491b      	ldr	r1, [pc, #108]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8006010 <HAL_RCC_OscConfig+0x478>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa6:	f7fb fea7 	bl	8001cf8 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fae:	f7fb fea3 	bl	8001cf8 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e05c      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc0:	4b11      	ldr	r3, [pc, #68]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x416>
 8005fcc:	e054      	b.n	8006078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fce:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <HAL_RCC_OscConfig+0x478>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7fb fe90 	bl	8001cf8 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fdc:	f7fb fe8c 	bl	8001cf8 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e045      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCC_OscConfig+0x444>
 8005ffa:	e03d      	b.n	8006078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d107      	bne.n	8006014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e038      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
 8006008:	40023800 	.word	0x40023800
 800600c:	40007000 	.word	0x40007000
 8006010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006014:	4b1b      	ldr	r3, [pc, #108]	@ (8006084 <HAL_RCC_OscConfig+0x4ec>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d028      	beq.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d121      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603a:	429a      	cmp	r2, r3
 800603c:	d11a      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006044:	4013      	ands	r3, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800604a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800604c:	4293      	cmp	r3, r2
 800604e:	d111      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	3b01      	subs	r3, #1
 800605e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d107      	bne.n	8006074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d001      	beq.n	8006078 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800

08006088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0cc      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800609c:	4b68      	ldr	r3, [pc, #416]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d90c      	bls.n	80060c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b65      	ldr	r3, [pc, #404]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b63      	ldr	r3, [pc, #396]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0b8      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d020      	beq.n	8006112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060dc:	4b59      	ldr	r3, [pc, #356]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4a58      	ldr	r2, [pc, #352]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f4:	4b53      	ldr	r3, [pc, #332]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4a52      	ldr	r2, [pc, #328]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006100:	4b50      	ldr	r3, [pc, #320]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	494d      	ldr	r1, [pc, #308]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d044      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006126:	4b47      	ldr	r3, [pc, #284]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d119      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e07f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d003      	beq.n	8006146 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006142:	2b03      	cmp	r3, #3
 8006144:	d107      	bne.n	8006156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e06f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006156:	4b3b      	ldr	r3, [pc, #236]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e067      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006166:	4b37      	ldr	r3, [pc, #220]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f023 0203 	bic.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4934      	ldr	r1, [pc, #208]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006178:	f7fb fdbe 	bl	8001cf8 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617e:	e00a      	b.n	8006196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006180:	f7fb fdba 	bl	8001cf8 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e04f      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006196:	4b2b      	ldr	r3, [pc, #172]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 020c 	and.w	r2, r3, #12
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d1eb      	bne.n	8006180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061a8:	4b25      	ldr	r3, [pc, #148]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d20c      	bcs.n	80061d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b6:	4b22      	ldr	r3, [pc, #136]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <HAL_RCC_ClockConfig+0x1b8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e032      	b.n	8006236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	4916      	ldr	r1, [pc, #88]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061fa:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	490e      	ldr	r1, [pc, #56]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800620e:	f000 f821 	bl	8006254 <HAL_RCC_GetSysClockFreq>
 8006212:	4602      	mov	r2, r0
 8006214:	4b0b      	ldr	r3, [pc, #44]	@ (8006244 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	490a      	ldr	r1, [pc, #40]	@ (8006248 <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	5ccb      	ldrb	r3, [r1, r3]
 8006222:	fa22 f303 	lsr.w	r3, r2, r3
 8006226:	4a09      	ldr	r2, [pc, #36]	@ (800624c <HAL_RCC_ClockConfig+0x1c4>)
 8006228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_RCC_ClockConfig+0x1c8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fb fd1e 	bl	8001c70 <HAL_InitTick>

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023c00 	.word	0x40023c00
 8006244:	40023800 	.word	0x40023800
 8006248:	0800c5b4 	.word	0x0800c5b4
 800624c:	2000001c 	.word	0x2000001c
 8006250:	20000020 	.word	0x20000020

08006254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006258:	b094      	sub	sp, #80	@ 0x50
 800625a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800626c:	4b79      	ldr	r3, [pc, #484]	@ (8006454 <HAL_RCC_GetSysClockFreq+0x200>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 030c 	and.w	r3, r3, #12
 8006274:	2b08      	cmp	r3, #8
 8006276:	d00d      	beq.n	8006294 <HAL_RCC_GetSysClockFreq+0x40>
 8006278:	2b08      	cmp	r3, #8
 800627a:	f200 80e1 	bhi.w	8006440 <HAL_RCC_GetSysClockFreq+0x1ec>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x34>
 8006282:	2b04      	cmp	r3, #4
 8006284:	d003      	beq.n	800628e <HAL_RCC_GetSysClockFreq+0x3a>
 8006286:	e0db      	b.n	8006440 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006288:	4b73      	ldr	r3, [pc, #460]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x204>)
 800628a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800628c:	e0db      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800628e:	4b73      	ldr	r3, [pc, #460]	@ (800645c <HAL_RCC_GetSysClockFreq+0x208>)
 8006290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006292:	e0d8      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006294:	4b6f      	ldr	r3, [pc, #444]	@ (8006454 <HAL_RCC_GetSysClockFreq+0x200>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800629c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800629e:	4b6d      	ldr	r3, [pc, #436]	@ (8006454 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d063      	beq.n	8006372 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006454 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	099b      	lsrs	r3, r3, #6
 80062b0:	2200      	movs	r2, #0
 80062b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80062be:	2300      	movs	r3, #0
 80062c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062c6:	4622      	mov	r2, r4
 80062c8:	462b      	mov	r3, r5
 80062ca:	f04f 0000 	mov.w	r0, #0
 80062ce:	f04f 0100 	mov.w	r1, #0
 80062d2:	0159      	lsls	r1, r3, #5
 80062d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062d8:	0150      	lsls	r0, r2, #5
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4621      	mov	r1, r4
 80062e0:	1a51      	subs	r1, r2, r1
 80062e2:	6139      	str	r1, [r7, #16]
 80062e4:	4629      	mov	r1, r5
 80062e6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	f04f 0300 	mov.w	r3, #0
 80062f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062f8:	4659      	mov	r1, fp
 80062fa:	018b      	lsls	r3, r1, #6
 80062fc:	4651      	mov	r1, sl
 80062fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006302:	4651      	mov	r1, sl
 8006304:	018a      	lsls	r2, r1, #6
 8006306:	4651      	mov	r1, sl
 8006308:	ebb2 0801 	subs.w	r8, r2, r1
 800630c:	4659      	mov	r1, fp
 800630e:	eb63 0901 	sbc.w	r9, r3, r1
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800631e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006326:	4690      	mov	r8, r2
 8006328:	4699      	mov	r9, r3
 800632a:	4623      	mov	r3, r4
 800632c:	eb18 0303 	adds.w	r3, r8, r3
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	462b      	mov	r3, r5
 8006334:	eb49 0303 	adc.w	r3, r9, r3
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006346:	4629      	mov	r1, r5
 8006348:	024b      	lsls	r3, r1, #9
 800634a:	4621      	mov	r1, r4
 800634c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006350:	4621      	mov	r1, r4
 8006352:	024a      	lsls	r2, r1, #9
 8006354:	4610      	mov	r0, r2
 8006356:	4619      	mov	r1, r3
 8006358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800635a:	2200      	movs	r2, #0
 800635c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800635e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006364:	f7fa fc98 	bl	8000c98 <__aeabi_uldivmod>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4613      	mov	r3, r2
 800636e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006370:	e058      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006372:	4b38      	ldr	r3, [pc, #224]	@ (8006454 <HAL_RCC_GetSysClockFreq+0x200>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	2200      	movs	r2, #0
 800637a:	4618      	mov	r0, r3
 800637c:	4611      	mov	r1, r2
 800637e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006382:	623b      	str	r3, [r7, #32]
 8006384:	2300      	movs	r3, #0
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
 8006388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	f04f 0000 	mov.w	r0, #0
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	0159      	lsls	r1, r3, #5
 800639a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800639e:	0150      	lsls	r0, r2, #5
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4641      	mov	r1, r8
 80063a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063c4:	ebb2 040a 	subs.w	r4, r2, sl
 80063c8:	eb63 050b 	sbc.w	r5, r3, fp
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	00eb      	lsls	r3, r5, #3
 80063d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063da:	00e2      	lsls	r2, r4, #3
 80063dc:	4614      	mov	r4, r2
 80063de:	461d      	mov	r5, r3
 80063e0:	4643      	mov	r3, r8
 80063e2:	18e3      	adds	r3, r4, r3
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	464b      	mov	r3, r9
 80063e8:	eb45 0303 	adc.w	r3, r5, r3
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063fa:	4629      	mov	r1, r5
 80063fc:	028b      	lsls	r3, r1, #10
 80063fe:	4621      	mov	r1, r4
 8006400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006404:	4621      	mov	r1, r4
 8006406:	028a      	lsls	r2, r1, #10
 8006408:	4610      	mov	r0, r2
 800640a:	4619      	mov	r1, r3
 800640c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640e:	2200      	movs	r2, #0
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	61fa      	str	r2, [r7, #28]
 8006414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006418:	f7fa fc3e 	bl	8000c98 <__aeabi_uldivmod>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4613      	mov	r3, r2
 8006422:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006424:	4b0b      	ldr	r3, [pc, #44]	@ (8006454 <HAL_RCC_GetSysClockFreq+0x200>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	0c1b      	lsrs	r3, r3, #16
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	3301      	adds	r3, #1
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006434:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006438:	fbb2 f3f3 	udiv	r3, r2, r3
 800643c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800643e:	e002      	b.n	8006446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x204>)
 8006442:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006448:	4618      	mov	r0, r3
 800644a:	3750      	adds	r7, #80	@ 0x50
 800644c:	46bd      	mov	sp, r7
 800644e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006452:	bf00      	nop
 8006454:	40023800 	.word	0x40023800
 8006458:	00f42400 	.word	0x00f42400
 800645c:	007a1200 	.word	0x007a1200

08006460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006464:	4b03      	ldr	r3, [pc, #12]	@ (8006474 <HAL_RCC_GetHCLKFreq+0x14>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	2000001c 	.word	0x2000001c

08006478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800647c:	f7ff fff0 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 8006480:	4602      	mov	r2, r0
 8006482:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	0a9b      	lsrs	r3, r3, #10
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	4903      	ldr	r1, [pc, #12]	@ (800649c <HAL_RCC_GetPCLK1Freq+0x24>)
 800648e:	5ccb      	ldrb	r3, [r1, r3]
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40023800 	.word	0x40023800
 800649c:	0800c5c4 	.word	0x0800c5c4

080064a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064a4:	f7ff ffdc 	bl	8006460 <HAL_RCC_GetHCLKFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	0b5b      	lsrs	r3, r3, #13
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	4903      	ldr	r1, [pc, #12]	@ (80064c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064bc:	4618      	mov	r0, r3
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40023800 	.word	0x40023800
 80064c4:	0800c5c4 	.word	0x0800c5c4

080064c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e041      	b.n	800655e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb f97c 	bl	80017ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f000 fa70 	bl	80069ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	d001      	beq.n	8006580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e044      	b.n	800660a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1e      	ldr	r2, [pc, #120]	@ (8006618 <HAL_TIM_Base_Start_IT+0xb0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d018      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065aa:	d013      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1a      	ldr	r2, [pc, #104]	@ (800661c <HAL_TIM_Base_Start_IT+0xb4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00e      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a19      	ldr	r2, [pc, #100]	@ (8006620 <HAL_TIM_Base_Start_IT+0xb8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d009      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a17      	ldr	r2, [pc, #92]	@ (8006624 <HAL_TIM_Base_Start_IT+0xbc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIM_Base_Start_IT+0x6c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a16      	ldr	r2, [pc, #88]	@ (8006628 <HAL_TIM_Base_Start_IT+0xc0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d111      	bne.n	80065f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b06      	cmp	r3, #6
 80065e4:	d010      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f6:	e007      	b.n	8006608 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40014000 	.word	0x40014000

0800662c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d020      	beq.n	8006690 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01b      	beq.n	8006690 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0202 	mvn.w	r2, #2
 8006660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f999 	bl	80069ae <HAL_TIM_IC_CaptureCallback>
 800667c:	e005      	b.n	800668a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f98b 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f99c 	bl	80069c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d020      	beq.n	80066dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01b      	beq.n	80066dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0204 	mvn.w	r2, #4
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f973 	bl	80069ae <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f965 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f976 	bl	80069c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d020      	beq.n	8006728 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01b      	beq.n	8006728 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0208 	mvn.w	r2, #8
 80066f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f94d 	bl	80069ae <HAL_TIM_IC_CaptureCallback>
 8006714:	e005      	b.n	8006722 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f93f 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f950 	bl	80069c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	d020      	beq.n	8006774 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01b      	beq.n	8006774 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0210 	mvn.w	r2, #16
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2208      	movs	r2, #8
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f927 	bl	80069ae <HAL_TIM_IC_CaptureCallback>
 8006760:	e005      	b.n	800676e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f919 	bl	800699a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f92a 	bl	80069c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0201 	mvn.w	r2, #1
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fa fc2e 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fab6 	bl	8006d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8fb 	bl	80069d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0220 	mvn.w	r2, #32
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fa88 	bl	8006d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_TIM_ConfigClockSource+0x1c>
 8006824:	2302      	movs	r3, #2
 8006826:	e0b4      	b.n	8006992 <HAL_TIM_ConfigClockSource+0x186>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800684e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006860:	d03e      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0xd4>
 8006862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006866:	f200 8087 	bhi.w	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800686e:	f000 8086 	beq.w	800697e <HAL_TIM_ConfigClockSource+0x172>
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006876:	d87f      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b70      	cmp	r3, #112	@ 0x70
 800687a:	d01a      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0xa6>
 800687c:	2b70      	cmp	r3, #112	@ 0x70
 800687e:	d87b      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b60      	cmp	r3, #96	@ 0x60
 8006882:	d050      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0x11a>
 8006884:	2b60      	cmp	r3, #96	@ 0x60
 8006886:	d877      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b50      	cmp	r3, #80	@ 0x50
 800688a:	d03c      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0xfa>
 800688c:	2b50      	cmp	r3, #80	@ 0x50
 800688e:	d873      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b40      	cmp	r3, #64	@ 0x40
 8006892:	d058      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x13a>
 8006894:	2b40      	cmp	r3, #64	@ 0x40
 8006896:	d86f      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 8006898:	2b30      	cmp	r3, #48	@ 0x30
 800689a:	d064      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x15a>
 800689c:	2b30      	cmp	r3, #48	@ 0x30
 800689e:	d86b      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d060      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x15a>
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d867      	bhi.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d05c      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x15a>
 80068ac:	2b10      	cmp	r3, #16
 80068ae:	d05a      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x15a>
 80068b0:	e062      	b.n	8006978 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068c2:	f000 f999 	bl	8006bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	609a      	str	r2, [r3, #8]
      break;
 80068de:	e04f      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068f0:	f000 f982 	bl	8006bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006902:	609a      	str	r2, [r3, #8]
      break;
 8006904:	e03c      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006912:	461a      	mov	r2, r3
 8006914:	f000 f8f6 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2150      	movs	r1, #80	@ 0x50
 800691e:	4618      	mov	r0, r3
 8006920:	f000 f94f 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006924:	e02c      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006932:	461a      	mov	r2, r3
 8006934:	f000 f915 	bl	8006b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2160      	movs	r1, #96	@ 0x60
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f93f 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006944:	e01c      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006952:	461a      	mov	r2, r3
 8006954:	f000 f8d6 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2140      	movs	r1, #64	@ 0x40
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f92f 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006964:	e00c      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f000 f926 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006976:	e003      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
      break;
 800697c:	e000      	b.n	8006980 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800697e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3a      	ldr	r2, [pc, #232]	@ (8006ae8 <TIM_Base_SetConfig+0xfc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00f      	beq.n	8006a24 <TIM_Base_SetConfig+0x38>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0a:	d00b      	beq.n	8006a24 <TIM_Base_SetConfig+0x38>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a37      	ldr	r2, [pc, #220]	@ (8006aec <TIM_Base_SetConfig+0x100>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d007      	beq.n	8006a24 <TIM_Base_SetConfig+0x38>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a36      	ldr	r2, [pc, #216]	@ (8006af0 <TIM_Base_SetConfig+0x104>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0x38>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <TIM_Base_SetConfig+0x108>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d108      	bne.n	8006a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2b      	ldr	r2, [pc, #172]	@ (8006ae8 <TIM_Base_SetConfig+0xfc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01b      	beq.n	8006a76 <TIM_Base_SetConfig+0x8a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a44:	d017      	beq.n	8006a76 <TIM_Base_SetConfig+0x8a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a28      	ldr	r2, [pc, #160]	@ (8006aec <TIM_Base_SetConfig+0x100>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <TIM_Base_SetConfig+0x8a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a27      	ldr	r2, [pc, #156]	@ (8006af0 <TIM_Base_SetConfig+0x104>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00f      	beq.n	8006a76 <TIM_Base_SetConfig+0x8a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a26      	ldr	r2, [pc, #152]	@ (8006af4 <TIM_Base_SetConfig+0x108>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00b      	beq.n	8006a76 <TIM_Base_SetConfig+0x8a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a25      	ldr	r2, [pc, #148]	@ (8006af8 <TIM_Base_SetConfig+0x10c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_Base_SetConfig+0x8a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a24      	ldr	r2, [pc, #144]	@ (8006afc <TIM_Base_SetConfig+0x110>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_Base_SetConfig+0x8a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a23      	ldr	r2, [pc, #140]	@ (8006b00 <TIM_Base_SetConfig+0x114>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d108      	bne.n	8006a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae8 <TIM_Base_SetConfig+0xfc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d103      	bne.n	8006abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d105      	bne.n	8006ada <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]
  }
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800

08006b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f023 030a 	bic.w	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f023 0210 	bic.w	r2, r3, #16
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f043 0307 	orr.w	r3, r3, #7
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e050      	b.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d018      	beq.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9c:	d013      	beq.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a18      	ldr	r2, [pc, #96]	@ (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a16      	ldr	r2, [pc, #88]	@ (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a15      	ldr	r2, [pc, #84]	@ (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	@ (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d10c      	bne.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40000400 	.word	0x40000400
 8006d08:	40000800 	.word	0x40000800
 8006d0c:	40000c00 	.word	0x40000c00
 8006d10:	40014000 	.word	0x40014000

08006d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e042      	b.n	8006dd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fa fd68 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2224      	movs	r2, #36	@ 0x24
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fdcb 	bl	800791c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08c      	sub	sp, #48	@ 0x30
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d156      	bne.n	8006ea4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_UART_Transmit_DMA+0x26>
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e04f      	b.n	8006ea6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	88fa      	ldrh	r2, [r7, #6]
 8006e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2221      	movs	r2, #33	@ 0x21
 8006e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2a:	4a21      	ldr	r2, [pc, #132]	@ (8006eb0 <HAL_UART_Transmit_DMA+0xd4>)
 8006e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e32:	4a20      	ldr	r2, [pc, #128]	@ (8006eb4 <HAL_UART_Transmit_DMA+0xd8>)
 8006e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb8 <HAL_UART_Transmit_DMA+0xdc>)
 8006e3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e42:	2200      	movs	r2, #0
 8006e44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	f7fb f917 	bl	8002090 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3314      	adds	r3, #20
 8006e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	6a39      	ldr	r1, [r7, #32]
 8006e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e5      	bne.n	8006e6c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e000      	b.n	8006ea6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006ea4:	2302      	movs	r3, #2
  }
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3730      	adds	r7, #48	@ 0x30
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	08007449 	.word	0x08007449
 8006eb4:	080074e3 	.word	0x080074e3
 8006eb8:	080074ff 	.word	0x080074ff

08006ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b0ba      	sub	sp, #232	@ 0xe8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10f      	bne.n	8006f22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_UART_IRQHandler+0x66>
 8006f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fc40 	bl	80077a0 <UART_Receive_IT>
      return;
 8006f20:	e25b      	b.n	80073da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80de 	beq.w	80070e8 <HAL_UART_IRQHandler+0x22c>
 8006f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80d1 	beq.w	80070e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <HAL_UART_IRQHandler+0xae>
 8006f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f62:	f043 0201 	orr.w	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <HAL_UART_IRQHandler+0xd2>
 8006f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	f043 0202 	orr.w	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <HAL_UART_IRQHandler+0xf6>
 8006f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006faa:	f043 0204 	orr.w	r2, r3, #4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d011      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x126>
 8006fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fda:	f043 0208 	orr.w	r2, r3, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 81f2 	beq.w	80073d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_UART_IRQHandler+0x14e>
 8006ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fbcb 	bl	80077a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007014:	2b40      	cmp	r3, #64	@ 0x40
 8007016:	bf0c      	ite	eq
 8007018:	2301      	moveq	r3, #1
 800701a:	2300      	movne	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d103      	bne.n	8007036 <HAL_UART_IRQHandler+0x17a>
 800702e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d04f      	beq.n	80070d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fad3 	bl	80075e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007046:	2b40      	cmp	r3, #64	@ 0x40
 8007048:	d141      	bne.n	80070ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3314      	adds	r3, #20
 8007072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007076:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800707a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800708e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1d9      	bne.n	800704a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d013      	beq.n	80070c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a2:	4a7e      	ldr	r2, [pc, #504]	@ (800729c <HAL_UART_IRQHandler+0x3e0>)
 80070a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fb f8b8 	bl	8002220 <HAL_DMA_Abort_IT>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	e00e      	b.n	80070e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f9a8 	bl	800741c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070cc:	e00a      	b.n	80070e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f9a4 	bl	800741c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d4:	e006      	b.n	80070e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f9a0 	bl	800741c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070e2:	e175      	b.n	80073d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e4:	bf00      	nop
    return;
 80070e6:	e173      	b.n	80073d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	f040 814f 	bne.w	8007390 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8148 	beq.w	8007390 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8141 	beq.w	8007390 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800710e:	2300      	movs	r3, #0
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	60bb      	str	r3, [r7, #8]
 8007122:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712e:	2b40      	cmp	r3, #64	@ 0x40
 8007130:	f040 80b6 	bne.w	80072a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8145 	beq.w	80073d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800714e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007152:	429a      	cmp	r2, r3
 8007154:	f080 813e 	bcs.w	80073d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800715e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800716a:	f000 8088 	beq.w	800727e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800718c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800719a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800719e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1d9      	bne.n	800716e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3314      	adds	r3, #20
 80071c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3314      	adds	r3, #20
 80071da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e1      	bne.n	80071ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3314      	adds	r3, #20
 80071fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800720c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3314      	adds	r3, #20
 8007216:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800721a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800721c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007220:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e3      	bne.n	80071f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	330c      	adds	r3, #12
 8007242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800724c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800724e:	f023 0310 	bic.w	r3, r3, #16
 8007252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007260:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007262:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007266:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800726e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e3      	bne.n	800723c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007278:	4618      	mov	r0, r3
 800727a:	f7fa ff61 	bl	8002140 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800728c:	b29b      	uxth	r3, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f8cb 	bl	8007430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800729a:	e09b      	b.n	80073d4 <HAL_UART_IRQHandler+0x518>
 800729c:	080076a9 	.word	0x080076a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 808e 	beq.w	80073d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 8089 	beq.w	80073d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	330c      	adds	r3, #12
 80072cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80072ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e3      	bne.n	80072c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	623b      	str	r3, [r7, #32]
   return(result);
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007322:	633a      	str	r2, [r7, #48]	@ 0x30
 8007324:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e3      	bne.n	80072fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60fb      	str	r3, [r7, #12]
   return(result);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330c      	adds	r3, #12
 8007364:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007368:	61fa      	str	r2, [r7, #28]
 800736a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	69b9      	ldr	r1, [r7, #24]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	617b      	str	r3, [r7, #20]
   return(result);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e3      	bne.n	8007344 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007382:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f851 	bl	8007430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800738e:	e023      	b.n	80073d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <HAL_UART_IRQHandler+0x4f4>
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f991 	bl	80076d0 <UART_Transmit_IT>
    return;
 80073ae:	e014      	b.n	80073da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00e      	beq.n	80073da <HAL_UART_IRQHandler+0x51e>
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f9d1 	bl	8007770 <UART_EndTransmit_IT>
    return;
 80073ce:	e004      	b.n	80073da <HAL_UART_IRQHandler+0x51e>
    return;
 80073d0:	bf00      	nop
 80073d2:	e002      	b.n	80073da <HAL_UART_IRQHandler+0x51e>
      return;
 80073d4:	bf00      	nop
 80073d6:	e000      	b.n	80073da <HAL_UART_IRQHandler+0x51e>
      return;
 80073d8:	bf00      	nop
  }
}
 80073da:	37e8      	adds	r7, #232	@ 0xe8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b090      	sub	sp, #64	@ 0x40
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d137      	bne.n	80074d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007466:	2200      	movs	r2, #0
 8007468:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800746a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3314      	adds	r3, #20
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	623b      	str	r3, [r7, #32]
   return(result);
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3314      	adds	r3, #20
 8007488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800748a:	633a      	str	r2, [r7, #48]	@ 0x30
 800748c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e5      	bne.n	800746a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800749e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074be:	61fa      	str	r2, [r7, #28]
 80074c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	69b9      	ldr	r1, [r7, #24]
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	617b      	str	r3, [r7, #20]
   return(result);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074d2:	e002      	b.n	80074da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80074d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074d6:	f7ff ff83 	bl	80073e0 <HAL_UART_TxCpltCallback>
}
 80074da:	bf00      	nop
 80074dc:	3740      	adds	r7, #64	@ 0x40
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff ff7f 	bl	80073f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751a:	2b80      	cmp	r3, #128	@ 0x80
 800751c:	bf0c      	ite	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	2300      	movne	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b21      	cmp	r3, #33	@ 0x21
 8007530:	d108      	bne.n	8007544 <UART_DMAError+0x46>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800753e:	68b8      	ldr	r0, [r7, #8]
 8007540:	f000 f827 	bl	8007592 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754e:	2b40      	cmp	r3, #64	@ 0x40
 8007550:	bf0c      	ite	eq
 8007552:	2301      	moveq	r3, #1
 8007554:	2300      	movne	r3, #0
 8007556:	b2db      	uxtb	r3, r3
 8007558:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b22      	cmp	r3, #34	@ 0x22
 8007564:	d108      	bne.n	8007578 <UART_DMAError+0x7a>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007572:	68b8      	ldr	r0, [r7, #8]
 8007574:	f000 f835 	bl	80075e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800757c:	f043 0210 	orr.w	r2, r3, #16
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007584:	68b8      	ldr	r0, [r7, #8]
 8007586:	f7ff ff49 	bl	800741c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007592:	b480      	push	{r7}
 8007594:	b089      	sub	sp, #36	@ 0x24
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	61ba      	str	r2, [r7, #24]
 80075bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6979      	ldr	r1, [r7, #20]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	613b      	str	r3, [r7, #16]
   return(result);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e5      	bne.n	800759a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80075d6:	bf00      	nop
 80075d8:	3724      	adds	r7, #36	@ 0x24
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b095      	sub	sp, #84	@ 0x54
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	330c      	adds	r3, #12
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800760a:	643a      	str	r2, [r7, #64]	@ 0x40
 800760c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e5      	bne.n	80075ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3314      	adds	r3, #20
 8007624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	61fb      	str	r3, [r7, #28]
   return(result);
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3314      	adds	r3, #20
 800763c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800763e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e5      	bne.n	800761e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	2b01      	cmp	r3, #1
 8007658:	d119      	bne.n	800768e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	60bb      	str	r3, [r7, #8]
   return(result);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f023 0310 	bic.w	r3, r3, #16
 8007670:	647b      	str	r3, [r7, #68]	@ 0x44
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767a:	61ba      	str	r2, [r7, #24]
 800767c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6979      	ldr	r1, [r7, #20]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	613b      	str	r3, [r7, #16]
   return(result);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e5      	bne.n	800765a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800769c:	bf00      	nop
 800769e:	3754      	adds	r7, #84	@ 0x54
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff feaa 	bl	800741c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b21      	cmp	r3, #33	@ 0x21
 80076e2:	d13e      	bne.n	8007762 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ec:	d114      	bne.n	8007718 <UART_Transmit_IT+0x48>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d110      	bne.n	8007718 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800770a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	1c9a      	adds	r2, r3, #2
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]
 8007716:	e008      	b.n	800772a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	1c59      	adds	r1, r3, #1
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6211      	str	r1, [r2, #32]
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800774c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800775c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e000      	b.n	8007764 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007762:	2302      	movs	r3, #2
  }
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007786:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff fe25 	bl	80073e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	@ 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b22      	cmp	r3, #34	@ 0x22
 80077b2:	f040 80ae 	bne.w	8007912 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077be:	d117      	bne.n	80077f0 <UART_Receive_IT+0x50>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d113      	bne.n	80077f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077de:	b29a      	uxth	r2, r3
 80077e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80077ee:	e026      	b.n	800783e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007802:	d007      	beq.n	8007814 <UART_Receive_IT+0x74>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <UART_Receive_IT+0x82>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e008      	b.n	8007834 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800782e:	b2da      	uxtb	r2, r3
 8007830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007832:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29b      	uxth	r3, r3
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800784e:	2b00      	cmp	r3, #0
 8007850:	d15d      	bne.n	800790e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0220 	bic.w	r2, r2, #32
 8007860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007894:	2b01      	cmp	r3, #1
 8007896:	d135      	bne.n	8007904 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	613b      	str	r3, [r7, #16]
   return(result);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f023 0310 	bic.w	r3, r3, #16
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078be:	623a      	str	r2, [r7, #32]
 80078c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	69f9      	ldr	r1, [r7, #28]
 80078c4:	6a3a      	ldr	r2, [r7, #32]
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d10a      	bne.n	80078f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff fd97 	bl	8007430 <HAL_UARTEx_RxEventCallback>
 8007902:	e002      	b.n	800790a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fd7f 	bl	8007408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	e002      	b.n	8007914 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e000      	b.n	8007914 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3730      	adds	r7, #48	@ 0x30
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800791c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007920:	b0c0      	sub	sp, #256	@ 0x100
 8007922:	af00      	add	r7, sp, #0
 8007924:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007938:	68d9      	ldr	r1, [r3, #12]
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	ea40 0301 	orr.w	r3, r0, r1
 8007944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	431a      	orrs	r2, r3
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	431a      	orrs	r2, r3
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007974:	f021 010c 	bic.w	r1, r1, #12
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007982:	430b      	orrs	r3, r1
 8007984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007996:	6999      	ldr	r1, [r3, #24]
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	ea40 0301 	orr.w	r3, r0, r1
 80079a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b8f      	ldr	r3, [pc, #572]	@ (8007be8 <UART_SetConfig+0x2cc>)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d005      	beq.n	80079bc <UART_SetConfig+0xa0>
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b8d      	ldr	r3, [pc, #564]	@ (8007bec <UART_SetConfig+0x2d0>)
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d104      	bne.n	80079c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079bc:	f7fe fd70 	bl	80064a0 <HAL_RCC_GetPCLK2Freq>
 80079c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079c4:	e003      	b.n	80079ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079c6:	f7fe fd57 	bl	8006478 <HAL_RCC_GetPCLK1Freq>
 80079ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d8:	f040 810c 	bne.w	8007bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079ee:	4622      	mov	r2, r4
 80079f0:	462b      	mov	r3, r5
 80079f2:	1891      	adds	r1, r2, r2
 80079f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079f6:	415b      	adcs	r3, r3
 80079f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079fe:	4621      	mov	r1, r4
 8007a00:	eb12 0801 	adds.w	r8, r2, r1
 8007a04:	4629      	mov	r1, r5
 8007a06:	eb43 0901 	adc.w	r9, r3, r1
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a1e:	4690      	mov	r8, r2
 8007a20:	4699      	mov	r9, r3
 8007a22:	4623      	mov	r3, r4
 8007a24:	eb18 0303 	adds.w	r3, r8, r3
 8007a28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	eb49 0303 	adc.w	r3, r9, r3
 8007a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	18db      	adds	r3, r3, r3
 8007a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a50:	4613      	mov	r3, r2
 8007a52:	eb42 0303 	adc.w	r3, r2, r3
 8007a56:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a60:	f7f9 f91a 	bl	8000c98 <__aeabi_uldivmod>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4b61      	ldr	r3, [pc, #388]	@ (8007bf0 <UART_SetConfig+0x2d4>)
 8007a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	011c      	lsls	r4, r3, #4
 8007a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	1891      	adds	r1, r2, r2
 8007a8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a8c:	415b      	adcs	r3, r3
 8007a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a94:	4641      	mov	r1, r8
 8007a96:	eb12 0a01 	adds.w	sl, r2, r1
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ab4:	4692      	mov	sl, r2
 8007ab6:	469b      	mov	fp, r3
 8007ab8:	4643      	mov	r3, r8
 8007aba:	eb1a 0303 	adds.w	r3, sl, r3
 8007abe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	18db      	adds	r3, r3, r3
 8007ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	eb42 0303 	adc.w	r3, r2, r3
 8007aec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007af6:	f7f9 f8cf 	bl	8000c98 <__aeabi_uldivmod>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	4b3b      	ldr	r3, [pc, #236]	@ (8007bf0 <UART_SetConfig+0x2d4>)
 8007b02:	fba3 2301 	umull	r2, r3, r3, r1
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	2264      	movs	r2, #100	@ 0x64
 8007b0a:	fb02 f303 	mul.w	r3, r2, r3
 8007b0e:	1acb      	subs	r3, r1, r3
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b16:	4b36      	ldr	r3, [pc, #216]	@ (8007bf0 <UART_SetConfig+0x2d4>)
 8007b18:	fba3 2302 	umull	r2, r3, r3, r2
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b24:	441c      	add	r4, r3
 8007b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	1891      	adds	r1, r2, r2
 8007b3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b40:	415b      	adcs	r3, r3
 8007b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b48:	4641      	mov	r1, r8
 8007b4a:	1851      	adds	r1, r2, r1
 8007b4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b4e:	4649      	mov	r1, r9
 8007b50:	414b      	adcs	r3, r1
 8007b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b60:	4659      	mov	r1, fp
 8007b62:	00cb      	lsls	r3, r1, #3
 8007b64:	4651      	mov	r1, sl
 8007b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6a:	4651      	mov	r1, sl
 8007b6c:	00ca      	lsls	r2, r1, #3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	4642      	mov	r2, r8
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	460a      	mov	r2, r1
 8007b80:	eb42 0303 	adc.w	r3, r2, r3
 8007b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	18db      	adds	r3, r3, r3
 8007ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	eb42 0303 	adc.w	r3, r2, r3
 8007ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007bb2:	f7f9 f871 	bl	8000c98 <__aeabi_uldivmod>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf0 <UART_SetConfig+0x2d4>)
 8007bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	2164      	movs	r1, #100	@ 0x64
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	3332      	adds	r3, #50	@ 0x32
 8007bce:	4a08      	ldr	r2, [pc, #32]	@ (8007bf0 <UART_SetConfig+0x2d4>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	f003 0207 	and.w	r2, r3, #7
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4422      	add	r2, r4
 8007be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007be4:	e106      	b.n	8007df4 <UART_SetConfig+0x4d8>
 8007be6:	bf00      	nop
 8007be8:	40011000 	.word	0x40011000
 8007bec:	40011400 	.word	0x40011400
 8007bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c06:	4642      	mov	r2, r8
 8007c08:	464b      	mov	r3, r9
 8007c0a:	1891      	adds	r1, r2, r2
 8007c0c:	6239      	str	r1, [r7, #32]
 8007c0e:	415b      	adcs	r3, r3
 8007c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c16:	4641      	mov	r1, r8
 8007c18:	1854      	adds	r4, r2, r1
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	eb43 0501 	adc.w	r5, r3, r1
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	00eb      	lsls	r3, r5, #3
 8007c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c2e:	00e2      	lsls	r2, r4, #3
 8007c30:	4614      	mov	r4, r2
 8007c32:	461d      	mov	r5, r3
 8007c34:	4643      	mov	r3, r8
 8007c36:	18e3      	adds	r3, r4, r3
 8007c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	eb45 0303 	adc.w	r3, r5, r3
 8007c42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c62:	4629      	mov	r1, r5
 8007c64:	008b      	lsls	r3, r1, #2
 8007c66:	4621      	mov	r1, r4
 8007c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	008a      	lsls	r2, r1, #2
 8007c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c74:	f7f9 f810 	bl	8000c98 <__aeabi_uldivmod>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4b60      	ldr	r3, [pc, #384]	@ (8007e00 <UART_SetConfig+0x4e4>)
 8007c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	011c      	lsls	r4, r3, #4
 8007c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	1891      	adds	r1, r2, r2
 8007c9e:	61b9      	str	r1, [r7, #24]
 8007ca0:	415b      	adcs	r3, r3
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ca8:	4641      	mov	r1, r8
 8007caa:	1851      	adds	r1, r2, r1
 8007cac:	6139      	str	r1, [r7, #16]
 8007cae:	4649      	mov	r1, r9
 8007cb0:	414b      	adcs	r3, r1
 8007cb2:	617b      	str	r3, [r7, #20]
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cc0:	4659      	mov	r1, fp
 8007cc2:	00cb      	lsls	r3, r1, #3
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cca:	4651      	mov	r1, sl
 8007ccc:	00ca      	lsls	r2, r1, #3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cdc:	464b      	mov	r3, r9
 8007cde:	460a      	mov	r2, r1
 8007ce0:	eb42 0303 	adc.w	r3, r2, r3
 8007ce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d00:	4649      	mov	r1, r9
 8007d02:	008b      	lsls	r3, r1, #2
 8007d04:	4641      	mov	r1, r8
 8007d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	008a      	lsls	r2, r1, #2
 8007d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d12:	f7f8 ffc1 	bl	8000c98 <__aeabi_uldivmod>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4b38      	ldr	r3, [pc, #224]	@ (8007e00 <UART_SetConfig+0x4e4>)
 8007d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	2264      	movs	r2, #100	@ 0x64
 8007d26:	fb02 f303 	mul.w	r3, r2, r3
 8007d2a:	1acb      	subs	r3, r1, r3
 8007d2c:	011b      	lsls	r3, r3, #4
 8007d2e:	3332      	adds	r3, #50	@ 0x32
 8007d30:	4a33      	ldr	r2, [pc, #204]	@ (8007e00 <UART_SetConfig+0x4e4>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d3c:	441c      	add	r4, r3
 8007d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d42:	2200      	movs	r2, #0
 8007d44:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d46:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	1891      	adds	r1, r2, r2
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	415b      	adcs	r3, r3
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d5c:	4641      	mov	r1, r8
 8007d5e:	1851      	adds	r1, r2, r1
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	4649      	mov	r1, r9
 8007d64:	414b      	adcs	r3, r1
 8007d66:	607b      	str	r3, [r7, #4]
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d74:	4659      	mov	r1, fp
 8007d76:	00cb      	lsls	r3, r1, #3
 8007d78:	4651      	mov	r1, sl
 8007d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d7e:	4651      	mov	r1, sl
 8007d80:	00ca      	lsls	r2, r1, #3
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	4603      	mov	r3, r0
 8007d88:	4642      	mov	r2, r8
 8007d8a:	189b      	adds	r3, r3, r2
 8007d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d8e:	464b      	mov	r3, r9
 8007d90:	460a      	mov	r2, r1
 8007d92:	eb42 0303 	adc.w	r3, r2, r3
 8007d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007da2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007da4:	f04f 0200 	mov.w	r2, #0
 8007da8:	f04f 0300 	mov.w	r3, #0
 8007dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007db0:	4649      	mov	r1, r9
 8007db2:	008b      	lsls	r3, r1, #2
 8007db4:	4641      	mov	r1, r8
 8007db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dba:	4641      	mov	r1, r8
 8007dbc:	008a      	lsls	r2, r1, #2
 8007dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007dc2:	f7f8 ff69 	bl	8000c98 <__aeabi_uldivmod>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4b0d      	ldr	r3, [pc, #52]	@ (8007e00 <UART_SetConfig+0x4e4>)
 8007dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	2164      	movs	r1, #100	@ 0x64
 8007dd4:	fb01 f303 	mul.w	r3, r1, r3
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	3332      	adds	r3, #50	@ 0x32
 8007dde:	4a08      	ldr	r2, [pc, #32]	@ (8007e00 <UART_SetConfig+0x4e4>)
 8007de0:	fba2 2303 	umull	r2, r3, r2, r3
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	f003 020f 	and.w	r2, r3, #15
 8007dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4422      	add	r2, r4
 8007df2:	609a      	str	r2, [r3, #8]
}
 8007df4:	bf00      	nop
 8007df6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e00:	51eb851f 	.word	0x51eb851f

08007e04 <__cvt>:
 8007e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	ec57 6b10 	vmov	r6, r7, d0
 8007e0c:	2f00      	cmp	r7, #0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4619      	mov	r1, r3
 8007e12:	463b      	mov	r3, r7
 8007e14:	bfbb      	ittet	lt
 8007e16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e1a:	461f      	movlt	r7, r3
 8007e1c:	2300      	movge	r3, #0
 8007e1e:	232d      	movlt	r3, #45	@ 0x2d
 8007e20:	700b      	strb	r3, [r1, #0]
 8007e22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e28:	4691      	mov	r9, r2
 8007e2a:	f023 0820 	bic.w	r8, r3, #32
 8007e2e:	bfbc      	itt	lt
 8007e30:	4632      	movlt	r2, r6
 8007e32:	4616      	movlt	r6, r2
 8007e34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e38:	d005      	beq.n	8007e46 <__cvt+0x42>
 8007e3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e3e:	d100      	bne.n	8007e42 <__cvt+0x3e>
 8007e40:	3401      	adds	r4, #1
 8007e42:	2102      	movs	r1, #2
 8007e44:	e000      	b.n	8007e48 <__cvt+0x44>
 8007e46:	2103      	movs	r1, #3
 8007e48:	ab03      	add	r3, sp, #12
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	ab02      	add	r3, sp, #8
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	ec47 6b10 	vmov	d0, r6, r7
 8007e54:	4653      	mov	r3, sl
 8007e56:	4622      	mov	r2, r4
 8007e58:	f001 f8aa 	bl	8008fb0 <_dtoa_r>
 8007e5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e60:	4605      	mov	r5, r0
 8007e62:	d119      	bne.n	8007e98 <__cvt+0x94>
 8007e64:	f019 0f01 	tst.w	r9, #1
 8007e68:	d00e      	beq.n	8007e88 <__cvt+0x84>
 8007e6a:	eb00 0904 	add.w	r9, r0, r4
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2300      	movs	r3, #0
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e7a:	b108      	cbz	r0, 8007e80 <__cvt+0x7c>
 8007e7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e80:	2230      	movs	r2, #48	@ 0x30
 8007e82:	9b03      	ldr	r3, [sp, #12]
 8007e84:	454b      	cmp	r3, r9
 8007e86:	d31e      	bcc.n	8007ec6 <__cvt+0xc2>
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e8c:	1b5b      	subs	r3, r3, r5
 8007e8e:	4628      	mov	r0, r5
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	b004      	add	sp, #16
 8007e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e9c:	eb00 0904 	add.w	r9, r0, r4
 8007ea0:	d1e5      	bne.n	8007e6e <__cvt+0x6a>
 8007ea2:	7803      	ldrb	r3, [r0, #0]
 8007ea4:	2b30      	cmp	r3, #48	@ 0x30
 8007ea6:	d10a      	bne.n	8007ebe <__cvt+0xba>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 fe12 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eb4:	b918      	cbnz	r0, 8007ebe <__cvt+0xba>
 8007eb6:	f1c4 0401 	rsb	r4, r4, #1
 8007eba:	f8ca 4000 	str.w	r4, [sl]
 8007ebe:	f8da 3000 	ldr.w	r3, [sl]
 8007ec2:	4499      	add	r9, r3
 8007ec4:	e7d3      	b.n	8007e6e <__cvt+0x6a>
 8007ec6:	1c59      	adds	r1, r3, #1
 8007ec8:	9103      	str	r1, [sp, #12]
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	e7d9      	b.n	8007e82 <__cvt+0x7e>

08007ece <__exponent>:
 8007ece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ed0:	2900      	cmp	r1, #0
 8007ed2:	bfba      	itte	lt
 8007ed4:	4249      	neglt	r1, r1
 8007ed6:	232d      	movlt	r3, #45	@ 0x2d
 8007ed8:	232b      	movge	r3, #43	@ 0x2b
 8007eda:	2909      	cmp	r1, #9
 8007edc:	7002      	strb	r2, [r0, #0]
 8007ede:	7043      	strb	r3, [r0, #1]
 8007ee0:	dd29      	ble.n	8007f36 <__exponent+0x68>
 8007ee2:	f10d 0307 	add.w	r3, sp, #7
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	270a      	movs	r7, #10
 8007eea:	461a      	mov	r2, r3
 8007eec:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ef0:	fb07 1416 	mls	r4, r7, r6, r1
 8007ef4:	3430      	adds	r4, #48	@ 0x30
 8007ef6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007efa:	460c      	mov	r4, r1
 8007efc:	2c63      	cmp	r4, #99	@ 0x63
 8007efe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f02:	4631      	mov	r1, r6
 8007f04:	dcf1      	bgt.n	8007eea <__exponent+0x1c>
 8007f06:	3130      	adds	r1, #48	@ 0x30
 8007f08:	1e94      	subs	r4, r2, #2
 8007f0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f0e:	1c41      	adds	r1, r0, #1
 8007f10:	4623      	mov	r3, r4
 8007f12:	42ab      	cmp	r3, r5
 8007f14:	d30a      	bcc.n	8007f2c <__exponent+0x5e>
 8007f16:	f10d 0309 	add.w	r3, sp, #9
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	42ac      	cmp	r4, r5
 8007f1e:	bf88      	it	hi
 8007f20:	2300      	movhi	r3, #0
 8007f22:	3302      	adds	r3, #2
 8007f24:	4403      	add	r3, r0
 8007f26:	1a18      	subs	r0, r3, r0
 8007f28:	b003      	add	sp, #12
 8007f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f30:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f34:	e7ed      	b.n	8007f12 <__exponent+0x44>
 8007f36:	2330      	movs	r3, #48	@ 0x30
 8007f38:	3130      	adds	r1, #48	@ 0x30
 8007f3a:	7083      	strb	r3, [r0, #2]
 8007f3c:	70c1      	strb	r1, [r0, #3]
 8007f3e:	1d03      	adds	r3, r0, #4
 8007f40:	e7f1      	b.n	8007f26 <__exponent+0x58>
	...

08007f44 <_printf_float>:
 8007f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	b08d      	sub	sp, #52	@ 0x34
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f50:	4616      	mov	r6, r2
 8007f52:	461f      	mov	r7, r3
 8007f54:	4605      	mov	r5, r0
 8007f56:	f000 ff23 	bl	8008da0 <_localeconv_r>
 8007f5a:	6803      	ldr	r3, [r0, #0]
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7f8 f98e 	bl	8000280 <strlen>
 8007f64:	2300      	movs	r3, #0
 8007f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f68:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6c:	9005      	str	r0, [sp, #20]
 8007f6e:	3307      	adds	r3, #7
 8007f70:	f023 0307 	bic.w	r3, r3, #7
 8007f74:	f103 0208 	add.w	r2, r3, #8
 8007f78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f7c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f80:	f8c8 2000 	str.w	r2, [r8]
 8007f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f8c:	9307      	str	r3, [sp, #28]
 8007f8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f9a:	4b9c      	ldr	r3, [pc, #624]	@ (800820c <_printf_float+0x2c8>)
 8007f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa0:	f7f8 fdcc 	bl	8000b3c <__aeabi_dcmpun>
 8007fa4:	bb70      	cbnz	r0, 8008004 <_printf_float+0xc0>
 8007fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007faa:	4b98      	ldr	r3, [pc, #608]	@ (800820c <_printf_float+0x2c8>)
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	f7f8 fda6 	bl	8000b00 <__aeabi_dcmple>
 8007fb4:	bb30      	cbnz	r0, 8008004 <_printf_float+0xc0>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 fd95 	bl	8000aec <__aeabi_dcmplt>
 8007fc2:	b110      	cbz	r0, 8007fca <_printf_float+0x86>
 8007fc4:	232d      	movs	r3, #45	@ 0x2d
 8007fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fca:	4a91      	ldr	r2, [pc, #580]	@ (8008210 <_printf_float+0x2cc>)
 8007fcc:	4b91      	ldr	r3, [pc, #580]	@ (8008214 <_printf_float+0x2d0>)
 8007fce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fd2:	bf94      	ite	ls
 8007fd4:	4690      	movls	r8, r2
 8007fd6:	4698      	movhi	r8, r3
 8007fd8:	2303      	movs	r3, #3
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	f02b 0304 	bic.w	r3, fp, #4
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	f04f 0900 	mov.w	r9, #0
 8007fe6:	9700      	str	r7, [sp, #0]
 8007fe8:	4633      	mov	r3, r6
 8007fea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fec:	4621      	mov	r1, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 f9d2 	bl	8008398 <_printf_common>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f040 808d 	bne.w	8008114 <_printf_float+0x1d0>
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	b00d      	add	sp, #52	@ 0x34
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	4640      	mov	r0, r8
 800800a:	4649      	mov	r1, r9
 800800c:	f7f8 fd96 	bl	8000b3c <__aeabi_dcmpun>
 8008010:	b140      	cbz	r0, 8008024 <_printf_float+0xe0>
 8008012:	464b      	mov	r3, r9
 8008014:	2b00      	cmp	r3, #0
 8008016:	bfbc      	itt	lt
 8008018:	232d      	movlt	r3, #45	@ 0x2d
 800801a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800801e:	4a7e      	ldr	r2, [pc, #504]	@ (8008218 <_printf_float+0x2d4>)
 8008020:	4b7e      	ldr	r3, [pc, #504]	@ (800821c <_printf_float+0x2d8>)
 8008022:	e7d4      	b.n	8007fce <_printf_float+0x8a>
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800802a:	9206      	str	r2, [sp, #24]
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	d13b      	bne.n	80080a8 <_printf_float+0x164>
 8008030:	2306      	movs	r3, #6
 8008032:	6063      	str	r3, [r4, #4]
 8008034:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008038:	2300      	movs	r3, #0
 800803a:	6022      	str	r2, [r4, #0]
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008040:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008044:	ab09      	add	r3, sp, #36	@ 0x24
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	6861      	ldr	r1, [r4, #4]
 800804a:	ec49 8b10 	vmov	d0, r8, r9
 800804e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008052:	4628      	mov	r0, r5
 8008054:	f7ff fed6 	bl	8007e04 <__cvt>
 8008058:	9b06      	ldr	r3, [sp, #24]
 800805a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800805c:	2b47      	cmp	r3, #71	@ 0x47
 800805e:	4680      	mov	r8, r0
 8008060:	d129      	bne.n	80080b6 <_printf_float+0x172>
 8008062:	1cc8      	adds	r0, r1, #3
 8008064:	db02      	blt.n	800806c <_printf_float+0x128>
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	4299      	cmp	r1, r3
 800806a:	dd41      	ble.n	80080f0 <_printf_float+0x1ac>
 800806c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008070:	fa5f fa8a 	uxtb.w	sl, sl
 8008074:	3901      	subs	r1, #1
 8008076:	4652      	mov	r2, sl
 8008078:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800807c:	9109      	str	r1, [sp, #36]	@ 0x24
 800807e:	f7ff ff26 	bl	8007ece <__exponent>
 8008082:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008084:	1813      	adds	r3, r2, r0
 8008086:	2a01      	cmp	r2, #1
 8008088:	4681      	mov	r9, r0
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	dc02      	bgt.n	8008094 <_printf_float+0x150>
 800808e:	6822      	ldr	r2, [r4, #0]
 8008090:	07d2      	lsls	r2, r2, #31
 8008092:	d501      	bpl.n	8008098 <_printf_float+0x154>
 8008094:	3301      	adds	r3, #1
 8008096:	6123      	str	r3, [r4, #16]
 8008098:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0a2      	beq.n	8007fe6 <_printf_float+0xa2>
 80080a0:	232d      	movs	r3, #45	@ 0x2d
 80080a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080a6:	e79e      	b.n	8007fe6 <_printf_float+0xa2>
 80080a8:	9a06      	ldr	r2, [sp, #24]
 80080aa:	2a47      	cmp	r2, #71	@ 0x47
 80080ac:	d1c2      	bne.n	8008034 <_printf_float+0xf0>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1c0      	bne.n	8008034 <_printf_float+0xf0>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e7bd      	b.n	8008032 <_printf_float+0xee>
 80080b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080ba:	d9db      	bls.n	8008074 <_printf_float+0x130>
 80080bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080c0:	d118      	bne.n	80080f4 <_printf_float+0x1b0>
 80080c2:	2900      	cmp	r1, #0
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	dd0b      	ble.n	80080e0 <_printf_float+0x19c>
 80080c8:	6121      	str	r1, [r4, #16]
 80080ca:	b913      	cbnz	r3, 80080d2 <_printf_float+0x18e>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	07d0      	lsls	r0, r2, #31
 80080d0:	d502      	bpl.n	80080d8 <_printf_float+0x194>
 80080d2:	3301      	adds	r3, #1
 80080d4:	440b      	add	r3, r1
 80080d6:	6123      	str	r3, [r4, #16]
 80080d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080da:	f04f 0900 	mov.w	r9, #0
 80080de:	e7db      	b.n	8008098 <_printf_float+0x154>
 80080e0:	b913      	cbnz	r3, 80080e8 <_printf_float+0x1a4>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	07d2      	lsls	r2, r2, #31
 80080e6:	d501      	bpl.n	80080ec <_printf_float+0x1a8>
 80080e8:	3302      	adds	r3, #2
 80080ea:	e7f4      	b.n	80080d6 <_printf_float+0x192>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e7f2      	b.n	80080d6 <_printf_float+0x192>
 80080f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f6:	4299      	cmp	r1, r3
 80080f8:	db05      	blt.n	8008106 <_printf_float+0x1c2>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	6121      	str	r1, [r4, #16]
 80080fe:	07d8      	lsls	r0, r3, #31
 8008100:	d5ea      	bpl.n	80080d8 <_printf_float+0x194>
 8008102:	1c4b      	adds	r3, r1, #1
 8008104:	e7e7      	b.n	80080d6 <_printf_float+0x192>
 8008106:	2900      	cmp	r1, #0
 8008108:	bfd4      	ite	le
 800810a:	f1c1 0202 	rsble	r2, r1, #2
 800810e:	2201      	movgt	r2, #1
 8008110:	4413      	add	r3, r2
 8008112:	e7e0      	b.n	80080d6 <_printf_float+0x192>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	055a      	lsls	r2, r3, #21
 8008118:	d407      	bmi.n	800812a <_printf_float+0x1e6>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	4642      	mov	r2, r8
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	d12b      	bne.n	8008180 <_printf_float+0x23c>
 8008128:	e767      	b.n	8007ffa <_printf_float+0xb6>
 800812a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800812e:	f240 80dd 	bls.w	80082ec <_printf_float+0x3a8>
 8008132:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008136:	2200      	movs	r2, #0
 8008138:	2300      	movs	r3, #0
 800813a:	f7f8 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800813e:	2800      	cmp	r0, #0
 8008140:	d033      	beq.n	80081aa <_printf_float+0x266>
 8008142:	4a37      	ldr	r2, [pc, #220]	@ (8008220 <_printf_float+0x2dc>)
 8008144:	2301      	movs	r3, #1
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f af54 	beq.w	8007ffa <_printf_float+0xb6>
 8008152:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008156:	4543      	cmp	r3, r8
 8008158:	db02      	blt.n	8008160 <_printf_float+0x21c>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	07d8      	lsls	r0, r3, #31
 800815e:	d50f      	bpl.n	8008180 <_printf_float+0x23c>
 8008160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f af45 	beq.w	8007ffa <_printf_float+0xb6>
 8008170:	f04f 0900 	mov.w	r9, #0
 8008174:	f108 38ff 	add.w	r8, r8, #4294967295
 8008178:	f104 0a1a 	add.w	sl, r4, #26
 800817c:	45c8      	cmp	r8, r9
 800817e:	dc09      	bgt.n	8008194 <_printf_float+0x250>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	079b      	lsls	r3, r3, #30
 8008184:	f100 8103 	bmi.w	800838e <_printf_float+0x44a>
 8008188:	68e0      	ldr	r0, [r4, #12]
 800818a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800818c:	4298      	cmp	r0, r3
 800818e:	bfb8      	it	lt
 8008190:	4618      	movlt	r0, r3
 8008192:	e734      	b.n	8007ffe <_printf_float+0xba>
 8008194:	2301      	movs	r3, #1
 8008196:	4652      	mov	r2, sl
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f af2b 	beq.w	8007ffa <_printf_float+0xb6>
 80081a4:	f109 0901 	add.w	r9, r9, #1
 80081a8:	e7e8      	b.n	800817c <_printf_float+0x238>
 80081aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc39      	bgt.n	8008224 <_printf_float+0x2e0>
 80081b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008220 <_printf_float+0x2dc>)
 80081b2:	2301      	movs	r3, #1
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	f43f af1d 	beq.w	8007ffa <_printf_float+0xb6>
 80081c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081c4:	ea59 0303 	orrs.w	r3, r9, r3
 80081c8:	d102      	bne.n	80081d0 <_printf_float+0x28c>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	07d9      	lsls	r1, r3, #31
 80081ce:	d5d7      	bpl.n	8008180 <_printf_float+0x23c>
 80081d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	f43f af0d 	beq.w	8007ffa <_printf_float+0xb6>
 80081e0:	f04f 0a00 	mov.w	sl, #0
 80081e4:	f104 0b1a 	add.w	fp, r4, #26
 80081e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ea:	425b      	negs	r3, r3
 80081ec:	4553      	cmp	r3, sl
 80081ee:	dc01      	bgt.n	80081f4 <_printf_float+0x2b0>
 80081f0:	464b      	mov	r3, r9
 80081f2:	e793      	b.n	800811c <_printf_float+0x1d8>
 80081f4:	2301      	movs	r3, #1
 80081f6:	465a      	mov	r2, fp
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f aefb 	beq.w	8007ffa <_printf_float+0xb6>
 8008204:	f10a 0a01 	add.w	sl, sl, #1
 8008208:	e7ee      	b.n	80081e8 <_printf_float+0x2a4>
 800820a:	bf00      	nop
 800820c:	7fefffff 	.word	0x7fefffff
 8008210:	0800c5d4 	.word	0x0800c5d4
 8008214:	0800c5d8 	.word	0x0800c5d8
 8008218:	0800c5dc 	.word	0x0800c5dc
 800821c:	0800c5e0 	.word	0x0800c5e0
 8008220:	0800c5e4 	.word	0x0800c5e4
 8008224:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008226:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800822a:	4553      	cmp	r3, sl
 800822c:	bfa8      	it	ge
 800822e:	4653      	movge	r3, sl
 8008230:	2b00      	cmp	r3, #0
 8008232:	4699      	mov	r9, r3
 8008234:	dc36      	bgt.n	80082a4 <_printf_float+0x360>
 8008236:	f04f 0b00 	mov.w	fp, #0
 800823a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800823e:	f104 021a 	add.w	r2, r4, #26
 8008242:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008244:	9306      	str	r3, [sp, #24]
 8008246:	eba3 0309 	sub.w	r3, r3, r9
 800824a:	455b      	cmp	r3, fp
 800824c:	dc31      	bgt.n	80082b2 <_printf_float+0x36e>
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	459a      	cmp	sl, r3
 8008252:	dc3a      	bgt.n	80082ca <_printf_float+0x386>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	07da      	lsls	r2, r3, #31
 8008258:	d437      	bmi.n	80082ca <_printf_float+0x386>
 800825a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825c:	ebaa 0903 	sub.w	r9, sl, r3
 8008260:	9b06      	ldr	r3, [sp, #24]
 8008262:	ebaa 0303 	sub.w	r3, sl, r3
 8008266:	4599      	cmp	r9, r3
 8008268:	bfa8      	it	ge
 800826a:	4699      	movge	r9, r3
 800826c:	f1b9 0f00 	cmp.w	r9, #0
 8008270:	dc33      	bgt.n	80082da <_printf_float+0x396>
 8008272:	f04f 0800 	mov.w	r8, #0
 8008276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800827a:	f104 0b1a 	add.w	fp, r4, #26
 800827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008280:	ebaa 0303 	sub.w	r3, sl, r3
 8008284:	eba3 0309 	sub.w	r3, r3, r9
 8008288:	4543      	cmp	r3, r8
 800828a:	f77f af79 	ble.w	8008180 <_printf_float+0x23c>
 800828e:	2301      	movs	r3, #1
 8008290:	465a      	mov	r2, fp
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	f43f aeae 	beq.w	8007ffa <_printf_float+0xb6>
 800829e:	f108 0801 	add.w	r8, r8, #1
 80082a2:	e7ec      	b.n	800827e <_printf_float+0x33a>
 80082a4:	4642      	mov	r2, r8
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	d1c2      	bne.n	8008236 <_printf_float+0x2f2>
 80082b0:	e6a3      	b.n	8007ffa <_printf_float+0xb6>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4631      	mov	r1, r6
 80082b6:	4628      	mov	r0, r5
 80082b8:	9206      	str	r2, [sp, #24]
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f ae9c 	beq.w	8007ffa <_printf_float+0xb6>
 80082c2:	9a06      	ldr	r2, [sp, #24]
 80082c4:	f10b 0b01 	add.w	fp, fp, #1
 80082c8:	e7bb      	b.n	8008242 <_printf_float+0x2fe>
 80082ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	d1c0      	bne.n	800825a <_printf_float+0x316>
 80082d8:	e68f      	b.n	8007ffa <_printf_float+0xb6>
 80082da:	9a06      	ldr	r2, [sp, #24]
 80082dc:	464b      	mov	r3, r9
 80082de:	4442      	add	r2, r8
 80082e0:	4631      	mov	r1, r6
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b8      	blx	r7
 80082e6:	3001      	adds	r0, #1
 80082e8:	d1c3      	bne.n	8008272 <_printf_float+0x32e>
 80082ea:	e686      	b.n	8007ffa <_printf_float+0xb6>
 80082ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082f0:	f1ba 0f01 	cmp.w	sl, #1
 80082f4:	dc01      	bgt.n	80082fa <_printf_float+0x3b6>
 80082f6:	07db      	lsls	r3, r3, #31
 80082f8:	d536      	bpl.n	8008368 <_printf_float+0x424>
 80082fa:	2301      	movs	r3, #1
 80082fc:	4642      	mov	r2, r8
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	f43f ae78 	beq.w	8007ffa <_printf_float+0xb6>
 800830a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	f43f ae70 	beq.w	8007ffa <_printf_float+0xb6>
 800831a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008326:	f7f8 fbd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800832a:	b9c0      	cbnz	r0, 800835e <_printf_float+0x41a>
 800832c:	4653      	mov	r3, sl
 800832e:	f108 0201 	add.w	r2, r8, #1
 8008332:	4631      	mov	r1, r6
 8008334:	4628      	mov	r0, r5
 8008336:	47b8      	blx	r7
 8008338:	3001      	adds	r0, #1
 800833a:	d10c      	bne.n	8008356 <_printf_float+0x412>
 800833c:	e65d      	b.n	8007ffa <_printf_float+0xb6>
 800833e:	2301      	movs	r3, #1
 8008340:	465a      	mov	r2, fp
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae56 	beq.w	8007ffa <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	45d0      	cmp	r8, sl
 8008354:	dbf3      	blt.n	800833e <_printf_float+0x3fa>
 8008356:	464b      	mov	r3, r9
 8008358:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800835c:	e6df      	b.n	800811e <_printf_float+0x1da>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	f104 0b1a 	add.w	fp, r4, #26
 8008366:	e7f4      	b.n	8008352 <_printf_float+0x40e>
 8008368:	2301      	movs	r3, #1
 800836a:	4642      	mov	r2, r8
 800836c:	e7e1      	b.n	8008332 <_printf_float+0x3ee>
 800836e:	2301      	movs	r3, #1
 8008370:	464a      	mov	r2, r9
 8008372:	4631      	mov	r1, r6
 8008374:	4628      	mov	r0, r5
 8008376:	47b8      	blx	r7
 8008378:	3001      	adds	r0, #1
 800837a:	f43f ae3e 	beq.w	8007ffa <_printf_float+0xb6>
 800837e:	f108 0801 	add.w	r8, r8, #1
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008386:	1a5b      	subs	r3, r3, r1
 8008388:	4543      	cmp	r3, r8
 800838a:	dcf0      	bgt.n	800836e <_printf_float+0x42a>
 800838c:	e6fc      	b.n	8008188 <_printf_float+0x244>
 800838e:	f04f 0800 	mov.w	r8, #0
 8008392:	f104 0919 	add.w	r9, r4, #25
 8008396:	e7f4      	b.n	8008382 <_printf_float+0x43e>

08008398 <_printf_common>:
 8008398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	4616      	mov	r6, r2
 800839e:	4698      	mov	r8, r3
 80083a0:	688a      	ldr	r2, [r1, #8]
 80083a2:	690b      	ldr	r3, [r1, #16]
 80083a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083a8:	4293      	cmp	r3, r2
 80083aa:	bfb8      	it	lt
 80083ac:	4613      	movlt	r3, r2
 80083ae:	6033      	str	r3, [r6, #0]
 80083b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083b4:	4607      	mov	r7, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	b10a      	cbz	r2, 80083be <_printf_common+0x26>
 80083ba:	3301      	adds	r3, #1
 80083bc:	6033      	str	r3, [r6, #0]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	0699      	lsls	r1, r3, #26
 80083c2:	bf42      	ittt	mi
 80083c4:	6833      	ldrmi	r3, [r6, #0]
 80083c6:	3302      	addmi	r3, #2
 80083c8:	6033      	strmi	r3, [r6, #0]
 80083ca:	6825      	ldr	r5, [r4, #0]
 80083cc:	f015 0506 	ands.w	r5, r5, #6
 80083d0:	d106      	bne.n	80083e0 <_printf_common+0x48>
 80083d2:	f104 0a19 	add.w	sl, r4, #25
 80083d6:	68e3      	ldr	r3, [r4, #12]
 80083d8:	6832      	ldr	r2, [r6, #0]
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	42ab      	cmp	r3, r5
 80083de:	dc26      	bgt.n	800842e <_printf_common+0x96>
 80083e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	3b00      	subs	r3, #0
 80083e8:	bf18      	it	ne
 80083ea:	2301      	movne	r3, #1
 80083ec:	0692      	lsls	r2, r2, #26
 80083ee:	d42b      	bmi.n	8008448 <_printf_common+0xb0>
 80083f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083f4:	4641      	mov	r1, r8
 80083f6:	4638      	mov	r0, r7
 80083f8:	47c8      	blx	r9
 80083fa:	3001      	adds	r0, #1
 80083fc:	d01e      	beq.n	800843c <_printf_common+0xa4>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	6922      	ldr	r2, [r4, #16]
 8008402:	f003 0306 	and.w	r3, r3, #6
 8008406:	2b04      	cmp	r3, #4
 8008408:	bf02      	ittt	eq
 800840a:	68e5      	ldreq	r5, [r4, #12]
 800840c:	6833      	ldreq	r3, [r6, #0]
 800840e:	1aed      	subeq	r5, r5, r3
 8008410:	68a3      	ldr	r3, [r4, #8]
 8008412:	bf0c      	ite	eq
 8008414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008418:	2500      	movne	r5, #0
 800841a:	4293      	cmp	r3, r2
 800841c:	bfc4      	itt	gt
 800841e:	1a9b      	subgt	r3, r3, r2
 8008420:	18ed      	addgt	r5, r5, r3
 8008422:	2600      	movs	r6, #0
 8008424:	341a      	adds	r4, #26
 8008426:	42b5      	cmp	r5, r6
 8008428:	d11a      	bne.n	8008460 <_printf_common+0xc8>
 800842a:	2000      	movs	r0, #0
 800842c:	e008      	b.n	8008440 <_printf_common+0xa8>
 800842e:	2301      	movs	r3, #1
 8008430:	4652      	mov	r2, sl
 8008432:	4641      	mov	r1, r8
 8008434:	4638      	mov	r0, r7
 8008436:	47c8      	blx	r9
 8008438:	3001      	adds	r0, #1
 800843a:	d103      	bne.n	8008444 <_printf_common+0xac>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008444:	3501      	adds	r5, #1
 8008446:	e7c6      	b.n	80083d6 <_printf_common+0x3e>
 8008448:	18e1      	adds	r1, r4, r3
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	2030      	movs	r0, #48	@ 0x30
 800844e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008452:	4422      	add	r2, r4
 8008454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800845c:	3302      	adds	r3, #2
 800845e:	e7c7      	b.n	80083f0 <_printf_common+0x58>
 8008460:	2301      	movs	r3, #1
 8008462:	4622      	mov	r2, r4
 8008464:	4641      	mov	r1, r8
 8008466:	4638      	mov	r0, r7
 8008468:	47c8      	blx	r9
 800846a:	3001      	adds	r0, #1
 800846c:	d0e6      	beq.n	800843c <_printf_common+0xa4>
 800846e:	3601      	adds	r6, #1
 8008470:	e7d9      	b.n	8008426 <_printf_common+0x8e>
	...

08008474 <_printf_i>:
 8008474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	7e0f      	ldrb	r7, [r1, #24]
 800847a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800847c:	2f78      	cmp	r7, #120	@ 0x78
 800847e:	4691      	mov	r9, r2
 8008480:	4680      	mov	r8, r0
 8008482:	460c      	mov	r4, r1
 8008484:	469a      	mov	sl, r3
 8008486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800848a:	d807      	bhi.n	800849c <_printf_i+0x28>
 800848c:	2f62      	cmp	r7, #98	@ 0x62
 800848e:	d80a      	bhi.n	80084a6 <_printf_i+0x32>
 8008490:	2f00      	cmp	r7, #0
 8008492:	f000 80d2 	beq.w	800863a <_printf_i+0x1c6>
 8008496:	2f58      	cmp	r7, #88	@ 0x58
 8008498:	f000 80b9 	beq.w	800860e <_printf_i+0x19a>
 800849c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084a4:	e03a      	b.n	800851c <_printf_i+0xa8>
 80084a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084aa:	2b15      	cmp	r3, #21
 80084ac:	d8f6      	bhi.n	800849c <_printf_i+0x28>
 80084ae:	a101      	add	r1, pc, #4	@ (adr r1, 80084b4 <_printf_i+0x40>)
 80084b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084b4:	0800850d 	.word	0x0800850d
 80084b8:	08008521 	.word	0x08008521
 80084bc:	0800849d 	.word	0x0800849d
 80084c0:	0800849d 	.word	0x0800849d
 80084c4:	0800849d 	.word	0x0800849d
 80084c8:	0800849d 	.word	0x0800849d
 80084cc:	08008521 	.word	0x08008521
 80084d0:	0800849d 	.word	0x0800849d
 80084d4:	0800849d 	.word	0x0800849d
 80084d8:	0800849d 	.word	0x0800849d
 80084dc:	0800849d 	.word	0x0800849d
 80084e0:	08008621 	.word	0x08008621
 80084e4:	0800854b 	.word	0x0800854b
 80084e8:	080085db 	.word	0x080085db
 80084ec:	0800849d 	.word	0x0800849d
 80084f0:	0800849d 	.word	0x0800849d
 80084f4:	08008643 	.word	0x08008643
 80084f8:	0800849d 	.word	0x0800849d
 80084fc:	0800854b 	.word	0x0800854b
 8008500:	0800849d 	.word	0x0800849d
 8008504:	0800849d 	.word	0x0800849d
 8008508:	080085e3 	.word	0x080085e3
 800850c:	6833      	ldr	r3, [r6, #0]
 800850e:	1d1a      	adds	r2, r3, #4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6032      	str	r2, [r6, #0]
 8008514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800851c:	2301      	movs	r3, #1
 800851e:	e09d      	b.n	800865c <_printf_i+0x1e8>
 8008520:	6833      	ldr	r3, [r6, #0]
 8008522:	6820      	ldr	r0, [r4, #0]
 8008524:	1d19      	adds	r1, r3, #4
 8008526:	6031      	str	r1, [r6, #0]
 8008528:	0606      	lsls	r6, r0, #24
 800852a:	d501      	bpl.n	8008530 <_printf_i+0xbc>
 800852c:	681d      	ldr	r5, [r3, #0]
 800852e:	e003      	b.n	8008538 <_printf_i+0xc4>
 8008530:	0645      	lsls	r5, r0, #25
 8008532:	d5fb      	bpl.n	800852c <_printf_i+0xb8>
 8008534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008538:	2d00      	cmp	r5, #0
 800853a:	da03      	bge.n	8008544 <_printf_i+0xd0>
 800853c:	232d      	movs	r3, #45	@ 0x2d
 800853e:	426d      	negs	r5, r5
 8008540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008544:	4859      	ldr	r0, [pc, #356]	@ (80086ac <_printf_i+0x238>)
 8008546:	230a      	movs	r3, #10
 8008548:	e011      	b.n	800856e <_printf_i+0xfa>
 800854a:	6821      	ldr	r1, [r4, #0]
 800854c:	6833      	ldr	r3, [r6, #0]
 800854e:	0608      	lsls	r0, r1, #24
 8008550:	f853 5b04 	ldr.w	r5, [r3], #4
 8008554:	d402      	bmi.n	800855c <_printf_i+0xe8>
 8008556:	0649      	lsls	r1, r1, #25
 8008558:	bf48      	it	mi
 800855a:	b2ad      	uxthmi	r5, r5
 800855c:	2f6f      	cmp	r7, #111	@ 0x6f
 800855e:	4853      	ldr	r0, [pc, #332]	@ (80086ac <_printf_i+0x238>)
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	bf14      	ite	ne
 8008564:	230a      	movne	r3, #10
 8008566:	2308      	moveq	r3, #8
 8008568:	2100      	movs	r1, #0
 800856a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800856e:	6866      	ldr	r6, [r4, #4]
 8008570:	60a6      	str	r6, [r4, #8]
 8008572:	2e00      	cmp	r6, #0
 8008574:	bfa2      	ittt	ge
 8008576:	6821      	ldrge	r1, [r4, #0]
 8008578:	f021 0104 	bicge.w	r1, r1, #4
 800857c:	6021      	strge	r1, [r4, #0]
 800857e:	b90d      	cbnz	r5, 8008584 <_printf_i+0x110>
 8008580:	2e00      	cmp	r6, #0
 8008582:	d04b      	beq.n	800861c <_printf_i+0x1a8>
 8008584:	4616      	mov	r6, r2
 8008586:	fbb5 f1f3 	udiv	r1, r5, r3
 800858a:	fb03 5711 	mls	r7, r3, r1, r5
 800858e:	5dc7      	ldrb	r7, [r0, r7]
 8008590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008594:	462f      	mov	r7, r5
 8008596:	42bb      	cmp	r3, r7
 8008598:	460d      	mov	r5, r1
 800859a:	d9f4      	bls.n	8008586 <_printf_i+0x112>
 800859c:	2b08      	cmp	r3, #8
 800859e:	d10b      	bne.n	80085b8 <_printf_i+0x144>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	07df      	lsls	r7, r3, #31
 80085a4:	d508      	bpl.n	80085b8 <_printf_i+0x144>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	6861      	ldr	r1, [r4, #4]
 80085aa:	4299      	cmp	r1, r3
 80085ac:	bfde      	ittt	le
 80085ae:	2330      	movle	r3, #48	@ 0x30
 80085b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085b8:	1b92      	subs	r2, r2, r6
 80085ba:	6122      	str	r2, [r4, #16]
 80085bc:	f8cd a000 	str.w	sl, [sp]
 80085c0:	464b      	mov	r3, r9
 80085c2:	aa03      	add	r2, sp, #12
 80085c4:	4621      	mov	r1, r4
 80085c6:	4640      	mov	r0, r8
 80085c8:	f7ff fee6 	bl	8008398 <_printf_common>
 80085cc:	3001      	adds	r0, #1
 80085ce:	d14a      	bne.n	8008666 <_printf_i+0x1f2>
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	b004      	add	sp, #16
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	f043 0320 	orr.w	r3, r3, #32
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	4833      	ldr	r0, [pc, #204]	@ (80086b0 <_printf_i+0x23c>)
 80085e4:	2778      	movs	r7, #120	@ 0x78
 80085e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	6831      	ldr	r1, [r6, #0]
 80085ee:	061f      	lsls	r7, r3, #24
 80085f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80085f4:	d402      	bmi.n	80085fc <_printf_i+0x188>
 80085f6:	065f      	lsls	r7, r3, #25
 80085f8:	bf48      	it	mi
 80085fa:	b2ad      	uxthmi	r5, r5
 80085fc:	6031      	str	r1, [r6, #0]
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	bf44      	itt	mi
 8008602:	f043 0320 	orrmi.w	r3, r3, #32
 8008606:	6023      	strmi	r3, [r4, #0]
 8008608:	b11d      	cbz	r5, 8008612 <_printf_i+0x19e>
 800860a:	2310      	movs	r3, #16
 800860c:	e7ac      	b.n	8008568 <_printf_i+0xf4>
 800860e:	4827      	ldr	r0, [pc, #156]	@ (80086ac <_printf_i+0x238>)
 8008610:	e7e9      	b.n	80085e6 <_printf_i+0x172>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f023 0320 	bic.w	r3, r3, #32
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	e7f6      	b.n	800860a <_printf_i+0x196>
 800861c:	4616      	mov	r6, r2
 800861e:	e7bd      	b.n	800859c <_printf_i+0x128>
 8008620:	6833      	ldr	r3, [r6, #0]
 8008622:	6825      	ldr	r5, [r4, #0]
 8008624:	6961      	ldr	r1, [r4, #20]
 8008626:	1d18      	adds	r0, r3, #4
 8008628:	6030      	str	r0, [r6, #0]
 800862a:	062e      	lsls	r6, r5, #24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	d501      	bpl.n	8008634 <_printf_i+0x1c0>
 8008630:	6019      	str	r1, [r3, #0]
 8008632:	e002      	b.n	800863a <_printf_i+0x1c6>
 8008634:	0668      	lsls	r0, r5, #25
 8008636:	d5fb      	bpl.n	8008630 <_printf_i+0x1bc>
 8008638:	8019      	strh	r1, [r3, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	6123      	str	r3, [r4, #16]
 800863e:	4616      	mov	r6, r2
 8008640:	e7bc      	b.n	80085bc <_printf_i+0x148>
 8008642:	6833      	ldr	r3, [r6, #0]
 8008644:	1d1a      	adds	r2, r3, #4
 8008646:	6032      	str	r2, [r6, #0]
 8008648:	681e      	ldr	r6, [r3, #0]
 800864a:	6862      	ldr	r2, [r4, #4]
 800864c:	2100      	movs	r1, #0
 800864e:	4630      	mov	r0, r6
 8008650:	f7f7 fdc6 	bl	80001e0 <memchr>
 8008654:	b108      	cbz	r0, 800865a <_printf_i+0x1e6>
 8008656:	1b80      	subs	r0, r0, r6
 8008658:	6060      	str	r0, [r4, #4]
 800865a:	6863      	ldr	r3, [r4, #4]
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	2300      	movs	r3, #0
 8008660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008664:	e7aa      	b.n	80085bc <_printf_i+0x148>
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	4632      	mov	r2, r6
 800866a:	4649      	mov	r1, r9
 800866c:	4640      	mov	r0, r8
 800866e:	47d0      	blx	sl
 8008670:	3001      	adds	r0, #1
 8008672:	d0ad      	beq.n	80085d0 <_printf_i+0x15c>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	079b      	lsls	r3, r3, #30
 8008678:	d413      	bmi.n	80086a2 <_printf_i+0x22e>
 800867a:	68e0      	ldr	r0, [r4, #12]
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	4298      	cmp	r0, r3
 8008680:	bfb8      	it	lt
 8008682:	4618      	movlt	r0, r3
 8008684:	e7a6      	b.n	80085d4 <_printf_i+0x160>
 8008686:	2301      	movs	r3, #1
 8008688:	4632      	mov	r2, r6
 800868a:	4649      	mov	r1, r9
 800868c:	4640      	mov	r0, r8
 800868e:	47d0      	blx	sl
 8008690:	3001      	adds	r0, #1
 8008692:	d09d      	beq.n	80085d0 <_printf_i+0x15c>
 8008694:	3501      	adds	r5, #1
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	9903      	ldr	r1, [sp, #12]
 800869a:	1a5b      	subs	r3, r3, r1
 800869c:	42ab      	cmp	r3, r5
 800869e:	dcf2      	bgt.n	8008686 <_printf_i+0x212>
 80086a0:	e7eb      	b.n	800867a <_printf_i+0x206>
 80086a2:	2500      	movs	r5, #0
 80086a4:	f104 0619 	add.w	r6, r4, #25
 80086a8:	e7f5      	b.n	8008696 <_printf_i+0x222>
 80086aa:	bf00      	nop
 80086ac:	0800c5e6 	.word	0x0800c5e6
 80086b0:	0800c5f7 	.word	0x0800c5f7

080086b4 <_scanf_float>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	b087      	sub	sp, #28
 80086ba:	4617      	mov	r7, r2
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	688b      	ldr	r3, [r1, #8]
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80086c6:	bf81      	itttt	hi
 80086c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80086cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80086d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80086d4:	608b      	strhi	r3, [r1, #8]
 80086d6:	680b      	ldr	r3, [r1, #0]
 80086d8:	460a      	mov	r2, r1
 80086da:	f04f 0500 	mov.w	r5, #0
 80086de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80086e2:	f842 3b1c 	str.w	r3, [r2], #28
 80086e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086ea:	4680      	mov	r8, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	bf98      	it	ls
 80086f0:	f04f 0b00 	movls.w	fp, #0
 80086f4:	9201      	str	r2, [sp, #4]
 80086f6:	4616      	mov	r6, r2
 80086f8:	46aa      	mov	sl, r5
 80086fa:	46a9      	mov	r9, r5
 80086fc:	9502      	str	r5, [sp, #8]
 80086fe:	68a2      	ldr	r2, [r4, #8]
 8008700:	b152      	cbz	r2, 8008718 <_scanf_float+0x64>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b4e      	cmp	r3, #78	@ 0x4e
 8008708:	d864      	bhi.n	80087d4 <_scanf_float+0x120>
 800870a:	2b40      	cmp	r3, #64	@ 0x40
 800870c:	d83c      	bhi.n	8008788 <_scanf_float+0xd4>
 800870e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008712:	b2c8      	uxtb	r0, r1
 8008714:	280e      	cmp	r0, #14
 8008716:	d93a      	bls.n	800878e <_scanf_float+0xda>
 8008718:	f1b9 0f00 	cmp.w	r9, #0
 800871c:	d003      	beq.n	8008726 <_scanf_float+0x72>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	f10a 3aff 	add.w	sl, sl, #4294967295
 800872a:	f1ba 0f01 	cmp.w	sl, #1
 800872e:	f200 8117 	bhi.w	8008960 <_scanf_float+0x2ac>
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	429e      	cmp	r6, r3
 8008736:	f200 8108 	bhi.w	800894a <_scanf_float+0x296>
 800873a:	2001      	movs	r0, #1
 800873c:	b007      	add	sp, #28
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008742:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008746:	2a0d      	cmp	r2, #13
 8008748:	d8e6      	bhi.n	8008718 <_scanf_float+0x64>
 800874a:	a101      	add	r1, pc, #4	@ (adr r1, 8008750 <_scanf_float+0x9c>)
 800874c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008750:	08008897 	.word	0x08008897
 8008754:	08008719 	.word	0x08008719
 8008758:	08008719 	.word	0x08008719
 800875c:	08008719 	.word	0x08008719
 8008760:	080088f7 	.word	0x080088f7
 8008764:	080088cf 	.word	0x080088cf
 8008768:	08008719 	.word	0x08008719
 800876c:	08008719 	.word	0x08008719
 8008770:	080088a5 	.word	0x080088a5
 8008774:	08008719 	.word	0x08008719
 8008778:	08008719 	.word	0x08008719
 800877c:	08008719 	.word	0x08008719
 8008780:	08008719 	.word	0x08008719
 8008784:	0800885d 	.word	0x0800885d
 8008788:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800878c:	e7db      	b.n	8008746 <_scanf_float+0x92>
 800878e:	290e      	cmp	r1, #14
 8008790:	d8c2      	bhi.n	8008718 <_scanf_float+0x64>
 8008792:	a001      	add	r0, pc, #4	@ (adr r0, 8008798 <_scanf_float+0xe4>)
 8008794:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008798:	0800884d 	.word	0x0800884d
 800879c:	08008719 	.word	0x08008719
 80087a0:	0800884d 	.word	0x0800884d
 80087a4:	080088e3 	.word	0x080088e3
 80087a8:	08008719 	.word	0x08008719
 80087ac:	080087f5 	.word	0x080087f5
 80087b0:	08008833 	.word	0x08008833
 80087b4:	08008833 	.word	0x08008833
 80087b8:	08008833 	.word	0x08008833
 80087bc:	08008833 	.word	0x08008833
 80087c0:	08008833 	.word	0x08008833
 80087c4:	08008833 	.word	0x08008833
 80087c8:	08008833 	.word	0x08008833
 80087cc:	08008833 	.word	0x08008833
 80087d0:	08008833 	.word	0x08008833
 80087d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80087d6:	d809      	bhi.n	80087ec <_scanf_float+0x138>
 80087d8:	2b60      	cmp	r3, #96	@ 0x60
 80087da:	d8b2      	bhi.n	8008742 <_scanf_float+0x8e>
 80087dc:	2b54      	cmp	r3, #84	@ 0x54
 80087de:	d07b      	beq.n	80088d8 <_scanf_float+0x224>
 80087e0:	2b59      	cmp	r3, #89	@ 0x59
 80087e2:	d199      	bne.n	8008718 <_scanf_float+0x64>
 80087e4:	2d07      	cmp	r5, #7
 80087e6:	d197      	bne.n	8008718 <_scanf_float+0x64>
 80087e8:	2508      	movs	r5, #8
 80087ea:	e02c      	b.n	8008846 <_scanf_float+0x192>
 80087ec:	2b74      	cmp	r3, #116	@ 0x74
 80087ee:	d073      	beq.n	80088d8 <_scanf_float+0x224>
 80087f0:	2b79      	cmp	r3, #121	@ 0x79
 80087f2:	e7f6      	b.n	80087e2 <_scanf_float+0x12e>
 80087f4:	6821      	ldr	r1, [r4, #0]
 80087f6:	05c8      	lsls	r0, r1, #23
 80087f8:	d51b      	bpl.n	8008832 <_scanf_float+0x17e>
 80087fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80087fe:	6021      	str	r1, [r4, #0]
 8008800:	f109 0901 	add.w	r9, r9, #1
 8008804:	f1bb 0f00 	cmp.w	fp, #0
 8008808:	d003      	beq.n	8008812 <_scanf_float+0x15e>
 800880a:	3201      	adds	r2, #1
 800880c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008810:	60a2      	str	r2, [r4, #8]
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	3b01      	subs	r3, #1
 8008816:	60a3      	str	r3, [r4, #8]
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	3301      	adds	r3, #1
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3b01      	subs	r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	f340 8087 	ble.w	8008938 <_scanf_float+0x284>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	3301      	adds	r3, #1
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	e765      	b.n	80086fe <_scanf_float+0x4a>
 8008832:	eb1a 0105 	adds.w	r1, sl, r5
 8008836:	f47f af6f 	bne.w	8008718 <_scanf_float+0x64>
 800883a:	6822      	ldr	r2, [r4, #0]
 800883c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	460d      	mov	r5, r1
 8008844:	468a      	mov	sl, r1
 8008846:	f806 3b01 	strb.w	r3, [r6], #1
 800884a:	e7e2      	b.n	8008812 <_scanf_float+0x15e>
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	0610      	lsls	r0, r2, #24
 8008850:	f57f af62 	bpl.w	8008718 <_scanf_float+0x64>
 8008854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008858:	6022      	str	r2, [r4, #0]
 800885a:	e7f4      	b.n	8008846 <_scanf_float+0x192>
 800885c:	f1ba 0f00 	cmp.w	sl, #0
 8008860:	d10e      	bne.n	8008880 <_scanf_float+0x1cc>
 8008862:	f1b9 0f00 	cmp.w	r9, #0
 8008866:	d10e      	bne.n	8008886 <_scanf_float+0x1d2>
 8008868:	6822      	ldr	r2, [r4, #0]
 800886a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800886e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008872:	d108      	bne.n	8008886 <_scanf_float+0x1d2>
 8008874:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008878:	6022      	str	r2, [r4, #0]
 800887a:	f04f 0a01 	mov.w	sl, #1
 800887e:	e7e2      	b.n	8008846 <_scanf_float+0x192>
 8008880:	f1ba 0f02 	cmp.w	sl, #2
 8008884:	d055      	beq.n	8008932 <_scanf_float+0x27e>
 8008886:	2d01      	cmp	r5, #1
 8008888:	d002      	beq.n	8008890 <_scanf_float+0x1dc>
 800888a:	2d04      	cmp	r5, #4
 800888c:	f47f af44 	bne.w	8008718 <_scanf_float+0x64>
 8008890:	3501      	adds	r5, #1
 8008892:	b2ed      	uxtb	r5, r5
 8008894:	e7d7      	b.n	8008846 <_scanf_float+0x192>
 8008896:	f1ba 0f01 	cmp.w	sl, #1
 800889a:	f47f af3d 	bne.w	8008718 <_scanf_float+0x64>
 800889e:	f04f 0a02 	mov.w	sl, #2
 80088a2:	e7d0      	b.n	8008846 <_scanf_float+0x192>
 80088a4:	b97d      	cbnz	r5, 80088c6 <_scanf_float+0x212>
 80088a6:	f1b9 0f00 	cmp.w	r9, #0
 80088aa:	f47f af38 	bne.w	800871e <_scanf_float+0x6a>
 80088ae:	6822      	ldr	r2, [r4, #0]
 80088b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80088b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80088b8:	f040 8108 	bne.w	8008acc <_scanf_float+0x418>
 80088bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088c0:	6022      	str	r2, [r4, #0]
 80088c2:	2501      	movs	r5, #1
 80088c4:	e7bf      	b.n	8008846 <_scanf_float+0x192>
 80088c6:	2d03      	cmp	r5, #3
 80088c8:	d0e2      	beq.n	8008890 <_scanf_float+0x1dc>
 80088ca:	2d05      	cmp	r5, #5
 80088cc:	e7de      	b.n	800888c <_scanf_float+0x1d8>
 80088ce:	2d02      	cmp	r5, #2
 80088d0:	f47f af22 	bne.w	8008718 <_scanf_float+0x64>
 80088d4:	2503      	movs	r5, #3
 80088d6:	e7b6      	b.n	8008846 <_scanf_float+0x192>
 80088d8:	2d06      	cmp	r5, #6
 80088da:	f47f af1d 	bne.w	8008718 <_scanf_float+0x64>
 80088de:	2507      	movs	r5, #7
 80088e0:	e7b1      	b.n	8008846 <_scanf_float+0x192>
 80088e2:	6822      	ldr	r2, [r4, #0]
 80088e4:	0591      	lsls	r1, r2, #22
 80088e6:	f57f af17 	bpl.w	8008718 <_scanf_float+0x64>
 80088ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80088ee:	6022      	str	r2, [r4, #0]
 80088f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80088f4:	e7a7      	b.n	8008846 <_scanf_float+0x192>
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80088fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008900:	d006      	beq.n	8008910 <_scanf_float+0x25c>
 8008902:	0550      	lsls	r0, r2, #21
 8008904:	f57f af08 	bpl.w	8008718 <_scanf_float+0x64>
 8008908:	f1b9 0f00 	cmp.w	r9, #0
 800890c:	f000 80de 	beq.w	8008acc <_scanf_float+0x418>
 8008910:	0591      	lsls	r1, r2, #22
 8008912:	bf58      	it	pl
 8008914:	9902      	ldrpl	r1, [sp, #8]
 8008916:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800891a:	bf58      	it	pl
 800891c:	eba9 0101 	subpl.w	r1, r9, r1
 8008920:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008924:	bf58      	it	pl
 8008926:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800892a:	6022      	str	r2, [r4, #0]
 800892c:	f04f 0900 	mov.w	r9, #0
 8008930:	e789      	b.n	8008846 <_scanf_float+0x192>
 8008932:	f04f 0a03 	mov.w	sl, #3
 8008936:	e786      	b.n	8008846 <_scanf_float+0x192>
 8008938:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800893c:	4639      	mov	r1, r7
 800893e:	4640      	mov	r0, r8
 8008940:	4798      	blx	r3
 8008942:	2800      	cmp	r0, #0
 8008944:	f43f aedb 	beq.w	80086fe <_scanf_float+0x4a>
 8008948:	e6e6      	b.n	8008718 <_scanf_float+0x64>
 800894a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800894e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008952:	463a      	mov	r2, r7
 8008954:	4640      	mov	r0, r8
 8008956:	4798      	blx	r3
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	3b01      	subs	r3, #1
 800895c:	6123      	str	r3, [r4, #16]
 800895e:	e6e8      	b.n	8008732 <_scanf_float+0x7e>
 8008960:	1e6b      	subs	r3, r5, #1
 8008962:	2b06      	cmp	r3, #6
 8008964:	d824      	bhi.n	80089b0 <_scanf_float+0x2fc>
 8008966:	2d02      	cmp	r5, #2
 8008968:	d836      	bhi.n	80089d8 <_scanf_float+0x324>
 800896a:	9b01      	ldr	r3, [sp, #4]
 800896c:	429e      	cmp	r6, r3
 800896e:	f67f aee4 	bls.w	800873a <_scanf_float+0x86>
 8008972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800897a:	463a      	mov	r2, r7
 800897c:	4640      	mov	r0, r8
 800897e:	4798      	blx	r3
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	3b01      	subs	r3, #1
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	e7f0      	b.n	800896a <_scanf_float+0x2b6>
 8008988:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800898c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008990:	463a      	mov	r2, r7
 8008992:	4640      	mov	r0, r8
 8008994:	4798      	blx	r3
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	3b01      	subs	r3, #1
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a0:	fa5f fa8a 	uxtb.w	sl, sl
 80089a4:	f1ba 0f02 	cmp.w	sl, #2
 80089a8:	d1ee      	bne.n	8008988 <_scanf_float+0x2d4>
 80089aa:	3d03      	subs	r5, #3
 80089ac:	b2ed      	uxtb	r5, r5
 80089ae:	1b76      	subs	r6, r6, r5
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	05da      	lsls	r2, r3, #23
 80089b4:	d530      	bpl.n	8008a18 <_scanf_float+0x364>
 80089b6:	055b      	lsls	r3, r3, #21
 80089b8:	d511      	bpl.n	80089de <_scanf_float+0x32a>
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	429e      	cmp	r6, r3
 80089be:	f67f aebc 	bls.w	800873a <_scanf_float+0x86>
 80089c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089ca:	463a      	mov	r2, r7
 80089cc:	4640      	mov	r0, r8
 80089ce:	4798      	blx	r3
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	e7f0      	b.n	80089ba <_scanf_float+0x306>
 80089d8:	46aa      	mov	sl, r5
 80089da:	46b3      	mov	fp, r6
 80089dc:	e7de      	b.n	800899c <_scanf_float+0x2e8>
 80089de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	2965      	cmp	r1, #101	@ 0x65
 80089e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80089ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80089ee:	6123      	str	r3, [r4, #16]
 80089f0:	d00c      	beq.n	8008a0c <_scanf_float+0x358>
 80089f2:	2945      	cmp	r1, #69	@ 0x45
 80089f4:	d00a      	beq.n	8008a0c <_scanf_float+0x358>
 80089f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089fa:	463a      	mov	r2, r7
 80089fc:	4640      	mov	r0, r8
 80089fe:	4798      	blx	r3
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	1eb5      	subs	r5, r6, #2
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a10:	463a      	mov	r2, r7
 8008a12:	4640      	mov	r0, r8
 8008a14:	4798      	blx	r3
 8008a16:	462e      	mov	r6, r5
 8008a18:	6822      	ldr	r2, [r4, #0]
 8008a1a:	f012 0210 	ands.w	r2, r2, #16
 8008a1e:	d001      	beq.n	8008a24 <_scanf_float+0x370>
 8008a20:	2000      	movs	r0, #0
 8008a22:	e68b      	b.n	800873c <_scanf_float+0x88>
 8008a24:	7032      	strb	r2, [r6, #0]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a30:	d11c      	bne.n	8008a6c <_scanf_float+0x3b8>
 8008a32:	9b02      	ldr	r3, [sp, #8]
 8008a34:	454b      	cmp	r3, r9
 8008a36:	eba3 0209 	sub.w	r2, r3, r9
 8008a3a:	d123      	bne.n	8008a84 <_scanf_float+0x3d0>
 8008a3c:	9901      	ldr	r1, [sp, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4640      	mov	r0, r8
 8008a42:	f002 fc2d 	bl	800b2a0 <_strtod_r>
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	6821      	ldr	r1, [r4, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f011 0f02 	tst.w	r1, #2
 8008a50:	ec57 6b10 	vmov	r6, r7, d0
 8008a54:	f103 0204 	add.w	r2, r3, #4
 8008a58:	d01f      	beq.n	8008a9a <_scanf_float+0x3e6>
 8008a5a:	9903      	ldr	r1, [sp, #12]
 8008a5c:	600a      	str	r2, [r1, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	e9c3 6700 	strd	r6, r7, [r3]
 8008a64:	68e3      	ldr	r3, [r4, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60e3      	str	r3, [r4, #12]
 8008a6a:	e7d9      	b.n	8008a20 <_scanf_float+0x36c>
 8008a6c:	9b04      	ldr	r3, [sp, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0e4      	beq.n	8008a3c <_scanf_float+0x388>
 8008a72:	9905      	ldr	r1, [sp, #20]
 8008a74:	230a      	movs	r3, #10
 8008a76:	3101      	adds	r1, #1
 8008a78:	4640      	mov	r0, r8
 8008a7a:	f002 fc91 	bl	800b3a0 <_strtol_r>
 8008a7e:	9b04      	ldr	r3, [sp, #16]
 8008a80:	9e05      	ldr	r6, [sp, #20]
 8008a82:	1ac2      	subs	r2, r0, r3
 8008a84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a88:	429e      	cmp	r6, r3
 8008a8a:	bf28      	it	cs
 8008a8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a90:	4910      	ldr	r1, [pc, #64]	@ (8008ad4 <_scanf_float+0x420>)
 8008a92:	4630      	mov	r0, r6
 8008a94:	f000 f918 	bl	8008cc8 <siprintf>
 8008a98:	e7d0      	b.n	8008a3c <_scanf_float+0x388>
 8008a9a:	f011 0f04 	tst.w	r1, #4
 8008a9e:	9903      	ldr	r1, [sp, #12]
 8008aa0:	600a      	str	r2, [r1, #0]
 8008aa2:	d1dc      	bne.n	8008a5e <_scanf_float+0x3aa>
 8008aa4:	681d      	ldr	r5, [r3, #0]
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	4630      	mov	r0, r6
 8008aac:	4639      	mov	r1, r7
 8008aae:	f7f8 f845 	bl	8000b3c <__aeabi_dcmpun>
 8008ab2:	b128      	cbz	r0, 8008ac0 <_scanf_float+0x40c>
 8008ab4:	4808      	ldr	r0, [pc, #32]	@ (8008ad8 <_scanf_float+0x424>)
 8008ab6:	f000 f9eb 	bl	8008e90 <nanf>
 8008aba:	ed85 0a00 	vstr	s0, [r5]
 8008abe:	e7d1      	b.n	8008a64 <_scanf_float+0x3b0>
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f8 f898 	bl	8000bf8 <__aeabi_d2f>
 8008ac8:	6028      	str	r0, [r5, #0]
 8008aca:	e7cb      	b.n	8008a64 <_scanf_float+0x3b0>
 8008acc:	f04f 0900 	mov.w	r9, #0
 8008ad0:	e629      	b.n	8008726 <_scanf_float+0x72>
 8008ad2:	bf00      	nop
 8008ad4:	0800c608 	.word	0x0800c608
 8008ad8:	0800c99d 	.word	0x0800c99d

08008adc <std>:
 8008adc:	2300      	movs	r3, #0
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aea:	6083      	str	r3, [r0, #8]
 8008aec:	8181      	strh	r1, [r0, #12]
 8008aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8008af0:	81c2      	strh	r2, [r0, #14]
 8008af2:	6183      	str	r3, [r0, #24]
 8008af4:	4619      	mov	r1, r3
 8008af6:	2208      	movs	r2, #8
 8008af8:	305c      	adds	r0, #92	@ 0x5c
 8008afa:	f000 f948 	bl	8008d8e <memset>
 8008afe:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <std+0x58>)
 8008b00:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b02:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <std+0x5c>)
 8008b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <std+0x60>)
 8008b08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <std+0x64>)
 8008b0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <std+0x68>)
 8008b10:	6224      	str	r4, [r4, #32]
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d006      	beq.n	8008b24 <std+0x48>
 8008b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b1a:	4294      	cmp	r4, r2
 8008b1c:	d002      	beq.n	8008b24 <std+0x48>
 8008b1e:	33d0      	adds	r3, #208	@ 0xd0
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d105      	bne.n	8008b30 <std+0x54>
 8008b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b2c:	f000 b9ac 	b.w	8008e88 <__retarget_lock_init_recursive>
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	bf00      	nop
 8008b34:	08008d09 	.word	0x08008d09
 8008b38:	08008d2b 	.word	0x08008d2b
 8008b3c:	08008d63 	.word	0x08008d63
 8008b40:	08008d87 	.word	0x08008d87
 8008b44:	20000440 	.word	0x20000440

08008b48 <stdio_exit_handler>:
 8008b48:	4a02      	ldr	r2, [pc, #8]	@ (8008b54 <stdio_exit_handler+0xc>)
 8008b4a:	4903      	ldr	r1, [pc, #12]	@ (8008b58 <stdio_exit_handler+0x10>)
 8008b4c:	4803      	ldr	r0, [pc, #12]	@ (8008b5c <stdio_exit_handler+0x14>)
 8008b4e:	f000 b869 	b.w	8008c24 <_fwalk_sglue>
 8008b52:	bf00      	nop
 8008b54:	20000028 	.word	0x20000028
 8008b58:	0800b75d 	.word	0x0800b75d
 8008b5c:	20000038 	.word	0x20000038

08008b60 <cleanup_stdio>:
 8008b60:	6841      	ldr	r1, [r0, #4]
 8008b62:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <cleanup_stdio+0x34>)
 8008b64:	4299      	cmp	r1, r3
 8008b66:	b510      	push	{r4, lr}
 8008b68:	4604      	mov	r4, r0
 8008b6a:	d001      	beq.n	8008b70 <cleanup_stdio+0x10>
 8008b6c:	f002 fdf6 	bl	800b75c <_fflush_r>
 8008b70:	68a1      	ldr	r1, [r4, #8]
 8008b72:	4b09      	ldr	r3, [pc, #36]	@ (8008b98 <cleanup_stdio+0x38>)
 8008b74:	4299      	cmp	r1, r3
 8008b76:	d002      	beq.n	8008b7e <cleanup_stdio+0x1e>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f002 fdef 	bl	800b75c <_fflush_r>
 8008b7e:	68e1      	ldr	r1, [r4, #12]
 8008b80:	4b06      	ldr	r3, [pc, #24]	@ (8008b9c <cleanup_stdio+0x3c>)
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d004      	beq.n	8008b90 <cleanup_stdio+0x30>
 8008b86:	4620      	mov	r0, r4
 8008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b8c:	f002 bde6 	b.w	800b75c <_fflush_r>
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	bf00      	nop
 8008b94:	20000440 	.word	0x20000440
 8008b98:	200004a8 	.word	0x200004a8
 8008b9c:	20000510 	.word	0x20000510

08008ba0 <global_stdio_init.part.0>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <global_stdio_init.part.0+0x30>)
 8008ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8008bd4 <global_stdio_init.part.0+0x34>)
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd8 <global_stdio_init.part.0+0x38>)
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	4620      	mov	r0, r4
 8008bac:	2200      	movs	r2, #0
 8008bae:	2104      	movs	r1, #4
 8008bb0:	f7ff ff94 	bl	8008adc <std>
 8008bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008bb8:	2201      	movs	r2, #1
 8008bba:	2109      	movs	r1, #9
 8008bbc:	f7ff ff8e 	bl	8008adc <std>
 8008bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bca:	2112      	movs	r1, #18
 8008bcc:	f7ff bf86 	b.w	8008adc <std>
 8008bd0:	20000578 	.word	0x20000578
 8008bd4:	20000440 	.word	0x20000440
 8008bd8:	08008b49 	.word	0x08008b49

08008bdc <__sfp_lock_acquire>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	@ (8008be4 <__sfp_lock_acquire+0x8>)
 8008bde:	f000 b954 	b.w	8008e8a <__retarget_lock_acquire_recursive>
 8008be2:	bf00      	nop
 8008be4:	20000581 	.word	0x20000581

08008be8 <__sfp_lock_release>:
 8008be8:	4801      	ldr	r0, [pc, #4]	@ (8008bf0 <__sfp_lock_release+0x8>)
 8008bea:	f000 b94f 	b.w	8008e8c <__retarget_lock_release_recursive>
 8008bee:	bf00      	nop
 8008bf0:	20000581 	.word	0x20000581

08008bf4 <__sinit>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	f7ff fff0 	bl	8008bdc <__sfp_lock_acquire>
 8008bfc:	6a23      	ldr	r3, [r4, #32]
 8008bfe:	b11b      	cbz	r3, 8008c08 <__sinit+0x14>
 8008c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c04:	f7ff bff0 	b.w	8008be8 <__sfp_lock_release>
 8008c08:	4b04      	ldr	r3, [pc, #16]	@ (8008c1c <__sinit+0x28>)
 8008c0a:	6223      	str	r3, [r4, #32]
 8008c0c:	4b04      	ldr	r3, [pc, #16]	@ (8008c20 <__sinit+0x2c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f5      	bne.n	8008c00 <__sinit+0xc>
 8008c14:	f7ff ffc4 	bl	8008ba0 <global_stdio_init.part.0>
 8008c18:	e7f2      	b.n	8008c00 <__sinit+0xc>
 8008c1a:	bf00      	nop
 8008c1c:	08008b61 	.word	0x08008b61
 8008c20:	20000578 	.word	0x20000578

08008c24 <_fwalk_sglue>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	4607      	mov	r7, r0
 8008c2a:	4688      	mov	r8, r1
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c34:	f1b9 0901 	subs.w	r9, r9, #1
 8008c38:	d505      	bpl.n	8008c46 <_fwalk_sglue+0x22>
 8008c3a:	6824      	ldr	r4, [r4, #0]
 8008c3c:	2c00      	cmp	r4, #0
 8008c3e:	d1f7      	bne.n	8008c30 <_fwalk_sglue+0xc>
 8008c40:	4630      	mov	r0, r6
 8008c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c46:	89ab      	ldrh	r3, [r5, #12]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d907      	bls.n	8008c5c <_fwalk_sglue+0x38>
 8008c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c50:	3301      	adds	r3, #1
 8008c52:	d003      	beq.n	8008c5c <_fwalk_sglue+0x38>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4638      	mov	r0, r7
 8008c58:	47c0      	blx	r8
 8008c5a:	4306      	orrs	r6, r0
 8008c5c:	3568      	adds	r5, #104	@ 0x68
 8008c5e:	e7e9      	b.n	8008c34 <_fwalk_sglue+0x10>

08008c60 <sniprintf>:
 8008c60:	b40c      	push	{r2, r3}
 8008c62:	b530      	push	{r4, r5, lr}
 8008c64:	4b17      	ldr	r3, [pc, #92]	@ (8008cc4 <sniprintf+0x64>)
 8008c66:	1e0c      	subs	r4, r1, #0
 8008c68:	681d      	ldr	r5, [r3, #0]
 8008c6a:	b09d      	sub	sp, #116	@ 0x74
 8008c6c:	da08      	bge.n	8008c80 <sniprintf+0x20>
 8008c6e:	238b      	movs	r3, #139	@ 0x8b
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	f04f 30ff 	mov.w	r0, #4294967295
 8008c76:	b01d      	add	sp, #116	@ 0x74
 8008c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c7c:	b002      	add	sp, #8
 8008c7e:	4770      	bx	lr
 8008c80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c88:	bf14      	ite	ne
 8008c8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c8e:	4623      	moveq	r3, r4
 8008c90:	9304      	str	r3, [sp, #16]
 8008c92:	9307      	str	r3, [sp, #28]
 8008c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c98:	9002      	str	r0, [sp, #8]
 8008c9a:	9006      	str	r0, [sp, #24]
 8008c9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ca0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ca2:	ab21      	add	r3, sp, #132	@ 0x84
 8008ca4:	a902      	add	r1, sp, #8
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	f002 fbd7 	bl	800b45c <_svfiprintf_r>
 8008cae:	1c43      	adds	r3, r0, #1
 8008cb0:	bfbc      	itt	lt
 8008cb2:	238b      	movlt	r3, #139	@ 0x8b
 8008cb4:	602b      	strlt	r3, [r5, #0]
 8008cb6:	2c00      	cmp	r4, #0
 8008cb8:	d0dd      	beq.n	8008c76 <sniprintf+0x16>
 8008cba:	9b02      	ldr	r3, [sp, #8]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	e7d9      	b.n	8008c76 <sniprintf+0x16>
 8008cc2:	bf00      	nop
 8008cc4:	20000034 	.word	0x20000034

08008cc8 <siprintf>:
 8008cc8:	b40e      	push	{r1, r2, r3}
 8008cca:	b500      	push	{lr}
 8008ccc:	b09c      	sub	sp, #112	@ 0x70
 8008cce:	ab1d      	add	r3, sp, #116	@ 0x74
 8008cd0:	9002      	str	r0, [sp, #8]
 8008cd2:	9006      	str	r0, [sp, #24]
 8008cd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008cd8:	4809      	ldr	r0, [pc, #36]	@ (8008d00 <siprintf+0x38>)
 8008cda:	9107      	str	r1, [sp, #28]
 8008cdc:	9104      	str	r1, [sp, #16]
 8008cde:	4909      	ldr	r1, [pc, #36]	@ (8008d04 <siprintf+0x3c>)
 8008ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce4:	9105      	str	r1, [sp, #20]
 8008ce6:	6800      	ldr	r0, [r0, #0]
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	a902      	add	r1, sp, #8
 8008cec:	f002 fbb6 	bl	800b45c <_svfiprintf_r>
 8008cf0:	9b02      	ldr	r3, [sp, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	b01c      	add	sp, #112	@ 0x70
 8008cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cfc:	b003      	add	sp, #12
 8008cfe:	4770      	bx	lr
 8008d00:	20000034 	.word	0x20000034
 8008d04:	ffff0208 	.word	0xffff0208

08008d08 <__sread>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f86c 	bl	8008dec <_read_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	bfab      	itete	ge
 8008d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d1c:	181b      	addge	r3, r3, r0
 8008d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d22:	bfac      	ite	ge
 8008d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d26:	81a3      	strhlt	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__swrite>:
 8008d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	461f      	mov	r7, r3
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	05db      	lsls	r3, r3, #23
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4616      	mov	r6, r2
 8008d3a:	d505      	bpl.n	8008d48 <__swrite+0x1e>
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2302      	movs	r3, #2
 8008d42:	2200      	movs	r2, #0
 8008d44:	f000 f840 	bl	8008dc8 <_lseek_r>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	f000 b857 	b.w	8008e10 <_write_r>

08008d62 <__sseek>:
 8008d62:	b510      	push	{r4, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 f82d 	bl	8008dc8 <_lseek_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	bf15      	itete	ne
 8008d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d7e:	81a3      	strheq	r3, [r4, #12]
 8008d80:	bf18      	it	ne
 8008d82:	81a3      	strhne	r3, [r4, #12]
 8008d84:	bd10      	pop	{r4, pc}

08008d86 <__sclose>:
 8008d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8a:	f000 b80d 	b.w	8008da8 <_close_r>

08008d8e <memset>:
 8008d8e:	4402      	add	r2, r0
 8008d90:	4603      	mov	r3, r0
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d100      	bne.n	8008d98 <memset+0xa>
 8008d96:	4770      	bx	lr
 8008d98:	f803 1b01 	strb.w	r1, [r3], #1
 8008d9c:	e7f9      	b.n	8008d92 <memset+0x4>
	...

08008da0 <_localeconv_r>:
 8008da0:	4800      	ldr	r0, [pc, #0]	@ (8008da4 <_localeconv_r+0x4>)
 8008da2:	4770      	bx	lr
 8008da4:	20000174 	.word	0x20000174

08008da8 <_close_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d06      	ldr	r5, [pc, #24]	@ (8008dc4 <_close_r+0x1c>)
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	f7f8 fe94 	bl	8001ae0 <_close>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_close_r+0x1a>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_close_r+0x1a>
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	2000057c 	.word	0x2000057c

08008dc8 <_lseek_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4d07      	ldr	r5, [pc, #28]	@ (8008de8 <_lseek_r+0x20>)
 8008dcc:	4604      	mov	r4, r0
 8008dce:	4608      	mov	r0, r1
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	602a      	str	r2, [r5, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f7f8 fea9 	bl	8001b2e <_lseek>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_lseek_r+0x1e>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_lseek_r+0x1e>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	2000057c 	.word	0x2000057c

08008dec <_read_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4d07      	ldr	r5, [pc, #28]	@ (8008e0c <_read_r+0x20>)
 8008df0:	4604      	mov	r4, r0
 8008df2:	4608      	mov	r0, r1
 8008df4:	4611      	mov	r1, r2
 8008df6:	2200      	movs	r2, #0
 8008df8:	602a      	str	r2, [r5, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f7f8 fe37 	bl	8001a6e <_read>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_read_r+0x1e>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_read_r+0x1e>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	2000057c 	.word	0x2000057c

08008e10 <_write_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d07      	ldr	r5, [pc, #28]	@ (8008e30 <_write_r+0x20>)
 8008e14:	4604      	mov	r4, r0
 8008e16:	4608      	mov	r0, r1
 8008e18:	4611      	mov	r1, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	602a      	str	r2, [r5, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f7f8 fe42 	bl	8001aa8 <_write>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_write_r+0x1e>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_write_r+0x1e>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	2000057c 	.word	0x2000057c

08008e34 <__errno>:
 8008e34:	4b01      	ldr	r3, [pc, #4]	@ (8008e3c <__errno+0x8>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	20000034 	.word	0x20000034

08008e40 <__libc_init_array>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4d0d      	ldr	r5, [pc, #52]	@ (8008e78 <__libc_init_array+0x38>)
 8008e44:	4c0d      	ldr	r4, [pc, #52]	@ (8008e7c <__libc_init_array+0x3c>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	42a6      	cmp	r6, r4
 8008e4e:	d109      	bne.n	8008e64 <__libc_init_array+0x24>
 8008e50:	4d0b      	ldr	r5, [pc, #44]	@ (8008e80 <__libc_init_array+0x40>)
 8008e52:	4c0c      	ldr	r4, [pc, #48]	@ (8008e84 <__libc_init_array+0x44>)
 8008e54:	f003 fb72 	bl	800c53c <_init>
 8008e58:	1b64      	subs	r4, r4, r5
 8008e5a:	10a4      	asrs	r4, r4, #2
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	42a6      	cmp	r6, r4
 8008e60:	d105      	bne.n	8008e6e <__libc_init_array+0x2e>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e68:	4798      	blx	r3
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7ee      	b.n	8008e4c <__libc_init_array+0xc>
 8008e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e72:	4798      	blx	r3
 8008e74:	3601      	adds	r6, #1
 8008e76:	e7f2      	b.n	8008e5e <__libc_init_array+0x1e>
 8008e78:	0800ca08 	.word	0x0800ca08
 8008e7c:	0800ca08 	.word	0x0800ca08
 8008e80:	0800ca08 	.word	0x0800ca08
 8008e84:	0800ca0c 	.word	0x0800ca0c

08008e88 <__retarget_lock_init_recursive>:
 8008e88:	4770      	bx	lr

08008e8a <__retarget_lock_acquire_recursive>:
 8008e8a:	4770      	bx	lr

08008e8c <__retarget_lock_release_recursive>:
 8008e8c:	4770      	bx	lr
	...

08008e90 <nanf>:
 8008e90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e98 <nanf+0x8>
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	7fc00000 	.word	0x7fc00000

08008e9c <quorem>:
 8008e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	6903      	ldr	r3, [r0, #16]
 8008ea2:	690c      	ldr	r4, [r1, #16]
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	db7e      	blt.n	8008fa8 <quorem+0x10c>
 8008eaa:	3c01      	subs	r4, #1
 8008eac:	f101 0814 	add.w	r8, r1, #20
 8008eb0:	00a3      	lsls	r3, r4, #2
 8008eb2:	f100 0514 	add.w	r5, r0, #20
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ece:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ed2:	d32e      	bcc.n	8008f32 <quorem+0x96>
 8008ed4:	f04f 0a00 	mov.w	sl, #0
 8008ed8:	46c4      	mov	ip, r8
 8008eda:	46ae      	mov	lr, r5
 8008edc:	46d3      	mov	fp, sl
 8008ede:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ee2:	b298      	uxth	r0, r3
 8008ee4:	fb06 a000 	mla	r0, r6, r0, sl
 8008ee8:	0c02      	lsrs	r2, r0, #16
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	fb06 2303 	mla	r3, r6, r3, r2
 8008ef0:	f8de 2000 	ldr.w	r2, [lr]
 8008ef4:	b280      	uxth	r0, r0
 8008ef6:	b292      	uxth	r2, r2
 8008ef8:	1a12      	subs	r2, r2, r0
 8008efa:	445a      	add	r2, fp
 8008efc:	f8de 0000 	ldr.w	r0, [lr]
 8008f00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f14:	45e1      	cmp	r9, ip
 8008f16:	f84e 2b04 	str.w	r2, [lr], #4
 8008f1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f1e:	d2de      	bcs.n	8008ede <quorem+0x42>
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	58eb      	ldr	r3, [r5, r3]
 8008f24:	b92b      	cbnz	r3, 8008f32 <quorem+0x96>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	3b04      	subs	r3, #4
 8008f2a:	429d      	cmp	r5, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	d32f      	bcc.n	8008f90 <quorem+0xf4>
 8008f30:	613c      	str	r4, [r7, #16]
 8008f32:	4638      	mov	r0, r7
 8008f34:	f001 f9c4 	bl	800a2c0 <__mcmp>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	db25      	blt.n	8008f88 <quorem+0xec>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	2000      	movs	r0, #0
 8008f40:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f44:	f8d1 c000 	ldr.w	ip, [r1]
 8008f48:	fa1f fe82 	uxth.w	lr, r2
 8008f4c:	fa1f f38c 	uxth.w	r3, ip
 8008f50:	eba3 030e 	sub.w	r3, r3, lr
 8008f54:	4403      	add	r3, r0
 8008f56:	0c12      	lsrs	r2, r2, #16
 8008f58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f66:	45c1      	cmp	r9, r8
 8008f68:	f841 3b04 	str.w	r3, [r1], #4
 8008f6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f70:	d2e6      	bcs.n	8008f40 <quorem+0xa4>
 8008f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f7a:	b922      	cbnz	r2, 8008f86 <quorem+0xea>
 8008f7c:	3b04      	subs	r3, #4
 8008f7e:	429d      	cmp	r5, r3
 8008f80:	461a      	mov	r2, r3
 8008f82:	d30b      	bcc.n	8008f9c <quorem+0x100>
 8008f84:	613c      	str	r4, [r7, #16]
 8008f86:	3601      	adds	r6, #1
 8008f88:	4630      	mov	r0, r6
 8008f8a:	b003      	add	sp, #12
 8008f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f90:	6812      	ldr	r2, [r2, #0]
 8008f92:	3b04      	subs	r3, #4
 8008f94:	2a00      	cmp	r2, #0
 8008f96:	d1cb      	bne.n	8008f30 <quorem+0x94>
 8008f98:	3c01      	subs	r4, #1
 8008f9a:	e7c6      	b.n	8008f2a <quorem+0x8e>
 8008f9c:	6812      	ldr	r2, [r2, #0]
 8008f9e:	3b04      	subs	r3, #4
 8008fa0:	2a00      	cmp	r2, #0
 8008fa2:	d1ef      	bne.n	8008f84 <quorem+0xe8>
 8008fa4:	3c01      	subs	r4, #1
 8008fa6:	e7ea      	b.n	8008f7e <quorem+0xe2>
 8008fa8:	2000      	movs	r0, #0
 8008faa:	e7ee      	b.n	8008f8a <quorem+0xee>
 8008fac:	0000      	movs	r0, r0
	...

08008fb0 <_dtoa_r>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	69c7      	ldr	r7, [r0, #28]
 8008fb6:	b099      	sub	sp, #100	@ 0x64
 8008fb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fbc:	ec55 4b10 	vmov	r4, r5, d0
 8008fc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008fc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fc4:	4683      	mov	fp, r0
 8008fc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fca:	b97f      	cbnz	r7, 8008fec <_dtoa_r+0x3c>
 8008fcc:	2010      	movs	r0, #16
 8008fce:	f000 fdfd 	bl	8009bcc <malloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8008fd8:	b920      	cbnz	r0, 8008fe4 <_dtoa_r+0x34>
 8008fda:	4ba7      	ldr	r3, [pc, #668]	@ (8009278 <_dtoa_r+0x2c8>)
 8008fdc:	21ef      	movs	r1, #239	@ 0xef
 8008fde:	48a7      	ldr	r0, [pc, #668]	@ (800927c <_dtoa_r+0x2cc>)
 8008fe0:	f002 fc36 	bl	800b850 <__assert_func>
 8008fe4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008fe8:	6007      	str	r7, [r0, #0]
 8008fea:	60c7      	str	r7, [r0, #12]
 8008fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ff0:	6819      	ldr	r1, [r3, #0]
 8008ff2:	b159      	cbz	r1, 800900c <_dtoa_r+0x5c>
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	604a      	str	r2, [r1, #4]
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	4093      	lsls	r3, r2
 8008ffc:	608b      	str	r3, [r1, #8]
 8008ffe:	4658      	mov	r0, fp
 8009000:	f000 feda 	bl	8009db8 <_Bfree>
 8009004:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	1e2b      	subs	r3, r5, #0
 800900e:	bfb9      	ittee	lt
 8009010:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009014:	9303      	strlt	r3, [sp, #12]
 8009016:	2300      	movge	r3, #0
 8009018:	6033      	strge	r3, [r6, #0]
 800901a:	9f03      	ldr	r7, [sp, #12]
 800901c:	4b98      	ldr	r3, [pc, #608]	@ (8009280 <_dtoa_r+0x2d0>)
 800901e:	bfbc      	itt	lt
 8009020:	2201      	movlt	r2, #1
 8009022:	6032      	strlt	r2, [r6, #0]
 8009024:	43bb      	bics	r3, r7
 8009026:	d112      	bne.n	800904e <_dtoa_r+0x9e>
 8009028:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800902a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009034:	4323      	orrs	r3, r4
 8009036:	f000 854d 	beq.w	8009ad4 <_dtoa_r+0xb24>
 800903a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800903c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009294 <_dtoa_r+0x2e4>
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 854f 	beq.w	8009ae4 <_dtoa_r+0xb34>
 8009046:	f10a 0303 	add.w	r3, sl, #3
 800904a:	f000 bd49 	b.w	8009ae0 <_dtoa_r+0xb30>
 800904e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009052:	2200      	movs	r2, #0
 8009054:	ec51 0b17 	vmov	r0, r1, d7
 8009058:	2300      	movs	r3, #0
 800905a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800905e:	f7f7 fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009062:	4680      	mov	r8, r0
 8009064:	b158      	cbz	r0, 800907e <_dtoa_r+0xce>
 8009066:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009068:	2301      	movs	r3, #1
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800906e:	b113      	cbz	r3, 8009076 <_dtoa_r+0xc6>
 8009070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009072:	4b84      	ldr	r3, [pc, #528]	@ (8009284 <_dtoa_r+0x2d4>)
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009298 <_dtoa_r+0x2e8>
 800907a:	f000 bd33 	b.w	8009ae4 <_dtoa_r+0xb34>
 800907e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009082:	aa16      	add	r2, sp, #88	@ 0x58
 8009084:	a917      	add	r1, sp, #92	@ 0x5c
 8009086:	4658      	mov	r0, fp
 8009088:	f001 fa3a 	bl	800a500 <__d2b>
 800908c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009090:	4681      	mov	r9, r0
 8009092:	2e00      	cmp	r6, #0
 8009094:	d077      	beq.n	8009186 <_dtoa_r+0x1d6>
 8009096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009098:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800909c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80090a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80090ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80090b0:	4619      	mov	r1, r3
 80090b2:	2200      	movs	r2, #0
 80090b4:	4b74      	ldr	r3, [pc, #464]	@ (8009288 <_dtoa_r+0x2d8>)
 80090b6:	f7f7 f8ef 	bl	8000298 <__aeabi_dsub>
 80090ba:	a369      	add	r3, pc, #420	@ (adr r3, 8009260 <_dtoa_r+0x2b0>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	f7f7 faa2 	bl	8000608 <__aeabi_dmul>
 80090c4:	a368      	add	r3, pc, #416	@ (adr r3, 8009268 <_dtoa_r+0x2b8>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f8e7 	bl	800029c <__adddf3>
 80090ce:	4604      	mov	r4, r0
 80090d0:	4630      	mov	r0, r6
 80090d2:	460d      	mov	r5, r1
 80090d4:	f7f7 fa2e 	bl	8000534 <__aeabi_i2d>
 80090d8:	a365      	add	r3, pc, #404	@ (adr r3, 8009270 <_dtoa_r+0x2c0>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 fa93 	bl	8000608 <__aeabi_dmul>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4620      	mov	r0, r4
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7f7 f8d7 	bl	800029c <__adddf3>
 80090ee:	4604      	mov	r4, r0
 80090f0:	460d      	mov	r5, r1
 80090f2:	f7f7 fd39 	bl	8000b68 <__aeabi_d2iz>
 80090f6:	2200      	movs	r2, #0
 80090f8:	4607      	mov	r7, r0
 80090fa:	2300      	movs	r3, #0
 80090fc:	4620      	mov	r0, r4
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 fcf4 	bl	8000aec <__aeabi_dcmplt>
 8009104:	b140      	cbz	r0, 8009118 <_dtoa_r+0x168>
 8009106:	4638      	mov	r0, r7
 8009108:	f7f7 fa14 	bl	8000534 <__aeabi_i2d>
 800910c:	4622      	mov	r2, r4
 800910e:	462b      	mov	r3, r5
 8009110:	f7f7 fce2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009114:	b900      	cbnz	r0, 8009118 <_dtoa_r+0x168>
 8009116:	3f01      	subs	r7, #1
 8009118:	2f16      	cmp	r7, #22
 800911a:	d851      	bhi.n	80091c0 <_dtoa_r+0x210>
 800911c:	4b5b      	ldr	r3, [pc, #364]	@ (800928c <_dtoa_r+0x2dc>)
 800911e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800912a:	f7f7 fcdf 	bl	8000aec <__aeabi_dcmplt>
 800912e:	2800      	cmp	r0, #0
 8009130:	d048      	beq.n	80091c4 <_dtoa_r+0x214>
 8009132:	3f01      	subs	r7, #1
 8009134:	2300      	movs	r3, #0
 8009136:	9312      	str	r3, [sp, #72]	@ 0x48
 8009138:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800913a:	1b9b      	subs	r3, r3, r6
 800913c:	1e5a      	subs	r2, r3, #1
 800913e:	bf44      	itt	mi
 8009140:	f1c3 0801 	rsbmi	r8, r3, #1
 8009144:	2300      	movmi	r3, #0
 8009146:	9208      	str	r2, [sp, #32]
 8009148:	bf54      	ite	pl
 800914a:	f04f 0800 	movpl.w	r8, #0
 800914e:	9308      	strmi	r3, [sp, #32]
 8009150:	2f00      	cmp	r7, #0
 8009152:	db39      	blt.n	80091c8 <_dtoa_r+0x218>
 8009154:	9b08      	ldr	r3, [sp, #32]
 8009156:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009158:	443b      	add	r3, r7
 800915a:	9308      	str	r3, [sp, #32]
 800915c:	2300      	movs	r3, #0
 800915e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009162:	2b09      	cmp	r3, #9
 8009164:	d864      	bhi.n	8009230 <_dtoa_r+0x280>
 8009166:	2b05      	cmp	r3, #5
 8009168:	bfc4      	itt	gt
 800916a:	3b04      	subgt	r3, #4
 800916c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009170:	f1a3 0302 	sub.w	r3, r3, #2
 8009174:	bfcc      	ite	gt
 8009176:	2400      	movgt	r4, #0
 8009178:	2401      	movle	r4, #1
 800917a:	2b03      	cmp	r3, #3
 800917c:	d863      	bhi.n	8009246 <_dtoa_r+0x296>
 800917e:	e8df f003 	tbb	[pc, r3]
 8009182:	372a      	.short	0x372a
 8009184:	5535      	.short	0x5535
 8009186:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800918a:	441e      	add	r6, r3
 800918c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009190:	2b20      	cmp	r3, #32
 8009192:	bfc1      	itttt	gt
 8009194:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009198:	409f      	lslgt	r7, r3
 800919a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800919e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80091a2:	bfd6      	itet	le
 80091a4:	f1c3 0320 	rsble	r3, r3, #32
 80091a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80091ac:	fa04 f003 	lslle.w	r0, r4, r3
 80091b0:	f7f7 f9b0 	bl	8000514 <__aeabi_ui2d>
 80091b4:	2201      	movs	r2, #1
 80091b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80091ba:	3e01      	subs	r6, #1
 80091bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80091be:	e777      	b.n	80090b0 <_dtoa_r+0x100>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e7b8      	b.n	8009136 <_dtoa_r+0x186>
 80091c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80091c6:	e7b7      	b.n	8009138 <_dtoa_r+0x188>
 80091c8:	427b      	negs	r3, r7
 80091ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80091cc:	2300      	movs	r3, #0
 80091ce:	eba8 0807 	sub.w	r8, r8, r7
 80091d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091d4:	e7c4      	b.n	8009160 <_dtoa_r+0x1b0>
 80091d6:	2300      	movs	r3, #0
 80091d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dc35      	bgt.n	800924c <_dtoa_r+0x29c>
 80091e0:	2301      	movs	r3, #1
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	9307      	str	r3, [sp, #28]
 80091e6:	461a      	mov	r2, r3
 80091e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80091ea:	e00b      	b.n	8009204 <_dtoa_r+0x254>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7f3      	b.n	80091d8 <_dtoa_r+0x228>
 80091f0:	2300      	movs	r3, #0
 80091f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091f6:	18fb      	adds	r3, r7, r3
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	bfb8      	it	lt
 8009202:	2301      	movlt	r3, #1
 8009204:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009208:	2100      	movs	r1, #0
 800920a:	2204      	movs	r2, #4
 800920c:	f102 0514 	add.w	r5, r2, #20
 8009210:	429d      	cmp	r5, r3
 8009212:	d91f      	bls.n	8009254 <_dtoa_r+0x2a4>
 8009214:	6041      	str	r1, [r0, #4]
 8009216:	4658      	mov	r0, fp
 8009218:	f000 fd8e 	bl	8009d38 <_Balloc>
 800921c:	4682      	mov	sl, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	d13c      	bne.n	800929c <_dtoa_r+0x2ec>
 8009222:	4b1b      	ldr	r3, [pc, #108]	@ (8009290 <_dtoa_r+0x2e0>)
 8009224:	4602      	mov	r2, r0
 8009226:	f240 11af 	movw	r1, #431	@ 0x1af
 800922a:	e6d8      	b.n	8008fde <_dtoa_r+0x2e>
 800922c:	2301      	movs	r3, #1
 800922e:	e7e0      	b.n	80091f2 <_dtoa_r+0x242>
 8009230:	2401      	movs	r4, #1
 8009232:	2300      	movs	r3, #0
 8009234:	9309      	str	r3, [sp, #36]	@ 0x24
 8009236:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	9307      	str	r3, [sp, #28]
 8009240:	2200      	movs	r2, #0
 8009242:	2312      	movs	r3, #18
 8009244:	e7d0      	b.n	80091e8 <_dtoa_r+0x238>
 8009246:	2301      	movs	r3, #1
 8009248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800924a:	e7f5      	b.n	8009238 <_dtoa_r+0x288>
 800924c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	9307      	str	r3, [sp, #28]
 8009252:	e7d7      	b.n	8009204 <_dtoa_r+0x254>
 8009254:	3101      	adds	r1, #1
 8009256:	0052      	lsls	r2, r2, #1
 8009258:	e7d8      	b.n	800920c <_dtoa_r+0x25c>
 800925a:	bf00      	nop
 800925c:	f3af 8000 	nop.w
 8009260:	636f4361 	.word	0x636f4361
 8009264:	3fd287a7 	.word	0x3fd287a7
 8009268:	8b60c8b3 	.word	0x8b60c8b3
 800926c:	3fc68a28 	.word	0x3fc68a28
 8009270:	509f79fb 	.word	0x509f79fb
 8009274:	3fd34413 	.word	0x3fd34413
 8009278:	0800c61a 	.word	0x0800c61a
 800927c:	0800c631 	.word	0x0800c631
 8009280:	7ff00000 	.word	0x7ff00000
 8009284:	0800c5e5 	.word	0x0800c5e5
 8009288:	3ff80000 	.word	0x3ff80000
 800928c:	0800c728 	.word	0x0800c728
 8009290:	0800c689 	.word	0x0800c689
 8009294:	0800c616 	.word	0x0800c616
 8009298:	0800c5e4 	.word	0x0800c5e4
 800929c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092a0:	6018      	str	r0, [r3, #0]
 80092a2:	9b07      	ldr	r3, [sp, #28]
 80092a4:	2b0e      	cmp	r3, #14
 80092a6:	f200 80a4 	bhi.w	80093f2 <_dtoa_r+0x442>
 80092aa:	2c00      	cmp	r4, #0
 80092ac:	f000 80a1 	beq.w	80093f2 <_dtoa_r+0x442>
 80092b0:	2f00      	cmp	r7, #0
 80092b2:	dd33      	ble.n	800931c <_dtoa_r+0x36c>
 80092b4:	4bad      	ldr	r3, [pc, #692]	@ (800956c <_dtoa_r+0x5bc>)
 80092b6:	f007 020f 	and.w	r2, r7, #15
 80092ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092be:	ed93 7b00 	vldr	d7, [r3]
 80092c2:	05f8      	lsls	r0, r7, #23
 80092c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80092c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80092cc:	d516      	bpl.n	80092fc <_dtoa_r+0x34c>
 80092ce:	4ba8      	ldr	r3, [pc, #672]	@ (8009570 <_dtoa_r+0x5c0>)
 80092d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092d8:	f7f7 fac0 	bl	800085c <__aeabi_ddiv>
 80092dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e0:	f004 040f 	and.w	r4, r4, #15
 80092e4:	2603      	movs	r6, #3
 80092e6:	4da2      	ldr	r5, [pc, #648]	@ (8009570 <_dtoa_r+0x5c0>)
 80092e8:	b954      	cbnz	r4, 8009300 <_dtoa_r+0x350>
 80092ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f2:	f7f7 fab3 	bl	800085c <__aeabi_ddiv>
 80092f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092fa:	e028      	b.n	800934e <_dtoa_r+0x39e>
 80092fc:	2602      	movs	r6, #2
 80092fe:	e7f2      	b.n	80092e6 <_dtoa_r+0x336>
 8009300:	07e1      	lsls	r1, r4, #31
 8009302:	d508      	bpl.n	8009316 <_dtoa_r+0x366>
 8009304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009308:	e9d5 2300 	ldrd	r2, r3, [r5]
 800930c:	f7f7 f97c 	bl	8000608 <__aeabi_dmul>
 8009310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009314:	3601      	adds	r6, #1
 8009316:	1064      	asrs	r4, r4, #1
 8009318:	3508      	adds	r5, #8
 800931a:	e7e5      	b.n	80092e8 <_dtoa_r+0x338>
 800931c:	f000 80d2 	beq.w	80094c4 <_dtoa_r+0x514>
 8009320:	427c      	negs	r4, r7
 8009322:	4b92      	ldr	r3, [pc, #584]	@ (800956c <_dtoa_r+0x5bc>)
 8009324:	4d92      	ldr	r5, [pc, #584]	@ (8009570 <_dtoa_r+0x5c0>)
 8009326:	f004 020f 	and.w	r2, r4, #15
 800932a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009336:	f7f7 f967 	bl	8000608 <__aeabi_dmul>
 800933a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800933e:	1124      	asrs	r4, r4, #4
 8009340:	2300      	movs	r3, #0
 8009342:	2602      	movs	r6, #2
 8009344:	2c00      	cmp	r4, #0
 8009346:	f040 80b2 	bne.w	80094ae <_dtoa_r+0x4fe>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1d3      	bne.n	80092f6 <_dtoa_r+0x346>
 800934e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009350:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80b7 	beq.w	80094c8 <_dtoa_r+0x518>
 800935a:	4b86      	ldr	r3, [pc, #536]	@ (8009574 <_dtoa_r+0x5c4>)
 800935c:	2200      	movs	r2, #0
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	f7f7 fbc3 	bl	8000aec <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	f000 80ae 	beq.w	80094c8 <_dtoa_r+0x518>
 800936c:	9b07      	ldr	r3, [sp, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80aa 	beq.w	80094c8 <_dtoa_r+0x518>
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd37      	ble.n	80093ea <_dtoa_r+0x43a>
 800937a:	1e7b      	subs	r3, r7, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	4620      	mov	r0, r4
 8009380:	4b7d      	ldr	r3, [pc, #500]	@ (8009578 <_dtoa_r+0x5c8>)
 8009382:	2200      	movs	r2, #0
 8009384:	4629      	mov	r1, r5
 8009386:	f7f7 f93f 	bl	8000608 <__aeabi_dmul>
 800938a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800938e:	9c00      	ldr	r4, [sp, #0]
 8009390:	3601      	adds	r6, #1
 8009392:	4630      	mov	r0, r6
 8009394:	f7f7 f8ce 	bl	8000534 <__aeabi_i2d>
 8009398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800939c:	f7f7 f934 	bl	8000608 <__aeabi_dmul>
 80093a0:	4b76      	ldr	r3, [pc, #472]	@ (800957c <_dtoa_r+0x5cc>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	f7f6 ff7a 	bl	800029c <__adddf3>
 80093a8:	4605      	mov	r5, r0
 80093aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80093ae:	2c00      	cmp	r4, #0
 80093b0:	f040 808d 	bne.w	80094ce <_dtoa_r+0x51e>
 80093b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b8:	4b71      	ldr	r3, [pc, #452]	@ (8009580 <_dtoa_r+0x5d0>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	f7f6 ff6c 	bl	8000298 <__aeabi_dsub>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093c8:	462a      	mov	r2, r5
 80093ca:	4633      	mov	r3, r6
 80093cc:	f7f7 fbac 	bl	8000b28 <__aeabi_dcmpgt>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f040 828b 	bne.w	80098ec <_dtoa_r+0x93c>
 80093d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093da:	462a      	mov	r2, r5
 80093dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093e0:	f7f7 fb84 	bl	8000aec <__aeabi_dcmplt>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f040 8128 	bne.w	800963a <_dtoa_r+0x68a>
 80093ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80093ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80093f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f2c0 815a 	blt.w	80096ae <_dtoa_r+0x6fe>
 80093fa:	2f0e      	cmp	r7, #14
 80093fc:	f300 8157 	bgt.w	80096ae <_dtoa_r+0x6fe>
 8009400:	4b5a      	ldr	r3, [pc, #360]	@ (800956c <_dtoa_r+0x5bc>)
 8009402:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009406:	ed93 7b00 	vldr	d7, [r3]
 800940a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	ed8d 7b00 	vstr	d7, [sp]
 8009412:	da03      	bge.n	800941c <_dtoa_r+0x46c>
 8009414:	9b07      	ldr	r3, [sp, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f340 8101 	ble.w	800961e <_dtoa_r+0x66e>
 800941c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009420:	4656      	mov	r6, sl
 8009422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f7 fa17 	bl	800085c <__aeabi_ddiv>
 800942e:	f7f7 fb9b 	bl	8000b68 <__aeabi_d2iz>
 8009432:	4680      	mov	r8, r0
 8009434:	f7f7 f87e 	bl	8000534 <__aeabi_i2d>
 8009438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800943c:	f7f7 f8e4 	bl	8000608 <__aeabi_dmul>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800944c:	f7f6 ff24 	bl	8000298 <__aeabi_dsub>
 8009450:	f806 4b01 	strb.w	r4, [r6], #1
 8009454:	9d07      	ldr	r5, [sp, #28]
 8009456:	eba6 040a 	sub.w	r4, r6, sl
 800945a:	42a5      	cmp	r5, r4
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	f040 8117 	bne.w	8009692 <_dtoa_r+0x6e2>
 8009464:	f7f6 ff1a 	bl	800029c <__adddf3>
 8009468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800946c:	4604      	mov	r4, r0
 800946e:	460d      	mov	r5, r1
 8009470:	f7f7 fb5a 	bl	8000b28 <__aeabi_dcmpgt>
 8009474:	2800      	cmp	r0, #0
 8009476:	f040 80f9 	bne.w	800966c <_dtoa_r+0x6bc>
 800947a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7f7 fb29 	bl	8000ad8 <__aeabi_dcmpeq>
 8009486:	b118      	cbz	r0, 8009490 <_dtoa_r+0x4e0>
 8009488:	f018 0f01 	tst.w	r8, #1
 800948c:	f040 80ee 	bne.w	800966c <_dtoa_r+0x6bc>
 8009490:	4649      	mov	r1, r9
 8009492:	4658      	mov	r0, fp
 8009494:	f000 fc90 	bl	8009db8 <_Bfree>
 8009498:	2300      	movs	r3, #0
 800949a:	7033      	strb	r3, [r6, #0]
 800949c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800949e:	3701      	adds	r7, #1
 80094a0:	601f      	str	r7, [r3, #0]
 80094a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 831d 	beq.w	8009ae4 <_dtoa_r+0xb34>
 80094aa:	601e      	str	r6, [r3, #0]
 80094ac:	e31a      	b.n	8009ae4 <_dtoa_r+0xb34>
 80094ae:	07e2      	lsls	r2, r4, #31
 80094b0:	d505      	bpl.n	80094be <_dtoa_r+0x50e>
 80094b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094b6:	f7f7 f8a7 	bl	8000608 <__aeabi_dmul>
 80094ba:	3601      	adds	r6, #1
 80094bc:	2301      	movs	r3, #1
 80094be:	1064      	asrs	r4, r4, #1
 80094c0:	3508      	adds	r5, #8
 80094c2:	e73f      	b.n	8009344 <_dtoa_r+0x394>
 80094c4:	2602      	movs	r6, #2
 80094c6:	e742      	b.n	800934e <_dtoa_r+0x39e>
 80094c8:	9c07      	ldr	r4, [sp, #28]
 80094ca:	9704      	str	r7, [sp, #16]
 80094cc:	e761      	b.n	8009392 <_dtoa_r+0x3e2>
 80094ce:	4b27      	ldr	r3, [pc, #156]	@ (800956c <_dtoa_r+0x5bc>)
 80094d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094da:	4454      	add	r4, sl
 80094dc:	2900      	cmp	r1, #0
 80094de:	d053      	beq.n	8009588 <_dtoa_r+0x5d8>
 80094e0:	4928      	ldr	r1, [pc, #160]	@ (8009584 <_dtoa_r+0x5d4>)
 80094e2:	2000      	movs	r0, #0
 80094e4:	f7f7 f9ba 	bl	800085c <__aeabi_ddiv>
 80094e8:	4633      	mov	r3, r6
 80094ea:	462a      	mov	r2, r5
 80094ec:	f7f6 fed4 	bl	8000298 <__aeabi_dsub>
 80094f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094f4:	4656      	mov	r6, sl
 80094f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094fa:	f7f7 fb35 	bl	8000b68 <__aeabi_d2iz>
 80094fe:	4605      	mov	r5, r0
 8009500:	f7f7 f818 	bl	8000534 <__aeabi_i2d>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950c:	f7f6 fec4 	bl	8000298 <__aeabi_dsub>
 8009510:	3530      	adds	r5, #48	@ 0x30
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800951a:	f806 5b01 	strb.w	r5, [r6], #1
 800951e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009522:	f7f7 fae3 	bl	8000aec <__aeabi_dcmplt>
 8009526:	2800      	cmp	r0, #0
 8009528:	d171      	bne.n	800960e <_dtoa_r+0x65e>
 800952a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800952e:	4911      	ldr	r1, [pc, #68]	@ (8009574 <_dtoa_r+0x5c4>)
 8009530:	2000      	movs	r0, #0
 8009532:	f7f6 feb1 	bl	8000298 <__aeabi_dsub>
 8009536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800953a:	f7f7 fad7 	bl	8000aec <__aeabi_dcmplt>
 800953e:	2800      	cmp	r0, #0
 8009540:	f040 8095 	bne.w	800966e <_dtoa_r+0x6be>
 8009544:	42a6      	cmp	r6, r4
 8009546:	f43f af50 	beq.w	80093ea <_dtoa_r+0x43a>
 800954a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800954e:	4b0a      	ldr	r3, [pc, #40]	@ (8009578 <_dtoa_r+0x5c8>)
 8009550:	2200      	movs	r2, #0
 8009552:	f7f7 f859 	bl	8000608 <__aeabi_dmul>
 8009556:	4b08      	ldr	r3, [pc, #32]	@ (8009578 <_dtoa_r+0x5c8>)
 8009558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800955c:	2200      	movs	r2, #0
 800955e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009562:	f7f7 f851 	bl	8000608 <__aeabi_dmul>
 8009566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800956a:	e7c4      	b.n	80094f6 <_dtoa_r+0x546>
 800956c:	0800c728 	.word	0x0800c728
 8009570:	0800c700 	.word	0x0800c700
 8009574:	3ff00000 	.word	0x3ff00000
 8009578:	40240000 	.word	0x40240000
 800957c:	401c0000 	.word	0x401c0000
 8009580:	40140000 	.word	0x40140000
 8009584:	3fe00000 	.word	0x3fe00000
 8009588:	4631      	mov	r1, r6
 800958a:	4628      	mov	r0, r5
 800958c:	f7f7 f83c 	bl	8000608 <__aeabi_dmul>
 8009590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009594:	9415      	str	r4, [sp, #84]	@ 0x54
 8009596:	4656      	mov	r6, sl
 8009598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959c:	f7f7 fae4 	bl	8000b68 <__aeabi_d2iz>
 80095a0:	4605      	mov	r5, r0
 80095a2:	f7f6 ffc7 	bl	8000534 <__aeabi_i2d>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ae:	f7f6 fe73 	bl	8000298 <__aeabi_dsub>
 80095b2:	3530      	adds	r5, #48	@ 0x30
 80095b4:	f806 5b01 	strb.w	r5, [r6], #1
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	42a6      	cmp	r6, r4
 80095be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	d124      	bne.n	8009612 <_dtoa_r+0x662>
 80095c8:	4bac      	ldr	r3, [pc, #688]	@ (800987c <_dtoa_r+0x8cc>)
 80095ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095ce:	f7f6 fe65 	bl	800029c <__adddf3>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095da:	f7f7 faa5 	bl	8000b28 <__aeabi_dcmpgt>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d145      	bne.n	800966e <_dtoa_r+0x6be>
 80095e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095e6:	49a5      	ldr	r1, [pc, #660]	@ (800987c <_dtoa_r+0x8cc>)
 80095e8:	2000      	movs	r0, #0
 80095ea:	f7f6 fe55 	bl	8000298 <__aeabi_dsub>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f6:	f7f7 fa79 	bl	8000aec <__aeabi_dcmplt>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f43f aef5 	beq.w	80093ea <_dtoa_r+0x43a>
 8009600:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009602:	1e73      	subs	r3, r6, #1
 8009604:	9315      	str	r3, [sp, #84]	@ 0x54
 8009606:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800960a:	2b30      	cmp	r3, #48	@ 0x30
 800960c:	d0f8      	beq.n	8009600 <_dtoa_r+0x650>
 800960e:	9f04      	ldr	r7, [sp, #16]
 8009610:	e73e      	b.n	8009490 <_dtoa_r+0x4e0>
 8009612:	4b9b      	ldr	r3, [pc, #620]	@ (8009880 <_dtoa_r+0x8d0>)
 8009614:	f7f6 fff8 	bl	8000608 <__aeabi_dmul>
 8009618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800961c:	e7bc      	b.n	8009598 <_dtoa_r+0x5e8>
 800961e:	d10c      	bne.n	800963a <_dtoa_r+0x68a>
 8009620:	4b98      	ldr	r3, [pc, #608]	@ (8009884 <_dtoa_r+0x8d4>)
 8009622:	2200      	movs	r2, #0
 8009624:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009628:	f7f6 ffee 	bl	8000608 <__aeabi_dmul>
 800962c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009630:	f7f7 fa70 	bl	8000b14 <__aeabi_dcmpge>
 8009634:	2800      	cmp	r0, #0
 8009636:	f000 8157 	beq.w	80098e8 <_dtoa_r+0x938>
 800963a:	2400      	movs	r4, #0
 800963c:	4625      	mov	r5, r4
 800963e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009640:	43db      	mvns	r3, r3
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	4656      	mov	r6, sl
 8009646:	2700      	movs	r7, #0
 8009648:	4621      	mov	r1, r4
 800964a:	4658      	mov	r0, fp
 800964c:	f000 fbb4 	bl	8009db8 <_Bfree>
 8009650:	2d00      	cmp	r5, #0
 8009652:	d0dc      	beq.n	800960e <_dtoa_r+0x65e>
 8009654:	b12f      	cbz	r7, 8009662 <_dtoa_r+0x6b2>
 8009656:	42af      	cmp	r7, r5
 8009658:	d003      	beq.n	8009662 <_dtoa_r+0x6b2>
 800965a:	4639      	mov	r1, r7
 800965c:	4658      	mov	r0, fp
 800965e:	f000 fbab 	bl	8009db8 <_Bfree>
 8009662:	4629      	mov	r1, r5
 8009664:	4658      	mov	r0, fp
 8009666:	f000 fba7 	bl	8009db8 <_Bfree>
 800966a:	e7d0      	b.n	800960e <_dtoa_r+0x65e>
 800966c:	9704      	str	r7, [sp, #16]
 800966e:	4633      	mov	r3, r6
 8009670:	461e      	mov	r6, r3
 8009672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009676:	2a39      	cmp	r2, #57	@ 0x39
 8009678:	d107      	bne.n	800968a <_dtoa_r+0x6da>
 800967a:	459a      	cmp	sl, r3
 800967c:	d1f8      	bne.n	8009670 <_dtoa_r+0x6c0>
 800967e:	9a04      	ldr	r2, [sp, #16]
 8009680:	3201      	adds	r2, #1
 8009682:	9204      	str	r2, [sp, #16]
 8009684:	2230      	movs	r2, #48	@ 0x30
 8009686:	f88a 2000 	strb.w	r2, [sl]
 800968a:	781a      	ldrb	r2, [r3, #0]
 800968c:	3201      	adds	r2, #1
 800968e:	701a      	strb	r2, [r3, #0]
 8009690:	e7bd      	b.n	800960e <_dtoa_r+0x65e>
 8009692:	4b7b      	ldr	r3, [pc, #492]	@ (8009880 <_dtoa_r+0x8d0>)
 8009694:	2200      	movs	r2, #0
 8009696:	f7f6 ffb7 	bl	8000608 <__aeabi_dmul>
 800969a:	2200      	movs	r2, #0
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	460d      	mov	r5, r1
 80096a2:	f7f7 fa19 	bl	8000ad8 <__aeabi_dcmpeq>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f43f aebb 	beq.w	8009422 <_dtoa_r+0x472>
 80096ac:	e6f0      	b.n	8009490 <_dtoa_r+0x4e0>
 80096ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096b0:	2a00      	cmp	r2, #0
 80096b2:	f000 80db 	beq.w	800986c <_dtoa_r+0x8bc>
 80096b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096b8:	2a01      	cmp	r2, #1
 80096ba:	f300 80bf 	bgt.w	800983c <_dtoa_r+0x88c>
 80096be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	f000 80b7 	beq.w	8009834 <_dtoa_r+0x884>
 80096c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096cc:	4646      	mov	r6, r8
 80096ce:	9a08      	ldr	r2, [sp, #32]
 80096d0:	2101      	movs	r1, #1
 80096d2:	441a      	add	r2, r3
 80096d4:	4658      	mov	r0, fp
 80096d6:	4498      	add	r8, r3
 80096d8:	9208      	str	r2, [sp, #32]
 80096da:	f000 fc6b 	bl	8009fb4 <__i2b>
 80096de:	4605      	mov	r5, r0
 80096e0:	b15e      	cbz	r6, 80096fa <_dtoa_r+0x74a>
 80096e2:	9b08      	ldr	r3, [sp, #32]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	dd08      	ble.n	80096fa <_dtoa_r+0x74a>
 80096e8:	42b3      	cmp	r3, r6
 80096ea:	9a08      	ldr	r2, [sp, #32]
 80096ec:	bfa8      	it	ge
 80096ee:	4633      	movge	r3, r6
 80096f0:	eba8 0803 	sub.w	r8, r8, r3
 80096f4:	1af6      	subs	r6, r6, r3
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	9308      	str	r3, [sp, #32]
 80096fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096fc:	b1f3      	cbz	r3, 800973c <_dtoa_r+0x78c>
 80096fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80b7 	beq.w	8009874 <_dtoa_r+0x8c4>
 8009706:	b18c      	cbz	r4, 800972c <_dtoa_r+0x77c>
 8009708:	4629      	mov	r1, r5
 800970a:	4622      	mov	r2, r4
 800970c:	4658      	mov	r0, fp
 800970e:	f000 fd11 	bl	800a134 <__pow5mult>
 8009712:	464a      	mov	r2, r9
 8009714:	4601      	mov	r1, r0
 8009716:	4605      	mov	r5, r0
 8009718:	4658      	mov	r0, fp
 800971a:	f000 fc61 	bl	8009fe0 <__multiply>
 800971e:	4649      	mov	r1, r9
 8009720:	9004      	str	r0, [sp, #16]
 8009722:	4658      	mov	r0, fp
 8009724:	f000 fb48 	bl	8009db8 <_Bfree>
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	4699      	mov	r9, r3
 800972c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800972e:	1b1a      	subs	r2, r3, r4
 8009730:	d004      	beq.n	800973c <_dtoa_r+0x78c>
 8009732:	4649      	mov	r1, r9
 8009734:	4658      	mov	r0, fp
 8009736:	f000 fcfd 	bl	800a134 <__pow5mult>
 800973a:	4681      	mov	r9, r0
 800973c:	2101      	movs	r1, #1
 800973e:	4658      	mov	r0, fp
 8009740:	f000 fc38 	bl	8009fb4 <__i2b>
 8009744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009746:	4604      	mov	r4, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 81cf 	beq.w	8009aec <_dtoa_r+0xb3c>
 800974e:	461a      	mov	r2, r3
 8009750:	4601      	mov	r1, r0
 8009752:	4658      	mov	r0, fp
 8009754:	f000 fcee 	bl	800a134 <__pow5mult>
 8009758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975a:	2b01      	cmp	r3, #1
 800975c:	4604      	mov	r4, r0
 800975e:	f300 8095 	bgt.w	800988c <_dtoa_r+0x8dc>
 8009762:	9b02      	ldr	r3, [sp, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f040 8087 	bne.w	8009878 <_dtoa_r+0x8c8>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009770:	2b00      	cmp	r3, #0
 8009772:	f040 8089 	bne.w	8009888 <_dtoa_r+0x8d8>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800977c:	0d1b      	lsrs	r3, r3, #20
 800977e:	051b      	lsls	r3, r3, #20
 8009780:	b12b      	cbz	r3, 800978e <_dtoa_r+0x7de>
 8009782:	9b08      	ldr	r3, [sp, #32]
 8009784:	3301      	adds	r3, #1
 8009786:	9308      	str	r3, [sp, #32]
 8009788:	f108 0801 	add.w	r8, r8, #1
 800978c:	2301      	movs	r3, #1
 800978e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 81b0 	beq.w	8009af8 <_dtoa_r+0xb48>
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800979e:	6918      	ldr	r0, [r3, #16]
 80097a0:	f000 fbbc 	bl	8009f1c <__hi0bits>
 80097a4:	f1c0 0020 	rsb	r0, r0, #32
 80097a8:	9b08      	ldr	r3, [sp, #32]
 80097aa:	4418      	add	r0, r3
 80097ac:	f010 001f 	ands.w	r0, r0, #31
 80097b0:	d077      	beq.n	80098a2 <_dtoa_r+0x8f2>
 80097b2:	f1c0 0320 	rsb	r3, r0, #32
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	dd6b      	ble.n	8009892 <_dtoa_r+0x8e2>
 80097ba:	9b08      	ldr	r3, [sp, #32]
 80097bc:	f1c0 001c 	rsb	r0, r0, #28
 80097c0:	4403      	add	r3, r0
 80097c2:	4480      	add	r8, r0
 80097c4:	4406      	add	r6, r0
 80097c6:	9308      	str	r3, [sp, #32]
 80097c8:	f1b8 0f00 	cmp.w	r8, #0
 80097cc:	dd05      	ble.n	80097da <_dtoa_r+0x82a>
 80097ce:	4649      	mov	r1, r9
 80097d0:	4642      	mov	r2, r8
 80097d2:	4658      	mov	r0, fp
 80097d4:	f000 fd08 	bl	800a1e8 <__lshift>
 80097d8:	4681      	mov	r9, r0
 80097da:	9b08      	ldr	r3, [sp, #32]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dd05      	ble.n	80097ec <_dtoa_r+0x83c>
 80097e0:	4621      	mov	r1, r4
 80097e2:	461a      	mov	r2, r3
 80097e4:	4658      	mov	r0, fp
 80097e6:	f000 fcff 	bl	800a1e8 <__lshift>
 80097ea:	4604      	mov	r4, r0
 80097ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d059      	beq.n	80098a6 <_dtoa_r+0x8f6>
 80097f2:	4621      	mov	r1, r4
 80097f4:	4648      	mov	r0, r9
 80097f6:	f000 fd63 	bl	800a2c0 <__mcmp>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	da53      	bge.n	80098a6 <_dtoa_r+0x8f6>
 80097fe:	1e7b      	subs	r3, r7, #1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	4649      	mov	r1, r9
 8009804:	2300      	movs	r3, #0
 8009806:	220a      	movs	r2, #10
 8009808:	4658      	mov	r0, fp
 800980a:	f000 faf7 	bl	8009dfc <__multadd>
 800980e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009810:	4681      	mov	r9, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 8172 	beq.w	8009afc <_dtoa_r+0xb4c>
 8009818:	2300      	movs	r3, #0
 800981a:	4629      	mov	r1, r5
 800981c:	220a      	movs	r2, #10
 800981e:	4658      	mov	r0, fp
 8009820:	f000 faec 	bl	8009dfc <__multadd>
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	4605      	mov	r5, r0
 800982a:	dc67      	bgt.n	80098fc <_dtoa_r+0x94c>
 800982c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982e:	2b02      	cmp	r3, #2
 8009830:	dc41      	bgt.n	80098b6 <_dtoa_r+0x906>
 8009832:	e063      	b.n	80098fc <_dtoa_r+0x94c>
 8009834:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009836:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800983a:	e746      	b.n	80096ca <_dtoa_r+0x71a>
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	1e5c      	subs	r4, r3, #1
 8009840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009842:	42a3      	cmp	r3, r4
 8009844:	bfbf      	itttt	lt
 8009846:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009848:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800984a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800984c:	1ae3      	sublt	r3, r4, r3
 800984e:	bfb4      	ite	lt
 8009850:	18d2      	addlt	r2, r2, r3
 8009852:	1b1c      	subge	r4, r3, r4
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	bfbc      	itt	lt
 8009858:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800985a:	2400      	movlt	r4, #0
 800985c:	2b00      	cmp	r3, #0
 800985e:	bfb5      	itete	lt
 8009860:	eba8 0603 	sublt.w	r6, r8, r3
 8009864:	9b07      	ldrge	r3, [sp, #28]
 8009866:	2300      	movlt	r3, #0
 8009868:	4646      	movge	r6, r8
 800986a:	e730      	b.n	80096ce <_dtoa_r+0x71e>
 800986c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800986e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009870:	4646      	mov	r6, r8
 8009872:	e735      	b.n	80096e0 <_dtoa_r+0x730>
 8009874:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009876:	e75c      	b.n	8009732 <_dtoa_r+0x782>
 8009878:	2300      	movs	r3, #0
 800987a:	e788      	b.n	800978e <_dtoa_r+0x7de>
 800987c:	3fe00000 	.word	0x3fe00000
 8009880:	40240000 	.word	0x40240000
 8009884:	40140000 	.word	0x40140000
 8009888:	9b02      	ldr	r3, [sp, #8]
 800988a:	e780      	b.n	800978e <_dtoa_r+0x7de>
 800988c:	2300      	movs	r3, #0
 800988e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009890:	e782      	b.n	8009798 <_dtoa_r+0x7e8>
 8009892:	d099      	beq.n	80097c8 <_dtoa_r+0x818>
 8009894:	9a08      	ldr	r2, [sp, #32]
 8009896:	331c      	adds	r3, #28
 8009898:	441a      	add	r2, r3
 800989a:	4498      	add	r8, r3
 800989c:	441e      	add	r6, r3
 800989e:	9208      	str	r2, [sp, #32]
 80098a0:	e792      	b.n	80097c8 <_dtoa_r+0x818>
 80098a2:	4603      	mov	r3, r0
 80098a4:	e7f6      	b.n	8009894 <_dtoa_r+0x8e4>
 80098a6:	9b07      	ldr	r3, [sp, #28]
 80098a8:	9704      	str	r7, [sp, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dc20      	bgt.n	80098f0 <_dtoa_r+0x940>
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	dd1e      	ble.n	80098f4 <_dtoa_r+0x944>
 80098b6:	9b00      	ldr	r3, [sp, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f47f aec0 	bne.w	800963e <_dtoa_r+0x68e>
 80098be:	4621      	mov	r1, r4
 80098c0:	2205      	movs	r2, #5
 80098c2:	4658      	mov	r0, fp
 80098c4:	f000 fa9a 	bl	8009dfc <__multadd>
 80098c8:	4601      	mov	r1, r0
 80098ca:	4604      	mov	r4, r0
 80098cc:	4648      	mov	r0, r9
 80098ce:	f000 fcf7 	bl	800a2c0 <__mcmp>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	f77f aeb3 	ble.w	800963e <_dtoa_r+0x68e>
 80098d8:	4656      	mov	r6, sl
 80098da:	2331      	movs	r3, #49	@ 0x31
 80098dc:	f806 3b01 	strb.w	r3, [r6], #1
 80098e0:	9b04      	ldr	r3, [sp, #16]
 80098e2:	3301      	adds	r3, #1
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	e6ae      	b.n	8009646 <_dtoa_r+0x696>
 80098e8:	9c07      	ldr	r4, [sp, #28]
 80098ea:	9704      	str	r7, [sp, #16]
 80098ec:	4625      	mov	r5, r4
 80098ee:	e7f3      	b.n	80098d8 <_dtoa_r+0x928>
 80098f0:	9b07      	ldr	r3, [sp, #28]
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 8104 	beq.w	8009b04 <_dtoa_r+0xb54>
 80098fc:	2e00      	cmp	r6, #0
 80098fe:	dd05      	ble.n	800990c <_dtoa_r+0x95c>
 8009900:	4629      	mov	r1, r5
 8009902:	4632      	mov	r2, r6
 8009904:	4658      	mov	r0, fp
 8009906:	f000 fc6f 	bl	800a1e8 <__lshift>
 800990a:	4605      	mov	r5, r0
 800990c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990e:	2b00      	cmp	r3, #0
 8009910:	d05a      	beq.n	80099c8 <_dtoa_r+0xa18>
 8009912:	6869      	ldr	r1, [r5, #4]
 8009914:	4658      	mov	r0, fp
 8009916:	f000 fa0f 	bl	8009d38 <_Balloc>
 800991a:	4606      	mov	r6, r0
 800991c:	b928      	cbnz	r0, 800992a <_dtoa_r+0x97a>
 800991e:	4b84      	ldr	r3, [pc, #528]	@ (8009b30 <_dtoa_r+0xb80>)
 8009920:	4602      	mov	r2, r0
 8009922:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009926:	f7ff bb5a 	b.w	8008fde <_dtoa_r+0x2e>
 800992a:	692a      	ldr	r2, [r5, #16]
 800992c:	3202      	adds	r2, #2
 800992e:	0092      	lsls	r2, r2, #2
 8009930:	f105 010c 	add.w	r1, r5, #12
 8009934:	300c      	adds	r0, #12
 8009936:	f001 ff75 	bl	800b824 <memcpy>
 800993a:	2201      	movs	r2, #1
 800993c:	4631      	mov	r1, r6
 800993e:	4658      	mov	r0, fp
 8009940:	f000 fc52 	bl	800a1e8 <__lshift>
 8009944:	f10a 0301 	add.w	r3, sl, #1
 8009948:	9307      	str	r3, [sp, #28]
 800994a:	9b00      	ldr	r3, [sp, #0]
 800994c:	4453      	add	r3, sl
 800994e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	462f      	mov	r7, r5
 8009958:	930a      	str	r3, [sp, #40]	@ 0x28
 800995a:	4605      	mov	r5, r0
 800995c:	9b07      	ldr	r3, [sp, #28]
 800995e:	4621      	mov	r1, r4
 8009960:	3b01      	subs	r3, #1
 8009962:	4648      	mov	r0, r9
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	f7ff fa99 	bl	8008e9c <quorem>
 800996a:	4639      	mov	r1, r7
 800996c:	9002      	str	r0, [sp, #8]
 800996e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009972:	4648      	mov	r0, r9
 8009974:	f000 fca4 	bl	800a2c0 <__mcmp>
 8009978:	462a      	mov	r2, r5
 800997a:	9008      	str	r0, [sp, #32]
 800997c:	4621      	mov	r1, r4
 800997e:	4658      	mov	r0, fp
 8009980:	f000 fcba 	bl	800a2f8 <__mdiff>
 8009984:	68c2      	ldr	r2, [r0, #12]
 8009986:	4606      	mov	r6, r0
 8009988:	bb02      	cbnz	r2, 80099cc <_dtoa_r+0xa1c>
 800998a:	4601      	mov	r1, r0
 800998c:	4648      	mov	r0, r9
 800998e:	f000 fc97 	bl	800a2c0 <__mcmp>
 8009992:	4602      	mov	r2, r0
 8009994:	4631      	mov	r1, r6
 8009996:	4658      	mov	r0, fp
 8009998:	920e      	str	r2, [sp, #56]	@ 0x38
 800999a:	f000 fa0d 	bl	8009db8 <_Bfree>
 800999e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099a2:	9e07      	ldr	r6, [sp, #28]
 80099a4:	ea43 0102 	orr.w	r1, r3, r2
 80099a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099aa:	4319      	orrs	r1, r3
 80099ac:	d110      	bne.n	80099d0 <_dtoa_r+0xa20>
 80099ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099b2:	d029      	beq.n	8009a08 <_dtoa_r+0xa58>
 80099b4:	9b08      	ldr	r3, [sp, #32]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dd02      	ble.n	80099c0 <_dtoa_r+0xa10>
 80099ba:	9b02      	ldr	r3, [sp, #8]
 80099bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80099c0:	9b00      	ldr	r3, [sp, #0]
 80099c2:	f883 8000 	strb.w	r8, [r3]
 80099c6:	e63f      	b.n	8009648 <_dtoa_r+0x698>
 80099c8:	4628      	mov	r0, r5
 80099ca:	e7bb      	b.n	8009944 <_dtoa_r+0x994>
 80099cc:	2201      	movs	r2, #1
 80099ce:	e7e1      	b.n	8009994 <_dtoa_r+0x9e4>
 80099d0:	9b08      	ldr	r3, [sp, #32]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	db04      	blt.n	80099e0 <_dtoa_r+0xa30>
 80099d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099d8:	430b      	orrs	r3, r1
 80099da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099dc:	430b      	orrs	r3, r1
 80099de:	d120      	bne.n	8009a22 <_dtoa_r+0xa72>
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	dded      	ble.n	80099c0 <_dtoa_r+0xa10>
 80099e4:	4649      	mov	r1, r9
 80099e6:	2201      	movs	r2, #1
 80099e8:	4658      	mov	r0, fp
 80099ea:	f000 fbfd 	bl	800a1e8 <__lshift>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4681      	mov	r9, r0
 80099f2:	f000 fc65 	bl	800a2c0 <__mcmp>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	dc03      	bgt.n	8009a02 <_dtoa_r+0xa52>
 80099fa:	d1e1      	bne.n	80099c0 <_dtoa_r+0xa10>
 80099fc:	f018 0f01 	tst.w	r8, #1
 8009a00:	d0de      	beq.n	80099c0 <_dtoa_r+0xa10>
 8009a02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a06:	d1d8      	bne.n	80099ba <_dtoa_r+0xa0a>
 8009a08:	9a00      	ldr	r2, [sp, #0]
 8009a0a:	2339      	movs	r3, #57	@ 0x39
 8009a0c:	7013      	strb	r3, [r2, #0]
 8009a0e:	4633      	mov	r3, r6
 8009a10:	461e      	mov	r6, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a18:	2a39      	cmp	r2, #57	@ 0x39
 8009a1a:	d052      	beq.n	8009ac2 <_dtoa_r+0xb12>
 8009a1c:	3201      	adds	r2, #1
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	e612      	b.n	8009648 <_dtoa_r+0x698>
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	dd07      	ble.n	8009a36 <_dtoa_r+0xa86>
 8009a26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a2a:	d0ed      	beq.n	8009a08 <_dtoa_r+0xa58>
 8009a2c:	9a00      	ldr	r2, [sp, #0]
 8009a2e:	f108 0301 	add.w	r3, r8, #1
 8009a32:	7013      	strb	r3, [r2, #0]
 8009a34:	e608      	b.n	8009648 <_dtoa_r+0x698>
 8009a36:	9b07      	ldr	r3, [sp, #28]
 8009a38:	9a07      	ldr	r2, [sp, #28]
 8009a3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d028      	beq.n	8009a96 <_dtoa_r+0xae6>
 8009a44:	4649      	mov	r1, r9
 8009a46:	2300      	movs	r3, #0
 8009a48:	220a      	movs	r2, #10
 8009a4a:	4658      	mov	r0, fp
 8009a4c:	f000 f9d6 	bl	8009dfc <__multadd>
 8009a50:	42af      	cmp	r7, r5
 8009a52:	4681      	mov	r9, r0
 8009a54:	f04f 0300 	mov.w	r3, #0
 8009a58:	f04f 020a 	mov.w	r2, #10
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4658      	mov	r0, fp
 8009a60:	d107      	bne.n	8009a72 <_dtoa_r+0xac2>
 8009a62:	f000 f9cb 	bl	8009dfc <__multadd>
 8009a66:	4607      	mov	r7, r0
 8009a68:	4605      	mov	r5, r0
 8009a6a:	9b07      	ldr	r3, [sp, #28]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	9307      	str	r3, [sp, #28]
 8009a70:	e774      	b.n	800995c <_dtoa_r+0x9ac>
 8009a72:	f000 f9c3 	bl	8009dfc <__multadd>
 8009a76:	4629      	mov	r1, r5
 8009a78:	4607      	mov	r7, r0
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	220a      	movs	r2, #10
 8009a7e:	4658      	mov	r0, fp
 8009a80:	f000 f9bc 	bl	8009dfc <__multadd>
 8009a84:	4605      	mov	r5, r0
 8009a86:	e7f0      	b.n	8009a6a <_dtoa_r+0xaba>
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bfcc      	ite	gt
 8009a8e:	461e      	movgt	r6, r3
 8009a90:	2601      	movle	r6, #1
 8009a92:	4456      	add	r6, sl
 8009a94:	2700      	movs	r7, #0
 8009a96:	4649      	mov	r1, r9
 8009a98:	2201      	movs	r2, #1
 8009a9a:	4658      	mov	r0, fp
 8009a9c:	f000 fba4 	bl	800a1e8 <__lshift>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4681      	mov	r9, r0
 8009aa4:	f000 fc0c 	bl	800a2c0 <__mcmp>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	dcb0      	bgt.n	8009a0e <_dtoa_r+0xa5e>
 8009aac:	d102      	bne.n	8009ab4 <_dtoa_r+0xb04>
 8009aae:	f018 0f01 	tst.w	r8, #1
 8009ab2:	d1ac      	bne.n	8009a0e <_dtoa_r+0xa5e>
 8009ab4:	4633      	mov	r3, r6
 8009ab6:	461e      	mov	r6, r3
 8009ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009abc:	2a30      	cmp	r2, #48	@ 0x30
 8009abe:	d0fa      	beq.n	8009ab6 <_dtoa_r+0xb06>
 8009ac0:	e5c2      	b.n	8009648 <_dtoa_r+0x698>
 8009ac2:	459a      	cmp	sl, r3
 8009ac4:	d1a4      	bne.n	8009a10 <_dtoa_r+0xa60>
 8009ac6:	9b04      	ldr	r3, [sp, #16]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	2331      	movs	r3, #49	@ 0x31
 8009ace:	f88a 3000 	strb.w	r3, [sl]
 8009ad2:	e5b9      	b.n	8009648 <_dtoa_r+0x698>
 8009ad4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ad6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009b34 <_dtoa_r+0xb84>
 8009ada:	b11b      	cbz	r3, 8009ae4 <_dtoa_r+0xb34>
 8009adc:	f10a 0308 	add.w	r3, sl, #8
 8009ae0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	4650      	mov	r0, sl
 8009ae6:	b019      	add	sp, #100	@ 0x64
 8009ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	f77f ae37 	ble.w	8009762 <_dtoa_r+0x7b2>
 8009af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009af6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009af8:	2001      	movs	r0, #1
 8009afa:	e655      	b.n	80097a8 <_dtoa_r+0x7f8>
 8009afc:	9b00      	ldr	r3, [sp, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f77f aed6 	ble.w	80098b0 <_dtoa_r+0x900>
 8009b04:	4656      	mov	r6, sl
 8009b06:	4621      	mov	r1, r4
 8009b08:	4648      	mov	r0, r9
 8009b0a:	f7ff f9c7 	bl	8008e9c <quorem>
 8009b0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b12:	f806 8b01 	strb.w	r8, [r6], #1
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	eba6 020a 	sub.w	r2, r6, sl
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	ddb3      	ble.n	8009a88 <_dtoa_r+0xad8>
 8009b20:	4649      	mov	r1, r9
 8009b22:	2300      	movs	r3, #0
 8009b24:	220a      	movs	r2, #10
 8009b26:	4658      	mov	r0, fp
 8009b28:	f000 f968 	bl	8009dfc <__multadd>
 8009b2c:	4681      	mov	r9, r0
 8009b2e:	e7ea      	b.n	8009b06 <_dtoa_r+0xb56>
 8009b30:	0800c689 	.word	0x0800c689
 8009b34:	0800c60d 	.word	0x0800c60d

08009b38 <_free_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d041      	beq.n	8009bc4 <_free_r+0x8c>
 8009b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b44:	1f0c      	subs	r4, r1, #4
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfb8      	it	lt
 8009b4a:	18e4      	addlt	r4, r4, r3
 8009b4c:	f000 f8e8 	bl	8009d20 <__malloc_lock>
 8009b50:	4a1d      	ldr	r2, [pc, #116]	@ (8009bc8 <_free_r+0x90>)
 8009b52:	6813      	ldr	r3, [r2, #0]
 8009b54:	b933      	cbnz	r3, 8009b64 <_free_r+0x2c>
 8009b56:	6063      	str	r3, [r4, #4]
 8009b58:	6014      	str	r4, [r2, #0]
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b60:	f000 b8e4 	b.w	8009d2c <__malloc_unlock>
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	d908      	bls.n	8009b7a <_free_r+0x42>
 8009b68:	6820      	ldr	r0, [r4, #0]
 8009b6a:	1821      	adds	r1, r4, r0
 8009b6c:	428b      	cmp	r3, r1
 8009b6e:	bf01      	itttt	eq
 8009b70:	6819      	ldreq	r1, [r3, #0]
 8009b72:	685b      	ldreq	r3, [r3, #4]
 8009b74:	1809      	addeq	r1, r1, r0
 8009b76:	6021      	streq	r1, [r4, #0]
 8009b78:	e7ed      	b.n	8009b56 <_free_r+0x1e>
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	b10b      	cbz	r3, 8009b84 <_free_r+0x4c>
 8009b80:	42a3      	cmp	r3, r4
 8009b82:	d9fa      	bls.n	8009b7a <_free_r+0x42>
 8009b84:	6811      	ldr	r1, [r2, #0]
 8009b86:	1850      	adds	r0, r2, r1
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d10b      	bne.n	8009ba4 <_free_r+0x6c>
 8009b8c:	6820      	ldr	r0, [r4, #0]
 8009b8e:	4401      	add	r1, r0
 8009b90:	1850      	adds	r0, r2, r1
 8009b92:	4283      	cmp	r3, r0
 8009b94:	6011      	str	r1, [r2, #0]
 8009b96:	d1e0      	bne.n	8009b5a <_free_r+0x22>
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	6053      	str	r3, [r2, #4]
 8009b9e:	4408      	add	r0, r1
 8009ba0:	6010      	str	r0, [r2, #0]
 8009ba2:	e7da      	b.n	8009b5a <_free_r+0x22>
 8009ba4:	d902      	bls.n	8009bac <_free_r+0x74>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	e7d6      	b.n	8009b5a <_free_r+0x22>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	1821      	adds	r1, r4, r0
 8009bb0:	428b      	cmp	r3, r1
 8009bb2:	bf04      	itt	eq
 8009bb4:	6819      	ldreq	r1, [r3, #0]
 8009bb6:	685b      	ldreq	r3, [r3, #4]
 8009bb8:	6063      	str	r3, [r4, #4]
 8009bba:	bf04      	itt	eq
 8009bbc:	1809      	addeq	r1, r1, r0
 8009bbe:	6021      	streq	r1, [r4, #0]
 8009bc0:	6054      	str	r4, [r2, #4]
 8009bc2:	e7ca      	b.n	8009b5a <_free_r+0x22>
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000588 	.word	0x20000588

08009bcc <malloc>:
 8009bcc:	4b02      	ldr	r3, [pc, #8]	@ (8009bd8 <malloc+0xc>)
 8009bce:	4601      	mov	r1, r0
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f000 b825 	b.w	8009c20 <_malloc_r>
 8009bd6:	bf00      	nop
 8009bd8:	20000034 	.word	0x20000034

08009bdc <sbrk_aligned>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	4e0f      	ldr	r6, [pc, #60]	@ (8009c1c <sbrk_aligned+0x40>)
 8009be0:	460c      	mov	r4, r1
 8009be2:	6831      	ldr	r1, [r6, #0]
 8009be4:	4605      	mov	r5, r0
 8009be6:	b911      	cbnz	r1, 8009bee <sbrk_aligned+0x12>
 8009be8:	f001 fe0c 	bl	800b804 <_sbrk_r>
 8009bec:	6030      	str	r0, [r6, #0]
 8009bee:	4621      	mov	r1, r4
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	f001 fe07 	bl	800b804 <_sbrk_r>
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	d103      	bne.n	8009c02 <sbrk_aligned+0x26>
 8009bfa:	f04f 34ff 	mov.w	r4, #4294967295
 8009bfe:	4620      	mov	r0, r4
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	1cc4      	adds	r4, r0, #3
 8009c04:	f024 0403 	bic.w	r4, r4, #3
 8009c08:	42a0      	cmp	r0, r4
 8009c0a:	d0f8      	beq.n	8009bfe <sbrk_aligned+0x22>
 8009c0c:	1a21      	subs	r1, r4, r0
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f001 fdf8 	bl	800b804 <_sbrk_r>
 8009c14:	3001      	adds	r0, #1
 8009c16:	d1f2      	bne.n	8009bfe <sbrk_aligned+0x22>
 8009c18:	e7ef      	b.n	8009bfa <sbrk_aligned+0x1e>
 8009c1a:	bf00      	nop
 8009c1c:	20000584 	.word	0x20000584

08009c20 <_malloc_r>:
 8009c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	1ccd      	adds	r5, r1, #3
 8009c26:	f025 0503 	bic.w	r5, r5, #3
 8009c2a:	3508      	adds	r5, #8
 8009c2c:	2d0c      	cmp	r5, #12
 8009c2e:	bf38      	it	cc
 8009c30:	250c      	movcc	r5, #12
 8009c32:	2d00      	cmp	r5, #0
 8009c34:	4606      	mov	r6, r0
 8009c36:	db01      	blt.n	8009c3c <_malloc_r+0x1c>
 8009c38:	42a9      	cmp	r1, r5
 8009c3a:	d904      	bls.n	8009c46 <_malloc_r+0x26>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	6033      	str	r3, [r6, #0]
 8009c40:	2000      	movs	r0, #0
 8009c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d1c <_malloc_r+0xfc>
 8009c4a:	f000 f869 	bl	8009d20 <__malloc_lock>
 8009c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c52:	461c      	mov	r4, r3
 8009c54:	bb44      	cbnz	r4, 8009ca8 <_malloc_r+0x88>
 8009c56:	4629      	mov	r1, r5
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7ff ffbf 	bl	8009bdc <sbrk_aligned>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	4604      	mov	r4, r0
 8009c62:	d158      	bne.n	8009d16 <_malloc_r+0xf6>
 8009c64:	f8d8 4000 	ldr.w	r4, [r8]
 8009c68:	4627      	mov	r7, r4
 8009c6a:	2f00      	cmp	r7, #0
 8009c6c:	d143      	bne.n	8009cf6 <_malloc_r+0xd6>
 8009c6e:	2c00      	cmp	r4, #0
 8009c70:	d04b      	beq.n	8009d0a <_malloc_r+0xea>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	4639      	mov	r1, r7
 8009c76:	4630      	mov	r0, r6
 8009c78:	eb04 0903 	add.w	r9, r4, r3
 8009c7c:	f001 fdc2 	bl	800b804 <_sbrk_r>
 8009c80:	4581      	cmp	r9, r0
 8009c82:	d142      	bne.n	8009d0a <_malloc_r+0xea>
 8009c84:	6821      	ldr	r1, [r4, #0]
 8009c86:	1a6d      	subs	r5, r5, r1
 8009c88:	4629      	mov	r1, r5
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ffa6 	bl	8009bdc <sbrk_aligned>
 8009c90:	3001      	adds	r0, #1
 8009c92:	d03a      	beq.n	8009d0a <_malloc_r+0xea>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	442b      	add	r3, r5
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	bb62      	cbnz	r2, 8009cfc <_malloc_r+0xdc>
 8009ca2:	f8c8 7000 	str.w	r7, [r8]
 8009ca6:	e00f      	b.n	8009cc8 <_malloc_r+0xa8>
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	1b52      	subs	r2, r2, r5
 8009cac:	d420      	bmi.n	8009cf0 <_malloc_r+0xd0>
 8009cae:	2a0b      	cmp	r2, #11
 8009cb0:	d917      	bls.n	8009ce2 <_malloc_r+0xc2>
 8009cb2:	1961      	adds	r1, r4, r5
 8009cb4:	42a3      	cmp	r3, r4
 8009cb6:	6025      	str	r5, [r4, #0]
 8009cb8:	bf18      	it	ne
 8009cba:	6059      	strne	r1, [r3, #4]
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	bf08      	it	eq
 8009cc0:	f8c8 1000 	streq.w	r1, [r8]
 8009cc4:	5162      	str	r2, [r4, r5]
 8009cc6:	604b      	str	r3, [r1, #4]
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f000 f82f 	bl	8009d2c <__malloc_unlock>
 8009cce:	f104 000b 	add.w	r0, r4, #11
 8009cd2:	1d23      	adds	r3, r4, #4
 8009cd4:	f020 0007 	bic.w	r0, r0, #7
 8009cd8:	1ac2      	subs	r2, r0, r3
 8009cda:	bf1c      	itt	ne
 8009cdc:	1a1b      	subne	r3, r3, r0
 8009cde:	50a3      	strne	r3, [r4, r2]
 8009ce0:	e7af      	b.n	8009c42 <_malloc_r+0x22>
 8009ce2:	6862      	ldr	r2, [r4, #4]
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	bf0c      	ite	eq
 8009ce8:	f8c8 2000 	streq.w	r2, [r8]
 8009cec:	605a      	strne	r2, [r3, #4]
 8009cee:	e7eb      	b.n	8009cc8 <_malloc_r+0xa8>
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	6864      	ldr	r4, [r4, #4]
 8009cf4:	e7ae      	b.n	8009c54 <_malloc_r+0x34>
 8009cf6:	463c      	mov	r4, r7
 8009cf8:	687f      	ldr	r7, [r7, #4]
 8009cfa:	e7b6      	b.n	8009c6a <_malloc_r+0x4a>
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	d1fb      	bne.n	8009cfc <_malloc_r+0xdc>
 8009d04:	2300      	movs	r3, #0
 8009d06:	6053      	str	r3, [r2, #4]
 8009d08:	e7de      	b.n	8009cc8 <_malloc_r+0xa8>
 8009d0a:	230c      	movs	r3, #12
 8009d0c:	6033      	str	r3, [r6, #0]
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f000 f80c 	bl	8009d2c <__malloc_unlock>
 8009d14:	e794      	b.n	8009c40 <_malloc_r+0x20>
 8009d16:	6005      	str	r5, [r0, #0]
 8009d18:	e7d6      	b.n	8009cc8 <_malloc_r+0xa8>
 8009d1a:	bf00      	nop
 8009d1c:	20000588 	.word	0x20000588

08009d20 <__malloc_lock>:
 8009d20:	4801      	ldr	r0, [pc, #4]	@ (8009d28 <__malloc_lock+0x8>)
 8009d22:	f7ff b8b2 	b.w	8008e8a <__retarget_lock_acquire_recursive>
 8009d26:	bf00      	nop
 8009d28:	20000580 	.word	0x20000580

08009d2c <__malloc_unlock>:
 8009d2c:	4801      	ldr	r0, [pc, #4]	@ (8009d34 <__malloc_unlock+0x8>)
 8009d2e:	f7ff b8ad 	b.w	8008e8c <__retarget_lock_release_recursive>
 8009d32:	bf00      	nop
 8009d34:	20000580 	.word	0x20000580

08009d38 <_Balloc>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	69c6      	ldr	r6, [r0, #28]
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	460d      	mov	r5, r1
 8009d40:	b976      	cbnz	r6, 8009d60 <_Balloc+0x28>
 8009d42:	2010      	movs	r0, #16
 8009d44:	f7ff ff42 	bl	8009bcc <malloc>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	61e0      	str	r0, [r4, #28]
 8009d4c:	b920      	cbnz	r0, 8009d58 <_Balloc+0x20>
 8009d4e:	4b18      	ldr	r3, [pc, #96]	@ (8009db0 <_Balloc+0x78>)
 8009d50:	4818      	ldr	r0, [pc, #96]	@ (8009db4 <_Balloc+0x7c>)
 8009d52:	216b      	movs	r1, #107	@ 0x6b
 8009d54:	f001 fd7c 	bl	800b850 <__assert_func>
 8009d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d5c:	6006      	str	r6, [r0, #0]
 8009d5e:	60c6      	str	r6, [r0, #12]
 8009d60:	69e6      	ldr	r6, [r4, #28]
 8009d62:	68f3      	ldr	r3, [r6, #12]
 8009d64:	b183      	cbz	r3, 8009d88 <_Balloc+0x50>
 8009d66:	69e3      	ldr	r3, [r4, #28]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d6e:	b9b8      	cbnz	r0, 8009da0 <_Balloc+0x68>
 8009d70:	2101      	movs	r1, #1
 8009d72:	fa01 f605 	lsl.w	r6, r1, r5
 8009d76:	1d72      	adds	r2, r6, #5
 8009d78:	0092      	lsls	r2, r2, #2
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f001 fd86 	bl	800b88c <_calloc_r>
 8009d80:	b160      	cbz	r0, 8009d9c <_Balloc+0x64>
 8009d82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d86:	e00e      	b.n	8009da6 <_Balloc+0x6e>
 8009d88:	2221      	movs	r2, #33	@ 0x21
 8009d8a:	2104      	movs	r1, #4
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f001 fd7d 	bl	800b88c <_calloc_r>
 8009d92:	69e3      	ldr	r3, [r4, #28]
 8009d94:	60f0      	str	r0, [r6, #12]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e4      	bne.n	8009d66 <_Balloc+0x2e>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	6802      	ldr	r2, [r0, #0]
 8009da2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009da6:	2300      	movs	r3, #0
 8009da8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dac:	e7f7      	b.n	8009d9e <_Balloc+0x66>
 8009dae:	bf00      	nop
 8009db0:	0800c61a 	.word	0x0800c61a
 8009db4:	0800c69a 	.word	0x0800c69a

08009db8 <_Bfree>:
 8009db8:	b570      	push	{r4, r5, r6, lr}
 8009dba:	69c6      	ldr	r6, [r0, #28]
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	b976      	cbnz	r6, 8009de0 <_Bfree+0x28>
 8009dc2:	2010      	movs	r0, #16
 8009dc4:	f7ff ff02 	bl	8009bcc <malloc>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	61e8      	str	r0, [r5, #28]
 8009dcc:	b920      	cbnz	r0, 8009dd8 <_Bfree+0x20>
 8009dce:	4b09      	ldr	r3, [pc, #36]	@ (8009df4 <_Bfree+0x3c>)
 8009dd0:	4809      	ldr	r0, [pc, #36]	@ (8009df8 <_Bfree+0x40>)
 8009dd2:	218f      	movs	r1, #143	@ 0x8f
 8009dd4:	f001 fd3c 	bl	800b850 <__assert_func>
 8009dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ddc:	6006      	str	r6, [r0, #0]
 8009dde:	60c6      	str	r6, [r0, #12]
 8009de0:	b13c      	cbz	r4, 8009df2 <_Bfree+0x3a>
 8009de2:	69eb      	ldr	r3, [r5, #28]
 8009de4:	6862      	ldr	r2, [r4, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dec:	6021      	str	r1, [r4, #0]
 8009dee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
 8009df4:	0800c61a 	.word	0x0800c61a
 8009df8:	0800c69a 	.word	0x0800c69a

08009dfc <__multadd>:
 8009dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e00:	690d      	ldr	r5, [r1, #16]
 8009e02:	4607      	mov	r7, r0
 8009e04:	460c      	mov	r4, r1
 8009e06:	461e      	mov	r6, r3
 8009e08:	f101 0c14 	add.w	ip, r1, #20
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e12:	b299      	uxth	r1, r3
 8009e14:	fb02 6101 	mla	r1, r2, r1, r6
 8009e18:	0c1e      	lsrs	r6, r3, #16
 8009e1a:	0c0b      	lsrs	r3, r1, #16
 8009e1c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e20:	b289      	uxth	r1, r1
 8009e22:	3001      	adds	r0, #1
 8009e24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e28:	4285      	cmp	r5, r0
 8009e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e32:	dcec      	bgt.n	8009e0e <__multadd+0x12>
 8009e34:	b30e      	cbz	r6, 8009e7a <__multadd+0x7e>
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	dc19      	bgt.n	8009e70 <__multadd+0x74>
 8009e3c:	6861      	ldr	r1, [r4, #4]
 8009e3e:	4638      	mov	r0, r7
 8009e40:	3101      	adds	r1, #1
 8009e42:	f7ff ff79 	bl	8009d38 <_Balloc>
 8009e46:	4680      	mov	r8, r0
 8009e48:	b928      	cbnz	r0, 8009e56 <__multadd+0x5a>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e80 <__multadd+0x84>)
 8009e4e:	480d      	ldr	r0, [pc, #52]	@ (8009e84 <__multadd+0x88>)
 8009e50:	21ba      	movs	r1, #186	@ 0xba
 8009e52:	f001 fcfd 	bl	800b850 <__assert_func>
 8009e56:	6922      	ldr	r2, [r4, #16]
 8009e58:	3202      	adds	r2, #2
 8009e5a:	f104 010c 	add.w	r1, r4, #12
 8009e5e:	0092      	lsls	r2, r2, #2
 8009e60:	300c      	adds	r0, #12
 8009e62:	f001 fcdf 	bl	800b824 <memcpy>
 8009e66:	4621      	mov	r1, r4
 8009e68:	4638      	mov	r0, r7
 8009e6a:	f7ff ffa5 	bl	8009db8 <_Bfree>
 8009e6e:	4644      	mov	r4, r8
 8009e70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e74:	3501      	adds	r5, #1
 8009e76:	615e      	str	r6, [r3, #20]
 8009e78:	6125      	str	r5, [r4, #16]
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e80:	0800c689 	.word	0x0800c689
 8009e84:	0800c69a 	.word	0x0800c69a

08009e88 <__s2b>:
 8009e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	4615      	mov	r5, r2
 8009e90:	461f      	mov	r7, r3
 8009e92:	2209      	movs	r2, #9
 8009e94:	3308      	adds	r3, #8
 8009e96:	4606      	mov	r6, r0
 8009e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	db09      	blt.n	8009eb8 <__s2b+0x30>
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f7ff ff47 	bl	8009d38 <_Balloc>
 8009eaa:	b940      	cbnz	r0, 8009ebe <__s2b+0x36>
 8009eac:	4602      	mov	r2, r0
 8009eae:	4b19      	ldr	r3, [pc, #100]	@ (8009f14 <__s2b+0x8c>)
 8009eb0:	4819      	ldr	r0, [pc, #100]	@ (8009f18 <__s2b+0x90>)
 8009eb2:	21d3      	movs	r1, #211	@ 0xd3
 8009eb4:	f001 fccc 	bl	800b850 <__assert_func>
 8009eb8:	0052      	lsls	r2, r2, #1
 8009eba:	3101      	adds	r1, #1
 8009ebc:	e7f0      	b.n	8009ea0 <__s2b+0x18>
 8009ebe:	9b08      	ldr	r3, [sp, #32]
 8009ec0:	6143      	str	r3, [r0, #20]
 8009ec2:	2d09      	cmp	r5, #9
 8009ec4:	f04f 0301 	mov.w	r3, #1
 8009ec8:	6103      	str	r3, [r0, #16]
 8009eca:	dd16      	ble.n	8009efa <__s2b+0x72>
 8009ecc:	f104 0909 	add.w	r9, r4, #9
 8009ed0:	46c8      	mov	r8, r9
 8009ed2:	442c      	add	r4, r5
 8009ed4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ed8:	4601      	mov	r1, r0
 8009eda:	3b30      	subs	r3, #48	@ 0x30
 8009edc:	220a      	movs	r2, #10
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff ff8c 	bl	8009dfc <__multadd>
 8009ee4:	45a0      	cmp	r8, r4
 8009ee6:	d1f5      	bne.n	8009ed4 <__s2b+0x4c>
 8009ee8:	f1a5 0408 	sub.w	r4, r5, #8
 8009eec:	444c      	add	r4, r9
 8009eee:	1b2d      	subs	r5, r5, r4
 8009ef0:	1963      	adds	r3, r4, r5
 8009ef2:	42bb      	cmp	r3, r7
 8009ef4:	db04      	blt.n	8009f00 <__s2b+0x78>
 8009ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efa:	340a      	adds	r4, #10
 8009efc:	2509      	movs	r5, #9
 8009efe:	e7f6      	b.n	8009eee <__s2b+0x66>
 8009f00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f04:	4601      	mov	r1, r0
 8009f06:	3b30      	subs	r3, #48	@ 0x30
 8009f08:	220a      	movs	r2, #10
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff ff76 	bl	8009dfc <__multadd>
 8009f10:	e7ee      	b.n	8009ef0 <__s2b+0x68>
 8009f12:	bf00      	nop
 8009f14:	0800c689 	.word	0x0800c689
 8009f18:	0800c69a 	.word	0x0800c69a

08009f1c <__hi0bits>:
 8009f1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f20:	4603      	mov	r3, r0
 8009f22:	bf36      	itet	cc
 8009f24:	0403      	lslcc	r3, r0, #16
 8009f26:	2000      	movcs	r0, #0
 8009f28:	2010      	movcc	r0, #16
 8009f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f2e:	bf3c      	itt	cc
 8009f30:	021b      	lslcc	r3, r3, #8
 8009f32:	3008      	addcc	r0, #8
 8009f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f38:	bf3c      	itt	cc
 8009f3a:	011b      	lslcc	r3, r3, #4
 8009f3c:	3004      	addcc	r0, #4
 8009f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f42:	bf3c      	itt	cc
 8009f44:	009b      	lslcc	r3, r3, #2
 8009f46:	3002      	addcc	r0, #2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	db05      	blt.n	8009f58 <__hi0bits+0x3c>
 8009f4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f50:	f100 0001 	add.w	r0, r0, #1
 8009f54:	bf08      	it	eq
 8009f56:	2020      	moveq	r0, #32
 8009f58:	4770      	bx	lr

08009f5a <__lo0bits>:
 8009f5a:	6803      	ldr	r3, [r0, #0]
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	f013 0007 	ands.w	r0, r3, #7
 8009f62:	d00b      	beq.n	8009f7c <__lo0bits+0x22>
 8009f64:	07d9      	lsls	r1, r3, #31
 8009f66:	d421      	bmi.n	8009fac <__lo0bits+0x52>
 8009f68:	0798      	lsls	r0, r3, #30
 8009f6a:	bf49      	itett	mi
 8009f6c:	085b      	lsrmi	r3, r3, #1
 8009f6e:	089b      	lsrpl	r3, r3, #2
 8009f70:	2001      	movmi	r0, #1
 8009f72:	6013      	strmi	r3, [r2, #0]
 8009f74:	bf5c      	itt	pl
 8009f76:	6013      	strpl	r3, [r2, #0]
 8009f78:	2002      	movpl	r0, #2
 8009f7a:	4770      	bx	lr
 8009f7c:	b299      	uxth	r1, r3
 8009f7e:	b909      	cbnz	r1, 8009f84 <__lo0bits+0x2a>
 8009f80:	0c1b      	lsrs	r3, r3, #16
 8009f82:	2010      	movs	r0, #16
 8009f84:	b2d9      	uxtb	r1, r3
 8009f86:	b909      	cbnz	r1, 8009f8c <__lo0bits+0x32>
 8009f88:	3008      	adds	r0, #8
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	0719      	lsls	r1, r3, #28
 8009f8e:	bf04      	itt	eq
 8009f90:	091b      	lsreq	r3, r3, #4
 8009f92:	3004      	addeq	r0, #4
 8009f94:	0799      	lsls	r1, r3, #30
 8009f96:	bf04      	itt	eq
 8009f98:	089b      	lsreq	r3, r3, #2
 8009f9a:	3002      	addeq	r0, #2
 8009f9c:	07d9      	lsls	r1, r3, #31
 8009f9e:	d403      	bmi.n	8009fa8 <__lo0bits+0x4e>
 8009fa0:	085b      	lsrs	r3, r3, #1
 8009fa2:	f100 0001 	add.w	r0, r0, #1
 8009fa6:	d003      	beq.n	8009fb0 <__lo0bits+0x56>
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	4770      	bx	lr
 8009fac:	2000      	movs	r0, #0
 8009fae:	4770      	bx	lr
 8009fb0:	2020      	movs	r0, #32
 8009fb2:	4770      	bx	lr

08009fb4 <__i2b>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	2101      	movs	r1, #1
 8009fba:	f7ff febd 	bl	8009d38 <_Balloc>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	b928      	cbnz	r0, 8009fce <__i2b+0x1a>
 8009fc2:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <__i2b+0x24>)
 8009fc4:	4805      	ldr	r0, [pc, #20]	@ (8009fdc <__i2b+0x28>)
 8009fc6:	f240 1145 	movw	r1, #325	@ 0x145
 8009fca:	f001 fc41 	bl	800b850 <__assert_func>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	6144      	str	r4, [r0, #20]
 8009fd2:	6103      	str	r3, [r0, #16]
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	bf00      	nop
 8009fd8:	0800c689 	.word	0x0800c689
 8009fdc:	0800c69a 	.word	0x0800c69a

08009fe0 <__multiply>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	690a      	ldr	r2, [r1, #16]
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	bfa8      	it	ge
 8009fee:	4623      	movge	r3, r4
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	bfa4      	itt	ge
 8009ff4:	460c      	movge	r4, r1
 8009ff6:	461f      	movge	r7, r3
 8009ff8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ffc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a000:	68a3      	ldr	r3, [r4, #8]
 800a002:	6861      	ldr	r1, [r4, #4]
 800a004:	eb0a 0609 	add.w	r6, sl, r9
 800a008:	42b3      	cmp	r3, r6
 800a00a:	b085      	sub	sp, #20
 800a00c:	bfb8      	it	lt
 800a00e:	3101      	addlt	r1, #1
 800a010:	f7ff fe92 	bl	8009d38 <_Balloc>
 800a014:	b930      	cbnz	r0, 800a024 <__multiply+0x44>
 800a016:	4602      	mov	r2, r0
 800a018:	4b44      	ldr	r3, [pc, #272]	@ (800a12c <__multiply+0x14c>)
 800a01a:	4845      	ldr	r0, [pc, #276]	@ (800a130 <__multiply+0x150>)
 800a01c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a020:	f001 fc16 	bl	800b850 <__assert_func>
 800a024:	f100 0514 	add.w	r5, r0, #20
 800a028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a02c:	462b      	mov	r3, r5
 800a02e:	2200      	movs	r2, #0
 800a030:	4543      	cmp	r3, r8
 800a032:	d321      	bcc.n	800a078 <__multiply+0x98>
 800a034:	f107 0114 	add.w	r1, r7, #20
 800a038:	f104 0214 	add.w	r2, r4, #20
 800a03c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a040:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	1b13      	subs	r3, r2, r4
 800a048:	3b15      	subs	r3, #21
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	3304      	adds	r3, #4
 800a050:	f104 0715 	add.w	r7, r4, #21
 800a054:	42ba      	cmp	r2, r7
 800a056:	bf38      	it	cc
 800a058:	2304      	movcc	r3, #4
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	9b02      	ldr	r3, [sp, #8]
 800a05e:	9103      	str	r1, [sp, #12]
 800a060:	428b      	cmp	r3, r1
 800a062:	d80c      	bhi.n	800a07e <__multiply+0x9e>
 800a064:	2e00      	cmp	r6, #0
 800a066:	dd03      	ble.n	800a070 <__multiply+0x90>
 800a068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d05b      	beq.n	800a128 <__multiply+0x148>
 800a070:	6106      	str	r6, [r0, #16]
 800a072:	b005      	add	sp, #20
 800a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a078:	f843 2b04 	str.w	r2, [r3], #4
 800a07c:	e7d8      	b.n	800a030 <__multiply+0x50>
 800a07e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a082:	f1ba 0f00 	cmp.w	sl, #0
 800a086:	d024      	beq.n	800a0d2 <__multiply+0xf2>
 800a088:	f104 0e14 	add.w	lr, r4, #20
 800a08c:	46a9      	mov	r9, r5
 800a08e:	f04f 0c00 	mov.w	ip, #0
 800a092:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a096:	f8d9 3000 	ldr.w	r3, [r9]
 800a09a:	fa1f fb87 	uxth.w	fp, r7
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a0a8:	f8d9 7000 	ldr.w	r7, [r9]
 800a0ac:	4463      	add	r3, ip
 800a0ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a0b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0c0:	4572      	cmp	r2, lr
 800a0c2:	f849 3b04 	str.w	r3, [r9], #4
 800a0c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0ca:	d8e2      	bhi.n	800a092 <__multiply+0xb2>
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	f845 c003 	str.w	ip, [r5, r3]
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0d8:	3104      	adds	r1, #4
 800a0da:	f1b9 0f00 	cmp.w	r9, #0
 800a0de:	d021      	beq.n	800a124 <__multiply+0x144>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	f104 0c14 	add.w	ip, r4, #20
 800a0e6:	46ae      	mov	lr, r5
 800a0e8:	f04f 0a00 	mov.w	sl, #0
 800a0ec:	f8bc b000 	ldrh.w	fp, [ip]
 800a0f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a0f4:	fb09 770b 	mla	r7, r9, fp, r7
 800a0f8:	4457      	add	r7, sl
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a100:	f84e 3b04 	str.w	r3, [lr], #4
 800a104:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a10c:	f8be 3000 	ldrh.w	r3, [lr]
 800a110:	fb09 330a 	mla	r3, r9, sl, r3
 800a114:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a118:	4562      	cmp	r2, ip
 800a11a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a11e:	d8e5      	bhi.n	800a0ec <__multiply+0x10c>
 800a120:	9f01      	ldr	r7, [sp, #4]
 800a122:	51eb      	str	r3, [r5, r7]
 800a124:	3504      	adds	r5, #4
 800a126:	e799      	b.n	800a05c <__multiply+0x7c>
 800a128:	3e01      	subs	r6, #1
 800a12a:	e79b      	b.n	800a064 <__multiply+0x84>
 800a12c:	0800c689 	.word	0x0800c689
 800a130:	0800c69a 	.word	0x0800c69a

0800a134 <__pow5mult>:
 800a134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a138:	4615      	mov	r5, r2
 800a13a:	f012 0203 	ands.w	r2, r2, #3
 800a13e:	4607      	mov	r7, r0
 800a140:	460e      	mov	r6, r1
 800a142:	d007      	beq.n	800a154 <__pow5mult+0x20>
 800a144:	4c25      	ldr	r4, [pc, #148]	@ (800a1dc <__pow5mult+0xa8>)
 800a146:	3a01      	subs	r2, #1
 800a148:	2300      	movs	r3, #0
 800a14a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a14e:	f7ff fe55 	bl	8009dfc <__multadd>
 800a152:	4606      	mov	r6, r0
 800a154:	10ad      	asrs	r5, r5, #2
 800a156:	d03d      	beq.n	800a1d4 <__pow5mult+0xa0>
 800a158:	69fc      	ldr	r4, [r7, #28]
 800a15a:	b97c      	cbnz	r4, 800a17c <__pow5mult+0x48>
 800a15c:	2010      	movs	r0, #16
 800a15e:	f7ff fd35 	bl	8009bcc <malloc>
 800a162:	4602      	mov	r2, r0
 800a164:	61f8      	str	r0, [r7, #28]
 800a166:	b928      	cbnz	r0, 800a174 <__pow5mult+0x40>
 800a168:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e0 <__pow5mult+0xac>)
 800a16a:	481e      	ldr	r0, [pc, #120]	@ (800a1e4 <__pow5mult+0xb0>)
 800a16c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a170:	f001 fb6e 	bl	800b850 <__assert_func>
 800a174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a178:	6004      	str	r4, [r0, #0]
 800a17a:	60c4      	str	r4, [r0, #12]
 800a17c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a184:	b94c      	cbnz	r4, 800a19a <__pow5mult+0x66>
 800a186:	f240 2171 	movw	r1, #625	@ 0x271
 800a18a:	4638      	mov	r0, r7
 800a18c:	f7ff ff12 	bl	8009fb4 <__i2b>
 800a190:	2300      	movs	r3, #0
 800a192:	f8c8 0008 	str.w	r0, [r8, #8]
 800a196:	4604      	mov	r4, r0
 800a198:	6003      	str	r3, [r0, #0]
 800a19a:	f04f 0900 	mov.w	r9, #0
 800a19e:	07eb      	lsls	r3, r5, #31
 800a1a0:	d50a      	bpl.n	800a1b8 <__pow5mult+0x84>
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7ff ff1a 	bl	8009fe0 <__multiply>
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff fe01 	bl	8009db8 <_Bfree>
 800a1b6:	4646      	mov	r6, r8
 800a1b8:	106d      	asrs	r5, r5, #1
 800a1ba:	d00b      	beq.n	800a1d4 <__pow5mult+0xa0>
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	b938      	cbnz	r0, 800a1d0 <__pow5mult+0x9c>
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	f7ff ff0b 	bl	8009fe0 <__multiply>
 800a1ca:	6020      	str	r0, [r4, #0]
 800a1cc:	f8c0 9000 	str.w	r9, [r0]
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	e7e4      	b.n	800a19e <__pow5mult+0x6a>
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1da:	bf00      	nop
 800a1dc:	0800c6f4 	.word	0x0800c6f4
 800a1e0:	0800c61a 	.word	0x0800c61a
 800a1e4:	0800c69a 	.word	0x0800c69a

0800a1e8 <__lshift>:
 800a1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	6849      	ldr	r1, [r1, #4]
 800a1f0:	6923      	ldr	r3, [r4, #16]
 800a1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1f6:	68a3      	ldr	r3, [r4, #8]
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	4691      	mov	r9, r2
 800a1fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a200:	f108 0601 	add.w	r6, r8, #1
 800a204:	42b3      	cmp	r3, r6
 800a206:	db0b      	blt.n	800a220 <__lshift+0x38>
 800a208:	4638      	mov	r0, r7
 800a20a:	f7ff fd95 	bl	8009d38 <_Balloc>
 800a20e:	4605      	mov	r5, r0
 800a210:	b948      	cbnz	r0, 800a226 <__lshift+0x3e>
 800a212:	4602      	mov	r2, r0
 800a214:	4b28      	ldr	r3, [pc, #160]	@ (800a2b8 <__lshift+0xd0>)
 800a216:	4829      	ldr	r0, [pc, #164]	@ (800a2bc <__lshift+0xd4>)
 800a218:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a21c:	f001 fb18 	bl	800b850 <__assert_func>
 800a220:	3101      	adds	r1, #1
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	e7ee      	b.n	800a204 <__lshift+0x1c>
 800a226:	2300      	movs	r3, #0
 800a228:	f100 0114 	add.w	r1, r0, #20
 800a22c:	f100 0210 	add.w	r2, r0, #16
 800a230:	4618      	mov	r0, r3
 800a232:	4553      	cmp	r3, sl
 800a234:	db33      	blt.n	800a29e <__lshift+0xb6>
 800a236:	6920      	ldr	r0, [r4, #16]
 800a238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a23c:	f104 0314 	add.w	r3, r4, #20
 800a240:	f019 091f 	ands.w	r9, r9, #31
 800a244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a24c:	d02b      	beq.n	800a2a6 <__lshift+0xbe>
 800a24e:	f1c9 0e20 	rsb	lr, r9, #32
 800a252:	468a      	mov	sl, r1
 800a254:	2200      	movs	r2, #0
 800a256:	6818      	ldr	r0, [r3, #0]
 800a258:	fa00 f009 	lsl.w	r0, r0, r9
 800a25c:	4310      	orrs	r0, r2
 800a25e:	f84a 0b04 	str.w	r0, [sl], #4
 800a262:	f853 2b04 	ldr.w	r2, [r3], #4
 800a266:	459c      	cmp	ip, r3
 800a268:	fa22 f20e 	lsr.w	r2, r2, lr
 800a26c:	d8f3      	bhi.n	800a256 <__lshift+0x6e>
 800a26e:	ebac 0304 	sub.w	r3, ip, r4
 800a272:	3b15      	subs	r3, #21
 800a274:	f023 0303 	bic.w	r3, r3, #3
 800a278:	3304      	adds	r3, #4
 800a27a:	f104 0015 	add.w	r0, r4, #21
 800a27e:	4584      	cmp	ip, r0
 800a280:	bf38      	it	cc
 800a282:	2304      	movcc	r3, #4
 800a284:	50ca      	str	r2, [r1, r3]
 800a286:	b10a      	cbz	r2, 800a28c <__lshift+0xa4>
 800a288:	f108 0602 	add.w	r6, r8, #2
 800a28c:	3e01      	subs	r6, #1
 800a28e:	4638      	mov	r0, r7
 800a290:	612e      	str	r6, [r5, #16]
 800a292:	4621      	mov	r1, r4
 800a294:	f7ff fd90 	bl	8009db8 <_Bfree>
 800a298:	4628      	mov	r0, r5
 800a29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	e7c5      	b.n	800a232 <__lshift+0x4a>
 800a2a6:	3904      	subs	r1, #4
 800a2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2b0:	459c      	cmp	ip, r3
 800a2b2:	d8f9      	bhi.n	800a2a8 <__lshift+0xc0>
 800a2b4:	e7ea      	b.n	800a28c <__lshift+0xa4>
 800a2b6:	bf00      	nop
 800a2b8:	0800c689 	.word	0x0800c689
 800a2bc:	0800c69a 	.word	0x0800c69a

0800a2c0 <__mcmp>:
 800a2c0:	690a      	ldr	r2, [r1, #16]
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	6900      	ldr	r0, [r0, #16]
 800a2c6:	1a80      	subs	r0, r0, r2
 800a2c8:	b530      	push	{r4, r5, lr}
 800a2ca:	d10e      	bne.n	800a2ea <__mcmp+0x2a>
 800a2cc:	3314      	adds	r3, #20
 800a2ce:	3114      	adds	r1, #20
 800a2d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2e0:	4295      	cmp	r5, r2
 800a2e2:	d003      	beq.n	800a2ec <__mcmp+0x2c>
 800a2e4:	d205      	bcs.n	800a2f2 <__mcmp+0x32>
 800a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ea:	bd30      	pop	{r4, r5, pc}
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	d3f3      	bcc.n	800a2d8 <__mcmp+0x18>
 800a2f0:	e7fb      	b.n	800a2ea <__mcmp+0x2a>
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	e7f9      	b.n	800a2ea <__mcmp+0x2a>
	...

0800a2f8 <__mdiff>:
 800a2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	4689      	mov	r9, r1
 800a2fe:	4606      	mov	r6, r0
 800a300:	4611      	mov	r1, r2
 800a302:	4648      	mov	r0, r9
 800a304:	4614      	mov	r4, r2
 800a306:	f7ff ffdb 	bl	800a2c0 <__mcmp>
 800a30a:	1e05      	subs	r5, r0, #0
 800a30c:	d112      	bne.n	800a334 <__mdiff+0x3c>
 800a30e:	4629      	mov	r1, r5
 800a310:	4630      	mov	r0, r6
 800a312:	f7ff fd11 	bl	8009d38 <_Balloc>
 800a316:	4602      	mov	r2, r0
 800a318:	b928      	cbnz	r0, 800a326 <__mdiff+0x2e>
 800a31a:	4b3f      	ldr	r3, [pc, #252]	@ (800a418 <__mdiff+0x120>)
 800a31c:	f240 2137 	movw	r1, #567	@ 0x237
 800a320:	483e      	ldr	r0, [pc, #248]	@ (800a41c <__mdiff+0x124>)
 800a322:	f001 fa95 	bl	800b850 <__assert_func>
 800a326:	2301      	movs	r3, #1
 800a328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a32c:	4610      	mov	r0, r2
 800a32e:	b003      	add	sp, #12
 800a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	bfbc      	itt	lt
 800a336:	464b      	movlt	r3, r9
 800a338:	46a1      	movlt	r9, r4
 800a33a:	4630      	mov	r0, r6
 800a33c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a340:	bfba      	itte	lt
 800a342:	461c      	movlt	r4, r3
 800a344:	2501      	movlt	r5, #1
 800a346:	2500      	movge	r5, #0
 800a348:	f7ff fcf6 	bl	8009d38 <_Balloc>
 800a34c:	4602      	mov	r2, r0
 800a34e:	b918      	cbnz	r0, 800a358 <__mdiff+0x60>
 800a350:	4b31      	ldr	r3, [pc, #196]	@ (800a418 <__mdiff+0x120>)
 800a352:	f240 2145 	movw	r1, #581	@ 0x245
 800a356:	e7e3      	b.n	800a320 <__mdiff+0x28>
 800a358:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a35c:	6926      	ldr	r6, [r4, #16]
 800a35e:	60c5      	str	r5, [r0, #12]
 800a360:	f109 0310 	add.w	r3, r9, #16
 800a364:	f109 0514 	add.w	r5, r9, #20
 800a368:	f104 0e14 	add.w	lr, r4, #20
 800a36c:	f100 0b14 	add.w	fp, r0, #20
 800a370:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a374:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	46d9      	mov	r9, fp
 800a37c:	f04f 0c00 	mov.w	ip, #0
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a386:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	fa1f f38a 	uxth.w	r3, sl
 800a390:	4619      	mov	r1, r3
 800a392:	b283      	uxth	r3, r0
 800a394:	1acb      	subs	r3, r1, r3
 800a396:	0c00      	lsrs	r0, r0, #16
 800a398:	4463      	add	r3, ip
 800a39a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a39e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3a8:	4576      	cmp	r6, lr
 800a3aa:	f849 3b04 	str.w	r3, [r9], #4
 800a3ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3b2:	d8e5      	bhi.n	800a380 <__mdiff+0x88>
 800a3b4:	1b33      	subs	r3, r6, r4
 800a3b6:	3b15      	subs	r3, #21
 800a3b8:	f023 0303 	bic.w	r3, r3, #3
 800a3bc:	3415      	adds	r4, #21
 800a3be:	3304      	adds	r3, #4
 800a3c0:	42a6      	cmp	r6, r4
 800a3c2:	bf38      	it	cc
 800a3c4:	2304      	movcc	r3, #4
 800a3c6:	441d      	add	r5, r3
 800a3c8:	445b      	add	r3, fp
 800a3ca:	461e      	mov	r6, r3
 800a3cc:	462c      	mov	r4, r5
 800a3ce:	4544      	cmp	r4, r8
 800a3d0:	d30e      	bcc.n	800a3f0 <__mdiff+0xf8>
 800a3d2:	f108 0103 	add.w	r1, r8, #3
 800a3d6:	1b49      	subs	r1, r1, r5
 800a3d8:	f021 0103 	bic.w	r1, r1, #3
 800a3dc:	3d03      	subs	r5, #3
 800a3de:	45a8      	cmp	r8, r5
 800a3e0:	bf38      	it	cc
 800a3e2:	2100      	movcc	r1, #0
 800a3e4:	440b      	add	r3, r1
 800a3e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3ea:	b191      	cbz	r1, 800a412 <__mdiff+0x11a>
 800a3ec:	6117      	str	r7, [r2, #16]
 800a3ee:	e79d      	b.n	800a32c <__mdiff+0x34>
 800a3f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3f4:	46e6      	mov	lr, ip
 800a3f6:	0c08      	lsrs	r0, r1, #16
 800a3f8:	fa1c fc81 	uxtah	ip, ip, r1
 800a3fc:	4471      	add	r1, lr
 800a3fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a402:	b289      	uxth	r1, r1
 800a404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a408:	f846 1b04 	str.w	r1, [r6], #4
 800a40c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a410:	e7dd      	b.n	800a3ce <__mdiff+0xd6>
 800a412:	3f01      	subs	r7, #1
 800a414:	e7e7      	b.n	800a3e6 <__mdiff+0xee>
 800a416:	bf00      	nop
 800a418:	0800c689 	.word	0x0800c689
 800a41c:	0800c69a 	.word	0x0800c69a

0800a420 <__ulp>:
 800a420:	b082      	sub	sp, #8
 800a422:	ed8d 0b00 	vstr	d0, [sp]
 800a426:	9a01      	ldr	r2, [sp, #4]
 800a428:	4b0f      	ldr	r3, [pc, #60]	@ (800a468 <__ulp+0x48>)
 800a42a:	4013      	ands	r3, r2
 800a42c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc08      	bgt.n	800a446 <__ulp+0x26>
 800a434:	425b      	negs	r3, r3
 800a436:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a43a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a43e:	da04      	bge.n	800a44a <__ulp+0x2a>
 800a440:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a444:	4113      	asrs	r3, r2
 800a446:	2200      	movs	r2, #0
 800a448:	e008      	b.n	800a45c <__ulp+0x3c>
 800a44a:	f1a2 0314 	sub.w	r3, r2, #20
 800a44e:	2b1e      	cmp	r3, #30
 800a450:	bfda      	itte	le
 800a452:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a456:	40da      	lsrle	r2, r3
 800a458:	2201      	movgt	r2, #1
 800a45a:	2300      	movs	r3, #0
 800a45c:	4619      	mov	r1, r3
 800a45e:	4610      	mov	r0, r2
 800a460:	ec41 0b10 	vmov	d0, r0, r1
 800a464:	b002      	add	sp, #8
 800a466:	4770      	bx	lr
 800a468:	7ff00000 	.word	0x7ff00000

0800a46c <__b2d>:
 800a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a470:	6906      	ldr	r6, [r0, #16]
 800a472:	f100 0814 	add.w	r8, r0, #20
 800a476:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a47a:	1f37      	subs	r7, r6, #4
 800a47c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a480:	4610      	mov	r0, r2
 800a482:	f7ff fd4b 	bl	8009f1c <__hi0bits>
 800a486:	f1c0 0320 	rsb	r3, r0, #32
 800a48a:	280a      	cmp	r0, #10
 800a48c:	600b      	str	r3, [r1, #0]
 800a48e:	491b      	ldr	r1, [pc, #108]	@ (800a4fc <__b2d+0x90>)
 800a490:	dc15      	bgt.n	800a4be <__b2d+0x52>
 800a492:	f1c0 0c0b 	rsb	ip, r0, #11
 800a496:	fa22 f30c 	lsr.w	r3, r2, ip
 800a49a:	45b8      	cmp	r8, r7
 800a49c:	ea43 0501 	orr.w	r5, r3, r1
 800a4a0:	bf34      	ite	cc
 800a4a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4a6:	2300      	movcs	r3, #0
 800a4a8:	3015      	adds	r0, #21
 800a4aa:	fa02 f000 	lsl.w	r0, r2, r0
 800a4ae:	fa23 f30c 	lsr.w	r3, r3, ip
 800a4b2:	4303      	orrs	r3, r0
 800a4b4:	461c      	mov	r4, r3
 800a4b6:	ec45 4b10 	vmov	d0, r4, r5
 800a4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4be:	45b8      	cmp	r8, r7
 800a4c0:	bf3a      	itte	cc
 800a4c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4c6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a4ca:	2300      	movcs	r3, #0
 800a4cc:	380b      	subs	r0, #11
 800a4ce:	d012      	beq.n	800a4f6 <__b2d+0x8a>
 800a4d0:	f1c0 0120 	rsb	r1, r0, #32
 800a4d4:	fa23 f401 	lsr.w	r4, r3, r1
 800a4d8:	4082      	lsls	r2, r0
 800a4da:	4322      	orrs	r2, r4
 800a4dc:	4547      	cmp	r7, r8
 800a4de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a4e2:	bf8c      	ite	hi
 800a4e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4e8:	2200      	movls	r2, #0
 800a4ea:	4083      	lsls	r3, r0
 800a4ec:	40ca      	lsrs	r2, r1
 800a4ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	e7de      	b.n	800a4b4 <__b2d+0x48>
 800a4f6:	ea42 0501 	orr.w	r5, r2, r1
 800a4fa:	e7db      	b.n	800a4b4 <__b2d+0x48>
 800a4fc:	3ff00000 	.word	0x3ff00000

0800a500 <__d2b>:
 800a500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a504:	460f      	mov	r7, r1
 800a506:	2101      	movs	r1, #1
 800a508:	ec59 8b10 	vmov	r8, r9, d0
 800a50c:	4616      	mov	r6, r2
 800a50e:	f7ff fc13 	bl	8009d38 <_Balloc>
 800a512:	4604      	mov	r4, r0
 800a514:	b930      	cbnz	r0, 800a524 <__d2b+0x24>
 800a516:	4602      	mov	r2, r0
 800a518:	4b23      	ldr	r3, [pc, #140]	@ (800a5a8 <__d2b+0xa8>)
 800a51a:	4824      	ldr	r0, [pc, #144]	@ (800a5ac <__d2b+0xac>)
 800a51c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a520:	f001 f996 	bl	800b850 <__assert_func>
 800a524:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a52c:	b10d      	cbz	r5, 800a532 <__d2b+0x32>
 800a52e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	f1b8 0300 	subs.w	r3, r8, #0
 800a538:	d023      	beq.n	800a582 <__d2b+0x82>
 800a53a:	4668      	mov	r0, sp
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	f7ff fd0c 	bl	8009f5a <__lo0bits>
 800a542:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a546:	b1d0      	cbz	r0, 800a57e <__d2b+0x7e>
 800a548:	f1c0 0320 	rsb	r3, r0, #32
 800a54c:	fa02 f303 	lsl.w	r3, r2, r3
 800a550:	430b      	orrs	r3, r1
 800a552:	40c2      	lsrs	r2, r0
 800a554:	6163      	str	r3, [r4, #20]
 800a556:	9201      	str	r2, [sp, #4]
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	61a3      	str	r3, [r4, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bf0c      	ite	eq
 800a560:	2201      	moveq	r2, #1
 800a562:	2202      	movne	r2, #2
 800a564:	6122      	str	r2, [r4, #16]
 800a566:	b1a5      	cbz	r5, 800a592 <__d2b+0x92>
 800a568:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a56c:	4405      	add	r5, r0
 800a56e:	603d      	str	r5, [r7, #0]
 800a570:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a574:	6030      	str	r0, [r6, #0]
 800a576:	4620      	mov	r0, r4
 800a578:	b003      	add	sp, #12
 800a57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a57e:	6161      	str	r1, [r4, #20]
 800a580:	e7ea      	b.n	800a558 <__d2b+0x58>
 800a582:	a801      	add	r0, sp, #4
 800a584:	f7ff fce9 	bl	8009f5a <__lo0bits>
 800a588:	9b01      	ldr	r3, [sp, #4]
 800a58a:	6163      	str	r3, [r4, #20]
 800a58c:	3020      	adds	r0, #32
 800a58e:	2201      	movs	r2, #1
 800a590:	e7e8      	b.n	800a564 <__d2b+0x64>
 800a592:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a596:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a59a:	6038      	str	r0, [r7, #0]
 800a59c:	6918      	ldr	r0, [r3, #16]
 800a59e:	f7ff fcbd 	bl	8009f1c <__hi0bits>
 800a5a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5a6:	e7e5      	b.n	800a574 <__d2b+0x74>
 800a5a8:	0800c689 	.word	0x0800c689
 800a5ac:	0800c69a 	.word	0x0800c69a

0800a5b0 <__ratio>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	e9cd 1000 	strd	r1, r0, [sp]
 800a5ba:	a902      	add	r1, sp, #8
 800a5bc:	f7ff ff56 	bl	800a46c <__b2d>
 800a5c0:	9800      	ldr	r0, [sp, #0]
 800a5c2:	a903      	add	r1, sp, #12
 800a5c4:	ec55 4b10 	vmov	r4, r5, d0
 800a5c8:	f7ff ff50 	bl	800a46c <__b2d>
 800a5cc:	9b01      	ldr	r3, [sp, #4]
 800a5ce:	6919      	ldr	r1, [r3, #16]
 800a5d0:	9b00      	ldr	r3, [sp, #0]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	1ac9      	subs	r1, r1, r3
 800a5d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	ec5b ab10 	vmov	sl, fp, d0
 800a5e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bfce      	itee	gt
 800a5e8:	462a      	movgt	r2, r5
 800a5ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5ee:	465a      	movle	r2, fp
 800a5f0:	462f      	mov	r7, r5
 800a5f2:	46d9      	mov	r9, fp
 800a5f4:	bfcc      	ite	gt
 800a5f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a5fe:	464b      	mov	r3, r9
 800a600:	4652      	mov	r2, sl
 800a602:	4620      	mov	r0, r4
 800a604:	4639      	mov	r1, r7
 800a606:	f7f6 f929 	bl	800085c <__aeabi_ddiv>
 800a60a:	ec41 0b10 	vmov	d0, r0, r1
 800a60e:	b005      	add	sp, #20
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a614 <__copybits>:
 800a614:	3901      	subs	r1, #1
 800a616:	b570      	push	{r4, r5, r6, lr}
 800a618:	1149      	asrs	r1, r1, #5
 800a61a:	6914      	ldr	r4, [r2, #16]
 800a61c:	3101      	adds	r1, #1
 800a61e:	f102 0314 	add.w	r3, r2, #20
 800a622:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a626:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a62a:	1f05      	subs	r5, r0, #4
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	d30c      	bcc.n	800a64a <__copybits+0x36>
 800a630:	1aa3      	subs	r3, r4, r2
 800a632:	3b11      	subs	r3, #17
 800a634:	f023 0303 	bic.w	r3, r3, #3
 800a638:	3211      	adds	r2, #17
 800a63a:	42a2      	cmp	r2, r4
 800a63c:	bf88      	it	hi
 800a63e:	2300      	movhi	r3, #0
 800a640:	4418      	add	r0, r3
 800a642:	2300      	movs	r3, #0
 800a644:	4288      	cmp	r0, r1
 800a646:	d305      	bcc.n	800a654 <__copybits+0x40>
 800a648:	bd70      	pop	{r4, r5, r6, pc}
 800a64a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a64e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a652:	e7eb      	b.n	800a62c <__copybits+0x18>
 800a654:	f840 3b04 	str.w	r3, [r0], #4
 800a658:	e7f4      	b.n	800a644 <__copybits+0x30>

0800a65a <__any_on>:
 800a65a:	f100 0214 	add.w	r2, r0, #20
 800a65e:	6900      	ldr	r0, [r0, #16]
 800a660:	114b      	asrs	r3, r1, #5
 800a662:	4298      	cmp	r0, r3
 800a664:	b510      	push	{r4, lr}
 800a666:	db11      	blt.n	800a68c <__any_on+0x32>
 800a668:	dd0a      	ble.n	800a680 <__any_on+0x26>
 800a66a:	f011 011f 	ands.w	r1, r1, #31
 800a66e:	d007      	beq.n	800a680 <__any_on+0x26>
 800a670:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a674:	fa24 f001 	lsr.w	r0, r4, r1
 800a678:	fa00 f101 	lsl.w	r1, r0, r1
 800a67c:	428c      	cmp	r4, r1
 800a67e:	d10b      	bne.n	800a698 <__any_on+0x3e>
 800a680:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a684:	4293      	cmp	r3, r2
 800a686:	d803      	bhi.n	800a690 <__any_on+0x36>
 800a688:	2000      	movs	r0, #0
 800a68a:	bd10      	pop	{r4, pc}
 800a68c:	4603      	mov	r3, r0
 800a68e:	e7f7      	b.n	800a680 <__any_on+0x26>
 800a690:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a694:	2900      	cmp	r1, #0
 800a696:	d0f5      	beq.n	800a684 <__any_on+0x2a>
 800a698:	2001      	movs	r0, #1
 800a69a:	e7f6      	b.n	800a68a <__any_on+0x30>

0800a69c <sulp>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	ec45 4b10 	vmov	d0, r4, r5
 800a6a6:	4616      	mov	r6, r2
 800a6a8:	f7ff feba 	bl	800a420 <__ulp>
 800a6ac:	ec51 0b10 	vmov	r0, r1, d0
 800a6b0:	b17e      	cbz	r6, 800a6d2 <sulp+0x36>
 800a6b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a6b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dd09      	ble.n	800a6d2 <sulp+0x36>
 800a6be:	051b      	lsls	r3, r3, #20
 800a6c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a6c4:	2400      	movs	r4, #0
 800a6c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	f7f5 ff9b 	bl	8000608 <__aeabi_dmul>
 800a6d2:	ec41 0b10 	vmov	d0, r0, r1
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}

0800a6d8 <_strtod_l>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	b09f      	sub	sp, #124	@ 0x7c
 800a6de:	460c      	mov	r4, r1
 800a6e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a6e6:	9005      	str	r0, [sp, #20]
 800a6e8:	f04f 0a00 	mov.w	sl, #0
 800a6ec:	f04f 0b00 	mov.w	fp, #0
 800a6f0:	460a      	mov	r2, r1
 800a6f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6f4:	7811      	ldrb	r1, [r2, #0]
 800a6f6:	292b      	cmp	r1, #43	@ 0x2b
 800a6f8:	d04a      	beq.n	800a790 <_strtod_l+0xb8>
 800a6fa:	d838      	bhi.n	800a76e <_strtod_l+0x96>
 800a6fc:	290d      	cmp	r1, #13
 800a6fe:	d832      	bhi.n	800a766 <_strtod_l+0x8e>
 800a700:	2908      	cmp	r1, #8
 800a702:	d832      	bhi.n	800a76a <_strtod_l+0x92>
 800a704:	2900      	cmp	r1, #0
 800a706:	d03b      	beq.n	800a780 <_strtod_l+0xa8>
 800a708:	2200      	movs	r2, #0
 800a70a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a70c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a70e:	782a      	ldrb	r2, [r5, #0]
 800a710:	2a30      	cmp	r2, #48	@ 0x30
 800a712:	f040 80b3 	bne.w	800a87c <_strtod_l+0x1a4>
 800a716:	786a      	ldrb	r2, [r5, #1]
 800a718:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a71c:	2a58      	cmp	r2, #88	@ 0x58
 800a71e:	d16e      	bne.n	800a7fe <_strtod_l+0x126>
 800a720:	9302      	str	r3, [sp, #8]
 800a722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	ab1a      	add	r3, sp, #104	@ 0x68
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	4a8e      	ldr	r2, [pc, #568]	@ (800a964 <_strtod_l+0x28c>)
 800a72c:	9805      	ldr	r0, [sp, #20]
 800a72e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a730:	a919      	add	r1, sp, #100	@ 0x64
 800a732:	f001 f927 	bl	800b984 <__gethex>
 800a736:	f010 060f 	ands.w	r6, r0, #15
 800a73a:	4604      	mov	r4, r0
 800a73c:	d005      	beq.n	800a74a <_strtod_l+0x72>
 800a73e:	2e06      	cmp	r6, #6
 800a740:	d128      	bne.n	800a794 <_strtod_l+0xbc>
 800a742:	3501      	adds	r5, #1
 800a744:	2300      	movs	r3, #0
 800a746:	9519      	str	r5, [sp, #100]	@ 0x64
 800a748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a74a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 858e 	bne.w	800b26e <_strtod_l+0xb96>
 800a752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a754:	b1cb      	cbz	r3, 800a78a <_strtod_l+0xb2>
 800a756:	4652      	mov	r2, sl
 800a758:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a75c:	ec43 2b10 	vmov	d0, r2, r3
 800a760:	b01f      	add	sp, #124	@ 0x7c
 800a762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a766:	2920      	cmp	r1, #32
 800a768:	d1ce      	bne.n	800a708 <_strtod_l+0x30>
 800a76a:	3201      	adds	r2, #1
 800a76c:	e7c1      	b.n	800a6f2 <_strtod_l+0x1a>
 800a76e:	292d      	cmp	r1, #45	@ 0x2d
 800a770:	d1ca      	bne.n	800a708 <_strtod_l+0x30>
 800a772:	2101      	movs	r1, #1
 800a774:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a776:	1c51      	adds	r1, r2, #1
 800a778:	9119      	str	r1, [sp, #100]	@ 0x64
 800a77a:	7852      	ldrb	r2, [r2, #1]
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d1c5      	bne.n	800a70c <_strtod_l+0x34>
 800a780:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a782:	9419      	str	r4, [sp, #100]	@ 0x64
 800a784:	2b00      	cmp	r3, #0
 800a786:	f040 8570 	bne.w	800b26a <_strtod_l+0xb92>
 800a78a:	4652      	mov	r2, sl
 800a78c:	465b      	mov	r3, fp
 800a78e:	e7e5      	b.n	800a75c <_strtod_l+0x84>
 800a790:	2100      	movs	r1, #0
 800a792:	e7ef      	b.n	800a774 <_strtod_l+0x9c>
 800a794:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a796:	b13a      	cbz	r2, 800a7a8 <_strtod_l+0xd0>
 800a798:	2135      	movs	r1, #53	@ 0x35
 800a79a:	a81c      	add	r0, sp, #112	@ 0x70
 800a79c:	f7ff ff3a 	bl	800a614 <__copybits>
 800a7a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7a2:	9805      	ldr	r0, [sp, #20]
 800a7a4:	f7ff fb08 	bl	8009db8 <_Bfree>
 800a7a8:	3e01      	subs	r6, #1
 800a7aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a7ac:	2e04      	cmp	r6, #4
 800a7ae:	d806      	bhi.n	800a7be <_strtod_l+0xe6>
 800a7b0:	e8df f006 	tbb	[pc, r6]
 800a7b4:	201d0314 	.word	0x201d0314
 800a7b8:	14          	.byte	0x14
 800a7b9:	00          	.byte	0x00
 800a7ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a7be:	05e1      	lsls	r1, r4, #23
 800a7c0:	bf48      	it	mi
 800a7c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a7c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7ca:	0d1b      	lsrs	r3, r3, #20
 800a7cc:	051b      	lsls	r3, r3, #20
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1bb      	bne.n	800a74a <_strtod_l+0x72>
 800a7d2:	f7fe fb2f 	bl	8008e34 <__errno>
 800a7d6:	2322      	movs	r3, #34	@ 0x22
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	e7b6      	b.n	800a74a <_strtod_l+0x72>
 800a7dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a7e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a7e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a7ec:	e7e7      	b.n	800a7be <_strtod_l+0xe6>
 800a7ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a96c <_strtod_l+0x294>
 800a7f2:	e7e4      	b.n	800a7be <_strtod_l+0xe6>
 800a7f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a7f8:	f04f 3aff 	mov.w	sl, #4294967295
 800a7fc:	e7df      	b.n	800a7be <_strtod_l+0xe6>
 800a7fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	9219      	str	r2, [sp, #100]	@ 0x64
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b30      	cmp	r3, #48	@ 0x30
 800a808:	d0f9      	beq.n	800a7fe <_strtod_l+0x126>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d09d      	beq.n	800a74a <_strtod_l+0x72>
 800a80e:	2301      	movs	r3, #1
 800a810:	9309      	str	r3, [sp, #36]	@ 0x24
 800a812:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a814:	930c      	str	r3, [sp, #48]	@ 0x30
 800a816:	2300      	movs	r3, #0
 800a818:	9308      	str	r3, [sp, #32]
 800a81a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a81c:	461f      	mov	r7, r3
 800a81e:	220a      	movs	r2, #10
 800a820:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a822:	7805      	ldrb	r5, [r0, #0]
 800a824:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a828:	b2d9      	uxtb	r1, r3
 800a82a:	2909      	cmp	r1, #9
 800a82c:	d928      	bls.n	800a880 <_strtod_l+0x1a8>
 800a82e:	494e      	ldr	r1, [pc, #312]	@ (800a968 <_strtod_l+0x290>)
 800a830:	2201      	movs	r2, #1
 800a832:	f000 ffd5 	bl	800b7e0 <strncmp>
 800a836:	2800      	cmp	r0, #0
 800a838:	d032      	beq.n	800a8a0 <_strtod_l+0x1c8>
 800a83a:	2000      	movs	r0, #0
 800a83c:	462a      	mov	r2, r5
 800a83e:	4681      	mov	r9, r0
 800a840:	463d      	mov	r5, r7
 800a842:	4603      	mov	r3, r0
 800a844:	2a65      	cmp	r2, #101	@ 0x65
 800a846:	d001      	beq.n	800a84c <_strtod_l+0x174>
 800a848:	2a45      	cmp	r2, #69	@ 0x45
 800a84a:	d114      	bne.n	800a876 <_strtod_l+0x19e>
 800a84c:	b91d      	cbnz	r5, 800a856 <_strtod_l+0x17e>
 800a84e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a850:	4302      	orrs	r2, r0
 800a852:	d095      	beq.n	800a780 <_strtod_l+0xa8>
 800a854:	2500      	movs	r5, #0
 800a856:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a858:	1c62      	adds	r2, r4, #1
 800a85a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a85c:	7862      	ldrb	r2, [r4, #1]
 800a85e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a860:	d077      	beq.n	800a952 <_strtod_l+0x27a>
 800a862:	2a2d      	cmp	r2, #45	@ 0x2d
 800a864:	d07b      	beq.n	800a95e <_strtod_l+0x286>
 800a866:	f04f 0c00 	mov.w	ip, #0
 800a86a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a86e:	2909      	cmp	r1, #9
 800a870:	f240 8082 	bls.w	800a978 <_strtod_l+0x2a0>
 800a874:	9419      	str	r4, [sp, #100]	@ 0x64
 800a876:	f04f 0800 	mov.w	r8, #0
 800a87a:	e0a2      	b.n	800a9c2 <_strtod_l+0x2ea>
 800a87c:	2300      	movs	r3, #0
 800a87e:	e7c7      	b.n	800a810 <_strtod_l+0x138>
 800a880:	2f08      	cmp	r7, #8
 800a882:	bfd5      	itete	le
 800a884:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a886:	9908      	ldrgt	r1, [sp, #32]
 800a888:	fb02 3301 	mlale	r3, r2, r1, r3
 800a88c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a890:	f100 0001 	add.w	r0, r0, #1
 800a894:	bfd4      	ite	le
 800a896:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a898:	9308      	strgt	r3, [sp, #32]
 800a89a:	3701      	adds	r7, #1
 800a89c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a89e:	e7bf      	b.n	800a820 <_strtod_l+0x148>
 800a8a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8a6:	785a      	ldrb	r2, [r3, #1]
 800a8a8:	b37f      	cbz	r7, 800a90a <_strtod_l+0x232>
 800a8aa:	4681      	mov	r9, r0
 800a8ac:	463d      	mov	r5, r7
 800a8ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a8b2:	2b09      	cmp	r3, #9
 800a8b4:	d912      	bls.n	800a8dc <_strtod_l+0x204>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e7c4      	b.n	800a844 <_strtod_l+0x16c>
 800a8ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8c0:	785a      	ldrb	r2, [r3, #1]
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	2a30      	cmp	r2, #48	@ 0x30
 800a8c6:	d0f8      	beq.n	800a8ba <_strtod_l+0x1e2>
 800a8c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	f200 84d3 	bhi.w	800b278 <_strtod_l+0xba0>
 800a8d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8d6:	4681      	mov	r9, r0
 800a8d8:	2000      	movs	r0, #0
 800a8da:	4605      	mov	r5, r0
 800a8dc:	3a30      	subs	r2, #48	@ 0x30
 800a8de:	f100 0301 	add.w	r3, r0, #1
 800a8e2:	d02a      	beq.n	800a93a <_strtod_l+0x262>
 800a8e4:	4499      	add	r9, r3
 800a8e6:	eb00 0c05 	add.w	ip, r0, r5
 800a8ea:	462b      	mov	r3, r5
 800a8ec:	210a      	movs	r1, #10
 800a8ee:	4563      	cmp	r3, ip
 800a8f0:	d10d      	bne.n	800a90e <_strtod_l+0x236>
 800a8f2:	1c69      	adds	r1, r5, #1
 800a8f4:	4401      	add	r1, r0
 800a8f6:	4428      	add	r0, r5
 800a8f8:	2808      	cmp	r0, #8
 800a8fa:	dc16      	bgt.n	800a92a <_strtod_l+0x252>
 800a8fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8fe:	230a      	movs	r3, #10
 800a900:	fb03 2300 	mla	r3, r3, r0, r2
 800a904:	930a      	str	r3, [sp, #40]	@ 0x28
 800a906:	2300      	movs	r3, #0
 800a908:	e018      	b.n	800a93c <_strtod_l+0x264>
 800a90a:	4638      	mov	r0, r7
 800a90c:	e7da      	b.n	800a8c4 <_strtod_l+0x1ec>
 800a90e:	2b08      	cmp	r3, #8
 800a910:	f103 0301 	add.w	r3, r3, #1
 800a914:	dc03      	bgt.n	800a91e <_strtod_l+0x246>
 800a916:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a918:	434e      	muls	r6, r1
 800a91a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a91c:	e7e7      	b.n	800a8ee <_strtod_l+0x216>
 800a91e:	2b10      	cmp	r3, #16
 800a920:	bfde      	ittt	le
 800a922:	9e08      	ldrle	r6, [sp, #32]
 800a924:	434e      	mulle	r6, r1
 800a926:	9608      	strle	r6, [sp, #32]
 800a928:	e7e1      	b.n	800a8ee <_strtod_l+0x216>
 800a92a:	280f      	cmp	r0, #15
 800a92c:	dceb      	bgt.n	800a906 <_strtod_l+0x22e>
 800a92e:	9808      	ldr	r0, [sp, #32]
 800a930:	230a      	movs	r3, #10
 800a932:	fb03 2300 	mla	r3, r3, r0, r2
 800a936:	9308      	str	r3, [sp, #32]
 800a938:	e7e5      	b.n	800a906 <_strtod_l+0x22e>
 800a93a:	4629      	mov	r1, r5
 800a93c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a93e:	1c50      	adds	r0, r2, #1
 800a940:	9019      	str	r0, [sp, #100]	@ 0x64
 800a942:	7852      	ldrb	r2, [r2, #1]
 800a944:	4618      	mov	r0, r3
 800a946:	460d      	mov	r5, r1
 800a948:	e7b1      	b.n	800a8ae <_strtod_l+0x1d6>
 800a94a:	f04f 0900 	mov.w	r9, #0
 800a94e:	2301      	movs	r3, #1
 800a950:	e77d      	b.n	800a84e <_strtod_l+0x176>
 800a952:	f04f 0c00 	mov.w	ip, #0
 800a956:	1ca2      	adds	r2, r4, #2
 800a958:	9219      	str	r2, [sp, #100]	@ 0x64
 800a95a:	78a2      	ldrb	r2, [r4, #2]
 800a95c:	e785      	b.n	800a86a <_strtod_l+0x192>
 800a95e:	f04f 0c01 	mov.w	ip, #1
 800a962:	e7f8      	b.n	800a956 <_strtod_l+0x27e>
 800a964:	0800c808 	.word	0x0800c808
 800a968:	0800c7f0 	.word	0x0800c7f0
 800a96c:	7ff00000 	.word	0x7ff00000
 800a970:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a972:	1c51      	adds	r1, r2, #1
 800a974:	9119      	str	r1, [sp, #100]	@ 0x64
 800a976:	7852      	ldrb	r2, [r2, #1]
 800a978:	2a30      	cmp	r2, #48	@ 0x30
 800a97a:	d0f9      	beq.n	800a970 <_strtod_l+0x298>
 800a97c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a980:	2908      	cmp	r1, #8
 800a982:	f63f af78 	bhi.w	800a876 <_strtod_l+0x19e>
 800a986:	3a30      	subs	r2, #48	@ 0x30
 800a988:	920e      	str	r2, [sp, #56]	@ 0x38
 800a98a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a98c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a98e:	f04f 080a 	mov.w	r8, #10
 800a992:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a994:	1c56      	adds	r6, r2, #1
 800a996:	9619      	str	r6, [sp, #100]	@ 0x64
 800a998:	7852      	ldrb	r2, [r2, #1]
 800a99a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a99e:	f1be 0f09 	cmp.w	lr, #9
 800a9a2:	d939      	bls.n	800aa18 <_strtod_l+0x340>
 800a9a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a9a6:	1a76      	subs	r6, r6, r1
 800a9a8:	2e08      	cmp	r6, #8
 800a9aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a9ae:	dc03      	bgt.n	800a9b8 <_strtod_l+0x2e0>
 800a9b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9b2:	4588      	cmp	r8, r1
 800a9b4:	bfa8      	it	ge
 800a9b6:	4688      	movge	r8, r1
 800a9b8:	f1bc 0f00 	cmp.w	ip, #0
 800a9bc:	d001      	beq.n	800a9c2 <_strtod_l+0x2ea>
 800a9be:	f1c8 0800 	rsb	r8, r8, #0
 800a9c2:	2d00      	cmp	r5, #0
 800a9c4:	d14e      	bne.n	800aa64 <_strtod_l+0x38c>
 800a9c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9c8:	4308      	orrs	r0, r1
 800a9ca:	f47f aebe 	bne.w	800a74a <_strtod_l+0x72>
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f47f aed6 	bne.w	800a780 <_strtod_l+0xa8>
 800a9d4:	2a69      	cmp	r2, #105	@ 0x69
 800a9d6:	d028      	beq.n	800aa2a <_strtod_l+0x352>
 800a9d8:	dc25      	bgt.n	800aa26 <_strtod_l+0x34e>
 800a9da:	2a49      	cmp	r2, #73	@ 0x49
 800a9dc:	d025      	beq.n	800aa2a <_strtod_l+0x352>
 800a9de:	2a4e      	cmp	r2, #78	@ 0x4e
 800a9e0:	f47f aece 	bne.w	800a780 <_strtod_l+0xa8>
 800a9e4:	499b      	ldr	r1, [pc, #620]	@ (800ac54 <_strtod_l+0x57c>)
 800a9e6:	a819      	add	r0, sp, #100	@ 0x64
 800a9e8:	f001 f9ee 	bl	800bdc8 <__match>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	f43f aec7 	beq.w	800a780 <_strtod_l+0xa8>
 800a9f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b28      	cmp	r3, #40	@ 0x28
 800a9f8:	d12e      	bne.n	800aa58 <_strtod_l+0x380>
 800a9fa:	4997      	ldr	r1, [pc, #604]	@ (800ac58 <_strtod_l+0x580>)
 800a9fc:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9fe:	a819      	add	r0, sp, #100	@ 0x64
 800aa00:	f001 f9f6 	bl	800bdf0 <__hexnan>
 800aa04:	2805      	cmp	r0, #5
 800aa06:	d127      	bne.n	800aa58 <_strtod_l+0x380>
 800aa08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aa0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aa12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aa16:	e698      	b.n	800a74a <_strtod_l+0x72>
 800aa18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aa1a:	fb08 2101 	mla	r1, r8, r1, r2
 800aa1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aa22:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa24:	e7b5      	b.n	800a992 <_strtod_l+0x2ba>
 800aa26:	2a6e      	cmp	r2, #110	@ 0x6e
 800aa28:	e7da      	b.n	800a9e0 <_strtod_l+0x308>
 800aa2a:	498c      	ldr	r1, [pc, #560]	@ (800ac5c <_strtod_l+0x584>)
 800aa2c:	a819      	add	r0, sp, #100	@ 0x64
 800aa2e:	f001 f9cb 	bl	800bdc8 <__match>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f43f aea4 	beq.w	800a780 <_strtod_l+0xa8>
 800aa38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa3a:	4989      	ldr	r1, [pc, #548]	@ (800ac60 <_strtod_l+0x588>)
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	a819      	add	r0, sp, #100	@ 0x64
 800aa40:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa42:	f001 f9c1 	bl	800bdc8 <__match>
 800aa46:	b910      	cbnz	r0, 800aa4e <_strtod_l+0x376>
 800aa48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ac70 <_strtod_l+0x598>
 800aa52:	f04f 0a00 	mov.w	sl, #0
 800aa56:	e678      	b.n	800a74a <_strtod_l+0x72>
 800aa58:	4882      	ldr	r0, [pc, #520]	@ (800ac64 <_strtod_l+0x58c>)
 800aa5a:	f000 fef1 	bl	800b840 <nan>
 800aa5e:	ec5b ab10 	vmov	sl, fp, d0
 800aa62:	e672      	b.n	800a74a <_strtod_l+0x72>
 800aa64:	eba8 0309 	sub.w	r3, r8, r9
 800aa68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6c:	2f00      	cmp	r7, #0
 800aa6e:	bf08      	it	eq
 800aa70:	462f      	moveq	r7, r5
 800aa72:	2d10      	cmp	r5, #16
 800aa74:	462c      	mov	r4, r5
 800aa76:	bfa8      	it	ge
 800aa78:	2410      	movge	r4, #16
 800aa7a:	f7f5 fd4b 	bl	8000514 <__aeabi_ui2d>
 800aa7e:	2d09      	cmp	r5, #9
 800aa80:	4682      	mov	sl, r0
 800aa82:	468b      	mov	fp, r1
 800aa84:	dc13      	bgt.n	800aaae <_strtod_l+0x3d6>
 800aa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f43f ae5e 	beq.w	800a74a <_strtod_l+0x72>
 800aa8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa90:	dd78      	ble.n	800ab84 <_strtod_l+0x4ac>
 800aa92:	2b16      	cmp	r3, #22
 800aa94:	dc5f      	bgt.n	800ab56 <_strtod_l+0x47e>
 800aa96:	4974      	ldr	r1, [pc, #464]	@ (800ac68 <_strtod_l+0x590>)
 800aa98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaa0:	4652      	mov	r2, sl
 800aaa2:	465b      	mov	r3, fp
 800aaa4:	f7f5 fdb0 	bl	8000608 <__aeabi_dmul>
 800aaa8:	4682      	mov	sl, r0
 800aaaa:	468b      	mov	fp, r1
 800aaac:	e64d      	b.n	800a74a <_strtod_l+0x72>
 800aaae:	4b6e      	ldr	r3, [pc, #440]	@ (800ac68 <_strtod_l+0x590>)
 800aab0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aab4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aab8:	f7f5 fda6 	bl	8000608 <__aeabi_dmul>
 800aabc:	4682      	mov	sl, r0
 800aabe:	9808      	ldr	r0, [sp, #32]
 800aac0:	468b      	mov	fp, r1
 800aac2:	f7f5 fd27 	bl	8000514 <__aeabi_ui2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4650      	mov	r0, sl
 800aacc:	4659      	mov	r1, fp
 800aace:	f7f5 fbe5 	bl	800029c <__adddf3>
 800aad2:	2d0f      	cmp	r5, #15
 800aad4:	4682      	mov	sl, r0
 800aad6:	468b      	mov	fp, r1
 800aad8:	ddd5      	ble.n	800aa86 <_strtod_l+0x3ae>
 800aada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aadc:	1b2c      	subs	r4, r5, r4
 800aade:	441c      	add	r4, r3
 800aae0:	2c00      	cmp	r4, #0
 800aae2:	f340 8096 	ble.w	800ac12 <_strtod_l+0x53a>
 800aae6:	f014 030f 	ands.w	r3, r4, #15
 800aaea:	d00a      	beq.n	800ab02 <_strtod_l+0x42a>
 800aaec:	495e      	ldr	r1, [pc, #376]	@ (800ac68 <_strtod_l+0x590>)
 800aaee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aaf2:	4652      	mov	r2, sl
 800aaf4:	465b      	mov	r3, fp
 800aaf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafa:	f7f5 fd85 	bl	8000608 <__aeabi_dmul>
 800aafe:	4682      	mov	sl, r0
 800ab00:	468b      	mov	fp, r1
 800ab02:	f034 040f 	bics.w	r4, r4, #15
 800ab06:	d073      	beq.n	800abf0 <_strtod_l+0x518>
 800ab08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ab0c:	dd48      	ble.n	800aba0 <_strtod_l+0x4c8>
 800ab0e:	2400      	movs	r4, #0
 800ab10:	46a0      	mov	r8, r4
 800ab12:	940a      	str	r4, [sp, #40]	@ 0x28
 800ab14:	46a1      	mov	r9, r4
 800ab16:	9a05      	ldr	r2, [sp, #20]
 800ab18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ac70 <_strtod_l+0x598>
 800ab1c:	2322      	movs	r3, #34	@ 0x22
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	f04f 0a00 	mov.w	sl, #0
 800ab24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f43f ae0f 	beq.w	800a74a <_strtod_l+0x72>
 800ab2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab2e:	9805      	ldr	r0, [sp, #20]
 800ab30:	f7ff f942 	bl	8009db8 <_Bfree>
 800ab34:	9805      	ldr	r0, [sp, #20]
 800ab36:	4649      	mov	r1, r9
 800ab38:	f7ff f93e 	bl	8009db8 <_Bfree>
 800ab3c:	9805      	ldr	r0, [sp, #20]
 800ab3e:	4641      	mov	r1, r8
 800ab40:	f7ff f93a 	bl	8009db8 <_Bfree>
 800ab44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab46:	9805      	ldr	r0, [sp, #20]
 800ab48:	f7ff f936 	bl	8009db8 <_Bfree>
 800ab4c:	9805      	ldr	r0, [sp, #20]
 800ab4e:	4621      	mov	r1, r4
 800ab50:	f7ff f932 	bl	8009db8 <_Bfree>
 800ab54:	e5f9      	b.n	800a74a <_strtod_l+0x72>
 800ab56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	dbbc      	blt.n	800aada <_strtod_l+0x402>
 800ab60:	4c41      	ldr	r4, [pc, #260]	@ (800ac68 <_strtod_l+0x590>)
 800ab62:	f1c5 050f 	rsb	r5, r5, #15
 800ab66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab72:	f7f5 fd49 	bl	8000608 <__aeabi_dmul>
 800ab76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab78:	1b5d      	subs	r5, r3, r5
 800ab7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab82:	e78f      	b.n	800aaa4 <_strtod_l+0x3cc>
 800ab84:	3316      	adds	r3, #22
 800ab86:	dba8      	blt.n	800aada <_strtod_l+0x402>
 800ab88:	4b37      	ldr	r3, [pc, #220]	@ (800ac68 <_strtod_l+0x590>)
 800ab8a:	eba9 0808 	sub.w	r8, r9, r8
 800ab8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab92:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab96:	4650      	mov	r0, sl
 800ab98:	4659      	mov	r1, fp
 800ab9a:	f7f5 fe5f 	bl	800085c <__aeabi_ddiv>
 800ab9e:	e783      	b.n	800aaa8 <_strtod_l+0x3d0>
 800aba0:	4b32      	ldr	r3, [pc, #200]	@ (800ac6c <_strtod_l+0x594>)
 800aba2:	9308      	str	r3, [sp, #32]
 800aba4:	2300      	movs	r3, #0
 800aba6:	1124      	asrs	r4, r4, #4
 800aba8:	4650      	mov	r0, sl
 800abaa:	4659      	mov	r1, fp
 800abac:	461e      	mov	r6, r3
 800abae:	2c01      	cmp	r4, #1
 800abb0:	dc21      	bgt.n	800abf6 <_strtod_l+0x51e>
 800abb2:	b10b      	cbz	r3, 800abb8 <_strtod_l+0x4e0>
 800abb4:	4682      	mov	sl, r0
 800abb6:	468b      	mov	fp, r1
 800abb8:	492c      	ldr	r1, [pc, #176]	@ (800ac6c <_strtod_l+0x594>)
 800abba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800abbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800abc2:	4652      	mov	r2, sl
 800abc4:	465b      	mov	r3, fp
 800abc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abca:	f7f5 fd1d 	bl	8000608 <__aeabi_dmul>
 800abce:	4b28      	ldr	r3, [pc, #160]	@ (800ac70 <_strtod_l+0x598>)
 800abd0:	460a      	mov	r2, r1
 800abd2:	400b      	ands	r3, r1
 800abd4:	4927      	ldr	r1, [pc, #156]	@ (800ac74 <_strtod_l+0x59c>)
 800abd6:	428b      	cmp	r3, r1
 800abd8:	4682      	mov	sl, r0
 800abda:	d898      	bhi.n	800ab0e <_strtod_l+0x436>
 800abdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800abe0:	428b      	cmp	r3, r1
 800abe2:	bf86      	itte	hi
 800abe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ac78 <_strtod_l+0x5a0>
 800abe8:	f04f 3aff 	movhi.w	sl, #4294967295
 800abec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800abf0:	2300      	movs	r3, #0
 800abf2:	9308      	str	r3, [sp, #32]
 800abf4:	e07a      	b.n	800acec <_strtod_l+0x614>
 800abf6:	07e2      	lsls	r2, r4, #31
 800abf8:	d505      	bpl.n	800ac06 <_strtod_l+0x52e>
 800abfa:	9b08      	ldr	r3, [sp, #32]
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fd02 	bl	8000608 <__aeabi_dmul>
 800ac04:	2301      	movs	r3, #1
 800ac06:	9a08      	ldr	r2, [sp, #32]
 800ac08:	3208      	adds	r2, #8
 800ac0a:	3601      	adds	r6, #1
 800ac0c:	1064      	asrs	r4, r4, #1
 800ac0e:	9208      	str	r2, [sp, #32]
 800ac10:	e7cd      	b.n	800abae <_strtod_l+0x4d6>
 800ac12:	d0ed      	beq.n	800abf0 <_strtod_l+0x518>
 800ac14:	4264      	negs	r4, r4
 800ac16:	f014 020f 	ands.w	r2, r4, #15
 800ac1a:	d00a      	beq.n	800ac32 <_strtod_l+0x55a>
 800ac1c:	4b12      	ldr	r3, [pc, #72]	@ (800ac68 <_strtod_l+0x590>)
 800ac1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac22:	4650      	mov	r0, sl
 800ac24:	4659      	mov	r1, fp
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f7f5 fe17 	bl	800085c <__aeabi_ddiv>
 800ac2e:	4682      	mov	sl, r0
 800ac30:	468b      	mov	fp, r1
 800ac32:	1124      	asrs	r4, r4, #4
 800ac34:	d0dc      	beq.n	800abf0 <_strtod_l+0x518>
 800ac36:	2c1f      	cmp	r4, #31
 800ac38:	dd20      	ble.n	800ac7c <_strtod_l+0x5a4>
 800ac3a:	2400      	movs	r4, #0
 800ac3c:	46a0      	mov	r8, r4
 800ac3e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ac40:	46a1      	mov	r9, r4
 800ac42:	9a05      	ldr	r2, [sp, #20]
 800ac44:	2322      	movs	r3, #34	@ 0x22
 800ac46:	f04f 0a00 	mov.w	sl, #0
 800ac4a:	f04f 0b00 	mov.w	fp, #0
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	e768      	b.n	800ab24 <_strtod_l+0x44c>
 800ac52:	bf00      	nop
 800ac54:	0800c5e1 	.word	0x0800c5e1
 800ac58:	0800c7f4 	.word	0x0800c7f4
 800ac5c:	0800c5d9 	.word	0x0800c5d9
 800ac60:	0800c610 	.word	0x0800c610
 800ac64:	0800c99d 	.word	0x0800c99d
 800ac68:	0800c728 	.word	0x0800c728
 800ac6c:	0800c700 	.word	0x0800c700
 800ac70:	7ff00000 	.word	0x7ff00000
 800ac74:	7ca00000 	.word	0x7ca00000
 800ac78:	7fefffff 	.word	0x7fefffff
 800ac7c:	f014 0310 	ands.w	r3, r4, #16
 800ac80:	bf18      	it	ne
 800ac82:	236a      	movne	r3, #106	@ 0x6a
 800ac84:	4ea9      	ldr	r6, [pc, #676]	@ (800af2c <_strtod_l+0x854>)
 800ac86:	9308      	str	r3, [sp, #32]
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4659      	mov	r1, fp
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	07e2      	lsls	r2, r4, #31
 800ac90:	d504      	bpl.n	800ac9c <_strtod_l+0x5c4>
 800ac92:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac96:	f7f5 fcb7 	bl	8000608 <__aeabi_dmul>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	1064      	asrs	r4, r4, #1
 800ac9e:	f106 0608 	add.w	r6, r6, #8
 800aca2:	d1f4      	bne.n	800ac8e <_strtod_l+0x5b6>
 800aca4:	b10b      	cbz	r3, 800acaa <_strtod_l+0x5d2>
 800aca6:	4682      	mov	sl, r0
 800aca8:	468b      	mov	fp, r1
 800acaa:	9b08      	ldr	r3, [sp, #32]
 800acac:	b1b3      	cbz	r3, 800acdc <_strtod_l+0x604>
 800acae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800acb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	4659      	mov	r1, fp
 800acba:	dd0f      	ble.n	800acdc <_strtod_l+0x604>
 800acbc:	2b1f      	cmp	r3, #31
 800acbe:	dd55      	ble.n	800ad6c <_strtod_l+0x694>
 800acc0:	2b34      	cmp	r3, #52	@ 0x34
 800acc2:	bfde      	ittt	le
 800acc4:	f04f 33ff 	movle.w	r3, #4294967295
 800acc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800accc:	4093      	lslle	r3, r2
 800acce:	f04f 0a00 	mov.w	sl, #0
 800acd2:	bfcc      	ite	gt
 800acd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800acd8:	ea03 0b01 	andle.w	fp, r3, r1
 800acdc:	2200      	movs	r2, #0
 800acde:	2300      	movs	r3, #0
 800ace0:	4650      	mov	r0, sl
 800ace2:	4659      	mov	r1, fp
 800ace4:	f7f5 fef8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d1a6      	bne.n	800ac3a <_strtod_l+0x562>
 800acec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800acf2:	9805      	ldr	r0, [sp, #20]
 800acf4:	462b      	mov	r3, r5
 800acf6:	463a      	mov	r2, r7
 800acf8:	f7ff f8c6 	bl	8009e88 <__s2b>
 800acfc:	900a      	str	r0, [sp, #40]	@ 0x28
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f43f af05 	beq.w	800ab0e <_strtod_l+0x436>
 800ad04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad06:	2a00      	cmp	r2, #0
 800ad08:	eba9 0308 	sub.w	r3, r9, r8
 800ad0c:	bfa8      	it	ge
 800ad0e:	2300      	movge	r3, #0
 800ad10:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad12:	2400      	movs	r4, #0
 800ad14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ad18:	9316      	str	r3, [sp, #88]	@ 0x58
 800ad1a:	46a0      	mov	r8, r4
 800ad1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad1e:	9805      	ldr	r0, [sp, #20]
 800ad20:	6859      	ldr	r1, [r3, #4]
 800ad22:	f7ff f809 	bl	8009d38 <_Balloc>
 800ad26:	4681      	mov	r9, r0
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	f43f aef4 	beq.w	800ab16 <_strtod_l+0x43e>
 800ad2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	3202      	adds	r2, #2
 800ad34:	f103 010c 	add.w	r1, r3, #12
 800ad38:	0092      	lsls	r2, r2, #2
 800ad3a:	300c      	adds	r0, #12
 800ad3c:	f000 fd72 	bl	800b824 <memcpy>
 800ad40:	ec4b ab10 	vmov	d0, sl, fp
 800ad44:	9805      	ldr	r0, [sp, #20]
 800ad46:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad48:	a91b      	add	r1, sp, #108	@ 0x6c
 800ad4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ad4e:	f7ff fbd7 	bl	800a500 <__d2b>
 800ad52:	901a      	str	r0, [sp, #104]	@ 0x68
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f43f aede 	beq.w	800ab16 <_strtod_l+0x43e>
 800ad5a:	9805      	ldr	r0, [sp, #20]
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	f7ff f929 	bl	8009fb4 <__i2b>
 800ad62:	4680      	mov	r8, r0
 800ad64:	b948      	cbnz	r0, 800ad7a <_strtod_l+0x6a2>
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	e6d4      	b.n	800ab16 <_strtod_l+0x43e>
 800ad6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad70:	fa02 f303 	lsl.w	r3, r2, r3
 800ad74:	ea03 0a0a 	and.w	sl, r3, sl
 800ad78:	e7b0      	b.n	800acdc <_strtod_l+0x604>
 800ad7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ad7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ad7e:	2d00      	cmp	r5, #0
 800ad80:	bfab      	itete	ge
 800ad82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad8a:	bfac      	ite	ge
 800ad8c:	18ef      	addge	r7, r5, r3
 800ad8e:	1b5e      	sublt	r6, r3, r5
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	1aed      	subs	r5, r5, r3
 800ad94:	4415      	add	r5, r2
 800ad96:	4b66      	ldr	r3, [pc, #408]	@ (800af30 <_strtod_l+0x858>)
 800ad98:	3d01      	subs	r5, #1
 800ad9a:	429d      	cmp	r5, r3
 800ad9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ada0:	da50      	bge.n	800ae44 <_strtod_l+0x76c>
 800ada2:	1b5b      	subs	r3, r3, r5
 800ada4:	2b1f      	cmp	r3, #31
 800ada6:	eba2 0203 	sub.w	r2, r2, r3
 800adaa:	f04f 0101 	mov.w	r1, #1
 800adae:	dc3d      	bgt.n	800ae2c <_strtod_l+0x754>
 800adb0:	fa01 f303 	lsl.w	r3, r1, r3
 800adb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adb6:	2300      	movs	r3, #0
 800adb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800adba:	18bd      	adds	r5, r7, r2
 800adbc:	9b08      	ldr	r3, [sp, #32]
 800adbe:	42af      	cmp	r7, r5
 800adc0:	4416      	add	r6, r2
 800adc2:	441e      	add	r6, r3
 800adc4:	463b      	mov	r3, r7
 800adc6:	bfa8      	it	ge
 800adc8:	462b      	movge	r3, r5
 800adca:	42b3      	cmp	r3, r6
 800adcc:	bfa8      	it	ge
 800adce:	4633      	movge	r3, r6
 800add0:	2b00      	cmp	r3, #0
 800add2:	bfc2      	ittt	gt
 800add4:	1aed      	subgt	r5, r5, r3
 800add6:	1af6      	subgt	r6, r6, r3
 800add8:	1aff      	subgt	r7, r7, r3
 800adda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800addc:	2b00      	cmp	r3, #0
 800adde:	dd16      	ble.n	800ae0e <_strtod_l+0x736>
 800ade0:	4641      	mov	r1, r8
 800ade2:	9805      	ldr	r0, [sp, #20]
 800ade4:	461a      	mov	r2, r3
 800ade6:	f7ff f9a5 	bl	800a134 <__pow5mult>
 800adea:	4680      	mov	r8, r0
 800adec:	2800      	cmp	r0, #0
 800adee:	d0ba      	beq.n	800ad66 <_strtod_l+0x68e>
 800adf0:	4601      	mov	r1, r0
 800adf2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800adf4:	9805      	ldr	r0, [sp, #20]
 800adf6:	f7ff f8f3 	bl	8009fe0 <__multiply>
 800adfa:	900e      	str	r0, [sp, #56]	@ 0x38
 800adfc:	2800      	cmp	r0, #0
 800adfe:	f43f ae8a 	beq.w	800ab16 <_strtod_l+0x43e>
 800ae02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae04:	9805      	ldr	r0, [sp, #20]
 800ae06:	f7fe ffd7 	bl	8009db8 <_Bfree>
 800ae0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae0e:	2d00      	cmp	r5, #0
 800ae10:	dc1d      	bgt.n	800ae4e <_strtod_l+0x776>
 800ae12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dd23      	ble.n	800ae60 <_strtod_l+0x788>
 800ae18:	4649      	mov	r1, r9
 800ae1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ae1c:	9805      	ldr	r0, [sp, #20]
 800ae1e:	f7ff f989 	bl	800a134 <__pow5mult>
 800ae22:	4681      	mov	r9, r0
 800ae24:	b9e0      	cbnz	r0, 800ae60 <_strtod_l+0x788>
 800ae26:	f04f 0900 	mov.w	r9, #0
 800ae2a:	e674      	b.n	800ab16 <_strtod_l+0x43e>
 800ae2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ae30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ae34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ae38:	35e2      	adds	r5, #226	@ 0xe2
 800ae3a:	fa01 f305 	lsl.w	r3, r1, r5
 800ae3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae40:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ae42:	e7ba      	b.n	800adba <_strtod_l+0x6e2>
 800ae44:	2300      	movs	r3, #0
 800ae46:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae48:	2301      	movs	r3, #1
 800ae4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae4c:	e7b5      	b.n	800adba <_strtod_l+0x6e2>
 800ae4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae50:	9805      	ldr	r0, [sp, #20]
 800ae52:	462a      	mov	r2, r5
 800ae54:	f7ff f9c8 	bl	800a1e8 <__lshift>
 800ae58:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d1d9      	bne.n	800ae12 <_strtod_l+0x73a>
 800ae5e:	e65a      	b.n	800ab16 <_strtod_l+0x43e>
 800ae60:	2e00      	cmp	r6, #0
 800ae62:	dd07      	ble.n	800ae74 <_strtod_l+0x79c>
 800ae64:	4649      	mov	r1, r9
 800ae66:	9805      	ldr	r0, [sp, #20]
 800ae68:	4632      	mov	r2, r6
 800ae6a:	f7ff f9bd 	bl	800a1e8 <__lshift>
 800ae6e:	4681      	mov	r9, r0
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d0d8      	beq.n	800ae26 <_strtod_l+0x74e>
 800ae74:	2f00      	cmp	r7, #0
 800ae76:	dd08      	ble.n	800ae8a <_strtod_l+0x7b2>
 800ae78:	4641      	mov	r1, r8
 800ae7a:	9805      	ldr	r0, [sp, #20]
 800ae7c:	463a      	mov	r2, r7
 800ae7e:	f7ff f9b3 	bl	800a1e8 <__lshift>
 800ae82:	4680      	mov	r8, r0
 800ae84:	2800      	cmp	r0, #0
 800ae86:	f43f ae46 	beq.w	800ab16 <_strtod_l+0x43e>
 800ae8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae8c:	9805      	ldr	r0, [sp, #20]
 800ae8e:	464a      	mov	r2, r9
 800ae90:	f7ff fa32 	bl	800a2f8 <__mdiff>
 800ae94:	4604      	mov	r4, r0
 800ae96:	2800      	cmp	r0, #0
 800ae98:	f43f ae3d 	beq.w	800ab16 <_strtod_l+0x43e>
 800ae9c:	68c3      	ldr	r3, [r0, #12]
 800ae9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aea0:	2300      	movs	r3, #0
 800aea2:	60c3      	str	r3, [r0, #12]
 800aea4:	4641      	mov	r1, r8
 800aea6:	f7ff fa0b 	bl	800a2c0 <__mcmp>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	da46      	bge.n	800af3c <_strtod_l+0x864>
 800aeae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeb0:	ea53 030a 	orrs.w	r3, r3, sl
 800aeb4:	d16c      	bne.n	800af90 <_strtod_l+0x8b8>
 800aeb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d168      	bne.n	800af90 <_strtod_l+0x8b8>
 800aebe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aec2:	0d1b      	lsrs	r3, r3, #20
 800aec4:	051b      	lsls	r3, r3, #20
 800aec6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aeca:	d961      	bls.n	800af90 <_strtod_l+0x8b8>
 800aecc:	6963      	ldr	r3, [r4, #20]
 800aece:	b913      	cbnz	r3, 800aed6 <_strtod_l+0x7fe>
 800aed0:	6923      	ldr	r3, [r4, #16]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	dd5c      	ble.n	800af90 <_strtod_l+0x8b8>
 800aed6:	4621      	mov	r1, r4
 800aed8:	2201      	movs	r2, #1
 800aeda:	9805      	ldr	r0, [sp, #20]
 800aedc:	f7ff f984 	bl	800a1e8 <__lshift>
 800aee0:	4641      	mov	r1, r8
 800aee2:	4604      	mov	r4, r0
 800aee4:	f7ff f9ec 	bl	800a2c0 <__mcmp>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	dd51      	ble.n	800af90 <_strtod_l+0x8b8>
 800aeec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aef0:	9a08      	ldr	r2, [sp, #32]
 800aef2:	0d1b      	lsrs	r3, r3, #20
 800aef4:	051b      	lsls	r3, r3, #20
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	d06b      	beq.n	800afd2 <_strtod_l+0x8fa>
 800aefa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aefe:	d868      	bhi.n	800afd2 <_strtod_l+0x8fa>
 800af00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800af04:	f67f ae9d 	bls.w	800ac42 <_strtod_l+0x56a>
 800af08:	4b0a      	ldr	r3, [pc, #40]	@ (800af34 <_strtod_l+0x85c>)
 800af0a:	4650      	mov	r0, sl
 800af0c:	4659      	mov	r1, fp
 800af0e:	2200      	movs	r2, #0
 800af10:	f7f5 fb7a 	bl	8000608 <__aeabi_dmul>
 800af14:	4b08      	ldr	r3, [pc, #32]	@ (800af38 <_strtod_l+0x860>)
 800af16:	400b      	ands	r3, r1
 800af18:	4682      	mov	sl, r0
 800af1a:	468b      	mov	fp, r1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f47f ae05 	bne.w	800ab2c <_strtod_l+0x454>
 800af22:	9a05      	ldr	r2, [sp, #20]
 800af24:	2322      	movs	r3, #34	@ 0x22
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	e600      	b.n	800ab2c <_strtod_l+0x454>
 800af2a:	bf00      	nop
 800af2c:	0800c820 	.word	0x0800c820
 800af30:	fffffc02 	.word	0xfffffc02
 800af34:	39500000 	.word	0x39500000
 800af38:	7ff00000 	.word	0x7ff00000
 800af3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800af40:	d165      	bne.n	800b00e <_strtod_l+0x936>
 800af42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af48:	b35a      	cbz	r2, 800afa2 <_strtod_l+0x8ca>
 800af4a:	4a9f      	ldr	r2, [pc, #636]	@ (800b1c8 <_strtod_l+0xaf0>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d12b      	bne.n	800afa8 <_strtod_l+0x8d0>
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	4651      	mov	r1, sl
 800af54:	b303      	cbz	r3, 800af98 <_strtod_l+0x8c0>
 800af56:	4b9d      	ldr	r3, [pc, #628]	@ (800b1cc <_strtod_l+0xaf4>)
 800af58:	465a      	mov	r2, fp
 800af5a:	4013      	ands	r3, r2
 800af5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af60:	f04f 32ff 	mov.w	r2, #4294967295
 800af64:	d81b      	bhi.n	800af9e <_strtod_l+0x8c6>
 800af66:	0d1b      	lsrs	r3, r3, #20
 800af68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af6c:	fa02 f303 	lsl.w	r3, r2, r3
 800af70:	4299      	cmp	r1, r3
 800af72:	d119      	bne.n	800afa8 <_strtod_l+0x8d0>
 800af74:	4b96      	ldr	r3, [pc, #600]	@ (800b1d0 <_strtod_l+0xaf8>)
 800af76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af78:	429a      	cmp	r2, r3
 800af7a:	d102      	bne.n	800af82 <_strtod_l+0x8aa>
 800af7c:	3101      	adds	r1, #1
 800af7e:	f43f adca 	beq.w	800ab16 <_strtod_l+0x43e>
 800af82:	4b92      	ldr	r3, [pc, #584]	@ (800b1cc <_strtod_l+0xaf4>)
 800af84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af86:	401a      	ands	r2, r3
 800af88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af8c:	f04f 0a00 	mov.w	sl, #0
 800af90:	9b08      	ldr	r3, [sp, #32]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1b8      	bne.n	800af08 <_strtod_l+0x830>
 800af96:	e5c9      	b.n	800ab2c <_strtod_l+0x454>
 800af98:	f04f 33ff 	mov.w	r3, #4294967295
 800af9c:	e7e8      	b.n	800af70 <_strtod_l+0x898>
 800af9e:	4613      	mov	r3, r2
 800afa0:	e7e6      	b.n	800af70 <_strtod_l+0x898>
 800afa2:	ea53 030a 	orrs.w	r3, r3, sl
 800afa6:	d0a1      	beq.n	800aeec <_strtod_l+0x814>
 800afa8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afaa:	b1db      	cbz	r3, 800afe4 <_strtod_l+0x90c>
 800afac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afae:	4213      	tst	r3, r2
 800afb0:	d0ee      	beq.n	800af90 <_strtod_l+0x8b8>
 800afb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afb4:	9a08      	ldr	r2, [sp, #32]
 800afb6:	4650      	mov	r0, sl
 800afb8:	4659      	mov	r1, fp
 800afba:	b1bb      	cbz	r3, 800afec <_strtod_l+0x914>
 800afbc:	f7ff fb6e 	bl	800a69c <sulp>
 800afc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afc4:	ec53 2b10 	vmov	r2, r3, d0
 800afc8:	f7f5 f968 	bl	800029c <__adddf3>
 800afcc:	4682      	mov	sl, r0
 800afce:	468b      	mov	fp, r1
 800afd0:	e7de      	b.n	800af90 <_strtod_l+0x8b8>
 800afd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800afd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800afda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800afde:	f04f 3aff 	mov.w	sl, #4294967295
 800afe2:	e7d5      	b.n	800af90 <_strtod_l+0x8b8>
 800afe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afe6:	ea13 0f0a 	tst.w	r3, sl
 800afea:	e7e1      	b.n	800afb0 <_strtod_l+0x8d8>
 800afec:	f7ff fb56 	bl	800a69c <sulp>
 800aff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aff4:	ec53 2b10 	vmov	r2, r3, d0
 800aff8:	f7f5 f94e 	bl	8000298 <__aeabi_dsub>
 800affc:	2200      	movs	r2, #0
 800affe:	2300      	movs	r3, #0
 800b000:	4682      	mov	sl, r0
 800b002:	468b      	mov	fp, r1
 800b004:	f7f5 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0c1      	beq.n	800af90 <_strtod_l+0x8b8>
 800b00c:	e619      	b.n	800ac42 <_strtod_l+0x56a>
 800b00e:	4641      	mov	r1, r8
 800b010:	4620      	mov	r0, r4
 800b012:	f7ff facd 	bl	800a5b0 <__ratio>
 800b016:	ec57 6b10 	vmov	r6, r7, d0
 800b01a:	2200      	movs	r2, #0
 800b01c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b020:	4630      	mov	r0, r6
 800b022:	4639      	mov	r1, r7
 800b024:	f7f5 fd6c 	bl	8000b00 <__aeabi_dcmple>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d06f      	beq.n	800b10c <_strtod_l+0xa34>
 800b02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d17a      	bne.n	800b128 <_strtod_l+0xa50>
 800b032:	f1ba 0f00 	cmp.w	sl, #0
 800b036:	d158      	bne.n	800b0ea <_strtod_l+0xa12>
 800b038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b03a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d15a      	bne.n	800b0f8 <_strtod_l+0xa20>
 800b042:	4b64      	ldr	r3, [pc, #400]	@ (800b1d4 <_strtod_l+0xafc>)
 800b044:	2200      	movs	r2, #0
 800b046:	4630      	mov	r0, r6
 800b048:	4639      	mov	r1, r7
 800b04a:	f7f5 fd4f 	bl	8000aec <__aeabi_dcmplt>
 800b04e:	2800      	cmp	r0, #0
 800b050:	d159      	bne.n	800b106 <_strtod_l+0xa2e>
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	4b60      	ldr	r3, [pc, #384]	@ (800b1d8 <_strtod_l+0xb00>)
 800b058:	2200      	movs	r2, #0
 800b05a:	f7f5 fad5 	bl	8000608 <__aeabi_dmul>
 800b05e:	4606      	mov	r6, r0
 800b060:	460f      	mov	r7, r1
 800b062:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b066:	9606      	str	r6, [sp, #24]
 800b068:	9307      	str	r3, [sp, #28]
 800b06a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b06e:	4d57      	ldr	r5, [pc, #348]	@ (800b1cc <_strtod_l+0xaf4>)
 800b070:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b076:	401d      	ands	r5, r3
 800b078:	4b58      	ldr	r3, [pc, #352]	@ (800b1dc <_strtod_l+0xb04>)
 800b07a:	429d      	cmp	r5, r3
 800b07c:	f040 80b2 	bne.w	800b1e4 <_strtod_l+0xb0c>
 800b080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b082:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b086:	ec4b ab10 	vmov	d0, sl, fp
 800b08a:	f7ff f9c9 	bl	800a420 <__ulp>
 800b08e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b092:	ec51 0b10 	vmov	r0, r1, d0
 800b096:	f7f5 fab7 	bl	8000608 <__aeabi_dmul>
 800b09a:	4652      	mov	r2, sl
 800b09c:	465b      	mov	r3, fp
 800b09e:	f7f5 f8fd 	bl	800029c <__adddf3>
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4949      	ldr	r1, [pc, #292]	@ (800b1cc <_strtod_l+0xaf4>)
 800b0a6:	4a4e      	ldr	r2, [pc, #312]	@ (800b1e0 <_strtod_l+0xb08>)
 800b0a8:	4019      	ands	r1, r3
 800b0aa:	4291      	cmp	r1, r2
 800b0ac:	4682      	mov	sl, r0
 800b0ae:	d942      	bls.n	800b136 <_strtod_l+0xa5e>
 800b0b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0b2:	4b47      	ldr	r3, [pc, #284]	@ (800b1d0 <_strtod_l+0xaf8>)
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d103      	bne.n	800b0c0 <_strtod_l+0x9e8>
 800b0b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	f43f ad2b 	beq.w	800ab16 <_strtod_l+0x43e>
 800b0c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b1d0 <_strtod_l+0xaf8>
 800b0c4:	f04f 3aff 	mov.w	sl, #4294967295
 800b0c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0ca:	9805      	ldr	r0, [sp, #20]
 800b0cc:	f7fe fe74 	bl	8009db8 <_Bfree>
 800b0d0:	9805      	ldr	r0, [sp, #20]
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	f7fe fe70 	bl	8009db8 <_Bfree>
 800b0d8:	9805      	ldr	r0, [sp, #20]
 800b0da:	4641      	mov	r1, r8
 800b0dc:	f7fe fe6c 	bl	8009db8 <_Bfree>
 800b0e0:	9805      	ldr	r0, [sp, #20]
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	f7fe fe68 	bl	8009db8 <_Bfree>
 800b0e8:	e618      	b.n	800ad1c <_strtod_l+0x644>
 800b0ea:	f1ba 0f01 	cmp.w	sl, #1
 800b0ee:	d103      	bne.n	800b0f8 <_strtod_l+0xa20>
 800b0f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f43f ada5 	beq.w	800ac42 <_strtod_l+0x56a>
 800b0f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b1a8 <_strtod_l+0xad0>
 800b0fc:	4f35      	ldr	r7, [pc, #212]	@ (800b1d4 <_strtod_l+0xafc>)
 800b0fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b102:	2600      	movs	r6, #0
 800b104:	e7b1      	b.n	800b06a <_strtod_l+0x992>
 800b106:	4f34      	ldr	r7, [pc, #208]	@ (800b1d8 <_strtod_l+0xb00>)
 800b108:	2600      	movs	r6, #0
 800b10a:	e7aa      	b.n	800b062 <_strtod_l+0x98a>
 800b10c:	4b32      	ldr	r3, [pc, #200]	@ (800b1d8 <_strtod_l+0xb00>)
 800b10e:	4630      	mov	r0, r6
 800b110:	4639      	mov	r1, r7
 800b112:	2200      	movs	r2, #0
 800b114:	f7f5 fa78 	bl	8000608 <__aeabi_dmul>
 800b118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d09f      	beq.n	800b062 <_strtod_l+0x98a>
 800b122:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b126:	e7a0      	b.n	800b06a <_strtod_l+0x992>
 800b128:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b1b0 <_strtod_l+0xad8>
 800b12c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b130:	ec57 6b17 	vmov	r6, r7, d7
 800b134:	e799      	b.n	800b06a <_strtod_l+0x992>
 800b136:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b13a:	9b08      	ldr	r3, [sp, #32]
 800b13c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1c1      	bne.n	800b0c8 <_strtod_l+0x9f0>
 800b144:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b148:	0d1b      	lsrs	r3, r3, #20
 800b14a:	051b      	lsls	r3, r3, #20
 800b14c:	429d      	cmp	r5, r3
 800b14e:	d1bb      	bne.n	800b0c8 <_strtod_l+0x9f0>
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 fdb8 	bl	8000cc8 <__aeabi_d2lz>
 800b158:	f7f5 fa28 	bl	80005ac <__aeabi_l2d>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 f898 	bl	8000298 <__aeabi_dsub>
 800b168:	460b      	mov	r3, r1
 800b16a:	4602      	mov	r2, r0
 800b16c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b170:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b176:	ea46 060a 	orr.w	r6, r6, sl
 800b17a:	431e      	orrs	r6, r3
 800b17c:	d06f      	beq.n	800b25e <_strtod_l+0xb86>
 800b17e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b1b8 <_strtod_l+0xae0>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f7f5 fcb2 	bl	8000aec <__aeabi_dcmplt>
 800b188:	2800      	cmp	r0, #0
 800b18a:	f47f accf 	bne.w	800ab2c <_strtod_l+0x454>
 800b18e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b1c0 <_strtod_l+0xae8>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b198:	f7f5 fcc6 	bl	8000b28 <__aeabi_dcmpgt>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d093      	beq.n	800b0c8 <_strtod_l+0x9f0>
 800b1a0:	e4c4      	b.n	800ab2c <_strtod_l+0x454>
 800b1a2:	bf00      	nop
 800b1a4:	f3af 8000 	nop.w
 800b1a8:	00000000 	.word	0x00000000
 800b1ac:	bff00000 	.word	0xbff00000
 800b1b0:	00000000 	.word	0x00000000
 800b1b4:	3ff00000 	.word	0x3ff00000
 800b1b8:	94a03595 	.word	0x94a03595
 800b1bc:	3fdfffff 	.word	0x3fdfffff
 800b1c0:	35afe535 	.word	0x35afe535
 800b1c4:	3fe00000 	.word	0x3fe00000
 800b1c8:	000fffff 	.word	0x000fffff
 800b1cc:	7ff00000 	.word	0x7ff00000
 800b1d0:	7fefffff 	.word	0x7fefffff
 800b1d4:	3ff00000 	.word	0x3ff00000
 800b1d8:	3fe00000 	.word	0x3fe00000
 800b1dc:	7fe00000 	.word	0x7fe00000
 800b1e0:	7c9fffff 	.word	0x7c9fffff
 800b1e4:	9b08      	ldr	r3, [sp, #32]
 800b1e6:	b323      	cbz	r3, 800b232 <_strtod_l+0xb5a>
 800b1e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b1ec:	d821      	bhi.n	800b232 <_strtod_l+0xb5a>
 800b1ee:	a328      	add	r3, pc, #160	@ (adr r3, 800b290 <_strtod_l+0xbb8>)
 800b1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	f7f5 fc82 	bl	8000b00 <__aeabi_dcmple>
 800b1fc:	b1a0      	cbz	r0, 800b228 <_strtod_l+0xb50>
 800b1fe:	4639      	mov	r1, r7
 800b200:	4630      	mov	r0, r6
 800b202:	f7f5 fcd9 	bl	8000bb8 <__aeabi_d2uiz>
 800b206:	2801      	cmp	r0, #1
 800b208:	bf38      	it	cc
 800b20a:	2001      	movcc	r0, #1
 800b20c:	f7f5 f982 	bl	8000514 <__aeabi_ui2d>
 800b210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b212:	4606      	mov	r6, r0
 800b214:	460f      	mov	r7, r1
 800b216:	b9fb      	cbnz	r3, 800b258 <_strtod_l+0xb80>
 800b218:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b21c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b21e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b220:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b224:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b228:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b22a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b22e:	1b5b      	subs	r3, r3, r5
 800b230:	9311      	str	r3, [sp, #68]	@ 0x44
 800b232:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b236:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b23a:	f7ff f8f1 	bl	800a420 <__ulp>
 800b23e:	4650      	mov	r0, sl
 800b240:	ec53 2b10 	vmov	r2, r3, d0
 800b244:	4659      	mov	r1, fp
 800b246:	f7f5 f9df 	bl	8000608 <__aeabi_dmul>
 800b24a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b24e:	f7f5 f825 	bl	800029c <__adddf3>
 800b252:	4682      	mov	sl, r0
 800b254:	468b      	mov	fp, r1
 800b256:	e770      	b.n	800b13a <_strtod_l+0xa62>
 800b258:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b25c:	e7e0      	b.n	800b220 <_strtod_l+0xb48>
 800b25e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b298 <_strtod_l+0xbc0>)
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f7f5 fc42 	bl	8000aec <__aeabi_dcmplt>
 800b268:	e798      	b.n	800b19c <_strtod_l+0xac4>
 800b26a:	2300      	movs	r3, #0
 800b26c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b26e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b272:	6013      	str	r3, [r2, #0]
 800b274:	f7ff ba6d 	b.w	800a752 <_strtod_l+0x7a>
 800b278:	2a65      	cmp	r2, #101	@ 0x65
 800b27a:	f43f ab66 	beq.w	800a94a <_strtod_l+0x272>
 800b27e:	2a45      	cmp	r2, #69	@ 0x45
 800b280:	f43f ab63 	beq.w	800a94a <_strtod_l+0x272>
 800b284:	2301      	movs	r3, #1
 800b286:	f7ff bb9e 	b.w	800a9c6 <_strtod_l+0x2ee>
 800b28a:	bf00      	nop
 800b28c:	f3af 8000 	nop.w
 800b290:	ffc00000 	.word	0xffc00000
 800b294:	41dfffff 	.word	0x41dfffff
 800b298:	94a03595 	.word	0x94a03595
 800b29c:	3fcfffff 	.word	0x3fcfffff

0800b2a0 <_strtod_r>:
 800b2a0:	4b01      	ldr	r3, [pc, #4]	@ (800b2a8 <_strtod_r+0x8>)
 800b2a2:	f7ff ba19 	b.w	800a6d8 <_strtod_l>
 800b2a6:	bf00      	nop
 800b2a8:	20000084 	.word	0x20000084

0800b2ac <_strtol_l.constprop.0>:
 800b2ac:	2b24      	cmp	r3, #36	@ 0x24
 800b2ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b2:	4686      	mov	lr, r0
 800b2b4:	4690      	mov	r8, r2
 800b2b6:	d801      	bhi.n	800b2bc <_strtol_l.constprop.0+0x10>
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d106      	bne.n	800b2ca <_strtol_l.constprop.0+0x1e>
 800b2bc:	f7fd fdba 	bl	8008e34 <__errno>
 800b2c0:	2316      	movs	r3, #22
 800b2c2:	6003      	str	r3, [r0, #0]
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ca:	4834      	ldr	r0, [pc, #208]	@ (800b39c <_strtol_l.constprop.0+0xf0>)
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	462a      	mov	r2, r5
 800b2d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2d4:	5d06      	ldrb	r6, [r0, r4]
 800b2d6:	f016 0608 	ands.w	r6, r6, #8
 800b2da:	d1f8      	bne.n	800b2ce <_strtol_l.constprop.0+0x22>
 800b2dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2de:	d12d      	bne.n	800b33c <_strtol_l.constprop.0+0x90>
 800b2e0:	782c      	ldrb	r4, [r5, #0]
 800b2e2:	2601      	movs	r6, #1
 800b2e4:	1c95      	adds	r5, r2, #2
 800b2e6:	f033 0210 	bics.w	r2, r3, #16
 800b2ea:	d109      	bne.n	800b300 <_strtol_l.constprop.0+0x54>
 800b2ec:	2c30      	cmp	r4, #48	@ 0x30
 800b2ee:	d12a      	bne.n	800b346 <_strtol_l.constprop.0+0x9a>
 800b2f0:	782a      	ldrb	r2, [r5, #0]
 800b2f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2f6:	2a58      	cmp	r2, #88	@ 0x58
 800b2f8:	d125      	bne.n	800b346 <_strtol_l.constprop.0+0x9a>
 800b2fa:	786c      	ldrb	r4, [r5, #1]
 800b2fc:	2310      	movs	r3, #16
 800b2fe:	3502      	adds	r5, #2
 800b300:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b304:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b308:	2200      	movs	r2, #0
 800b30a:	fbbc f9f3 	udiv	r9, ip, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	fb03 ca19 	mls	sl, r3, r9, ip
 800b314:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b318:	2f09      	cmp	r7, #9
 800b31a:	d81b      	bhi.n	800b354 <_strtol_l.constprop.0+0xa8>
 800b31c:	463c      	mov	r4, r7
 800b31e:	42a3      	cmp	r3, r4
 800b320:	dd27      	ble.n	800b372 <_strtol_l.constprop.0+0xc6>
 800b322:	1c57      	adds	r7, r2, #1
 800b324:	d007      	beq.n	800b336 <_strtol_l.constprop.0+0x8a>
 800b326:	4581      	cmp	r9, r0
 800b328:	d320      	bcc.n	800b36c <_strtol_l.constprop.0+0xc0>
 800b32a:	d101      	bne.n	800b330 <_strtol_l.constprop.0+0x84>
 800b32c:	45a2      	cmp	sl, r4
 800b32e:	db1d      	blt.n	800b36c <_strtol_l.constprop.0+0xc0>
 800b330:	fb00 4003 	mla	r0, r0, r3, r4
 800b334:	2201      	movs	r2, #1
 800b336:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b33a:	e7eb      	b.n	800b314 <_strtol_l.constprop.0+0x68>
 800b33c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b33e:	bf04      	itt	eq
 800b340:	782c      	ldrbeq	r4, [r5, #0]
 800b342:	1c95      	addeq	r5, r2, #2
 800b344:	e7cf      	b.n	800b2e6 <_strtol_l.constprop.0+0x3a>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1da      	bne.n	800b300 <_strtol_l.constprop.0+0x54>
 800b34a:	2c30      	cmp	r4, #48	@ 0x30
 800b34c:	bf0c      	ite	eq
 800b34e:	2308      	moveq	r3, #8
 800b350:	230a      	movne	r3, #10
 800b352:	e7d5      	b.n	800b300 <_strtol_l.constprop.0+0x54>
 800b354:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b358:	2f19      	cmp	r7, #25
 800b35a:	d801      	bhi.n	800b360 <_strtol_l.constprop.0+0xb4>
 800b35c:	3c37      	subs	r4, #55	@ 0x37
 800b35e:	e7de      	b.n	800b31e <_strtol_l.constprop.0+0x72>
 800b360:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b364:	2f19      	cmp	r7, #25
 800b366:	d804      	bhi.n	800b372 <_strtol_l.constprop.0+0xc6>
 800b368:	3c57      	subs	r4, #87	@ 0x57
 800b36a:	e7d8      	b.n	800b31e <_strtol_l.constprop.0+0x72>
 800b36c:	f04f 32ff 	mov.w	r2, #4294967295
 800b370:	e7e1      	b.n	800b336 <_strtol_l.constprop.0+0x8a>
 800b372:	1c53      	adds	r3, r2, #1
 800b374:	d108      	bne.n	800b388 <_strtol_l.constprop.0+0xdc>
 800b376:	2322      	movs	r3, #34	@ 0x22
 800b378:	f8ce 3000 	str.w	r3, [lr]
 800b37c:	4660      	mov	r0, ip
 800b37e:	f1b8 0f00 	cmp.w	r8, #0
 800b382:	d0a0      	beq.n	800b2c6 <_strtol_l.constprop.0+0x1a>
 800b384:	1e69      	subs	r1, r5, #1
 800b386:	e006      	b.n	800b396 <_strtol_l.constprop.0+0xea>
 800b388:	b106      	cbz	r6, 800b38c <_strtol_l.constprop.0+0xe0>
 800b38a:	4240      	negs	r0, r0
 800b38c:	f1b8 0f00 	cmp.w	r8, #0
 800b390:	d099      	beq.n	800b2c6 <_strtol_l.constprop.0+0x1a>
 800b392:	2a00      	cmp	r2, #0
 800b394:	d1f6      	bne.n	800b384 <_strtol_l.constprop.0+0xd8>
 800b396:	f8c8 1000 	str.w	r1, [r8]
 800b39a:	e794      	b.n	800b2c6 <_strtol_l.constprop.0+0x1a>
 800b39c:	0800c849 	.word	0x0800c849

0800b3a0 <_strtol_r>:
 800b3a0:	f7ff bf84 	b.w	800b2ac <_strtol_l.constprop.0>

0800b3a4 <__ssputs_r>:
 800b3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a8:	688e      	ldr	r6, [r1, #8]
 800b3aa:	461f      	mov	r7, r3
 800b3ac:	42be      	cmp	r6, r7
 800b3ae:	680b      	ldr	r3, [r1, #0]
 800b3b0:	4682      	mov	sl, r0
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	4690      	mov	r8, r2
 800b3b6:	d82d      	bhi.n	800b414 <__ssputs_r+0x70>
 800b3b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b3c0:	d026      	beq.n	800b410 <__ssputs_r+0x6c>
 800b3c2:	6965      	ldr	r5, [r4, #20]
 800b3c4:	6909      	ldr	r1, [r1, #16]
 800b3c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3ca:	eba3 0901 	sub.w	r9, r3, r1
 800b3ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3d2:	1c7b      	adds	r3, r7, #1
 800b3d4:	444b      	add	r3, r9
 800b3d6:	106d      	asrs	r5, r5, #1
 800b3d8:	429d      	cmp	r5, r3
 800b3da:	bf38      	it	cc
 800b3dc:	461d      	movcc	r5, r3
 800b3de:	0553      	lsls	r3, r2, #21
 800b3e0:	d527      	bpl.n	800b432 <__ssputs_r+0x8e>
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	f7fe fc1c 	bl	8009c20 <_malloc_r>
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	b360      	cbz	r0, 800b446 <__ssputs_r+0xa2>
 800b3ec:	6921      	ldr	r1, [r4, #16]
 800b3ee:	464a      	mov	r2, r9
 800b3f0:	f000 fa18 	bl	800b824 <memcpy>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3fe:	81a3      	strh	r3, [r4, #12]
 800b400:	6126      	str	r6, [r4, #16]
 800b402:	6165      	str	r5, [r4, #20]
 800b404:	444e      	add	r6, r9
 800b406:	eba5 0509 	sub.w	r5, r5, r9
 800b40a:	6026      	str	r6, [r4, #0]
 800b40c:	60a5      	str	r5, [r4, #8]
 800b40e:	463e      	mov	r6, r7
 800b410:	42be      	cmp	r6, r7
 800b412:	d900      	bls.n	800b416 <__ssputs_r+0x72>
 800b414:	463e      	mov	r6, r7
 800b416:	6820      	ldr	r0, [r4, #0]
 800b418:	4632      	mov	r2, r6
 800b41a:	4641      	mov	r1, r8
 800b41c:	f000 f9c6 	bl	800b7ac <memmove>
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	1b9b      	subs	r3, r3, r6
 800b424:	60a3      	str	r3, [r4, #8]
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	4433      	add	r3, r6
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	2000      	movs	r0, #0
 800b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b432:	462a      	mov	r2, r5
 800b434:	f000 fd89 	bl	800bf4a <_realloc_r>
 800b438:	4606      	mov	r6, r0
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d1e0      	bne.n	800b400 <__ssputs_r+0x5c>
 800b43e:	6921      	ldr	r1, [r4, #16]
 800b440:	4650      	mov	r0, sl
 800b442:	f7fe fb79 	bl	8009b38 <_free_r>
 800b446:	230c      	movs	r3, #12
 800b448:	f8ca 3000 	str.w	r3, [sl]
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	e7e9      	b.n	800b42e <__ssputs_r+0x8a>
	...

0800b45c <_svfiprintf_r>:
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	4698      	mov	r8, r3
 800b462:	898b      	ldrh	r3, [r1, #12]
 800b464:	061b      	lsls	r3, r3, #24
 800b466:	b09d      	sub	sp, #116	@ 0x74
 800b468:	4607      	mov	r7, r0
 800b46a:	460d      	mov	r5, r1
 800b46c:	4614      	mov	r4, r2
 800b46e:	d510      	bpl.n	800b492 <_svfiprintf_r+0x36>
 800b470:	690b      	ldr	r3, [r1, #16]
 800b472:	b973      	cbnz	r3, 800b492 <_svfiprintf_r+0x36>
 800b474:	2140      	movs	r1, #64	@ 0x40
 800b476:	f7fe fbd3 	bl	8009c20 <_malloc_r>
 800b47a:	6028      	str	r0, [r5, #0]
 800b47c:	6128      	str	r0, [r5, #16]
 800b47e:	b930      	cbnz	r0, 800b48e <_svfiprintf_r+0x32>
 800b480:	230c      	movs	r3, #12
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	f04f 30ff 	mov.w	r0, #4294967295
 800b488:	b01d      	add	sp, #116	@ 0x74
 800b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48e:	2340      	movs	r3, #64	@ 0x40
 800b490:	616b      	str	r3, [r5, #20]
 800b492:	2300      	movs	r3, #0
 800b494:	9309      	str	r3, [sp, #36]	@ 0x24
 800b496:	2320      	movs	r3, #32
 800b498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a0:	2330      	movs	r3, #48	@ 0x30
 800b4a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b640 <_svfiprintf_r+0x1e4>
 800b4a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4aa:	f04f 0901 	mov.w	r9, #1
 800b4ae:	4623      	mov	r3, r4
 800b4b0:	469a      	mov	sl, r3
 800b4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b6:	b10a      	cbz	r2, 800b4bc <_svfiprintf_r+0x60>
 800b4b8:	2a25      	cmp	r2, #37	@ 0x25
 800b4ba:	d1f9      	bne.n	800b4b0 <_svfiprintf_r+0x54>
 800b4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b4c0:	d00b      	beq.n	800b4da <_svfiprintf_r+0x7e>
 800b4c2:	465b      	mov	r3, fp
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f7ff ff6b 	bl	800b3a4 <__ssputs_r>
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f000 80a7 	beq.w	800b622 <_svfiprintf_r+0x1c6>
 800b4d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4d6:	445a      	add	r2, fp
 800b4d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4da:	f89a 3000 	ldrb.w	r3, [sl]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 809f 	beq.w	800b622 <_svfiprintf_r+0x1c6>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ee:	f10a 0a01 	add.w	sl, sl, #1
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	9307      	str	r3, [sp, #28]
 800b4f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4fc:	4654      	mov	r4, sl
 800b4fe:	2205      	movs	r2, #5
 800b500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b504:	484e      	ldr	r0, [pc, #312]	@ (800b640 <_svfiprintf_r+0x1e4>)
 800b506:	f7f4 fe6b 	bl	80001e0 <memchr>
 800b50a:	9a04      	ldr	r2, [sp, #16]
 800b50c:	b9d8      	cbnz	r0, 800b546 <_svfiprintf_r+0xea>
 800b50e:	06d0      	lsls	r0, r2, #27
 800b510:	bf44      	itt	mi
 800b512:	2320      	movmi	r3, #32
 800b514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b518:	0711      	lsls	r1, r2, #28
 800b51a:	bf44      	itt	mi
 800b51c:	232b      	movmi	r3, #43	@ 0x2b
 800b51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b522:	f89a 3000 	ldrb.w	r3, [sl]
 800b526:	2b2a      	cmp	r3, #42	@ 0x2a
 800b528:	d015      	beq.n	800b556 <_svfiprintf_r+0xfa>
 800b52a:	9a07      	ldr	r2, [sp, #28]
 800b52c:	4654      	mov	r4, sl
 800b52e:	2000      	movs	r0, #0
 800b530:	f04f 0c0a 	mov.w	ip, #10
 800b534:	4621      	mov	r1, r4
 800b536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b53a:	3b30      	subs	r3, #48	@ 0x30
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	d94b      	bls.n	800b5d8 <_svfiprintf_r+0x17c>
 800b540:	b1b0      	cbz	r0, 800b570 <_svfiprintf_r+0x114>
 800b542:	9207      	str	r2, [sp, #28]
 800b544:	e014      	b.n	800b570 <_svfiprintf_r+0x114>
 800b546:	eba0 0308 	sub.w	r3, r0, r8
 800b54a:	fa09 f303 	lsl.w	r3, r9, r3
 800b54e:	4313      	orrs	r3, r2
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	46a2      	mov	sl, r4
 800b554:	e7d2      	b.n	800b4fc <_svfiprintf_r+0xa0>
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	1d19      	adds	r1, r3, #4
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	9103      	str	r1, [sp, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bfbb      	ittet	lt
 800b562:	425b      	neglt	r3, r3
 800b564:	f042 0202 	orrlt.w	r2, r2, #2
 800b568:	9307      	strge	r3, [sp, #28]
 800b56a:	9307      	strlt	r3, [sp, #28]
 800b56c:	bfb8      	it	lt
 800b56e:	9204      	strlt	r2, [sp, #16]
 800b570:	7823      	ldrb	r3, [r4, #0]
 800b572:	2b2e      	cmp	r3, #46	@ 0x2e
 800b574:	d10a      	bne.n	800b58c <_svfiprintf_r+0x130>
 800b576:	7863      	ldrb	r3, [r4, #1]
 800b578:	2b2a      	cmp	r3, #42	@ 0x2a
 800b57a:	d132      	bne.n	800b5e2 <_svfiprintf_r+0x186>
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	1d1a      	adds	r2, r3, #4
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	9203      	str	r2, [sp, #12]
 800b584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b588:	3402      	adds	r4, #2
 800b58a:	9305      	str	r3, [sp, #20]
 800b58c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b650 <_svfiprintf_r+0x1f4>
 800b590:	7821      	ldrb	r1, [r4, #0]
 800b592:	2203      	movs	r2, #3
 800b594:	4650      	mov	r0, sl
 800b596:	f7f4 fe23 	bl	80001e0 <memchr>
 800b59a:	b138      	cbz	r0, 800b5ac <_svfiprintf_r+0x150>
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	eba0 000a 	sub.w	r0, r0, sl
 800b5a2:	2240      	movs	r2, #64	@ 0x40
 800b5a4:	4082      	lsls	r2, r0
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	3401      	adds	r4, #1
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b0:	4824      	ldr	r0, [pc, #144]	@ (800b644 <_svfiprintf_r+0x1e8>)
 800b5b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5b6:	2206      	movs	r2, #6
 800b5b8:	f7f4 fe12 	bl	80001e0 <memchr>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d036      	beq.n	800b62e <_svfiprintf_r+0x1d2>
 800b5c0:	4b21      	ldr	r3, [pc, #132]	@ (800b648 <_svfiprintf_r+0x1ec>)
 800b5c2:	bb1b      	cbnz	r3, 800b60c <_svfiprintf_r+0x1b0>
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	3307      	adds	r3, #7
 800b5c8:	f023 0307 	bic.w	r3, r3, #7
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	9303      	str	r3, [sp, #12]
 800b5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d2:	4433      	add	r3, r6
 800b5d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d6:	e76a      	b.n	800b4ae <_svfiprintf_r+0x52>
 800b5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5dc:	460c      	mov	r4, r1
 800b5de:	2001      	movs	r0, #1
 800b5e0:	e7a8      	b.n	800b534 <_svfiprintf_r+0xd8>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	3401      	adds	r4, #1
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	f04f 0c0a 	mov.w	ip, #10
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f4:	3a30      	subs	r2, #48	@ 0x30
 800b5f6:	2a09      	cmp	r2, #9
 800b5f8:	d903      	bls.n	800b602 <_svfiprintf_r+0x1a6>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0c6      	beq.n	800b58c <_svfiprintf_r+0x130>
 800b5fe:	9105      	str	r1, [sp, #20]
 800b600:	e7c4      	b.n	800b58c <_svfiprintf_r+0x130>
 800b602:	fb0c 2101 	mla	r1, ip, r1, r2
 800b606:	4604      	mov	r4, r0
 800b608:	2301      	movs	r3, #1
 800b60a:	e7f0      	b.n	800b5ee <_svfiprintf_r+0x192>
 800b60c:	ab03      	add	r3, sp, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	462a      	mov	r2, r5
 800b612:	4b0e      	ldr	r3, [pc, #56]	@ (800b64c <_svfiprintf_r+0x1f0>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	4638      	mov	r0, r7
 800b618:	f7fc fc94 	bl	8007f44 <_printf_float>
 800b61c:	1c42      	adds	r2, r0, #1
 800b61e:	4606      	mov	r6, r0
 800b620:	d1d6      	bne.n	800b5d0 <_svfiprintf_r+0x174>
 800b622:	89ab      	ldrh	r3, [r5, #12]
 800b624:	065b      	lsls	r3, r3, #25
 800b626:	f53f af2d 	bmi.w	800b484 <_svfiprintf_r+0x28>
 800b62a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b62c:	e72c      	b.n	800b488 <_svfiprintf_r+0x2c>
 800b62e:	ab03      	add	r3, sp, #12
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	462a      	mov	r2, r5
 800b634:	4b05      	ldr	r3, [pc, #20]	@ (800b64c <_svfiprintf_r+0x1f0>)
 800b636:	a904      	add	r1, sp, #16
 800b638:	4638      	mov	r0, r7
 800b63a:	f7fc ff1b 	bl	8008474 <_printf_i>
 800b63e:	e7ed      	b.n	800b61c <_svfiprintf_r+0x1c0>
 800b640:	0800c949 	.word	0x0800c949
 800b644:	0800c953 	.word	0x0800c953
 800b648:	08007f45 	.word	0x08007f45
 800b64c:	0800b3a5 	.word	0x0800b3a5
 800b650:	0800c94f 	.word	0x0800c94f

0800b654 <__sflush_r>:
 800b654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65c:	0716      	lsls	r6, r2, #28
 800b65e:	4605      	mov	r5, r0
 800b660:	460c      	mov	r4, r1
 800b662:	d454      	bmi.n	800b70e <__sflush_r+0xba>
 800b664:	684b      	ldr	r3, [r1, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	dc02      	bgt.n	800b670 <__sflush_r+0x1c>
 800b66a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dd48      	ble.n	800b702 <__sflush_r+0xae>
 800b670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b672:	2e00      	cmp	r6, #0
 800b674:	d045      	beq.n	800b702 <__sflush_r+0xae>
 800b676:	2300      	movs	r3, #0
 800b678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b67c:	682f      	ldr	r7, [r5, #0]
 800b67e:	6a21      	ldr	r1, [r4, #32]
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	d030      	beq.n	800b6e6 <__sflush_r+0x92>
 800b684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	0759      	lsls	r1, r3, #29
 800b68a:	d505      	bpl.n	800b698 <__sflush_r+0x44>
 800b68c:	6863      	ldr	r3, [r4, #4]
 800b68e:	1ad2      	subs	r2, r2, r3
 800b690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b692:	b10b      	cbz	r3, 800b698 <__sflush_r+0x44>
 800b694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	2300      	movs	r3, #0
 800b69a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b69c:	6a21      	ldr	r1, [r4, #32]
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b0      	blx	r6
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	d106      	bne.n	800b6b6 <__sflush_r+0x62>
 800b6a8:	6829      	ldr	r1, [r5, #0]
 800b6aa:	291d      	cmp	r1, #29
 800b6ac:	d82b      	bhi.n	800b706 <__sflush_r+0xb2>
 800b6ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b758 <__sflush_r+0x104>)
 800b6b0:	410a      	asrs	r2, r1
 800b6b2:	07d6      	lsls	r6, r2, #31
 800b6b4:	d427      	bmi.n	800b706 <__sflush_r+0xb2>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	6062      	str	r2, [r4, #4]
 800b6ba:	04d9      	lsls	r1, r3, #19
 800b6bc:	6922      	ldr	r2, [r4, #16]
 800b6be:	6022      	str	r2, [r4, #0]
 800b6c0:	d504      	bpl.n	800b6cc <__sflush_r+0x78>
 800b6c2:	1c42      	adds	r2, r0, #1
 800b6c4:	d101      	bne.n	800b6ca <__sflush_r+0x76>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	b903      	cbnz	r3, 800b6cc <__sflush_r+0x78>
 800b6ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6ce:	602f      	str	r7, [r5, #0]
 800b6d0:	b1b9      	cbz	r1, 800b702 <__sflush_r+0xae>
 800b6d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6d6:	4299      	cmp	r1, r3
 800b6d8:	d002      	beq.n	800b6e0 <__sflush_r+0x8c>
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f7fe fa2c 	bl	8009b38 <_free_r>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6e4:	e00d      	b.n	800b702 <__sflush_r+0xae>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	47b0      	blx	r6
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	1c50      	adds	r0, r2, #1
 800b6f0:	d1c9      	bne.n	800b686 <__sflush_r+0x32>
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0c6      	beq.n	800b686 <__sflush_r+0x32>
 800b6f8:	2b1d      	cmp	r3, #29
 800b6fa:	d001      	beq.n	800b700 <__sflush_r+0xac>
 800b6fc:	2b16      	cmp	r3, #22
 800b6fe:	d11e      	bne.n	800b73e <__sflush_r+0xea>
 800b700:	602f      	str	r7, [r5, #0]
 800b702:	2000      	movs	r0, #0
 800b704:	e022      	b.n	800b74c <__sflush_r+0xf8>
 800b706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70a:	b21b      	sxth	r3, r3
 800b70c:	e01b      	b.n	800b746 <__sflush_r+0xf2>
 800b70e:	690f      	ldr	r7, [r1, #16]
 800b710:	2f00      	cmp	r7, #0
 800b712:	d0f6      	beq.n	800b702 <__sflush_r+0xae>
 800b714:	0793      	lsls	r3, r2, #30
 800b716:	680e      	ldr	r6, [r1, #0]
 800b718:	bf08      	it	eq
 800b71a:	694b      	ldreq	r3, [r1, #20]
 800b71c:	600f      	str	r7, [r1, #0]
 800b71e:	bf18      	it	ne
 800b720:	2300      	movne	r3, #0
 800b722:	eba6 0807 	sub.w	r8, r6, r7
 800b726:	608b      	str	r3, [r1, #8]
 800b728:	f1b8 0f00 	cmp.w	r8, #0
 800b72c:	dde9      	ble.n	800b702 <__sflush_r+0xae>
 800b72e:	6a21      	ldr	r1, [r4, #32]
 800b730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b732:	4643      	mov	r3, r8
 800b734:	463a      	mov	r2, r7
 800b736:	4628      	mov	r0, r5
 800b738:	47b0      	blx	r6
 800b73a:	2800      	cmp	r0, #0
 800b73c:	dc08      	bgt.n	800b750 <__sflush_r+0xfc>
 800b73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
 800b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b750:	4407      	add	r7, r0
 800b752:	eba8 0800 	sub.w	r8, r8, r0
 800b756:	e7e7      	b.n	800b728 <__sflush_r+0xd4>
 800b758:	dfbffffe 	.word	0xdfbffffe

0800b75c <_fflush_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	690b      	ldr	r3, [r1, #16]
 800b760:	4605      	mov	r5, r0
 800b762:	460c      	mov	r4, r1
 800b764:	b913      	cbnz	r3, 800b76c <_fflush_r+0x10>
 800b766:	2500      	movs	r5, #0
 800b768:	4628      	mov	r0, r5
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	b118      	cbz	r0, 800b776 <_fflush_r+0x1a>
 800b76e:	6a03      	ldr	r3, [r0, #32]
 800b770:	b90b      	cbnz	r3, 800b776 <_fflush_r+0x1a>
 800b772:	f7fd fa3f 	bl	8008bf4 <__sinit>
 800b776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0f3      	beq.n	800b766 <_fflush_r+0xa>
 800b77e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b780:	07d0      	lsls	r0, r2, #31
 800b782:	d404      	bmi.n	800b78e <_fflush_r+0x32>
 800b784:	0599      	lsls	r1, r3, #22
 800b786:	d402      	bmi.n	800b78e <_fflush_r+0x32>
 800b788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b78a:	f7fd fb7e 	bl	8008e8a <__retarget_lock_acquire_recursive>
 800b78e:	4628      	mov	r0, r5
 800b790:	4621      	mov	r1, r4
 800b792:	f7ff ff5f 	bl	800b654 <__sflush_r>
 800b796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b798:	07da      	lsls	r2, r3, #31
 800b79a:	4605      	mov	r5, r0
 800b79c:	d4e4      	bmi.n	800b768 <_fflush_r+0xc>
 800b79e:	89a3      	ldrh	r3, [r4, #12]
 800b7a0:	059b      	lsls	r3, r3, #22
 800b7a2:	d4e1      	bmi.n	800b768 <_fflush_r+0xc>
 800b7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7a6:	f7fd fb71 	bl	8008e8c <__retarget_lock_release_recursive>
 800b7aa:	e7dd      	b.n	800b768 <_fflush_r+0xc>

0800b7ac <memmove>:
 800b7ac:	4288      	cmp	r0, r1
 800b7ae:	b510      	push	{r4, lr}
 800b7b0:	eb01 0402 	add.w	r4, r1, r2
 800b7b4:	d902      	bls.n	800b7bc <memmove+0x10>
 800b7b6:	4284      	cmp	r4, r0
 800b7b8:	4623      	mov	r3, r4
 800b7ba:	d807      	bhi.n	800b7cc <memmove+0x20>
 800b7bc:	1e43      	subs	r3, r0, #1
 800b7be:	42a1      	cmp	r1, r4
 800b7c0:	d008      	beq.n	800b7d4 <memmove+0x28>
 800b7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ca:	e7f8      	b.n	800b7be <memmove+0x12>
 800b7cc:	4402      	add	r2, r0
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	428a      	cmp	r2, r1
 800b7d2:	d100      	bne.n	800b7d6 <memmove+0x2a>
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7de:	e7f7      	b.n	800b7d0 <memmove+0x24>

0800b7e0 <strncmp>:
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	b16a      	cbz	r2, 800b800 <strncmp+0x20>
 800b7e4:	3901      	subs	r1, #1
 800b7e6:	1884      	adds	r4, r0, r2
 800b7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d103      	bne.n	800b7fc <strncmp+0x1c>
 800b7f4:	42a0      	cmp	r0, r4
 800b7f6:	d001      	beq.n	800b7fc <strncmp+0x1c>
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d1f5      	bne.n	800b7e8 <strncmp+0x8>
 800b7fc:	1ad0      	subs	r0, r2, r3
 800b7fe:	bd10      	pop	{r4, pc}
 800b800:	4610      	mov	r0, r2
 800b802:	e7fc      	b.n	800b7fe <strncmp+0x1e>

0800b804 <_sbrk_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d06      	ldr	r5, [pc, #24]	@ (800b820 <_sbrk_r+0x1c>)
 800b808:	2300      	movs	r3, #0
 800b80a:	4604      	mov	r4, r0
 800b80c:	4608      	mov	r0, r1
 800b80e:	602b      	str	r3, [r5, #0]
 800b810:	f7f6 f99a 	bl	8001b48 <_sbrk>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_sbrk_r+0x1a>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_sbrk_r+0x1a>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	2000057c 	.word	0x2000057c

0800b824 <memcpy>:
 800b824:	440a      	add	r2, r1
 800b826:	4291      	cmp	r1, r2
 800b828:	f100 33ff 	add.w	r3, r0, #4294967295
 800b82c:	d100      	bne.n	800b830 <memcpy+0xc>
 800b82e:	4770      	bx	lr
 800b830:	b510      	push	{r4, lr}
 800b832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b83a:	4291      	cmp	r1, r2
 800b83c:	d1f9      	bne.n	800b832 <memcpy+0xe>
 800b83e:	bd10      	pop	{r4, pc}

0800b840 <nan>:
 800b840:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b848 <nan+0x8>
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	00000000 	.word	0x00000000
 800b84c:	7ff80000 	.word	0x7ff80000

0800b850 <__assert_func>:
 800b850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b852:	4614      	mov	r4, r2
 800b854:	461a      	mov	r2, r3
 800b856:	4b09      	ldr	r3, [pc, #36]	@ (800b87c <__assert_func+0x2c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4605      	mov	r5, r0
 800b85c:	68d8      	ldr	r0, [r3, #12]
 800b85e:	b954      	cbnz	r4, 800b876 <__assert_func+0x26>
 800b860:	4b07      	ldr	r3, [pc, #28]	@ (800b880 <__assert_func+0x30>)
 800b862:	461c      	mov	r4, r3
 800b864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b868:	9100      	str	r1, [sp, #0]
 800b86a:	462b      	mov	r3, r5
 800b86c:	4905      	ldr	r1, [pc, #20]	@ (800b884 <__assert_func+0x34>)
 800b86e:	f000 fba7 	bl	800bfc0 <fiprintf>
 800b872:	f000 fbb7 	bl	800bfe4 <abort>
 800b876:	4b04      	ldr	r3, [pc, #16]	@ (800b888 <__assert_func+0x38>)
 800b878:	e7f4      	b.n	800b864 <__assert_func+0x14>
 800b87a:	bf00      	nop
 800b87c:	20000034 	.word	0x20000034
 800b880:	0800c99d 	.word	0x0800c99d
 800b884:	0800c96f 	.word	0x0800c96f
 800b888:	0800c962 	.word	0x0800c962

0800b88c <_calloc_r>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	fba1 5402 	umull	r5, r4, r1, r2
 800b892:	b93c      	cbnz	r4, 800b8a4 <_calloc_r+0x18>
 800b894:	4629      	mov	r1, r5
 800b896:	f7fe f9c3 	bl	8009c20 <_malloc_r>
 800b89a:	4606      	mov	r6, r0
 800b89c:	b928      	cbnz	r0, 800b8aa <_calloc_r+0x1e>
 800b89e:	2600      	movs	r6, #0
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	220c      	movs	r2, #12
 800b8a6:	6002      	str	r2, [r0, #0]
 800b8a8:	e7f9      	b.n	800b89e <_calloc_r+0x12>
 800b8aa:	462a      	mov	r2, r5
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	f7fd fa6e 	bl	8008d8e <memset>
 800b8b2:	e7f5      	b.n	800b8a0 <_calloc_r+0x14>

0800b8b4 <rshift>:
 800b8b4:	6903      	ldr	r3, [r0, #16]
 800b8b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b8ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8c2:	f100 0414 	add.w	r4, r0, #20
 800b8c6:	dd45      	ble.n	800b954 <rshift+0xa0>
 800b8c8:	f011 011f 	ands.w	r1, r1, #31
 800b8cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8d4:	d10c      	bne.n	800b8f0 <rshift+0x3c>
 800b8d6:	f100 0710 	add.w	r7, r0, #16
 800b8da:	4629      	mov	r1, r5
 800b8dc:	42b1      	cmp	r1, r6
 800b8de:	d334      	bcc.n	800b94a <rshift+0x96>
 800b8e0:	1a9b      	subs	r3, r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	1eea      	subs	r2, r5, #3
 800b8e6:	4296      	cmp	r6, r2
 800b8e8:	bf38      	it	cc
 800b8ea:	2300      	movcc	r3, #0
 800b8ec:	4423      	add	r3, r4
 800b8ee:	e015      	b.n	800b91c <rshift+0x68>
 800b8f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8f4:	f1c1 0820 	rsb	r8, r1, #32
 800b8f8:	40cf      	lsrs	r7, r1
 800b8fa:	f105 0e04 	add.w	lr, r5, #4
 800b8fe:	46a1      	mov	r9, r4
 800b900:	4576      	cmp	r6, lr
 800b902:	46f4      	mov	ip, lr
 800b904:	d815      	bhi.n	800b932 <rshift+0x7e>
 800b906:	1a9a      	subs	r2, r3, r2
 800b908:	0092      	lsls	r2, r2, #2
 800b90a:	3a04      	subs	r2, #4
 800b90c:	3501      	adds	r5, #1
 800b90e:	42ae      	cmp	r6, r5
 800b910:	bf38      	it	cc
 800b912:	2200      	movcc	r2, #0
 800b914:	18a3      	adds	r3, r4, r2
 800b916:	50a7      	str	r7, [r4, r2]
 800b918:	b107      	cbz	r7, 800b91c <rshift+0x68>
 800b91a:	3304      	adds	r3, #4
 800b91c:	1b1a      	subs	r2, r3, r4
 800b91e:	42a3      	cmp	r3, r4
 800b920:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b924:	bf08      	it	eq
 800b926:	2300      	moveq	r3, #0
 800b928:	6102      	str	r2, [r0, #16]
 800b92a:	bf08      	it	eq
 800b92c:	6143      	streq	r3, [r0, #20]
 800b92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b932:	f8dc c000 	ldr.w	ip, [ip]
 800b936:	fa0c fc08 	lsl.w	ip, ip, r8
 800b93a:	ea4c 0707 	orr.w	r7, ip, r7
 800b93e:	f849 7b04 	str.w	r7, [r9], #4
 800b942:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b946:	40cf      	lsrs	r7, r1
 800b948:	e7da      	b.n	800b900 <rshift+0x4c>
 800b94a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b94e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b952:	e7c3      	b.n	800b8dc <rshift+0x28>
 800b954:	4623      	mov	r3, r4
 800b956:	e7e1      	b.n	800b91c <rshift+0x68>

0800b958 <__hexdig_fun>:
 800b958:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b95c:	2b09      	cmp	r3, #9
 800b95e:	d802      	bhi.n	800b966 <__hexdig_fun+0xe>
 800b960:	3820      	subs	r0, #32
 800b962:	b2c0      	uxtb	r0, r0
 800b964:	4770      	bx	lr
 800b966:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b96a:	2b05      	cmp	r3, #5
 800b96c:	d801      	bhi.n	800b972 <__hexdig_fun+0x1a>
 800b96e:	3847      	subs	r0, #71	@ 0x47
 800b970:	e7f7      	b.n	800b962 <__hexdig_fun+0xa>
 800b972:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b976:	2b05      	cmp	r3, #5
 800b978:	d801      	bhi.n	800b97e <__hexdig_fun+0x26>
 800b97a:	3827      	subs	r0, #39	@ 0x27
 800b97c:	e7f1      	b.n	800b962 <__hexdig_fun+0xa>
 800b97e:	2000      	movs	r0, #0
 800b980:	4770      	bx	lr
	...

0800b984 <__gethex>:
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	b085      	sub	sp, #20
 800b98a:	468a      	mov	sl, r1
 800b98c:	9302      	str	r3, [sp, #8]
 800b98e:	680b      	ldr	r3, [r1, #0]
 800b990:	9001      	str	r0, [sp, #4]
 800b992:	4690      	mov	r8, r2
 800b994:	1c9c      	adds	r4, r3, #2
 800b996:	46a1      	mov	r9, r4
 800b998:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b99c:	2830      	cmp	r0, #48	@ 0x30
 800b99e:	d0fa      	beq.n	800b996 <__gethex+0x12>
 800b9a0:	eba9 0303 	sub.w	r3, r9, r3
 800b9a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b9a8:	f7ff ffd6 	bl	800b958 <__hexdig_fun>
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d168      	bne.n	800ba84 <__gethex+0x100>
 800b9b2:	49a0      	ldr	r1, [pc, #640]	@ (800bc34 <__gethex+0x2b0>)
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	4648      	mov	r0, r9
 800b9b8:	f7ff ff12 	bl	800b7e0 <strncmp>
 800b9bc:	4607      	mov	r7, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d167      	bne.n	800ba92 <__gethex+0x10e>
 800b9c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b9c6:	4626      	mov	r6, r4
 800b9c8:	f7ff ffc6 	bl	800b958 <__hexdig_fun>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d062      	beq.n	800ba96 <__gethex+0x112>
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	7818      	ldrb	r0, [r3, #0]
 800b9d4:	2830      	cmp	r0, #48	@ 0x30
 800b9d6:	4699      	mov	r9, r3
 800b9d8:	f103 0301 	add.w	r3, r3, #1
 800b9dc:	d0f9      	beq.n	800b9d2 <__gethex+0x4e>
 800b9de:	f7ff ffbb 	bl	800b958 <__hexdig_fun>
 800b9e2:	fab0 f580 	clz	r5, r0
 800b9e6:	096d      	lsrs	r5, r5, #5
 800b9e8:	f04f 0b01 	mov.w	fp, #1
 800b9ec:	464a      	mov	r2, r9
 800b9ee:	4616      	mov	r6, r2
 800b9f0:	3201      	adds	r2, #1
 800b9f2:	7830      	ldrb	r0, [r6, #0]
 800b9f4:	f7ff ffb0 	bl	800b958 <__hexdig_fun>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d1f8      	bne.n	800b9ee <__gethex+0x6a>
 800b9fc:	498d      	ldr	r1, [pc, #564]	@ (800bc34 <__gethex+0x2b0>)
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4630      	mov	r0, r6
 800ba02:	f7ff feed 	bl	800b7e0 <strncmp>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d13f      	bne.n	800ba8a <__gethex+0x106>
 800ba0a:	b944      	cbnz	r4, 800ba1e <__gethex+0x9a>
 800ba0c:	1c74      	adds	r4, r6, #1
 800ba0e:	4622      	mov	r2, r4
 800ba10:	4616      	mov	r6, r2
 800ba12:	3201      	adds	r2, #1
 800ba14:	7830      	ldrb	r0, [r6, #0]
 800ba16:	f7ff ff9f 	bl	800b958 <__hexdig_fun>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d1f8      	bne.n	800ba10 <__gethex+0x8c>
 800ba1e:	1ba4      	subs	r4, r4, r6
 800ba20:	00a7      	lsls	r7, r4, #2
 800ba22:	7833      	ldrb	r3, [r6, #0]
 800ba24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ba28:	2b50      	cmp	r3, #80	@ 0x50
 800ba2a:	d13e      	bne.n	800baaa <__gethex+0x126>
 800ba2c:	7873      	ldrb	r3, [r6, #1]
 800ba2e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ba30:	d033      	beq.n	800ba9a <__gethex+0x116>
 800ba32:	2b2d      	cmp	r3, #45	@ 0x2d
 800ba34:	d034      	beq.n	800baa0 <__gethex+0x11c>
 800ba36:	1c71      	adds	r1, r6, #1
 800ba38:	2400      	movs	r4, #0
 800ba3a:	7808      	ldrb	r0, [r1, #0]
 800ba3c:	f7ff ff8c 	bl	800b958 <__hexdig_fun>
 800ba40:	1e43      	subs	r3, r0, #1
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b18      	cmp	r3, #24
 800ba46:	d830      	bhi.n	800baaa <__gethex+0x126>
 800ba48:	f1a0 0210 	sub.w	r2, r0, #16
 800ba4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba50:	f7ff ff82 	bl	800b958 <__hexdig_fun>
 800ba54:	f100 3cff 	add.w	ip, r0, #4294967295
 800ba58:	fa5f fc8c 	uxtb.w	ip, ip
 800ba5c:	f1bc 0f18 	cmp.w	ip, #24
 800ba60:	f04f 030a 	mov.w	r3, #10
 800ba64:	d91e      	bls.n	800baa4 <__gethex+0x120>
 800ba66:	b104      	cbz	r4, 800ba6a <__gethex+0xe6>
 800ba68:	4252      	negs	r2, r2
 800ba6a:	4417      	add	r7, r2
 800ba6c:	f8ca 1000 	str.w	r1, [sl]
 800ba70:	b1ed      	cbz	r5, 800baae <__gethex+0x12a>
 800ba72:	f1bb 0f00 	cmp.w	fp, #0
 800ba76:	bf0c      	ite	eq
 800ba78:	2506      	moveq	r5, #6
 800ba7a:	2500      	movne	r5, #0
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	b005      	add	sp, #20
 800ba80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba84:	2500      	movs	r5, #0
 800ba86:	462c      	mov	r4, r5
 800ba88:	e7b0      	b.n	800b9ec <__gethex+0x68>
 800ba8a:	2c00      	cmp	r4, #0
 800ba8c:	d1c7      	bne.n	800ba1e <__gethex+0x9a>
 800ba8e:	4627      	mov	r7, r4
 800ba90:	e7c7      	b.n	800ba22 <__gethex+0x9e>
 800ba92:	464e      	mov	r6, r9
 800ba94:	462f      	mov	r7, r5
 800ba96:	2501      	movs	r5, #1
 800ba98:	e7c3      	b.n	800ba22 <__gethex+0x9e>
 800ba9a:	2400      	movs	r4, #0
 800ba9c:	1cb1      	adds	r1, r6, #2
 800ba9e:	e7cc      	b.n	800ba3a <__gethex+0xb6>
 800baa0:	2401      	movs	r4, #1
 800baa2:	e7fb      	b.n	800ba9c <__gethex+0x118>
 800baa4:	fb03 0002 	mla	r0, r3, r2, r0
 800baa8:	e7ce      	b.n	800ba48 <__gethex+0xc4>
 800baaa:	4631      	mov	r1, r6
 800baac:	e7de      	b.n	800ba6c <__gethex+0xe8>
 800baae:	eba6 0309 	sub.w	r3, r6, r9
 800bab2:	3b01      	subs	r3, #1
 800bab4:	4629      	mov	r1, r5
 800bab6:	2b07      	cmp	r3, #7
 800bab8:	dc0a      	bgt.n	800bad0 <__gethex+0x14c>
 800baba:	9801      	ldr	r0, [sp, #4]
 800babc:	f7fe f93c 	bl	8009d38 <_Balloc>
 800bac0:	4604      	mov	r4, r0
 800bac2:	b940      	cbnz	r0, 800bad6 <__gethex+0x152>
 800bac4:	4b5c      	ldr	r3, [pc, #368]	@ (800bc38 <__gethex+0x2b4>)
 800bac6:	4602      	mov	r2, r0
 800bac8:	21e4      	movs	r1, #228	@ 0xe4
 800baca:	485c      	ldr	r0, [pc, #368]	@ (800bc3c <__gethex+0x2b8>)
 800bacc:	f7ff fec0 	bl	800b850 <__assert_func>
 800bad0:	3101      	adds	r1, #1
 800bad2:	105b      	asrs	r3, r3, #1
 800bad4:	e7ef      	b.n	800bab6 <__gethex+0x132>
 800bad6:	f100 0a14 	add.w	sl, r0, #20
 800bada:	2300      	movs	r3, #0
 800badc:	4655      	mov	r5, sl
 800bade:	469b      	mov	fp, r3
 800bae0:	45b1      	cmp	r9, r6
 800bae2:	d337      	bcc.n	800bb54 <__gethex+0x1d0>
 800bae4:	f845 bb04 	str.w	fp, [r5], #4
 800bae8:	eba5 050a 	sub.w	r5, r5, sl
 800baec:	10ad      	asrs	r5, r5, #2
 800baee:	6125      	str	r5, [r4, #16]
 800baf0:	4658      	mov	r0, fp
 800baf2:	f7fe fa13 	bl	8009f1c <__hi0bits>
 800baf6:	016d      	lsls	r5, r5, #5
 800baf8:	f8d8 6000 	ldr.w	r6, [r8]
 800bafc:	1a2d      	subs	r5, r5, r0
 800bafe:	42b5      	cmp	r5, r6
 800bb00:	dd54      	ble.n	800bbac <__gethex+0x228>
 800bb02:	1bad      	subs	r5, r5, r6
 800bb04:	4629      	mov	r1, r5
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7fe fda7 	bl	800a65a <__any_on>
 800bb0c:	4681      	mov	r9, r0
 800bb0e:	b178      	cbz	r0, 800bb30 <__gethex+0x1ac>
 800bb10:	1e6b      	subs	r3, r5, #1
 800bb12:	1159      	asrs	r1, r3, #5
 800bb14:	f003 021f 	and.w	r2, r3, #31
 800bb18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb1c:	f04f 0901 	mov.w	r9, #1
 800bb20:	fa09 f202 	lsl.w	r2, r9, r2
 800bb24:	420a      	tst	r2, r1
 800bb26:	d003      	beq.n	800bb30 <__gethex+0x1ac>
 800bb28:	454b      	cmp	r3, r9
 800bb2a:	dc36      	bgt.n	800bb9a <__gethex+0x216>
 800bb2c:	f04f 0902 	mov.w	r9, #2
 800bb30:	4629      	mov	r1, r5
 800bb32:	4620      	mov	r0, r4
 800bb34:	f7ff febe 	bl	800b8b4 <rshift>
 800bb38:	442f      	add	r7, r5
 800bb3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb3e:	42bb      	cmp	r3, r7
 800bb40:	da42      	bge.n	800bbc8 <__gethex+0x244>
 800bb42:	9801      	ldr	r0, [sp, #4]
 800bb44:	4621      	mov	r1, r4
 800bb46:	f7fe f937 	bl	8009db8 <_Bfree>
 800bb4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	25a3      	movs	r5, #163	@ 0xa3
 800bb52:	e793      	b.n	800ba7c <__gethex+0xf8>
 800bb54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bb58:	2a2e      	cmp	r2, #46	@ 0x2e
 800bb5a:	d012      	beq.n	800bb82 <__gethex+0x1fe>
 800bb5c:	2b20      	cmp	r3, #32
 800bb5e:	d104      	bne.n	800bb6a <__gethex+0x1e6>
 800bb60:	f845 bb04 	str.w	fp, [r5], #4
 800bb64:	f04f 0b00 	mov.w	fp, #0
 800bb68:	465b      	mov	r3, fp
 800bb6a:	7830      	ldrb	r0, [r6, #0]
 800bb6c:	9303      	str	r3, [sp, #12]
 800bb6e:	f7ff fef3 	bl	800b958 <__hexdig_fun>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	f000 000f 	and.w	r0, r0, #15
 800bb78:	4098      	lsls	r0, r3
 800bb7a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb7e:	3304      	adds	r3, #4
 800bb80:	e7ae      	b.n	800bae0 <__gethex+0x15c>
 800bb82:	45b1      	cmp	r9, r6
 800bb84:	d8ea      	bhi.n	800bb5c <__gethex+0x1d8>
 800bb86:	492b      	ldr	r1, [pc, #172]	@ (800bc34 <__gethex+0x2b0>)
 800bb88:	9303      	str	r3, [sp, #12]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f7ff fe27 	bl	800b7e0 <strncmp>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d1e1      	bne.n	800bb5c <__gethex+0x1d8>
 800bb98:	e7a2      	b.n	800bae0 <__gethex+0x15c>
 800bb9a:	1ea9      	subs	r1, r5, #2
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f7fe fd5c 	bl	800a65a <__any_on>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d0c2      	beq.n	800bb2c <__gethex+0x1a8>
 800bba6:	f04f 0903 	mov.w	r9, #3
 800bbaa:	e7c1      	b.n	800bb30 <__gethex+0x1ac>
 800bbac:	da09      	bge.n	800bbc2 <__gethex+0x23e>
 800bbae:	1b75      	subs	r5, r6, r5
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	9801      	ldr	r0, [sp, #4]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	f7fe fb17 	bl	800a1e8 <__lshift>
 800bbba:	1b7f      	subs	r7, r7, r5
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	f100 0a14 	add.w	sl, r0, #20
 800bbc2:	f04f 0900 	mov.w	r9, #0
 800bbc6:	e7b8      	b.n	800bb3a <__gethex+0x1b6>
 800bbc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbcc:	42bd      	cmp	r5, r7
 800bbce:	dd6f      	ble.n	800bcb0 <__gethex+0x32c>
 800bbd0:	1bed      	subs	r5, r5, r7
 800bbd2:	42ae      	cmp	r6, r5
 800bbd4:	dc34      	bgt.n	800bc40 <__gethex+0x2bc>
 800bbd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d022      	beq.n	800bc24 <__gethex+0x2a0>
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d024      	beq.n	800bc2c <__gethex+0x2a8>
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d115      	bne.n	800bc12 <__gethex+0x28e>
 800bbe6:	42ae      	cmp	r6, r5
 800bbe8:	d113      	bne.n	800bc12 <__gethex+0x28e>
 800bbea:	2e01      	cmp	r6, #1
 800bbec:	d10b      	bne.n	800bc06 <__gethex+0x282>
 800bbee:	9a02      	ldr	r2, [sp, #8]
 800bbf0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	6123      	str	r3, [r4, #16]
 800bbfa:	f8ca 3000 	str.w	r3, [sl]
 800bbfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc00:	2562      	movs	r5, #98	@ 0x62
 800bc02:	601c      	str	r4, [r3, #0]
 800bc04:	e73a      	b.n	800ba7c <__gethex+0xf8>
 800bc06:	1e71      	subs	r1, r6, #1
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f7fe fd26 	bl	800a65a <__any_on>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d1ed      	bne.n	800bbee <__gethex+0x26a>
 800bc12:	9801      	ldr	r0, [sp, #4]
 800bc14:	4621      	mov	r1, r4
 800bc16:	f7fe f8cf 	bl	8009db8 <_Bfree>
 800bc1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	2550      	movs	r5, #80	@ 0x50
 800bc22:	e72b      	b.n	800ba7c <__gethex+0xf8>
 800bc24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1f3      	bne.n	800bc12 <__gethex+0x28e>
 800bc2a:	e7e0      	b.n	800bbee <__gethex+0x26a>
 800bc2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1dd      	bne.n	800bbee <__gethex+0x26a>
 800bc32:	e7ee      	b.n	800bc12 <__gethex+0x28e>
 800bc34:	0800c7f0 	.word	0x0800c7f0
 800bc38:	0800c689 	.word	0x0800c689
 800bc3c:	0800c99e 	.word	0x0800c99e
 800bc40:	1e6f      	subs	r7, r5, #1
 800bc42:	f1b9 0f00 	cmp.w	r9, #0
 800bc46:	d130      	bne.n	800bcaa <__gethex+0x326>
 800bc48:	b127      	cbz	r7, 800bc54 <__gethex+0x2d0>
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f7fe fd04 	bl	800a65a <__any_on>
 800bc52:	4681      	mov	r9, r0
 800bc54:	117a      	asrs	r2, r7, #5
 800bc56:	2301      	movs	r3, #1
 800bc58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc5c:	f007 071f 	and.w	r7, r7, #31
 800bc60:	40bb      	lsls	r3, r7
 800bc62:	4213      	tst	r3, r2
 800bc64:	4629      	mov	r1, r5
 800bc66:	4620      	mov	r0, r4
 800bc68:	bf18      	it	ne
 800bc6a:	f049 0902 	orrne.w	r9, r9, #2
 800bc6e:	f7ff fe21 	bl	800b8b4 <rshift>
 800bc72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bc76:	1b76      	subs	r6, r6, r5
 800bc78:	2502      	movs	r5, #2
 800bc7a:	f1b9 0f00 	cmp.w	r9, #0
 800bc7e:	d047      	beq.n	800bd10 <__gethex+0x38c>
 800bc80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d015      	beq.n	800bcb4 <__gethex+0x330>
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d017      	beq.n	800bcbc <__gethex+0x338>
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d109      	bne.n	800bca4 <__gethex+0x320>
 800bc90:	f019 0f02 	tst.w	r9, #2
 800bc94:	d006      	beq.n	800bca4 <__gethex+0x320>
 800bc96:	f8da 3000 	ldr.w	r3, [sl]
 800bc9a:	ea49 0903 	orr.w	r9, r9, r3
 800bc9e:	f019 0f01 	tst.w	r9, #1
 800bca2:	d10e      	bne.n	800bcc2 <__gethex+0x33e>
 800bca4:	f045 0510 	orr.w	r5, r5, #16
 800bca8:	e032      	b.n	800bd10 <__gethex+0x38c>
 800bcaa:	f04f 0901 	mov.w	r9, #1
 800bcae:	e7d1      	b.n	800bc54 <__gethex+0x2d0>
 800bcb0:	2501      	movs	r5, #1
 800bcb2:	e7e2      	b.n	800bc7a <__gethex+0x2f6>
 800bcb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcb6:	f1c3 0301 	rsb	r3, r3, #1
 800bcba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0f0      	beq.n	800bca4 <__gethex+0x320>
 800bcc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bcc6:	f104 0314 	add.w	r3, r4, #20
 800bcca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bcce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bcd2:	f04f 0c00 	mov.w	ip, #0
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcdc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bce0:	d01b      	beq.n	800bd1a <__gethex+0x396>
 800bce2:	3201      	adds	r2, #1
 800bce4:	6002      	str	r2, [r0, #0]
 800bce6:	2d02      	cmp	r5, #2
 800bce8:	f104 0314 	add.w	r3, r4, #20
 800bcec:	d13c      	bne.n	800bd68 <__gethex+0x3e4>
 800bcee:	f8d8 2000 	ldr.w	r2, [r8]
 800bcf2:	3a01      	subs	r2, #1
 800bcf4:	42b2      	cmp	r2, r6
 800bcf6:	d109      	bne.n	800bd0c <__gethex+0x388>
 800bcf8:	1171      	asrs	r1, r6, #5
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd00:	f006 061f 	and.w	r6, r6, #31
 800bd04:	fa02 f606 	lsl.w	r6, r2, r6
 800bd08:	421e      	tst	r6, r3
 800bd0a:	d13a      	bne.n	800bd82 <__gethex+0x3fe>
 800bd0c:	f045 0520 	orr.w	r5, r5, #32
 800bd10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd12:	601c      	str	r4, [r3, #0]
 800bd14:	9b02      	ldr	r3, [sp, #8]
 800bd16:	601f      	str	r7, [r3, #0]
 800bd18:	e6b0      	b.n	800ba7c <__gethex+0xf8>
 800bd1a:	4299      	cmp	r1, r3
 800bd1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bd20:	d8d9      	bhi.n	800bcd6 <__gethex+0x352>
 800bd22:	68a3      	ldr	r3, [r4, #8]
 800bd24:	459b      	cmp	fp, r3
 800bd26:	db17      	blt.n	800bd58 <__gethex+0x3d4>
 800bd28:	6861      	ldr	r1, [r4, #4]
 800bd2a:	9801      	ldr	r0, [sp, #4]
 800bd2c:	3101      	adds	r1, #1
 800bd2e:	f7fe f803 	bl	8009d38 <_Balloc>
 800bd32:	4681      	mov	r9, r0
 800bd34:	b918      	cbnz	r0, 800bd3e <__gethex+0x3ba>
 800bd36:	4b1a      	ldr	r3, [pc, #104]	@ (800bda0 <__gethex+0x41c>)
 800bd38:	4602      	mov	r2, r0
 800bd3a:	2184      	movs	r1, #132	@ 0x84
 800bd3c:	e6c5      	b.n	800baca <__gethex+0x146>
 800bd3e:	6922      	ldr	r2, [r4, #16]
 800bd40:	3202      	adds	r2, #2
 800bd42:	f104 010c 	add.w	r1, r4, #12
 800bd46:	0092      	lsls	r2, r2, #2
 800bd48:	300c      	adds	r0, #12
 800bd4a:	f7ff fd6b 	bl	800b824 <memcpy>
 800bd4e:	4621      	mov	r1, r4
 800bd50:	9801      	ldr	r0, [sp, #4]
 800bd52:	f7fe f831 	bl	8009db8 <_Bfree>
 800bd56:	464c      	mov	r4, r9
 800bd58:	6923      	ldr	r3, [r4, #16]
 800bd5a:	1c5a      	adds	r2, r3, #1
 800bd5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd60:	6122      	str	r2, [r4, #16]
 800bd62:	2201      	movs	r2, #1
 800bd64:	615a      	str	r2, [r3, #20]
 800bd66:	e7be      	b.n	800bce6 <__gethex+0x362>
 800bd68:	6922      	ldr	r2, [r4, #16]
 800bd6a:	455a      	cmp	r2, fp
 800bd6c:	dd0b      	ble.n	800bd86 <__gethex+0x402>
 800bd6e:	2101      	movs	r1, #1
 800bd70:	4620      	mov	r0, r4
 800bd72:	f7ff fd9f 	bl	800b8b4 <rshift>
 800bd76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd7a:	3701      	adds	r7, #1
 800bd7c:	42bb      	cmp	r3, r7
 800bd7e:	f6ff aee0 	blt.w	800bb42 <__gethex+0x1be>
 800bd82:	2501      	movs	r5, #1
 800bd84:	e7c2      	b.n	800bd0c <__gethex+0x388>
 800bd86:	f016 061f 	ands.w	r6, r6, #31
 800bd8a:	d0fa      	beq.n	800bd82 <__gethex+0x3fe>
 800bd8c:	4453      	add	r3, sl
 800bd8e:	f1c6 0620 	rsb	r6, r6, #32
 800bd92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd96:	f7fe f8c1 	bl	8009f1c <__hi0bits>
 800bd9a:	42b0      	cmp	r0, r6
 800bd9c:	dbe7      	blt.n	800bd6e <__gethex+0x3ea>
 800bd9e:	e7f0      	b.n	800bd82 <__gethex+0x3fe>
 800bda0:	0800c689 	.word	0x0800c689

0800bda4 <L_shift>:
 800bda4:	f1c2 0208 	rsb	r2, r2, #8
 800bda8:	0092      	lsls	r2, r2, #2
 800bdaa:	b570      	push	{r4, r5, r6, lr}
 800bdac:	f1c2 0620 	rsb	r6, r2, #32
 800bdb0:	6843      	ldr	r3, [r0, #4]
 800bdb2:	6804      	ldr	r4, [r0, #0]
 800bdb4:	fa03 f506 	lsl.w	r5, r3, r6
 800bdb8:	432c      	orrs	r4, r5
 800bdba:	40d3      	lsrs	r3, r2
 800bdbc:	6004      	str	r4, [r0, #0]
 800bdbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800bdc2:	4288      	cmp	r0, r1
 800bdc4:	d3f4      	bcc.n	800bdb0 <L_shift+0xc>
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}

0800bdc8 <__match>:
 800bdc8:	b530      	push	{r4, r5, lr}
 800bdca:	6803      	ldr	r3, [r0, #0]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdd2:	b914      	cbnz	r4, 800bdda <__match+0x12>
 800bdd4:	6003      	str	r3, [r0, #0]
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	bd30      	pop	{r4, r5, pc}
 800bdda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bde2:	2d19      	cmp	r5, #25
 800bde4:	bf98      	it	ls
 800bde6:	3220      	addls	r2, #32
 800bde8:	42a2      	cmp	r2, r4
 800bdea:	d0f0      	beq.n	800bdce <__match+0x6>
 800bdec:	2000      	movs	r0, #0
 800bdee:	e7f3      	b.n	800bdd8 <__match+0x10>

0800bdf0 <__hexnan>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	680b      	ldr	r3, [r1, #0]
 800bdf6:	6801      	ldr	r1, [r0, #0]
 800bdf8:	115e      	asrs	r6, r3, #5
 800bdfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bdfe:	f013 031f 	ands.w	r3, r3, #31
 800be02:	b087      	sub	sp, #28
 800be04:	bf18      	it	ne
 800be06:	3604      	addne	r6, #4
 800be08:	2500      	movs	r5, #0
 800be0a:	1f37      	subs	r7, r6, #4
 800be0c:	4682      	mov	sl, r0
 800be0e:	4690      	mov	r8, r2
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	f846 5c04 	str.w	r5, [r6, #-4]
 800be16:	46b9      	mov	r9, r7
 800be18:	463c      	mov	r4, r7
 800be1a:	9502      	str	r5, [sp, #8]
 800be1c:	46ab      	mov	fp, r5
 800be1e:	784a      	ldrb	r2, [r1, #1]
 800be20:	1c4b      	adds	r3, r1, #1
 800be22:	9303      	str	r3, [sp, #12]
 800be24:	b342      	cbz	r2, 800be78 <__hexnan+0x88>
 800be26:	4610      	mov	r0, r2
 800be28:	9105      	str	r1, [sp, #20]
 800be2a:	9204      	str	r2, [sp, #16]
 800be2c:	f7ff fd94 	bl	800b958 <__hexdig_fun>
 800be30:	2800      	cmp	r0, #0
 800be32:	d151      	bne.n	800bed8 <__hexnan+0xe8>
 800be34:	9a04      	ldr	r2, [sp, #16]
 800be36:	9905      	ldr	r1, [sp, #20]
 800be38:	2a20      	cmp	r2, #32
 800be3a:	d818      	bhi.n	800be6e <__hexnan+0x7e>
 800be3c:	9b02      	ldr	r3, [sp, #8]
 800be3e:	459b      	cmp	fp, r3
 800be40:	dd13      	ble.n	800be6a <__hexnan+0x7a>
 800be42:	454c      	cmp	r4, r9
 800be44:	d206      	bcs.n	800be54 <__hexnan+0x64>
 800be46:	2d07      	cmp	r5, #7
 800be48:	dc04      	bgt.n	800be54 <__hexnan+0x64>
 800be4a:	462a      	mov	r2, r5
 800be4c:	4649      	mov	r1, r9
 800be4e:	4620      	mov	r0, r4
 800be50:	f7ff ffa8 	bl	800bda4 <L_shift>
 800be54:	4544      	cmp	r4, r8
 800be56:	d952      	bls.n	800befe <__hexnan+0x10e>
 800be58:	2300      	movs	r3, #0
 800be5a:	f1a4 0904 	sub.w	r9, r4, #4
 800be5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800be62:	f8cd b008 	str.w	fp, [sp, #8]
 800be66:	464c      	mov	r4, r9
 800be68:	461d      	mov	r5, r3
 800be6a:	9903      	ldr	r1, [sp, #12]
 800be6c:	e7d7      	b.n	800be1e <__hexnan+0x2e>
 800be6e:	2a29      	cmp	r2, #41	@ 0x29
 800be70:	d157      	bne.n	800bf22 <__hexnan+0x132>
 800be72:	3102      	adds	r1, #2
 800be74:	f8ca 1000 	str.w	r1, [sl]
 800be78:	f1bb 0f00 	cmp.w	fp, #0
 800be7c:	d051      	beq.n	800bf22 <__hexnan+0x132>
 800be7e:	454c      	cmp	r4, r9
 800be80:	d206      	bcs.n	800be90 <__hexnan+0xa0>
 800be82:	2d07      	cmp	r5, #7
 800be84:	dc04      	bgt.n	800be90 <__hexnan+0xa0>
 800be86:	462a      	mov	r2, r5
 800be88:	4649      	mov	r1, r9
 800be8a:	4620      	mov	r0, r4
 800be8c:	f7ff ff8a 	bl	800bda4 <L_shift>
 800be90:	4544      	cmp	r4, r8
 800be92:	d936      	bls.n	800bf02 <__hexnan+0x112>
 800be94:	f1a8 0204 	sub.w	r2, r8, #4
 800be98:	4623      	mov	r3, r4
 800be9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800be9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bea2:	429f      	cmp	r7, r3
 800bea4:	d2f9      	bcs.n	800be9a <__hexnan+0xaa>
 800bea6:	1b3b      	subs	r3, r7, r4
 800bea8:	f023 0303 	bic.w	r3, r3, #3
 800beac:	3304      	adds	r3, #4
 800beae:	3401      	adds	r4, #1
 800beb0:	3e03      	subs	r6, #3
 800beb2:	42b4      	cmp	r4, r6
 800beb4:	bf88      	it	hi
 800beb6:	2304      	movhi	r3, #4
 800beb8:	4443      	add	r3, r8
 800beba:	2200      	movs	r2, #0
 800bebc:	f843 2b04 	str.w	r2, [r3], #4
 800bec0:	429f      	cmp	r7, r3
 800bec2:	d2fb      	bcs.n	800bebc <__hexnan+0xcc>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	b91b      	cbnz	r3, 800bed0 <__hexnan+0xe0>
 800bec8:	4547      	cmp	r7, r8
 800beca:	d128      	bne.n	800bf1e <__hexnan+0x12e>
 800becc:	2301      	movs	r3, #1
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	2005      	movs	r0, #5
 800bed2:	b007      	add	sp, #28
 800bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed8:	3501      	adds	r5, #1
 800beda:	2d08      	cmp	r5, #8
 800bedc:	f10b 0b01 	add.w	fp, fp, #1
 800bee0:	dd06      	ble.n	800bef0 <__hexnan+0x100>
 800bee2:	4544      	cmp	r4, r8
 800bee4:	d9c1      	bls.n	800be6a <__hexnan+0x7a>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f844 3c04 	str.w	r3, [r4, #-4]
 800beec:	2501      	movs	r5, #1
 800beee:	3c04      	subs	r4, #4
 800bef0:	6822      	ldr	r2, [r4, #0]
 800bef2:	f000 000f 	and.w	r0, r0, #15
 800bef6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800befa:	6020      	str	r0, [r4, #0]
 800befc:	e7b5      	b.n	800be6a <__hexnan+0x7a>
 800befe:	2508      	movs	r5, #8
 800bf00:	e7b3      	b.n	800be6a <__hexnan+0x7a>
 800bf02:	9b01      	ldr	r3, [sp, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0dd      	beq.n	800bec4 <__hexnan+0xd4>
 800bf08:	f1c3 0320 	rsb	r3, r3, #32
 800bf0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf10:	40da      	lsrs	r2, r3
 800bf12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bf16:	4013      	ands	r3, r2
 800bf18:	f846 3c04 	str.w	r3, [r6, #-4]
 800bf1c:	e7d2      	b.n	800bec4 <__hexnan+0xd4>
 800bf1e:	3f04      	subs	r7, #4
 800bf20:	e7d0      	b.n	800bec4 <__hexnan+0xd4>
 800bf22:	2004      	movs	r0, #4
 800bf24:	e7d5      	b.n	800bed2 <__hexnan+0xe2>

0800bf26 <__ascii_mbtowc>:
 800bf26:	b082      	sub	sp, #8
 800bf28:	b901      	cbnz	r1, 800bf2c <__ascii_mbtowc+0x6>
 800bf2a:	a901      	add	r1, sp, #4
 800bf2c:	b142      	cbz	r2, 800bf40 <__ascii_mbtowc+0x1a>
 800bf2e:	b14b      	cbz	r3, 800bf44 <__ascii_mbtowc+0x1e>
 800bf30:	7813      	ldrb	r3, [r2, #0]
 800bf32:	600b      	str	r3, [r1, #0]
 800bf34:	7812      	ldrb	r2, [r2, #0]
 800bf36:	1e10      	subs	r0, r2, #0
 800bf38:	bf18      	it	ne
 800bf3a:	2001      	movne	r0, #1
 800bf3c:	b002      	add	sp, #8
 800bf3e:	4770      	bx	lr
 800bf40:	4610      	mov	r0, r2
 800bf42:	e7fb      	b.n	800bf3c <__ascii_mbtowc+0x16>
 800bf44:	f06f 0001 	mvn.w	r0, #1
 800bf48:	e7f8      	b.n	800bf3c <__ascii_mbtowc+0x16>

0800bf4a <_realloc_r>:
 800bf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4e:	4680      	mov	r8, r0
 800bf50:	4615      	mov	r5, r2
 800bf52:	460c      	mov	r4, r1
 800bf54:	b921      	cbnz	r1, 800bf60 <_realloc_r+0x16>
 800bf56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	f7fd be60 	b.w	8009c20 <_malloc_r>
 800bf60:	b92a      	cbnz	r2, 800bf6e <_realloc_r+0x24>
 800bf62:	f7fd fde9 	bl	8009b38 <_free_r>
 800bf66:	2400      	movs	r4, #0
 800bf68:	4620      	mov	r0, r4
 800bf6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6e:	f000 f840 	bl	800bff2 <_malloc_usable_size_r>
 800bf72:	4285      	cmp	r5, r0
 800bf74:	4606      	mov	r6, r0
 800bf76:	d802      	bhi.n	800bf7e <_realloc_r+0x34>
 800bf78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bf7c:	d8f4      	bhi.n	800bf68 <_realloc_r+0x1e>
 800bf7e:	4629      	mov	r1, r5
 800bf80:	4640      	mov	r0, r8
 800bf82:	f7fd fe4d 	bl	8009c20 <_malloc_r>
 800bf86:	4607      	mov	r7, r0
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d0ec      	beq.n	800bf66 <_realloc_r+0x1c>
 800bf8c:	42b5      	cmp	r5, r6
 800bf8e:	462a      	mov	r2, r5
 800bf90:	4621      	mov	r1, r4
 800bf92:	bf28      	it	cs
 800bf94:	4632      	movcs	r2, r6
 800bf96:	f7ff fc45 	bl	800b824 <memcpy>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	f7fd fdcb 	bl	8009b38 <_free_r>
 800bfa2:	463c      	mov	r4, r7
 800bfa4:	e7e0      	b.n	800bf68 <_realloc_r+0x1e>

0800bfa6 <__ascii_wctomb>:
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	b141      	cbz	r1, 800bfbe <__ascii_wctomb+0x18>
 800bfac:	2aff      	cmp	r2, #255	@ 0xff
 800bfae:	d904      	bls.n	800bfba <__ascii_wctomb+0x14>
 800bfb0:	228a      	movs	r2, #138	@ 0x8a
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb8:	4770      	bx	lr
 800bfba:	700a      	strb	r2, [r1, #0]
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	4770      	bx	lr

0800bfc0 <fiprintf>:
 800bfc0:	b40e      	push	{r1, r2, r3}
 800bfc2:	b503      	push	{r0, r1, lr}
 800bfc4:	4601      	mov	r1, r0
 800bfc6:	ab03      	add	r3, sp, #12
 800bfc8:	4805      	ldr	r0, [pc, #20]	@ (800bfe0 <fiprintf+0x20>)
 800bfca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfce:	6800      	ldr	r0, [r0, #0]
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	f000 f83f 	bl	800c054 <_vfiprintf_r>
 800bfd6:	b002      	add	sp, #8
 800bfd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfdc:	b003      	add	sp, #12
 800bfde:	4770      	bx	lr
 800bfe0:	20000034 	.word	0x20000034

0800bfe4 <abort>:
 800bfe4:	b508      	push	{r3, lr}
 800bfe6:	2006      	movs	r0, #6
 800bfe8:	f000 fa08 	bl	800c3fc <raise>
 800bfec:	2001      	movs	r0, #1
 800bfee:	f7f5 fd33 	bl	8001a58 <_exit>

0800bff2 <_malloc_usable_size_r>:
 800bff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff6:	1f18      	subs	r0, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bfbc      	itt	lt
 800bffc:	580b      	ldrlt	r3, [r1, r0]
 800bffe:	18c0      	addlt	r0, r0, r3
 800c000:	4770      	bx	lr

0800c002 <__sfputc_r>:
 800c002:	6893      	ldr	r3, [r2, #8]
 800c004:	3b01      	subs	r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	b410      	push	{r4}
 800c00a:	6093      	str	r3, [r2, #8]
 800c00c:	da08      	bge.n	800c020 <__sfputc_r+0x1e>
 800c00e:	6994      	ldr	r4, [r2, #24]
 800c010:	42a3      	cmp	r3, r4
 800c012:	db01      	blt.n	800c018 <__sfputc_r+0x16>
 800c014:	290a      	cmp	r1, #10
 800c016:	d103      	bne.n	800c020 <__sfputc_r+0x1e>
 800c018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c01c:	f000 b932 	b.w	800c284 <__swbuf_r>
 800c020:	6813      	ldr	r3, [r2, #0]
 800c022:	1c58      	adds	r0, r3, #1
 800c024:	6010      	str	r0, [r2, #0]
 800c026:	7019      	strb	r1, [r3, #0]
 800c028:	4608      	mov	r0, r1
 800c02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <__sfputs_r>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	4606      	mov	r6, r0
 800c034:	460f      	mov	r7, r1
 800c036:	4614      	mov	r4, r2
 800c038:	18d5      	adds	r5, r2, r3
 800c03a:	42ac      	cmp	r4, r5
 800c03c:	d101      	bne.n	800c042 <__sfputs_r+0x12>
 800c03e:	2000      	movs	r0, #0
 800c040:	e007      	b.n	800c052 <__sfputs_r+0x22>
 800c042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c046:	463a      	mov	r2, r7
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff ffda 	bl	800c002 <__sfputc_r>
 800c04e:	1c43      	adds	r3, r0, #1
 800c050:	d1f3      	bne.n	800c03a <__sfputs_r+0xa>
 800c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c054 <_vfiprintf_r>:
 800c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	460d      	mov	r5, r1
 800c05a:	b09d      	sub	sp, #116	@ 0x74
 800c05c:	4614      	mov	r4, r2
 800c05e:	4698      	mov	r8, r3
 800c060:	4606      	mov	r6, r0
 800c062:	b118      	cbz	r0, 800c06c <_vfiprintf_r+0x18>
 800c064:	6a03      	ldr	r3, [r0, #32]
 800c066:	b90b      	cbnz	r3, 800c06c <_vfiprintf_r+0x18>
 800c068:	f7fc fdc4 	bl	8008bf4 <__sinit>
 800c06c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c06e:	07d9      	lsls	r1, r3, #31
 800c070:	d405      	bmi.n	800c07e <_vfiprintf_r+0x2a>
 800c072:	89ab      	ldrh	r3, [r5, #12]
 800c074:	059a      	lsls	r2, r3, #22
 800c076:	d402      	bmi.n	800c07e <_vfiprintf_r+0x2a>
 800c078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c07a:	f7fc ff06 	bl	8008e8a <__retarget_lock_acquire_recursive>
 800c07e:	89ab      	ldrh	r3, [r5, #12]
 800c080:	071b      	lsls	r3, r3, #28
 800c082:	d501      	bpl.n	800c088 <_vfiprintf_r+0x34>
 800c084:	692b      	ldr	r3, [r5, #16]
 800c086:	b99b      	cbnz	r3, 800c0b0 <_vfiprintf_r+0x5c>
 800c088:	4629      	mov	r1, r5
 800c08a:	4630      	mov	r0, r6
 800c08c:	f000 f938 	bl	800c300 <__swsetup_r>
 800c090:	b170      	cbz	r0, 800c0b0 <_vfiprintf_r+0x5c>
 800c092:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c094:	07dc      	lsls	r4, r3, #31
 800c096:	d504      	bpl.n	800c0a2 <_vfiprintf_r+0x4e>
 800c098:	f04f 30ff 	mov.w	r0, #4294967295
 800c09c:	b01d      	add	sp, #116	@ 0x74
 800c09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a2:	89ab      	ldrh	r3, [r5, #12]
 800c0a4:	0598      	lsls	r0, r3, #22
 800c0a6:	d4f7      	bmi.n	800c098 <_vfiprintf_r+0x44>
 800c0a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0aa:	f7fc feef 	bl	8008e8c <__retarget_lock_release_recursive>
 800c0ae:	e7f3      	b.n	800c098 <_vfiprintf_r+0x44>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0b4:	2320      	movs	r3, #32
 800c0b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0be:	2330      	movs	r3, #48	@ 0x30
 800c0c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c270 <_vfiprintf_r+0x21c>
 800c0c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0c8:	f04f 0901 	mov.w	r9, #1
 800c0cc:	4623      	mov	r3, r4
 800c0ce:	469a      	mov	sl, r3
 800c0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0d4:	b10a      	cbz	r2, 800c0da <_vfiprintf_r+0x86>
 800c0d6:	2a25      	cmp	r2, #37	@ 0x25
 800c0d8:	d1f9      	bne.n	800c0ce <_vfiprintf_r+0x7a>
 800c0da:	ebba 0b04 	subs.w	fp, sl, r4
 800c0de:	d00b      	beq.n	800c0f8 <_vfiprintf_r+0xa4>
 800c0e0:	465b      	mov	r3, fp
 800c0e2:	4622      	mov	r2, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f7ff ffa2 	bl	800c030 <__sfputs_r>
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	f000 80a7 	beq.w	800c240 <_vfiprintf_r+0x1ec>
 800c0f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0f4:	445a      	add	r2, fp
 800c0f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 809f 	beq.w	800c240 <_vfiprintf_r+0x1ec>
 800c102:	2300      	movs	r3, #0
 800c104:	f04f 32ff 	mov.w	r2, #4294967295
 800c108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c10c:	f10a 0a01 	add.w	sl, sl, #1
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	9307      	str	r3, [sp, #28]
 800c114:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c118:	931a      	str	r3, [sp, #104]	@ 0x68
 800c11a:	4654      	mov	r4, sl
 800c11c:	2205      	movs	r2, #5
 800c11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c122:	4853      	ldr	r0, [pc, #332]	@ (800c270 <_vfiprintf_r+0x21c>)
 800c124:	f7f4 f85c 	bl	80001e0 <memchr>
 800c128:	9a04      	ldr	r2, [sp, #16]
 800c12a:	b9d8      	cbnz	r0, 800c164 <_vfiprintf_r+0x110>
 800c12c:	06d1      	lsls	r1, r2, #27
 800c12e:	bf44      	itt	mi
 800c130:	2320      	movmi	r3, #32
 800c132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c136:	0713      	lsls	r3, r2, #28
 800c138:	bf44      	itt	mi
 800c13a:	232b      	movmi	r3, #43	@ 0x2b
 800c13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c140:	f89a 3000 	ldrb.w	r3, [sl]
 800c144:	2b2a      	cmp	r3, #42	@ 0x2a
 800c146:	d015      	beq.n	800c174 <_vfiprintf_r+0x120>
 800c148:	9a07      	ldr	r2, [sp, #28]
 800c14a:	4654      	mov	r4, sl
 800c14c:	2000      	movs	r0, #0
 800c14e:	f04f 0c0a 	mov.w	ip, #10
 800c152:	4621      	mov	r1, r4
 800c154:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c158:	3b30      	subs	r3, #48	@ 0x30
 800c15a:	2b09      	cmp	r3, #9
 800c15c:	d94b      	bls.n	800c1f6 <_vfiprintf_r+0x1a2>
 800c15e:	b1b0      	cbz	r0, 800c18e <_vfiprintf_r+0x13a>
 800c160:	9207      	str	r2, [sp, #28]
 800c162:	e014      	b.n	800c18e <_vfiprintf_r+0x13a>
 800c164:	eba0 0308 	sub.w	r3, r0, r8
 800c168:	fa09 f303 	lsl.w	r3, r9, r3
 800c16c:	4313      	orrs	r3, r2
 800c16e:	9304      	str	r3, [sp, #16]
 800c170:	46a2      	mov	sl, r4
 800c172:	e7d2      	b.n	800c11a <_vfiprintf_r+0xc6>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	1d19      	adds	r1, r3, #4
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	9103      	str	r1, [sp, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	bfbb      	ittet	lt
 800c180:	425b      	neglt	r3, r3
 800c182:	f042 0202 	orrlt.w	r2, r2, #2
 800c186:	9307      	strge	r3, [sp, #28]
 800c188:	9307      	strlt	r3, [sp, #28]
 800c18a:	bfb8      	it	lt
 800c18c:	9204      	strlt	r2, [sp, #16]
 800c18e:	7823      	ldrb	r3, [r4, #0]
 800c190:	2b2e      	cmp	r3, #46	@ 0x2e
 800c192:	d10a      	bne.n	800c1aa <_vfiprintf_r+0x156>
 800c194:	7863      	ldrb	r3, [r4, #1]
 800c196:	2b2a      	cmp	r3, #42	@ 0x2a
 800c198:	d132      	bne.n	800c200 <_vfiprintf_r+0x1ac>
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	1d1a      	adds	r2, r3, #4
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	9203      	str	r2, [sp, #12]
 800c1a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1a6:	3402      	adds	r4, #2
 800c1a8:	9305      	str	r3, [sp, #20]
 800c1aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c280 <_vfiprintf_r+0x22c>
 800c1ae:	7821      	ldrb	r1, [r4, #0]
 800c1b0:	2203      	movs	r2, #3
 800c1b2:	4650      	mov	r0, sl
 800c1b4:	f7f4 f814 	bl	80001e0 <memchr>
 800c1b8:	b138      	cbz	r0, 800c1ca <_vfiprintf_r+0x176>
 800c1ba:	9b04      	ldr	r3, [sp, #16]
 800c1bc:	eba0 000a 	sub.w	r0, r0, sl
 800c1c0:	2240      	movs	r2, #64	@ 0x40
 800c1c2:	4082      	lsls	r2, r0
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	3401      	adds	r4, #1
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ce:	4829      	ldr	r0, [pc, #164]	@ (800c274 <_vfiprintf_r+0x220>)
 800c1d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1d4:	2206      	movs	r2, #6
 800c1d6:	f7f4 f803 	bl	80001e0 <memchr>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d03f      	beq.n	800c25e <_vfiprintf_r+0x20a>
 800c1de:	4b26      	ldr	r3, [pc, #152]	@ (800c278 <_vfiprintf_r+0x224>)
 800c1e0:	bb1b      	cbnz	r3, 800c22a <_vfiprintf_r+0x1d6>
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	3307      	adds	r3, #7
 800c1e6:	f023 0307 	bic.w	r3, r3, #7
 800c1ea:	3308      	adds	r3, #8
 800c1ec:	9303      	str	r3, [sp, #12]
 800c1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f0:	443b      	add	r3, r7
 800c1f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f4:	e76a      	b.n	800c0cc <_vfiprintf_r+0x78>
 800c1f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	2001      	movs	r0, #1
 800c1fe:	e7a8      	b.n	800c152 <_vfiprintf_r+0xfe>
 800c200:	2300      	movs	r3, #0
 800c202:	3401      	adds	r4, #1
 800c204:	9305      	str	r3, [sp, #20]
 800c206:	4619      	mov	r1, r3
 800c208:	f04f 0c0a 	mov.w	ip, #10
 800c20c:	4620      	mov	r0, r4
 800c20e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c212:	3a30      	subs	r2, #48	@ 0x30
 800c214:	2a09      	cmp	r2, #9
 800c216:	d903      	bls.n	800c220 <_vfiprintf_r+0x1cc>
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d0c6      	beq.n	800c1aa <_vfiprintf_r+0x156>
 800c21c:	9105      	str	r1, [sp, #20]
 800c21e:	e7c4      	b.n	800c1aa <_vfiprintf_r+0x156>
 800c220:	fb0c 2101 	mla	r1, ip, r1, r2
 800c224:	4604      	mov	r4, r0
 800c226:	2301      	movs	r3, #1
 800c228:	e7f0      	b.n	800c20c <_vfiprintf_r+0x1b8>
 800c22a:	ab03      	add	r3, sp, #12
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	462a      	mov	r2, r5
 800c230:	4b12      	ldr	r3, [pc, #72]	@ (800c27c <_vfiprintf_r+0x228>)
 800c232:	a904      	add	r1, sp, #16
 800c234:	4630      	mov	r0, r6
 800c236:	f7fb fe85 	bl	8007f44 <_printf_float>
 800c23a:	4607      	mov	r7, r0
 800c23c:	1c78      	adds	r0, r7, #1
 800c23e:	d1d6      	bne.n	800c1ee <_vfiprintf_r+0x19a>
 800c240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c242:	07d9      	lsls	r1, r3, #31
 800c244:	d405      	bmi.n	800c252 <_vfiprintf_r+0x1fe>
 800c246:	89ab      	ldrh	r3, [r5, #12]
 800c248:	059a      	lsls	r2, r3, #22
 800c24a:	d402      	bmi.n	800c252 <_vfiprintf_r+0x1fe>
 800c24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c24e:	f7fc fe1d 	bl	8008e8c <__retarget_lock_release_recursive>
 800c252:	89ab      	ldrh	r3, [r5, #12]
 800c254:	065b      	lsls	r3, r3, #25
 800c256:	f53f af1f 	bmi.w	800c098 <_vfiprintf_r+0x44>
 800c25a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c25c:	e71e      	b.n	800c09c <_vfiprintf_r+0x48>
 800c25e:	ab03      	add	r3, sp, #12
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	462a      	mov	r2, r5
 800c264:	4b05      	ldr	r3, [pc, #20]	@ (800c27c <_vfiprintf_r+0x228>)
 800c266:	a904      	add	r1, sp, #16
 800c268:	4630      	mov	r0, r6
 800c26a:	f7fc f903 	bl	8008474 <_printf_i>
 800c26e:	e7e4      	b.n	800c23a <_vfiprintf_r+0x1e6>
 800c270:	0800c949 	.word	0x0800c949
 800c274:	0800c953 	.word	0x0800c953
 800c278:	08007f45 	.word	0x08007f45
 800c27c:	0800c031 	.word	0x0800c031
 800c280:	0800c94f 	.word	0x0800c94f

0800c284 <__swbuf_r>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	460e      	mov	r6, r1
 800c288:	4614      	mov	r4, r2
 800c28a:	4605      	mov	r5, r0
 800c28c:	b118      	cbz	r0, 800c296 <__swbuf_r+0x12>
 800c28e:	6a03      	ldr	r3, [r0, #32]
 800c290:	b90b      	cbnz	r3, 800c296 <__swbuf_r+0x12>
 800c292:	f7fc fcaf 	bl	8008bf4 <__sinit>
 800c296:	69a3      	ldr	r3, [r4, #24]
 800c298:	60a3      	str	r3, [r4, #8]
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	071a      	lsls	r2, r3, #28
 800c29e:	d501      	bpl.n	800c2a4 <__swbuf_r+0x20>
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	b943      	cbnz	r3, 800c2b6 <__swbuf_r+0x32>
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 f82a 	bl	800c300 <__swsetup_r>
 800c2ac:	b118      	cbz	r0, 800c2b6 <__swbuf_r+0x32>
 800c2ae:	f04f 37ff 	mov.w	r7, #4294967295
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	6922      	ldr	r2, [r4, #16]
 800c2ba:	1a98      	subs	r0, r3, r2
 800c2bc:	6963      	ldr	r3, [r4, #20]
 800c2be:	b2f6      	uxtb	r6, r6
 800c2c0:	4283      	cmp	r3, r0
 800c2c2:	4637      	mov	r7, r6
 800c2c4:	dc05      	bgt.n	800c2d2 <__swbuf_r+0x4e>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff fa47 	bl	800b75c <_fflush_r>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d1ed      	bne.n	800c2ae <__swbuf_r+0x2a>
 800c2d2:	68a3      	ldr	r3, [r4, #8]
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	60a3      	str	r3, [r4, #8]
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	6022      	str	r2, [r4, #0]
 800c2de:	701e      	strb	r6, [r3, #0]
 800c2e0:	6962      	ldr	r2, [r4, #20]
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d004      	beq.n	800c2f2 <__swbuf_r+0x6e>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	07db      	lsls	r3, r3, #31
 800c2ec:	d5e1      	bpl.n	800c2b2 <__swbuf_r+0x2e>
 800c2ee:	2e0a      	cmp	r6, #10
 800c2f0:	d1df      	bne.n	800c2b2 <__swbuf_r+0x2e>
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f7ff fa31 	bl	800b75c <_fflush_r>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d0d9      	beq.n	800c2b2 <__swbuf_r+0x2e>
 800c2fe:	e7d6      	b.n	800c2ae <__swbuf_r+0x2a>

0800c300 <__swsetup_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4b29      	ldr	r3, [pc, #164]	@ (800c3a8 <__swsetup_r+0xa8>)
 800c304:	4605      	mov	r5, r0
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	460c      	mov	r4, r1
 800c30a:	b118      	cbz	r0, 800c314 <__swsetup_r+0x14>
 800c30c:	6a03      	ldr	r3, [r0, #32]
 800c30e:	b90b      	cbnz	r3, 800c314 <__swsetup_r+0x14>
 800c310:	f7fc fc70 	bl	8008bf4 <__sinit>
 800c314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c318:	0719      	lsls	r1, r3, #28
 800c31a:	d422      	bmi.n	800c362 <__swsetup_r+0x62>
 800c31c:	06da      	lsls	r2, r3, #27
 800c31e:	d407      	bmi.n	800c330 <__swsetup_r+0x30>
 800c320:	2209      	movs	r2, #9
 800c322:	602a      	str	r2, [r5, #0]
 800c324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	f04f 30ff 	mov.w	r0, #4294967295
 800c32e:	e033      	b.n	800c398 <__swsetup_r+0x98>
 800c330:	0758      	lsls	r0, r3, #29
 800c332:	d512      	bpl.n	800c35a <__swsetup_r+0x5a>
 800c334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c336:	b141      	cbz	r1, 800c34a <__swsetup_r+0x4a>
 800c338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c33c:	4299      	cmp	r1, r3
 800c33e:	d002      	beq.n	800c346 <__swsetup_r+0x46>
 800c340:	4628      	mov	r0, r5
 800c342:	f7fd fbf9 	bl	8009b38 <_free_r>
 800c346:	2300      	movs	r3, #0
 800c348:	6363      	str	r3, [r4, #52]	@ 0x34
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	2300      	movs	r3, #0
 800c354:	6063      	str	r3, [r4, #4]
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f043 0308 	orr.w	r3, r3, #8
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	b94b      	cbnz	r3, 800c37a <__swsetup_r+0x7a>
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c370:	d003      	beq.n	800c37a <__swsetup_r+0x7a>
 800c372:	4621      	mov	r1, r4
 800c374:	4628      	mov	r0, r5
 800c376:	f000 f883 	bl	800c480 <__smakebuf_r>
 800c37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37e:	f013 0201 	ands.w	r2, r3, #1
 800c382:	d00a      	beq.n	800c39a <__swsetup_r+0x9a>
 800c384:	2200      	movs	r2, #0
 800c386:	60a2      	str	r2, [r4, #8]
 800c388:	6962      	ldr	r2, [r4, #20]
 800c38a:	4252      	negs	r2, r2
 800c38c:	61a2      	str	r2, [r4, #24]
 800c38e:	6922      	ldr	r2, [r4, #16]
 800c390:	b942      	cbnz	r2, 800c3a4 <__swsetup_r+0xa4>
 800c392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c396:	d1c5      	bne.n	800c324 <__swsetup_r+0x24>
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	0799      	lsls	r1, r3, #30
 800c39c:	bf58      	it	pl
 800c39e:	6962      	ldrpl	r2, [r4, #20]
 800c3a0:	60a2      	str	r2, [r4, #8]
 800c3a2:	e7f4      	b.n	800c38e <__swsetup_r+0x8e>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	e7f7      	b.n	800c398 <__swsetup_r+0x98>
 800c3a8:	20000034 	.word	0x20000034

0800c3ac <_raise_r>:
 800c3ac:	291f      	cmp	r1, #31
 800c3ae:	b538      	push	{r3, r4, r5, lr}
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	d904      	bls.n	800c3c0 <_raise_r+0x14>
 800c3b6:	2316      	movs	r3, #22
 800c3b8:	6003      	str	r3, [r0, #0]
 800c3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c3be:	bd38      	pop	{r3, r4, r5, pc}
 800c3c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3c2:	b112      	cbz	r2, 800c3ca <_raise_r+0x1e>
 800c3c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3c8:	b94b      	cbnz	r3, 800c3de <_raise_r+0x32>
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f000 f830 	bl	800c430 <_getpid_r>
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3da:	f000 b817 	b.w	800c40c <_kill_r>
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d00a      	beq.n	800c3f8 <_raise_r+0x4c>
 800c3e2:	1c59      	adds	r1, r3, #1
 800c3e4:	d103      	bne.n	800c3ee <_raise_r+0x42>
 800c3e6:	2316      	movs	r3, #22
 800c3e8:	6003      	str	r3, [r0, #0]
 800c3ea:	2001      	movs	r0, #1
 800c3ec:	e7e7      	b.n	800c3be <_raise_r+0x12>
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	4798      	blx	r3
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e7e0      	b.n	800c3be <_raise_r+0x12>

0800c3fc <raise>:
 800c3fc:	4b02      	ldr	r3, [pc, #8]	@ (800c408 <raise+0xc>)
 800c3fe:	4601      	mov	r1, r0
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	f7ff bfd3 	b.w	800c3ac <_raise_r>
 800c406:	bf00      	nop
 800c408:	20000034 	.word	0x20000034

0800c40c <_kill_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d07      	ldr	r5, [pc, #28]	@ (800c42c <_kill_r+0x20>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	4611      	mov	r1, r2
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	f7f5 fb0d 	bl	8001a38 <_kill>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d102      	bne.n	800c428 <_kill_r+0x1c>
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	b103      	cbz	r3, 800c428 <_kill_r+0x1c>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	bf00      	nop
 800c42c:	2000057c 	.word	0x2000057c

0800c430 <_getpid_r>:
 800c430:	f7f5 bafa 	b.w	8001a28 <_getpid>

0800c434 <__swhatbuf_r>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	460c      	mov	r4, r1
 800c438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c43c:	2900      	cmp	r1, #0
 800c43e:	b096      	sub	sp, #88	@ 0x58
 800c440:	4615      	mov	r5, r2
 800c442:	461e      	mov	r6, r3
 800c444:	da0d      	bge.n	800c462 <__swhatbuf_r+0x2e>
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c44c:	f04f 0100 	mov.w	r1, #0
 800c450:	bf14      	ite	ne
 800c452:	2340      	movne	r3, #64	@ 0x40
 800c454:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c458:	2000      	movs	r0, #0
 800c45a:	6031      	str	r1, [r6, #0]
 800c45c:	602b      	str	r3, [r5, #0]
 800c45e:	b016      	add	sp, #88	@ 0x58
 800c460:	bd70      	pop	{r4, r5, r6, pc}
 800c462:	466a      	mov	r2, sp
 800c464:	f000 f848 	bl	800c4f8 <_fstat_r>
 800c468:	2800      	cmp	r0, #0
 800c46a:	dbec      	blt.n	800c446 <__swhatbuf_r+0x12>
 800c46c:	9901      	ldr	r1, [sp, #4]
 800c46e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c472:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c476:	4259      	negs	r1, r3
 800c478:	4159      	adcs	r1, r3
 800c47a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c47e:	e7eb      	b.n	800c458 <__swhatbuf_r+0x24>

0800c480 <__smakebuf_r>:
 800c480:	898b      	ldrh	r3, [r1, #12]
 800c482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c484:	079d      	lsls	r5, r3, #30
 800c486:	4606      	mov	r6, r0
 800c488:	460c      	mov	r4, r1
 800c48a:	d507      	bpl.n	800c49c <__smakebuf_r+0x1c>
 800c48c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	6123      	str	r3, [r4, #16]
 800c494:	2301      	movs	r3, #1
 800c496:	6163      	str	r3, [r4, #20]
 800c498:	b003      	add	sp, #12
 800c49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c49c:	ab01      	add	r3, sp, #4
 800c49e:	466a      	mov	r2, sp
 800c4a0:	f7ff ffc8 	bl	800c434 <__swhatbuf_r>
 800c4a4:	9f00      	ldr	r7, [sp, #0]
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f7fd fbb8 	bl	8009c20 <_malloc_r>
 800c4b0:	b948      	cbnz	r0, 800c4c6 <__smakebuf_r+0x46>
 800c4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b6:	059a      	lsls	r2, r3, #22
 800c4b8:	d4ee      	bmi.n	800c498 <__smakebuf_r+0x18>
 800c4ba:	f023 0303 	bic.w	r3, r3, #3
 800c4be:	f043 0302 	orr.w	r3, r3, #2
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	e7e2      	b.n	800c48c <__smakebuf_r+0xc>
 800c4c6:	89a3      	ldrh	r3, [r4, #12]
 800c4c8:	6020      	str	r0, [r4, #0]
 800c4ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ce:	81a3      	strh	r3, [r4, #12]
 800c4d0:	9b01      	ldr	r3, [sp, #4]
 800c4d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4d6:	b15b      	cbz	r3, 800c4f0 <__smakebuf_r+0x70>
 800c4d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f000 f81d 	bl	800c51c <_isatty_r>
 800c4e2:	b128      	cbz	r0, 800c4f0 <__smakebuf_r+0x70>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f023 0303 	bic.w	r3, r3, #3
 800c4ea:	f043 0301 	orr.w	r3, r3, #1
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	431d      	orrs	r5, r3
 800c4f4:	81a5      	strh	r5, [r4, #12]
 800c4f6:	e7cf      	b.n	800c498 <__smakebuf_r+0x18>

0800c4f8 <_fstat_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	@ (800c518 <_fstat_r+0x20>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	4611      	mov	r1, r2
 800c504:	602b      	str	r3, [r5, #0]
 800c506:	f7f5 faf7 	bl	8001af8 <_fstat>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d102      	bne.n	800c514 <_fstat_r+0x1c>
 800c50e:	682b      	ldr	r3, [r5, #0]
 800c510:	b103      	cbz	r3, 800c514 <_fstat_r+0x1c>
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	bd38      	pop	{r3, r4, r5, pc}
 800c516:	bf00      	nop
 800c518:	2000057c 	.word	0x2000057c

0800c51c <_isatty_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d06      	ldr	r5, [pc, #24]	@ (800c538 <_isatty_r+0x1c>)
 800c520:	2300      	movs	r3, #0
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	f7f5 faf6 	bl	8001b18 <_isatty>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_isatty_r+0x1a>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_isatty_r+0x1a>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	2000057c 	.word	0x2000057c

0800c53c <_init>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	bf00      	nop
 800c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c542:	bc08      	pop	{r3}
 800c544:	469e      	mov	lr, r3
 800c546:	4770      	bx	lr

0800c548 <_fini>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	bf00      	nop
 800c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54e:	bc08      	pop	{r3}
 800c550:	469e      	mov	lr, r3
 800c552:	4770      	bx	lr
