
UART_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004188  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004394  08004394  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800439c  0800439c  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800439c  0800439c  0000539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043a0  080043a0  000053a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080043a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000084  08004428  00006084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004428  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cf8  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001985  00000000  00000000  0000edac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00010738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c4  00000000  00000000  00010ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c04  00000000  00000000  00011494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b08  00000000  00000000  00027098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855af  00000000  00000000  00030ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b614f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e4  00000000  00000000  000b6194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000b8478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004310 	.word	0x08004310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08004310 	.word	0x08004310

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <DWT_Delay_Init+0x58>)
 800058a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800058e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	4a10      	ldr	r2, [pc, #64]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800059a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <DWT_Delay_Init+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005a2:	f023 0301 	bic.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ba:	bf00      	nop
    __ASM volatile ("NOP");
 80005bc:	bf00      	nop
    __ASM volatile ("NOP");
 80005be:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005c8:	2300      	movs	r3, #0
 80005ca:	e000      	b.n	80005ce <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005cc:	2301      	movs	r3, #1
    }
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000edf0 	.word	0xe000edf0
 80005dc:	e0001000 	.word	0xe0001000

080005e0 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <DWT_Delay_us+0x48>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80005ee:	f002 f8a7 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <DWT_Delay_us+0x4c>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	0c9b      	lsrs	r3, r3, #18
 80005fc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000608:	bf00      	nop
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <DWT_Delay_us+0x48>)
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	429a      	cmp	r2, r3
 800061a:	d3f6      	bcc.n	800060a <DWT_Delay_us+0x2a>
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	431bde83 	.word	0x431bde83

08000630 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000634:	2201      	movs	r2, #1
 8000636:	2102      	movs	r1, #2
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <lcd_enable+0x28>)
 800063a:	f001 fc03 	bl	8001e44 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800063e:	2032      	movs	r0, #50	@ 0x32
 8000640:	f7ff ffce 	bl	80005e0 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2102      	movs	r1, #2
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <lcd_enable+0x28>)
 800064a:	f001 fbfb 	bl	8001e44 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800064e:	2032      	movs	r0, #50	@ 0x32
 8000650:	f7ff ffc6 	bl	80005e0 <DWT_Delay_us>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400

0800065c <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000674:	4816      	ldr	r0, [pc, #88]	@ (80006d0 <lcd_write4+0x74>)
 8000676:	f001 fbe5 	bl	8001e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	105b      	asrs	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068c:	4810      	ldr	r0, [pc, #64]	@ (80006d0 <lcd_write4+0x74>)
 800068e:	f001 fbd9 	bl	8001e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	109b      	asrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <lcd_write4+0x74>)
 80006a6:	f001 fbcd 	bl	8001e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	10db      	asrs	r3, r3, #3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <lcd_write4+0x74>)
 80006be:	f001 fbc1 	bl	8001e44 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 80006c2:	f7ff ffb5 	bl	8000630 <lcd_enable>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400

080006d4 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	091b      	lsrs	r3, r3, #4
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffb9 	bl	800065c <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb5 	bl	800065c <lcd_write4>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <lcd_command+0x24>)
 800070c:	f001 fb9a 	bl	8001e44 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffde 	bl	80006d4 <lcd_write>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020400 	.word	0x40020400

08000724 <lcd_clear>:

void lcd_clear(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff ffe7 	bl	80006fc <lcd_command>
	DWT_Delay_us(2000);
 800072e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000732:	f7ff ff55 	bl	80005e0 <DWT_Delay_us>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <lcd_data+0x24>)
 800074c:	f001 fb7a 	bl	8001e44 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffbe 	bl	80006d4 <lcd_write>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020400 	.word	0x40020400

08000764 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3301      	adds	r3, #1
 8000778:	79ba      	ldrb	r2, [r7, #6]
 800077a:	3201      	adds	r2, #1
 800077c:	fb02 f303 	mul.w	r3, r2, r3
 8000780:	2b4f      	cmp	r3, #79	@ 0x4f
 8000782:	dc10      	bgt.n	80007a6 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	461a      	mov	r2, r3
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	4413      	add	r3, r2
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	b2da      	uxtb	r2, r3
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4413      	add	r3, r2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffab 	bl	80006fc <lcd_command>
	}
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fd12 	bl	80001e0 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 80007c0:	e006      	b.n	80007d0 <lcd_print+0x22>
		lcd_data(*string++);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ffb6 	bl	800073c <lcd_data>
	while (size--){
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	60fa      	str	r2, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f3      	bne.n	80007c2 <lcd_print+0x14>
	}
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <lcd_println+0x6c>)
 80007f2:	f107 0408 	add.w	r4, r7, #8
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	682b      	ldr	r3, [r5, #0]
 80007fe:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fced 	bl	80001e0 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	2b10      	cmp	r3, #16
 800080e:	dd0c      	ble.n	800082a <lcd_println+0x46>
		size = 16;
 8000810:	2310      	movs	r3, #16
 8000812:	61fb      	str	r3, [r7, #28]

	while (size--){
 8000814:	e009      	b.n	800082a <lcd_println+0x46>
		line[size] = string[size];
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	7819      	ldrb	r1, [r3, #0]
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	4413      	add	r3, r2
 8000826:	460a      	mov	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
	while (size--){
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	61fa      	str	r2, [r7, #28]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f0      	bne.n	8000816 <lcd_println+0x32>
	}
	setCursor(0, row);
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	4619      	mov	r1, r3
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ff93 	bl	8000764 <setCursor>
	lcd_print(line);
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffb3 	bl	80007ae <lcd_print>
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bdb0      	pop	{r4, r5, r7, pc}
 8000850:	08004328 	.word	0x08004328

08000854 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	b25b      	sxtb	r3, r3
 800086e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff40 	bl	80006fc <lcd_command>
	for (int i = 0; i<8; i++){
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e009      	b.n	8000896 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff56 	bl	800073c <lcd_data>
	for (int i = 0; i<8; i++){
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b07      	cmp	r3, #7
 800089a:	ddf2      	ble.n	8000882 <writeCustomChar+0x2e>
	}
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 80008ac:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <loadCustomChars+0x30>)
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff ffd0 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80008b4:	4909      	ldr	r1, [pc, #36]	@ (80008dc <loadCustomChars+0x34>)
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff ffcc 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80008bc:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <loadCustomChars+0x38>)
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff ffc8 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80008c4:	4907      	ldr	r1, [pc, #28]	@ (80008e4 <loadCustomChars+0x3c>)
 80008c6:	2004      	movs	r0, #4
 80008c8:	f7ff ffc4 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80008cc:	4906      	ldr	r1, [pc, #24]	@ (80008e8 <loadCustomChars+0x40>)
 80008ce:	2005      	movs	r0, #5
 80008d0:	f7ff ffc0 	bl	8000854 <writeCustomChar>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000010 	.word	0x20000010
 80008e4:	20000018 	.word	0x20000018
 80008e8:	20000020 	.word	0x20000020

080008ec <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80008f0:	2032      	movs	r0, #50	@ 0x32
 80008f2:	f000 fbeb 	bl	80010cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2104      	movs	r1, #4
 80008fa:	4824      	ldr	r0, [pc, #144]	@ (800098c <lcd_initialize+0xa0>)
 80008fc:	f001 faa2 	bl	8001e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	4821      	ldr	r0, [pc, #132]	@ (800098c <lcd_initialize+0xa0>)
 8000906:	f001 fa9d 	bl	8001e44 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 800090a:	f7ff fe39 	bl	8000580 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 800090e:	2003      	movs	r0, #3
 8000910:	f7ff fea4 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 8000914:	2005      	movs	r0, #5
 8000916:	f000 fbd9 	bl	80010cc <HAL_Delay>
	lcd_write4(0x03);
 800091a:	2003      	movs	r0, #3
 800091c:	f7ff fe9e 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 8000920:	2005      	movs	r0, #5
 8000922:	f000 fbd3 	bl	80010cc <HAL_Delay>
	lcd_write4(0x03);
 8000926:	2003      	movs	r0, #3
 8000928:	f7ff fe98 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 800092c:	2005      	movs	r0, #5
 800092e:	f000 fbcd 	bl	80010cc <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fe92 	bl	800065c <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8000938:	2028      	movs	r0, #40	@ 0x28
 800093a:	f7ff fecb 	bl	80006d4 <lcd_write>
	HAL_Delay(5);
 800093e:	2005      	movs	r0, #5
 8000940:	f000 fbc4 	bl	80010cc <HAL_Delay>
	lcd_write(0x08); //display off;
 8000944:	2008      	movs	r0, #8
 8000946:	f7ff fec5 	bl	80006d4 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fec2 	bl	80006d4 <lcd_write>
	HAL_Delay(5);
 8000950:	2005      	movs	r0, #5
 8000952:	f000 fbbb 	bl	80010cc <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 8000956:	2006      	movs	r0, #6
 8000958:	f7ff febc 	bl	80006d4 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 800095c:	2201      	movs	r2, #1
 800095e:	2110      	movs	r1, #16
 8000960:	480b      	ldr	r0, [pc, #44]	@ (8000990 <lcd_initialize+0xa4>)
 8000962:	f001 fa6f 	bl	8001e44 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <lcd_initialize+0xa8>)
 8000968:	220c      	movs	r2, #12
 800096a:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <lcd_initialize+0xa8>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff feaf 	bl	80006d4 <lcd_write>
	lcd_write(0x02); //go home
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff feac 	bl	80006d4 <lcd_write>
	HAL_Delay(2);
 800097c:	2002      	movs	r0, #2
 800097e:	f000 fba5 	bl	80010cc <HAL_Delay>
	loadCustomChars();
 8000982:	f7ff ff91 	bl	80008a8 <loadCustomChars>

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400
 8000990:	40020000 	.word	0x40020000
 8000994:	200000a0 	.word	0x200000a0

08000998 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2110      	movs	r1, #16
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <lcd_backlight_ON+0x14>)
 80009a2:	f001 fa4f 	bl	8001e44 <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020000 	.word	0x40020000

080009b0 <HAL_UART_RxCpltCallback>:

int row = 0;		 // LCD line selector


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if(rx_flag == 0){ // The size information has been just received
 80009b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <HAL_UART_RxCpltCallback+0xb4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d119      	bne.n	80009f4 <HAL_UART_RxCpltCallback+0x44>

		rx_flag = 1;	// Set the received size information flag to 1 (1 = received)
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <HAL_UART_RxCpltCallback+0xb4>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]

		packet_size = (size[0] - 48)*10 + (size[1] - 48); //Integer values in ASCII table correspond to the received ASCII value - 48
 80009c6:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <HAL_UART_RxCpltCallback+0xb8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <HAL_UART_RxCpltCallback+0xb8>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	4413      	add	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	3b10      	subs	r3, #16
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <HAL_UART_RxCpltCallback+0xbc>)
 80009e2:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart2, RxData, packet_size); // Then proceed with data transfer
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <HAL_UART_RxCpltCallback+0xbc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4921      	ldr	r1, [pc, #132]	@ (8000a70 <HAL_UART_RxCpltCallback+0xc0>)
 80009ec:	4821      	ldr	r0, [pc, #132]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc4>)
 80009ee:	f001 ff2b 	bl	8002848 <HAL_UART_Receive_DMA>

	    rx_flag = 0;						// Ready to receive

		HAL_UART_Receive_DMA(&huart2, size, char_size); // Proceed with getting the length of the new data transmission
	}
}
 80009f2:	e033      	b.n	8000a5c <HAL_UART_RxCpltCallback+0xac>
	    for (int i = 0; i < packet_size; i++) { //Convert the received integer data into a string data
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e014      	b.n	8000a24 <HAL_UART_RxCpltCallback+0x74>
			sprintf(&c, "%c", RxData[i]);	//convert data into a char
 80009fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <HAL_UART_RxCpltCallback+0xc0>)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	491c      	ldr	r1, [pc, #112]	@ (8000a78 <HAL_UART_RxCpltCallback+0xc8>)
 8000a06:	481d      	ldr	r0, [pc, #116]	@ (8000a7c <HAL_UART_RxCpltCallback+0xcc>)
 8000a08:	f002 ffd2 	bl	80039b0 <siprintf>
	        strcat(string, &c);				//Add to the string the new letter (or number/symbol)
 8000a0c:	491b      	ldr	r1, [pc, #108]	@ (8000a7c <HAL_UART_RxCpltCallback+0xcc>)
 8000a0e:	481c      	ldr	r0, [pc, #112]	@ (8000a80 <HAL_UART_RxCpltCallback+0xd0>)
 8000a10:	f002 fff6 	bl	8003a00 <strcat>
	        RxData[i] = 0;					//Empty the RxData[i]
 8000a14:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <HAL_UART_RxCpltCallback+0xc0>)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < packet_size; i++) { //Convert the received integer data into a string data
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_RxCpltCallback+0xbc>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	dbe4      	blt.n	80009fa <HAL_UART_RxCpltCallback+0x4a>
	    lcd_clear();						// Clear the display
 8000a30:	f7ff fe78 	bl	8000724 <lcd_clear>
	    lcd_println(string, row);			// Print the new word
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <HAL_UART_RxCpltCallback+0xd4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <HAL_UART_RxCpltCallback+0xd0>)
 8000a3e:	f7ff fed1 	bl	80007e4 <lcd_println>
	    memset(string,0,sizeof(string));	// Delete the string, ready to store the new data burst
 8000a42:	2210      	movs	r2, #16
 8000a44:	2100      	movs	r1, #0
 8000a46:	480e      	ldr	r0, [pc, #56]	@ (8000a80 <HAL_UART_RxCpltCallback+0xd0>)
 8000a48:	f002 ffd2 	bl	80039f0 <memset>
	    rx_flag = 0;						// Ready to receive
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_UART_RxCpltCallback+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart2, size, char_size); // Proceed with getting the length of the new data transmission
 8000a52:	2202      	movs	r2, #2
 8000a54:	4904      	ldr	r1, [pc, #16]	@ (8000a68 <HAL_UART_RxCpltCallback+0xb8>)
 8000a56:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <HAL_UART_RxCpltCallback+0xc4>)
 8000a58:	f001 fef6 	bl	8002848 <HAL_UART_Receive_DMA>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000160 	.word	0x20000160
 8000a68:	2000015c 	.word	0x2000015c
 8000a6c:	2000015e 	.word	0x2000015e
 8000a70:	2000014c 	.word	0x2000014c
 8000a74:	200000a4 	.word	0x200000a4
 8000a78:	0800433c 	.word	0x0800433c
 8000a7c:	20000164 	.word	0x20000164
 8000a80:	20000168 	.word	0x20000168
 8000a84:	20000178 	.word	0x20000178

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 faac 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f818 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f8cc 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a98:	f000 f8aa 	bl	8000bf0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a9c:	f000 f87e 	bl	8000b9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 8000aa0:	f7ff ff24 	bl	80008ec <lcd_initialize>
  lcd_backlight_ON ();
 8000aa4:	f7ff ff78 	bl	8000998 <lcd_backlight_ON>
  lcd_clear();
 8000aa8:	f7ff fe3c 	bl	8000724 <lcd_clear>

  HAL_UART_Receive_DMA(&huart2, size, char_size); // Receive the first information about the
 8000aac:	2202      	movs	r2, #2
 8000aae:	4903      	ldr	r1, [pc, #12]	@ (8000abc <main+0x34>)
 8000ab0:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <main+0x38>)
 8000ab2:	f001 fec9 	bl	8002848 <HAL_UART_Receive_DMA>
  	  	  	  	  	  	  	  	  	  	          // length of the first data transmission
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab6:	bf00      	nop
 8000ab8:	e7fd      	b.n	8000ab6 <main+0x2e>
 8000aba:	bf00      	nop
 8000abc:	2000015c 	.word	0x2000015c
 8000ac0:	200000a4 	.word	0x200000a4

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	@ 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 ff8c 	bl	80039f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a28      	ldr	r2, [pc, #160]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <SystemClock_Config+0xd0>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <SystemClock_Config+0xd4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b10:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <SystemClock_Config+0xd4>)
 8000b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <SystemClock_Config+0xd4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b30:	2302      	movs	r3, #2
 8000b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b34:	2300      	movs	r3, #0
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b42:	2304      	movs	r3, #4
 8000b44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b46:	2307      	movs	r3, #7
 8000b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f992 	bl	8001e78 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b5a:	f000 f8df 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5e:	230f      	movs	r3, #15
 8000b60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b62:	2302      	movs	r3, #2
 8000b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fbf4 	bl	8002368 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b86:	f000 f8c9 	bl	8000d1c <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	@ 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <MX_USART2_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f001 fde8 	bl	80027a8 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f89d 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000a4 	.word	0x200000a4
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_DMA_Init+0x3c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <MX_DMA_Init+0x3c>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_DMA_Init+0x3c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2010      	movs	r0, #16
 8000c18:	f000 fb57 	bl	80012ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c1c:	2010      	movs	r0, #16
 8000c1e:	f000 fb70 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b31      	ldr	r3, [pc, #196]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a30      	ldr	r2, [pc, #192]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b2e      	ldr	r3, [pc, #184]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a29      	ldr	r2, [pc, #164]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_GPIO_Init+0xe0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2130      	movs	r1, #48	@ 0x30
 8000cba:	4816      	ldr	r0, [pc, #88]	@ (8000d14 <MX_GPIO_Init+0xe4>)
 8000cbc:	f001 f8c2 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000cc6:	4814      	ldr	r0, [pc, #80]	@ (8000d18 <MX_GPIO_Init+0xe8>)
 8000cc8:	f001 f8bc 	bl	8001e44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000ccc:	2330      	movs	r3, #48	@ 0x30
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <MX_GPIO_Init+0xe4>)
 8000ce4:	f000 ff2a 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000ce8:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000cec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <MX_GPIO_Init+0xe8>)
 8000d02:	f000 ff1b 	bl	8001b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020400 	.word	0x40020400

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <Error_Handler+0x8>

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d66:	2007      	movs	r0, #7
 8000d68:	f000 faa4 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a34      	ldr	r2, [pc, #208]	@ (8000e68 <HAL_UART_MspInit+0xf0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d162      	bne.n	8000e60 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <HAL_UART_MspInit+0xf4>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	4a32      	ldr	r2, [pc, #200]	@ (8000e6c <HAL_UART_MspInit+0xf4>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000daa:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <HAL_UART_MspInit+0xf4>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <HAL_UART_MspInit+0xf4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8000e6c <HAL_UART_MspInit+0xf4>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <HAL_UART_MspInit+0xf4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4820      	ldr	r0, [pc, #128]	@ (8000e70 <HAL_UART_MspInit+0xf8>)
 8000dee:	f000 fea5 	bl	8001b3c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <HAL_UART_MspInit+0x100>)
 8000df6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000dfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e34:	480f      	ldr	r0, [pc, #60]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e36:	f000 fa7f 	bl	8001338 <HAL_DMA_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e40:	f7ff ff6c 	bl	8000d1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_UART_MspInit+0xfc>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2026      	movs	r0, #38	@ 0x26
 8000e56:	f000 fa38 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e5a:	2026      	movs	r0, #38	@ 0x26
 8000e5c:	f000 fa51 	bl	8001302 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	@ 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	200000ec 	.word	0x200000ec
 8000e78:	40026088 	.word	0x40026088

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f8db 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <DMA1_Stream5_IRQHandler+0x10>)
 8000ee2:	f000 fbc1 	bl	8001668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000ec 	.word	0x200000ec

08000ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <USART2_IRQHandler+0x10>)
 8000ef6:	f001 fccd 	bl	8002894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000a4 	.word	0x200000a4

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f002 fd74 	bl	8003a20 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20018000 	.word	0x20018000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	2000017c 	.word	0x2000017c
 8000f6c:	200002d0 	.word	0x200002d0

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f98:	f7ff ffea 	bl	8000f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f002 fd33 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fd5f 	bl	8000a88 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fd8:	080043a4 	.word	0x080043a4
  ldr r2, =_sbss
 8000fdc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000fe0:	200002cc 	.word	0x200002cc

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f94f 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fe84 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f967 	bl	800131e <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f92f 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000028 	.word	0x20000028
 8001084:	20000030 	.word	0x20000030
 8001088:	2000002c 	.word	0x2000002c

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000030 	.word	0x20000030
 80010b0:	20000180 	.word	0x20000180

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000180 	.word	0x20000180

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000030 	.word	0x20000030

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	@ (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff29 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff3e 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff31 	bl	8001178 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff feb6 	bl	80010b4 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e099      	b.n	8001488 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2202      	movs	r2, #2
 8001358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001374:	e00f      	b.n	8001396 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001376:	f7ff fe9d 	bl	80010b4 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b05      	cmp	r3, #5
 8001382:	d908      	bls.n	8001396 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2220      	movs	r2, #32
 8001388:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2203      	movs	r2, #3
 800138e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e078      	b.n	8001488 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e8      	bne.n	8001376 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_DMA_Init+0x158>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d107      	bne.n	8001400 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f8:	4313      	orrs	r3, r2
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f023 0307 	bic.w	r3, r3, #7
 8001416:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	4313      	orrs	r3, r2
 8001420:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	2b04      	cmp	r3, #4
 8001428:	d117      	bne.n	800145a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4313      	orrs	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00e      	beq.n	800145a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fb01 	bl	8001a44 <DMA_CheckFifoParam>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2240      	movs	r2, #64	@ 0x40
 800144c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001456:	2301      	movs	r3, #1
 8001458:	e016      	b.n	8001488 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fab8 	bl	80019d8 <DMA_CalcBaseAndBitshift>
 8001468:	4603      	mov	r3, r0
 800146a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001470:	223f      	movs	r2, #63	@ 0x3f
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	f010803f 	.word	0xf010803f

08001494 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_DMA_Start_IT+0x26>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e040      	b.n	800153c <HAL_DMA_Start_IT+0xa8>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d12f      	bne.n	800152e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fa4a 	bl	800197c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ec:	223f      	movs	r2, #63	@ 0x3f
 80014ee:	409a      	lsls	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0216 	orr.w	r2, r2, #22
 8001502:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0208 	orr.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e005      	b.n	800153a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001536:	2302      	movs	r3, #2
 8001538:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001552:	f7ff fdaf 	bl	80010b4 <HAL_GetTick>
 8001556:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2280      	movs	r2, #128	@ 0x80
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e052      	b.n	800161c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0216 	bic.w	r2, r2, #22
 8001584:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001594:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <HAL_DMA_Abort+0x62>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0208 	bic.w	r2, r2, #8
 80015b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c6:	e013      	b.n	80015f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015c8:	f7ff fd74 	bl	80010b4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d90c      	bls.n	80015f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2220      	movs	r2, #32
 80015da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e015      	b.n	800161c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1e4      	bne.n	80015c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001602:	223f      	movs	r2, #63	@ 0x3f
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d004      	beq.n	8001642 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00c      	b.n	800165c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001674:	4b8e      	ldr	r3, [pc, #568]	@ (80018b0 <HAL_DMA_IRQHandler+0x248>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a8e      	ldr	r2, [pc, #568]	@ (80018b4 <HAL_DMA_IRQHandler+0x24c>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0a9b      	lsrs	r3, r3, #10
 8001680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001692:	2208      	movs	r2, #8
 8001694:	409a      	lsls	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d01a      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0204 	bic.w	r2, r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c0:	2208      	movs	r2, #8
 80016c2:	409a      	lsls	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d8:	2201      	movs	r2, #1
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d012      	beq.n	800170a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f6:	2201      	movs	r2, #1
 80016f8:	409a      	lsls	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001702:	f043 0202 	orr.w	r2, r3, #2
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170e:	2204      	movs	r2, #4
 8001710:	409a      	lsls	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d012      	beq.n	8001740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00b      	beq.n	8001740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	2204      	movs	r2, #4
 800172e:	409a      	lsls	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001738:	f043 0204 	orr.w	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001744:	2210      	movs	r2, #16
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d043      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03c      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001762:	2210      	movs	r2, #16
 8001764:	409a      	lsls	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d018      	beq.n	80017aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d108      	bne.n	8001798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d024      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
 8001796:	e01f      	b.n	80017d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01b      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
 80017a8:	e016      	b.n	80017d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0208 	bic.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017dc:	2220      	movs	r2, #32
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 808f 	beq.w	8001908 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8087 	beq.w	8001908 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fe:	2220      	movs	r2, #32
 8001800:	409a      	lsls	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b05      	cmp	r3, #5
 8001810:	d136      	bne.n	8001880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0216 	bic.w	r2, r2, #22
 8001820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <HAL_DMA_IRQHandler+0x1da>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001856:	223f      	movs	r2, #63	@ 0x3f
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001872:	2b00      	cmp	r3, #0
 8001874:	d07e      	beq.n	8001974 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
        }
        return;
 800187e:	e079      	b.n	8001974 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01d      	beq.n	80018ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d031      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
 80018ac:	e02c      	b.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
 80018ae:	bf00      	nop
 80018b0:	20000028 	.word	0x20000028
 80018b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
 80018c8:	e01e      	b.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10f      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0210 	bic.w	r2, r2, #16
 80018e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	2b00      	cmp	r3, #0
 800190e:	d032      	beq.n	8001976 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d022      	beq.n	8001962 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2205      	movs	r2, #5
 8001920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3301      	adds	r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	d307      	bcc.n	8001950 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f2      	bne.n	8001934 <HAL_DMA_IRQHandler+0x2cc>
 800194e:	e000      	b.n	8001952 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001950:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
 8001972:	e000      	b.n	8001976 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001974:	bf00      	nop
    }
  }
}
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b40      	cmp	r3, #64	@ 0x40
 80019a8:	d108      	bne.n	80019bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019ba:	e007      	b.n	80019cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3b10      	subs	r3, #16
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <DMA_CalcBaseAndBitshift+0x64>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <DMA_CalcBaseAndBitshift+0x68>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d909      	bls.n	8001a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	1d1a      	adds	r2, r3, #4
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a18:	e007      	b.n	8001a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	aaaaaaab 	.word	0xaaaaaaab
 8001a40:	08004358 	.word	0x08004358

08001a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d11f      	bne.n	8001a9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d856      	bhi.n	8001b12 <DMA_CheckFifoParam+0xce>
 8001a64:	a201      	add	r2, pc, #4	@ (adr r2, 8001a6c <DMA_CheckFifoParam+0x28>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a7d 	.word	0x08001a7d
 8001a70:	08001a8f 	.word	0x08001a8f
 8001a74:	08001a7d 	.word	0x08001a7d
 8001a78:	08001b13 	.word	0x08001b13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d046      	beq.n	8001b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a8c:	e043      	b.n	8001b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a96:	d140      	bne.n	8001b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9c:	e03d      	b.n	8001b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aa6:	d121      	bne.n	8001aec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d837      	bhi.n	8001b1e <DMA_CheckFifoParam+0xda>
 8001aae:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab4 <DMA_CheckFifoParam+0x70>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001ac5 	.word	0x08001ac5
 8001ab8:	08001acb 	.word	0x08001acb
 8001abc:	08001ac5 	.word	0x08001ac5
 8001ac0:	08001add 	.word	0x08001add
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac8:	e030      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d025      	beq.n	8001b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ada:	e022      	b.n	8001b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ae4:	d11f      	bne.n	8001b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aea:	e01c      	b.n	8001b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d903      	bls.n	8001afa <DMA_CheckFifoParam+0xb6>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d003      	beq.n	8001b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001af8:	e018      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      break;
 8001afe:	e015      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00e      	beq.n	8001b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b10:	e00b      	b.n	8001b2a <DMA_CheckFifoParam+0xe6>
      break;
 8001b12:	bf00      	nop
 8001b14:	e00a      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      break;
 8001b16:	bf00      	nop
 8001b18:	e008      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e006      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      break;
 8001b1e:	bf00      	nop
 8001b20:	e004      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      break;
 8001b22:	bf00      	nop
 8001b24:	e002      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b26:	bf00      	nop
 8001b28:	e000      	b.n	8001b2c <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e159      	b.n	8001e0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8148 	bne.w	8001e06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d005      	beq.n	8001b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d017      	beq.n	8001c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a2 	beq.w	8001e06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b57      	ldr	r3, [pc, #348]	@ (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a56      	ldr	r2, [pc, #344]	@ (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b54      	ldr	r3, [pc, #336]	@ (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a52      	ldr	r2, [pc, #328]	@ (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a49      	ldr	r2, [pc, #292]	@ (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x202>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a48      	ldr	r2, [pc, #288]	@ (8001e30 <HAL_GPIO_Init+0x2f4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x1fe>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a47      	ldr	r2, [pc, #284]	@ (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a46      	ldr	r2, [pc, #280]	@ (8001e38 <HAL_GPIO_Init+0x2fc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x1f6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a45      	ldr	r2, [pc, #276]	@ (8001e3c <HAL_GPIO_Init+0x300>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x1f2>
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	e008      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x204>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d50:	4935      	ldr	r1, [pc, #212]	@ (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5e:	4b38      	ldr	r3, [pc, #224]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d82:	4a2f      	ldr	r2, [pc, #188]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dac:	4a24      	ldr	r2, [pc, #144]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db2:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e00:	4a0f      	ldr	r2, [pc, #60]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	f67f aea2 	bls.w	8001b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40013800 	.word	0x40013800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020c00 	.word	0x40020c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e267      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d075      	beq.n	8001f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e96:	4b88      	ldr	r3, [pc, #544]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea2:	4b85      	ldr	r3, [pc, #532]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d112      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b82      	ldr	r3, [pc, #520]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d05b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x108>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d157      	bne.n	8001f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e242      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x74>
 8001ede:	4b76      	ldr	r3, [pc, #472]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b70      	ldr	r3, [pc, #448]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6f      	ldr	r2, [pc, #444]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6d      	ldr	r3, [pc, #436]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6c      	ldr	r2, [pc, #432]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001f10:	4b69      	ldr	r3, [pc, #420]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a68      	ldr	r2, [pc, #416]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b66      	ldr	r3, [pc, #408]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a65      	ldr	r2, [pc, #404]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f8c0 	bl	80010b4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff f8bc 	bl	80010b4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	@ 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e207      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xc0>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff f8ac 	bl	80010b4 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff f8a8 	bl	80010b4 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	@ 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1f3      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b51      	ldr	r3, [pc, #324]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0xe8>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b44      	ldr	r3, [pc, #272]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b41      	ldr	r3, [pc, #260]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1c7      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4937      	ldr	r1, [pc, #220]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <HAL_RCC_OscConfig+0x244>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff f861 	bl	80010b4 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f85d 	bl	80010b4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1a8      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4925      	ldr	r1, [pc, #148]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <HAL_RCC_OscConfig+0x244>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff f840 	bl	80010b4 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff f83c 	bl	80010b4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e187      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d036      	beq.n	80020d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_RCC_OscConfig+0x248>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff f820 	bl	80010b4 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff f81c 	bl	80010b4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e167      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_OscConfig+0x240>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x200>
 8002096:	e01b      	b.n	80020d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_RCC_OscConfig+0x248>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff f809 	bl	80010b4 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e00e      	b.n	80020c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a6:	f7ff f805 	bl	80010b4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d907      	bls.n	80020c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e150      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470000 	.word	0x42470000
 80020c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b88      	ldr	r3, [pc, #544]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ea      	bne.n	80020a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8097 	beq.w	800220c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b81      	ldr	r3, [pc, #516]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b7d      	ldr	r3, [pc, #500]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	4a7c      	ldr	r2, [pc, #496]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fe:	4b7a      	ldr	r3, [pc, #488]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b77      	ldr	r3, [pc, #476]	@ (80022ec <HAL_RCC_OscConfig+0x474>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b74      	ldr	r3, [pc, #464]	@ (80022ec <HAL_RCC_OscConfig+0x474>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a73      	ldr	r2, [pc, #460]	@ (80022ec <HAL_RCC_OscConfig+0x474>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe ffc5 	bl	80010b4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe ffc1 	bl	80010b4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e10c      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b6a      	ldr	r3, [pc, #424]	@ (80022ec <HAL_RCC_OscConfig+0x474>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x2ea>
 8002154:	4b64      	ldr	r3, [pc, #400]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002158:	4a63      	ldr	r2, [pc, #396]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x324>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x30c>
 800216a:	4b5f      	ldr	r3, [pc, #380]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216e:	4a5e      	ldr	r2, [pc, #376]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	@ 0x70
 8002176:	4b5c      	ldr	r3, [pc, #368]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217a:	4a5b      	ldr	r2, [pc, #364]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	@ 0x70
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x324>
 8002184:	4b58      	ldr	r3, [pc, #352]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002188:	4a57      	ldr	r2, [pc, #348]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002190:	4b55      	ldr	r3, [pc, #340]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002194:	4a54      	ldr	r2, [pc, #336]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe ff86 	bl	80010b4 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe ff82 	bl	80010b4 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0cb      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	4b49      	ldr	r3, [pc, #292]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ee      	beq.n	80021ac <HAL_RCC_OscConfig+0x334>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7fe ff70 	bl	80010b4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe ff6c 	bl	80010b4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0b5      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	4b3e      	ldr	r3, [pc, #248]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b39      	ldr	r3, [pc, #228]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	4a38      	ldr	r2, [pc, #224]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a1 	beq.w	8002358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002216:	4b34      	ldr	r3, [pc, #208]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d05c      	beq.n	80022dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d141      	bne.n	80022ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b31      	ldr	r3, [pc, #196]	@ (80022f0 <HAL_RCC_OscConfig+0x478>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe ff40 	bl	80010b4 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe ff3c 	bl	80010b4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e087      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b27      	ldr	r3, [pc, #156]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	491b      	ldr	r1, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x478>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe ff15 	bl	80010b4 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe ff11 	bl	80010b4 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e05c      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x416>
 80022ac:	e054      	b.n	8002358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_RCC_OscConfig+0x478>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe fefe 	bl	80010b4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fefa 	bl	80010b4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e045      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCC_OscConfig+0x470>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x444>
 80022da:	e03d      	b.n	8002358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e038      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40007000 	.word	0x40007000
 80022f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_RCC_OscConfig+0x4ec>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d028      	beq.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d121      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d11a      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800232a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232c:	4293      	cmp	r3, r2
 800232e:	d111      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	085b      	lsrs	r3, r3, #1
 800233c:	3b01      	subs	r3, #1
 800233e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0cc      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b68      	ldr	r3, [pc, #416]	@ (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d90c      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b65      	ldr	r3, [pc, #404]	@ (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b63      	ldr	r3, [pc, #396]	@ (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023bc:	4b59      	ldr	r3, [pc, #356]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a58      	ldr	r2, [pc, #352]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d4:	4b53      	ldr	r3, [pc, #332]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a52      	ldr	r2, [pc, #328]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b50      	ldr	r3, [pc, #320]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	494d      	ldr	r1, [pc, #308]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d044      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d119      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d003      	beq.n	8002426 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b3f      	ldr	r3, [pc, #252]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e067      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4934      	ldr	r1, [pc, #208]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7fe fe2c 	bl	80010b4 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7fe fe28 	bl	80010b4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e04f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b25      	ldr	r3, [pc, #148]	@ (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d20c      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e032      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4916      	ldr	r1, [pc, #88]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024da:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	490e      	ldr	r1, [pc, #56]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ee:	f000 f821 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490a      	ldr	r1, [pc, #40]	@ (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a09      	ldr	r2, [pc, #36]	@ (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fd8c 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00
 8002524:	40023800 	.word	0x40023800
 8002528:	08004340 	.word	0x08004340
 800252c:	20000028 	.word	0x20000028
 8002530:	2000002c 	.word	0x2000002c

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b094      	sub	sp, #80	@ 0x50
 800253a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254c:	4b79      	ldr	r3, [pc, #484]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d00d      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x40>
 8002558:	2b08      	cmp	r3, #8
 800255a:	f200 80e1 	bhi.w	8002720 <HAL_RCC_GetSysClockFreq+0x1ec>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x34>
 8002562:	2b04      	cmp	r3, #4
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x3a>
 8002566:	e0db      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b73      	ldr	r3, [pc, #460]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x204>)
 800256a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800256c:	e0db      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256e:	4b73      	ldr	r3, [pc, #460]	@ (800273c <HAL_RCC_GetSysClockFreq+0x208>)
 8002570:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002572:	e0d8      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002574:	4b6f      	ldr	r3, [pc, #444]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800257c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257e:	4b6d      	ldr	r3, [pc, #436]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258a:	4b6a      	ldr	r3, [pc, #424]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	2200      	movs	r2, #0
 8002592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002594:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259c:	633b      	str	r3, [r7, #48]	@ 0x30
 800259e:	2300      	movs	r3, #0
 80025a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025a6:	4622      	mov	r2, r4
 80025a8:	462b      	mov	r3, r5
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	0159      	lsls	r1, r3, #5
 80025b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b8:	0150      	lsls	r0, r2, #5
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4621      	mov	r1, r4
 80025c0:	1a51      	subs	r1, r2, r1
 80025c2:	6139      	str	r1, [r7, #16]
 80025c4:	4629      	mov	r1, r5
 80025c6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d8:	4659      	mov	r1, fp
 80025da:	018b      	lsls	r3, r1, #6
 80025dc:	4651      	mov	r1, sl
 80025de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025e2:	4651      	mov	r1, sl
 80025e4:	018a      	lsls	r2, r1, #6
 80025e6:	4651      	mov	r1, sl
 80025e8:	ebb2 0801 	subs.w	r8, r2, r1
 80025ec:	4659      	mov	r1, fp
 80025ee:	eb63 0901 	sbc.w	r9, r3, r1
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002606:	4690      	mov	r8, r2
 8002608:	4699      	mov	r9, r3
 800260a:	4623      	mov	r3, r4
 800260c:	eb18 0303 	adds.w	r3, r8, r3
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	462b      	mov	r3, r5
 8002614:	eb49 0303 	adc.w	r3, r9, r3
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002626:	4629      	mov	r1, r5
 8002628:	024b      	lsls	r3, r1, #9
 800262a:	4621      	mov	r1, r4
 800262c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002630:	4621      	mov	r1, r4
 8002632:	024a      	lsls	r2, r1, #9
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800263a:	2200      	movs	r2, #0
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800263e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002640:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002644:	f7fd fe24 	bl	8000290 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4613      	mov	r3, r2
 800264e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002650:	e058      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002652:	4b38      	ldr	r3, [pc, #224]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	099b      	lsrs	r3, r3, #6
 8002658:	2200      	movs	r2, #0
 800265a:	4618      	mov	r0, r3
 800265c:	4611      	mov	r1, r2
 800265e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
 8002668:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800266c:	4642      	mov	r2, r8
 800266e:	464b      	mov	r3, r9
 8002670:	f04f 0000 	mov.w	r0, #0
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	0159      	lsls	r1, r3, #5
 800267a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267e:	0150      	lsls	r0, r2, #5
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4641      	mov	r1, r8
 8002686:	ebb2 0a01 	subs.w	sl, r2, r1
 800268a:	4649      	mov	r1, r9
 800268c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800269c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026a4:	ebb2 040a 	subs.w	r4, r2, sl
 80026a8:	eb63 050b 	sbc.w	r5, r3, fp
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	00eb      	lsls	r3, r5, #3
 80026b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ba:	00e2      	lsls	r2, r4, #3
 80026bc:	4614      	mov	r4, r2
 80026be:	461d      	mov	r5, r3
 80026c0:	4643      	mov	r3, r8
 80026c2:	18e3      	adds	r3, r4, r3
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	464b      	mov	r3, r9
 80026c8:	eb45 0303 	adc.w	r3, r5, r3
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026da:	4629      	mov	r1, r5
 80026dc:	028b      	lsls	r3, r1, #10
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e4:	4621      	mov	r1, r4
 80026e6:	028a      	lsls	r2, r1, #10
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ee:	2200      	movs	r2, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	61fa      	str	r2, [r7, #28]
 80026f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f8:	f7fd fdca 	bl	8000290 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002704:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	3301      	adds	r3, #1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002714:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x204>)
 8002722:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002728:	4618      	mov	r0, r3
 800272a:	3750      	adds	r7, #80	@ 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	00f42400 	.word	0x00f42400
 800273c:	007a1200 	.word	0x007a1200

08002740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <HAL_RCC_GetHCLKFreq+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000028 	.word	0x20000028

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff0 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a9b      	lsrs	r3, r3, #10
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	08004350 	.word	0x08004350

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002784:	f7ff ffdc 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0b5b      	lsrs	r3, r3, #13
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08004350 	.word	0x08004350

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fad2 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	@ 0x24
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fe6b 	bl	80034c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d112      	bne.n	8002888 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_UART_Receive_DMA+0x26>
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00b      	b.n	800288a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	461a      	mov	r2, r3
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fbc2 	bl	8003008 <UART_Start_Receive_DMA>
 8002884:	4603      	mov	r3, r0
 8002886:	e000      	b.n	800288a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0ba      	sub	sp, #232	@ 0xe8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_UART_IRQHandler+0x66>
 80028e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fd29 	bl	800334a <UART_Receive_IT>
      return;
 80028f8:	e25b      	b.n	8002db2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80de 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x22c>
 8002904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002914:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80d1 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_UART_IRQHandler+0xae>
 800292a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800292e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_UART_IRQHandler+0xd2>
 800294e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f043 0202 	orr.w	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_UART_IRQHandler+0xf6>
 8002972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	f043 0204 	orr.w	r2, r3, #4
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800298a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d011      	beq.n	80029ba <HAL_UART_IRQHandler+0x126>
 8002996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f043 0208 	orr.w	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 81f2 	beq.w	8002da8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_UART_IRQHandler+0x14e>
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fcb4 	bl	800334a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ec:	2b40      	cmp	r3, #64	@ 0x40
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_UART_IRQHandler+0x17a>
 8002a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d04f      	beq.n	8002aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fbbc 	bl	800318c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1e:	2b40      	cmp	r3, #64	@ 0x40
 8002a20:	d141      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3314      	adds	r3, #20
 8002a28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1d9      	bne.n	8002a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d013      	beq.n	8002a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c74 <HAL_UART_IRQHandler+0x3e0>)
 8002a7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fdce 	bl	8001624 <HAL_DMA_Abort_IT>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9c:	e00e      	b.n	8002abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f99e 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	e00a      	b.n	8002abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f99a 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aac:	e006      	b.n	8002abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f996 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002aba:	e175      	b.n	8002da8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	bf00      	nop
    return;
 8002abe:	e173      	b.n	8002da8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	f040 814f 	bne.w	8002d68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8148 	beq.w	8002d68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8141 	beq.w	8002d68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b06:	2b40      	cmp	r3, #64	@ 0x40
 8002b08:	f040 80b6 	bne.w	8002c78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8145 	beq.w	8002dac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	f080 813e 	bcs.w	8002dac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b42:	f000 8088 	beq.w	8002c56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1d9      	bne.n	8002b46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3314      	adds	r3, #20
 8002b98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e1      	bne.n	8002b92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bd8:	e853 3f00 	ldrex	r3, [r3]
 8002bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bfa:	e841 2300 	strex	r3, r2, [r1]
 8002bfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e3      	bne.n	8002bce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c26:	f023 0310 	bic.w	r3, r3, #16
 8002c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e3      	bne.n	8002c14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fc77 	bl	8001544 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8c1 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c72:	e09b      	b.n	8002dac <HAL_UART_IRQHandler+0x518>
 8002c74:	08003253 	.word	0x08003253
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 808e 	beq.w	8002db0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8089 	beq.w	8002db0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	330c      	adds	r3, #12
 8002cbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e3      	bne.n	8002c9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	e853 3f00 	ldrex	r3, [r3]
 8002ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3314      	adds	r3, #20
 8002cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e3      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0310 	bic.w	r3, r3, #16
 8002d32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d40:	61fa      	str	r2, [r7, #28]
 8002d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	69b9      	ldr	r1, [r7, #24]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e3      	bne.n	8002d1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f847 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d66:	e023      	b.n	8002db0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <HAL_UART_IRQHandler+0x4f4>
 8002d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa7a 	bl	800327a <UART_Transmit_IT>
    return;
 8002d86:	e014      	b.n	8002db2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <HAL_UART_IRQHandler+0x51e>
 8002d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 faba 	bl	800331a <UART_EndTransmit_IT>
    return;
 8002da6:	e004      	b.n	8002db2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002db0:	bf00      	nop
  }
}
 8002db2:	37e8      	adds	r7, #232	@ 0xe8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b09c      	sub	sp, #112	@ 0x70
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d172      	bne.n	8002f0e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e4e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e50:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e5      	bne.n	8002e2e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3314      	adds	r3, #20
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3314      	adds	r3, #20
 8002e80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002eb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e5      	bne.n	8002e96 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d119      	bne.n	8002f0e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	330c      	adds	r3, #12
 8002ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f023 0310 	bic.w	r3, r3, #16
 8002ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002efa:	61fa      	str	r2, [r7, #28]
 8002efc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	617b      	str	r3, [r7, #20]
   return(result);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e5      	bne.n	8002eda <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f10:	2200      	movs	r2, #0
 8002f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f20:	4619      	mov	r1, r3
 8002f22:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f24:	f7ff ff66 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f28:	e002      	b.n	8002f30 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002f2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002f2c:	f7fd fd40 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 8002f30:	bf00      	nop
 8002f32:	3770      	adds	r7, #112	@ 0x70
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d108      	bne.n	8002f66 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff48 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f64:	e002      	b.n	8002f6c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ff30 	bl	8002dcc <HAL_UART_RxHalfCpltCallback>
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b21      	cmp	r3, #33	@ 0x21
 8002fa6:	d108      	bne.n	8002fba <UART_DMAError+0x46>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002fb4:	68b8      	ldr	r0, [r7, #8]
 8002fb6:	f000 f8c1 	bl	800313c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc4:	2b40      	cmp	r3, #64	@ 0x40
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b22      	cmp	r3, #34	@ 0x22
 8002fda:	d108      	bne.n	8002fee <UART_DMAError+0x7a>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	f000 f8cf 	bl	800318c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ffa:	68b8      	ldr	r0, [r7, #8]
 8002ffc:	f7ff fef0 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b098      	sub	sp, #96	@ 0x60
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2222      	movs	r2, #34	@ 0x22
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	4a3e      	ldr	r2, [pc, #248]	@ (8003130 <UART_Start_Receive_DMA+0x128>)
 8003036:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	4a3d      	ldr	r2, [pc, #244]	@ (8003134 <UART_Start_Receive_DMA+0x12c>)
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	4a3c      	ldr	r2, [pc, #240]	@ (8003138 <UART_Start_Receive_DMA+0x130>)
 8003046:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	2200      	movs	r2, #0
 800304e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	f7fe fa14 	bl	8001494 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d019      	beq.n	80030be <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800309a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800309c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030aa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80030b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80030b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3314      	adds	r3, #20
 80030c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3314      	adds	r3, #20
 80030dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030de:	63ba      	str	r2, [r7, #56]	@ 0x38
 80030e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e5      	bne.n	80030be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	617b      	str	r3, [r7, #20]
   return(result);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003108:	653b      	str	r3, [r7, #80]	@ 0x50
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3314      	adds	r3, #20
 8003110:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003112:	627a      	str	r2, [r7, #36]	@ 0x24
 8003114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e5      	bne.n	80030f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3760      	adds	r7, #96	@ 0x60
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	08002e0d 	.word	0x08002e0d
 8003134:	08002f39 	.word	0x08002f39
 8003138:	08002f75 	.word	0x08002f75

0800313c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	@ 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	60bb      	str	r3, [r7, #8]
   return(result);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	330c      	adds	r3, #12
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	61ba      	str	r2, [r7, #24]
 8003166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6979      	ldr	r1, [r7, #20]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	613b      	str	r3, [r7, #16]
   return(result);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e5      	bne.n	8003144 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003180:	bf00      	nop
 8003182:	3724      	adds	r7, #36	@ 0x24
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b095      	sub	sp, #84	@ 0x54
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	d119      	bne.n	8003238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	60bb      	str	r3, [r7, #8]
   return(result);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	647b      	str	r3, [r7, #68]	@ 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003224:	61ba      	str	r2, [r7, #24]
 8003226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6979      	ldr	r1, [r7, #20]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	613b      	str	r3, [r7, #16]
   return(result);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e5      	bne.n	8003204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003246:	bf00      	nop
 8003248:	3754      	adds	r7, #84	@ 0x54
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fdb7 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b21      	cmp	r3, #33	@ 0x21
 800328c:	d13e      	bne.n	800330c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003296:	d114      	bne.n	80032c2 <UART_Transmit_IT+0x48>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d110      	bne.n	80032c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]
 80032c0:	e008      	b.n	80032d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6211      	str	r1, [r2, #32]
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29b      	uxth	r3, r3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4619      	mov	r1, r3
 80032e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10f      	bne.n	8003308 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fd3c 	bl	8002db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b08c      	sub	sp, #48	@ 0x30
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b22      	cmp	r3, #34	@ 0x22
 800335c:	f040 80ae 	bne.w	80034bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003368:	d117      	bne.n	800339a <UART_Receive_IT+0x50>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d113      	bne.n	800339a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003388:	b29a      	uxth	r2, r3
 800338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	@ 0x28
 8003398:	e026      	b.n	80033e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ac:	d007      	beq.n	80033be <UART_Receive_IT+0x74>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <UART_Receive_IT+0x82>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e008      	b.n	80033de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4619      	mov	r1, r3
 80033f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d15d      	bne.n	80034b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0220 	bic.w	r2, r2, #32
 800340a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800341a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	2b01      	cmp	r3, #1
 8003440:	d135      	bne.n	80034ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	613b      	str	r3, [r7, #16]
   return(result);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f023 0310 	bic.w	r3, r3, #16
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003468:	623a      	str	r2, [r7, #32]
 800346a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	69f9      	ldr	r1, [r7, #28]
 800346e:	6a3a      	ldr	r2, [r7, #32]
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	61bb      	str	r3, [r7, #24]
   return(result);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b10      	cmp	r3, #16
 8003488:	d10a      	bne.n	80034a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fca4 	bl	8002df4 <HAL_UARTEx_RxEventCallback>
 80034ac:	e002      	b.n	80034b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fa7e 	bl	80009b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e002      	b.n	80034be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3730      	adds	r7, #48	@ 0x30
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b0c0      	sub	sp, #256	@ 0x100
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	ea40 0301 	orr.w	r3, r0, r1
 80034f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	431a      	orrs	r2, r3
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	431a      	orrs	r2, r3
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003520:	f021 010c 	bic.w	r1, r1, #12
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800352e:	430b      	orrs	r3, r1
 8003530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003542:	6999      	ldr	r1, [r3, #24]
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	ea40 0301 	orr.w	r3, r0, r1
 800354e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b8f      	ldr	r3, [pc, #572]	@ (8003794 <UART_SetConfig+0x2cc>)
 8003558:	429a      	cmp	r2, r3
 800355a:	d005      	beq.n	8003568 <UART_SetConfig+0xa0>
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b8d      	ldr	r3, [pc, #564]	@ (8003798 <UART_SetConfig+0x2d0>)
 8003564:	429a      	cmp	r2, r3
 8003566:	d104      	bne.n	8003572 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003568:	f7ff f90a 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 800356c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003570:	e003      	b.n	800357a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003572:	f7ff f8f1 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003576:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003584:	f040 810c 	bne.w	80037a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358c:	2200      	movs	r2, #0
 800358e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003592:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003596:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	1891      	adds	r1, r2, r2
 80035a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035a2:	415b      	adcs	r3, r3
 80035a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035aa:	4621      	mov	r1, r4
 80035ac:	eb12 0801 	adds.w	r8, r2, r1
 80035b0:	4629      	mov	r1, r5
 80035b2:	eb43 0901 	adc.w	r9, r3, r1
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ca:	4690      	mov	r8, r2
 80035cc:	4699      	mov	r9, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	eb18 0303 	adds.w	r3, r8, r3
 80035d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035d8:	462b      	mov	r3, r5
 80035da:	eb49 0303 	adc.w	r3, r9, r3
 80035de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035f6:	460b      	mov	r3, r1
 80035f8:	18db      	adds	r3, r3, r3
 80035fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80035fc:	4613      	mov	r3, r2
 80035fe:	eb42 0303 	adc.w	r3, r2, r3
 8003602:	657b      	str	r3, [r7, #84]	@ 0x54
 8003604:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003608:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800360c:	f7fc fe40 	bl	8000290 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4b61      	ldr	r3, [pc, #388]	@ (800379c <UART_SetConfig+0x2d4>)
 8003616:	fba3 2302 	umull	r2, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	011c      	lsls	r4, r3, #4
 800361e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003622:	2200      	movs	r2, #0
 8003624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003628:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800362c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003630:	4642      	mov	r2, r8
 8003632:	464b      	mov	r3, r9
 8003634:	1891      	adds	r1, r2, r2
 8003636:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003638:	415b      	adcs	r3, r3
 800363a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003640:	4641      	mov	r1, r8
 8003642:	eb12 0a01 	adds.w	sl, r2, r1
 8003646:	4649      	mov	r1, r9
 8003648:	eb43 0b01 	adc.w	fp, r3, r1
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003658:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800365c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003660:	4692      	mov	sl, r2
 8003662:	469b      	mov	fp, r3
 8003664:	4643      	mov	r3, r8
 8003666:	eb1a 0303 	adds.w	r3, sl, r3
 800366a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800366e:	464b      	mov	r3, r9
 8003670:	eb4b 0303 	adc.w	r3, fp, r3
 8003674:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003684:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003688:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800368c:	460b      	mov	r3, r1
 800368e:	18db      	adds	r3, r3, r3
 8003690:	643b      	str	r3, [r7, #64]	@ 0x40
 8003692:	4613      	mov	r3, r2
 8003694:	eb42 0303 	adc.w	r3, r2, r3
 8003698:	647b      	str	r3, [r7, #68]	@ 0x44
 800369a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800369e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036a2:	f7fc fdf5 	bl	8000290 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	4b3b      	ldr	r3, [pc, #236]	@ (800379c <UART_SetConfig+0x2d4>)
 80036ae:	fba3 2301 	umull	r2, r3, r3, r1
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2264      	movs	r2, #100	@ 0x64
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	1acb      	subs	r3, r1, r3
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036c2:	4b36      	ldr	r3, [pc, #216]	@ (800379c <UART_SetConfig+0x2d4>)
 80036c4:	fba3 2302 	umull	r2, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036d0:	441c      	add	r4, r3
 80036d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036e4:	4642      	mov	r2, r8
 80036e6:	464b      	mov	r3, r9
 80036e8:	1891      	adds	r1, r2, r2
 80036ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036ec:	415b      	adcs	r3, r3
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036f4:	4641      	mov	r1, r8
 80036f6:	1851      	adds	r1, r2, r1
 80036f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80036fa:	4649      	mov	r1, r9
 80036fc:	414b      	adcs	r3, r1
 80036fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800370c:	4659      	mov	r1, fp
 800370e:	00cb      	lsls	r3, r1, #3
 8003710:	4651      	mov	r1, sl
 8003712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003716:	4651      	mov	r1, sl
 8003718:	00ca      	lsls	r2, r1, #3
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	4603      	mov	r3, r0
 8003720:	4642      	mov	r2, r8
 8003722:	189b      	adds	r3, r3, r2
 8003724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003728:	464b      	mov	r3, r9
 800372a:	460a      	mov	r2, r1
 800372c:	eb42 0303 	adc.w	r3, r2, r3
 8003730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003740:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003744:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003748:	460b      	mov	r3, r1
 800374a:	18db      	adds	r3, r3, r3
 800374c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800374e:	4613      	mov	r3, r2
 8003750:	eb42 0303 	adc.w	r3, r2, r3
 8003754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800375a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800375e:	f7fc fd97 	bl	8000290 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <UART_SetConfig+0x2d4>)
 8003768:	fba3 1302 	umull	r1, r3, r3, r2
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	2164      	movs	r1, #100	@ 0x64
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	3332      	adds	r3, #50	@ 0x32
 800377a:	4a08      	ldr	r2, [pc, #32]	@ (800379c <UART_SetConfig+0x2d4>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	f003 0207 	and.w	r2, r3, #7
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4422      	add	r2, r4
 800378e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003790:	e106      	b.n	80039a0 <UART_SetConfig+0x4d8>
 8003792:	bf00      	nop
 8003794:	40011000 	.word	0x40011000
 8003798:	40011400 	.word	0x40011400
 800379c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037b2:	4642      	mov	r2, r8
 80037b4:	464b      	mov	r3, r9
 80037b6:	1891      	adds	r1, r2, r2
 80037b8:	6239      	str	r1, [r7, #32]
 80037ba:	415b      	adcs	r3, r3
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037c2:	4641      	mov	r1, r8
 80037c4:	1854      	adds	r4, r2, r1
 80037c6:	4649      	mov	r1, r9
 80037c8:	eb43 0501 	adc.w	r5, r3, r1
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	00eb      	lsls	r3, r5, #3
 80037d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037da:	00e2      	lsls	r2, r4, #3
 80037dc:	4614      	mov	r4, r2
 80037de:	461d      	mov	r5, r3
 80037e0:	4643      	mov	r3, r8
 80037e2:	18e3      	adds	r3, r4, r3
 80037e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037e8:	464b      	mov	r3, r9
 80037ea:	eb45 0303 	adc.w	r3, r5, r3
 80037ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800380e:	4629      	mov	r1, r5
 8003810:	008b      	lsls	r3, r1, #2
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003818:	4621      	mov	r1, r4
 800381a:	008a      	lsls	r2, r1, #2
 800381c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003820:	f7fc fd36 	bl	8000290 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4b60      	ldr	r3, [pc, #384]	@ (80039ac <UART_SetConfig+0x4e4>)
 800382a:	fba3 2302 	umull	r2, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	011c      	lsls	r4, r3, #4
 8003832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800383c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003840:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	1891      	adds	r1, r2, r2
 800384a:	61b9      	str	r1, [r7, #24]
 800384c:	415b      	adcs	r3, r3
 800384e:	61fb      	str	r3, [r7, #28]
 8003850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003854:	4641      	mov	r1, r8
 8003856:	1851      	adds	r1, r2, r1
 8003858:	6139      	str	r1, [r7, #16]
 800385a:	4649      	mov	r1, r9
 800385c:	414b      	adcs	r3, r1
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800386c:	4659      	mov	r1, fp
 800386e:	00cb      	lsls	r3, r1, #3
 8003870:	4651      	mov	r1, sl
 8003872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003876:	4651      	mov	r1, sl
 8003878:	00ca      	lsls	r2, r1, #3
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	4603      	mov	r3, r0
 8003880:	4642      	mov	r2, r8
 8003882:	189b      	adds	r3, r3, r2
 8003884:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003888:	464b      	mov	r3, r9
 800388a:	460a      	mov	r2, r1
 800388c:	eb42 0303 	adc.w	r3, r2, r3
 8003890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800389e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038ac:	4649      	mov	r1, r9
 80038ae:	008b      	lsls	r3, r1, #2
 80038b0:	4641      	mov	r1, r8
 80038b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b6:	4641      	mov	r1, r8
 80038b8:	008a      	lsls	r2, r1, #2
 80038ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038be:	f7fc fce7 	bl	8000290 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	4b38      	ldr	r3, [pc, #224]	@ (80039ac <UART_SetConfig+0x4e4>)
 80038ca:	fba3 2301 	umull	r2, r3, r3, r1
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2264      	movs	r2, #100	@ 0x64
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	1acb      	subs	r3, r1, r3
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	3332      	adds	r3, #50	@ 0x32
 80038dc:	4a33      	ldr	r2, [pc, #204]	@ (80039ac <UART_SetConfig+0x4e4>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e8:	441c      	add	r4, r3
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ee:	2200      	movs	r2, #0
 80038f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80038f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80038f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	415b      	adcs	r3, r3
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003908:	4641      	mov	r1, r8
 800390a:	1851      	adds	r1, r2, r1
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	4649      	mov	r1, r9
 8003910:	414b      	adcs	r3, r1
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003920:	4659      	mov	r1, fp
 8003922:	00cb      	lsls	r3, r1, #3
 8003924:	4651      	mov	r1, sl
 8003926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392a:	4651      	mov	r1, sl
 800392c:	00ca      	lsls	r2, r1, #3
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	4603      	mov	r3, r0
 8003934:	4642      	mov	r2, r8
 8003936:	189b      	adds	r3, r3, r2
 8003938:	66bb      	str	r3, [r7, #104]	@ 0x68
 800393a:	464b      	mov	r3, r9
 800393c:	460a      	mov	r2, r1
 800393e:	eb42 0303 	adc.w	r3, r2, r3
 8003942:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	663b      	str	r3, [r7, #96]	@ 0x60
 800394e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800395c:	4649      	mov	r1, r9
 800395e:	008b      	lsls	r3, r1, #2
 8003960:	4641      	mov	r1, r8
 8003962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003966:	4641      	mov	r1, r8
 8003968:	008a      	lsls	r2, r1, #2
 800396a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800396e:	f7fc fc8f 	bl	8000290 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <UART_SetConfig+0x4e4>)
 8003978:	fba3 1302 	umull	r1, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	2164      	movs	r1, #100	@ 0x64
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	3332      	adds	r3, #50	@ 0x32
 800398a:	4a08      	ldr	r2, [pc, #32]	@ (80039ac <UART_SetConfig+0x4e4>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4422      	add	r2, r4
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	bf00      	nop
 80039a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039a6:	46bd      	mov	sp, r7
 80039a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ac:	51eb851f 	.word	0x51eb851f

080039b0 <siprintf>:
 80039b0:	b40e      	push	{r1, r2, r3}
 80039b2:	b500      	push	{lr}
 80039b4:	b09c      	sub	sp, #112	@ 0x70
 80039b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80039b8:	9002      	str	r0, [sp, #8]
 80039ba:	9006      	str	r0, [sp, #24]
 80039bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039c0:	4809      	ldr	r0, [pc, #36]	@ (80039e8 <siprintf+0x38>)
 80039c2:	9107      	str	r1, [sp, #28]
 80039c4:	9104      	str	r1, [sp, #16]
 80039c6:	4909      	ldr	r1, [pc, #36]	@ (80039ec <siprintf+0x3c>)
 80039c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039cc:	9105      	str	r1, [sp, #20]
 80039ce:	6800      	ldr	r0, [r0, #0]
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	a902      	add	r1, sp, #8
 80039d4:	f000 f9a4 	bl	8003d20 <_svfiprintf_r>
 80039d8:	9b02      	ldr	r3, [sp, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	b01c      	add	sp, #112	@ 0x70
 80039e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e4:	b003      	add	sp, #12
 80039e6:	4770      	bx	lr
 80039e8:	20000034 	.word	0x20000034
 80039ec:	ffff0208 	.word	0xffff0208

080039f0 <memset>:
 80039f0:	4402      	add	r2, r0
 80039f2:	4603      	mov	r3, r0
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d100      	bne.n	80039fa <memset+0xa>
 80039f8:	4770      	bx	lr
 80039fa:	f803 1b01 	strb.w	r1, [r3], #1
 80039fe:	e7f9      	b.n	80039f4 <memset+0x4>

08003a00 <strcat>:
 8003a00:	b510      	push	{r4, lr}
 8003a02:	4602      	mov	r2, r0
 8003a04:	7814      	ldrb	r4, [r2, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	3201      	adds	r2, #1
 8003a0a:	2c00      	cmp	r4, #0
 8003a0c:	d1fa      	bne.n	8003a04 <strcat+0x4>
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a18:	2a00      	cmp	r2, #0
 8003a1a:	d1f9      	bne.n	8003a10 <strcat+0x10>
 8003a1c:	bd10      	pop	{r4, pc}
	...

08003a20 <__errno>:
 8003a20:	4b01      	ldr	r3, [pc, #4]	@ (8003a28 <__errno+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000034 	.word	0x20000034

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a64 <__libc_init_array+0x38>)
 8003a30:	4c0d      	ldr	r4, [pc, #52]	@ (8003a68 <__libc_init_array+0x3c>)
 8003a32:	1b64      	subs	r4, r4, r5
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	2600      	movs	r6, #0
 8003a38:	42a6      	cmp	r6, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a6c <__libc_init_array+0x40>)
 8003a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a70 <__libc_init_array+0x44>)
 8003a40:	f000 fc66 	bl	8004310 <_init>
 8003a44:	1b64      	subs	r4, r4, r5
 8003a46:	10a4      	asrs	r4, r4, #2
 8003a48:	2600      	movs	r6, #0
 8003a4a:	42a6      	cmp	r6, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a54:	4798      	blx	r3
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5e:	4798      	blx	r3
 8003a60:	3601      	adds	r6, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	0800439c 	.word	0x0800439c
 8003a68:	0800439c 	.word	0x0800439c
 8003a6c:	0800439c 	.word	0x0800439c
 8003a70:	080043a0 	.word	0x080043a0

08003a74 <__retarget_lock_acquire_recursive>:
 8003a74:	4770      	bx	lr

08003a76 <__retarget_lock_release_recursive>:
 8003a76:	4770      	bx	lr

08003a78 <_free_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	d041      	beq.n	8003b04 <_free_r+0x8c>
 8003a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a84:	1f0c      	subs	r4, r1, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bfb8      	it	lt
 8003a8a:	18e4      	addlt	r4, r4, r3
 8003a8c:	f000 f8e0 	bl	8003c50 <__malloc_lock>
 8003a90:	4a1d      	ldr	r2, [pc, #116]	@ (8003b08 <_free_r+0x90>)
 8003a92:	6813      	ldr	r3, [r2, #0]
 8003a94:	b933      	cbnz	r3, 8003aa4 <_free_r+0x2c>
 8003a96:	6063      	str	r3, [r4, #4]
 8003a98:	6014      	str	r4, [r2, #0]
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa0:	f000 b8dc 	b.w	8003c5c <__malloc_unlock>
 8003aa4:	42a3      	cmp	r3, r4
 8003aa6:	d908      	bls.n	8003aba <_free_r+0x42>
 8003aa8:	6820      	ldr	r0, [r4, #0]
 8003aaa:	1821      	adds	r1, r4, r0
 8003aac:	428b      	cmp	r3, r1
 8003aae:	bf01      	itttt	eq
 8003ab0:	6819      	ldreq	r1, [r3, #0]
 8003ab2:	685b      	ldreq	r3, [r3, #4]
 8003ab4:	1809      	addeq	r1, r1, r0
 8003ab6:	6021      	streq	r1, [r4, #0]
 8003ab8:	e7ed      	b.n	8003a96 <_free_r+0x1e>
 8003aba:	461a      	mov	r2, r3
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b10b      	cbz	r3, 8003ac4 <_free_r+0x4c>
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	d9fa      	bls.n	8003aba <_free_r+0x42>
 8003ac4:	6811      	ldr	r1, [r2, #0]
 8003ac6:	1850      	adds	r0, r2, r1
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d10b      	bne.n	8003ae4 <_free_r+0x6c>
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	4401      	add	r1, r0
 8003ad0:	1850      	adds	r0, r2, r1
 8003ad2:	4283      	cmp	r3, r0
 8003ad4:	6011      	str	r1, [r2, #0]
 8003ad6:	d1e0      	bne.n	8003a9a <_free_r+0x22>
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	6053      	str	r3, [r2, #4]
 8003ade:	4408      	add	r0, r1
 8003ae0:	6010      	str	r0, [r2, #0]
 8003ae2:	e7da      	b.n	8003a9a <_free_r+0x22>
 8003ae4:	d902      	bls.n	8003aec <_free_r+0x74>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	e7d6      	b.n	8003a9a <_free_r+0x22>
 8003aec:	6820      	ldr	r0, [r4, #0]
 8003aee:	1821      	adds	r1, r4, r0
 8003af0:	428b      	cmp	r3, r1
 8003af2:	bf04      	itt	eq
 8003af4:	6819      	ldreq	r1, [r3, #0]
 8003af6:	685b      	ldreq	r3, [r3, #4]
 8003af8:	6063      	str	r3, [r4, #4]
 8003afa:	bf04      	itt	eq
 8003afc:	1809      	addeq	r1, r1, r0
 8003afe:	6021      	streq	r1, [r4, #0]
 8003b00:	6054      	str	r4, [r2, #4]
 8003b02:	e7ca      	b.n	8003a9a <_free_r+0x22>
 8003b04:	bd38      	pop	{r3, r4, r5, pc}
 8003b06:	bf00      	nop
 8003b08:	200002c8 	.word	0x200002c8

08003b0c <sbrk_aligned>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8003b4c <sbrk_aligned+0x40>)
 8003b10:	460c      	mov	r4, r1
 8003b12:	6831      	ldr	r1, [r6, #0]
 8003b14:	4605      	mov	r5, r0
 8003b16:	b911      	cbnz	r1, 8003b1e <sbrk_aligned+0x12>
 8003b18:	f000 fba6 	bl	8004268 <_sbrk_r>
 8003b1c:	6030      	str	r0, [r6, #0]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 fba1 	bl	8004268 <_sbrk_r>
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	d103      	bne.n	8003b32 <sbrk_aligned+0x26>
 8003b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8003b2e:	4620      	mov	r0, r4
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	1cc4      	adds	r4, r0, #3
 8003b34:	f024 0403 	bic.w	r4, r4, #3
 8003b38:	42a0      	cmp	r0, r4
 8003b3a:	d0f8      	beq.n	8003b2e <sbrk_aligned+0x22>
 8003b3c:	1a21      	subs	r1, r4, r0
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 fb92 	bl	8004268 <_sbrk_r>
 8003b44:	3001      	adds	r0, #1
 8003b46:	d1f2      	bne.n	8003b2e <sbrk_aligned+0x22>
 8003b48:	e7ef      	b.n	8003b2a <sbrk_aligned+0x1e>
 8003b4a:	bf00      	nop
 8003b4c:	200002c4 	.word	0x200002c4

08003b50 <_malloc_r>:
 8003b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b54:	1ccd      	adds	r5, r1, #3
 8003b56:	f025 0503 	bic.w	r5, r5, #3
 8003b5a:	3508      	adds	r5, #8
 8003b5c:	2d0c      	cmp	r5, #12
 8003b5e:	bf38      	it	cc
 8003b60:	250c      	movcc	r5, #12
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	4606      	mov	r6, r0
 8003b66:	db01      	blt.n	8003b6c <_malloc_r+0x1c>
 8003b68:	42a9      	cmp	r1, r5
 8003b6a:	d904      	bls.n	8003b76 <_malloc_r+0x26>
 8003b6c:	230c      	movs	r3, #12
 8003b6e:	6033      	str	r3, [r6, #0]
 8003b70:	2000      	movs	r0, #0
 8003b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c4c <_malloc_r+0xfc>
 8003b7a:	f000 f869 	bl	8003c50 <__malloc_lock>
 8003b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b82:	461c      	mov	r4, r3
 8003b84:	bb44      	cbnz	r4, 8003bd8 <_malloc_r+0x88>
 8003b86:	4629      	mov	r1, r5
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f7ff ffbf 	bl	8003b0c <sbrk_aligned>
 8003b8e:	1c43      	adds	r3, r0, #1
 8003b90:	4604      	mov	r4, r0
 8003b92:	d158      	bne.n	8003c46 <_malloc_r+0xf6>
 8003b94:	f8d8 4000 	ldr.w	r4, [r8]
 8003b98:	4627      	mov	r7, r4
 8003b9a:	2f00      	cmp	r7, #0
 8003b9c:	d143      	bne.n	8003c26 <_malloc_r+0xd6>
 8003b9e:	2c00      	cmp	r4, #0
 8003ba0:	d04b      	beq.n	8003c3a <_malloc_r+0xea>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	eb04 0903 	add.w	r9, r4, r3
 8003bac:	f000 fb5c 	bl	8004268 <_sbrk_r>
 8003bb0:	4581      	cmp	r9, r0
 8003bb2:	d142      	bne.n	8003c3a <_malloc_r+0xea>
 8003bb4:	6821      	ldr	r1, [r4, #0]
 8003bb6:	1a6d      	subs	r5, r5, r1
 8003bb8:	4629      	mov	r1, r5
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f7ff ffa6 	bl	8003b0c <sbrk_aligned>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d03a      	beq.n	8003c3a <_malloc_r+0xea>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	442b      	add	r3, r5
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	f8d8 3000 	ldr.w	r3, [r8]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	bb62      	cbnz	r2, 8003c2c <_malloc_r+0xdc>
 8003bd2:	f8c8 7000 	str.w	r7, [r8]
 8003bd6:	e00f      	b.n	8003bf8 <_malloc_r+0xa8>
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	1b52      	subs	r2, r2, r5
 8003bdc:	d420      	bmi.n	8003c20 <_malloc_r+0xd0>
 8003bde:	2a0b      	cmp	r2, #11
 8003be0:	d917      	bls.n	8003c12 <_malloc_r+0xc2>
 8003be2:	1961      	adds	r1, r4, r5
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	6025      	str	r5, [r4, #0]
 8003be8:	bf18      	it	ne
 8003bea:	6059      	strne	r1, [r3, #4]
 8003bec:	6863      	ldr	r3, [r4, #4]
 8003bee:	bf08      	it	eq
 8003bf0:	f8c8 1000 	streq.w	r1, [r8]
 8003bf4:	5162      	str	r2, [r4, r5]
 8003bf6:	604b      	str	r3, [r1, #4]
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f000 f82f 	bl	8003c5c <__malloc_unlock>
 8003bfe:	f104 000b 	add.w	r0, r4, #11
 8003c02:	1d23      	adds	r3, r4, #4
 8003c04:	f020 0007 	bic.w	r0, r0, #7
 8003c08:	1ac2      	subs	r2, r0, r3
 8003c0a:	bf1c      	itt	ne
 8003c0c:	1a1b      	subne	r3, r3, r0
 8003c0e:	50a3      	strne	r3, [r4, r2]
 8003c10:	e7af      	b.n	8003b72 <_malloc_r+0x22>
 8003c12:	6862      	ldr	r2, [r4, #4]
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	bf0c      	ite	eq
 8003c18:	f8c8 2000 	streq.w	r2, [r8]
 8003c1c:	605a      	strne	r2, [r3, #4]
 8003c1e:	e7eb      	b.n	8003bf8 <_malloc_r+0xa8>
 8003c20:	4623      	mov	r3, r4
 8003c22:	6864      	ldr	r4, [r4, #4]
 8003c24:	e7ae      	b.n	8003b84 <_malloc_r+0x34>
 8003c26:	463c      	mov	r4, r7
 8003c28:	687f      	ldr	r7, [r7, #4]
 8003c2a:	e7b6      	b.n	8003b9a <_malloc_r+0x4a>
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	d1fb      	bne.n	8003c2c <_malloc_r+0xdc>
 8003c34:	2300      	movs	r3, #0
 8003c36:	6053      	str	r3, [r2, #4]
 8003c38:	e7de      	b.n	8003bf8 <_malloc_r+0xa8>
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	6033      	str	r3, [r6, #0]
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 f80c 	bl	8003c5c <__malloc_unlock>
 8003c44:	e794      	b.n	8003b70 <_malloc_r+0x20>
 8003c46:	6005      	str	r5, [r0, #0]
 8003c48:	e7d6      	b.n	8003bf8 <_malloc_r+0xa8>
 8003c4a:	bf00      	nop
 8003c4c:	200002c8 	.word	0x200002c8

08003c50 <__malloc_lock>:
 8003c50:	4801      	ldr	r0, [pc, #4]	@ (8003c58 <__malloc_lock+0x8>)
 8003c52:	f7ff bf0f 	b.w	8003a74 <__retarget_lock_acquire_recursive>
 8003c56:	bf00      	nop
 8003c58:	200002c0 	.word	0x200002c0

08003c5c <__malloc_unlock>:
 8003c5c:	4801      	ldr	r0, [pc, #4]	@ (8003c64 <__malloc_unlock+0x8>)
 8003c5e:	f7ff bf0a 	b.w	8003a76 <__retarget_lock_release_recursive>
 8003c62:	bf00      	nop
 8003c64:	200002c0 	.word	0x200002c0

08003c68 <__ssputs_r>:
 8003c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	688e      	ldr	r6, [r1, #8]
 8003c6e:	461f      	mov	r7, r3
 8003c70:	42be      	cmp	r6, r7
 8003c72:	680b      	ldr	r3, [r1, #0]
 8003c74:	4682      	mov	sl, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	4690      	mov	r8, r2
 8003c7a:	d82d      	bhi.n	8003cd8 <__ssputs_r+0x70>
 8003c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c84:	d026      	beq.n	8003cd4 <__ssputs_r+0x6c>
 8003c86:	6965      	ldr	r5, [r4, #20]
 8003c88:	6909      	ldr	r1, [r1, #16]
 8003c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c8e:	eba3 0901 	sub.w	r9, r3, r1
 8003c92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c96:	1c7b      	adds	r3, r7, #1
 8003c98:	444b      	add	r3, r9
 8003c9a:	106d      	asrs	r5, r5, #1
 8003c9c:	429d      	cmp	r5, r3
 8003c9e:	bf38      	it	cc
 8003ca0:	461d      	movcc	r5, r3
 8003ca2:	0553      	lsls	r3, r2, #21
 8003ca4:	d527      	bpl.n	8003cf6 <__ssputs_r+0x8e>
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f7ff ff52 	bl	8003b50 <_malloc_r>
 8003cac:	4606      	mov	r6, r0
 8003cae:	b360      	cbz	r0, 8003d0a <__ssputs_r+0xa2>
 8003cb0:	6921      	ldr	r1, [r4, #16]
 8003cb2:	464a      	mov	r2, r9
 8003cb4:	f000 fae8 	bl	8004288 <memcpy>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc2:	81a3      	strh	r3, [r4, #12]
 8003cc4:	6126      	str	r6, [r4, #16]
 8003cc6:	6165      	str	r5, [r4, #20]
 8003cc8:	444e      	add	r6, r9
 8003cca:	eba5 0509 	sub.w	r5, r5, r9
 8003cce:	6026      	str	r6, [r4, #0]
 8003cd0:	60a5      	str	r5, [r4, #8]
 8003cd2:	463e      	mov	r6, r7
 8003cd4:	42be      	cmp	r6, r7
 8003cd6:	d900      	bls.n	8003cda <__ssputs_r+0x72>
 8003cd8:	463e      	mov	r6, r7
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4641      	mov	r1, r8
 8003ce0:	f000 faa8 	bl	8004234 <memmove>
 8003ce4:	68a3      	ldr	r3, [r4, #8]
 8003ce6:	1b9b      	subs	r3, r3, r6
 8003ce8:	60a3      	str	r3, [r4, #8]
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	4433      	add	r3, r6
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	f000 fad4 	bl	80042a4 <_realloc_r>
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d1e0      	bne.n	8003cc4 <__ssputs_r+0x5c>
 8003d02:	6921      	ldr	r1, [r4, #16]
 8003d04:	4650      	mov	r0, sl
 8003d06:	f7ff feb7 	bl	8003a78 <_free_r>
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	f8ca 3000 	str.w	r3, [sl]
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	e7e9      	b.n	8003cf2 <__ssputs_r+0x8a>
	...

08003d20 <_svfiprintf_r>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	4698      	mov	r8, r3
 8003d26:	898b      	ldrh	r3, [r1, #12]
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	b09d      	sub	sp, #116	@ 0x74
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	460d      	mov	r5, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	d510      	bpl.n	8003d56 <_svfiprintf_r+0x36>
 8003d34:	690b      	ldr	r3, [r1, #16]
 8003d36:	b973      	cbnz	r3, 8003d56 <_svfiprintf_r+0x36>
 8003d38:	2140      	movs	r1, #64	@ 0x40
 8003d3a:	f7ff ff09 	bl	8003b50 <_malloc_r>
 8003d3e:	6028      	str	r0, [r5, #0]
 8003d40:	6128      	str	r0, [r5, #16]
 8003d42:	b930      	cbnz	r0, 8003d52 <_svfiprintf_r+0x32>
 8003d44:	230c      	movs	r3, #12
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	b01d      	add	sp, #116	@ 0x74
 8003d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d52:	2340      	movs	r3, #64	@ 0x40
 8003d54:	616b      	str	r3, [r5, #20]
 8003d56:	2300      	movs	r3, #0
 8003d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d64:	2330      	movs	r3, #48	@ 0x30
 8003d66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f04 <_svfiprintf_r+0x1e4>
 8003d6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d6e:	f04f 0901 	mov.w	r9, #1
 8003d72:	4623      	mov	r3, r4
 8003d74:	469a      	mov	sl, r3
 8003d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d7a:	b10a      	cbz	r2, 8003d80 <_svfiprintf_r+0x60>
 8003d7c:	2a25      	cmp	r2, #37	@ 0x25
 8003d7e:	d1f9      	bne.n	8003d74 <_svfiprintf_r+0x54>
 8003d80:	ebba 0b04 	subs.w	fp, sl, r4
 8003d84:	d00b      	beq.n	8003d9e <_svfiprintf_r+0x7e>
 8003d86:	465b      	mov	r3, fp
 8003d88:	4622      	mov	r2, r4
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f7ff ff6b 	bl	8003c68 <__ssputs_r>
 8003d92:	3001      	adds	r0, #1
 8003d94:	f000 80a7 	beq.w	8003ee6 <_svfiprintf_r+0x1c6>
 8003d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d9a:	445a      	add	r2, fp
 8003d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 809f 	beq.w	8003ee6 <_svfiprintf_r+0x1c6>
 8003da8:	2300      	movs	r3, #0
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003db2:	f10a 0a01 	add.w	sl, sl, #1
 8003db6:	9304      	str	r3, [sp, #16]
 8003db8:	9307      	str	r3, [sp, #28]
 8003dba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dc0:	4654      	mov	r4, sl
 8003dc2:	2205      	movs	r2, #5
 8003dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc8:	484e      	ldr	r0, [pc, #312]	@ (8003f04 <_svfiprintf_r+0x1e4>)
 8003dca:	f7fc fa11 	bl	80001f0 <memchr>
 8003dce:	9a04      	ldr	r2, [sp, #16]
 8003dd0:	b9d8      	cbnz	r0, 8003e0a <_svfiprintf_r+0xea>
 8003dd2:	06d0      	lsls	r0, r2, #27
 8003dd4:	bf44      	itt	mi
 8003dd6:	2320      	movmi	r3, #32
 8003dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ddc:	0711      	lsls	r1, r2, #28
 8003dde:	bf44      	itt	mi
 8003de0:	232b      	movmi	r3, #43	@ 0x2b
 8003de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003de6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dec:	d015      	beq.n	8003e1a <_svfiprintf_r+0xfa>
 8003dee:	9a07      	ldr	r2, [sp, #28]
 8003df0:	4654      	mov	r4, sl
 8003df2:	2000      	movs	r0, #0
 8003df4:	f04f 0c0a 	mov.w	ip, #10
 8003df8:	4621      	mov	r1, r4
 8003dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dfe:	3b30      	subs	r3, #48	@ 0x30
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d94b      	bls.n	8003e9c <_svfiprintf_r+0x17c>
 8003e04:	b1b0      	cbz	r0, 8003e34 <_svfiprintf_r+0x114>
 8003e06:	9207      	str	r2, [sp, #28]
 8003e08:	e014      	b.n	8003e34 <_svfiprintf_r+0x114>
 8003e0a:	eba0 0308 	sub.w	r3, r0, r8
 8003e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e12:	4313      	orrs	r3, r2
 8003e14:	9304      	str	r3, [sp, #16]
 8003e16:	46a2      	mov	sl, r4
 8003e18:	e7d2      	b.n	8003dc0 <_svfiprintf_r+0xa0>
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	1d19      	adds	r1, r3, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	9103      	str	r1, [sp, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bfbb      	ittet	lt
 8003e26:	425b      	neglt	r3, r3
 8003e28:	f042 0202 	orrlt.w	r2, r2, #2
 8003e2c:	9307      	strge	r3, [sp, #28]
 8003e2e:	9307      	strlt	r3, [sp, #28]
 8003e30:	bfb8      	it	lt
 8003e32:	9204      	strlt	r2, [sp, #16]
 8003e34:	7823      	ldrb	r3, [r4, #0]
 8003e36:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e38:	d10a      	bne.n	8003e50 <_svfiprintf_r+0x130>
 8003e3a:	7863      	ldrb	r3, [r4, #1]
 8003e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e3e:	d132      	bne.n	8003ea6 <_svfiprintf_r+0x186>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9203      	str	r2, [sp, #12]
 8003e48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e4c:	3402      	adds	r4, #2
 8003e4e:	9305      	str	r3, [sp, #20]
 8003e50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f14 <_svfiprintf_r+0x1f4>
 8003e54:	7821      	ldrb	r1, [r4, #0]
 8003e56:	2203      	movs	r2, #3
 8003e58:	4650      	mov	r0, sl
 8003e5a:	f7fc f9c9 	bl	80001f0 <memchr>
 8003e5e:	b138      	cbz	r0, 8003e70 <_svfiprintf_r+0x150>
 8003e60:	9b04      	ldr	r3, [sp, #16]
 8003e62:	eba0 000a 	sub.w	r0, r0, sl
 8003e66:	2240      	movs	r2, #64	@ 0x40
 8003e68:	4082      	lsls	r2, r0
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	3401      	adds	r4, #1
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e74:	4824      	ldr	r0, [pc, #144]	@ (8003f08 <_svfiprintf_r+0x1e8>)
 8003e76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e7a:	2206      	movs	r2, #6
 8003e7c:	f7fc f9b8 	bl	80001f0 <memchr>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d036      	beq.n	8003ef2 <_svfiprintf_r+0x1d2>
 8003e84:	4b21      	ldr	r3, [pc, #132]	@ (8003f0c <_svfiprintf_r+0x1ec>)
 8003e86:	bb1b      	cbnz	r3, 8003ed0 <_svfiprintf_r+0x1b0>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	f023 0307 	bic.w	r3, r3, #7
 8003e90:	3308      	adds	r3, #8
 8003e92:	9303      	str	r3, [sp, #12]
 8003e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e96:	4433      	add	r3, r6
 8003e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e9a:	e76a      	b.n	8003d72 <_svfiprintf_r+0x52>
 8003e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	e7a8      	b.n	8003df8 <_svfiprintf_r+0xd8>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	9305      	str	r3, [sp, #20]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f04f 0c0a 	mov.w	ip, #10
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb8:	3a30      	subs	r2, #48	@ 0x30
 8003eba:	2a09      	cmp	r2, #9
 8003ebc:	d903      	bls.n	8003ec6 <_svfiprintf_r+0x1a6>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0c6      	beq.n	8003e50 <_svfiprintf_r+0x130>
 8003ec2:	9105      	str	r1, [sp, #20]
 8003ec4:	e7c4      	b.n	8003e50 <_svfiprintf_r+0x130>
 8003ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eca:	4604      	mov	r4, r0
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e7f0      	b.n	8003eb2 <_svfiprintf_r+0x192>
 8003ed0:	ab03      	add	r3, sp, #12
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <_svfiprintf_r+0x1f0>)
 8003ed8:	a904      	add	r1, sp, #16
 8003eda:	4638      	mov	r0, r7
 8003edc:	f3af 8000 	nop.w
 8003ee0:	1c42      	adds	r2, r0, #1
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	d1d6      	bne.n	8003e94 <_svfiprintf_r+0x174>
 8003ee6:	89ab      	ldrh	r3, [r5, #12]
 8003ee8:	065b      	lsls	r3, r3, #25
 8003eea:	f53f af2d 	bmi.w	8003d48 <_svfiprintf_r+0x28>
 8003eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ef0:	e72c      	b.n	8003d4c <_svfiprintf_r+0x2c>
 8003ef2:	ab03      	add	r3, sp, #12
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4b05      	ldr	r3, [pc, #20]	@ (8003f10 <_svfiprintf_r+0x1f0>)
 8003efa:	a904      	add	r1, sp, #16
 8003efc:	4638      	mov	r0, r7
 8003efe:	f000 f879 	bl	8003ff4 <_printf_i>
 8003f02:	e7ed      	b.n	8003ee0 <_svfiprintf_r+0x1c0>
 8003f04:	08004360 	.word	0x08004360
 8003f08:	0800436a 	.word	0x0800436a
 8003f0c:	00000000 	.word	0x00000000
 8003f10:	08003c69 	.word	0x08003c69
 8003f14:	08004366 	.word	0x08004366

08003f18 <_printf_common>:
 8003f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	4616      	mov	r6, r2
 8003f1e:	4698      	mov	r8, r3
 8003f20:	688a      	ldr	r2, [r1, #8]
 8003f22:	690b      	ldr	r3, [r1, #16]
 8003f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	bfb8      	it	lt
 8003f2c:	4613      	movlt	r3, r2
 8003f2e:	6033      	str	r3, [r6, #0]
 8003f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f34:	4607      	mov	r7, r0
 8003f36:	460c      	mov	r4, r1
 8003f38:	b10a      	cbz	r2, 8003f3e <_printf_common+0x26>
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	6033      	str	r3, [r6, #0]
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	0699      	lsls	r1, r3, #26
 8003f42:	bf42      	ittt	mi
 8003f44:	6833      	ldrmi	r3, [r6, #0]
 8003f46:	3302      	addmi	r3, #2
 8003f48:	6033      	strmi	r3, [r6, #0]
 8003f4a:	6825      	ldr	r5, [r4, #0]
 8003f4c:	f015 0506 	ands.w	r5, r5, #6
 8003f50:	d106      	bne.n	8003f60 <_printf_common+0x48>
 8003f52:	f104 0a19 	add.w	sl, r4, #25
 8003f56:	68e3      	ldr	r3, [r4, #12]
 8003f58:	6832      	ldr	r2, [r6, #0]
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	42ab      	cmp	r3, r5
 8003f5e:	dc26      	bgt.n	8003fae <_printf_common+0x96>
 8003f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f64:	6822      	ldr	r2, [r4, #0]
 8003f66:	3b00      	subs	r3, #0
 8003f68:	bf18      	it	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	0692      	lsls	r2, r2, #26
 8003f6e:	d42b      	bmi.n	8003fc8 <_printf_common+0xb0>
 8003f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f74:	4641      	mov	r1, r8
 8003f76:	4638      	mov	r0, r7
 8003f78:	47c8      	blx	r9
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d01e      	beq.n	8003fbc <_printf_common+0xa4>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	6922      	ldr	r2, [r4, #16]
 8003f82:	f003 0306 	and.w	r3, r3, #6
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	bf02      	ittt	eq
 8003f8a:	68e5      	ldreq	r5, [r4, #12]
 8003f8c:	6833      	ldreq	r3, [r6, #0]
 8003f8e:	1aed      	subeq	r5, r5, r3
 8003f90:	68a3      	ldr	r3, [r4, #8]
 8003f92:	bf0c      	ite	eq
 8003f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f98:	2500      	movne	r5, #0
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bfc4      	itt	gt
 8003f9e:	1a9b      	subgt	r3, r3, r2
 8003fa0:	18ed      	addgt	r5, r5, r3
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	341a      	adds	r4, #26
 8003fa6:	42b5      	cmp	r5, r6
 8003fa8:	d11a      	bne.n	8003fe0 <_printf_common+0xc8>
 8003faa:	2000      	movs	r0, #0
 8003fac:	e008      	b.n	8003fc0 <_printf_common+0xa8>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	4652      	mov	r2, sl
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	47c8      	blx	r9
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d103      	bne.n	8003fc4 <_printf_common+0xac>
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc4:	3501      	adds	r5, #1
 8003fc6:	e7c6      	b.n	8003f56 <_printf_common+0x3e>
 8003fc8:	18e1      	adds	r1, r4, r3
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	2030      	movs	r0, #48	@ 0x30
 8003fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fd2:	4422      	add	r2, r4
 8003fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fdc:	3302      	adds	r3, #2
 8003fde:	e7c7      	b.n	8003f70 <_printf_common+0x58>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	47c8      	blx	r9
 8003fea:	3001      	adds	r0, #1
 8003fec:	d0e6      	beq.n	8003fbc <_printf_common+0xa4>
 8003fee:	3601      	adds	r6, #1
 8003ff0:	e7d9      	b.n	8003fa6 <_printf_common+0x8e>
	...

08003ff4 <_printf_i>:
 8003ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	7e0f      	ldrb	r7, [r1, #24]
 8003ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ffc:	2f78      	cmp	r7, #120	@ 0x78
 8003ffe:	4691      	mov	r9, r2
 8004000:	4680      	mov	r8, r0
 8004002:	460c      	mov	r4, r1
 8004004:	469a      	mov	sl, r3
 8004006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800400a:	d807      	bhi.n	800401c <_printf_i+0x28>
 800400c:	2f62      	cmp	r7, #98	@ 0x62
 800400e:	d80a      	bhi.n	8004026 <_printf_i+0x32>
 8004010:	2f00      	cmp	r7, #0
 8004012:	f000 80d2 	beq.w	80041ba <_printf_i+0x1c6>
 8004016:	2f58      	cmp	r7, #88	@ 0x58
 8004018:	f000 80b9 	beq.w	800418e <_printf_i+0x19a>
 800401c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004024:	e03a      	b.n	800409c <_printf_i+0xa8>
 8004026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800402a:	2b15      	cmp	r3, #21
 800402c:	d8f6      	bhi.n	800401c <_printf_i+0x28>
 800402e:	a101      	add	r1, pc, #4	@ (adr r1, 8004034 <_printf_i+0x40>)
 8004030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004034:	0800408d 	.word	0x0800408d
 8004038:	080040a1 	.word	0x080040a1
 800403c:	0800401d 	.word	0x0800401d
 8004040:	0800401d 	.word	0x0800401d
 8004044:	0800401d 	.word	0x0800401d
 8004048:	0800401d 	.word	0x0800401d
 800404c:	080040a1 	.word	0x080040a1
 8004050:	0800401d 	.word	0x0800401d
 8004054:	0800401d 	.word	0x0800401d
 8004058:	0800401d 	.word	0x0800401d
 800405c:	0800401d 	.word	0x0800401d
 8004060:	080041a1 	.word	0x080041a1
 8004064:	080040cb 	.word	0x080040cb
 8004068:	0800415b 	.word	0x0800415b
 800406c:	0800401d 	.word	0x0800401d
 8004070:	0800401d 	.word	0x0800401d
 8004074:	080041c3 	.word	0x080041c3
 8004078:	0800401d 	.word	0x0800401d
 800407c:	080040cb 	.word	0x080040cb
 8004080:	0800401d 	.word	0x0800401d
 8004084:	0800401d 	.word	0x0800401d
 8004088:	08004163 	.word	0x08004163
 800408c:	6833      	ldr	r3, [r6, #0]
 800408e:	1d1a      	adds	r2, r3, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6032      	str	r2, [r6, #0]
 8004094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800409c:	2301      	movs	r3, #1
 800409e:	e09d      	b.n	80041dc <_printf_i+0x1e8>
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	1d19      	adds	r1, r3, #4
 80040a6:	6031      	str	r1, [r6, #0]
 80040a8:	0606      	lsls	r6, r0, #24
 80040aa:	d501      	bpl.n	80040b0 <_printf_i+0xbc>
 80040ac:	681d      	ldr	r5, [r3, #0]
 80040ae:	e003      	b.n	80040b8 <_printf_i+0xc4>
 80040b0:	0645      	lsls	r5, r0, #25
 80040b2:	d5fb      	bpl.n	80040ac <_printf_i+0xb8>
 80040b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	da03      	bge.n	80040c4 <_printf_i+0xd0>
 80040bc:	232d      	movs	r3, #45	@ 0x2d
 80040be:	426d      	negs	r5, r5
 80040c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040c4:	4859      	ldr	r0, [pc, #356]	@ (800422c <_printf_i+0x238>)
 80040c6:	230a      	movs	r3, #10
 80040c8:	e011      	b.n	80040ee <_printf_i+0xfa>
 80040ca:	6821      	ldr	r1, [r4, #0]
 80040cc:	6833      	ldr	r3, [r6, #0]
 80040ce:	0608      	lsls	r0, r1, #24
 80040d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80040d4:	d402      	bmi.n	80040dc <_printf_i+0xe8>
 80040d6:	0649      	lsls	r1, r1, #25
 80040d8:	bf48      	it	mi
 80040da:	b2ad      	uxthmi	r5, r5
 80040dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80040de:	4853      	ldr	r0, [pc, #332]	@ (800422c <_printf_i+0x238>)
 80040e0:	6033      	str	r3, [r6, #0]
 80040e2:	bf14      	ite	ne
 80040e4:	230a      	movne	r3, #10
 80040e6:	2308      	moveq	r3, #8
 80040e8:	2100      	movs	r1, #0
 80040ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040ee:	6866      	ldr	r6, [r4, #4]
 80040f0:	60a6      	str	r6, [r4, #8]
 80040f2:	2e00      	cmp	r6, #0
 80040f4:	bfa2      	ittt	ge
 80040f6:	6821      	ldrge	r1, [r4, #0]
 80040f8:	f021 0104 	bicge.w	r1, r1, #4
 80040fc:	6021      	strge	r1, [r4, #0]
 80040fe:	b90d      	cbnz	r5, 8004104 <_printf_i+0x110>
 8004100:	2e00      	cmp	r6, #0
 8004102:	d04b      	beq.n	800419c <_printf_i+0x1a8>
 8004104:	4616      	mov	r6, r2
 8004106:	fbb5 f1f3 	udiv	r1, r5, r3
 800410a:	fb03 5711 	mls	r7, r3, r1, r5
 800410e:	5dc7      	ldrb	r7, [r0, r7]
 8004110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004114:	462f      	mov	r7, r5
 8004116:	42bb      	cmp	r3, r7
 8004118:	460d      	mov	r5, r1
 800411a:	d9f4      	bls.n	8004106 <_printf_i+0x112>
 800411c:	2b08      	cmp	r3, #8
 800411e:	d10b      	bne.n	8004138 <_printf_i+0x144>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	07df      	lsls	r7, r3, #31
 8004124:	d508      	bpl.n	8004138 <_printf_i+0x144>
 8004126:	6923      	ldr	r3, [r4, #16]
 8004128:	6861      	ldr	r1, [r4, #4]
 800412a:	4299      	cmp	r1, r3
 800412c:	bfde      	ittt	le
 800412e:	2330      	movle	r3, #48	@ 0x30
 8004130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004134:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004138:	1b92      	subs	r2, r2, r6
 800413a:	6122      	str	r2, [r4, #16]
 800413c:	f8cd a000 	str.w	sl, [sp]
 8004140:	464b      	mov	r3, r9
 8004142:	aa03      	add	r2, sp, #12
 8004144:	4621      	mov	r1, r4
 8004146:	4640      	mov	r0, r8
 8004148:	f7ff fee6 	bl	8003f18 <_printf_common>
 800414c:	3001      	adds	r0, #1
 800414e:	d14a      	bne.n	80041e6 <_printf_i+0x1f2>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b004      	add	sp, #16
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f043 0320 	orr.w	r3, r3, #32
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	4833      	ldr	r0, [pc, #204]	@ (8004230 <_printf_i+0x23c>)
 8004164:	2778      	movs	r7, #120	@ 0x78
 8004166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	6831      	ldr	r1, [r6, #0]
 800416e:	061f      	lsls	r7, r3, #24
 8004170:	f851 5b04 	ldr.w	r5, [r1], #4
 8004174:	d402      	bmi.n	800417c <_printf_i+0x188>
 8004176:	065f      	lsls	r7, r3, #25
 8004178:	bf48      	it	mi
 800417a:	b2ad      	uxthmi	r5, r5
 800417c:	6031      	str	r1, [r6, #0]
 800417e:	07d9      	lsls	r1, r3, #31
 8004180:	bf44      	itt	mi
 8004182:	f043 0320 	orrmi.w	r3, r3, #32
 8004186:	6023      	strmi	r3, [r4, #0]
 8004188:	b11d      	cbz	r5, 8004192 <_printf_i+0x19e>
 800418a:	2310      	movs	r3, #16
 800418c:	e7ac      	b.n	80040e8 <_printf_i+0xf4>
 800418e:	4827      	ldr	r0, [pc, #156]	@ (800422c <_printf_i+0x238>)
 8004190:	e7e9      	b.n	8004166 <_printf_i+0x172>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f023 0320 	bic.w	r3, r3, #32
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	e7f6      	b.n	800418a <_printf_i+0x196>
 800419c:	4616      	mov	r6, r2
 800419e:	e7bd      	b.n	800411c <_printf_i+0x128>
 80041a0:	6833      	ldr	r3, [r6, #0]
 80041a2:	6825      	ldr	r5, [r4, #0]
 80041a4:	6961      	ldr	r1, [r4, #20]
 80041a6:	1d18      	adds	r0, r3, #4
 80041a8:	6030      	str	r0, [r6, #0]
 80041aa:	062e      	lsls	r6, r5, #24
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0x1c0>
 80041b0:	6019      	str	r1, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0x1c6>
 80041b4:	0668      	lsls	r0, r5, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0x1bc>
 80041b8:	8019      	strh	r1, [r3, #0]
 80041ba:	2300      	movs	r3, #0
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	4616      	mov	r6, r2
 80041c0:	e7bc      	b.n	800413c <_printf_i+0x148>
 80041c2:	6833      	ldr	r3, [r6, #0]
 80041c4:	1d1a      	adds	r2, r3, #4
 80041c6:	6032      	str	r2, [r6, #0]
 80041c8:	681e      	ldr	r6, [r3, #0]
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	2100      	movs	r1, #0
 80041ce:	4630      	mov	r0, r6
 80041d0:	f7fc f80e 	bl	80001f0 <memchr>
 80041d4:	b108      	cbz	r0, 80041da <_printf_i+0x1e6>
 80041d6:	1b80      	subs	r0, r0, r6
 80041d8:	6060      	str	r0, [r4, #4]
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	6123      	str	r3, [r4, #16]
 80041de:	2300      	movs	r3, #0
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e4:	e7aa      	b.n	800413c <_printf_i+0x148>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	4632      	mov	r2, r6
 80041ea:	4649      	mov	r1, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	47d0      	blx	sl
 80041f0:	3001      	adds	r0, #1
 80041f2:	d0ad      	beq.n	8004150 <_printf_i+0x15c>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	079b      	lsls	r3, r3, #30
 80041f8:	d413      	bmi.n	8004222 <_printf_i+0x22e>
 80041fa:	68e0      	ldr	r0, [r4, #12]
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	4298      	cmp	r0, r3
 8004200:	bfb8      	it	lt
 8004202:	4618      	movlt	r0, r3
 8004204:	e7a6      	b.n	8004154 <_printf_i+0x160>
 8004206:	2301      	movs	r3, #1
 8004208:	4632      	mov	r2, r6
 800420a:	4649      	mov	r1, r9
 800420c:	4640      	mov	r0, r8
 800420e:	47d0      	blx	sl
 8004210:	3001      	adds	r0, #1
 8004212:	d09d      	beq.n	8004150 <_printf_i+0x15c>
 8004214:	3501      	adds	r5, #1
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	9903      	ldr	r1, [sp, #12]
 800421a:	1a5b      	subs	r3, r3, r1
 800421c:	42ab      	cmp	r3, r5
 800421e:	dcf2      	bgt.n	8004206 <_printf_i+0x212>
 8004220:	e7eb      	b.n	80041fa <_printf_i+0x206>
 8004222:	2500      	movs	r5, #0
 8004224:	f104 0619 	add.w	r6, r4, #25
 8004228:	e7f5      	b.n	8004216 <_printf_i+0x222>
 800422a:	bf00      	nop
 800422c:	08004371 	.word	0x08004371
 8004230:	08004382 	.word	0x08004382

08004234 <memmove>:
 8004234:	4288      	cmp	r0, r1
 8004236:	b510      	push	{r4, lr}
 8004238:	eb01 0402 	add.w	r4, r1, r2
 800423c:	d902      	bls.n	8004244 <memmove+0x10>
 800423e:	4284      	cmp	r4, r0
 8004240:	4623      	mov	r3, r4
 8004242:	d807      	bhi.n	8004254 <memmove+0x20>
 8004244:	1e43      	subs	r3, r0, #1
 8004246:	42a1      	cmp	r1, r4
 8004248:	d008      	beq.n	800425c <memmove+0x28>
 800424a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800424e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004252:	e7f8      	b.n	8004246 <memmove+0x12>
 8004254:	4402      	add	r2, r0
 8004256:	4601      	mov	r1, r0
 8004258:	428a      	cmp	r2, r1
 800425a:	d100      	bne.n	800425e <memmove+0x2a>
 800425c:	bd10      	pop	{r4, pc}
 800425e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004266:	e7f7      	b.n	8004258 <memmove+0x24>

08004268 <_sbrk_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d06      	ldr	r5, [pc, #24]	@ (8004284 <_sbrk_r+0x1c>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	f7fc fe46 	bl	8000f04 <_sbrk>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_sbrk_r+0x1a>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	b103      	cbz	r3, 8004282 <_sbrk_r+0x1a>
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	200002bc 	.word	0x200002bc

08004288 <memcpy>:
 8004288:	440a      	add	r2, r1
 800428a:	4291      	cmp	r1, r2
 800428c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004290:	d100      	bne.n	8004294 <memcpy+0xc>
 8004292:	4770      	bx	lr
 8004294:	b510      	push	{r4, lr}
 8004296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800429a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800429e:	4291      	cmp	r1, r2
 80042a0:	d1f9      	bne.n	8004296 <memcpy+0xe>
 80042a2:	bd10      	pop	{r4, pc}

080042a4 <_realloc_r>:
 80042a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a8:	4680      	mov	r8, r0
 80042aa:	4615      	mov	r5, r2
 80042ac:	460c      	mov	r4, r1
 80042ae:	b921      	cbnz	r1, 80042ba <_realloc_r+0x16>
 80042b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042b4:	4611      	mov	r1, r2
 80042b6:	f7ff bc4b 	b.w	8003b50 <_malloc_r>
 80042ba:	b92a      	cbnz	r2, 80042c8 <_realloc_r+0x24>
 80042bc:	f7ff fbdc 	bl	8003a78 <_free_r>
 80042c0:	2400      	movs	r4, #0
 80042c2:	4620      	mov	r0, r4
 80042c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c8:	f000 f81a 	bl	8004300 <_malloc_usable_size_r>
 80042cc:	4285      	cmp	r5, r0
 80042ce:	4606      	mov	r6, r0
 80042d0:	d802      	bhi.n	80042d8 <_realloc_r+0x34>
 80042d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042d6:	d8f4      	bhi.n	80042c2 <_realloc_r+0x1e>
 80042d8:	4629      	mov	r1, r5
 80042da:	4640      	mov	r0, r8
 80042dc:	f7ff fc38 	bl	8003b50 <_malloc_r>
 80042e0:	4607      	mov	r7, r0
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d0ec      	beq.n	80042c0 <_realloc_r+0x1c>
 80042e6:	42b5      	cmp	r5, r6
 80042e8:	462a      	mov	r2, r5
 80042ea:	4621      	mov	r1, r4
 80042ec:	bf28      	it	cs
 80042ee:	4632      	movcs	r2, r6
 80042f0:	f7ff ffca 	bl	8004288 <memcpy>
 80042f4:	4621      	mov	r1, r4
 80042f6:	4640      	mov	r0, r8
 80042f8:	f7ff fbbe 	bl	8003a78 <_free_r>
 80042fc:	463c      	mov	r4, r7
 80042fe:	e7e0      	b.n	80042c2 <_realloc_r+0x1e>

08004300 <_malloc_usable_size_r>:
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f18      	subs	r0, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfbc      	itt	lt
 800430a:	580b      	ldrlt	r3, [r1, r0]
 800430c:	18c0      	addlt	r0, r0, r3
 800430e:	4770      	bx	lr

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
