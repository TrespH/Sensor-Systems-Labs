
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009334  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080094d8  080094d8  0000a4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009930  08009930  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009930  08009930  0000a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009938  08009938  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009938  08009938  0000a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800993c  0800993c  0000a93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009940  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d4  08009b14  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08009b14  0000b4c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b1  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001edb  00000000  00000000  000189b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0001a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  0001b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f63  00000000  00000000  0001bfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9b5  00000000  00000000  00032f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f52b  00000000  00000000  000418fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0e25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  000d0e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d5af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094bc 	.word	0x080094bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080094bc 	.word	0x080094bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001000:	4293      	cmp	r3, r2
 8001002:	f040 808c 	bne.w	800111e <HAL_TIM_PeriodElapsedCallback+0x12a>
	{
		old_position = new_position; 							 //Save last position into the "old" variable
 8001006:	4b49      	ldr	r3, [pc, #292]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800100c:	801a      	strh	r2, [r3, #0]

		new_position = (uint16_t) __HAL_TIM_GET_COUNTER(&htim3); //Get the new position
 800100e:	4b49      	ldr	r3, [pc, #292]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b45      	ldr	r3, [pc, #276]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001018:	801a      	strh	r2, [r3, #0]

		if (new_position < old_position - (STEPS + 1)/2)		 //If overflow is detected
 800101a:	4b44      	ldr	r3, [pc, #272]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001028:	429a      	cmp	r2, r3
 800102a:	da1d      	bge.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			rpm = ((new_position - old_position + (STEPS + 1)) * 60) / 24.0;
 800102c:	4b3f      	ldr	r3, [pc, #252]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b3f      	ldr	r3, [pc, #252]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800103c:	4613      	mov	r3, r2
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa75 	bl	8000534 <__aeabi_i2d>
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001050:	f7ff fc04 	bl	800085c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fdcc 	bl	8000bf8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4a36      	ldr	r2, [pc, #216]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e041      	b.n	80010ec <HAL_TIM_PeriodElapsedCallback+0xf8>
		}
		else if (new_position > old_position + (STEPS + 1)/2)	 //If underflow is detected
 8001068:	4b30      	ldr	r3, [pc, #192]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001076:	429a      	cmp	r2, r3
 8001078:	dd1d      	ble.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0xc2>
		{
			rpm = ((new_position - old_position - (STEPS + 1)) * 60 ) / 24.0;
 800107a:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 800108a:	4613      	mov	r3, r2
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa4e 	bl	8000534 <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800109e:	f7ff fbdd 	bl	800085c <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fda5 	bl	8000bf8 <__aeabi_d2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a22      	ldr	r2, [pc, #136]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	e01a      	b.n	80010ec <HAL_TIM_PeriodElapsedCallback+0xf8>
		}
		else 													 //No overflow neither underflow detected
		{
			rpm = ((new_position - old_position) * 60) / 24.0;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	4613      	mov	r3, r2
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa32 	bl	8000534 <__aeabi_i2d>
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010d6:	f7ff fbc1 	bl	800085c <__aeabi_ddiv>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fd89 	bl	8000bf8 <__aeabi_d2f>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80010ea:	6013      	str	r3, [r2, #0]
		}

		string_length = snprintf(string, sizeof(string), "rpm: %.1f \n", rpm);
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa31 	bl	8000558 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	e9cd 2300 	strd	r2, r3, [sp]
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001100:	2140      	movs	r1, #64	@ 0x40
 8001102:	4810      	ldr	r0, [pc, #64]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001104:	f004 fd6e 	bl	8005be4 <sniprintf>
 8001108:	4603      	mov	r3, r0
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800110e:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit_DMA(&huart2, string, string_length);	//Send the string via UART to PC;
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	490b      	ldr	r1, [pc, #44]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800111a:	f002 fe21 	bl	8003d60 <HAL_UART_Transmit_DMA>
	}
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001f0 	.word	0x200001f0
 800112c:	20000328 	.word	0x20000328
 8001130:	2000032a 	.word	0x2000032a
 8001134:	20000238 	.word	0x20000238
 8001138:	40380000 	.word	0x40380000
 800113c:	2000032c 	.word	0x2000032c
 8001140:	080094d8 	.word	0x080094d8
 8001144:	20000330 	.word	0x20000330
 8001148:	20000370 	.word	0x20000370
 800114c:	20000280 	.word	0x20000280

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fc64 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f81a 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 f972 	bl	8001444 <MX_GPIO_Init>
  MX_DMA_Init();
 8001160:	f000 f950 	bl	8001404 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001164:	f000 f924 	bl	80013b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001168:	f000 f8cc 	bl	8001304 <MX_TIM3_Init>
  MX_TIM2_Init();
 800116c:	f000 f87c 	bl	8001268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <main+0x38>)
 8001172:	f002 f861 	bl	8003238 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <main+0x3c>)
 8001178:	f002 f85e 	bl	8003238 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800117c:	213c      	movs	r1, #60	@ 0x3c
 800117e:	4803      	ldr	r0, [pc, #12]	@ (800118c <main+0x3c>)
 8001180:	f002 f962 	bl	8003448 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <main+0x34>
 8001188:	200001f0 	.word	0x200001f0
 800118c:	20000238 	.word	0x20000238

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	@ 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fdb7 	bl	8005d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <SystemClock_Config+0xd0>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <SystemClock_Config+0xd0>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <SystemClock_Config+0xd0>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <SystemClock_Config+0xd4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011dc:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <SystemClock_Config+0xd4>)
 80011de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <SystemClock_Config+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001204:	2310      	movs	r3, #16
 8001206:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001208:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800120c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800120e:	2304      	movs	r3, #4
 8001210:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001212:	2307      	movs	r3, #7
 8001214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fb24 	bl	8002868 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001226:	f000 f97b 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2302      	movs	r3, #2
 8001230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2102      	movs	r1, #2
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fd86 	bl	8002d58 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001252:	f000 f965 	bl	8001520 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	@ 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM2_Init+0x98>)
 800128e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM2_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10)-1;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM2_Init+0x98>)
 800129c:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012b0:	f001 ff72 	bl	8003198 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ba:	f000 f931 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012cc:	f002 fa3a 	bl	8003744 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012d6:	f000 f923 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_TIM2_Init+0x98>)
 80012e8:	f002 fc68 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012f2:	f000 f915 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001f0 	.word	0x200001f0

08001304 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2224      	movs	r2, #36	@ 0x24
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fcfd 	bl	8005d12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 8001322:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <MX_TIM3_Init+0xa8>)
 8001324:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = STEPS;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 8001334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001338:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 800133c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001340:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001348:	2301      	movs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001350:	2301      	movs	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001358:	230f      	movs	r3, #15
 800135a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001360:	2301      	movs	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001368:	230f      	movs	r3, #15
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 8001374:	f001 ffc2 	bl	80032fc <HAL_TIM_Encoder_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800137e:	f000 f8cf 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM3_Init+0xa4>)
 8001390:	f002 fc14 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800139a:	f000 f8c1 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3730      	adds	r7, #48	@ 0x30
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000238 	.word	0x20000238
 80013ac:	40000400 	.word	0x40000400

080013b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <MX_USART2_UART_Init+0x50>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e8:	f002 fc6a 	bl	8003cc0 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f2:	f000 f895 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000280 	.word	0x20000280
 8001400:	40004400 	.word	0x40004400

08001404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_DMA_Init+0x3c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <MX_DMA_Init+0x3c>)
 8001414:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_DMA_Init+0x3c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2011      	movs	r0, #17
 800142c:	f000 fc45 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001430:	2011      	movs	r0, #17
 8001432:	f000 fc5e 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a2c      	ldr	r2, [pc, #176]	@ (8001514 <MX_GPIO_Init+0xd0>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <MX_GPIO_Init+0xd0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a25      	ldr	r2, [pc, #148]	@ (8001514 <MX_GPIO_Init+0xd0>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <MX_GPIO_Init+0xd0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <MX_GPIO_Init+0xd0>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <MX_GPIO_Init+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <MX_GPIO_Init+0xd0>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	4812      	ldr	r0, [pc, #72]	@ (8001518 <MX_GPIO_Init+0xd4>)
 80014d0:	f001 f9b0 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	@ (800151c <MX_GPIO_Init+0xd8>)
 80014ec:	f001 f81e 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014f0:	2320      	movs	r3, #32
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4804      	ldr	r0, [pc, #16]	@ (8001518 <MX_GPIO_Init+0xd4>)
 8001508:	f001 f810 	bl	800252c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	@ 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020800 	.word	0x40020800

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <Error_Handler+0x8>

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001540:	6453      	str	r3, [r2, #68]	@ 0x44
 8001542:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156a:	2007      	movs	r0, #7
 800156c:	f000 fb9a 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800158c:	d115      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <HAL_TIM_Base_MspInit+0x48>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a0b      	ldr	r2, [pc, #44]	@ (80015c4 <HAL_TIM_Base_MspInit+0x48>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HAL_TIM_Base_MspInit+0x48>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	201c      	movs	r0, #28
 80015b0:	f000 fb83 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015b4:	201c      	movs	r0, #28
 80015b6:	f000 fb9c 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <HAL_TIM_Encoder_MspInit+0x94>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d133      	bne.n	8001652 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x98>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x98>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x98>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x98>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x98>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x98>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001622:	23c0      	movs	r3, #192	@ 0xc0
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001632:	2302      	movs	r3, #2
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x9c>)
 800163e:	f000 ff75 	bl	800252c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	201d      	movs	r0, #29
 8001648:	f000 fb37 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800164c:	201d      	movs	r0, #29
 800164e:	f000 fb50 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40000400 	.word	0x40000400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a34      	ldr	r2, [pc, #208]	@ (8001758 <HAL_UART_MspInit+0xf0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d161      	bne.n	800174e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b33      	ldr	r3, [pc, #204]	@ (800175c <HAL_UART_MspInit+0xf4>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a32      	ldr	r2, [pc, #200]	@ (800175c <HAL_UART_MspInit+0xf4>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b30      	ldr	r3, [pc, #192]	@ (800175c <HAL_UART_MspInit+0xf4>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <HAL_UART_MspInit+0xf4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <HAL_UART_MspInit+0xf4>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_UART_MspInit+0xf4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c2:	230c      	movs	r3, #12
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d2:	2307      	movs	r3, #7
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4820      	ldr	r0, [pc, #128]	@ (8001760 <HAL_UART_MspInit+0xf8>)
 80016de:	f000 ff25 	bl	800252c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016e4:	4a20      	ldr	r2, [pc, #128]	@ (8001768 <HAL_UART_MspInit+0x100>)
 80016e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016f2:	2240      	movs	r2, #64	@ 0x40
 80016f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 80016fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001702:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001722:	4810      	ldr	r0, [pc, #64]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001724:	f000 fb00 	bl	8001d28 <HAL_DMA_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800172e:	f7ff fef7 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 8001736:	639a      	str	r2, [r3, #56]	@ 0x38
 8001738:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <HAL_UART_MspInit+0xfc>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2026      	movs	r0, #38	@ 0x26
 8001744:	f000 fab9 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001748:	2026      	movs	r0, #38	@ 0x26
 800174a:	f000 fad2 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	@ 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40004400 	.word	0x40004400
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	200002c8 	.word	0x200002c8
 8001768:	400260a0 	.word	0x400260a0

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <NMI_Handler+0x4>

08001774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <MemManage_Handler+0x4>

08001784 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <UsageFault_Handler+0x4>

08001794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c2:	f000 f97f 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <DMA1_Stream6_IRQHandler+0x10>)
 80017d2:	f000 fc41 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200002c8 	.word	0x200002c8

080017e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <TIM2_IRQHandler+0x10>)
 80017e6:	f001 febd 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200001f0 	.word	0x200001f0

080017f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <TIM3_IRQHandler+0x10>)
 80017fa:	f001 feb3 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000238 	.word	0x20000238

08001808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <USART2_IRQHandler+0x10>)
 800180e:	f002 fb17 	bl	8003e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000280 	.word	0x20000280

0800181c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_kill>:

int _kill(int pid, int sig)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001836:	f004 fabf 	bl	8005db8 <__errno>
 800183a:	4603      	mov	r3, r0
 800183c:	2216      	movs	r2, #22
 800183e:	601a      	str	r2, [r3, #0]
  return -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_exit>:

void _exit (int status)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffe7 	bl	800182c <_kill>
  while (1) {}    /* Make sure we hang here */
 800185e:	bf00      	nop
 8001860:	e7fd      	b.n	800185e <_exit+0x12>

08001862 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e00a      	b.n	800188a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001874:	f3af 8000 	nop.w
 8001878:	4601      	mov	r1, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	60ba      	str	r2, [r7, #8]
 8001880:	b2ca      	uxtb	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	dbf0      	blt.n	8001874 <_read+0x12>
  }

  return len;
 8001892:	687b      	ldr	r3, [r7, #4]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e009      	b.n	80018c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	60ba      	str	r2, [r7, #8]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbf1      	blt.n	80018ae <_write+0x12>
  }
  return len;
 80018ca:	687b      	ldr	r3, [r7, #4]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_close>:

int _close(int file)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018fc:	605a      	str	r2, [r3, #4]
  return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_isatty>:

int _isatty(int file)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f004 fa24 	bl	8005db8 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20018000 	.word	0x20018000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000374 	.word	0x20000374
 80019a4:	200004c8 	.word	0x200004c8

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d0:	f7ff ffea 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	@ (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f004 f9e3 	bl	8005dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff fba7 	bl	8001150 <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a10:	08009940 	.word	0x08009940
  ldr r2, =_sbss
 8001a14:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a18:	200004c8 	.word	0x200004c8

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	@ (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f92b 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fd6a 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f943 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f90b 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000378 	.word	0x20000378

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000378 	.word	0x20000378

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff feda 	bl	8001aec <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e099      	b.n	8001e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d64:	e00f      	b.n	8001d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d66:	f7ff fec1 	bl	8001aec <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d908      	bls.n	8001d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e078      	b.n	8001e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e8      	bne.n	8001d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <HAL_DMA_Init+0x158>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	4313      	orrs	r3, r2
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f023 0307 	bic.w	r3, r3, #7
 8001e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d117      	bne.n	8001e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fb01 	bl	8002434 <DMA_CheckFifoParam>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e46:	2301      	movs	r3, #1
 8001e48:	e016      	b.n	8001e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fab8 	bl	80023c8 <DMA_CalcBaseAndBitshift>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	223f      	movs	r2, #63	@ 0x3f
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	f010803f 	.word	0xf010803f

08001e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Start_IT+0x26>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e040      	b.n	8001f2c <HAL_DMA_Start_IT+0xa8>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d12f      	bne.n	8001f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa4a 	bl	800236c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001edc:	223f      	movs	r2, #63	@ 0x3f
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0216 	orr.w	r2, r2, #22
 8001ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e005      	b.n	8001f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f42:	f7ff fdd3 	bl	8001aec <HAL_GetTick>
 8001f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2280      	movs	r2, #128	@ 0x80
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e052      	b.n	800200c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0216 	bic.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_DMA_Abort+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	e013      	b.n	8001fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb8:	f7ff fd98 	bl	8001aec <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d90c      	bls.n	8001fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e015      	b.n	800200c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1e4      	bne.n	8001fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	223f      	movs	r2, #63	@ 0x3f
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d004      	beq.n	8002032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2280      	movs	r2, #128	@ 0x80
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00c      	b.n	800204c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2205      	movs	r2, #5
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002064:	4b8e      	ldr	r3, [pc, #568]	@ (80022a0 <HAL_DMA_IRQHandler+0x248>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a8e      	ldr	r2, [pc, #568]	@ (80022a4 <HAL_DMA_IRQHandler+0x24c>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002082:	2208      	movs	r2, #8
 8002084:	409a      	lsls	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	2208      	movs	r2, #8
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	2201      	movs	r2, #1
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e6:	2201      	movs	r2, #1
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	2204      	movs	r2, #4
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	2204      	movs	r2, #4
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f043 0204 	orr.w	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	2210      	movs	r2, #16
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d043      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03c      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	2210      	movs	r2, #16
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d018      	beq.n	800219a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d024      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
 8002186:	e01f      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e016      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	2220      	movs	r2, #32
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 808f 	beq.w	80022f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8087 	beq.w	80022f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	2220      	movs	r2, #32
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d136      	bne.n	8002270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0216 	bic.w	r2, r2, #22
 8002210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <HAL_DMA_IRQHandler+0x1da>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0208 	bic.w	r2, r2, #8
 8002240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	223f      	movs	r2, #63	@ 0x3f
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002262:	2b00      	cmp	r3, #0
 8002264:	d07e      	beq.n	8002364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
        }
        return;
 800226e:	e079      	b.n	8002364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01d      	beq.n	80022ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	2b00      	cmp	r3, #0
 8002292:	d031      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e02c      	b.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000
 80022a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e01e      	b.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0210 	bic.w	r2, r2, #16
 80022d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d032      	beq.n	8002366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d022      	beq.n	8002352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2205      	movs	r2, #5
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3301      	adds	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	d307      	bcc.n	8002340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f2      	bne.n	8002324 <HAL_DMA_IRQHandler+0x2cc>
 800233e:	e000      	b.n	8002342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
 8002362:	e000      	b.n	8002366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002364:	bf00      	nop
    }
  }
}
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b40      	cmp	r3, #64	@ 0x40
 8002398:	d108      	bne.n	80023ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023aa:	e007      	b.n	80023bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b10      	subs	r3, #16
 80023d8:	4a14      	ldr	r2, [pc, #80]	@ (800242c <DMA_CalcBaseAndBitshift+0x64>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e2:	4a13      	ldr	r2, [pc, #76]	@ (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d909      	bls.n	800240a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	@ 0x58
 8002408:	e007      	b.n	800241a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	080094fc 	.word	0x080094fc

08002434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d856      	bhi.n	8002502 <DMA_CheckFifoParam+0xce>
 8002454:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <DMA_CheckFifoParam+0x28>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247f 	.word	0x0800247f
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002503 	.word	0x08002503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d046      	beq.n	8002506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e043      	b.n	8002506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002486:	d140      	bne.n	800250a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e03d      	b.n	800250a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002496:	d121      	bne.n	80024dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d837      	bhi.n	800250e <DMA_CheckFifoParam+0xda>
 800249e:	a201      	add	r2, pc, #4	@ (adr r2, 80024a4 <DMA_CheckFifoParam+0x70>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024bb 	.word	0x080024bb
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	080024cd 	.word	0x080024cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e030      	b.n	800251c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d025      	beq.n	8002512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ca:	e022      	b.n	8002512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024d4:	d11f      	bne.n	8002516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024da:	e01c      	b.n	8002516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d903      	bls.n	80024ea <DMA_CheckFifoParam+0xb6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e8:	e018      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      break;
 80024ee:	e015      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e00b      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002502:	bf00      	nop
 8002504:	e00a      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
 8002508:	e008      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
 800250c:	e006      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e004      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;   
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
    }
  } 
  
  return status; 
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e159      	b.n	80027fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8148 	bne.w	80027f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d005      	beq.n	800257e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	2b02      	cmp	r3, #2
 800257c:	d130      	bne.n	80025e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 0201 	and.w	r2, r3, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d017      	beq.n	800261c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a2 	beq.w	80027f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b57      	ldr	r3, [pc, #348]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c2:	4b54      	ldr	r3, [pc, #336]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4a52      	ldr	r2, [pc, #328]	@ (8002818 <HAL_GPIO_Init+0x2ec>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a49      	ldr	r2, [pc, #292]	@ (800281c <HAL_GPIO_Init+0x2f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x202>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a48      	ldr	r2, [pc, #288]	@ (8002820 <HAL_GPIO_Init+0x2f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x1fe>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a47      	ldr	r2, [pc, #284]	@ (8002824 <HAL_GPIO_Init+0x2f8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x1fa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a46      	ldr	r2, [pc, #280]	@ (8002828 <HAL_GPIO_Init+0x2fc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x1f6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a45      	ldr	r2, [pc, #276]	@ (800282c <HAL_GPIO_Init+0x300>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x1f2>
 800271a:	2304      	movs	r3, #4
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800271e:	2307      	movs	r3, #7
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x204>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x204>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800272e:	2300      	movs	r3, #0
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002740:	4935      	ldr	r1, [pc, #212]	@ (8002818 <HAL_GPIO_Init+0x2ec>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_GPIO_Init+0x304>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002772:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <HAL_GPIO_Init+0x304>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002778:	4b2d      	ldr	r3, [pc, #180]	@ (8002830 <HAL_GPIO_Init+0x304>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800279c:	4a24      	ldr	r2, [pc, #144]	@ (8002830 <HAL_GPIO_Init+0x304>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a2:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027cc:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f aea2 	bls.w	8002548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40021000 	.word	0x40021000
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e267      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d075      	beq.n	8002972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002886:	4b88      	ldr	r3, [pc, #544]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b85      	ldr	r3, [pc, #532]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800289a:	2b08      	cmp	r3, #8
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b82      	ldr	r3, [pc, #520]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x108>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e242      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x74>
 80028ce:	4b76      	ldr	r3, [pc, #472]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b70      	ldr	r3, [pc, #448]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6f      	ldr	r2, [pc, #444]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6c      	ldr	r2, [pc, #432]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 8002900:	4b69      	ldr	r3, [pc, #420]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a68      	ldr	r2, [pc, #416]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b66      	ldr	r3, [pc, #408]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a65      	ldr	r2, [pc, #404]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff f8e4 	bl	8001aec <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7ff f8e0 	bl	8001aec <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e207      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xc0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff f8d0 	bl	8001aec <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff f8cc 	bl	8001aec <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1f3      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b51      	ldr	r3, [pc, #324]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0xe8>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800297e:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b44      	ldr	r3, [pc, #272]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c7      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4937      	ldr	r1, [pc, #220]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x244>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7ff f885 	bl	8001aec <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff f881 	bl	8001aec <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a8      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4925      	ldr	r1, [pc, #148]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b24      	ldr	r3, [pc, #144]	@ (8002aac <HAL_RCC_OscConfig+0x244>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff f864 	bl	8001aec <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7ff f860 	bl	8001aec <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e187      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff f844 	bl	8001aec <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff f840 	bl	8001aec <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e167      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x200>
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff f82d 	bl	8001aec <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00e      	b.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7ff f829 	bl	8001aec <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e150      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
 8002ab0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b88      	ldr	r3, [pc, #544]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ea      	bne.n	8002a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8097 	beq.w	8002bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b81      	ldr	r3, [pc, #516]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b77      	ldr	r3, [pc, #476]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b74      	ldr	r3, [pc, #464]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a73      	ldr	r2, [pc, #460]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7fe ffe9 	bl	8001aec <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe ffe5 	bl	8001aec <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e10c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
 8002b44:	4b64      	ldr	r3, [pc, #400]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	4a63      	ldr	r2, [pc, #396]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x30c>
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b66:	4b5c      	ldr	r3, [pc, #368]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b74:	4b58      	ldr	r3, [pc, #352]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a57      	ldr	r2, [pc, #348]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b80:	4b55      	ldr	r3, [pc, #340]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	4a54      	ldr	r2, [pc, #336]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe ffaa 	bl	8001aec <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe ffa6 	bl	8001aec <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0cb      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b49      	ldr	r3, [pc, #292]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x334>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe ff94 	bl	8001aec <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe ff90 	bl	8001aec <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b5      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	4a38      	ldr	r2, [pc, #224]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a1 	beq.w	8002d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d05c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d141      	bne.n	8002c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe ff64 	bl	8001aec <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe ff60 	bl	8001aec <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e087      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b27      	ldr	r3, [pc, #156]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	491b      	ldr	r1, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe ff39 	bl	8001aec <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe ff35 	bl	8001aec <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e05c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x416>
 8002c9c:	e054      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe ff22 	bl	8001aec <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe ff1e 	bl	8001aec <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e045      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x444>
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e038      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fe50 	bl	8001aec <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe fe4c 	bl	8001aec <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fdb0 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	080094e4 	.word	0x080094e4
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b094      	sub	sp, #80	@ 0x50
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b79      	ldr	r3, [pc, #484]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80e1 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e0db      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b73      	ldr	r3, [pc, #460]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f5c:	e0db      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b73      	ldr	r3, [pc, #460]	@ (800312c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f62:	e0d8      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4621      	mov	r1, r4
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	6139      	str	r1, [r7, #16]
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	018a      	lsls	r2, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fdc:	4659      	mov	r1, fp
 8002fde:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff6:	4690      	mov	r8, r2
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	eb18 0303 	adds.w	r3, r8, r3
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	462b      	mov	r3, r5
 8003004:	eb49 0303 	adc.w	r3, r9, r3
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003016:	4629      	mov	r1, r5
 8003018:	024b      	lsls	r3, r1, #9
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003020:	4621      	mov	r1, r4
 8003022:	024a      	lsls	r2, r1, #9
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800302e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003034:	f7fd fe30 	bl	8000c98 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003040:	e058      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b38      	ldr	r3, [pc, #224]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	2200      	movs	r2, #0
 800304a:	4618      	mov	r0, r3
 800304c:	4611      	mov	r1, r2
 800304e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	0159      	lsls	r1, r3, #5
 800306a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306e:	0150      	lsls	r0, r2, #5
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4641      	mov	r1, r8
 8003076:	ebb2 0a01 	subs.w	sl, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800308c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003094:	ebb2 040a 	subs.w	r4, r2, sl
 8003098:	eb63 050b 	sbc.w	r5, r3, fp
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00eb      	lsls	r3, r5, #3
 80030a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030aa:	00e2      	lsls	r2, r4, #3
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	18e3      	adds	r3, r4, r3
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ca:	4629      	mov	r1, r5
 80030cc:	028b      	lsls	r3, r1, #10
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d4:	4621      	mov	r1, r4
 80030d6:	028a      	lsls	r2, r1, #10
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e8:	f7fd fdd6 	bl	8000c98 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003104:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003112:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003118:	4618      	mov	r0, r3
 800311a:	3750      	adds	r7, #80	@ 0x50
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800314c:	f7ff fff0 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	@ (800316c <HAL_RCC_GetPCLK1Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	080094f4 	.word	0x080094f4

08003170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003174:	f7ff ffdc 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0b5b      	lsrs	r3, r3, #13
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	@ (8003194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	080094f4 	.word	0x080094f4

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e041      	b.n	800322e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe f9dc 	bl	800157c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fba4 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e044      	b.n	80032da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d018      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327a:	d013      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1a      	ldr	r2, [pc, #104]	@ (80032ec <HAL_TIM_Base_Start_IT+0xb4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a17      	ldr	r2, [pc, #92]	@ (80032f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a16      	ldr	r2, [pc, #88]	@ (80032f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d010      	beq.n	80032d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	e007      	b.n	80032d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800
 80032f4:	40000c00 	.word	0x40000c00
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e097      	b.n	8003440 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fe f94f 	bl	80015c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003340:	f023 0307 	bic.w	r3, r3, #7
 8003344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 fae7 	bl	8003924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	4313      	orrs	r3, r2
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800339c:	f023 030c 	bic.w	r3, r3, #12
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	4313      	orrs	r3, r2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	011a      	lsls	r2, r3, #4
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	031b      	lsls	r3, r3, #12
 80033cc:	4313      	orrs	r3, r2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4313      	orrs	r3, r2
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003458:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003460:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003468:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003470:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d110      	bne.n	800349a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800347e:	7b7b      	ldrb	r3, [r7, #13]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e069      	b.n	800355c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003498:	e031      	b.n	80034fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d110      	bne.n	80034c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a0:	7bbb      	ldrb	r3, [r7, #14]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034a6:	7b3b      	ldrb	r3, [r7, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e055      	b.n	800355c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c0:	e01d      	b.n	80034fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d108      	bne.n	80034da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ce:	7b7b      	ldrb	r3, [r7, #13]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d102      	bne.n	80034da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034d4:	7b3b      	ldrb	r3, [r7, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e03e      	b.n	800355c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_TIM_Encoder_Start+0xc4>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d008      	beq.n	800351c <HAL_TIM_Encoder_Start+0xd4>
 800350a:	e00f      	b.n	800352c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fb2b 	bl	8003b70 <TIM_CCxChannelCmd>
      break;
 800351a:	e016      	b.n	800354a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	2104      	movs	r1, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fb23 	bl	8003b70 <TIM_CCxChannelCmd>
      break;
 800352a:	e00e      	b.n	800354a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fb1b 	bl	8003b70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2201      	movs	r2, #1
 8003540:	2104      	movs	r1, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fb14 	bl	8003b70 <TIM_CCxChannelCmd>
      break;
 8003548:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0202 	mvn.w	r2, #2
 8003598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f999 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f98b 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f99c 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0204 	mvn.w	r2, #4
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f973 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f965 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f976 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0208 	mvn.w	r2, #8
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f94d 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f93f 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f950 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0210 	mvn.w	r2, #16
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2208      	movs	r2, #8
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f927 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f919 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f92a 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0201 	mvn.w	r2, #1
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd fc92 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fadc 	bl	8003cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8fb 	bl	800390e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0220 	mvn.w	r2, #32
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 faae 	bl	8003c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIM_ConfigClockSource+0x1c>
 800375c:	2302      	movs	r3, #2
 800375e:	e0b4      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x186>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800377e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003798:	d03e      	beq.n	8003818 <HAL_TIM_ConfigClockSource+0xd4>
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800379e:	f200 8087 	bhi.w	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a6:	f000 8086 	beq.w	80038b6 <HAL_TIM_ConfigClockSource+0x172>
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ae:	d87f      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b70      	cmp	r3, #112	@ 0x70
 80037b2:	d01a      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0xa6>
 80037b4:	2b70      	cmp	r3, #112	@ 0x70
 80037b6:	d87b      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b60      	cmp	r3, #96	@ 0x60
 80037ba:	d050      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x11a>
 80037bc:	2b60      	cmp	r3, #96	@ 0x60
 80037be:	d877      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b50      	cmp	r3, #80	@ 0x50
 80037c2:	d03c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0xfa>
 80037c4:	2b50      	cmp	r3, #80	@ 0x50
 80037c6:	d873      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	d058      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x13a>
 80037cc:	2b40      	cmp	r3, #64	@ 0x40
 80037ce:	d86f      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d0:	2b30      	cmp	r3, #48	@ 0x30
 80037d2:	d064      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037d4:	2b30      	cmp	r3, #48	@ 0x30
 80037d6:	d86b      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d060      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d867      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d05a      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x15a>
 80037e8:	e062      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037fa:	f000 f999 	bl	8003b30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800380c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	609a      	str	r2, [r3, #8]
      break;
 8003816:	e04f      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003828:	f000 f982 	bl	8003b30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800383a:	609a      	str	r2, [r3, #8]
      break;
 800383c:	e03c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	461a      	mov	r2, r3
 800384c:	f000 f8f6 	bl	8003a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2150      	movs	r1, #80	@ 0x50
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f94f 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 800385c:	e02c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	461a      	mov	r2, r3
 800386c:	f000 f915 	bl	8003a9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2160      	movs	r1, #96	@ 0x60
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f93f 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 800387c:	e01c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	461a      	mov	r2, r3
 800388c:	f000 f8d6 	bl	8003a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2140      	movs	r1, #64	@ 0x40
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f92f 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 800389c:	e00c      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f000 f926 	bl	8003afa <TIM_ITRx_SetConfig>
      break;
 80038ae:	e003      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      break;
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a3a      	ldr	r2, [pc, #232]	@ (8003a20 <TIM_Base_SetConfig+0xfc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a37      	ldr	r2, [pc, #220]	@ (8003a24 <TIM_Base_SetConfig+0x100>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a36      	ldr	r2, [pc, #216]	@ (8003a28 <TIM_Base_SetConfig+0x104>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0x38>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a35      	ldr	r2, [pc, #212]	@ (8003a2c <TIM_Base_SetConfig+0x108>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d108      	bne.n	800396e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2b      	ldr	r2, [pc, #172]	@ (8003a20 <TIM_Base_SetConfig+0xfc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d01b      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397c:	d017      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a28      	ldr	r2, [pc, #160]	@ (8003a24 <TIM_Base_SetConfig+0x100>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <TIM_Base_SetConfig+0x104>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00f      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a26      	ldr	r2, [pc, #152]	@ (8003a2c <TIM_Base_SetConfig+0x108>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a25      	ldr	r2, [pc, #148]	@ (8003a30 <TIM_Base_SetConfig+0x10c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a24      	ldr	r2, [pc, #144]	@ (8003a34 <TIM_Base_SetConfig+0x110>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a23      	ldr	r2, [pc, #140]	@ (8003a38 <TIM_Base_SetConfig+0x114>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a20 <TIM_Base_SetConfig+0xfc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d105      	bne.n	8003a12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f023 0201 	bic.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]
  }
}
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800

08003a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0201 	bic.w	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 030a 	bic.w	r3, r3, #10
 8003a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b087      	sub	sp, #28
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f023 0210 	bic.w	r2, r3, #16
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	031b      	lsls	r3, r3, #12
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f043 0307 	orr.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	021a      	lsls	r2, r3, #8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	609a      	str	r2, [r3, #8]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e050      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	@ (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	@ (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a16      	ldr	r2, [pc, #88]	@ (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	@ (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a13      	ldr	r2, [pc, #76]	@ (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000

08003c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e042      	b.n	8003d58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fcbe 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	@ 0x24
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fdcb 	bl	80048a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	@ 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d156      	bne.n	8003e28 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_UART_Transmit_DMA+0x26>
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e04f      	b.n	8003e2a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2221      	movs	r2, #33	@ 0x21
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dae:	4a21      	ldr	r2, [pc, #132]	@ (8003e34 <HAL_UART_Transmit_DMA+0xd4>)
 8003db0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	4a20      	ldr	r2, [pc, #128]	@ (8003e38 <HAL_UART_Transmit_DMA+0xd8>)
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003e3c <HAL_UART_Transmit_DMA+0xdc>)
 8003dc0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	461a      	mov	r2, r3
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	f7fe f84f 	bl	8001e84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3314      	adds	r3, #20
 8003e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e10:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3730      	adds	r7, #48	@ 0x30
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	080043cd 	.word	0x080043cd
 8003e38:	08004467 	.word	0x08004467
 8003e3c:	08004483 	.word	0x08004483

08003e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b0ba      	sub	sp, #232	@ 0xe8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x66>
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fc40 	bl	8004724 <UART_Receive_IT>
      return;
 8003ea4:	e25b      	b.n	800435e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80de 	beq.w	800406c <HAL_UART_IRQHandler+0x22c>
 8003eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80d1 	beq.w	800406c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_UART_IRQHandler+0xae>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_UART_IRQHandler+0xd2>
 8003efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_UART_IRQHandler+0xf6>
 8003f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d011      	beq.n	8003f66 <HAL_UART_IRQHandler+0x126>
 8003f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f043 0208 	orr.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 81f2 	beq.w	8004354 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_UART_IRQHandler+0x14e>
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fbcb 	bl	8004724 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_UART_IRQHandler+0x17a>
 8003fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04f      	beq.n	800405a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fad3 	bl	8004566 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b40      	cmp	r3, #64	@ 0x40
 8003fcc:	d141      	bne.n	8004052 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ffa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1d9      	bne.n	8003fce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d013      	beq.n	800404a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004026:	4a7e      	ldr	r2, [pc, #504]	@ (8004220 <HAL_UART_IRQHandler+0x3e0>)
 8004028:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fff0 	bl	8002014 <HAL_DMA_Abort_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004044:	4610      	mov	r0, r2
 8004046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	e00e      	b.n	8004068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9a8 	bl	80043a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e00a      	b.n	8004068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9a4 	bl	80043a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e006      	b.n	8004068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9a0 	bl	80043a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004066:	e175      	b.n	8004354 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	bf00      	nop
    return;
 800406a:	e173      	b.n	8004354 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	2b01      	cmp	r3, #1
 8004072:	f040 814f 	bne.w	8004314 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8148 	beq.w	8004314 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8141 	beq.w	8004314 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b2:	2b40      	cmp	r3, #64	@ 0x40
 80040b4:	f040 80b6 	bne.w	8004224 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8145 	beq.w	8004358 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040d6:	429a      	cmp	r2, r3
 80040d8:	f080 813e 	bcs.w	8004358 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ee:	f000 8088 	beq.w	8004202 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004108:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800410c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800411e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800412a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1d9      	bne.n	80040f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3314      	adds	r3, #20
 8004144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800414e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004162:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004166:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800416a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e1      	bne.n	800413e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800418a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800418c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800419e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e3      	bne.n	800417a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e3      	bne.n	80041c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd fe99 	bl	8001f34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004210:	b29b      	uxth	r3, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	b29b      	uxth	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8cb 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800421e:	e09b      	b.n	8004358 <HAL_UART_IRQHandler+0x518>
 8004220:	0800462d 	.word	0x0800462d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800422c:	b29b      	uxth	r3, r3
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 808e 	beq.w	800435c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8089 	beq.w	800435c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800426e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004270:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800427c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e3      	bne.n	800424a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	623b      	str	r3, [r7, #32]
   return(result);
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80042a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042ec:	61fa      	str	r2, [r7, #28]
 80042ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	617b      	str	r3, [r7, #20]
   return(result);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f851 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004312:	e023      	b.n	800435c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_UART_IRQHandler+0x4f4>
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f991 	bl	8004654 <UART_Transmit_IT>
    return;
 8004332:	e014      	b.n	800435e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <HAL_UART_IRQHandler+0x51e>
 8004340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9d1 	bl	80046f4 <UART_EndTransmit_IT>
    return;
 8004352:	e004      	b.n	800435e <HAL_UART_IRQHandler+0x51e>
    return;
 8004354:	bf00      	nop
 8004356:	e002      	b.n	800435e <HAL_UART_IRQHandler+0x51e>
      return;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <HAL_UART_IRQHandler+0x51e>
      return;
 800435c:	bf00      	nop
  }
}
 800435e:	37e8      	adds	r7, #232	@ 0xe8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b090      	sub	sp, #64	@ 0x40
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d137      	bne.n	8004458 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80043e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ea:	2200      	movs	r2, #0
 80043ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3314      	adds	r3, #20
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	623b      	str	r3, [r7, #32]
   return(result);
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800440e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e5      	bne.n	80043ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	60fb      	str	r3, [r7, #12]
   return(result);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004438:	637b      	str	r3, [r7, #52]	@ 0x34
 800443a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004442:	61fa      	str	r2, [r7, #28]
 8004444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	617b      	str	r3, [r7, #20]
   return(result);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004456:	e002      	b.n	800445e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004458:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800445a:	f7ff ff83 	bl	8004364 <HAL_UART_TxCpltCallback>
}
 800445e:	bf00      	nop
 8004460:	3740      	adds	r7, #64	@ 0x40
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff ff7f 	bl	8004378 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b80      	cmp	r3, #128	@ 0x80
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b21      	cmp	r3, #33	@ 0x21
 80044b4:	d108      	bne.n	80044c8 <UART_DMAError+0x46>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	f000 f827 	bl	8004516 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	bf0c      	ite	eq
 80044d6:	2301      	moveq	r3, #1
 80044d8:	2300      	movne	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b22      	cmp	r3, #34	@ 0x22
 80044e8:	d108      	bne.n	80044fc <UART_DMAError+0x7a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2200      	movs	r2, #0
 80044f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80044f6:	68b8      	ldr	r0, [r7, #8]
 80044f8:	f000 f835 	bl	8004566 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004500:	f043 0210 	orr.w	r2, r3, #16
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004508:	68b8      	ldr	r0, [r7, #8]
 800450a:	f7ff ff49 	bl	80043a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b089      	sub	sp, #36	@ 0x24
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	60bb      	str	r3, [r7, #8]
   return(result);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	61ba      	str	r2, [r7, #24]
 8004540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	613b      	str	r3, [r7, #16]
   return(result);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800455a:	bf00      	nop
 800455c:	3724      	adds	r7, #36	@ 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b095      	sub	sp, #84	@ 0x54
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800458e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800459c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e5      	bne.n	80045a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d119      	bne.n	8004612 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f023 0310 	bic.w	r3, r3, #16
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045fe:	61ba      	str	r2, [r7, #24]
 8004600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	613b      	str	r3, [r7, #16]
   return(result);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e5      	bne.n	80045de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004620:	bf00      	nop
 8004622:	3754      	adds	r7, #84	@ 0x54
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004638:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff feaa 	bl	80043a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b21      	cmp	r3, #33	@ 0x21
 8004666:	d13e      	bne.n	80046e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004670:	d114      	bne.n	800469c <UART_Transmit_IT+0x48>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d110      	bne.n	800469c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800468e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	621a      	str	r2, [r3, #32]
 800469a:	e008      	b.n	80046ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	1c59      	adds	r1, r3, #1
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6211      	str	r1, [r2, #32]
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4619      	mov	r1, r3
 80046bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800470a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fe25 	bl	8004364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	@ 0x30
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b22      	cmp	r3, #34	@ 0x22
 8004736:	f040 80ae 	bne.w	8004896 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004742:	d117      	bne.n	8004774 <UART_Receive_IT+0x50>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d113      	bne.n	8004774 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800474c:	2300      	movs	r3, #0
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	b29a      	uxth	r2, r3
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	1c9a      	adds	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	629a      	str	r2, [r3, #40]	@ 0x28
 8004772:	e026      	b.n	80047c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004786:	d007      	beq.n	8004798 <UART_Receive_IT+0x74>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <UART_Receive_IT+0x82>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d106      	bne.n	80047a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	e008      	b.n	80047b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4619      	mov	r1, r3
 80047d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d15d      	bne.n	8004892 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0220 	bic.w	r2, r2, #32
 80047e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	2b01      	cmp	r3, #1
 800481a:	d135      	bne.n	8004888 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	613b      	str	r3, [r7, #16]
   return(result);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f023 0310 	bic.w	r3, r3, #16
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004842:	623a      	str	r2, [r7, #32]
 8004844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	69f9      	ldr	r1, [r7, #28]
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b10      	cmp	r3, #16
 8004862:	d10a      	bne.n	800487a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff fd97 	bl	80043b4 <HAL_UARTEx_RxEventCallback>
 8004886:	e002      	b.n	800488e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fd7f 	bl	800438c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e002      	b.n	8004898 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	3730      	adds	r7, #48	@ 0x30
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a4:	b0c0      	sub	sp, #256	@ 0x100
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	68d9      	ldr	r1, [r3, #12]
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	ea40 0301 	orr.w	r3, r0, r1
 80048c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048f8:	f021 010c 	bic.w	r1, r1, #12
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004906:	430b      	orrs	r3, r1
 8004908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	6999      	ldr	r1, [r3, #24]
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	ea40 0301 	orr.w	r3, r0, r1
 8004926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b8f      	ldr	r3, [pc, #572]	@ (8004b6c <UART_SetConfig+0x2cc>)
 8004930:	429a      	cmp	r2, r3
 8004932:	d005      	beq.n	8004940 <UART_SetConfig+0xa0>
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b8d      	ldr	r3, [pc, #564]	@ (8004b70 <UART_SetConfig+0x2d0>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d104      	bne.n	800494a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7fe fc16 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 8004944:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004948:	e003      	b.n	8004952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800494a:	f7fe fbfd 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 800494e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800495c:	f040 810c 	bne.w	8004b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004964:	2200      	movs	r2, #0
 8004966:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800496a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800496e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004972:	4622      	mov	r2, r4
 8004974:	462b      	mov	r3, r5
 8004976:	1891      	adds	r1, r2, r2
 8004978:	65b9      	str	r1, [r7, #88]	@ 0x58
 800497a:	415b      	adcs	r3, r3
 800497c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800497e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004982:	4621      	mov	r1, r4
 8004984:	eb12 0801 	adds.w	r8, r2, r1
 8004988:	4629      	mov	r1, r5
 800498a:	eb43 0901 	adc.w	r9, r3, r1
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800499e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a2:	4690      	mov	r8, r2
 80049a4:	4699      	mov	r9, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	eb18 0303 	adds.w	r3, r8, r3
 80049ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049b0:	462b      	mov	r3, r5
 80049b2:	eb49 0303 	adc.w	r3, r9, r3
 80049b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049ce:	460b      	mov	r3, r1
 80049d0:	18db      	adds	r3, r3, r3
 80049d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80049d4:	4613      	mov	r3, r2
 80049d6:	eb42 0303 	adc.w	r3, r2, r3
 80049da:	657b      	str	r3, [r7, #84]	@ 0x54
 80049dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049e4:	f7fc f958 	bl	8000c98 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4b61      	ldr	r3, [pc, #388]	@ (8004b74 <UART_SetConfig+0x2d4>)
 80049ee:	fba3 2302 	umull	r2, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	011c      	lsls	r4, r3, #4
 80049f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	1891      	adds	r1, r2, r2
 8004a0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a10:	415b      	adcs	r3, r3
 8004a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a18:	4641      	mov	r1, r8
 8004a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a1e:	4649      	mov	r1, r9
 8004a20:	eb43 0b01 	adc.w	fp, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a38:	4692      	mov	sl, r2
 8004a3a:	469b      	mov	fp, r3
 8004a3c:	4643      	mov	r3, r8
 8004a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a46:	464b      	mov	r3, r9
 8004a48:	eb4b 0303 	adc.w	r3, fp, r3
 8004a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a64:	460b      	mov	r3, r1
 8004a66:	18db      	adds	r3, r3, r3
 8004a68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	eb42 0303 	adc.w	r3, r2, r3
 8004a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a7a:	f7fc f90d 	bl	8000c98 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	4b3b      	ldr	r3, [pc, #236]	@ (8004b74 <UART_SetConfig+0x2d4>)
 8004a86:	fba3 2301 	umull	r2, r3, r3, r1
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2264      	movs	r2, #100	@ 0x64
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	1acb      	subs	r3, r1, r3
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a9a:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <UART_SetConfig+0x2d4>)
 8004a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004aa8:	441c      	add	r4, r3
 8004aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004abc:	4642      	mov	r2, r8
 8004abe:	464b      	mov	r3, r9
 8004ac0:	1891      	adds	r1, r2, r2
 8004ac2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ac4:	415b      	adcs	r3, r3
 8004ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004acc:	4641      	mov	r1, r8
 8004ace:	1851      	adds	r1, r2, r1
 8004ad0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	414b      	adcs	r3, r1
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	00cb      	lsls	r3, r1, #3
 8004ae8:	4651      	mov	r1, sl
 8004aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aee:	4651      	mov	r1, sl
 8004af0:	00ca      	lsls	r2, r1, #3
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	4642      	mov	r2, r8
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b00:	464b      	mov	r3, r9
 8004b02:	460a      	mov	r2, r1
 8004b04:	eb42 0303 	adc.w	r3, r2, r3
 8004b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b20:	460b      	mov	r3, r1
 8004b22:	18db      	adds	r3, r3, r3
 8004b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b26:	4613      	mov	r3, r2
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b36:	f7fc f8af 	bl	8000c98 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b74 <UART_SetConfig+0x2d4>)
 8004b40:	fba3 1302 	umull	r1, r3, r3, r2
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	2164      	movs	r1, #100	@ 0x64
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	3332      	adds	r3, #50	@ 0x32
 8004b52:	4a08      	ldr	r2, [pc, #32]	@ (8004b74 <UART_SetConfig+0x2d4>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	f003 0207 	and.w	r2, r3, #7
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4422      	add	r2, r4
 8004b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b68:	e106      	b.n	8004d78 <UART_SetConfig+0x4d8>
 8004b6a:	bf00      	nop
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b8a:	4642      	mov	r2, r8
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	1891      	adds	r1, r2, r2
 8004b90:	6239      	str	r1, [r7, #32]
 8004b92:	415b      	adcs	r3, r3
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	1854      	adds	r4, r2, r1
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	eb43 0501 	adc.w	r5, r3, r1
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	00eb      	lsls	r3, r5, #3
 8004bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb2:	00e2      	lsls	r2, r4, #3
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	4643      	mov	r3, r8
 8004bba:	18e3      	adds	r3, r4, r3
 8004bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	eb45 0303 	adc.w	r3, r5, r3
 8004bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004be6:	4629      	mov	r1, r5
 8004be8:	008b      	lsls	r3, r1, #2
 8004bea:	4621      	mov	r1, r4
 8004bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	008a      	lsls	r2, r1, #2
 8004bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bf8:	f7fc f84e 	bl	8000c98 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4b60      	ldr	r3, [pc, #384]	@ (8004d84 <UART_SetConfig+0x4e4>)
 8004c02:	fba3 2302 	umull	r2, r3, r3, r2
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	011c      	lsls	r4, r3, #4
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	464b      	mov	r3, r9
 8004c20:	1891      	adds	r1, r2, r2
 8004c22:	61b9      	str	r1, [r7, #24]
 8004c24:	415b      	adcs	r3, r3
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	1851      	adds	r1, r2, r1
 8004c30:	6139      	str	r1, [r7, #16]
 8004c32:	4649      	mov	r1, r9
 8004c34:	414b      	adcs	r3, r1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c44:	4659      	mov	r1, fp
 8004c46:	00cb      	lsls	r3, r1, #3
 8004c48:	4651      	mov	r1, sl
 8004c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4e:	4651      	mov	r1, sl
 8004c50:	00ca      	lsls	r2, r1, #3
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	4642      	mov	r2, r8
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c60:	464b      	mov	r3, r9
 8004c62:	460a      	mov	r2, r1
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c84:	4649      	mov	r1, r9
 8004c86:	008b      	lsls	r3, r1, #2
 8004c88:	4641      	mov	r1, r8
 8004c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c8e:	4641      	mov	r1, r8
 8004c90:	008a      	lsls	r2, r1, #2
 8004c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c96:	f7fb ffff 	bl	8000c98 <__aeabi_uldivmod>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4b38      	ldr	r3, [pc, #224]	@ (8004d84 <UART_SetConfig+0x4e4>)
 8004ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	2264      	movs	r2, #100	@ 0x64
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	1acb      	subs	r3, r1, r3
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	3332      	adds	r3, #50	@ 0x32
 8004cb4:	4a33      	ldr	r2, [pc, #204]	@ (8004d84 <UART_SetConfig+0x4e4>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cc0:	441c      	add	r4, r3
 8004cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cca:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ccc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	1851      	adds	r1, r2, r1
 8004ce4:	6039      	str	r1, [r7, #0]
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	414b      	adcs	r3, r1
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	00cb      	lsls	r3, r1, #3
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d02:	4651      	mov	r1, sl
 8004d04:	00ca      	lsls	r2, r1, #3
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d12:	464b      	mov	r3, r9
 8004d14:	460a      	mov	r2, r1
 8004d16:	eb42 0303 	adc.w	r3, r2, r3
 8004d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d34:	4649      	mov	r1, r9
 8004d36:	008b      	lsls	r3, r1, #2
 8004d38:	4641      	mov	r1, r8
 8004d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d3e:	4641      	mov	r1, r8
 8004d40:	008a      	lsls	r2, r1, #2
 8004d42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d46:	f7fb ffa7 	bl	8000c98 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d84 <UART_SetConfig+0x4e4>)
 8004d50:	fba3 1302 	umull	r1, r3, r3, r2
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	2164      	movs	r1, #100	@ 0x64
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	3332      	adds	r3, #50	@ 0x32
 8004d62:	4a08      	ldr	r2, [pc, #32]	@ (8004d84 <UART_SetConfig+0x4e4>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f003 020f 	and.w	r2, r3, #15
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4422      	add	r2, r4
 8004d76:	609a      	str	r2, [r3, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d84:	51eb851f 	.word	0x51eb851f

08004d88 <__cvt>:
 8004d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	ec57 6b10 	vmov	r6, r7, d0
 8004d90:	2f00      	cmp	r7, #0
 8004d92:	460c      	mov	r4, r1
 8004d94:	4619      	mov	r1, r3
 8004d96:	463b      	mov	r3, r7
 8004d98:	bfbb      	ittet	lt
 8004d9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d9e:	461f      	movlt	r7, r3
 8004da0:	2300      	movge	r3, #0
 8004da2:	232d      	movlt	r3, #45	@ 0x2d
 8004da4:	700b      	strb	r3, [r1, #0]
 8004da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004da8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004dac:	4691      	mov	r9, r2
 8004dae:	f023 0820 	bic.w	r8, r3, #32
 8004db2:	bfbc      	itt	lt
 8004db4:	4632      	movlt	r2, r6
 8004db6:	4616      	movlt	r6, r2
 8004db8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dbc:	d005      	beq.n	8004dca <__cvt+0x42>
 8004dbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004dc2:	d100      	bne.n	8004dc6 <__cvt+0x3e>
 8004dc4:	3401      	adds	r4, #1
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	e000      	b.n	8004dcc <__cvt+0x44>
 8004dca:	2103      	movs	r1, #3
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	ab02      	add	r3, sp, #8
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	ec47 6b10 	vmov	d0, r6, r7
 8004dd8:	4653      	mov	r3, sl
 8004dda:	4622      	mov	r2, r4
 8004ddc:	f001 f8a8 	bl	8005f30 <_dtoa_r>
 8004de0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004de4:	4605      	mov	r5, r0
 8004de6:	d119      	bne.n	8004e1c <__cvt+0x94>
 8004de8:	f019 0f01 	tst.w	r9, #1
 8004dec:	d00e      	beq.n	8004e0c <__cvt+0x84>
 8004dee:	eb00 0904 	add.w	r9, r0, r4
 8004df2:	2200      	movs	r2, #0
 8004df4:	2300      	movs	r3, #0
 8004df6:	4630      	mov	r0, r6
 8004df8:	4639      	mov	r1, r7
 8004dfa:	f7fb fe6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dfe:	b108      	cbz	r0, 8004e04 <__cvt+0x7c>
 8004e00:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e04:	2230      	movs	r2, #48	@ 0x30
 8004e06:	9b03      	ldr	r3, [sp, #12]
 8004e08:	454b      	cmp	r3, r9
 8004e0a:	d31e      	bcc.n	8004e4a <__cvt+0xc2>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e10:	1b5b      	subs	r3, r3, r5
 8004e12:	4628      	mov	r0, r5
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	b004      	add	sp, #16
 8004e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e20:	eb00 0904 	add.w	r9, r0, r4
 8004e24:	d1e5      	bne.n	8004df2 <__cvt+0x6a>
 8004e26:	7803      	ldrb	r3, [r0, #0]
 8004e28:	2b30      	cmp	r3, #48	@ 0x30
 8004e2a:	d10a      	bne.n	8004e42 <__cvt+0xba>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2300      	movs	r3, #0
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	f7fb fe50 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e38:	b918      	cbnz	r0, 8004e42 <__cvt+0xba>
 8004e3a:	f1c4 0401 	rsb	r4, r4, #1
 8004e3e:	f8ca 4000 	str.w	r4, [sl]
 8004e42:	f8da 3000 	ldr.w	r3, [sl]
 8004e46:	4499      	add	r9, r3
 8004e48:	e7d3      	b.n	8004df2 <__cvt+0x6a>
 8004e4a:	1c59      	adds	r1, r3, #1
 8004e4c:	9103      	str	r1, [sp, #12]
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e7d9      	b.n	8004e06 <__cvt+0x7e>

08004e52 <__exponent>:
 8004e52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e54:	2900      	cmp	r1, #0
 8004e56:	bfba      	itte	lt
 8004e58:	4249      	neglt	r1, r1
 8004e5a:	232d      	movlt	r3, #45	@ 0x2d
 8004e5c:	232b      	movge	r3, #43	@ 0x2b
 8004e5e:	2909      	cmp	r1, #9
 8004e60:	7002      	strb	r2, [r0, #0]
 8004e62:	7043      	strb	r3, [r0, #1]
 8004e64:	dd29      	ble.n	8004eba <__exponent+0x68>
 8004e66:	f10d 0307 	add.w	r3, sp, #7
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	270a      	movs	r7, #10
 8004e6e:	461a      	mov	r2, r3
 8004e70:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e74:	fb07 1416 	mls	r4, r7, r6, r1
 8004e78:	3430      	adds	r4, #48	@ 0x30
 8004e7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e7e:	460c      	mov	r4, r1
 8004e80:	2c63      	cmp	r4, #99	@ 0x63
 8004e82:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e86:	4631      	mov	r1, r6
 8004e88:	dcf1      	bgt.n	8004e6e <__exponent+0x1c>
 8004e8a:	3130      	adds	r1, #48	@ 0x30
 8004e8c:	1e94      	subs	r4, r2, #2
 8004e8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e92:	1c41      	adds	r1, r0, #1
 8004e94:	4623      	mov	r3, r4
 8004e96:	42ab      	cmp	r3, r5
 8004e98:	d30a      	bcc.n	8004eb0 <__exponent+0x5e>
 8004e9a:	f10d 0309 	add.w	r3, sp, #9
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	42ac      	cmp	r4, r5
 8004ea2:	bf88      	it	hi
 8004ea4:	2300      	movhi	r3, #0
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	4403      	add	r3, r0
 8004eaa:	1a18      	subs	r0, r3, r0
 8004eac:	b003      	add	sp, #12
 8004eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004eb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004eb8:	e7ed      	b.n	8004e96 <__exponent+0x44>
 8004eba:	2330      	movs	r3, #48	@ 0x30
 8004ebc:	3130      	adds	r1, #48	@ 0x30
 8004ebe:	7083      	strb	r3, [r0, #2]
 8004ec0:	70c1      	strb	r1, [r0, #3]
 8004ec2:	1d03      	adds	r3, r0, #4
 8004ec4:	e7f1      	b.n	8004eaa <__exponent+0x58>
	...

08004ec8 <_printf_float>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	b08d      	sub	sp, #52	@ 0x34
 8004ece:	460c      	mov	r4, r1
 8004ed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	4605      	mov	r5, r0
 8004eda:	f000 ff23 	bl	8005d24 <_localeconv_r>
 8004ede:	6803      	ldr	r3, [r0, #0]
 8004ee0:	9304      	str	r3, [sp, #16]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb f9cc 	bl	8000280 <strlen>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eec:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef0:	9005      	str	r0, [sp, #20]
 8004ef2:	3307      	adds	r3, #7
 8004ef4:	f023 0307 	bic.w	r3, r3, #7
 8004ef8:	f103 0208 	add.w	r2, r3, #8
 8004efc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f00:	f8d4 b000 	ldr.w	fp, [r4]
 8004f04:	f8c8 2000 	str.w	r2, [r8]
 8004f08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f10:	9307      	str	r3, [sp, #28]
 8004f12:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f1e:	4b9c      	ldr	r3, [pc, #624]	@ (8005190 <_printf_float+0x2c8>)
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	f7fb fe0a 	bl	8000b3c <__aeabi_dcmpun>
 8004f28:	bb70      	cbnz	r0, 8004f88 <_printf_float+0xc0>
 8004f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f2e:	4b98      	ldr	r3, [pc, #608]	@ (8005190 <_printf_float+0x2c8>)
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	f7fb fde4 	bl	8000b00 <__aeabi_dcmple>
 8004f38:	bb30      	cbnz	r0, 8004f88 <_printf_float+0xc0>
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4640      	mov	r0, r8
 8004f40:	4649      	mov	r1, r9
 8004f42:	f7fb fdd3 	bl	8000aec <__aeabi_dcmplt>
 8004f46:	b110      	cbz	r0, 8004f4e <_printf_float+0x86>
 8004f48:	232d      	movs	r3, #45	@ 0x2d
 8004f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f4e:	4a91      	ldr	r2, [pc, #580]	@ (8005194 <_printf_float+0x2cc>)
 8004f50:	4b91      	ldr	r3, [pc, #580]	@ (8005198 <_printf_float+0x2d0>)
 8004f52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f56:	bf94      	ite	ls
 8004f58:	4690      	movls	r8, r2
 8004f5a:	4698      	movhi	r8, r3
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	f02b 0304 	bic.w	r3, fp, #4
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	f04f 0900 	mov.w	r9, #0
 8004f6a:	9700      	str	r7, [sp, #0]
 8004f6c:	4633      	mov	r3, r6
 8004f6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f70:	4621      	mov	r1, r4
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f9d2 	bl	800531c <_printf_common>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f040 808d 	bne.w	8005098 <_printf_float+0x1d0>
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	b00d      	add	sp, #52	@ 0x34
 8004f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	4649      	mov	r1, r9
 8004f90:	f7fb fdd4 	bl	8000b3c <__aeabi_dcmpun>
 8004f94:	b140      	cbz	r0, 8004fa8 <_printf_float+0xe0>
 8004f96:	464b      	mov	r3, r9
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfbc      	itt	lt
 8004f9c:	232d      	movlt	r3, #45	@ 0x2d
 8004f9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800519c <_printf_float+0x2d4>)
 8004fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80051a0 <_printf_float+0x2d8>)
 8004fa6:	e7d4      	b.n	8004f52 <_printf_float+0x8a>
 8004fa8:	6863      	ldr	r3, [r4, #4]
 8004faa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004fae:	9206      	str	r2, [sp, #24]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	d13b      	bne.n	800502c <_printf_float+0x164>
 8004fb4:	2306      	movs	r3, #6
 8004fb6:	6063      	str	r3, [r4, #4]
 8004fb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6022      	str	r2, [r4, #0]
 8004fc0:	9303      	str	r3, [sp, #12]
 8004fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8004fc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004fc8:	ab09      	add	r3, sp, #36	@ 0x24
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	6861      	ldr	r1, [r4, #4]
 8004fce:	ec49 8b10 	vmov	d0, r8, r9
 8004fd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f7ff fed6 	bl	8004d88 <__cvt>
 8004fdc:	9b06      	ldr	r3, [sp, #24]
 8004fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fe0:	2b47      	cmp	r3, #71	@ 0x47
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	d129      	bne.n	800503a <_printf_float+0x172>
 8004fe6:	1cc8      	adds	r0, r1, #3
 8004fe8:	db02      	blt.n	8004ff0 <_printf_float+0x128>
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	4299      	cmp	r1, r3
 8004fee:	dd41      	ble.n	8005074 <_printf_float+0x1ac>
 8004ff0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ff4:	fa5f fa8a 	uxtb.w	sl, sl
 8004ff8:	3901      	subs	r1, #1
 8004ffa:	4652      	mov	r2, sl
 8004ffc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005000:	9109      	str	r1, [sp, #36]	@ 0x24
 8005002:	f7ff ff26 	bl	8004e52 <__exponent>
 8005006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005008:	1813      	adds	r3, r2, r0
 800500a:	2a01      	cmp	r2, #1
 800500c:	4681      	mov	r9, r0
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	dc02      	bgt.n	8005018 <_printf_float+0x150>
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	07d2      	lsls	r2, r2, #31
 8005016:	d501      	bpl.n	800501c <_printf_float+0x154>
 8005018:	3301      	adds	r3, #1
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0a2      	beq.n	8004f6a <_printf_float+0xa2>
 8005024:	232d      	movs	r3, #45	@ 0x2d
 8005026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800502a:	e79e      	b.n	8004f6a <_printf_float+0xa2>
 800502c:	9a06      	ldr	r2, [sp, #24]
 800502e:	2a47      	cmp	r2, #71	@ 0x47
 8005030:	d1c2      	bne.n	8004fb8 <_printf_float+0xf0>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1c0      	bne.n	8004fb8 <_printf_float+0xf0>
 8005036:	2301      	movs	r3, #1
 8005038:	e7bd      	b.n	8004fb6 <_printf_float+0xee>
 800503a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800503e:	d9db      	bls.n	8004ff8 <_printf_float+0x130>
 8005040:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005044:	d118      	bne.n	8005078 <_printf_float+0x1b0>
 8005046:	2900      	cmp	r1, #0
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	dd0b      	ble.n	8005064 <_printf_float+0x19c>
 800504c:	6121      	str	r1, [r4, #16]
 800504e:	b913      	cbnz	r3, 8005056 <_printf_float+0x18e>
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	07d0      	lsls	r0, r2, #31
 8005054:	d502      	bpl.n	800505c <_printf_float+0x194>
 8005056:	3301      	adds	r3, #1
 8005058:	440b      	add	r3, r1
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800505e:	f04f 0900 	mov.w	r9, #0
 8005062:	e7db      	b.n	800501c <_printf_float+0x154>
 8005064:	b913      	cbnz	r3, 800506c <_printf_float+0x1a4>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	07d2      	lsls	r2, r2, #31
 800506a:	d501      	bpl.n	8005070 <_printf_float+0x1a8>
 800506c:	3302      	adds	r3, #2
 800506e:	e7f4      	b.n	800505a <_printf_float+0x192>
 8005070:	2301      	movs	r3, #1
 8005072:	e7f2      	b.n	800505a <_printf_float+0x192>
 8005074:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800507a:	4299      	cmp	r1, r3
 800507c:	db05      	blt.n	800508a <_printf_float+0x1c2>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	6121      	str	r1, [r4, #16]
 8005082:	07d8      	lsls	r0, r3, #31
 8005084:	d5ea      	bpl.n	800505c <_printf_float+0x194>
 8005086:	1c4b      	adds	r3, r1, #1
 8005088:	e7e7      	b.n	800505a <_printf_float+0x192>
 800508a:	2900      	cmp	r1, #0
 800508c:	bfd4      	ite	le
 800508e:	f1c1 0202 	rsble	r2, r1, #2
 8005092:	2201      	movgt	r2, #1
 8005094:	4413      	add	r3, r2
 8005096:	e7e0      	b.n	800505a <_printf_float+0x192>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	055a      	lsls	r2, r3, #21
 800509c:	d407      	bmi.n	80050ae <_printf_float+0x1e6>
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	4642      	mov	r2, r8
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	d12b      	bne.n	8005104 <_printf_float+0x23c>
 80050ac:	e767      	b.n	8004f7e <_printf_float+0xb6>
 80050ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050b2:	f240 80dd 	bls.w	8005270 <_printf_float+0x3a8>
 80050b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050ba:	2200      	movs	r2, #0
 80050bc:	2300      	movs	r3, #0
 80050be:	f7fb fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d033      	beq.n	800512e <_printf_float+0x266>
 80050c6:	4a37      	ldr	r2, [pc, #220]	@ (80051a4 <_printf_float+0x2dc>)
 80050c8:	2301      	movs	r3, #1
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	f43f af54 	beq.w	8004f7e <_printf_float+0xb6>
 80050d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80050da:	4543      	cmp	r3, r8
 80050dc:	db02      	blt.n	80050e4 <_printf_float+0x21c>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	07d8      	lsls	r0, r3, #31
 80050e2:	d50f      	bpl.n	8005104 <_printf_float+0x23c>
 80050e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f af45 	beq.w	8004f7e <_printf_float+0xb6>
 80050f4:	f04f 0900 	mov.w	r9, #0
 80050f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80050fc:	f104 0a1a 	add.w	sl, r4, #26
 8005100:	45c8      	cmp	r8, r9
 8005102:	dc09      	bgt.n	8005118 <_printf_float+0x250>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	079b      	lsls	r3, r3, #30
 8005108:	f100 8103 	bmi.w	8005312 <_printf_float+0x44a>
 800510c:	68e0      	ldr	r0, [r4, #12]
 800510e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005110:	4298      	cmp	r0, r3
 8005112:	bfb8      	it	lt
 8005114:	4618      	movlt	r0, r3
 8005116:	e734      	b.n	8004f82 <_printf_float+0xba>
 8005118:	2301      	movs	r3, #1
 800511a:	4652      	mov	r2, sl
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f af2b 	beq.w	8004f7e <_printf_float+0xb6>
 8005128:	f109 0901 	add.w	r9, r9, #1
 800512c:	e7e8      	b.n	8005100 <_printf_float+0x238>
 800512e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	dc39      	bgt.n	80051a8 <_printf_float+0x2e0>
 8005134:	4a1b      	ldr	r2, [pc, #108]	@ (80051a4 <_printf_float+0x2dc>)
 8005136:	2301      	movs	r3, #1
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	f43f af1d 	beq.w	8004f7e <_printf_float+0xb6>
 8005144:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005148:	ea59 0303 	orrs.w	r3, r9, r3
 800514c:	d102      	bne.n	8005154 <_printf_float+0x28c>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	07d9      	lsls	r1, r3, #31
 8005152:	d5d7      	bpl.n	8005104 <_printf_float+0x23c>
 8005154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005158:	4631      	mov	r1, r6
 800515a:	4628      	mov	r0, r5
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	f43f af0d 	beq.w	8004f7e <_printf_float+0xb6>
 8005164:	f04f 0a00 	mov.w	sl, #0
 8005168:	f104 0b1a 	add.w	fp, r4, #26
 800516c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800516e:	425b      	negs	r3, r3
 8005170:	4553      	cmp	r3, sl
 8005172:	dc01      	bgt.n	8005178 <_printf_float+0x2b0>
 8005174:	464b      	mov	r3, r9
 8005176:	e793      	b.n	80050a0 <_printf_float+0x1d8>
 8005178:	2301      	movs	r3, #1
 800517a:	465a      	mov	r2, fp
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	f43f aefb 	beq.w	8004f7e <_printf_float+0xb6>
 8005188:	f10a 0a01 	add.w	sl, sl, #1
 800518c:	e7ee      	b.n	800516c <_printf_float+0x2a4>
 800518e:	bf00      	nop
 8005190:	7fefffff 	.word	0x7fefffff
 8005194:	08009504 	.word	0x08009504
 8005198:	08009508 	.word	0x08009508
 800519c:	0800950c 	.word	0x0800950c
 80051a0:	08009510 	.word	0x08009510
 80051a4:	08009514 	.word	0x08009514
 80051a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051ae:	4553      	cmp	r3, sl
 80051b0:	bfa8      	it	ge
 80051b2:	4653      	movge	r3, sl
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	4699      	mov	r9, r3
 80051b8:	dc36      	bgt.n	8005228 <_printf_float+0x360>
 80051ba:	f04f 0b00 	mov.w	fp, #0
 80051be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051c2:	f104 021a 	add.w	r2, r4, #26
 80051c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051c8:	9306      	str	r3, [sp, #24]
 80051ca:	eba3 0309 	sub.w	r3, r3, r9
 80051ce:	455b      	cmp	r3, fp
 80051d0:	dc31      	bgt.n	8005236 <_printf_float+0x36e>
 80051d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d4:	459a      	cmp	sl, r3
 80051d6:	dc3a      	bgt.n	800524e <_printf_float+0x386>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	07da      	lsls	r2, r3, #31
 80051dc:	d437      	bmi.n	800524e <_printf_float+0x386>
 80051de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e0:	ebaa 0903 	sub.w	r9, sl, r3
 80051e4:	9b06      	ldr	r3, [sp, #24]
 80051e6:	ebaa 0303 	sub.w	r3, sl, r3
 80051ea:	4599      	cmp	r9, r3
 80051ec:	bfa8      	it	ge
 80051ee:	4699      	movge	r9, r3
 80051f0:	f1b9 0f00 	cmp.w	r9, #0
 80051f4:	dc33      	bgt.n	800525e <_printf_float+0x396>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051fe:	f104 0b1a 	add.w	fp, r4, #26
 8005202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005204:	ebaa 0303 	sub.w	r3, sl, r3
 8005208:	eba3 0309 	sub.w	r3, r3, r9
 800520c:	4543      	cmp	r3, r8
 800520e:	f77f af79 	ble.w	8005104 <_printf_float+0x23c>
 8005212:	2301      	movs	r3, #1
 8005214:	465a      	mov	r2, fp
 8005216:	4631      	mov	r1, r6
 8005218:	4628      	mov	r0, r5
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	f43f aeae 	beq.w	8004f7e <_printf_float+0xb6>
 8005222:	f108 0801 	add.w	r8, r8, #1
 8005226:	e7ec      	b.n	8005202 <_printf_float+0x33a>
 8005228:	4642      	mov	r2, r8
 800522a:	4631      	mov	r1, r6
 800522c:	4628      	mov	r0, r5
 800522e:	47b8      	blx	r7
 8005230:	3001      	adds	r0, #1
 8005232:	d1c2      	bne.n	80051ba <_printf_float+0x2f2>
 8005234:	e6a3      	b.n	8004f7e <_printf_float+0xb6>
 8005236:	2301      	movs	r3, #1
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	9206      	str	r2, [sp, #24]
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae9c 	beq.w	8004f7e <_printf_float+0xb6>
 8005246:	9a06      	ldr	r2, [sp, #24]
 8005248:	f10b 0b01 	add.w	fp, fp, #1
 800524c:	e7bb      	b.n	80051c6 <_printf_float+0x2fe>
 800524e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	d1c0      	bne.n	80051de <_printf_float+0x316>
 800525c:	e68f      	b.n	8004f7e <_printf_float+0xb6>
 800525e:	9a06      	ldr	r2, [sp, #24]
 8005260:	464b      	mov	r3, r9
 8005262:	4442      	add	r2, r8
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	d1c3      	bne.n	80051f6 <_printf_float+0x32e>
 800526e:	e686      	b.n	8004f7e <_printf_float+0xb6>
 8005270:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005274:	f1ba 0f01 	cmp.w	sl, #1
 8005278:	dc01      	bgt.n	800527e <_printf_float+0x3b6>
 800527a:	07db      	lsls	r3, r3, #31
 800527c:	d536      	bpl.n	80052ec <_printf_float+0x424>
 800527e:	2301      	movs	r3, #1
 8005280:	4642      	mov	r2, r8
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f ae78 	beq.w	8004f7e <_printf_float+0xb6>
 800528e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f ae70 	beq.w	8004f7e <_printf_float+0xb6>
 800529e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052a2:	2200      	movs	r2, #0
 80052a4:	2300      	movs	r3, #0
 80052a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052aa:	f7fb fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 80052ae:	b9c0      	cbnz	r0, 80052e2 <_printf_float+0x41a>
 80052b0:	4653      	mov	r3, sl
 80052b2:	f108 0201 	add.w	r2, r8, #1
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	d10c      	bne.n	80052da <_printf_float+0x412>
 80052c0:	e65d      	b.n	8004f7e <_printf_float+0xb6>
 80052c2:	2301      	movs	r3, #1
 80052c4:	465a      	mov	r2, fp
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f ae56 	beq.w	8004f7e <_printf_float+0xb6>
 80052d2:	f108 0801 	add.w	r8, r8, #1
 80052d6:	45d0      	cmp	r8, sl
 80052d8:	dbf3      	blt.n	80052c2 <_printf_float+0x3fa>
 80052da:	464b      	mov	r3, r9
 80052dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052e0:	e6df      	b.n	80050a2 <_printf_float+0x1da>
 80052e2:	f04f 0800 	mov.w	r8, #0
 80052e6:	f104 0b1a 	add.w	fp, r4, #26
 80052ea:	e7f4      	b.n	80052d6 <_printf_float+0x40e>
 80052ec:	2301      	movs	r3, #1
 80052ee:	4642      	mov	r2, r8
 80052f0:	e7e1      	b.n	80052b6 <_printf_float+0x3ee>
 80052f2:	2301      	movs	r3, #1
 80052f4:	464a      	mov	r2, r9
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f ae3e 	beq.w	8004f7e <_printf_float+0xb6>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	68e3      	ldr	r3, [r4, #12]
 8005308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800530a:	1a5b      	subs	r3, r3, r1
 800530c:	4543      	cmp	r3, r8
 800530e:	dcf0      	bgt.n	80052f2 <_printf_float+0x42a>
 8005310:	e6fc      	b.n	800510c <_printf_float+0x244>
 8005312:	f04f 0800 	mov.w	r8, #0
 8005316:	f104 0919 	add.w	r9, r4, #25
 800531a:	e7f4      	b.n	8005306 <_printf_float+0x43e>

0800531c <_printf_common>:
 800531c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	4616      	mov	r6, r2
 8005322:	4698      	mov	r8, r3
 8005324:	688a      	ldr	r2, [r1, #8]
 8005326:	690b      	ldr	r3, [r1, #16]
 8005328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800532c:	4293      	cmp	r3, r2
 800532e:	bfb8      	it	lt
 8005330:	4613      	movlt	r3, r2
 8005332:	6033      	str	r3, [r6, #0]
 8005334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005338:	4607      	mov	r7, r0
 800533a:	460c      	mov	r4, r1
 800533c:	b10a      	cbz	r2, 8005342 <_printf_common+0x26>
 800533e:	3301      	adds	r3, #1
 8005340:	6033      	str	r3, [r6, #0]
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	0699      	lsls	r1, r3, #26
 8005346:	bf42      	ittt	mi
 8005348:	6833      	ldrmi	r3, [r6, #0]
 800534a:	3302      	addmi	r3, #2
 800534c:	6033      	strmi	r3, [r6, #0]
 800534e:	6825      	ldr	r5, [r4, #0]
 8005350:	f015 0506 	ands.w	r5, r5, #6
 8005354:	d106      	bne.n	8005364 <_printf_common+0x48>
 8005356:	f104 0a19 	add.w	sl, r4, #25
 800535a:	68e3      	ldr	r3, [r4, #12]
 800535c:	6832      	ldr	r2, [r6, #0]
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	42ab      	cmp	r3, r5
 8005362:	dc26      	bgt.n	80053b2 <_printf_common+0x96>
 8005364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	3b00      	subs	r3, #0
 800536c:	bf18      	it	ne
 800536e:	2301      	movne	r3, #1
 8005370:	0692      	lsls	r2, r2, #26
 8005372:	d42b      	bmi.n	80053cc <_printf_common+0xb0>
 8005374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005378:	4641      	mov	r1, r8
 800537a:	4638      	mov	r0, r7
 800537c:	47c8      	blx	r9
 800537e:	3001      	adds	r0, #1
 8005380:	d01e      	beq.n	80053c0 <_printf_common+0xa4>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	6922      	ldr	r2, [r4, #16]
 8005386:	f003 0306 	and.w	r3, r3, #6
 800538a:	2b04      	cmp	r3, #4
 800538c:	bf02      	ittt	eq
 800538e:	68e5      	ldreq	r5, [r4, #12]
 8005390:	6833      	ldreq	r3, [r6, #0]
 8005392:	1aed      	subeq	r5, r5, r3
 8005394:	68a3      	ldr	r3, [r4, #8]
 8005396:	bf0c      	ite	eq
 8005398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800539c:	2500      	movne	r5, #0
 800539e:	4293      	cmp	r3, r2
 80053a0:	bfc4      	itt	gt
 80053a2:	1a9b      	subgt	r3, r3, r2
 80053a4:	18ed      	addgt	r5, r5, r3
 80053a6:	2600      	movs	r6, #0
 80053a8:	341a      	adds	r4, #26
 80053aa:	42b5      	cmp	r5, r6
 80053ac:	d11a      	bne.n	80053e4 <_printf_common+0xc8>
 80053ae:	2000      	movs	r0, #0
 80053b0:	e008      	b.n	80053c4 <_printf_common+0xa8>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4652      	mov	r2, sl
 80053b6:	4641      	mov	r1, r8
 80053b8:	4638      	mov	r0, r7
 80053ba:	47c8      	blx	r9
 80053bc:	3001      	adds	r0, #1
 80053be:	d103      	bne.n	80053c8 <_printf_common+0xac>
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c8:	3501      	adds	r5, #1
 80053ca:	e7c6      	b.n	800535a <_printf_common+0x3e>
 80053cc:	18e1      	adds	r1, r4, r3
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	2030      	movs	r0, #48	@ 0x30
 80053d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053d6:	4422      	add	r2, r4
 80053d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053e0:	3302      	adds	r3, #2
 80053e2:	e7c7      	b.n	8005374 <_printf_common+0x58>
 80053e4:	2301      	movs	r3, #1
 80053e6:	4622      	mov	r2, r4
 80053e8:	4641      	mov	r1, r8
 80053ea:	4638      	mov	r0, r7
 80053ec:	47c8      	blx	r9
 80053ee:	3001      	adds	r0, #1
 80053f0:	d0e6      	beq.n	80053c0 <_printf_common+0xa4>
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7d9      	b.n	80053aa <_printf_common+0x8e>
	...

080053f8 <_printf_i>:
 80053f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	7e0f      	ldrb	r7, [r1, #24]
 80053fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005400:	2f78      	cmp	r7, #120	@ 0x78
 8005402:	4691      	mov	r9, r2
 8005404:	4680      	mov	r8, r0
 8005406:	460c      	mov	r4, r1
 8005408:	469a      	mov	sl, r3
 800540a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800540e:	d807      	bhi.n	8005420 <_printf_i+0x28>
 8005410:	2f62      	cmp	r7, #98	@ 0x62
 8005412:	d80a      	bhi.n	800542a <_printf_i+0x32>
 8005414:	2f00      	cmp	r7, #0
 8005416:	f000 80d2 	beq.w	80055be <_printf_i+0x1c6>
 800541a:	2f58      	cmp	r7, #88	@ 0x58
 800541c:	f000 80b9 	beq.w	8005592 <_printf_i+0x19a>
 8005420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005428:	e03a      	b.n	80054a0 <_printf_i+0xa8>
 800542a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800542e:	2b15      	cmp	r3, #21
 8005430:	d8f6      	bhi.n	8005420 <_printf_i+0x28>
 8005432:	a101      	add	r1, pc, #4	@ (adr r1, 8005438 <_printf_i+0x40>)
 8005434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005438:	08005491 	.word	0x08005491
 800543c:	080054a5 	.word	0x080054a5
 8005440:	08005421 	.word	0x08005421
 8005444:	08005421 	.word	0x08005421
 8005448:	08005421 	.word	0x08005421
 800544c:	08005421 	.word	0x08005421
 8005450:	080054a5 	.word	0x080054a5
 8005454:	08005421 	.word	0x08005421
 8005458:	08005421 	.word	0x08005421
 800545c:	08005421 	.word	0x08005421
 8005460:	08005421 	.word	0x08005421
 8005464:	080055a5 	.word	0x080055a5
 8005468:	080054cf 	.word	0x080054cf
 800546c:	0800555f 	.word	0x0800555f
 8005470:	08005421 	.word	0x08005421
 8005474:	08005421 	.word	0x08005421
 8005478:	080055c7 	.word	0x080055c7
 800547c:	08005421 	.word	0x08005421
 8005480:	080054cf 	.word	0x080054cf
 8005484:	08005421 	.word	0x08005421
 8005488:	08005421 	.word	0x08005421
 800548c:	08005567 	.word	0x08005567
 8005490:	6833      	ldr	r3, [r6, #0]
 8005492:	1d1a      	adds	r2, r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6032      	str	r2, [r6, #0]
 8005498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800549c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054a0:	2301      	movs	r3, #1
 80054a2:	e09d      	b.n	80055e0 <_printf_i+0x1e8>
 80054a4:	6833      	ldr	r3, [r6, #0]
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	1d19      	adds	r1, r3, #4
 80054aa:	6031      	str	r1, [r6, #0]
 80054ac:	0606      	lsls	r6, r0, #24
 80054ae:	d501      	bpl.n	80054b4 <_printf_i+0xbc>
 80054b0:	681d      	ldr	r5, [r3, #0]
 80054b2:	e003      	b.n	80054bc <_printf_i+0xc4>
 80054b4:	0645      	lsls	r5, r0, #25
 80054b6:	d5fb      	bpl.n	80054b0 <_printf_i+0xb8>
 80054b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054bc:	2d00      	cmp	r5, #0
 80054be:	da03      	bge.n	80054c8 <_printf_i+0xd0>
 80054c0:	232d      	movs	r3, #45	@ 0x2d
 80054c2:	426d      	negs	r5, r5
 80054c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054c8:	4859      	ldr	r0, [pc, #356]	@ (8005630 <_printf_i+0x238>)
 80054ca:	230a      	movs	r3, #10
 80054cc:	e011      	b.n	80054f2 <_printf_i+0xfa>
 80054ce:	6821      	ldr	r1, [r4, #0]
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	0608      	lsls	r0, r1, #24
 80054d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054d8:	d402      	bmi.n	80054e0 <_printf_i+0xe8>
 80054da:	0649      	lsls	r1, r1, #25
 80054dc:	bf48      	it	mi
 80054de:	b2ad      	uxthmi	r5, r5
 80054e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054e2:	4853      	ldr	r0, [pc, #332]	@ (8005630 <_printf_i+0x238>)
 80054e4:	6033      	str	r3, [r6, #0]
 80054e6:	bf14      	ite	ne
 80054e8:	230a      	movne	r3, #10
 80054ea:	2308      	moveq	r3, #8
 80054ec:	2100      	movs	r1, #0
 80054ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054f2:	6866      	ldr	r6, [r4, #4]
 80054f4:	60a6      	str	r6, [r4, #8]
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	bfa2      	ittt	ge
 80054fa:	6821      	ldrge	r1, [r4, #0]
 80054fc:	f021 0104 	bicge.w	r1, r1, #4
 8005500:	6021      	strge	r1, [r4, #0]
 8005502:	b90d      	cbnz	r5, 8005508 <_printf_i+0x110>
 8005504:	2e00      	cmp	r6, #0
 8005506:	d04b      	beq.n	80055a0 <_printf_i+0x1a8>
 8005508:	4616      	mov	r6, r2
 800550a:	fbb5 f1f3 	udiv	r1, r5, r3
 800550e:	fb03 5711 	mls	r7, r3, r1, r5
 8005512:	5dc7      	ldrb	r7, [r0, r7]
 8005514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005518:	462f      	mov	r7, r5
 800551a:	42bb      	cmp	r3, r7
 800551c:	460d      	mov	r5, r1
 800551e:	d9f4      	bls.n	800550a <_printf_i+0x112>
 8005520:	2b08      	cmp	r3, #8
 8005522:	d10b      	bne.n	800553c <_printf_i+0x144>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	07df      	lsls	r7, r3, #31
 8005528:	d508      	bpl.n	800553c <_printf_i+0x144>
 800552a:	6923      	ldr	r3, [r4, #16]
 800552c:	6861      	ldr	r1, [r4, #4]
 800552e:	4299      	cmp	r1, r3
 8005530:	bfde      	ittt	le
 8005532:	2330      	movle	r3, #48	@ 0x30
 8005534:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005538:	f106 36ff 	addle.w	r6, r6, #4294967295
 800553c:	1b92      	subs	r2, r2, r6
 800553e:	6122      	str	r2, [r4, #16]
 8005540:	f8cd a000 	str.w	sl, [sp]
 8005544:	464b      	mov	r3, r9
 8005546:	aa03      	add	r2, sp, #12
 8005548:	4621      	mov	r1, r4
 800554a:	4640      	mov	r0, r8
 800554c:	f7ff fee6 	bl	800531c <_printf_common>
 8005550:	3001      	adds	r0, #1
 8005552:	d14a      	bne.n	80055ea <_printf_i+0x1f2>
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	b004      	add	sp, #16
 800555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	f043 0320 	orr.w	r3, r3, #32
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	4833      	ldr	r0, [pc, #204]	@ (8005634 <_printf_i+0x23c>)
 8005568:	2778      	movs	r7, #120	@ 0x78
 800556a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	6831      	ldr	r1, [r6, #0]
 8005572:	061f      	lsls	r7, r3, #24
 8005574:	f851 5b04 	ldr.w	r5, [r1], #4
 8005578:	d402      	bmi.n	8005580 <_printf_i+0x188>
 800557a:	065f      	lsls	r7, r3, #25
 800557c:	bf48      	it	mi
 800557e:	b2ad      	uxthmi	r5, r5
 8005580:	6031      	str	r1, [r6, #0]
 8005582:	07d9      	lsls	r1, r3, #31
 8005584:	bf44      	itt	mi
 8005586:	f043 0320 	orrmi.w	r3, r3, #32
 800558a:	6023      	strmi	r3, [r4, #0]
 800558c:	b11d      	cbz	r5, 8005596 <_printf_i+0x19e>
 800558e:	2310      	movs	r3, #16
 8005590:	e7ac      	b.n	80054ec <_printf_i+0xf4>
 8005592:	4827      	ldr	r0, [pc, #156]	@ (8005630 <_printf_i+0x238>)
 8005594:	e7e9      	b.n	800556a <_printf_i+0x172>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f023 0320 	bic.w	r3, r3, #32
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	e7f6      	b.n	800558e <_printf_i+0x196>
 80055a0:	4616      	mov	r6, r2
 80055a2:	e7bd      	b.n	8005520 <_printf_i+0x128>
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	6825      	ldr	r5, [r4, #0]
 80055a8:	6961      	ldr	r1, [r4, #20]
 80055aa:	1d18      	adds	r0, r3, #4
 80055ac:	6030      	str	r0, [r6, #0]
 80055ae:	062e      	lsls	r6, r5, #24
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	d501      	bpl.n	80055b8 <_printf_i+0x1c0>
 80055b4:	6019      	str	r1, [r3, #0]
 80055b6:	e002      	b.n	80055be <_printf_i+0x1c6>
 80055b8:	0668      	lsls	r0, r5, #25
 80055ba:	d5fb      	bpl.n	80055b4 <_printf_i+0x1bc>
 80055bc:	8019      	strh	r1, [r3, #0]
 80055be:	2300      	movs	r3, #0
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	4616      	mov	r6, r2
 80055c4:	e7bc      	b.n	8005540 <_printf_i+0x148>
 80055c6:	6833      	ldr	r3, [r6, #0]
 80055c8:	1d1a      	adds	r2, r3, #4
 80055ca:	6032      	str	r2, [r6, #0]
 80055cc:	681e      	ldr	r6, [r3, #0]
 80055ce:	6862      	ldr	r2, [r4, #4]
 80055d0:	2100      	movs	r1, #0
 80055d2:	4630      	mov	r0, r6
 80055d4:	f7fa fe04 	bl	80001e0 <memchr>
 80055d8:	b108      	cbz	r0, 80055de <_printf_i+0x1e6>
 80055da:	1b80      	subs	r0, r0, r6
 80055dc:	6060      	str	r0, [r4, #4]
 80055de:	6863      	ldr	r3, [r4, #4]
 80055e0:	6123      	str	r3, [r4, #16]
 80055e2:	2300      	movs	r3, #0
 80055e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e8:	e7aa      	b.n	8005540 <_printf_i+0x148>
 80055ea:	6923      	ldr	r3, [r4, #16]
 80055ec:	4632      	mov	r2, r6
 80055ee:	4649      	mov	r1, r9
 80055f0:	4640      	mov	r0, r8
 80055f2:	47d0      	blx	sl
 80055f4:	3001      	adds	r0, #1
 80055f6:	d0ad      	beq.n	8005554 <_printf_i+0x15c>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	079b      	lsls	r3, r3, #30
 80055fc:	d413      	bmi.n	8005626 <_printf_i+0x22e>
 80055fe:	68e0      	ldr	r0, [r4, #12]
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	4298      	cmp	r0, r3
 8005604:	bfb8      	it	lt
 8005606:	4618      	movlt	r0, r3
 8005608:	e7a6      	b.n	8005558 <_printf_i+0x160>
 800560a:	2301      	movs	r3, #1
 800560c:	4632      	mov	r2, r6
 800560e:	4649      	mov	r1, r9
 8005610:	4640      	mov	r0, r8
 8005612:	47d0      	blx	sl
 8005614:	3001      	adds	r0, #1
 8005616:	d09d      	beq.n	8005554 <_printf_i+0x15c>
 8005618:	3501      	adds	r5, #1
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	9903      	ldr	r1, [sp, #12]
 800561e:	1a5b      	subs	r3, r3, r1
 8005620:	42ab      	cmp	r3, r5
 8005622:	dcf2      	bgt.n	800560a <_printf_i+0x212>
 8005624:	e7eb      	b.n	80055fe <_printf_i+0x206>
 8005626:	2500      	movs	r5, #0
 8005628:	f104 0619 	add.w	r6, r4, #25
 800562c:	e7f5      	b.n	800561a <_printf_i+0x222>
 800562e:	bf00      	nop
 8005630:	08009516 	.word	0x08009516
 8005634:	08009527 	.word	0x08009527

08005638 <_scanf_float>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	b087      	sub	sp, #28
 800563e:	4617      	mov	r7, r2
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	688b      	ldr	r3, [r1, #8]
 8005644:	1e5a      	subs	r2, r3, #1
 8005646:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800564a:	bf81      	itttt	hi
 800564c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005650:	eb03 0b05 	addhi.w	fp, r3, r5
 8005654:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005658:	608b      	strhi	r3, [r1, #8]
 800565a:	680b      	ldr	r3, [r1, #0]
 800565c:	460a      	mov	r2, r1
 800565e:	f04f 0500 	mov.w	r5, #0
 8005662:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005666:	f842 3b1c 	str.w	r3, [r2], #28
 800566a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800566e:	4680      	mov	r8, r0
 8005670:	460c      	mov	r4, r1
 8005672:	bf98      	it	ls
 8005674:	f04f 0b00 	movls.w	fp, #0
 8005678:	9201      	str	r2, [sp, #4]
 800567a:	4616      	mov	r6, r2
 800567c:	46aa      	mov	sl, r5
 800567e:	46a9      	mov	r9, r5
 8005680:	9502      	str	r5, [sp, #8]
 8005682:	68a2      	ldr	r2, [r4, #8]
 8005684:	b152      	cbz	r2, 800569c <_scanf_float+0x64>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b4e      	cmp	r3, #78	@ 0x4e
 800568c:	d864      	bhi.n	8005758 <_scanf_float+0x120>
 800568e:	2b40      	cmp	r3, #64	@ 0x40
 8005690:	d83c      	bhi.n	800570c <_scanf_float+0xd4>
 8005692:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005696:	b2c8      	uxtb	r0, r1
 8005698:	280e      	cmp	r0, #14
 800569a:	d93a      	bls.n	8005712 <_scanf_float+0xda>
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	d003      	beq.n	80056aa <_scanf_float+0x72>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ae:	f1ba 0f01 	cmp.w	sl, #1
 80056b2:	f200 8117 	bhi.w	80058e4 <_scanf_float+0x2ac>
 80056b6:	9b01      	ldr	r3, [sp, #4]
 80056b8:	429e      	cmp	r6, r3
 80056ba:	f200 8108 	bhi.w	80058ce <_scanf_float+0x296>
 80056be:	2001      	movs	r0, #1
 80056c0:	b007      	add	sp, #28
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80056ca:	2a0d      	cmp	r2, #13
 80056cc:	d8e6      	bhi.n	800569c <_scanf_float+0x64>
 80056ce:	a101      	add	r1, pc, #4	@ (adr r1, 80056d4 <_scanf_float+0x9c>)
 80056d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056d4:	0800581b 	.word	0x0800581b
 80056d8:	0800569d 	.word	0x0800569d
 80056dc:	0800569d 	.word	0x0800569d
 80056e0:	0800569d 	.word	0x0800569d
 80056e4:	0800587b 	.word	0x0800587b
 80056e8:	08005853 	.word	0x08005853
 80056ec:	0800569d 	.word	0x0800569d
 80056f0:	0800569d 	.word	0x0800569d
 80056f4:	08005829 	.word	0x08005829
 80056f8:	0800569d 	.word	0x0800569d
 80056fc:	0800569d 	.word	0x0800569d
 8005700:	0800569d 	.word	0x0800569d
 8005704:	0800569d 	.word	0x0800569d
 8005708:	080057e1 	.word	0x080057e1
 800570c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005710:	e7db      	b.n	80056ca <_scanf_float+0x92>
 8005712:	290e      	cmp	r1, #14
 8005714:	d8c2      	bhi.n	800569c <_scanf_float+0x64>
 8005716:	a001      	add	r0, pc, #4	@ (adr r0, 800571c <_scanf_float+0xe4>)
 8005718:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800571c:	080057d1 	.word	0x080057d1
 8005720:	0800569d 	.word	0x0800569d
 8005724:	080057d1 	.word	0x080057d1
 8005728:	08005867 	.word	0x08005867
 800572c:	0800569d 	.word	0x0800569d
 8005730:	08005779 	.word	0x08005779
 8005734:	080057b7 	.word	0x080057b7
 8005738:	080057b7 	.word	0x080057b7
 800573c:	080057b7 	.word	0x080057b7
 8005740:	080057b7 	.word	0x080057b7
 8005744:	080057b7 	.word	0x080057b7
 8005748:	080057b7 	.word	0x080057b7
 800574c:	080057b7 	.word	0x080057b7
 8005750:	080057b7 	.word	0x080057b7
 8005754:	080057b7 	.word	0x080057b7
 8005758:	2b6e      	cmp	r3, #110	@ 0x6e
 800575a:	d809      	bhi.n	8005770 <_scanf_float+0x138>
 800575c:	2b60      	cmp	r3, #96	@ 0x60
 800575e:	d8b2      	bhi.n	80056c6 <_scanf_float+0x8e>
 8005760:	2b54      	cmp	r3, #84	@ 0x54
 8005762:	d07b      	beq.n	800585c <_scanf_float+0x224>
 8005764:	2b59      	cmp	r3, #89	@ 0x59
 8005766:	d199      	bne.n	800569c <_scanf_float+0x64>
 8005768:	2d07      	cmp	r5, #7
 800576a:	d197      	bne.n	800569c <_scanf_float+0x64>
 800576c:	2508      	movs	r5, #8
 800576e:	e02c      	b.n	80057ca <_scanf_float+0x192>
 8005770:	2b74      	cmp	r3, #116	@ 0x74
 8005772:	d073      	beq.n	800585c <_scanf_float+0x224>
 8005774:	2b79      	cmp	r3, #121	@ 0x79
 8005776:	e7f6      	b.n	8005766 <_scanf_float+0x12e>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	05c8      	lsls	r0, r1, #23
 800577c:	d51b      	bpl.n	80057b6 <_scanf_float+0x17e>
 800577e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005782:	6021      	str	r1, [r4, #0]
 8005784:	f109 0901 	add.w	r9, r9, #1
 8005788:	f1bb 0f00 	cmp.w	fp, #0
 800578c:	d003      	beq.n	8005796 <_scanf_float+0x15e>
 800578e:	3201      	adds	r2, #1
 8005790:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005794:	60a2      	str	r2, [r4, #8]
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	3b01      	subs	r3, #1
 800579a:	60a3      	str	r3, [r4, #8]
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	3301      	adds	r3, #1
 80057a0:	6123      	str	r3, [r4, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	f340 8087 	ble.w	80058bc <_scanf_float+0x284>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	e765      	b.n	8005682 <_scanf_float+0x4a>
 80057b6:	eb1a 0105 	adds.w	r1, sl, r5
 80057ba:	f47f af6f 	bne.w	800569c <_scanf_float+0x64>
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80057c4:	6022      	str	r2, [r4, #0]
 80057c6:	460d      	mov	r5, r1
 80057c8:	468a      	mov	sl, r1
 80057ca:	f806 3b01 	strb.w	r3, [r6], #1
 80057ce:	e7e2      	b.n	8005796 <_scanf_float+0x15e>
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	0610      	lsls	r0, r2, #24
 80057d4:	f57f af62 	bpl.w	800569c <_scanf_float+0x64>
 80057d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057dc:	6022      	str	r2, [r4, #0]
 80057de:	e7f4      	b.n	80057ca <_scanf_float+0x192>
 80057e0:	f1ba 0f00 	cmp.w	sl, #0
 80057e4:	d10e      	bne.n	8005804 <_scanf_float+0x1cc>
 80057e6:	f1b9 0f00 	cmp.w	r9, #0
 80057ea:	d10e      	bne.n	800580a <_scanf_float+0x1d2>
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057f6:	d108      	bne.n	800580a <_scanf_float+0x1d2>
 80057f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057fc:	6022      	str	r2, [r4, #0]
 80057fe:	f04f 0a01 	mov.w	sl, #1
 8005802:	e7e2      	b.n	80057ca <_scanf_float+0x192>
 8005804:	f1ba 0f02 	cmp.w	sl, #2
 8005808:	d055      	beq.n	80058b6 <_scanf_float+0x27e>
 800580a:	2d01      	cmp	r5, #1
 800580c:	d002      	beq.n	8005814 <_scanf_float+0x1dc>
 800580e:	2d04      	cmp	r5, #4
 8005810:	f47f af44 	bne.w	800569c <_scanf_float+0x64>
 8005814:	3501      	adds	r5, #1
 8005816:	b2ed      	uxtb	r5, r5
 8005818:	e7d7      	b.n	80057ca <_scanf_float+0x192>
 800581a:	f1ba 0f01 	cmp.w	sl, #1
 800581e:	f47f af3d 	bne.w	800569c <_scanf_float+0x64>
 8005822:	f04f 0a02 	mov.w	sl, #2
 8005826:	e7d0      	b.n	80057ca <_scanf_float+0x192>
 8005828:	b97d      	cbnz	r5, 800584a <_scanf_float+0x212>
 800582a:	f1b9 0f00 	cmp.w	r9, #0
 800582e:	f47f af38 	bne.w	80056a2 <_scanf_float+0x6a>
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005838:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800583c:	f040 8108 	bne.w	8005a50 <_scanf_float+0x418>
 8005840:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	2501      	movs	r5, #1
 8005848:	e7bf      	b.n	80057ca <_scanf_float+0x192>
 800584a:	2d03      	cmp	r5, #3
 800584c:	d0e2      	beq.n	8005814 <_scanf_float+0x1dc>
 800584e:	2d05      	cmp	r5, #5
 8005850:	e7de      	b.n	8005810 <_scanf_float+0x1d8>
 8005852:	2d02      	cmp	r5, #2
 8005854:	f47f af22 	bne.w	800569c <_scanf_float+0x64>
 8005858:	2503      	movs	r5, #3
 800585a:	e7b6      	b.n	80057ca <_scanf_float+0x192>
 800585c:	2d06      	cmp	r5, #6
 800585e:	f47f af1d 	bne.w	800569c <_scanf_float+0x64>
 8005862:	2507      	movs	r5, #7
 8005864:	e7b1      	b.n	80057ca <_scanf_float+0x192>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	0591      	lsls	r1, r2, #22
 800586a:	f57f af17 	bpl.w	800569c <_scanf_float+0x64>
 800586e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005872:	6022      	str	r2, [r4, #0]
 8005874:	f8cd 9008 	str.w	r9, [sp, #8]
 8005878:	e7a7      	b.n	80057ca <_scanf_float+0x192>
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005880:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005884:	d006      	beq.n	8005894 <_scanf_float+0x25c>
 8005886:	0550      	lsls	r0, r2, #21
 8005888:	f57f af08 	bpl.w	800569c <_scanf_float+0x64>
 800588c:	f1b9 0f00 	cmp.w	r9, #0
 8005890:	f000 80de 	beq.w	8005a50 <_scanf_float+0x418>
 8005894:	0591      	lsls	r1, r2, #22
 8005896:	bf58      	it	pl
 8005898:	9902      	ldrpl	r1, [sp, #8]
 800589a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800589e:	bf58      	it	pl
 80058a0:	eba9 0101 	subpl.w	r1, r9, r1
 80058a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80058a8:	bf58      	it	pl
 80058aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	f04f 0900 	mov.w	r9, #0
 80058b4:	e789      	b.n	80057ca <_scanf_float+0x192>
 80058b6:	f04f 0a03 	mov.w	sl, #3
 80058ba:	e786      	b.n	80057ca <_scanf_float+0x192>
 80058bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80058c0:	4639      	mov	r1, r7
 80058c2:	4640      	mov	r0, r8
 80058c4:	4798      	blx	r3
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f43f aedb 	beq.w	8005682 <_scanf_float+0x4a>
 80058cc:	e6e6      	b.n	800569c <_scanf_float+0x64>
 80058ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058d6:	463a      	mov	r2, r7
 80058d8:	4640      	mov	r0, r8
 80058da:	4798      	blx	r3
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	3b01      	subs	r3, #1
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	e6e8      	b.n	80056b6 <_scanf_float+0x7e>
 80058e4:	1e6b      	subs	r3, r5, #1
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d824      	bhi.n	8005934 <_scanf_float+0x2fc>
 80058ea:	2d02      	cmp	r5, #2
 80058ec:	d836      	bhi.n	800595c <_scanf_float+0x324>
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	429e      	cmp	r6, r3
 80058f2:	f67f aee4 	bls.w	80056be <_scanf_float+0x86>
 80058f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058fe:	463a      	mov	r2, r7
 8005900:	4640      	mov	r0, r8
 8005902:	4798      	blx	r3
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	3b01      	subs	r3, #1
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	e7f0      	b.n	80058ee <_scanf_float+0x2b6>
 800590c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005910:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005914:	463a      	mov	r2, r7
 8005916:	4640      	mov	r0, r8
 8005918:	4798      	blx	r3
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	3b01      	subs	r3, #1
 800591e:	6123      	str	r3, [r4, #16]
 8005920:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005924:	fa5f fa8a 	uxtb.w	sl, sl
 8005928:	f1ba 0f02 	cmp.w	sl, #2
 800592c:	d1ee      	bne.n	800590c <_scanf_float+0x2d4>
 800592e:	3d03      	subs	r5, #3
 8005930:	b2ed      	uxtb	r5, r5
 8005932:	1b76      	subs	r6, r6, r5
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	05da      	lsls	r2, r3, #23
 8005938:	d530      	bpl.n	800599c <_scanf_float+0x364>
 800593a:	055b      	lsls	r3, r3, #21
 800593c:	d511      	bpl.n	8005962 <_scanf_float+0x32a>
 800593e:	9b01      	ldr	r3, [sp, #4]
 8005940:	429e      	cmp	r6, r3
 8005942:	f67f aebc 	bls.w	80056be <_scanf_float+0x86>
 8005946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800594a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800594e:	463a      	mov	r2, r7
 8005950:	4640      	mov	r0, r8
 8005952:	4798      	blx	r3
 8005954:	6923      	ldr	r3, [r4, #16]
 8005956:	3b01      	subs	r3, #1
 8005958:	6123      	str	r3, [r4, #16]
 800595a:	e7f0      	b.n	800593e <_scanf_float+0x306>
 800595c:	46aa      	mov	sl, r5
 800595e:	46b3      	mov	fp, r6
 8005960:	e7de      	b.n	8005920 <_scanf_float+0x2e8>
 8005962:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	2965      	cmp	r1, #101	@ 0x65
 800596a:	f103 33ff 	add.w	r3, r3, #4294967295
 800596e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005972:	6123      	str	r3, [r4, #16]
 8005974:	d00c      	beq.n	8005990 <_scanf_float+0x358>
 8005976:	2945      	cmp	r1, #69	@ 0x45
 8005978:	d00a      	beq.n	8005990 <_scanf_float+0x358>
 800597a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800597e:	463a      	mov	r2, r7
 8005980:	4640      	mov	r0, r8
 8005982:	4798      	blx	r3
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800598a:	3b01      	subs	r3, #1
 800598c:	1eb5      	subs	r5, r6, #2
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005994:	463a      	mov	r2, r7
 8005996:	4640      	mov	r0, r8
 8005998:	4798      	blx	r3
 800599a:	462e      	mov	r6, r5
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	f012 0210 	ands.w	r2, r2, #16
 80059a2:	d001      	beq.n	80059a8 <_scanf_float+0x370>
 80059a4:	2000      	movs	r0, #0
 80059a6:	e68b      	b.n	80056c0 <_scanf_float+0x88>
 80059a8:	7032      	strb	r2, [r6, #0]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b4:	d11c      	bne.n	80059f0 <_scanf_float+0x3b8>
 80059b6:	9b02      	ldr	r3, [sp, #8]
 80059b8:	454b      	cmp	r3, r9
 80059ba:	eba3 0209 	sub.w	r2, r3, r9
 80059be:	d123      	bne.n	8005a08 <_scanf_float+0x3d0>
 80059c0:	9901      	ldr	r1, [sp, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	4640      	mov	r0, r8
 80059c6:	f002 fc2b 	bl	8008220 <_strtod_r>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	6821      	ldr	r1, [r4, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f011 0f02 	tst.w	r1, #2
 80059d4:	ec57 6b10 	vmov	r6, r7, d0
 80059d8:	f103 0204 	add.w	r2, r3, #4
 80059dc:	d01f      	beq.n	8005a1e <_scanf_float+0x3e6>
 80059de:	9903      	ldr	r1, [sp, #12]
 80059e0:	600a      	str	r2, [r1, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	e9c3 6700 	strd	r6, r7, [r3]
 80059e8:	68e3      	ldr	r3, [r4, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60e3      	str	r3, [r4, #12]
 80059ee:	e7d9      	b.n	80059a4 <_scanf_float+0x36c>
 80059f0:	9b04      	ldr	r3, [sp, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0e4      	beq.n	80059c0 <_scanf_float+0x388>
 80059f6:	9905      	ldr	r1, [sp, #20]
 80059f8:	230a      	movs	r3, #10
 80059fa:	3101      	adds	r1, #1
 80059fc:	4640      	mov	r0, r8
 80059fe:	f002 fc8f 	bl	8008320 <_strtol_r>
 8005a02:	9b04      	ldr	r3, [sp, #16]
 8005a04:	9e05      	ldr	r6, [sp, #20]
 8005a06:	1ac2      	subs	r2, r0, r3
 8005a08:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005a0c:	429e      	cmp	r6, r3
 8005a0e:	bf28      	it	cs
 8005a10:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005a14:	4910      	ldr	r1, [pc, #64]	@ (8005a58 <_scanf_float+0x420>)
 8005a16:	4630      	mov	r0, r6
 8005a18:	f000 f918 	bl	8005c4c <siprintf>
 8005a1c:	e7d0      	b.n	80059c0 <_scanf_float+0x388>
 8005a1e:	f011 0f04 	tst.w	r1, #4
 8005a22:	9903      	ldr	r1, [sp, #12]
 8005a24:	600a      	str	r2, [r1, #0]
 8005a26:	d1dc      	bne.n	80059e2 <_scanf_float+0x3aa>
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	4632      	mov	r2, r6
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	4630      	mov	r0, r6
 8005a30:	4639      	mov	r1, r7
 8005a32:	f7fb f883 	bl	8000b3c <__aeabi_dcmpun>
 8005a36:	b128      	cbz	r0, 8005a44 <_scanf_float+0x40c>
 8005a38:	4808      	ldr	r0, [pc, #32]	@ (8005a5c <_scanf_float+0x424>)
 8005a3a:	f000 f9eb 	bl	8005e14 <nanf>
 8005a3e:	ed85 0a00 	vstr	s0, [r5]
 8005a42:	e7d1      	b.n	80059e8 <_scanf_float+0x3b0>
 8005a44:	4630      	mov	r0, r6
 8005a46:	4639      	mov	r1, r7
 8005a48:	f7fb f8d6 	bl	8000bf8 <__aeabi_d2f>
 8005a4c:	6028      	str	r0, [r5, #0]
 8005a4e:	e7cb      	b.n	80059e8 <_scanf_float+0x3b0>
 8005a50:	f04f 0900 	mov.w	r9, #0
 8005a54:	e629      	b.n	80056aa <_scanf_float+0x72>
 8005a56:	bf00      	nop
 8005a58:	08009538 	.word	0x08009538
 8005a5c:	080098cd 	.word	0x080098cd

08005a60 <std>:
 8005a60:	2300      	movs	r3, #0
 8005a62:	b510      	push	{r4, lr}
 8005a64:	4604      	mov	r4, r0
 8005a66:	e9c0 3300 	strd	r3, r3, [r0]
 8005a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a6e:	6083      	str	r3, [r0, #8]
 8005a70:	8181      	strh	r1, [r0, #12]
 8005a72:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a74:	81c2      	strh	r2, [r0, #14]
 8005a76:	6183      	str	r3, [r0, #24]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	305c      	adds	r0, #92	@ 0x5c
 8005a7e:	f000 f948 	bl	8005d12 <memset>
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <std+0x58>)
 8005a84:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x5c>)
 8005a88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <std+0x60>)
 8005a8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <std+0x64>)
 8005a90:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <std+0x68>)
 8005a94:	6224      	str	r4, [r4, #32]
 8005a96:	429c      	cmp	r4, r3
 8005a98:	d006      	beq.n	8005aa8 <std+0x48>
 8005a9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a9e:	4294      	cmp	r4, r2
 8005aa0:	d002      	beq.n	8005aa8 <std+0x48>
 8005aa2:	33d0      	adds	r3, #208	@ 0xd0
 8005aa4:	429c      	cmp	r4, r3
 8005aa6:	d105      	bne.n	8005ab4 <std+0x54>
 8005aa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab0:	f000 b9ac 	b.w	8005e0c <__retarget_lock_init_recursive>
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08005c8d 	.word	0x08005c8d
 8005abc:	08005caf 	.word	0x08005caf
 8005ac0:	08005ce7 	.word	0x08005ce7
 8005ac4:	08005d0b 	.word	0x08005d0b
 8005ac8:	2000037c 	.word	0x2000037c

08005acc <stdio_exit_handler>:
 8005acc:	4a02      	ldr	r2, [pc, #8]	@ (8005ad8 <stdio_exit_handler+0xc>)
 8005ace:	4903      	ldr	r1, [pc, #12]	@ (8005adc <stdio_exit_handler+0x10>)
 8005ad0:	4803      	ldr	r0, [pc, #12]	@ (8005ae0 <stdio_exit_handler+0x14>)
 8005ad2:	f000 b869 	b.w	8005ba8 <_fwalk_sglue>
 8005ad6:	bf00      	nop
 8005ad8:	2000000c 	.word	0x2000000c
 8005adc:	080086dd 	.word	0x080086dd
 8005ae0:	2000001c 	.word	0x2000001c

08005ae4 <cleanup_stdio>:
 8005ae4:	6841      	ldr	r1, [r0, #4]
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b18 <cleanup_stdio+0x34>)
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	b510      	push	{r4, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	d001      	beq.n	8005af4 <cleanup_stdio+0x10>
 8005af0:	f002 fdf4 	bl	80086dc <_fflush_r>
 8005af4:	68a1      	ldr	r1, [r4, #8]
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <cleanup_stdio+0x38>)
 8005af8:	4299      	cmp	r1, r3
 8005afa:	d002      	beq.n	8005b02 <cleanup_stdio+0x1e>
 8005afc:	4620      	mov	r0, r4
 8005afe:	f002 fded 	bl	80086dc <_fflush_r>
 8005b02:	68e1      	ldr	r1, [r4, #12]
 8005b04:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <cleanup_stdio+0x3c>)
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d004      	beq.n	8005b14 <cleanup_stdio+0x30>
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b10:	f002 bde4 	b.w	80086dc <_fflush_r>
 8005b14:	bd10      	pop	{r4, pc}
 8005b16:	bf00      	nop
 8005b18:	2000037c 	.word	0x2000037c
 8005b1c:	200003e4 	.word	0x200003e4
 8005b20:	2000044c 	.word	0x2000044c

08005b24 <global_stdio_init.part.0>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <global_stdio_init.part.0+0x30>)
 8005b28:	4c0b      	ldr	r4, [pc, #44]	@ (8005b58 <global_stdio_init.part.0+0x34>)
 8005b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b5c <global_stdio_init.part.0+0x38>)
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	2200      	movs	r2, #0
 8005b32:	2104      	movs	r1, #4
 8005b34:	f7ff ff94 	bl	8005a60 <std>
 8005b38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	2109      	movs	r1, #9
 8005b40:	f7ff ff8e 	bl	8005a60 <std>
 8005b44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b48:	2202      	movs	r2, #2
 8005b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4e:	2112      	movs	r1, #18
 8005b50:	f7ff bf86 	b.w	8005a60 <std>
 8005b54:	200004b4 	.word	0x200004b4
 8005b58:	2000037c 	.word	0x2000037c
 8005b5c:	08005acd 	.word	0x08005acd

08005b60 <__sfp_lock_acquire>:
 8005b60:	4801      	ldr	r0, [pc, #4]	@ (8005b68 <__sfp_lock_acquire+0x8>)
 8005b62:	f000 b954 	b.w	8005e0e <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	200004bd 	.word	0x200004bd

08005b6c <__sfp_lock_release>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	@ (8005b74 <__sfp_lock_release+0x8>)
 8005b6e:	f000 b94f 	b.w	8005e10 <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	200004bd 	.word	0x200004bd

08005b78 <__sinit>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	f7ff fff0 	bl	8005b60 <__sfp_lock_acquire>
 8005b80:	6a23      	ldr	r3, [r4, #32]
 8005b82:	b11b      	cbz	r3, 8005b8c <__sinit+0x14>
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f7ff bff0 	b.w	8005b6c <__sfp_lock_release>
 8005b8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <__sinit+0x28>)
 8005b8e:	6223      	str	r3, [r4, #32]
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <__sinit+0x2c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f5      	bne.n	8005b84 <__sinit+0xc>
 8005b98:	f7ff ffc4 	bl	8005b24 <global_stdio_init.part.0>
 8005b9c:	e7f2      	b.n	8005b84 <__sinit+0xc>
 8005b9e:	bf00      	nop
 8005ba0:	08005ae5 	.word	0x08005ae5
 8005ba4:	200004b4 	.word	0x200004b4

08005ba8 <_fwalk_sglue>:
 8005ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bac:	4607      	mov	r7, r0
 8005bae:	4688      	mov	r8, r1
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bbc:	d505      	bpl.n	8005bca <_fwalk_sglue+0x22>
 8005bbe:	6824      	ldr	r4, [r4, #0]
 8005bc0:	2c00      	cmp	r4, #0
 8005bc2:	d1f7      	bne.n	8005bb4 <_fwalk_sglue+0xc>
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d907      	bls.n	8005be0 <_fwalk_sglue+0x38>
 8005bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	d003      	beq.n	8005be0 <_fwalk_sglue+0x38>
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	4306      	orrs	r6, r0
 8005be0:	3568      	adds	r5, #104	@ 0x68
 8005be2:	e7e9      	b.n	8005bb8 <_fwalk_sglue+0x10>

08005be4 <sniprintf>:
 8005be4:	b40c      	push	{r2, r3}
 8005be6:	b530      	push	{r4, r5, lr}
 8005be8:	4b17      	ldr	r3, [pc, #92]	@ (8005c48 <sniprintf+0x64>)
 8005bea:	1e0c      	subs	r4, r1, #0
 8005bec:	681d      	ldr	r5, [r3, #0]
 8005bee:	b09d      	sub	sp, #116	@ 0x74
 8005bf0:	da08      	bge.n	8005c04 <sniprintf+0x20>
 8005bf2:	238b      	movs	r3, #139	@ 0x8b
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfa:	b01d      	add	sp, #116	@ 0x74
 8005bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c00:	b002      	add	sp, #8
 8005c02:	4770      	bx	lr
 8005c04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c0c:	bf14      	ite	ne
 8005c0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c12:	4623      	moveq	r3, r4
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	9307      	str	r3, [sp, #28]
 8005c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c1c:	9002      	str	r0, [sp, #8]
 8005c1e:	9006      	str	r0, [sp, #24]
 8005c20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c26:	ab21      	add	r3, sp, #132	@ 0x84
 8005c28:	a902      	add	r1, sp, #8
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	f002 fbd5 	bl	80083dc <_svfiprintf_r>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	bfbc      	itt	lt
 8005c36:	238b      	movlt	r3, #139	@ 0x8b
 8005c38:	602b      	strlt	r3, [r5, #0]
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	d0dd      	beq.n	8005bfa <sniprintf+0x16>
 8005c3e:	9b02      	ldr	r3, [sp, #8]
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e7d9      	b.n	8005bfa <sniprintf+0x16>
 8005c46:	bf00      	nop
 8005c48:	20000018 	.word	0x20000018

08005c4c <siprintf>:
 8005c4c:	b40e      	push	{r1, r2, r3}
 8005c4e:	b500      	push	{lr}
 8005c50:	b09c      	sub	sp, #112	@ 0x70
 8005c52:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c54:	9002      	str	r0, [sp, #8]
 8005c56:	9006      	str	r0, [sp, #24]
 8005c58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c5c:	4809      	ldr	r0, [pc, #36]	@ (8005c84 <siprintf+0x38>)
 8005c5e:	9107      	str	r1, [sp, #28]
 8005c60:	9104      	str	r1, [sp, #16]
 8005c62:	4909      	ldr	r1, [pc, #36]	@ (8005c88 <siprintf+0x3c>)
 8005c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c68:	9105      	str	r1, [sp, #20]
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	a902      	add	r1, sp, #8
 8005c70:	f002 fbb4 	bl	80083dc <_svfiprintf_r>
 8005c74:	9b02      	ldr	r3, [sp, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	b01c      	add	sp, #112	@ 0x70
 8005c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c80:	b003      	add	sp, #12
 8005c82:	4770      	bx	lr
 8005c84:	20000018 	.word	0x20000018
 8005c88:	ffff0208 	.word	0xffff0208

08005c8c <__sread>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	460c      	mov	r4, r1
 8005c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c94:	f000 f86c 	bl	8005d70 <_read_r>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	bfab      	itete	ge
 8005c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8005ca0:	181b      	addge	r3, r3, r0
 8005ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ca6:	bfac      	ite	ge
 8005ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005caa:	81a3      	strhlt	r3, [r4, #12]
 8005cac:	bd10      	pop	{r4, pc}

08005cae <__swrite>:
 8005cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb2:	461f      	mov	r7, r3
 8005cb4:	898b      	ldrh	r3, [r1, #12]
 8005cb6:	05db      	lsls	r3, r3, #23
 8005cb8:	4605      	mov	r5, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	4616      	mov	r6, r2
 8005cbe:	d505      	bpl.n	8005ccc <__swrite+0x1e>
 8005cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f000 f840 	bl	8005d4c <_lseek_r>
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	4632      	mov	r2, r6
 8005cda:	463b      	mov	r3, r7
 8005cdc:	4628      	mov	r0, r5
 8005cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce2:	f000 b857 	b.w	8005d94 <_write_r>

08005ce6 <__sseek>:
 8005ce6:	b510      	push	{r4, lr}
 8005ce8:	460c      	mov	r4, r1
 8005cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cee:	f000 f82d 	bl	8005d4c <_lseek_r>
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	bf15      	itete	ne
 8005cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d02:	81a3      	strheq	r3, [r4, #12]
 8005d04:	bf18      	it	ne
 8005d06:	81a3      	strhne	r3, [r4, #12]
 8005d08:	bd10      	pop	{r4, pc}

08005d0a <__sclose>:
 8005d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0e:	f000 b80d 	b.w	8005d2c <_close_r>

08005d12 <memset>:
 8005d12:	4402      	add	r2, r0
 8005d14:	4603      	mov	r3, r0
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d100      	bne.n	8005d1c <memset+0xa>
 8005d1a:	4770      	bx	lr
 8005d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8005d20:	e7f9      	b.n	8005d16 <memset+0x4>
	...

08005d24 <_localeconv_r>:
 8005d24:	4800      	ldr	r0, [pc, #0]	@ (8005d28 <_localeconv_r+0x4>)
 8005d26:	4770      	bx	lr
 8005d28:	20000158 	.word	0x20000158

08005d2c <_close_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d06      	ldr	r5, [pc, #24]	@ (8005d48 <_close_r+0x1c>)
 8005d30:	2300      	movs	r3, #0
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	602b      	str	r3, [r5, #0]
 8005d38:	f7fb fdcc 	bl	80018d4 <_close>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_close_r+0x1a>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_close_r+0x1a>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	200004b8 	.word	0x200004b8

08005d4c <_lseek_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d07      	ldr	r5, [pc, #28]	@ (8005d6c <_lseek_r+0x20>)
 8005d50:	4604      	mov	r4, r0
 8005d52:	4608      	mov	r0, r1
 8005d54:	4611      	mov	r1, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	602a      	str	r2, [r5, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f7fb fde1 	bl	8001922 <_lseek>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_lseek_r+0x1e>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_lseek_r+0x1e>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	200004b8 	.word	0x200004b8

08005d70 <_read_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d07      	ldr	r5, [pc, #28]	@ (8005d90 <_read_r+0x20>)
 8005d74:	4604      	mov	r4, r0
 8005d76:	4608      	mov	r0, r1
 8005d78:	4611      	mov	r1, r2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7fb fd6f 	bl	8001862 <_read>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_read_r+0x1e>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_read_r+0x1e>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	200004b8 	.word	0x200004b8

08005d94 <_write_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d07      	ldr	r5, [pc, #28]	@ (8005db4 <_write_r+0x20>)
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fb fd7a 	bl	800189c <_write>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_write_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_write_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200004b8 	.word	0x200004b8

08005db8 <__errno>:
 8005db8:	4b01      	ldr	r3, [pc, #4]	@ (8005dc0 <__errno+0x8>)
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000018 	.word	0x20000018

08005dc4 <__libc_init_array>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8005dfc <__libc_init_array+0x38>)
 8005dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8005e00 <__libc_init_array+0x3c>)
 8005dca:	1b64      	subs	r4, r4, r5
 8005dcc:	10a4      	asrs	r4, r4, #2
 8005dce:	2600      	movs	r6, #0
 8005dd0:	42a6      	cmp	r6, r4
 8005dd2:	d109      	bne.n	8005de8 <__libc_init_array+0x24>
 8005dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8005e04 <__libc_init_array+0x40>)
 8005dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8005e08 <__libc_init_array+0x44>)
 8005dd8:	f003 fb70 	bl	80094bc <_init>
 8005ddc:	1b64      	subs	r4, r4, r5
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	2600      	movs	r6, #0
 8005de2:	42a6      	cmp	r6, r4
 8005de4:	d105      	bne.n	8005df2 <__libc_init_array+0x2e>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dec:	4798      	blx	r3
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7ee      	b.n	8005dd0 <__libc_init_array+0xc>
 8005df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df6:	4798      	blx	r3
 8005df8:	3601      	adds	r6, #1
 8005dfa:	e7f2      	b.n	8005de2 <__libc_init_array+0x1e>
 8005dfc:	08009938 	.word	0x08009938
 8005e00:	08009938 	.word	0x08009938
 8005e04:	08009938 	.word	0x08009938
 8005e08:	0800993c 	.word	0x0800993c

08005e0c <__retarget_lock_init_recursive>:
 8005e0c:	4770      	bx	lr

08005e0e <__retarget_lock_acquire_recursive>:
 8005e0e:	4770      	bx	lr

08005e10 <__retarget_lock_release_recursive>:
 8005e10:	4770      	bx	lr
	...

08005e14 <nanf>:
 8005e14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005e1c <nanf+0x8>
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	7fc00000 	.word	0x7fc00000

08005e20 <quorem>:
 8005e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	6903      	ldr	r3, [r0, #16]
 8005e26:	690c      	ldr	r4, [r1, #16]
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	4607      	mov	r7, r0
 8005e2c:	db7e      	blt.n	8005f2c <quorem+0x10c>
 8005e2e:	3c01      	subs	r4, #1
 8005e30:	f101 0814 	add.w	r8, r1, #20
 8005e34:	00a3      	lsls	r3, r4, #2
 8005e36:	f100 0514 	add.w	r5, r0, #20
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e52:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e56:	d32e      	bcc.n	8005eb6 <quorem+0x96>
 8005e58:	f04f 0a00 	mov.w	sl, #0
 8005e5c:	46c4      	mov	ip, r8
 8005e5e:	46ae      	mov	lr, r5
 8005e60:	46d3      	mov	fp, sl
 8005e62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e66:	b298      	uxth	r0, r3
 8005e68:	fb06 a000 	mla	r0, r6, r0, sl
 8005e6c:	0c02      	lsrs	r2, r0, #16
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	fb06 2303 	mla	r3, r6, r3, r2
 8005e74:	f8de 2000 	ldr.w	r2, [lr]
 8005e78:	b280      	uxth	r0, r0
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	1a12      	subs	r2, r2, r0
 8005e7e:	445a      	add	r2, fp
 8005e80:	f8de 0000 	ldr.w	r0, [lr]
 8005e84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e92:	b292      	uxth	r2, r2
 8005e94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e98:	45e1      	cmp	r9, ip
 8005e9a:	f84e 2b04 	str.w	r2, [lr], #4
 8005e9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ea2:	d2de      	bcs.n	8005e62 <quorem+0x42>
 8005ea4:	9b00      	ldr	r3, [sp, #0]
 8005ea6:	58eb      	ldr	r3, [r5, r3]
 8005ea8:	b92b      	cbnz	r3, 8005eb6 <quorem+0x96>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	d32f      	bcc.n	8005f14 <quorem+0xf4>
 8005eb4:	613c      	str	r4, [r7, #16]
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f001 f9c2 	bl	8007240 <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	db25      	blt.n	8005f0c <quorem+0xec>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ec8:	f8d1 c000 	ldr.w	ip, [r1]
 8005ecc:	fa1f fe82 	uxth.w	lr, r2
 8005ed0:	fa1f f38c 	uxth.w	r3, ip
 8005ed4:	eba3 030e 	sub.w	r3, r3, lr
 8005ed8:	4403      	add	r3, r0
 8005eda:	0c12      	lsrs	r2, r2, #16
 8005edc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ee0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eea:	45c1      	cmp	r9, r8
 8005eec:	f841 3b04 	str.w	r3, [r1], #4
 8005ef0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ef4:	d2e6      	bcs.n	8005ec4 <quorem+0xa4>
 8005ef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005efa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005efe:	b922      	cbnz	r2, 8005f0a <quorem+0xea>
 8005f00:	3b04      	subs	r3, #4
 8005f02:	429d      	cmp	r5, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	d30b      	bcc.n	8005f20 <quorem+0x100>
 8005f08:	613c      	str	r4, [r7, #16]
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	b003      	add	sp, #12
 8005f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	3b04      	subs	r3, #4
 8005f18:	2a00      	cmp	r2, #0
 8005f1a:	d1cb      	bne.n	8005eb4 <quorem+0x94>
 8005f1c:	3c01      	subs	r4, #1
 8005f1e:	e7c6      	b.n	8005eae <quorem+0x8e>
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	3b04      	subs	r3, #4
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	d1ef      	bne.n	8005f08 <quorem+0xe8>
 8005f28:	3c01      	subs	r4, #1
 8005f2a:	e7ea      	b.n	8005f02 <quorem+0xe2>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	e7ee      	b.n	8005f0e <quorem+0xee>

08005f30 <_dtoa_r>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	69c7      	ldr	r7, [r0, #28]
 8005f36:	b099      	sub	sp, #100	@ 0x64
 8005f38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f3c:	ec55 4b10 	vmov	r4, r5, d0
 8005f40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005f42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f44:	4683      	mov	fp, r0
 8005f46:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f4a:	b97f      	cbnz	r7, 8005f6c <_dtoa_r+0x3c>
 8005f4c:	2010      	movs	r0, #16
 8005f4e:	f000 fdfd 	bl	8006b4c <malloc>
 8005f52:	4602      	mov	r2, r0
 8005f54:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f58:	b920      	cbnz	r0, 8005f64 <_dtoa_r+0x34>
 8005f5a:	4ba7      	ldr	r3, [pc, #668]	@ (80061f8 <_dtoa_r+0x2c8>)
 8005f5c:	21ef      	movs	r1, #239	@ 0xef
 8005f5e:	48a7      	ldr	r0, [pc, #668]	@ (80061fc <_dtoa_r+0x2cc>)
 8005f60:	f002 fc36 	bl	80087d0 <__assert_func>
 8005f64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f68:	6007      	str	r7, [r0, #0]
 8005f6a:	60c7      	str	r7, [r0, #12]
 8005f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	b159      	cbz	r1, 8005f8c <_dtoa_r+0x5c>
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	604a      	str	r2, [r1, #4]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4093      	lsls	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
 8005f7e:	4658      	mov	r0, fp
 8005f80:	f000 feda 	bl	8006d38 <_Bfree>
 8005f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	1e2b      	subs	r3, r5, #0
 8005f8e:	bfb9      	ittee	lt
 8005f90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f94:	9303      	strlt	r3, [sp, #12]
 8005f96:	2300      	movge	r3, #0
 8005f98:	6033      	strge	r3, [r6, #0]
 8005f9a:	9f03      	ldr	r7, [sp, #12]
 8005f9c:	4b98      	ldr	r3, [pc, #608]	@ (8006200 <_dtoa_r+0x2d0>)
 8005f9e:	bfbc      	itt	lt
 8005fa0:	2201      	movlt	r2, #1
 8005fa2:	6032      	strlt	r2, [r6, #0]
 8005fa4:	43bb      	bics	r3, r7
 8005fa6:	d112      	bne.n	8005fce <_dtoa_r+0x9e>
 8005fa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005faa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fb4:	4323      	orrs	r3, r4
 8005fb6:	f000 854d 	beq.w	8006a54 <_dtoa_r+0xb24>
 8005fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006214 <_dtoa_r+0x2e4>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 854f 	beq.w	8006a64 <_dtoa_r+0xb34>
 8005fc6:	f10a 0303 	add.w	r3, sl, #3
 8005fca:	f000 bd49 	b.w	8006a60 <_dtoa_r+0xb30>
 8005fce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	ec51 0b17 	vmov	r0, r1, d7
 8005fd8:	2300      	movs	r3, #0
 8005fda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005fde:	f7fa fd7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	b158      	cbz	r0, 8005ffe <_dtoa_r+0xce>
 8005fe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005fe8:	2301      	movs	r3, #1
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fee:	b113      	cbz	r3, 8005ff6 <_dtoa_r+0xc6>
 8005ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ff2:	4b84      	ldr	r3, [pc, #528]	@ (8006204 <_dtoa_r+0x2d4>)
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006218 <_dtoa_r+0x2e8>
 8005ffa:	f000 bd33 	b.w	8006a64 <_dtoa_r+0xb34>
 8005ffe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006002:	aa16      	add	r2, sp, #88	@ 0x58
 8006004:	a917      	add	r1, sp, #92	@ 0x5c
 8006006:	4658      	mov	r0, fp
 8006008:	f001 fa3a 	bl	8007480 <__d2b>
 800600c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006010:	4681      	mov	r9, r0
 8006012:	2e00      	cmp	r6, #0
 8006014:	d077      	beq.n	8006106 <_dtoa_r+0x1d6>
 8006016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006018:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800601c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006024:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006028:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800602c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006030:	4619      	mov	r1, r3
 8006032:	2200      	movs	r2, #0
 8006034:	4b74      	ldr	r3, [pc, #464]	@ (8006208 <_dtoa_r+0x2d8>)
 8006036:	f7fa f92f 	bl	8000298 <__aeabi_dsub>
 800603a:	a369      	add	r3, pc, #420	@ (adr r3, 80061e0 <_dtoa_r+0x2b0>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f7fa fae2 	bl	8000608 <__aeabi_dmul>
 8006044:	a368      	add	r3, pc, #416	@ (adr r3, 80061e8 <_dtoa_r+0x2b8>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f927 	bl	800029c <__adddf3>
 800604e:	4604      	mov	r4, r0
 8006050:	4630      	mov	r0, r6
 8006052:	460d      	mov	r5, r1
 8006054:	f7fa fa6e 	bl	8000534 <__aeabi_i2d>
 8006058:	a365      	add	r3, pc, #404	@ (adr r3, 80061f0 <_dtoa_r+0x2c0>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f7fa fad3 	bl	8000608 <__aeabi_dmul>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4620      	mov	r0, r4
 8006068:	4629      	mov	r1, r5
 800606a:	f7fa f917 	bl	800029c <__adddf3>
 800606e:	4604      	mov	r4, r0
 8006070:	460d      	mov	r5, r1
 8006072:	f7fa fd79 	bl	8000b68 <__aeabi_d2iz>
 8006076:	2200      	movs	r2, #0
 8006078:	4607      	mov	r7, r0
 800607a:	2300      	movs	r3, #0
 800607c:	4620      	mov	r0, r4
 800607e:	4629      	mov	r1, r5
 8006080:	f7fa fd34 	bl	8000aec <__aeabi_dcmplt>
 8006084:	b140      	cbz	r0, 8006098 <_dtoa_r+0x168>
 8006086:	4638      	mov	r0, r7
 8006088:	f7fa fa54 	bl	8000534 <__aeabi_i2d>
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	f7fa fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006094:	b900      	cbnz	r0, 8006098 <_dtoa_r+0x168>
 8006096:	3f01      	subs	r7, #1
 8006098:	2f16      	cmp	r7, #22
 800609a:	d851      	bhi.n	8006140 <_dtoa_r+0x210>
 800609c:	4b5b      	ldr	r3, [pc, #364]	@ (800620c <_dtoa_r+0x2dc>)
 800609e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060aa:	f7fa fd1f 	bl	8000aec <__aeabi_dcmplt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d048      	beq.n	8006144 <_dtoa_r+0x214>
 80060b2:	3f01      	subs	r7, #1
 80060b4:	2300      	movs	r3, #0
 80060b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80060b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80060ba:	1b9b      	subs	r3, r3, r6
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	bf44      	itt	mi
 80060c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80060c4:	2300      	movmi	r3, #0
 80060c6:	9208      	str	r2, [sp, #32]
 80060c8:	bf54      	ite	pl
 80060ca:	f04f 0800 	movpl.w	r8, #0
 80060ce:	9308      	strmi	r3, [sp, #32]
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	db39      	blt.n	8006148 <_dtoa_r+0x218>
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80060d8:	443b      	add	r3, r7
 80060da:	9308      	str	r3, [sp, #32]
 80060dc:	2300      	movs	r3, #0
 80060de:	930a      	str	r3, [sp, #40]	@ 0x28
 80060e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e2:	2b09      	cmp	r3, #9
 80060e4:	d864      	bhi.n	80061b0 <_dtoa_r+0x280>
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	bfc4      	itt	gt
 80060ea:	3b04      	subgt	r3, #4
 80060ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80060ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f0:	f1a3 0302 	sub.w	r3, r3, #2
 80060f4:	bfcc      	ite	gt
 80060f6:	2400      	movgt	r4, #0
 80060f8:	2401      	movle	r4, #1
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d863      	bhi.n	80061c6 <_dtoa_r+0x296>
 80060fe:	e8df f003 	tbb	[pc, r3]
 8006102:	372a      	.short	0x372a
 8006104:	5535      	.short	0x5535
 8006106:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800610a:	441e      	add	r6, r3
 800610c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006110:	2b20      	cmp	r3, #32
 8006112:	bfc1      	itttt	gt
 8006114:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006118:	409f      	lslgt	r7, r3
 800611a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800611e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006122:	bfd6      	itet	le
 8006124:	f1c3 0320 	rsble	r3, r3, #32
 8006128:	ea47 0003 	orrgt.w	r0, r7, r3
 800612c:	fa04 f003 	lslle.w	r0, r4, r3
 8006130:	f7fa f9f0 	bl	8000514 <__aeabi_ui2d>
 8006134:	2201      	movs	r2, #1
 8006136:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800613a:	3e01      	subs	r6, #1
 800613c:	9214      	str	r2, [sp, #80]	@ 0x50
 800613e:	e777      	b.n	8006030 <_dtoa_r+0x100>
 8006140:	2301      	movs	r3, #1
 8006142:	e7b8      	b.n	80060b6 <_dtoa_r+0x186>
 8006144:	9012      	str	r0, [sp, #72]	@ 0x48
 8006146:	e7b7      	b.n	80060b8 <_dtoa_r+0x188>
 8006148:	427b      	negs	r3, r7
 800614a:	930a      	str	r3, [sp, #40]	@ 0x28
 800614c:	2300      	movs	r3, #0
 800614e:	eba8 0807 	sub.w	r8, r8, r7
 8006152:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006154:	e7c4      	b.n	80060e0 <_dtoa_r+0x1b0>
 8006156:	2300      	movs	r3, #0
 8006158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800615a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	dc35      	bgt.n	80061cc <_dtoa_r+0x29c>
 8006160:	2301      	movs	r3, #1
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	9307      	str	r3, [sp, #28]
 8006166:	461a      	mov	r2, r3
 8006168:	920e      	str	r2, [sp, #56]	@ 0x38
 800616a:	e00b      	b.n	8006184 <_dtoa_r+0x254>
 800616c:	2301      	movs	r3, #1
 800616e:	e7f3      	b.n	8006158 <_dtoa_r+0x228>
 8006170:	2300      	movs	r3, #0
 8006172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	bfb8      	it	lt
 8006182:	2301      	movlt	r3, #1
 8006184:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006188:	2100      	movs	r1, #0
 800618a:	2204      	movs	r2, #4
 800618c:	f102 0514 	add.w	r5, r2, #20
 8006190:	429d      	cmp	r5, r3
 8006192:	d91f      	bls.n	80061d4 <_dtoa_r+0x2a4>
 8006194:	6041      	str	r1, [r0, #4]
 8006196:	4658      	mov	r0, fp
 8006198:	f000 fd8e 	bl	8006cb8 <_Balloc>
 800619c:	4682      	mov	sl, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	d13c      	bne.n	800621c <_dtoa_r+0x2ec>
 80061a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006210 <_dtoa_r+0x2e0>)
 80061a4:	4602      	mov	r2, r0
 80061a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80061aa:	e6d8      	b.n	8005f5e <_dtoa_r+0x2e>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e7e0      	b.n	8006172 <_dtoa_r+0x242>
 80061b0:	2401      	movs	r4, #1
 80061b2:	2300      	movs	r3, #0
 80061b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	9307      	str	r3, [sp, #28]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2312      	movs	r3, #18
 80061c4:	e7d0      	b.n	8006168 <_dtoa_r+0x238>
 80061c6:	2301      	movs	r3, #1
 80061c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061ca:	e7f5      	b.n	80061b8 <_dtoa_r+0x288>
 80061cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	9307      	str	r3, [sp, #28]
 80061d2:	e7d7      	b.n	8006184 <_dtoa_r+0x254>
 80061d4:	3101      	adds	r1, #1
 80061d6:	0052      	lsls	r2, r2, #1
 80061d8:	e7d8      	b.n	800618c <_dtoa_r+0x25c>
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w
 80061e0:	636f4361 	.word	0x636f4361
 80061e4:	3fd287a7 	.word	0x3fd287a7
 80061e8:	8b60c8b3 	.word	0x8b60c8b3
 80061ec:	3fc68a28 	.word	0x3fc68a28
 80061f0:	509f79fb 	.word	0x509f79fb
 80061f4:	3fd34413 	.word	0x3fd34413
 80061f8:	0800954a 	.word	0x0800954a
 80061fc:	08009561 	.word	0x08009561
 8006200:	7ff00000 	.word	0x7ff00000
 8006204:	08009515 	.word	0x08009515
 8006208:	3ff80000 	.word	0x3ff80000
 800620c:	08009658 	.word	0x08009658
 8006210:	080095b9 	.word	0x080095b9
 8006214:	08009546 	.word	0x08009546
 8006218:	08009514 	.word	0x08009514
 800621c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	9b07      	ldr	r3, [sp, #28]
 8006224:	2b0e      	cmp	r3, #14
 8006226:	f200 80a4 	bhi.w	8006372 <_dtoa_r+0x442>
 800622a:	2c00      	cmp	r4, #0
 800622c:	f000 80a1 	beq.w	8006372 <_dtoa_r+0x442>
 8006230:	2f00      	cmp	r7, #0
 8006232:	dd33      	ble.n	800629c <_dtoa_r+0x36c>
 8006234:	4bad      	ldr	r3, [pc, #692]	@ (80064ec <_dtoa_r+0x5bc>)
 8006236:	f007 020f 	and.w	r2, r7, #15
 800623a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800623e:	ed93 7b00 	vldr	d7, [r3]
 8006242:	05f8      	lsls	r0, r7, #23
 8006244:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006248:	ea4f 1427 	mov.w	r4, r7, asr #4
 800624c:	d516      	bpl.n	800627c <_dtoa_r+0x34c>
 800624e:	4ba8      	ldr	r3, [pc, #672]	@ (80064f0 <_dtoa_r+0x5c0>)
 8006250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006258:	f7fa fb00 	bl	800085c <__aeabi_ddiv>
 800625c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006260:	f004 040f 	and.w	r4, r4, #15
 8006264:	2603      	movs	r6, #3
 8006266:	4da2      	ldr	r5, [pc, #648]	@ (80064f0 <_dtoa_r+0x5c0>)
 8006268:	b954      	cbnz	r4, 8006280 <_dtoa_r+0x350>
 800626a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800626e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006272:	f7fa faf3 	bl	800085c <__aeabi_ddiv>
 8006276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800627a:	e028      	b.n	80062ce <_dtoa_r+0x39e>
 800627c:	2602      	movs	r6, #2
 800627e:	e7f2      	b.n	8006266 <_dtoa_r+0x336>
 8006280:	07e1      	lsls	r1, r4, #31
 8006282:	d508      	bpl.n	8006296 <_dtoa_r+0x366>
 8006284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800628c:	f7fa f9bc 	bl	8000608 <__aeabi_dmul>
 8006290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006294:	3601      	adds	r6, #1
 8006296:	1064      	asrs	r4, r4, #1
 8006298:	3508      	adds	r5, #8
 800629a:	e7e5      	b.n	8006268 <_dtoa_r+0x338>
 800629c:	f000 80d2 	beq.w	8006444 <_dtoa_r+0x514>
 80062a0:	427c      	negs	r4, r7
 80062a2:	4b92      	ldr	r3, [pc, #584]	@ (80064ec <_dtoa_r+0x5bc>)
 80062a4:	4d92      	ldr	r5, [pc, #584]	@ (80064f0 <_dtoa_r+0x5c0>)
 80062a6:	f004 020f 	and.w	r2, r4, #15
 80062aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062b6:	f7fa f9a7 	bl	8000608 <__aeabi_dmul>
 80062ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062be:	1124      	asrs	r4, r4, #4
 80062c0:	2300      	movs	r3, #0
 80062c2:	2602      	movs	r6, #2
 80062c4:	2c00      	cmp	r4, #0
 80062c6:	f040 80b2 	bne.w	800642e <_dtoa_r+0x4fe>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1d3      	bne.n	8006276 <_dtoa_r+0x346>
 80062ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80b7 	beq.w	8006448 <_dtoa_r+0x518>
 80062da:	4b86      	ldr	r3, [pc, #536]	@ (80064f4 <_dtoa_r+0x5c4>)
 80062dc:	2200      	movs	r2, #0
 80062de:	4620      	mov	r0, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7fa fc03 	bl	8000aec <__aeabi_dcmplt>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	f000 80ae 	beq.w	8006448 <_dtoa_r+0x518>
 80062ec:	9b07      	ldr	r3, [sp, #28]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 80aa 	beq.w	8006448 <_dtoa_r+0x518>
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd37      	ble.n	800636a <_dtoa_r+0x43a>
 80062fa:	1e7b      	subs	r3, r7, #1
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	4620      	mov	r0, r4
 8006300:	4b7d      	ldr	r3, [pc, #500]	@ (80064f8 <_dtoa_r+0x5c8>)
 8006302:	2200      	movs	r2, #0
 8006304:	4629      	mov	r1, r5
 8006306:	f7fa f97f 	bl	8000608 <__aeabi_dmul>
 800630a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800630e:	9c00      	ldr	r4, [sp, #0]
 8006310:	3601      	adds	r6, #1
 8006312:	4630      	mov	r0, r6
 8006314:	f7fa f90e 	bl	8000534 <__aeabi_i2d>
 8006318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800631c:	f7fa f974 	bl	8000608 <__aeabi_dmul>
 8006320:	4b76      	ldr	r3, [pc, #472]	@ (80064fc <_dtoa_r+0x5cc>)
 8006322:	2200      	movs	r2, #0
 8006324:	f7f9 ffba 	bl	800029c <__adddf3>
 8006328:	4605      	mov	r5, r0
 800632a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800632e:	2c00      	cmp	r4, #0
 8006330:	f040 808d 	bne.w	800644e <_dtoa_r+0x51e>
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	4b71      	ldr	r3, [pc, #452]	@ (8006500 <_dtoa_r+0x5d0>)
 800633a:	2200      	movs	r2, #0
 800633c:	f7f9 ffac 	bl	8000298 <__aeabi_dsub>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006348:	462a      	mov	r2, r5
 800634a:	4633      	mov	r3, r6
 800634c:	f7fa fbec 	bl	8000b28 <__aeabi_dcmpgt>
 8006350:	2800      	cmp	r0, #0
 8006352:	f040 828b 	bne.w	800686c <_dtoa_r+0x93c>
 8006356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800635a:	462a      	mov	r2, r5
 800635c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006360:	f7fa fbc4 	bl	8000aec <__aeabi_dcmplt>
 8006364:	2800      	cmp	r0, #0
 8006366:	f040 8128 	bne.w	80065ba <_dtoa_r+0x68a>
 800636a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800636e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006374:	2b00      	cmp	r3, #0
 8006376:	f2c0 815a 	blt.w	800662e <_dtoa_r+0x6fe>
 800637a:	2f0e      	cmp	r7, #14
 800637c:	f300 8157 	bgt.w	800662e <_dtoa_r+0x6fe>
 8006380:	4b5a      	ldr	r3, [pc, #360]	@ (80064ec <_dtoa_r+0x5bc>)
 8006382:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006386:	ed93 7b00 	vldr	d7, [r3]
 800638a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	ed8d 7b00 	vstr	d7, [sp]
 8006392:	da03      	bge.n	800639c <_dtoa_r+0x46c>
 8006394:	9b07      	ldr	r3, [sp, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f340 8101 	ble.w	800659e <_dtoa_r+0x66e>
 800639c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063a0:	4656      	mov	r6, sl
 80063a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063a6:	4620      	mov	r0, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7fa fa57 	bl	800085c <__aeabi_ddiv>
 80063ae:	f7fa fbdb 	bl	8000b68 <__aeabi_d2iz>
 80063b2:	4680      	mov	r8, r0
 80063b4:	f7fa f8be 	bl	8000534 <__aeabi_i2d>
 80063b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063bc:	f7fa f924 	bl	8000608 <__aeabi_dmul>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80063cc:	f7f9 ff64 	bl	8000298 <__aeabi_dsub>
 80063d0:	f806 4b01 	strb.w	r4, [r6], #1
 80063d4:	9d07      	ldr	r5, [sp, #28]
 80063d6:	eba6 040a 	sub.w	r4, r6, sl
 80063da:	42a5      	cmp	r5, r4
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	f040 8117 	bne.w	8006612 <_dtoa_r+0x6e2>
 80063e4:	f7f9 ff5a 	bl	800029c <__adddf3>
 80063e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ec:	4604      	mov	r4, r0
 80063ee:	460d      	mov	r5, r1
 80063f0:	f7fa fb9a 	bl	8000b28 <__aeabi_dcmpgt>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 80f9 	bne.w	80065ec <_dtoa_r+0x6bc>
 80063fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063fe:	4620      	mov	r0, r4
 8006400:	4629      	mov	r1, r5
 8006402:	f7fa fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006406:	b118      	cbz	r0, 8006410 <_dtoa_r+0x4e0>
 8006408:	f018 0f01 	tst.w	r8, #1
 800640c:	f040 80ee 	bne.w	80065ec <_dtoa_r+0x6bc>
 8006410:	4649      	mov	r1, r9
 8006412:	4658      	mov	r0, fp
 8006414:	f000 fc90 	bl	8006d38 <_Bfree>
 8006418:	2300      	movs	r3, #0
 800641a:	7033      	strb	r3, [r6, #0]
 800641c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800641e:	3701      	adds	r7, #1
 8006420:	601f      	str	r7, [r3, #0]
 8006422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 831d 	beq.w	8006a64 <_dtoa_r+0xb34>
 800642a:	601e      	str	r6, [r3, #0]
 800642c:	e31a      	b.n	8006a64 <_dtoa_r+0xb34>
 800642e:	07e2      	lsls	r2, r4, #31
 8006430:	d505      	bpl.n	800643e <_dtoa_r+0x50e>
 8006432:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006436:	f7fa f8e7 	bl	8000608 <__aeabi_dmul>
 800643a:	3601      	adds	r6, #1
 800643c:	2301      	movs	r3, #1
 800643e:	1064      	asrs	r4, r4, #1
 8006440:	3508      	adds	r5, #8
 8006442:	e73f      	b.n	80062c4 <_dtoa_r+0x394>
 8006444:	2602      	movs	r6, #2
 8006446:	e742      	b.n	80062ce <_dtoa_r+0x39e>
 8006448:	9c07      	ldr	r4, [sp, #28]
 800644a:	9704      	str	r7, [sp, #16]
 800644c:	e761      	b.n	8006312 <_dtoa_r+0x3e2>
 800644e:	4b27      	ldr	r3, [pc, #156]	@ (80064ec <_dtoa_r+0x5bc>)
 8006450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006456:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800645a:	4454      	add	r4, sl
 800645c:	2900      	cmp	r1, #0
 800645e:	d053      	beq.n	8006508 <_dtoa_r+0x5d8>
 8006460:	4928      	ldr	r1, [pc, #160]	@ (8006504 <_dtoa_r+0x5d4>)
 8006462:	2000      	movs	r0, #0
 8006464:	f7fa f9fa 	bl	800085c <__aeabi_ddiv>
 8006468:	4633      	mov	r3, r6
 800646a:	462a      	mov	r2, r5
 800646c:	f7f9 ff14 	bl	8000298 <__aeabi_dsub>
 8006470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006474:	4656      	mov	r6, sl
 8006476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800647a:	f7fa fb75 	bl	8000b68 <__aeabi_d2iz>
 800647e:	4605      	mov	r5, r0
 8006480:	f7fa f858 	bl	8000534 <__aeabi_i2d>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648c:	f7f9 ff04 	bl	8000298 <__aeabi_dsub>
 8006490:	3530      	adds	r5, #48	@ 0x30
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800649a:	f806 5b01 	strb.w	r5, [r6], #1
 800649e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064a2:	f7fa fb23 	bl	8000aec <__aeabi_dcmplt>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d171      	bne.n	800658e <_dtoa_r+0x65e>
 80064aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064ae:	4911      	ldr	r1, [pc, #68]	@ (80064f4 <_dtoa_r+0x5c4>)
 80064b0:	2000      	movs	r0, #0
 80064b2:	f7f9 fef1 	bl	8000298 <__aeabi_dsub>
 80064b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064ba:	f7fa fb17 	bl	8000aec <__aeabi_dcmplt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f040 8095 	bne.w	80065ee <_dtoa_r+0x6be>
 80064c4:	42a6      	cmp	r6, r4
 80064c6:	f43f af50 	beq.w	800636a <_dtoa_r+0x43a>
 80064ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064ce:	4b0a      	ldr	r3, [pc, #40]	@ (80064f8 <_dtoa_r+0x5c8>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	f7fa f899 	bl	8000608 <__aeabi_dmul>
 80064d6:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <_dtoa_r+0x5c8>)
 80064d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064dc:	2200      	movs	r2, #0
 80064de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e2:	f7fa f891 	bl	8000608 <__aeabi_dmul>
 80064e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ea:	e7c4      	b.n	8006476 <_dtoa_r+0x546>
 80064ec:	08009658 	.word	0x08009658
 80064f0:	08009630 	.word	0x08009630
 80064f4:	3ff00000 	.word	0x3ff00000
 80064f8:	40240000 	.word	0x40240000
 80064fc:	401c0000 	.word	0x401c0000
 8006500:	40140000 	.word	0x40140000
 8006504:	3fe00000 	.word	0x3fe00000
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	f7fa f87c 	bl	8000608 <__aeabi_dmul>
 8006510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006514:	9415      	str	r4, [sp, #84]	@ 0x54
 8006516:	4656      	mov	r6, sl
 8006518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651c:	f7fa fb24 	bl	8000b68 <__aeabi_d2iz>
 8006520:	4605      	mov	r5, r0
 8006522:	f7fa f807 	bl	8000534 <__aeabi_i2d>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652e:	f7f9 feb3 	bl	8000298 <__aeabi_dsub>
 8006532:	3530      	adds	r5, #48	@ 0x30
 8006534:	f806 5b01 	strb.w	r5, [r6], #1
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	42a6      	cmp	r6, r4
 800653e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	d124      	bne.n	8006592 <_dtoa_r+0x662>
 8006548:	4bac      	ldr	r3, [pc, #688]	@ (80067fc <_dtoa_r+0x8cc>)
 800654a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800654e:	f7f9 fea5 	bl	800029c <__adddf3>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800655a:	f7fa fae5 	bl	8000b28 <__aeabi_dcmpgt>
 800655e:	2800      	cmp	r0, #0
 8006560:	d145      	bne.n	80065ee <_dtoa_r+0x6be>
 8006562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006566:	49a5      	ldr	r1, [pc, #660]	@ (80067fc <_dtoa_r+0x8cc>)
 8006568:	2000      	movs	r0, #0
 800656a:	f7f9 fe95 	bl	8000298 <__aeabi_dsub>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006576:	f7fa fab9 	bl	8000aec <__aeabi_dcmplt>
 800657a:	2800      	cmp	r0, #0
 800657c:	f43f aef5 	beq.w	800636a <_dtoa_r+0x43a>
 8006580:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006582:	1e73      	subs	r3, r6, #1
 8006584:	9315      	str	r3, [sp, #84]	@ 0x54
 8006586:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800658a:	2b30      	cmp	r3, #48	@ 0x30
 800658c:	d0f8      	beq.n	8006580 <_dtoa_r+0x650>
 800658e:	9f04      	ldr	r7, [sp, #16]
 8006590:	e73e      	b.n	8006410 <_dtoa_r+0x4e0>
 8006592:	4b9b      	ldr	r3, [pc, #620]	@ (8006800 <_dtoa_r+0x8d0>)
 8006594:	f7fa f838 	bl	8000608 <__aeabi_dmul>
 8006598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800659c:	e7bc      	b.n	8006518 <_dtoa_r+0x5e8>
 800659e:	d10c      	bne.n	80065ba <_dtoa_r+0x68a>
 80065a0:	4b98      	ldr	r3, [pc, #608]	@ (8006804 <_dtoa_r+0x8d4>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a8:	f7fa f82e 	bl	8000608 <__aeabi_dmul>
 80065ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065b0:	f7fa fab0 	bl	8000b14 <__aeabi_dcmpge>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f000 8157 	beq.w	8006868 <_dtoa_r+0x938>
 80065ba:	2400      	movs	r4, #0
 80065bc:	4625      	mov	r5, r4
 80065be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065c0:	43db      	mvns	r3, r3
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	4656      	mov	r6, sl
 80065c6:	2700      	movs	r7, #0
 80065c8:	4621      	mov	r1, r4
 80065ca:	4658      	mov	r0, fp
 80065cc:	f000 fbb4 	bl	8006d38 <_Bfree>
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	d0dc      	beq.n	800658e <_dtoa_r+0x65e>
 80065d4:	b12f      	cbz	r7, 80065e2 <_dtoa_r+0x6b2>
 80065d6:	42af      	cmp	r7, r5
 80065d8:	d003      	beq.n	80065e2 <_dtoa_r+0x6b2>
 80065da:	4639      	mov	r1, r7
 80065dc:	4658      	mov	r0, fp
 80065de:	f000 fbab 	bl	8006d38 <_Bfree>
 80065e2:	4629      	mov	r1, r5
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fba7 	bl	8006d38 <_Bfree>
 80065ea:	e7d0      	b.n	800658e <_dtoa_r+0x65e>
 80065ec:	9704      	str	r7, [sp, #16]
 80065ee:	4633      	mov	r3, r6
 80065f0:	461e      	mov	r6, r3
 80065f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065f6:	2a39      	cmp	r2, #57	@ 0x39
 80065f8:	d107      	bne.n	800660a <_dtoa_r+0x6da>
 80065fa:	459a      	cmp	sl, r3
 80065fc:	d1f8      	bne.n	80065f0 <_dtoa_r+0x6c0>
 80065fe:	9a04      	ldr	r2, [sp, #16]
 8006600:	3201      	adds	r2, #1
 8006602:	9204      	str	r2, [sp, #16]
 8006604:	2230      	movs	r2, #48	@ 0x30
 8006606:	f88a 2000 	strb.w	r2, [sl]
 800660a:	781a      	ldrb	r2, [r3, #0]
 800660c:	3201      	adds	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e7bd      	b.n	800658e <_dtoa_r+0x65e>
 8006612:	4b7b      	ldr	r3, [pc, #492]	@ (8006800 <_dtoa_r+0x8d0>)
 8006614:	2200      	movs	r2, #0
 8006616:	f7f9 fff7 	bl	8000608 <__aeabi_dmul>
 800661a:	2200      	movs	r2, #0
 800661c:	2300      	movs	r3, #0
 800661e:	4604      	mov	r4, r0
 8006620:	460d      	mov	r5, r1
 8006622:	f7fa fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 8006626:	2800      	cmp	r0, #0
 8006628:	f43f aebb 	beq.w	80063a2 <_dtoa_r+0x472>
 800662c:	e6f0      	b.n	8006410 <_dtoa_r+0x4e0>
 800662e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006630:	2a00      	cmp	r2, #0
 8006632:	f000 80db 	beq.w	80067ec <_dtoa_r+0x8bc>
 8006636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006638:	2a01      	cmp	r2, #1
 800663a:	f300 80bf 	bgt.w	80067bc <_dtoa_r+0x88c>
 800663e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006640:	2a00      	cmp	r2, #0
 8006642:	f000 80b7 	beq.w	80067b4 <_dtoa_r+0x884>
 8006646:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800664a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800664c:	4646      	mov	r6, r8
 800664e:	9a08      	ldr	r2, [sp, #32]
 8006650:	2101      	movs	r1, #1
 8006652:	441a      	add	r2, r3
 8006654:	4658      	mov	r0, fp
 8006656:	4498      	add	r8, r3
 8006658:	9208      	str	r2, [sp, #32]
 800665a:	f000 fc6b 	bl	8006f34 <__i2b>
 800665e:	4605      	mov	r5, r0
 8006660:	b15e      	cbz	r6, 800667a <_dtoa_r+0x74a>
 8006662:	9b08      	ldr	r3, [sp, #32]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd08      	ble.n	800667a <_dtoa_r+0x74a>
 8006668:	42b3      	cmp	r3, r6
 800666a:	9a08      	ldr	r2, [sp, #32]
 800666c:	bfa8      	it	ge
 800666e:	4633      	movge	r3, r6
 8006670:	eba8 0803 	sub.w	r8, r8, r3
 8006674:	1af6      	subs	r6, r6, r3
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	9308      	str	r3, [sp, #32]
 800667a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800667c:	b1f3      	cbz	r3, 80066bc <_dtoa_r+0x78c>
 800667e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80b7 	beq.w	80067f4 <_dtoa_r+0x8c4>
 8006686:	b18c      	cbz	r4, 80066ac <_dtoa_r+0x77c>
 8006688:	4629      	mov	r1, r5
 800668a:	4622      	mov	r2, r4
 800668c:	4658      	mov	r0, fp
 800668e:	f000 fd11 	bl	80070b4 <__pow5mult>
 8006692:	464a      	mov	r2, r9
 8006694:	4601      	mov	r1, r0
 8006696:	4605      	mov	r5, r0
 8006698:	4658      	mov	r0, fp
 800669a:	f000 fc61 	bl	8006f60 <__multiply>
 800669e:	4649      	mov	r1, r9
 80066a0:	9004      	str	r0, [sp, #16]
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 fb48 	bl	8006d38 <_Bfree>
 80066a8:	9b04      	ldr	r3, [sp, #16]
 80066aa:	4699      	mov	r9, r3
 80066ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ae:	1b1a      	subs	r2, r3, r4
 80066b0:	d004      	beq.n	80066bc <_dtoa_r+0x78c>
 80066b2:	4649      	mov	r1, r9
 80066b4:	4658      	mov	r0, fp
 80066b6:	f000 fcfd 	bl	80070b4 <__pow5mult>
 80066ba:	4681      	mov	r9, r0
 80066bc:	2101      	movs	r1, #1
 80066be:	4658      	mov	r0, fp
 80066c0:	f000 fc38 	bl	8006f34 <__i2b>
 80066c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066c6:	4604      	mov	r4, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 81cf 	beq.w	8006a6c <_dtoa_r+0xb3c>
 80066ce:	461a      	mov	r2, r3
 80066d0:	4601      	mov	r1, r0
 80066d2:	4658      	mov	r0, fp
 80066d4:	f000 fcee 	bl	80070b4 <__pow5mult>
 80066d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066da:	2b01      	cmp	r3, #1
 80066dc:	4604      	mov	r4, r0
 80066de:	f300 8095 	bgt.w	800680c <_dtoa_r+0x8dc>
 80066e2:	9b02      	ldr	r3, [sp, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f040 8087 	bne.w	80067f8 <_dtoa_r+0x8c8>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f040 8089 	bne.w	8006808 <_dtoa_r+0x8d8>
 80066f6:	9b03      	ldr	r3, [sp, #12]
 80066f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066fc:	0d1b      	lsrs	r3, r3, #20
 80066fe:	051b      	lsls	r3, r3, #20
 8006700:	b12b      	cbz	r3, 800670e <_dtoa_r+0x7de>
 8006702:	9b08      	ldr	r3, [sp, #32]
 8006704:	3301      	adds	r3, #1
 8006706:	9308      	str	r3, [sp, #32]
 8006708:	f108 0801 	add.w	r8, r8, #1
 800670c:	2301      	movs	r3, #1
 800670e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 81b0 	beq.w	8006a78 <_dtoa_r+0xb48>
 8006718:	6923      	ldr	r3, [r4, #16]
 800671a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800671e:	6918      	ldr	r0, [r3, #16]
 8006720:	f000 fbbc 	bl	8006e9c <__hi0bits>
 8006724:	f1c0 0020 	rsb	r0, r0, #32
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	4418      	add	r0, r3
 800672c:	f010 001f 	ands.w	r0, r0, #31
 8006730:	d077      	beq.n	8006822 <_dtoa_r+0x8f2>
 8006732:	f1c0 0320 	rsb	r3, r0, #32
 8006736:	2b04      	cmp	r3, #4
 8006738:	dd6b      	ble.n	8006812 <_dtoa_r+0x8e2>
 800673a:	9b08      	ldr	r3, [sp, #32]
 800673c:	f1c0 001c 	rsb	r0, r0, #28
 8006740:	4403      	add	r3, r0
 8006742:	4480      	add	r8, r0
 8006744:	4406      	add	r6, r0
 8006746:	9308      	str	r3, [sp, #32]
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	dd05      	ble.n	800675a <_dtoa_r+0x82a>
 800674e:	4649      	mov	r1, r9
 8006750:	4642      	mov	r2, r8
 8006752:	4658      	mov	r0, fp
 8006754:	f000 fd08 	bl	8007168 <__lshift>
 8006758:	4681      	mov	r9, r0
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dd05      	ble.n	800676c <_dtoa_r+0x83c>
 8006760:	4621      	mov	r1, r4
 8006762:	461a      	mov	r2, r3
 8006764:	4658      	mov	r0, fp
 8006766:	f000 fcff 	bl	8007168 <__lshift>
 800676a:	4604      	mov	r4, r0
 800676c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800676e:	2b00      	cmp	r3, #0
 8006770:	d059      	beq.n	8006826 <_dtoa_r+0x8f6>
 8006772:	4621      	mov	r1, r4
 8006774:	4648      	mov	r0, r9
 8006776:	f000 fd63 	bl	8007240 <__mcmp>
 800677a:	2800      	cmp	r0, #0
 800677c:	da53      	bge.n	8006826 <_dtoa_r+0x8f6>
 800677e:	1e7b      	subs	r3, r7, #1
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	4649      	mov	r1, r9
 8006784:	2300      	movs	r3, #0
 8006786:	220a      	movs	r2, #10
 8006788:	4658      	mov	r0, fp
 800678a:	f000 faf7 	bl	8006d7c <__multadd>
 800678e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006790:	4681      	mov	r9, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8172 	beq.w	8006a7c <_dtoa_r+0xb4c>
 8006798:	2300      	movs	r3, #0
 800679a:	4629      	mov	r1, r5
 800679c:	220a      	movs	r2, #10
 800679e:	4658      	mov	r0, fp
 80067a0:	f000 faec 	bl	8006d7c <__multadd>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	4605      	mov	r5, r0
 80067aa:	dc67      	bgt.n	800687c <_dtoa_r+0x94c>
 80067ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	dc41      	bgt.n	8006836 <_dtoa_r+0x906>
 80067b2:	e063      	b.n	800687c <_dtoa_r+0x94c>
 80067b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80067ba:	e746      	b.n	800664a <_dtoa_r+0x71a>
 80067bc:	9b07      	ldr	r3, [sp, #28]
 80067be:	1e5c      	subs	r4, r3, #1
 80067c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	bfbf      	itttt	lt
 80067c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80067c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80067ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80067cc:	1ae3      	sublt	r3, r4, r3
 80067ce:	bfb4      	ite	lt
 80067d0:	18d2      	addlt	r2, r2, r3
 80067d2:	1b1c      	subge	r4, r3, r4
 80067d4:	9b07      	ldr	r3, [sp, #28]
 80067d6:	bfbc      	itt	lt
 80067d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80067da:	2400      	movlt	r4, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bfb5      	itete	lt
 80067e0:	eba8 0603 	sublt.w	r6, r8, r3
 80067e4:	9b07      	ldrge	r3, [sp, #28]
 80067e6:	2300      	movlt	r3, #0
 80067e8:	4646      	movge	r6, r8
 80067ea:	e730      	b.n	800664e <_dtoa_r+0x71e>
 80067ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80067f0:	4646      	mov	r6, r8
 80067f2:	e735      	b.n	8006660 <_dtoa_r+0x730>
 80067f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067f6:	e75c      	b.n	80066b2 <_dtoa_r+0x782>
 80067f8:	2300      	movs	r3, #0
 80067fa:	e788      	b.n	800670e <_dtoa_r+0x7de>
 80067fc:	3fe00000 	.word	0x3fe00000
 8006800:	40240000 	.word	0x40240000
 8006804:	40140000 	.word	0x40140000
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	e780      	b.n	800670e <_dtoa_r+0x7de>
 800680c:	2300      	movs	r3, #0
 800680e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006810:	e782      	b.n	8006718 <_dtoa_r+0x7e8>
 8006812:	d099      	beq.n	8006748 <_dtoa_r+0x818>
 8006814:	9a08      	ldr	r2, [sp, #32]
 8006816:	331c      	adds	r3, #28
 8006818:	441a      	add	r2, r3
 800681a:	4498      	add	r8, r3
 800681c:	441e      	add	r6, r3
 800681e:	9208      	str	r2, [sp, #32]
 8006820:	e792      	b.n	8006748 <_dtoa_r+0x818>
 8006822:	4603      	mov	r3, r0
 8006824:	e7f6      	b.n	8006814 <_dtoa_r+0x8e4>
 8006826:	9b07      	ldr	r3, [sp, #28]
 8006828:	9704      	str	r7, [sp, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	dc20      	bgt.n	8006870 <_dtoa_r+0x940>
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006832:	2b02      	cmp	r3, #2
 8006834:	dd1e      	ble.n	8006874 <_dtoa_r+0x944>
 8006836:	9b00      	ldr	r3, [sp, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f47f aec0 	bne.w	80065be <_dtoa_r+0x68e>
 800683e:	4621      	mov	r1, r4
 8006840:	2205      	movs	r2, #5
 8006842:	4658      	mov	r0, fp
 8006844:	f000 fa9a 	bl	8006d7c <__multadd>
 8006848:	4601      	mov	r1, r0
 800684a:	4604      	mov	r4, r0
 800684c:	4648      	mov	r0, r9
 800684e:	f000 fcf7 	bl	8007240 <__mcmp>
 8006852:	2800      	cmp	r0, #0
 8006854:	f77f aeb3 	ble.w	80065be <_dtoa_r+0x68e>
 8006858:	4656      	mov	r6, sl
 800685a:	2331      	movs	r3, #49	@ 0x31
 800685c:	f806 3b01 	strb.w	r3, [r6], #1
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	3301      	adds	r3, #1
 8006864:	9304      	str	r3, [sp, #16]
 8006866:	e6ae      	b.n	80065c6 <_dtoa_r+0x696>
 8006868:	9c07      	ldr	r4, [sp, #28]
 800686a:	9704      	str	r7, [sp, #16]
 800686c:	4625      	mov	r5, r4
 800686e:	e7f3      	b.n	8006858 <_dtoa_r+0x928>
 8006870:	9b07      	ldr	r3, [sp, #28]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8104 	beq.w	8006a84 <_dtoa_r+0xb54>
 800687c:	2e00      	cmp	r6, #0
 800687e:	dd05      	ble.n	800688c <_dtoa_r+0x95c>
 8006880:	4629      	mov	r1, r5
 8006882:	4632      	mov	r2, r6
 8006884:	4658      	mov	r0, fp
 8006886:	f000 fc6f 	bl	8007168 <__lshift>
 800688a:	4605      	mov	r5, r0
 800688c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800688e:	2b00      	cmp	r3, #0
 8006890:	d05a      	beq.n	8006948 <_dtoa_r+0xa18>
 8006892:	6869      	ldr	r1, [r5, #4]
 8006894:	4658      	mov	r0, fp
 8006896:	f000 fa0f 	bl	8006cb8 <_Balloc>
 800689a:	4606      	mov	r6, r0
 800689c:	b928      	cbnz	r0, 80068aa <_dtoa_r+0x97a>
 800689e:	4b84      	ldr	r3, [pc, #528]	@ (8006ab0 <_dtoa_r+0xb80>)
 80068a0:	4602      	mov	r2, r0
 80068a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80068a6:	f7ff bb5a 	b.w	8005f5e <_dtoa_r+0x2e>
 80068aa:	692a      	ldr	r2, [r5, #16]
 80068ac:	3202      	adds	r2, #2
 80068ae:	0092      	lsls	r2, r2, #2
 80068b0:	f105 010c 	add.w	r1, r5, #12
 80068b4:	300c      	adds	r0, #12
 80068b6:	f001 ff75 	bl	80087a4 <memcpy>
 80068ba:	2201      	movs	r2, #1
 80068bc:	4631      	mov	r1, r6
 80068be:	4658      	mov	r0, fp
 80068c0:	f000 fc52 	bl	8007168 <__lshift>
 80068c4:	f10a 0301 	add.w	r3, sl, #1
 80068c8:	9307      	str	r3, [sp, #28]
 80068ca:	9b00      	ldr	r3, [sp, #0]
 80068cc:	4453      	add	r3, sl
 80068ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068d0:	9b02      	ldr	r3, [sp, #8]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	462f      	mov	r7, r5
 80068d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068da:	4605      	mov	r5, r0
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	4621      	mov	r1, r4
 80068e0:	3b01      	subs	r3, #1
 80068e2:	4648      	mov	r0, r9
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	f7ff fa9b 	bl	8005e20 <quorem>
 80068ea:	4639      	mov	r1, r7
 80068ec:	9002      	str	r0, [sp, #8]
 80068ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068f2:	4648      	mov	r0, r9
 80068f4:	f000 fca4 	bl	8007240 <__mcmp>
 80068f8:	462a      	mov	r2, r5
 80068fa:	9008      	str	r0, [sp, #32]
 80068fc:	4621      	mov	r1, r4
 80068fe:	4658      	mov	r0, fp
 8006900:	f000 fcba 	bl	8007278 <__mdiff>
 8006904:	68c2      	ldr	r2, [r0, #12]
 8006906:	4606      	mov	r6, r0
 8006908:	bb02      	cbnz	r2, 800694c <_dtoa_r+0xa1c>
 800690a:	4601      	mov	r1, r0
 800690c:	4648      	mov	r0, r9
 800690e:	f000 fc97 	bl	8007240 <__mcmp>
 8006912:	4602      	mov	r2, r0
 8006914:	4631      	mov	r1, r6
 8006916:	4658      	mov	r0, fp
 8006918:	920e      	str	r2, [sp, #56]	@ 0x38
 800691a:	f000 fa0d 	bl	8006d38 <_Bfree>
 800691e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006922:	9e07      	ldr	r6, [sp, #28]
 8006924:	ea43 0102 	orr.w	r1, r3, r2
 8006928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800692a:	4319      	orrs	r1, r3
 800692c:	d110      	bne.n	8006950 <_dtoa_r+0xa20>
 800692e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006932:	d029      	beq.n	8006988 <_dtoa_r+0xa58>
 8006934:	9b08      	ldr	r3, [sp, #32]
 8006936:	2b00      	cmp	r3, #0
 8006938:	dd02      	ble.n	8006940 <_dtoa_r+0xa10>
 800693a:	9b02      	ldr	r3, [sp, #8]
 800693c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006940:	9b00      	ldr	r3, [sp, #0]
 8006942:	f883 8000 	strb.w	r8, [r3]
 8006946:	e63f      	b.n	80065c8 <_dtoa_r+0x698>
 8006948:	4628      	mov	r0, r5
 800694a:	e7bb      	b.n	80068c4 <_dtoa_r+0x994>
 800694c:	2201      	movs	r2, #1
 800694e:	e7e1      	b.n	8006914 <_dtoa_r+0x9e4>
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	2b00      	cmp	r3, #0
 8006954:	db04      	blt.n	8006960 <_dtoa_r+0xa30>
 8006956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006958:	430b      	orrs	r3, r1
 800695a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800695c:	430b      	orrs	r3, r1
 800695e:	d120      	bne.n	80069a2 <_dtoa_r+0xa72>
 8006960:	2a00      	cmp	r2, #0
 8006962:	dded      	ble.n	8006940 <_dtoa_r+0xa10>
 8006964:	4649      	mov	r1, r9
 8006966:	2201      	movs	r2, #1
 8006968:	4658      	mov	r0, fp
 800696a:	f000 fbfd 	bl	8007168 <__lshift>
 800696e:	4621      	mov	r1, r4
 8006970:	4681      	mov	r9, r0
 8006972:	f000 fc65 	bl	8007240 <__mcmp>
 8006976:	2800      	cmp	r0, #0
 8006978:	dc03      	bgt.n	8006982 <_dtoa_r+0xa52>
 800697a:	d1e1      	bne.n	8006940 <_dtoa_r+0xa10>
 800697c:	f018 0f01 	tst.w	r8, #1
 8006980:	d0de      	beq.n	8006940 <_dtoa_r+0xa10>
 8006982:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006986:	d1d8      	bne.n	800693a <_dtoa_r+0xa0a>
 8006988:	9a00      	ldr	r2, [sp, #0]
 800698a:	2339      	movs	r3, #57	@ 0x39
 800698c:	7013      	strb	r3, [r2, #0]
 800698e:	4633      	mov	r3, r6
 8006990:	461e      	mov	r6, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006998:	2a39      	cmp	r2, #57	@ 0x39
 800699a:	d052      	beq.n	8006a42 <_dtoa_r+0xb12>
 800699c:	3201      	adds	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	e612      	b.n	80065c8 <_dtoa_r+0x698>
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	dd07      	ble.n	80069b6 <_dtoa_r+0xa86>
 80069a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069aa:	d0ed      	beq.n	8006988 <_dtoa_r+0xa58>
 80069ac:	9a00      	ldr	r2, [sp, #0]
 80069ae:	f108 0301 	add.w	r3, r8, #1
 80069b2:	7013      	strb	r3, [r2, #0]
 80069b4:	e608      	b.n	80065c8 <_dtoa_r+0x698>
 80069b6:	9b07      	ldr	r3, [sp, #28]
 80069b8:	9a07      	ldr	r2, [sp, #28]
 80069ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80069be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d028      	beq.n	8006a16 <_dtoa_r+0xae6>
 80069c4:	4649      	mov	r1, r9
 80069c6:	2300      	movs	r3, #0
 80069c8:	220a      	movs	r2, #10
 80069ca:	4658      	mov	r0, fp
 80069cc:	f000 f9d6 	bl	8006d7c <__multadd>
 80069d0:	42af      	cmp	r7, r5
 80069d2:	4681      	mov	r9, r0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	f04f 020a 	mov.w	r2, #10
 80069dc:	4639      	mov	r1, r7
 80069de:	4658      	mov	r0, fp
 80069e0:	d107      	bne.n	80069f2 <_dtoa_r+0xac2>
 80069e2:	f000 f9cb 	bl	8006d7c <__multadd>
 80069e6:	4607      	mov	r7, r0
 80069e8:	4605      	mov	r5, r0
 80069ea:	9b07      	ldr	r3, [sp, #28]
 80069ec:	3301      	adds	r3, #1
 80069ee:	9307      	str	r3, [sp, #28]
 80069f0:	e774      	b.n	80068dc <_dtoa_r+0x9ac>
 80069f2:	f000 f9c3 	bl	8006d7c <__multadd>
 80069f6:	4629      	mov	r1, r5
 80069f8:	4607      	mov	r7, r0
 80069fa:	2300      	movs	r3, #0
 80069fc:	220a      	movs	r2, #10
 80069fe:	4658      	mov	r0, fp
 8006a00:	f000 f9bc 	bl	8006d7c <__multadd>
 8006a04:	4605      	mov	r5, r0
 8006a06:	e7f0      	b.n	80069ea <_dtoa_r+0xaba>
 8006a08:	9b00      	ldr	r3, [sp, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bfcc      	ite	gt
 8006a0e:	461e      	movgt	r6, r3
 8006a10:	2601      	movle	r6, #1
 8006a12:	4456      	add	r6, sl
 8006a14:	2700      	movs	r7, #0
 8006a16:	4649      	mov	r1, r9
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4658      	mov	r0, fp
 8006a1c:	f000 fba4 	bl	8007168 <__lshift>
 8006a20:	4621      	mov	r1, r4
 8006a22:	4681      	mov	r9, r0
 8006a24:	f000 fc0c 	bl	8007240 <__mcmp>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	dcb0      	bgt.n	800698e <_dtoa_r+0xa5e>
 8006a2c:	d102      	bne.n	8006a34 <_dtoa_r+0xb04>
 8006a2e:	f018 0f01 	tst.w	r8, #1
 8006a32:	d1ac      	bne.n	800698e <_dtoa_r+0xa5e>
 8006a34:	4633      	mov	r3, r6
 8006a36:	461e      	mov	r6, r3
 8006a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3c:	2a30      	cmp	r2, #48	@ 0x30
 8006a3e:	d0fa      	beq.n	8006a36 <_dtoa_r+0xb06>
 8006a40:	e5c2      	b.n	80065c8 <_dtoa_r+0x698>
 8006a42:	459a      	cmp	sl, r3
 8006a44:	d1a4      	bne.n	8006990 <_dtoa_r+0xa60>
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	2331      	movs	r3, #49	@ 0x31
 8006a4e:	f88a 3000 	strb.w	r3, [sl]
 8006a52:	e5b9      	b.n	80065c8 <_dtoa_r+0x698>
 8006a54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006ab4 <_dtoa_r+0xb84>
 8006a5a:	b11b      	cbz	r3, 8006a64 <_dtoa_r+0xb34>
 8006a5c:	f10a 0308 	add.w	r3, sl, #8
 8006a60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	4650      	mov	r0, sl
 8006a66:	b019      	add	sp, #100	@ 0x64
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	f77f ae37 	ble.w	80066e2 <_dtoa_r+0x7b2>
 8006a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a78:	2001      	movs	r0, #1
 8006a7a:	e655      	b.n	8006728 <_dtoa_r+0x7f8>
 8006a7c:	9b00      	ldr	r3, [sp, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f77f aed6 	ble.w	8006830 <_dtoa_r+0x900>
 8006a84:	4656      	mov	r6, sl
 8006a86:	4621      	mov	r1, r4
 8006a88:	4648      	mov	r0, r9
 8006a8a:	f7ff f9c9 	bl	8005e20 <quorem>
 8006a8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a92:	f806 8b01 	strb.w	r8, [r6], #1
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	eba6 020a 	sub.w	r2, r6, sl
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	ddb3      	ble.n	8006a08 <_dtoa_r+0xad8>
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	220a      	movs	r2, #10
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f000 f968 	bl	8006d7c <__multadd>
 8006aac:	4681      	mov	r9, r0
 8006aae:	e7ea      	b.n	8006a86 <_dtoa_r+0xb56>
 8006ab0:	080095b9 	.word	0x080095b9
 8006ab4:	0800953d 	.word	0x0800953d

08006ab8 <_free_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4605      	mov	r5, r0
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d041      	beq.n	8006b44 <_free_r+0x8c>
 8006ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac4:	1f0c      	subs	r4, r1, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfb8      	it	lt
 8006aca:	18e4      	addlt	r4, r4, r3
 8006acc:	f000 f8e8 	bl	8006ca0 <__malloc_lock>
 8006ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b48 <_free_r+0x90>)
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	b933      	cbnz	r3, 8006ae4 <_free_r+0x2c>
 8006ad6:	6063      	str	r3, [r4, #4]
 8006ad8:	6014      	str	r4, [r2, #0]
 8006ada:	4628      	mov	r0, r5
 8006adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae0:	f000 b8e4 	b.w	8006cac <__malloc_unlock>
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d908      	bls.n	8006afa <_free_r+0x42>
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	1821      	adds	r1, r4, r0
 8006aec:	428b      	cmp	r3, r1
 8006aee:	bf01      	itttt	eq
 8006af0:	6819      	ldreq	r1, [r3, #0]
 8006af2:	685b      	ldreq	r3, [r3, #4]
 8006af4:	1809      	addeq	r1, r1, r0
 8006af6:	6021      	streq	r1, [r4, #0]
 8006af8:	e7ed      	b.n	8006ad6 <_free_r+0x1e>
 8006afa:	461a      	mov	r2, r3
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b10b      	cbz	r3, 8006b04 <_free_r+0x4c>
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d9fa      	bls.n	8006afa <_free_r+0x42>
 8006b04:	6811      	ldr	r1, [r2, #0]
 8006b06:	1850      	adds	r0, r2, r1
 8006b08:	42a0      	cmp	r0, r4
 8006b0a:	d10b      	bne.n	8006b24 <_free_r+0x6c>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	4401      	add	r1, r0
 8006b10:	1850      	adds	r0, r2, r1
 8006b12:	4283      	cmp	r3, r0
 8006b14:	6011      	str	r1, [r2, #0]
 8006b16:	d1e0      	bne.n	8006ada <_free_r+0x22>
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	6053      	str	r3, [r2, #4]
 8006b1e:	4408      	add	r0, r1
 8006b20:	6010      	str	r0, [r2, #0]
 8006b22:	e7da      	b.n	8006ada <_free_r+0x22>
 8006b24:	d902      	bls.n	8006b2c <_free_r+0x74>
 8006b26:	230c      	movs	r3, #12
 8006b28:	602b      	str	r3, [r5, #0]
 8006b2a:	e7d6      	b.n	8006ada <_free_r+0x22>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	1821      	adds	r1, r4, r0
 8006b30:	428b      	cmp	r3, r1
 8006b32:	bf04      	itt	eq
 8006b34:	6819      	ldreq	r1, [r3, #0]
 8006b36:	685b      	ldreq	r3, [r3, #4]
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	bf04      	itt	eq
 8006b3c:	1809      	addeq	r1, r1, r0
 8006b3e:	6021      	streq	r1, [r4, #0]
 8006b40:	6054      	str	r4, [r2, #4]
 8006b42:	e7ca      	b.n	8006ada <_free_r+0x22>
 8006b44:	bd38      	pop	{r3, r4, r5, pc}
 8006b46:	bf00      	nop
 8006b48:	200004c4 	.word	0x200004c4

08006b4c <malloc>:
 8006b4c:	4b02      	ldr	r3, [pc, #8]	@ (8006b58 <malloc+0xc>)
 8006b4e:	4601      	mov	r1, r0
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	f000 b825 	b.w	8006ba0 <_malloc_r>
 8006b56:	bf00      	nop
 8006b58:	20000018 	.word	0x20000018

08006b5c <sbrk_aligned>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8006b9c <sbrk_aligned+0x40>)
 8006b60:	460c      	mov	r4, r1
 8006b62:	6831      	ldr	r1, [r6, #0]
 8006b64:	4605      	mov	r5, r0
 8006b66:	b911      	cbnz	r1, 8006b6e <sbrk_aligned+0x12>
 8006b68:	f001 fe0c 	bl	8008784 <_sbrk_r>
 8006b6c:	6030      	str	r0, [r6, #0]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4628      	mov	r0, r5
 8006b72:	f001 fe07 	bl	8008784 <_sbrk_r>
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	d103      	bne.n	8006b82 <sbrk_aligned+0x26>
 8006b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b7e:	4620      	mov	r0, r4
 8006b80:	bd70      	pop	{r4, r5, r6, pc}
 8006b82:	1cc4      	adds	r4, r0, #3
 8006b84:	f024 0403 	bic.w	r4, r4, #3
 8006b88:	42a0      	cmp	r0, r4
 8006b8a:	d0f8      	beq.n	8006b7e <sbrk_aligned+0x22>
 8006b8c:	1a21      	subs	r1, r4, r0
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f001 fdf8 	bl	8008784 <_sbrk_r>
 8006b94:	3001      	adds	r0, #1
 8006b96:	d1f2      	bne.n	8006b7e <sbrk_aligned+0x22>
 8006b98:	e7ef      	b.n	8006b7a <sbrk_aligned+0x1e>
 8006b9a:	bf00      	nop
 8006b9c:	200004c0 	.word	0x200004c0

08006ba0 <_malloc_r>:
 8006ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba4:	1ccd      	adds	r5, r1, #3
 8006ba6:	f025 0503 	bic.w	r5, r5, #3
 8006baa:	3508      	adds	r5, #8
 8006bac:	2d0c      	cmp	r5, #12
 8006bae:	bf38      	it	cc
 8006bb0:	250c      	movcc	r5, #12
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	db01      	blt.n	8006bbc <_malloc_r+0x1c>
 8006bb8:	42a9      	cmp	r1, r5
 8006bba:	d904      	bls.n	8006bc6 <_malloc_r+0x26>
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	6033      	str	r3, [r6, #0]
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c9c <_malloc_r+0xfc>
 8006bca:	f000 f869 	bl	8006ca0 <__malloc_lock>
 8006bce:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd2:	461c      	mov	r4, r3
 8006bd4:	bb44      	cbnz	r4, 8006c28 <_malloc_r+0x88>
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7ff ffbf 	bl	8006b5c <sbrk_aligned>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	4604      	mov	r4, r0
 8006be2:	d158      	bne.n	8006c96 <_malloc_r+0xf6>
 8006be4:	f8d8 4000 	ldr.w	r4, [r8]
 8006be8:	4627      	mov	r7, r4
 8006bea:	2f00      	cmp	r7, #0
 8006bec:	d143      	bne.n	8006c76 <_malloc_r+0xd6>
 8006bee:	2c00      	cmp	r4, #0
 8006bf0:	d04b      	beq.n	8006c8a <_malloc_r+0xea>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	eb04 0903 	add.w	r9, r4, r3
 8006bfc:	f001 fdc2 	bl	8008784 <_sbrk_r>
 8006c00:	4581      	cmp	r9, r0
 8006c02:	d142      	bne.n	8006c8a <_malloc_r+0xea>
 8006c04:	6821      	ldr	r1, [r4, #0]
 8006c06:	1a6d      	subs	r5, r5, r1
 8006c08:	4629      	mov	r1, r5
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff ffa6 	bl	8006b5c <sbrk_aligned>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d03a      	beq.n	8006c8a <_malloc_r+0xea>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	442b      	add	r3, r5
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	bb62      	cbnz	r2, 8006c7c <_malloc_r+0xdc>
 8006c22:	f8c8 7000 	str.w	r7, [r8]
 8006c26:	e00f      	b.n	8006c48 <_malloc_r+0xa8>
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	1b52      	subs	r2, r2, r5
 8006c2c:	d420      	bmi.n	8006c70 <_malloc_r+0xd0>
 8006c2e:	2a0b      	cmp	r2, #11
 8006c30:	d917      	bls.n	8006c62 <_malloc_r+0xc2>
 8006c32:	1961      	adds	r1, r4, r5
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	6025      	str	r5, [r4, #0]
 8006c38:	bf18      	it	ne
 8006c3a:	6059      	strne	r1, [r3, #4]
 8006c3c:	6863      	ldr	r3, [r4, #4]
 8006c3e:	bf08      	it	eq
 8006c40:	f8c8 1000 	streq.w	r1, [r8]
 8006c44:	5162      	str	r2, [r4, r5]
 8006c46:	604b      	str	r3, [r1, #4]
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f000 f82f 	bl	8006cac <__malloc_unlock>
 8006c4e:	f104 000b 	add.w	r0, r4, #11
 8006c52:	1d23      	adds	r3, r4, #4
 8006c54:	f020 0007 	bic.w	r0, r0, #7
 8006c58:	1ac2      	subs	r2, r0, r3
 8006c5a:	bf1c      	itt	ne
 8006c5c:	1a1b      	subne	r3, r3, r0
 8006c5e:	50a3      	strne	r3, [r4, r2]
 8006c60:	e7af      	b.n	8006bc2 <_malloc_r+0x22>
 8006c62:	6862      	ldr	r2, [r4, #4]
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	bf0c      	ite	eq
 8006c68:	f8c8 2000 	streq.w	r2, [r8]
 8006c6c:	605a      	strne	r2, [r3, #4]
 8006c6e:	e7eb      	b.n	8006c48 <_malloc_r+0xa8>
 8006c70:	4623      	mov	r3, r4
 8006c72:	6864      	ldr	r4, [r4, #4]
 8006c74:	e7ae      	b.n	8006bd4 <_malloc_r+0x34>
 8006c76:	463c      	mov	r4, r7
 8006c78:	687f      	ldr	r7, [r7, #4]
 8006c7a:	e7b6      	b.n	8006bea <_malloc_r+0x4a>
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	d1fb      	bne.n	8006c7c <_malloc_r+0xdc>
 8006c84:	2300      	movs	r3, #0
 8006c86:	6053      	str	r3, [r2, #4]
 8006c88:	e7de      	b.n	8006c48 <_malloc_r+0xa8>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	6033      	str	r3, [r6, #0]
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f000 f80c 	bl	8006cac <__malloc_unlock>
 8006c94:	e794      	b.n	8006bc0 <_malloc_r+0x20>
 8006c96:	6005      	str	r5, [r0, #0]
 8006c98:	e7d6      	b.n	8006c48 <_malloc_r+0xa8>
 8006c9a:	bf00      	nop
 8006c9c:	200004c4 	.word	0x200004c4

08006ca0 <__malloc_lock>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	@ (8006ca8 <__malloc_lock+0x8>)
 8006ca2:	f7ff b8b4 	b.w	8005e0e <__retarget_lock_acquire_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	200004bc 	.word	0x200004bc

08006cac <__malloc_unlock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	@ (8006cb4 <__malloc_unlock+0x8>)
 8006cae:	f7ff b8af 	b.w	8005e10 <__retarget_lock_release_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	200004bc 	.word	0x200004bc

08006cb8 <_Balloc>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	69c6      	ldr	r6, [r0, #28]
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	460d      	mov	r5, r1
 8006cc0:	b976      	cbnz	r6, 8006ce0 <_Balloc+0x28>
 8006cc2:	2010      	movs	r0, #16
 8006cc4:	f7ff ff42 	bl	8006b4c <malloc>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	61e0      	str	r0, [r4, #28]
 8006ccc:	b920      	cbnz	r0, 8006cd8 <_Balloc+0x20>
 8006cce:	4b18      	ldr	r3, [pc, #96]	@ (8006d30 <_Balloc+0x78>)
 8006cd0:	4818      	ldr	r0, [pc, #96]	@ (8006d34 <_Balloc+0x7c>)
 8006cd2:	216b      	movs	r1, #107	@ 0x6b
 8006cd4:	f001 fd7c 	bl	80087d0 <__assert_func>
 8006cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cdc:	6006      	str	r6, [r0, #0]
 8006cde:	60c6      	str	r6, [r0, #12]
 8006ce0:	69e6      	ldr	r6, [r4, #28]
 8006ce2:	68f3      	ldr	r3, [r6, #12]
 8006ce4:	b183      	cbz	r3, 8006d08 <_Balloc+0x50>
 8006ce6:	69e3      	ldr	r3, [r4, #28]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cee:	b9b8      	cbnz	r0, 8006d20 <_Balloc+0x68>
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	fa01 f605 	lsl.w	r6, r1, r5
 8006cf6:	1d72      	adds	r2, r6, #5
 8006cf8:	0092      	lsls	r2, r2, #2
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f001 fd86 	bl	800880c <_calloc_r>
 8006d00:	b160      	cbz	r0, 8006d1c <_Balloc+0x64>
 8006d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d06:	e00e      	b.n	8006d26 <_Balloc+0x6e>
 8006d08:	2221      	movs	r2, #33	@ 0x21
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f001 fd7d 	bl	800880c <_calloc_r>
 8006d12:	69e3      	ldr	r3, [r4, #28]
 8006d14:	60f0      	str	r0, [r6, #12]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e4      	bne.n	8006ce6 <_Balloc+0x2e>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	6802      	ldr	r2, [r0, #0]
 8006d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d26:	2300      	movs	r3, #0
 8006d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d2c:	e7f7      	b.n	8006d1e <_Balloc+0x66>
 8006d2e:	bf00      	nop
 8006d30:	0800954a 	.word	0x0800954a
 8006d34:	080095ca 	.word	0x080095ca

08006d38 <_Bfree>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	69c6      	ldr	r6, [r0, #28]
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	b976      	cbnz	r6, 8006d60 <_Bfree+0x28>
 8006d42:	2010      	movs	r0, #16
 8006d44:	f7ff ff02 	bl	8006b4c <malloc>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	61e8      	str	r0, [r5, #28]
 8006d4c:	b920      	cbnz	r0, 8006d58 <_Bfree+0x20>
 8006d4e:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <_Bfree+0x3c>)
 8006d50:	4809      	ldr	r0, [pc, #36]	@ (8006d78 <_Bfree+0x40>)
 8006d52:	218f      	movs	r1, #143	@ 0x8f
 8006d54:	f001 fd3c 	bl	80087d0 <__assert_func>
 8006d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d5c:	6006      	str	r6, [r0, #0]
 8006d5e:	60c6      	str	r6, [r0, #12]
 8006d60:	b13c      	cbz	r4, 8006d72 <_Bfree+0x3a>
 8006d62:	69eb      	ldr	r3, [r5, #28]
 8006d64:	6862      	ldr	r2, [r4, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d6c:	6021      	str	r1, [r4, #0]
 8006d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d72:	bd70      	pop	{r4, r5, r6, pc}
 8006d74:	0800954a 	.word	0x0800954a
 8006d78:	080095ca 	.word	0x080095ca

08006d7c <__multadd>:
 8006d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d80:	690d      	ldr	r5, [r1, #16]
 8006d82:	4607      	mov	r7, r0
 8006d84:	460c      	mov	r4, r1
 8006d86:	461e      	mov	r6, r3
 8006d88:	f101 0c14 	add.w	ip, r1, #20
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d92:	b299      	uxth	r1, r3
 8006d94:	fb02 6101 	mla	r1, r2, r1, r6
 8006d98:	0c1e      	lsrs	r6, r3, #16
 8006d9a:	0c0b      	lsrs	r3, r1, #16
 8006d9c:	fb02 3306 	mla	r3, r2, r6, r3
 8006da0:	b289      	uxth	r1, r1
 8006da2:	3001      	adds	r0, #1
 8006da4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006da8:	4285      	cmp	r5, r0
 8006daa:	f84c 1b04 	str.w	r1, [ip], #4
 8006dae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006db2:	dcec      	bgt.n	8006d8e <__multadd+0x12>
 8006db4:	b30e      	cbz	r6, 8006dfa <__multadd+0x7e>
 8006db6:	68a3      	ldr	r3, [r4, #8]
 8006db8:	42ab      	cmp	r3, r5
 8006dba:	dc19      	bgt.n	8006df0 <__multadd+0x74>
 8006dbc:	6861      	ldr	r1, [r4, #4]
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	3101      	adds	r1, #1
 8006dc2:	f7ff ff79 	bl	8006cb8 <_Balloc>
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	b928      	cbnz	r0, 8006dd6 <__multadd+0x5a>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <__multadd+0x84>)
 8006dce:	480d      	ldr	r0, [pc, #52]	@ (8006e04 <__multadd+0x88>)
 8006dd0:	21ba      	movs	r1, #186	@ 0xba
 8006dd2:	f001 fcfd 	bl	80087d0 <__assert_func>
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	3202      	adds	r2, #2
 8006dda:	f104 010c 	add.w	r1, r4, #12
 8006dde:	0092      	lsls	r2, r2, #2
 8006de0:	300c      	adds	r0, #12
 8006de2:	f001 fcdf 	bl	80087a4 <memcpy>
 8006de6:	4621      	mov	r1, r4
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7ff ffa5 	bl	8006d38 <_Bfree>
 8006dee:	4644      	mov	r4, r8
 8006df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006df4:	3501      	adds	r5, #1
 8006df6:	615e      	str	r6, [r3, #20]
 8006df8:	6125      	str	r5, [r4, #16]
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e00:	080095b9 	.word	0x080095b9
 8006e04:	080095ca 	.word	0x080095ca

08006e08 <__s2b>:
 8006e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	4615      	mov	r5, r2
 8006e10:	461f      	mov	r7, r3
 8006e12:	2209      	movs	r2, #9
 8006e14:	3308      	adds	r3, #8
 8006e16:	4606      	mov	r6, r0
 8006e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	2201      	movs	r2, #1
 8006e20:	429a      	cmp	r2, r3
 8006e22:	db09      	blt.n	8006e38 <__s2b+0x30>
 8006e24:	4630      	mov	r0, r6
 8006e26:	f7ff ff47 	bl	8006cb8 <_Balloc>
 8006e2a:	b940      	cbnz	r0, 8006e3e <__s2b+0x36>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b19      	ldr	r3, [pc, #100]	@ (8006e94 <__s2b+0x8c>)
 8006e30:	4819      	ldr	r0, [pc, #100]	@ (8006e98 <__s2b+0x90>)
 8006e32:	21d3      	movs	r1, #211	@ 0xd3
 8006e34:	f001 fccc 	bl	80087d0 <__assert_func>
 8006e38:	0052      	lsls	r2, r2, #1
 8006e3a:	3101      	adds	r1, #1
 8006e3c:	e7f0      	b.n	8006e20 <__s2b+0x18>
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	6143      	str	r3, [r0, #20]
 8006e42:	2d09      	cmp	r5, #9
 8006e44:	f04f 0301 	mov.w	r3, #1
 8006e48:	6103      	str	r3, [r0, #16]
 8006e4a:	dd16      	ble.n	8006e7a <__s2b+0x72>
 8006e4c:	f104 0909 	add.w	r9, r4, #9
 8006e50:	46c8      	mov	r8, r9
 8006e52:	442c      	add	r4, r5
 8006e54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e58:	4601      	mov	r1, r0
 8006e5a:	3b30      	subs	r3, #48	@ 0x30
 8006e5c:	220a      	movs	r2, #10
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f7ff ff8c 	bl	8006d7c <__multadd>
 8006e64:	45a0      	cmp	r8, r4
 8006e66:	d1f5      	bne.n	8006e54 <__s2b+0x4c>
 8006e68:	f1a5 0408 	sub.w	r4, r5, #8
 8006e6c:	444c      	add	r4, r9
 8006e6e:	1b2d      	subs	r5, r5, r4
 8006e70:	1963      	adds	r3, r4, r5
 8006e72:	42bb      	cmp	r3, r7
 8006e74:	db04      	blt.n	8006e80 <__s2b+0x78>
 8006e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7a:	340a      	adds	r4, #10
 8006e7c:	2509      	movs	r5, #9
 8006e7e:	e7f6      	b.n	8006e6e <__s2b+0x66>
 8006e80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e84:	4601      	mov	r1, r0
 8006e86:	3b30      	subs	r3, #48	@ 0x30
 8006e88:	220a      	movs	r2, #10
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7ff ff76 	bl	8006d7c <__multadd>
 8006e90:	e7ee      	b.n	8006e70 <__s2b+0x68>
 8006e92:	bf00      	nop
 8006e94:	080095b9 	.word	0x080095b9
 8006e98:	080095ca 	.word	0x080095ca

08006e9c <__hi0bits>:
 8006e9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	bf36      	itet	cc
 8006ea4:	0403      	lslcc	r3, r0, #16
 8006ea6:	2000      	movcs	r0, #0
 8006ea8:	2010      	movcc	r0, #16
 8006eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eae:	bf3c      	itt	cc
 8006eb0:	021b      	lslcc	r3, r3, #8
 8006eb2:	3008      	addcc	r0, #8
 8006eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eb8:	bf3c      	itt	cc
 8006eba:	011b      	lslcc	r3, r3, #4
 8006ebc:	3004      	addcc	r0, #4
 8006ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec2:	bf3c      	itt	cc
 8006ec4:	009b      	lslcc	r3, r3, #2
 8006ec6:	3002      	addcc	r0, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	db05      	blt.n	8006ed8 <__hi0bits+0x3c>
 8006ecc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ed0:	f100 0001 	add.w	r0, r0, #1
 8006ed4:	bf08      	it	eq
 8006ed6:	2020      	moveq	r0, #32
 8006ed8:	4770      	bx	lr

08006eda <__lo0bits>:
 8006eda:	6803      	ldr	r3, [r0, #0]
 8006edc:	4602      	mov	r2, r0
 8006ede:	f013 0007 	ands.w	r0, r3, #7
 8006ee2:	d00b      	beq.n	8006efc <__lo0bits+0x22>
 8006ee4:	07d9      	lsls	r1, r3, #31
 8006ee6:	d421      	bmi.n	8006f2c <__lo0bits+0x52>
 8006ee8:	0798      	lsls	r0, r3, #30
 8006eea:	bf49      	itett	mi
 8006eec:	085b      	lsrmi	r3, r3, #1
 8006eee:	089b      	lsrpl	r3, r3, #2
 8006ef0:	2001      	movmi	r0, #1
 8006ef2:	6013      	strmi	r3, [r2, #0]
 8006ef4:	bf5c      	itt	pl
 8006ef6:	6013      	strpl	r3, [r2, #0]
 8006ef8:	2002      	movpl	r0, #2
 8006efa:	4770      	bx	lr
 8006efc:	b299      	uxth	r1, r3
 8006efe:	b909      	cbnz	r1, 8006f04 <__lo0bits+0x2a>
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	2010      	movs	r0, #16
 8006f04:	b2d9      	uxtb	r1, r3
 8006f06:	b909      	cbnz	r1, 8006f0c <__lo0bits+0x32>
 8006f08:	3008      	adds	r0, #8
 8006f0a:	0a1b      	lsrs	r3, r3, #8
 8006f0c:	0719      	lsls	r1, r3, #28
 8006f0e:	bf04      	itt	eq
 8006f10:	091b      	lsreq	r3, r3, #4
 8006f12:	3004      	addeq	r0, #4
 8006f14:	0799      	lsls	r1, r3, #30
 8006f16:	bf04      	itt	eq
 8006f18:	089b      	lsreq	r3, r3, #2
 8006f1a:	3002      	addeq	r0, #2
 8006f1c:	07d9      	lsls	r1, r3, #31
 8006f1e:	d403      	bmi.n	8006f28 <__lo0bits+0x4e>
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	f100 0001 	add.w	r0, r0, #1
 8006f26:	d003      	beq.n	8006f30 <__lo0bits+0x56>
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	4770      	bx	lr
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	4770      	bx	lr
 8006f30:	2020      	movs	r0, #32
 8006f32:	4770      	bx	lr

08006f34 <__i2b>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	460c      	mov	r4, r1
 8006f38:	2101      	movs	r1, #1
 8006f3a:	f7ff febd 	bl	8006cb8 <_Balloc>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	b928      	cbnz	r0, 8006f4e <__i2b+0x1a>
 8006f42:	4b05      	ldr	r3, [pc, #20]	@ (8006f58 <__i2b+0x24>)
 8006f44:	4805      	ldr	r0, [pc, #20]	@ (8006f5c <__i2b+0x28>)
 8006f46:	f240 1145 	movw	r1, #325	@ 0x145
 8006f4a:	f001 fc41 	bl	80087d0 <__assert_func>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	6144      	str	r4, [r0, #20]
 8006f52:	6103      	str	r3, [r0, #16]
 8006f54:	bd10      	pop	{r4, pc}
 8006f56:	bf00      	nop
 8006f58:	080095b9 	.word	0x080095b9
 8006f5c:	080095ca 	.word	0x080095ca

08006f60 <__multiply>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	4614      	mov	r4, r2
 8006f66:	690a      	ldr	r2, [r1, #16]
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	bfa8      	it	ge
 8006f6e:	4623      	movge	r3, r4
 8006f70:	460f      	mov	r7, r1
 8006f72:	bfa4      	itt	ge
 8006f74:	460c      	movge	r4, r1
 8006f76:	461f      	movge	r7, r3
 8006f78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f80:	68a3      	ldr	r3, [r4, #8]
 8006f82:	6861      	ldr	r1, [r4, #4]
 8006f84:	eb0a 0609 	add.w	r6, sl, r9
 8006f88:	42b3      	cmp	r3, r6
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	bfb8      	it	lt
 8006f8e:	3101      	addlt	r1, #1
 8006f90:	f7ff fe92 	bl	8006cb8 <_Balloc>
 8006f94:	b930      	cbnz	r0, 8006fa4 <__multiply+0x44>
 8006f96:	4602      	mov	r2, r0
 8006f98:	4b44      	ldr	r3, [pc, #272]	@ (80070ac <__multiply+0x14c>)
 8006f9a:	4845      	ldr	r0, [pc, #276]	@ (80070b0 <__multiply+0x150>)
 8006f9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006fa0:	f001 fc16 	bl	80087d0 <__assert_func>
 8006fa4:	f100 0514 	add.w	r5, r0, #20
 8006fa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fac:	462b      	mov	r3, r5
 8006fae:	2200      	movs	r2, #0
 8006fb0:	4543      	cmp	r3, r8
 8006fb2:	d321      	bcc.n	8006ff8 <__multiply+0x98>
 8006fb4:	f107 0114 	add.w	r1, r7, #20
 8006fb8:	f104 0214 	add.w	r2, r4, #20
 8006fbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006fc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006fc4:	9302      	str	r3, [sp, #8]
 8006fc6:	1b13      	subs	r3, r2, r4
 8006fc8:	3b15      	subs	r3, #21
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	3304      	adds	r3, #4
 8006fd0:	f104 0715 	add.w	r7, r4, #21
 8006fd4:	42ba      	cmp	r2, r7
 8006fd6:	bf38      	it	cc
 8006fd8:	2304      	movcc	r3, #4
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	9b02      	ldr	r3, [sp, #8]
 8006fde:	9103      	str	r1, [sp, #12]
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	d80c      	bhi.n	8006ffe <__multiply+0x9e>
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	dd03      	ble.n	8006ff0 <__multiply+0x90>
 8006fe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05b      	beq.n	80070a8 <__multiply+0x148>
 8006ff0:	6106      	str	r6, [r0, #16]
 8006ff2:	b005      	add	sp, #20
 8006ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff8:	f843 2b04 	str.w	r2, [r3], #4
 8006ffc:	e7d8      	b.n	8006fb0 <__multiply+0x50>
 8006ffe:	f8b1 a000 	ldrh.w	sl, [r1]
 8007002:	f1ba 0f00 	cmp.w	sl, #0
 8007006:	d024      	beq.n	8007052 <__multiply+0xf2>
 8007008:	f104 0e14 	add.w	lr, r4, #20
 800700c:	46a9      	mov	r9, r5
 800700e:	f04f 0c00 	mov.w	ip, #0
 8007012:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007016:	f8d9 3000 	ldr.w	r3, [r9]
 800701a:	fa1f fb87 	uxth.w	fp, r7
 800701e:	b29b      	uxth	r3, r3
 8007020:	fb0a 330b 	mla	r3, sl, fp, r3
 8007024:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007028:	f8d9 7000 	ldr.w	r7, [r9]
 800702c:	4463      	add	r3, ip
 800702e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007032:	fb0a c70b 	mla	r7, sl, fp, ip
 8007036:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007040:	4572      	cmp	r2, lr
 8007042:	f849 3b04 	str.w	r3, [r9], #4
 8007046:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800704a:	d8e2      	bhi.n	8007012 <__multiply+0xb2>
 800704c:	9b01      	ldr	r3, [sp, #4]
 800704e:	f845 c003 	str.w	ip, [r5, r3]
 8007052:	9b03      	ldr	r3, [sp, #12]
 8007054:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007058:	3104      	adds	r1, #4
 800705a:	f1b9 0f00 	cmp.w	r9, #0
 800705e:	d021      	beq.n	80070a4 <__multiply+0x144>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	f104 0c14 	add.w	ip, r4, #20
 8007066:	46ae      	mov	lr, r5
 8007068:	f04f 0a00 	mov.w	sl, #0
 800706c:	f8bc b000 	ldrh.w	fp, [ip]
 8007070:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007074:	fb09 770b 	mla	r7, r9, fp, r7
 8007078:	4457      	add	r7, sl
 800707a:	b29b      	uxth	r3, r3
 800707c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007080:	f84e 3b04 	str.w	r3, [lr], #4
 8007084:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007088:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800708c:	f8be 3000 	ldrh.w	r3, [lr]
 8007090:	fb09 330a 	mla	r3, r9, sl, r3
 8007094:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007098:	4562      	cmp	r2, ip
 800709a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800709e:	d8e5      	bhi.n	800706c <__multiply+0x10c>
 80070a0:	9f01      	ldr	r7, [sp, #4]
 80070a2:	51eb      	str	r3, [r5, r7]
 80070a4:	3504      	adds	r5, #4
 80070a6:	e799      	b.n	8006fdc <__multiply+0x7c>
 80070a8:	3e01      	subs	r6, #1
 80070aa:	e79b      	b.n	8006fe4 <__multiply+0x84>
 80070ac:	080095b9 	.word	0x080095b9
 80070b0:	080095ca 	.word	0x080095ca

080070b4 <__pow5mult>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	4615      	mov	r5, r2
 80070ba:	f012 0203 	ands.w	r2, r2, #3
 80070be:	4607      	mov	r7, r0
 80070c0:	460e      	mov	r6, r1
 80070c2:	d007      	beq.n	80070d4 <__pow5mult+0x20>
 80070c4:	4c25      	ldr	r4, [pc, #148]	@ (800715c <__pow5mult+0xa8>)
 80070c6:	3a01      	subs	r2, #1
 80070c8:	2300      	movs	r3, #0
 80070ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ce:	f7ff fe55 	bl	8006d7c <__multadd>
 80070d2:	4606      	mov	r6, r0
 80070d4:	10ad      	asrs	r5, r5, #2
 80070d6:	d03d      	beq.n	8007154 <__pow5mult+0xa0>
 80070d8:	69fc      	ldr	r4, [r7, #28]
 80070da:	b97c      	cbnz	r4, 80070fc <__pow5mult+0x48>
 80070dc:	2010      	movs	r0, #16
 80070de:	f7ff fd35 	bl	8006b4c <malloc>
 80070e2:	4602      	mov	r2, r0
 80070e4:	61f8      	str	r0, [r7, #28]
 80070e6:	b928      	cbnz	r0, 80070f4 <__pow5mult+0x40>
 80070e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007160 <__pow5mult+0xac>)
 80070ea:	481e      	ldr	r0, [pc, #120]	@ (8007164 <__pow5mult+0xb0>)
 80070ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80070f0:	f001 fb6e 	bl	80087d0 <__assert_func>
 80070f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070f8:	6004      	str	r4, [r0, #0]
 80070fa:	60c4      	str	r4, [r0, #12]
 80070fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007104:	b94c      	cbnz	r4, 800711a <__pow5mult+0x66>
 8007106:	f240 2171 	movw	r1, #625	@ 0x271
 800710a:	4638      	mov	r0, r7
 800710c:	f7ff ff12 	bl	8006f34 <__i2b>
 8007110:	2300      	movs	r3, #0
 8007112:	f8c8 0008 	str.w	r0, [r8, #8]
 8007116:	4604      	mov	r4, r0
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	f04f 0900 	mov.w	r9, #0
 800711e:	07eb      	lsls	r3, r5, #31
 8007120:	d50a      	bpl.n	8007138 <__pow5mult+0x84>
 8007122:	4631      	mov	r1, r6
 8007124:	4622      	mov	r2, r4
 8007126:	4638      	mov	r0, r7
 8007128:	f7ff ff1a 	bl	8006f60 <__multiply>
 800712c:	4631      	mov	r1, r6
 800712e:	4680      	mov	r8, r0
 8007130:	4638      	mov	r0, r7
 8007132:	f7ff fe01 	bl	8006d38 <_Bfree>
 8007136:	4646      	mov	r6, r8
 8007138:	106d      	asrs	r5, r5, #1
 800713a:	d00b      	beq.n	8007154 <__pow5mult+0xa0>
 800713c:	6820      	ldr	r0, [r4, #0]
 800713e:	b938      	cbnz	r0, 8007150 <__pow5mult+0x9c>
 8007140:	4622      	mov	r2, r4
 8007142:	4621      	mov	r1, r4
 8007144:	4638      	mov	r0, r7
 8007146:	f7ff ff0b 	bl	8006f60 <__multiply>
 800714a:	6020      	str	r0, [r4, #0]
 800714c:	f8c0 9000 	str.w	r9, [r0]
 8007150:	4604      	mov	r4, r0
 8007152:	e7e4      	b.n	800711e <__pow5mult+0x6a>
 8007154:	4630      	mov	r0, r6
 8007156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800715a:	bf00      	nop
 800715c:	08009624 	.word	0x08009624
 8007160:	0800954a 	.word	0x0800954a
 8007164:	080095ca 	.word	0x080095ca

08007168 <__lshift>:
 8007168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716c:	460c      	mov	r4, r1
 800716e:	6849      	ldr	r1, [r1, #4]
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007176:	68a3      	ldr	r3, [r4, #8]
 8007178:	4607      	mov	r7, r0
 800717a:	4691      	mov	r9, r2
 800717c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007180:	f108 0601 	add.w	r6, r8, #1
 8007184:	42b3      	cmp	r3, r6
 8007186:	db0b      	blt.n	80071a0 <__lshift+0x38>
 8007188:	4638      	mov	r0, r7
 800718a:	f7ff fd95 	bl	8006cb8 <_Balloc>
 800718e:	4605      	mov	r5, r0
 8007190:	b948      	cbnz	r0, 80071a6 <__lshift+0x3e>
 8007192:	4602      	mov	r2, r0
 8007194:	4b28      	ldr	r3, [pc, #160]	@ (8007238 <__lshift+0xd0>)
 8007196:	4829      	ldr	r0, [pc, #164]	@ (800723c <__lshift+0xd4>)
 8007198:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800719c:	f001 fb18 	bl	80087d0 <__assert_func>
 80071a0:	3101      	adds	r1, #1
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	e7ee      	b.n	8007184 <__lshift+0x1c>
 80071a6:	2300      	movs	r3, #0
 80071a8:	f100 0114 	add.w	r1, r0, #20
 80071ac:	f100 0210 	add.w	r2, r0, #16
 80071b0:	4618      	mov	r0, r3
 80071b2:	4553      	cmp	r3, sl
 80071b4:	db33      	blt.n	800721e <__lshift+0xb6>
 80071b6:	6920      	ldr	r0, [r4, #16]
 80071b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071bc:	f104 0314 	add.w	r3, r4, #20
 80071c0:	f019 091f 	ands.w	r9, r9, #31
 80071c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071cc:	d02b      	beq.n	8007226 <__lshift+0xbe>
 80071ce:	f1c9 0e20 	rsb	lr, r9, #32
 80071d2:	468a      	mov	sl, r1
 80071d4:	2200      	movs	r2, #0
 80071d6:	6818      	ldr	r0, [r3, #0]
 80071d8:	fa00 f009 	lsl.w	r0, r0, r9
 80071dc:	4310      	orrs	r0, r2
 80071de:	f84a 0b04 	str.w	r0, [sl], #4
 80071e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e6:	459c      	cmp	ip, r3
 80071e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80071ec:	d8f3      	bhi.n	80071d6 <__lshift+0x6e>
 80071ee:	ebac 0304 	sub.w	r3, ip, r4
 80071f2:	3b15      	subs	r3, #21
 80071f4:	f023 0303 	bic.w	r3, r3, #3
 80071f8:	3304      	adds	r3, #4
 80071fa:	f104 0015 	add.w	r0, r4, #21
 80071fe:	4584      	cmp	ip, r0
 8007200:	bf38      	it	cc
 8007202:	2304      	movcc	r3, #4
 8007204:	50ca      	str	r2, [r1, r3]
 8007206:	b10a      	cbz	r2, 800720c <__lshift+0xa4>
 8007208:	f108 0602 	add.w	r6, r8, #2
 800720c:	3e01      	subs	r6, #1
 800720e:	4638      	mov	r0, r7
 8007210:	612e      	str	r6, [r5, #16]
 8007212:	4621      	mov	r1, r4
 8007214:	f7ff fd90 	bl	8006d38 <_Bfree>
 8007218:	4628      	mov	r0, r5
 800721a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007222:	3301      	adds	r3, #1
 8007224:	e7c5      	b.n	80071b2 <__lshift+0x4a>
 8007226:	3904      	subs	r1, #4
 8007228:	f853 2b04 	ldr.w	r2, [r3], #4
 800722c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007230:	459c      	cmp	ip, r3
 8007232:	d8f9      	bhi.n	8007228 <__lshift+0xc0>
 8007234:	e7ea      	b.n	800720c <__lshift+0xa4>
 8007236:	bf00      	nop
 8007238:	080095b9 	.word	0x080095b9
 800723c:	080095ca 	.word	0x080095ca

08007240 <__mcmp>:
 8007240:	690a      	ldr	r2, [r1, #16]
 8007242:	4603      	mov	r3, r0
 8007244:	6900      	ldr	r0, [r0, #16]
 8007246:	1a80      	subs	r0, r0, r2
 8007248:	b530      	push	{r4, r5, lr}
 800724a:	d10e      	bne.n	800726a <__mcmp+0x2a>
 800724c:	3314      	adds	r3, #20
 800724e:	3114      	adds	r1, #20
 8007250:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007254:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007258:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800725c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007260:	4295      	cmp	r5, r2
 8007262:	d003      	beq.n	800726c <__mcmp+0x2c>
 8007264:	d205      	bcs.n	8007272 <__mcmp+0x32>
 8007266:	f04f 30ff 	mov.w	r0, #4294967295
 800726a:	bd30      	pop	{r4, r5, pc}
 800726c:	42a3      	cmp	r3, r4
 800726e:	d3f3      	bcc.n	8007258 <__mcmp+0x18>
 8007270:	e7fb      	b.n	800726a <__mcmp+0x2a>
 8007272:	2001      	movs	r0, #1
 8007274:	e7f9      	b.n	800726a <__mcmp+0x2a>
	...

08007278 <__mdiff>:
 8007278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	4689      	mov	r9, r1
 800727e:	4606      	mov	r6, r0
 8007280:	4611      	mov	r1, r2
 8007282:	4648      	mov	r0, r9
 8007284:	4614      	mov	r4, r2
 8007286:	f7ff ffdb 	bl	8007240 <__mcmp>
 800728a:	1e05      	subs	r5, r0, #0
 800728c:	d112      	bne.n	80072b4 <__mdiff+0x3c>
 800728e:	4629      	mov	r1, r5
 8007290:	4630      	mov	r0, r6
 8007292:	f7ff fd11 	bl	8006cb8 <_Balloc>
 8007296:	4602      	mov	r2, r0
 8007298:	b928      	cbnz	r0, 80072a6 <__mdiff+0x2e>
 800729a:	4b3f      	ldr	r3, [pc, #252]	@ (8007398 <__mdiff+0x120>)
 800729c:	f240 2137 	movw	r1, #567	@ 0x237
 80072a0:	483e      	ldr	r0, [pc, #248]	@ (800739c <__mdiff+0x124>)
 80072a2:	f001 fa95 	bl	80087d0 <__assert_func>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072ac:	4610      	mov	r0, r2
 80072ae:	b003      	add	sp, #12
 80072b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	bfbc      	itt	lt
 80072b6:	464b      	movlt	r3, r9
 80072b8:	46a1      	movlt	r9, r4
 80072ba:	4630      	mov	r0, r6
 80072bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80072c0:	bfba      	itte	lt
 80072c2:	461c      	movlt	r4, r3
 80072c4:	2501      	movlt	r5, #1
 80072c6:	2500      	movge	r5, #0
 80072c8:	f7ff fcf6 	bl	8006cb8 <_Balloc>
 80072cc:	4602      	mov	r2, r0
 80072ce:	b918      	cbnz	r0, 80072d8 <__mdiff+0x60>
 80072d0:	4b31      	ldr	r3, [pc, #196]	@ (8007398 <__mdiff+0x120>)
 80072d2:	f240 2145 	movw	r1, #581	@ 0x245
 80072d6:	e7e3      	b.n	80072a0 <__mdiff+0x28>
 80072d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80072dc:	6926      	ldr	r6, [r4, #16]
 80072de:	60c5      	str	r5, [r0, #12]
 80072e0:	f109 0310 	add.w	r3, r9, #16
 80072e4:	f109 0514 	add.w	r5, r9, #20
 80072e8:	f104 0e14 	add.w	lr, r4, #20
 80072ec:	f100 0b14 	add.w	fp, r0, #20
 80072f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	46d9      	mov	r9, fp
 80072fc:	f04f 0c00 	mov.w	ip, #0
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007306:	f853 af04 	ldr.w	sl, [r3, #4]!
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	fa1f f38a 	uxth.w	r3, sl
 8007310:	4619      	mov	r1, r3
 8007312:	b283      	uxth	r3, r0
 8007314:	1acb      	subs	r3, r1, r3
 8007316:	0c00      	lsrs	r0, r0, #16
 8007318:	4463      	add	r3, ip
 800731a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800731e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007322:	b29b      	uxth	r3, r3
 8007324:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007328:	4576      	cmp	r6, lr
 800732a:	f849 3b04 	str.w	r3, [r9], #4
 800732e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007332:	d8e5      	bhi.n	8007300 <__mdiff+0x88>
 8007334:	1b33      	subs	r3, r6, r4
 8007336:	3b15      	subs	r3, #21
 8007338:	f023 0303 	bic.w	r3, r3, #3
 800733c:	3415      	adds	r4, #21
 800733e:	3304      	adds	r3, #4
 8007340:	42a6      	cmp	r6, r4
 8007342:	bf38      	it	cc
 8007344:	2304      	movcc	r3, #4
 8007346:	441d      	add	r5, r3
 8007348:	445b      	add	r3, fp
 800734a:	461e      	mov	r6, r3
 800734c:	462c      	mov	r4, r5
 800734e:	4544      	cmp	r4, r8
 8007350:	d30e      	bcc.n	8007370 <__mdiff+0xf8>
 8007352:	f108 0103 	add.w	r1, r8, #3
 8007356:	1b49      	subs	r1, r1, r5
 8007358:	f021 0103 	bic.w	r1, r1, #3
 800735c:	3d03      	subs	r5, #3
 800735e:	45a8      	cmp	r8, r5
 8007360:	bf38      	it	cc
 8007362:	2100      	movcc	r1, #0
 8007364:	440b      	add	r3, r1
 8007366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800736a:	b191      	cbz	r1, 8007392 <__mdiff+0x11a>
 800736c:	6117      	str	r7, [r2, #16]
 800736e:	e79d      	b.n	80072ac <__mdiff+0x34>
 8007370:	f854 1b04 	ldr.w	r1, [r4], #4
 8007374:	46e6      	mov	lr, ip
 8007376:	0c08      	lsrs	r0, r1, #16
 8007378:	fa1c fc81 	uxtah	ip, ip, r1
 800737c:	4471      	add	r1, lr
 800737e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007382:	b289      	uxth	r1, r1
 8007384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007388:	f846 1b04 	str.w	r1, [r6], #4
 800738c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007390:	e7dd      	b.n	800734e <__mdiff+0xd6>
 8007392:	3f01      	subs	r7, #1
 8007394:	e7e7      	b.n	8007366 <__mdiff+0xee>
 8007396:	bf00      	nop
 8007398:	080095b9 	.word	0x080095b9
 800739c:	080095ca 	.word	0x080095ca

080073a0 <__ulp>:
 80073a0:	b082      	sub	sp, #8
 80073a2:	ed8d 0b00 	vstr	d0, [sp]
 80073a6:	9a01      	ldr	r2, [sp, #4]
 80073a8:	4b0f      	ldr	r3, [pc, #60]	@ (80073e8 <__ulp+0x48>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dc08      	bgt.n	80073c6 <__ulp+0x26>
 80073b4:	425b      	negs	r3, r3
 80073b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80073ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073be:	da04      	bge.n	80073ca <__ulp+0x2a>
 80073c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80073c4:	4113      	asrs	r3, r2
 80073c6:	2200      	movs	r2, #0
 80073c8:	e008      	b.n	80073dc <__ulp+0x3c>
 80073ca:	f1a2 0314 	sub.w	r3, r2, #20
 80073ce:	2b1e      	cmp	r3, #30
 80073d0:	bfda      	itte	le
 80073d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80073d6:	40da      	lsrle	r2, r3
 80073d8:	2201      	movgt	r2, #1
 80073da:	2300      	movs	r3, #0
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	ec41 0b10 	vmov	d0, r0, r1
 80073e4:	b002      	add	sp, #8
 80073e6:	4770      	bx	lr
 80073e8:	7ff00000 	.word	0x7ff00000

080073ec <__b2d>:
 80073ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f0:	6906      	ldr	r6, [r0, #16]
 80073f2:	f100 0814 	add.w	r8, r0, #20
 80073f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80073fa:	1f37      	subs	r7, r6, #4
 80073fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007400:	4610      	mov	r0, r2
 8007402:	f7ff fd4b 	bl	8006e9c <__hi0bits>
 8007406:	f1c0 0320 	rsb	r3, r0, #32
 800740a:	280a      	cmp	r0, #10
 800740c:	600b      	str	r3, [r1, #0]
 800740e:	491b      	ldr	r1, [pc, #108]	@ (800747c <__b2d+0x90>)
 8007410:	dc15      	bgt.n	800743e <__b2d+0x52>
 8007412:	f1c0 0c0b 	rsb	ip, r0, #11
 8007416:	fa22 f30c 	lsr.w	r3, r2, ip
 800741a:	45b8      	cmp	r8, r7
 800741c:	ea43 0501 	orr.w	r5, r3, r1
 8007420:	bf34      	ite	cc
 8007422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007426:	2300      	movcs	r3, #0
 8007428:	3015      	adds	r0, #21
 800742a:	fa02 f000 	lsl.w	r0, r2, r0
 800742e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007432:	4303      	orrs	r3, r0
 8007434:	461c      	mov	r4, r3
 8007436:	ec45 4b10 	vmov	d0, r4, r5
 800743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743e:	45b8      	cmp	r8, r7
 8007440:	bf3a      	itte	cc
 8007442:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007446:	f1a6 0708 	subcc.w	r7, r6, #8
 800744a:	2300      	movcs	r3, #0
 800744c:	380b      	subs	r0, #11
 800744e:	d012      	beq.n	8007476 <__b2d+0x8a>
 8007450:	f1c0 0120 	rsb	r1, r0, #32
 8007454:	fa23 f401 	lsr.w	r4, r3, r1
 8007458:	4082      	lsls	r2, r0
 800745a:	4322      	orrs	r2, r4
 800745c:	4547      	cmp	r7, r8
 800745e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007462:	bf8c      	ite	hi
 8007464:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007468:	2200      	movls	r2, #0
 800746a:	4083      	lsls	r3, r0
 800746c:	40ca      	lsrs	r2, r1
 800746e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007472:	4313      	orrs	r3, r2
 8007474:	e7de      	b.n	8007434 <__b2d+0x48>
 8007476:	ea42 0501 	orr.w	r5, r2, r1
 800747a:	e7db      	b.n	8007434 <__b2d+0x48>
 800747c:	3ff00000 	.word	0x3ff00000

08007480 <__d2b>:
 8007480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007484:	460f      	mov	r7, r1
 8007486:	2101      	movs	r1, #1
 8007488:	ec59 8b10 	vmov	r8, r9, d0
 800748c:	4616      	mov	r6, r2
 800748e:	f7ff fc13 	bl	8006cb8 <_Balloc>
 8007492:	4604      	mov	r4, r0
 8007494:	b930      	cbnz	r0, 80074a4 <__d2b+0x24>
 8007496:	4602      	mov	r2, r0
 8007498:	4b23      	ldr	r3, [pc, #140]	@ (8007528 <__d2b+0xa8>)
 800749a:	4824      	ldr	r0, [pc, #144]	@ (800752c <__d2b+0xac>)
 800749c:	f240 310f 	movw	r1, #783	@ 0x30f
 80074a0:	f001 f996 	bl	80087d0 <__assert_func>
 80074a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074ac:	b10d      	cbz	r5, 80074b2 <__d2b+0x32>
 80074ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	f1b8 0300 	subs.w	r3, r8, #0
 80074b8:	d023      	beq.n	8007502 <__d2b+0x82>
 80074ba:	4668      	mov	r0, sp
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	f7ff fd0c 	bl	8006eda <__lo0bits>
 80074c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074c6:	b1d0      	cbz	r0, 80074fe <__d2b+0x7e>
 80074c8:	f1c0 0320 	rsb	r3, r0, #32
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	430b      	orrs	r3, r1
 80074d2:	40c2      	lsrs	r2, r0
 80074d4:	6163      	str	r3, [r4, #20]
 80074d6:	9201      	str	r2, [sp, #4]
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	61a3      	str	r3, [r4, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bf0c      	ite	eq
 80074e0:	2201      	moveq	r2, #1
 80074e2:	2202      	movne	r2, #2
 80074e4:	6122      	str	r2, [r4, #16]
 80074e6:	b1a5      	cbz	r5, 8007512 <__d2b+0x92>
 80074e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80074ec:	4405      	add	r5, r0
 80074ee:	603d      	str	r5, [r7, #0]
 80074f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80074f4:	6030      	str	r0, [r6, #0]
 80074f6:	4620      	mov	r0, r4
 80074f8:	b003      	add	sp, #12
 80074fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074fe:	6161      	str	r1, [r4, #20]
 8007500:	e7ea      	b.n	80074d8 <__d2b+0x58>
 8007502:	a801      	add	r0, sp, #4
 8007504:	f7ff fce9 	bl	8006eda <__lo0bits>
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	6163      	str	r3, [r4, #20]
 800750c:	3020      	adds	r0, #32
 800750e:	2201      	movs	r2, #1
 8007510:	e7e8      	b.n	80074e4 <__d2b+0x64>
 8007512:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007516:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800751a:	6038      	str	r0, [r7, #0]
 800751c:	6918      	ldr	r0, [r3, #16]
 800751e:	f7ff fcbd 	bl	8006e9c <__hi0bits>
 8007522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007526:	e7e5      	b.n	80074f4 <__d2b+0x74>
 8007528:	080095b9 	.word	0x080095b9
 800752c:	080095ca 	.word	0x080095ca

08007530 <__ratio>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	b085      	sub	sp, #20
 8007536:	e9cd 1000 	strd	r1, r0, [sp]
 800753a:	a902      	add	r1, sp, #8
 800753c:	f7ff ff56 	bl	80073ec <__b2d>
 8007540:	9800      	ldr	r0, [sp, #0]
 8007542:	a903      	add	r1, sp, #12
 8007544:	ec55 4b10 	vmov	r4, r5, d0
 8007548:	f7ff ff50 	bl	80073ec <__b2d>
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	6919      	ldr	r1, [r3, #16]
 8007550:	9b00      	ldr	r3, [sp, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	1ac9      	subs	r1, r1, r3
 8007556:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	ec5b ab10 	vmov	sl, fp, d0
 8007560:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007564:	2b00      	cmp	r3, #0
 8007566:	bfce      	itee	gt
 8007568:	462a      	movgt	r2, r5
 800756a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800756e:	465a      	movle	r2, fp
 8007570:	462f      	mov	r7, r5
 8007572:	46d9      	mov	r9, fp
 8007574:	bfcc      	ite	gt
 8007576:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800757a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800757e:	464b      	mov	r3, r9
 8007580:	4652      	mov	r2, sl
 8007582:	4620      	mov	r0, r4
 8007584:	4639      	mov	r1, r7
 8007586:	f7f9 f969 	bl	800085c <__aeabi_ddiv>
 800758a:	ec41 0b10 	vmov	d0, r0, r1
 800758e:	b005      	add	sp, #20
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007594 <__copybits>:
 8007594:	3901      	subs	r1, #1
 8007596:	b570      	push	{r4, r5, r6, lr}
 8007598:	1149      	asrs	r1, r1, #5
 800759a:	6914      	ldr	r4, [r2, #16]
 800759c:	3101      	adds	r1, #1
 800759e:	f102 0314 	add.w	r3, r2, #20
 80075a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075aa:	1f05      	subs	r5, r0, #4
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d30c      	bcc.n	80075ca <__copybits+0x36>
 80075b0:	1aa3      	subs	r3, r4, r2
 80075b2:	3b11      	subs	r3, #17
 80075b4:	f023 0303 	bic.w	r3, r3, #3
 80075b8:	3211      	adds	r2, #17
 80075ba:	42a2      	cmp	r2, r4
 80075bc:	bf88      	it	hi
 80075be:	2300      	movhi	r3, #0
 80075c0:	4418      	add	r0, r3
 80075c2:	2300      	movs	r3, #0
 80075c4:	4288      	cmp	r0, r1
 80075c6:	d305      	bcc.n	80075d4 <__copybits+0x40>
 80075c8:	bd70      	pop	{r4, r5, r6, pc}
 80075ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80075ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80075d2:	e7eb      	b.n	80075ac <__copybits+0x18>
 80075d4:	f840 3b04 	str.w	r3, [r0], #4
 80075d8:	e7f4      	b.n	80075c4 <__copybits+0x30>

080075da <__any_on>:
 80075da:	f100 0214 	add.w	r2, r0, #20
 80075de:	6900      	ldr	r0, [r0, #16]
 80075e0:	114b      	asrs	r3, r1, #5
 80075e2:	4298      	cmp	r0, r3
 80075e4:	b510      	push	{r4, lr}
 80075e6:	db11      	blt.n	800760c <__any_on+0x32>
 80075e8:	dd0a      	ble.n	8007600 <__any_on+0x26>
 80075ea:	f011 011f 	ands.w	r1, r1, #31
 80075ee:	d007      	beq.n	8007600 <__any_on+0x26>
 80075f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075f4:	fa24 f001 	lsr.w	r0, r4, r1
 80075f8:	fa00 f101 	lsl.w	r1, r0, r1
 80075fc:	428c      	cmp	r4, r1
 80075fe:	d10b      	bne.n	8007618 <__any_on+0x3e>
 8007600:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007604:	4293      	cmp	r3, r2
 8007606:	d803      	bhi.n	8007610 <__any_on+0x36>
 8007608:	2000      	movs	r0, #0
 800760a:	bd10      	pop	{r4, pc}
 800760c:	4603      	mov	r3, r0
 800760e:	e7f7      	b.n	8007600 <__any_on+0x26>
 8007610:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007614:	2900      	cmp	r1, #0
 8007616:	d0f5      	beq.n	8007604 <__any_on+0x2a>
 8007618:	2001      	movs	r0, #1
 800761a:	e7f6      	b.n	800760a <__any_on+0x30>

0800761c <sulp>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4604      	mov	r4, r0
 8007620:	460d      	mov	r5, r1
 8007622:	ec45 4b10 	vmov	d0, r4, r5
 8007626:	4616      	mov	r6, r2
 8007628:	f7ff feba 	bl	80073a0 <__ulp>
 800762c:	ec51 0b10 	vmov	r0, r1, d0
 8007630:	b17e      	cbz	r6, 8007652 <sulp+0x36>
 8007632:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007636:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd09      	ble.n	8007652 <sulp+0x36>
 800763e:	051b      	lsls	r3, r3, #20
 8007640:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007644:	2400      	movs	r4, #0
 8007646:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	f7f8 ffdb 	bl	8000608 <__aeabi_dmul>
 8007652:	ec41 0b10 	vmov	d0, r0, r1
 8007656:	bd70      	pop	{r4, r5, r6, pc}

08007658 <_strtod_l>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	b09f      	sub	sp, #124	@ 0x7c
 800765e:	460c      	mov	r4, r1
 8007660:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007662:	2200      	movs	r2, #0
 8007664:	921a      	str	r2, [sp, #104]	@ 0x68
 8007666:	9005      	str	r0, [sp, #20]
 8007668:	f04f 0a00 	mov.w	sl, #0
 800766c:	f04f 0b00 	mov.w	fp, #0
 8007670:	460a      	mov	r2, r1
 8007672:	9219      	str	r2, [sp, #100]	@ 0x64
 8007674:	7811      	ldrb	r1, [r2, #0]
 8007676:	292b      	cmp	r1, #43	@ 0x2b
 8007678:	d04a      	beq.n	8007710 <_strtod_l+0xb8>
 800767a:	d838      	bhi.n	80076ee <_strtod_l+0x96>
 800767c:	290d      	cmp	r1, #13
 800767e:	d832      	bhi.n	80076e6 <_strtod_l+0x8e>
 8007680:	2908      	cmp	r1, #8
 8007682:	d832      	bhi.n	80076ea <_strtod_l+0x92>
 8007684:	2900      	cmp	r1, #0
 8007686:	d03b      	beq.n	8007700 <_strtod_l+0xa8>
 8007688:	2200      	movs	r2, #0
 800768a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800768c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800768e:	782a      	ldrb	r2, [r5, #0]
 8007690:	2a30      	cmp	r2, #48	@ 0x30
 8007692:	f040 80b3 	bne.w	80077fc <_strtod_l+0x1a4>
 8007696:	786a      	ldrb	r2, [r5, #1]
 8007698:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800769c:	2a58      	cmp	r2, #88	@ 0x58
 800769e:	d16e      	bne.n	800777e <_strtod_l+0x126>
 80076a0:	9302      	str	r3, [sp, #8]
 80076a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	4a8e      	ldr	r2, [pc, #568]	@ (80078e4 <_strtod_l+0x28c>)
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076b0:	a919      	add	r1, sp, #100	@ 0x64
 80076b2:	f001 f927 	bl	8008904 <__gethex>
 80076b6:	f010 060f 	ands.w	r6, r0, #15
 80076ba:	4604      	mov	r4, r0
 80076bc:	d005      	beq.n	80076ca <_strtod_l+0x72>
 80076be:	2e06      	cmp	r6, #6
 80076c0:	d128      	bne.n	8007714 <_strtod_l+0xbc>
 80076c2:	3501      	adds	r5, #1
 80076c4:	2300      	movs	r3, #0
 80076c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80076c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 858e 	bne.w	80081ee <_strtod_l+0xb96>
 80076d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d4:	b1cb      	cbz	r3, 800770a <_strtod_l+0xb2>
 80076d6:	4652      	mov	r2, sl
 80076d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80076dc:	ec43 2b10 	vmov	d0, r2, r3
 80076e0:	b01f      	add	sp, #124	@ 0x7c
 80076e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e6:	2920      	cmp	r1, #32
 80076e8:	d1ce      	bne.n	8007688 <_strtod_l+0x30>
 80076ea:	3201      	adds	r2, #1
 80076ec:	e7c1      	b.n	8007672 <_strtod_l+0x1a>
 80076ee:	292d      	cmp	r1, #45	@ 0x2d
 80076f0:	d1ca      	bne.n	8007688 <_strtod_l+0x30>
 80076f2:	2101      	movs	r1, #1
 80076f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80076f6:	1c51      	adds	r1, r2, #1
 80076f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80076fa:	7852      	ldrb	r2, [r2, #1]
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	d1c5      	bne.n	800768c <_strtod_l+0x34>
 8007700:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007702:	9419      	str	r4, [sp, #100]	@ 0x64
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 8570 	bne.w	80081ea <_strtod_l+0xb92>
 800770a:	4652      	mov	r2, sl
 800770c:	465b      	mov	r3, fp
 800770e:	e7e5      	b.n	80076dc <_strtod_l+0x84>
 8007710:	2100      	movs	r1, #0
 8007712:	e7ef      	b.n	80076f4 <_strtod_l+0x9c>
 8007714:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007716:	b13a      	cbz	r2, 8007728 <_strtod_l+0xd0>
 8007718:	2135      	movs	r1, #53	@ 0x35
 800771a:	a81c      	add	r0, sp, #112	@ 0x70
 800771c:	f7ff ff3a 	bl	8007594 <__copybits>
 8007720:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007722:	9805      	ldr	r0, [sp, #20]
 8007724:	f7ff fb08 	bl	8006d38 <_Bfree>
 8007728:	3e01      	subs	r6, #1
 800772a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800772c:	2e04      	cmp	r6, #4
 800772e:	d806      	bhi.n	800773e <_strtod_l+0xe6>
 8007730:	e8df f006 	tbb	[pc, r6]
 8007734:	201d0314 	.word	0x201d0314
 8007738:	14          	.byte	0x14
 8007739:	00          	.byte	0x00
 800773a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800773e:	05e1      	lsls	r1, r4, #23
 8007740:	bf48      	it	mi
 8007742:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800774a:	0d1b      	lsrs	r3, r3, #20
 800774c:	051b      	lsls	r3, r3, #20
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1bb      	bne.n	80076ca <_strtod_l+0x72>
 8007752:	f7fe fb31 	bl	8005db8 <__errno>
 8007756:	2322      	movs	r3, #34	@ 0x22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	e7b6      	b.n	80076ca <_strtod_l+0x72>
 800775c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007760:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007764:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007768:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800776c:	e7e7      	b.n	800773e <_strtod_l+0xe6>
 800776e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80078ec <_strtod_l+0x294>
 8007772:	e7e4      	b.n	800773e <_strtod_l+0xe6>
 8007774:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007778:	f04f 3aff 	mov.w	sl, #4294967295
 800777c:	e7df      	b.n	800773e <_strtod_l+0xe6>
 800777e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	9219      	str	r2, [sp, #100]	@ 0x64
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b30      	cmp	r3, #48	@ 0x30
 8007788:	d0f9      	beq.n	800777e <_strtod_l+0x126>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d09d      	beq.n	80076ca <_strtod_l+0x72>
 800778e:	2301      	movs	r3, #1
 8007790:	9309      	str	r3, [sp, #36]	@ 0x24
 8007792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007794:	930c      	str	r3, [sp, #48]	@ 0x30
 8007796:	2300      	movs	r3, #0
 8007798:	9308      	str	r3, [sp, #32]
 800779a:	930a      	str	r3, [sp, #40]	@ 0x28
 800779c:	461f      	mov	r7, r3
 800779e:	220a      	movs	r2, #10
 80077a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80077a2:	7805      	ldrb	r5, [r0, #0]
 80077a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80077a8:	b2d9      	uxtb	r1, r3
 80077aa:	2909      	cmp	r1, #9
 80077ac:	d928      	bls.n	8007800 <_strtod_l+0x1a8>
 80077ae:	494e      	ldr	r1, [pc, #312]	@ (80078e8 <_strtod_l+0x290>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	f000 ffd5 	bl	8008760 <strncmp>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d032      	beq.n	8007820 <_strtod_l+0x1c8>
 80077ba:	2000      	movs	r0, #0
 80077bc:	462a      	mov	r2, r5
 80077be:	4681      	mov	r9, r0
 80077c0:	463d      	mov	r5, r7
 80077c2:	4603      	mov	r3, r0
 80077c4:	2a65      	cmp	r2, #101	@ 0x65
 80077c6:	d001      	beq.n	80077cc <_strtod_l+0x174>
 80077c8:	2a45      	cmp	r2, #69	@ 0x45
 80077ca:	d114      	bne.n	80077f6 <_strtod_l+0x19e>
 80077cc:	b91d      	cbnz	r5, 80077d6 <_strtod_l+0x17e>
 80077ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077d0:	4302      	orrs	r2, r0
 80077d2:	d095      	beq.n	8007700 <_strtod_l+0xa8>
 80077d4:	2500      	movs	r5, #0
 80077d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80077d8:	1c62      	adds	r2, r4, #1
 80077da:	9219      	str	r2, [sp, #100]	@ 0x64
 80077dc:	7862      	ldrb	r2, [r4, #1]
 80077de:	2a2b      	cmp	r2, #43	@ 0x2b
 80077e0:	d077      	beq.n	80078d2 <_strtod_l+0x27a>
 80077e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80077e4:	d07b      	beq.n	80078de <_strtod_l+0x286>
 80077e6:	f04f 0c00 	mov.w	ip, #0
 80077ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80077ee:	2909      	cmp	r1, #9
 80077f0:	f240 8082 	bls.w	80078f8 <_strtod_l+0x2a0>
 80077f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80077f6:	f04f 0800 	mov.w	r8, #0
 80077fa:	e0a2      	b.n	8007942 <_strtod_l+0x2ea>
 80077fc:	2300      	movs	r3, #0
 80077fe:	e7c7      	b.n	8007790 <_strtod_l+0x138>
 8007800:	2f08      	cmp	r7, #8
 8007802:	bfd5      	itete	le
 8007804:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007806:	9908      	ldrgt	r1, [sp, #32]
 8007808:	fb02 3301 	mlale	r3, r2, r1, r3
 800780c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007810:	f100 0001 	add.w	r0, r0, #1
 8007814:	bfd4      	ite	le
 8007816:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007818:	9308      	strgt	r3, [sp, #32]
 800781a:	3701      	adds	r7, #1
 800781c:	9019      	str	r0, [sp, #100]	@ 0x64
 800781e:	e7bf      	b.n	80077a0 <_strtod_l+0x148>
 8007820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	9219      	str	r2, [sp, #100]	@ 0x64
 8007826:	785a      	ldrb	r2, [r3, #1]
 8007828:	b37f      	cbz	r7, 800788a <_strtod_l+0x232>
 800782a:	4681      	mov	r9, r0
 800782c:	463d      	mov	r5, r7
 800782e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007832:	2b09      	cmp	r3, #9
 8007834:	d912      	bls.n	800785c <_strtod_l+0x204>
 8007836:	2301      	movs	r3, #1
 8007838:	e7c4      	b.n	80077c4 <_strtod_l+0x16c>
 800783a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007840:	785a      	ldrb	r2, [r3, #1]
 8007842:	3001      	adds	r0, #1
 8007844:	2a30      	cmp	r2, #48	@ 0x30
 8007846:	d0f8      	beq.n	800783a <_strtod_l+0x1e2>
 8007848:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800784c:	2b08      	cmp	r3, #8
 800784e:	f200 84d3 	bhi.w	80081f8 <_strtod_l+0xba0>
 8007852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007854:	930c      	str	r3, [sp, #48]	@ 0x30
 8007856:	4681      	mov	r9, r0
 8007858:	2000      	movs	r0, #0
 800785a:	4605      	mov	r5, r0
 800785c:	3a30      	subs	r2, #48	@ 0x30
 800785e:	f100 0301 	add.w	r3, r0, #1
 8007862:	d02a      	beq.n	80078ba <_strtod_l+0x262>
 8007864:	4499      	add	r9, r3
 8007866:	eb00 0c05 	add.w	ip, r0, r5
 800786a:	462b      	mov	r3, r5
 800786c:	210a      	movs	r1, #10
 800786e:	4563      	cmp	r3, ip
 8007870:	d10d      	bne.n	800788e <_strtod_l+0x236>
 8007872:	1c69      	adds	r1, r5, #1
 8007874:	4401      	add	r1, r0
 8007876:	4428      	add	r0, r5
 8007878:	2808      	cmp	r0, #8
 800787a:	dc16      	bgt.n	80078aa <_strtod_l+0x252>
 800787c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800787e:	230a      	movs	r3, #10
 8007880:	fb03 2300 	mla	r3, r3, r0, r2
 8007884:	930a      	str	r3, [sp, #40]	@ 0x28
 8007886:	2300      	movs	r3, #0
 8007888:	e018      	b.n	80078bc <_strtod_l+0x264>
 800788a:	4638      	mov	r0, r7
 800788c:	e7da      	b.n	8007844 <_strtod_l+0x1ec>
 800788e:	2b08      	cmp	r3, #8
 8007890:	f103 0301 	add.w	r3, r3, #1
 8007894:	dc03      	bgt.n	800789e <_strtod_l+0x246>
 8007896:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007898:	434e      	muls	r6, r1
 800789a:	960a      	str	r6, [sp, #40]	@ 0x28
 800789c:	e7e7      	b.n	800786e <_strtod_l+0x216>
 800789e:	2b10      	cmp	r3, #16
 80078a0:	bfde      	ittt	le
 80078a2:	9e08      	ldrle	r6, [sp, #32]
 80078a4:	434e      	mulle	r6, r1
 80078a6:	9608      	strle	r6, [sp, #32]
 80078a8:	e7e1      	b.n	800786e <_strtod_l+0x216>
 80078aa:	280f      	cmp	r0, #15
 80078ac:	dceb      	bgt.n	8007886 <_strtod_l+0x22e>
 80078ae:	9808      	ldr	r0, [sp, #32]
 80078b0:	230a      	movs	r3, #10
 80078b2:	fb03 2300 	mla	r3, r3, r0, r2
 80078b6:	9308      	str	r3, [sp, #32]
 80078b8:	e7e5      	b.n	8007886 <_strtod_l+0x22e>
 80078ba:	4629      	mov	r1, r5
 80078bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078be:	1c50      	adds	r0, r2, #1
 80078c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80078c2:	7852      	ldrb	r2, [r2, #1]
 80078c4:	4618      	mov	r0, r3
 80078c6:	460d      	mov	r5, r1
 80078c8:	e7b1      	b.n	800782e <_strtod_l+0x1d6>
 80078ca:	f04f 0900 	mov.w	r9, #0
 80078ce:	2301      	movs	r3, #1
 80078d0:	e77d      	b.n	80077ce <_strtod_l+0x176>
 80078d2:	f04f 0c00 	mov.w	ip, #0
 80078d6:	1ca2      	adds	r2, r4, #2
 80078d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80078da:	78a2      	ldrb	r2, [r4, #2]
 80078dc:	e785      	b.n	80077ea <_strtod_l+0x192>
 80078de:	f04f 0c01 	mov.w	ip, #1
 80078e2:	e7f8      	b.n	80078d6 <_strtod_l+0x27e>
 80078e4:	08009738 	.word	0x08009738
 80078e8:	08009720 	.word	0x08009720
 80078ec:	7ff00000 	.word	0x7ff00000
 80078f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078f2:	1c51      	adds	r1, r2, #1
 80078f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80078f6:	7852      	ldrb	r2, [r2, #1]
 80078f8:	2a30      	cmp	r2, #48	@ 0x30
 80078fa:	d0f9      	beq.n	80078f0 <_strtod_l+0x298>
 80078fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007900:	2908      	cmp	r1, #8
 8007902:	f63f af78 	bhi.w	80077f6 <_strtod_l+0x19e>
 8007906:	3a30      	subs	r2, #48	@ 0x30
 8007908:	920e      	str	r2, [sp, #56]	@ 0x38
 800790a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800790c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800790e:	f04f 080a 	mov.w	r8, #10
 8007912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007914:	1c56      	adds	r6, r2, #1
 8007916:	9619      	str	r6, [sp, #100]	@ 0x64
 8007918:	7852      	ldrb	r2, [r2, #1]
 800791a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800791e:	f1be 0f09 	cmp.w	lr, #9
 8007922:	d939      	bls.n	8007998 <_strtod_l+0x340>
 8007924:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007926:	1a76      	subs	r6, r6, r1
 8007928:	2e08      	cmp	r6, #8
 800792a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800792e:	dc03      	bgt.n	8007938 <_strtod_l+0x2e0>
 8007930:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007932:	4588      	cmp	r8, r1
 8007934:	bfa8      	it	ge
 8007936:	4688      	movge	r8, r1
 8007938:	f1bc 0f00 	cmp.w	ip, #0
 800793c:	d001      	beq.n	8007942 <_strtod_l+0x2ea>
 800793e:	f1c8 0800 	rsb	r8, r8, #0
 8007942:	2d00      	cmp	r5, #0
 8007944:	d14e      	bne.n	80079e4 <_strtod_l+0x38c>
 8007946:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007948:	4308      	orrs	r0, r1
 800794a:	f47f aebe 	bne.w	80076ca <_strtod_l+0x72>
 800794e:	2b00      	cmp	r3, #0
 8007950:	f47f aed6 	bne.w	8007700 <_strtod_l+0xa8>
 8007954:	2a69      	cmp	r2, #105	@ 0x69
 8007956:	d028      	beq.n	80079aa <_strtod_l+0x352>
 8007958:	dc25      	bgt.n	80079a6 <_strtod_l+0x34e>
 800795a:	2a49      	cmp	r2, #73	@ 0x49
 800795c:	d025      	beq.n	80079aa <_strtod_l+0x352>
 800795e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007960:	f47f aece 	bne.w	8007700 <_strtod_l+0xa8>
 8007964:	499b      	ldr	r1, [pc, #620]	@ (8007bd4 <_strtod_l+0x57c>)
 8007966:	a819      	add	r0, sp, #100	@ 0x64
 8007968:	f001 f9ee 	bl	8008d48 <__match>
 800796c:	2800      	cmp	r0, #0
 800796e:	f43f aec7 	beq.w	8007700 <_strtod_l+0xa8>
 8007972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b28      	cmp	r3, #40	@ 0x28
 8007978:	d12e      	bne.n	80079d8 <_strtod_l+0x380>
 800797a:	4997      	ldr	r1, [pc, #604]	@ (8007bd8 <_strtod_l+0x580>)
 800797c:	aa1c      	add	r2, sp, #112	@ 0x70
 800797e:	a819      	add	r0, sp, #100	@ 0x64
 8007980:	f001 f9f6 	bl	8008d70 <__hexnan>
 8007984:	2805      	cmp	r0, #5
 8007986:	d127      	bne.n	80079d8 <_strtod_l+0x380>
 8007988:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800798a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800798e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007992:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007996:	e698      	b.n	80076ca <_strtod_l+0x72>
 8007998:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800799a:	fb08 2101 	mla	r1, r8, r1, r2
 800799e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80079a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80079a4:	e7b5      	b.n	8007912 <_strtod_l+0x2ba>
 80079a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80079a8:	e7da      	b.n	8007960 <_strtod_l+0x308>
 80079aa:	498c      	ldr	r1, [pc, #560]	@ (8007bdc <_strtod_l+0x584>)
 80079ac:	a819      	add	r0, sp, #100	@ 0x64
 80079ae:	f001 f9cb 	bl	8008d48 <__match>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f43f aea4 	beq.w	8007700 <_strtod_l+0xa8>
 80079b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079ba:	4989      	ldr	r1, [pc, #548]	@ (8007be0 <_strtod_l+0x588>)
 80079bc:	3b01      	subs	r3, #1
 80079be:	a819      	add	r0, sp, #100	@ 0x64
 80079c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80079c2:	f001 f9c1 	bl	8008d48 <__match>
 80079c6:	b910      	cbnz	r0, 80079ce <_strtod_l+0x376>
 80079c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079ca:	3301      	adds	r3, #1
 80079cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80079ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007bf0 <_strtod_l+0x598>
 80079d2:	f04f 0a00 	mov.w	sl, #0
 80079d6:	e678      	b.n	80076ca <_strtod_l+0x72>
 80079d8:	4882      	ldr	r0, [pc, #520]	@ (8007be4 <_strtod_l+0x58c>)
 80079da:	f000 fef1 	bl	80087c0 <nan>
 80079de:	ec5b ab10 	vmov	sl, fp, d0
 80079e2:	e672      	b.n	80076ca <_strtod_l+0x72>
 80079e4:	eba8 0309 	sub.w	r3, r8, r9
 80079e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ec:	2f00      	cmp	r7, #0
 80079ee:	bf08      	it	eq
 80079f0:	462f      	moveq	r7, r5
 80079f2:	2d10      	cmp	r5, #16
 80079f4:	462c      	mov	r4, r5
 80079f6:	bfa8      	it	ge
 80079f8:	2410      	movge	r4, #16
 80079fa:	f7f8 fd8b 	bl	8000514 <__aeabi_ui2d>
 80079fe:	2d09      	cmp	r5, #9
 8007a00:	4682      	mov	sl, r0
 8007a02:	468b      	mov	fp, r1
 8007a04:	dc13      	bgt.n	8007a2e <_strtod_l+0x3d6>
 8007a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f43f ae5e 	beq.w	80076ca <_strtod_l+0x72>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a10:	dd78      	ble.n	8007b04 <_strtod_l+0x4ac>
 8007a12:	2b16      	cmp	r3, #22
 8007a14:	dc5f      	bgt.n	8007ad6 <_strtod_l+0x47e>
 8007a16:	4974      	ldr	r1, [pc, #464]	@ (8007be8 <_strtod_l+0x590>)
 8007a18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a20:	4652      	mov	r2, sl
 8007a22:	465b      	mov	r3, fp
 8007a24:	f7f8 fdf0 	bl	8000608 <__aeabi_dmul>
 8007a28:	4682      	mov	sl, r0
 8007a2a:	468b      	mov	fp, r1
 8007a2c:	e64d      	b.n	80076ca <_strtod_l+0x72>
 8007a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8007be8 <_strtod_l+0x590>)
 8007a30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a38:	f7f8 fde6 	bl	8000608 <__aeabi_dmul>
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	9808      	ldr	r0, [sp, #32]
 8007a40:	468b      	mov	fp, r1
 8007a42:	f7f8 fd67 	bl	8000514 <__aeabi_ui2d>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	f7f8 fc25 	bl	800029c <__adddf3>
 8007a52:	2d0f      	cmp	r5, #15
 8007a54:	4682      	mov	sl, r0
 8007a56:	468b      	mov	fp, r1
 8007a58:	ddd5      	ble.n	8007a06 <_strtod_l+0x3ae>
 8007a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5c:	1b2c      	subs	r4, r5, r4
 8007a5e:	441c      	add	r4, r3
 8007a60:	2c00      	cmp	r4, #0
 8007a62:	f340 8096 	ble.w	8007b92 <_strtod_l+0x53a>
 8007a66:	f014 030f 	ands.w	r3, r4, #15
 8007a6a:	d00a      	beq.n	8007a82 <_strtod_l+0x42a>
 8007a6c:	495e      	ldr	r1, [pc, #376]	@ (8007be8 <_strtod_l+0x590>)
 8007a6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a72:	4652      	mov	r2, sl
 8007a74:	465b      	mov	r3, fp
 8007a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a7a:	f7f8 fdc5 	bl	8000608 <__aeabi_dmul>
 8007a7e:	4682      	mov	sl, r0
 8007a80:	468b      	mov	fp, r1
 8007a82:	f034 040f 	bics.w	r4, r4, #15
 8007a86:	d073      	beq.n	8007b70 <_strtod_l+0x518>
 8007a88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a8c:	dd48      	ble.n	8007b20 <_strtod_l+0x4c8>
 8007a8e:	2400      	movs	r4, #0
 8007a90:	46a0      	mov	r8, r4
 8007a92:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a94:	46a1      	mov	r9, r4
 8007a96:	9a05      	ldr	r2, [sp, #20]
 8007a98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007bf0 <_strtod_l+0x598>
 8007a9c:	2322      	movs	r3, #34	@ 0x22
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	f04f 0a00 	mov.w	sl, #0
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f43f ae0f 	beq.w	80076ca <_strtod_l+0x72>
 8007aac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	f7ff f942 	bl	8006d38 <_Bfree>
 8007ab4:	9805      	ldr	r0, [sp, #20]
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	f7ff f93e 	bl	8006d38 <_Bfree>
 8007abc:	9805      	ldr	r0, [sp, #20]
 8007abe:	4641      	mov	r1, r8
 8007ac0:	f7ff f93a 	bl	8006d38 <_Bfree>
 8007ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ac6:	9805      	ldr	r0, [sp, #20]
 8007ac8:	f7ff f936 	bl	8006d38 <_Bfree>
 8007acc:	9805      	ldr	r0, [sp, #20]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f7ff f932 	bl	8006d38 <_Bfree>
 8007ad4:	e5f9      	b.n	80076ca <_strtod_l+0x72>
 8007ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007adc:	4293      	cmp	r3, r2
 8007ade:	dbbc      	blt.n	8007a5a <_strtod_l+0x402>
 8007ae0:	4c41      	ldr	r4, [pc, #260]	@ (8007be8 <_strtod_l+0x590>)
 8007ae2:	f1c5 050f 	rsb	r5, r5, #15
 8007ae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007aea:	4652      	mov	r2, sl
 8007aec:	465b      	mov	r3, fp
 8007aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af2:	f7f8 fd89 	bl	8000608 <__aeabi_dmul>
 8007af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af8:	1b5d      	subs	r5, r3, r5
 8007afa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007afe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b02:	e78f      	b.n	8007a24 <_strtod_l+0x3cc>
 8007b04:	3316      	adds	r3, #22
 8007b06:	dba8      	blt.n	8007a5a <_strtod_l+0x402>
 8007b08:	4b37      	ldr	r3, [pc, #220]	@ (8007be8 <_strtod_l+0x590>)
 8007b0a:	eba9 0808 	sub.w	r8, r9, r8
 8007b0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b12:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b16:	4650      	mov	r0, sl
 8007b18:	4659      	mov	r1, fp
 8007b1a:	f7f8 fe9f 	bl	800085c <__aeabi_ddiv>
 8007b1e:	e783      	b.n	8007a28 <_strtod_l+0x3d0>
 8007b20:	4b32      	ldr	r3, [pc, #200]	@ (8007bec <_strtod_l+0x594>)
 8007b22:	9308      	str	r3, [sp, #32]
 8007b24:	2300      	movs	r3, #0
 8007b26:	1124      	asrs	r4, r4, #4
 8007b28:	4650      	mov	r0, sl
 8007b2a:	4659      	mov	r1, fp
 8007b2c:	461e      	mov	r6, r3
 8007b2e:	2c01      	cmp	r4, #1
 8007b30:	dc21      	bgt.n	8007b76 <_strtod_l+0x51e>
 8007b32:	b10b      	cbz	r3, 8007b38 <_strtod_l+0x4e0>
 8007b34:	4682      	mov	sl, r0
 8007b36:	468b      	mov	fp, r1
 8007b38:	492c      	ldr	r1, [pc, #176]	@ (8007bec <_strtod_l+0x594>)
 8007b3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b42:	4652      	mov	r2, sl
 8007b44:	465b      	mov	r3, fp
 8007b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b4a:	f7f8 fd5d 	bl	8000608 <__aeabi_dmul>
 8007b4e:	4b28      	ldr	r3, [pc, #160]	@ (8007bf0 <_strtod_l+0x598>)
 8007b50:	460a      	mov	r2, r1
 8007b52:	400b      	ands	r3, r1
 8007b54:	4927      	ldr	r1, [pc, #156]	@ (8007bf4 <_strtod_l+0x59c>)
 8007b56:	428b      	cmp	r3, r1
 8007b58:	4682      	mov	sl, r0
 8007b5a:	d898      	bhi.n	8007a8e <_strtod_l+0x436>
 8007b5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007b60:	428b      	cmp	r3, r1
 8007b62:	bf86      	itte	hi
 8007b64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007bf8 <_strtod_l+0x5a0>
 8007b68:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007b70:	2300      	movs	r3, #0
 8007b72:	9308      	str	r3, [sp, #32]
 8007b74:	e07a      	b.n	8007c6c <_strtod_l+0x614>
 8007b76:	07e2      	lsls	r2, r4, #31
 8007b78:	d505      	bpl.n	8007b86 <_strtod_l+0x52e>
 8007b7a:	9b08      	ldr	r3, [sp, #32]
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fd42 	bl	8000608 <__aeabi_dmul>
 8007b84:	2301      	movs	r3, #1
 8007b86:	9a08      	ldr	r2, [sp, #32]
 8007b88:	3208      	adds	r2, #8
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	1064      	asrs	r4, r4, #1
 8007b8e:	9208      	str	r2, [sp, #32]
 8007b90:	e7cd      	b.n	8007b2e <_strtod_l+0x4d6>
 8007b92:	d0ed      	beq.n	8007b70 <_strtod_l+0x518>
 8007b94:	4264      	negs	r4, r4
 8007b96:	f014 020f 	ands.w	r2, r4, #15
 8007b9a:	d00a      	beq.n	8007bb2 <_strtod_l+0x55a>
 8007b9c:	4b12      	ldr	r3, [pc, #72]	@ (8007be8 <_strtod_l+0x590>)
 8007b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f7f8 fe57 	bl	800085c <__aeabi_ddiv>
 8007bae:	4682      	mov	sl, r0
 8007bb0:	468b      	mov	fp, r1
 8007bb2:	1124      	asrs	r4, r4, #4
 8007bb4:	d0dc      	beq.n	8007b70 <_strtod_l+0x518>
 8007bb6:	2c1f      	cmp	r4, #31
 8007bb8:	dd20      	ble.n	8007bfc <_strtod_l+0x5a4>
 8007bba:	2400      	movs	r4, #0
 8007bbc:	46a0      	mov	r8, r4
 8007bbe:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bc0:	46a1      	mov	r9, r4
 8007bc2:	9a05      	ldr	r2, [sp, #20]
 8007bc4:	2322      	movs	r3, #34	@ 0x22
 8007bc6:	f04f 0a00 	mov.w	sl, #0
 8007bca:	f04f 0b00 	mov.w	fp, #0
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	e768      	b.n	8007aa4 <_strtod_l+0x44c>
 8007bd2:	bf00      	nop
 8007bd4:	08009511 	.word	0x08009511
 8007bd8:	08009724 	.word	0x08009724
 8007bdc:	08009509 	.word	0x08009509
 8007be0:	08009540 	.word	0x08009540
 8007be4:	080098cd 	.word	0x080098cd
 8007be8:	08009658 	.word	0x08009658
 8007bec:	08009630 	.word	0x08009630
 8007bf0:	7ff00000 	.word	0x7ff00000
 8007bf4:	7ca00000 	.word	0x7ca00000
 8007bf8:	7fefffff 	.word	0x7fefffff
 8007bfc:	f014 0310 	ands.w	r3, r4, #16
 8007c00:	bf18      	it	ne
 8007c02:	236a      	movne	r3, #106	@ 0x6a
 8007c04:	4ea9      	ldr	r6, [pc, #676]	@ (8007eac <_strtod_l+0x854>)
 8007c06:	9308      	str	r3, [sp, #32]
 8007c08:	4650      	mov	r0, sl
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	07e2      	lsls	r2, r4, #31
 8007c10:	d504      	bpl.n	8007c1c <_strtod_l+0x5c4>
 8007c12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c16:	f7f8 fcf7 	bl	8000608 <__aeabi_dmul>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	1064      	asrs	r4, r4, #1
 8007c1e:	f106 0608 	add.w	r6, r6, #8
 8007c22:	d1f4      	bne.n	8007c0e <_strtod_l+0x5b6>
 8007c24:	b10b      	cbz	r3, 8007c2a <_strtod_l+0x5d2>
 8007c26:	4682      	mov	sl, r0
 8007c28:	468b      	mov	fp, r1
 8007c2a:	9b08      	ldr	r3, [sp, #32]
 8007c2c:	b1b3      	cbz	r3, 8007c5c <_strtod_l+0x604>
 8007c2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	4659      	mov	r1, fp
 8007c3a:	dd0f      	ble.n	8007c5c <_strtod_l+0x604>
 8007c3c:	2b1f      	cmp	r3, #31
 8007c3e:	dd55      	ble.n	8007cec <_strtod_l+0x694>
 8007c40:	2b34      	cmp	r3, #52	@ 0x34
 8007c42:	bfde      	ittt	le
 8007c44:	f04f 33ff 	movle.w	r3, #4294967295
 8007c48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007c4c:	4093      	lslle	r3, r2
 8007c4e:	f04f 0a00 	mov.w	sl, #0
 8007c52:	bfcc      	ite	gt
 8007c54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c58:	ea03 0b01 	andle.w	fp, r3, r1
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4650      	mov	r0, sl
 8007c62:	4659      	mov	r1, fp
 8007c64:	f7f8 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d1a6      	bne.n	8007bba <_strtod_l+0x562>
 8007c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c72:	9805      	ldr	r0, [sp, #20]
 8007c74:	462b      	mov	r3, r5
 8007c76:	463a      	mov	r2, r7
 8007c78:	f7ff f8c6 	bl	8006e08 <__s2b>
 8007c7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f43f af05 	beq.w	8007a8e <_strtod_l+0x436>
 8007c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	eba9 0308 	sub.w	r3, r9, r8
 8007c8c:	bfa8      	it	ge
 8007c8e:	2300      	movge	r3, #0
 8007c90:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c92:	2400      	movs	r4, #0
 8007c94:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c98:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c9a:	46a0      	mov	r8, r4
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c9e:	9805      	ldr	r0, [sp, #20]
 8007ca0:	6859      	ldr	r1, [r3, #4]
 8007ca2:	f7ff f809 	bl	8006cb8 <_Balloc>
 8007ca6:	4681      	mov	r9, r0
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	f43f aef4 	beq.w	8007a96 <_strtod_l+0x43e>
 8007cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	3202      	adds	r2, #2
 8007cb4:	f103 010c 	add.w	r1, r3, #12
 8007cb8:	0092      	lsls	r2, r2, #2
 8007cba:	300c      	adds	r0, #12
 8007cbc:	f000 fd72 	bl	80087a4 <memcpy>
 8007cc0:	ec4b ab10 	vmov	d0, sl, fp
 8007cc4:	9805      	ldr	r0, [sp, #20]
 8007cc6:	aa1c      	add	r2, sp, #112	@ 0x70
 8007cc8:	a91b      	add	r1, sp, #108	@ 0x6c
 8007cca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007cce:	f7ff fbd7 	bl	8007480 <__d2b>
 8007cd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f43f aede 	beq.w	8007a96 <_strtod_l+0x43e>
 8007cda:	9805      	ldr	r0, [sp, #20]
 8007cdc:	2101      	movs	r1, #1
 8007cde:	f7ff f929 	bl	8006f34 <__i2b>
 8007ce2:	4680      	mov	r8, r0
 8007ce4:	b948      	cbnz	r0, 8007cfa <_strtod_l+0x6a2>
 8007ce6:	f04f 0800 	mov.w	r8, #0
 8007cea:	e6d4      	b.n	8007a96 <_strtod_l+0x43e>
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	ea03 0a0a 	and.w	sl, r3, sl
 8007cf8:	e7b0      	b.n	8007c5c <_strtod_l+0x604>
 8007cfa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007cfc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	bfab      	itete	ge
 8007d02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d0a:	bfac      	ite	ge
 8007d0c:	18ef      	addge	r7, r5, r3
 8007d0e:	1b5e      	sublt	r6, r3, r5
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	1aed      	subs	r5, r5, r3
 8007d14:	4415      	add	r5, r2
 8007d16:	4b66      	ldr	r3, [pc, #408]	@ (8007eb0 <_strtod_l+0x858>)
 8007d18:	3d01      	subs	r5, #1
 8007d1a:	429d      	cmp	r5, r3
 8007d1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d20:	da50      	bge.n	8007dc4 <_strtod_l+0x76c>
 8007d22:	1b5b      	subs	r3, r3, r5
 8007d24:	2b1f      	cmp	r3, #31
 8007d26:	eba2 0203 	sub.w	r2, r2, r3
 8007d2a:	f04f 0101 	mov.w	r1, #1
 8007d2e:	dc3d      	bgt.n	8007dac <_strtod_l+0x754>
 8007d30:	fa01 f303 	lsl.w	r3, r1, r3
 8007d34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d36:	2300      	movs	r3, #0
 8007d38:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d3a:	18bd      	adds	r5, r7, r2
 8007d3c:	9b08      	ldr	r3, [sp, #32]
 8007d3e:	42af      	cmp	r7, r5
 8007d40:	4416      	add	r6, r2
 8007d42:	441e      	add	r6, r3
 8007d44:	463b      	mov	r3, r7
 8007d46:	bfa8      	it	ge
 8007d48:	462b      	movge	r3, r5
 8007d4a:	42b3      	cmp	r3, r6
 8007d4c:	bfa8      	it	ge
 8007d4e:	4633      	movge	r3, r6
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfc2      	ittt	gt
 8007d54:	1aed      	subgt	r5, r5, r3
 8007d56:	1af6      	subgt	r6, r6, r3
 8007d58:	1aff      	subgt	r7, r7, r3
 8007d5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dd16      	ble.n	8007d8e <_strtod_l+0x736>
 8007d60:	4641      	mov	r1, r8
 8007d62:	9805      	ldr	r0, [sp, #20]
 8007d64:	461a      	mov	r2, r3
 8007d66:	f7ff f9a5 	bl	80070b4 <__pow5mult>
 8007d6a:	4680      	mov	r8, r0
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d0ba      	beq.n	8007ce6 <_strtod_l+0x68e>
 8007d70:	4601      	mov	r1, r0
 8007d72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d74:	9805      	ldr	r0, [sp, #20]
 8007d76:	f7ff f8f3 	bl	8006f60 <__multiply>
 8007d7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f43f ae8a 	beq.w	8007a96 <_strtod_l+0x43e>
 8007d82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d84:	9805      	ldr	r0, [sp, #20]
 8007d86:	f7fe ffd7 	bl	8006d38 <_Bfree>
 8007d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	dc1d      	bgt.n	8007dce <_strtod_l+0x776>
 8007d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dd23      	ble.n	8007de0 <_strtod_l+0x788>
 8007d98:	4649      	mov	r1, r9
 8007d9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d9c:	9805      	ldr	r0, [sp, #20]
 8007d9e:	f7ff f989 	bl	80070b4 <__pow5mult>
 8007da2:	4681      	mov	r9, r0
 8007da4:	b9e0      	cbnz	r0, 8007de0 <_strtod_l+0x788>
 8007da6:	f04f 0900 	mov.w	r9, #0
 8007daa:	e674      	b.n	8007a96 <_strtod_l+0x43e>
 8007dac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007db0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007db4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007db8:	35e2      	adds	r5, #226	@ 0xe2
 8007dba:	fa01 f305 	lsl.w	r3, r1, r5
 8007dbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dc0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007dc2:	e7ba      	b.n	8007d3a <_strtod_l+0x6e2>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dc8:	2301      	movs	r3, #1
 8007dca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dcc:	e7b5      	b.n	8007d3a <_strtod_l+0x6e2>
 8007dce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dd0:	9805      	ldr	r0, [sp, #20]
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	f7ff f9c8 	bl	8007168 <__lshift>
 8007dd8:	901a      	str	r0, [sp, #104]	@ 0x68
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d1d9      	bne.n	8007d92 <_strtod_l+0x73a>
 8007dde:	e65a      	b.n	8007a96 <_strtod_l+0x43e>
 8007de0:	2e00      	cmp	r6, #0
 8007de2:	dd07      	ble.n	8007df4 <_strtod_l+0x79c>
 8007de4:	4649      	mov	r1, r9
 8007de6:	9805      	ldr	r0, [sp, #20]
 8007de8:	4632      	mov	r2, r6
 8007dea:	f7ff f9bd 	bl	8007168 <__lshift>
 8007dee:	4681      	mov	r9, r0
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d0d8      	beq.n	8007da6 <_strtod_l+0x74e>
 8007df4:	2f00      	cmp	r7, #0
 8007df6:	dd08      	ble.n	8007e0a <_strtod_l+0x7b2>
 8007df8:	4641      	mov	r1, r8
 8007dfa:	9805      	ldr	r0, [sp, #20]
 8007dfc:	463a      	mov	r2, r7
 8007dfe:	f7ff f9b3 	bl	8007168 <__lshift>
 8007e02:	4680      	mov	r8, r0
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f43f ae46 	beq.w	8007a96 <_strtod_l+0x43e>
 8007e0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e0c:	9805      	ldr	r0, [sp, #20]
 8007e0e:	464a      	mov	r2, r9
 8007e10:	f7ff fa32 	bl	8007278 <__mdiff>
 8007e14:	4604      	mov	r4, r0
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f ae3d 	beq.w	8007a96 <_strtod_l+0x43e>
 8007e1c:	68c3      	ldr	r3, [r0, #12]
 8007e1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e20:	2300      	movs	r3, #0
 8007e22:	60c3      	str	r3, [r0, #12]
 8007e24:	4641      	mov	r1, r8
 8007e26:	f7ff fa0b 	bl	8007240 <__mcmp>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	da46      	bge.n	8007ebc <_strtod_l+0x864>
 8007e2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e30:	ea53 030a 	orrs.w	r3, r3, sl
 8007e34:	d16c      	bne.n	8007f10 <_strtod_l+0x8b8>
 8007e36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d168      	bne.n	8007f10 <_strtod_l+0x8b8>
 8007e3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e42:	0d1b      	lsrs	r3, r3, #20
 8007e44:	051b      	lsls	r3, r3, #20
 8007e46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e4a:	d961      	bls.n	8007f10 <_strtod_l+0x8b8>
 8007e4c:	6963      	ldr	r3, [r4, #20]
 8007e4e:	b913      	cbnz	r3, 8007e56 <_strtod_l+0x7fe>
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	dd5c      	ble.n	8007f10 <_strtod_l+0x8b8>
 8007e56:	4621      	mov	r1, r4
 8007e58:	2201      	movs	r2, #1
 8007e5a:	9805      	ldr	r0, [sp, #20]
 8007e5c:	f7ff f984 	bl	8007168 <__lshift>
 8007e60:	4641      	mov	r1, r8
 8007e62:	4604      	mov	r4, r0
 8007e64:	f7ff f9ec 	bl	8007240 <__mcmp>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	dd51      	ble.n	8007f10 <_strtod_l+0x8b8>
 8007e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e70:	9a08      	ldr	r2, [sp, #32]
 8007e72:	0d1b      	lsrs	r3, r3, #20
 8007e74:	051b      	lsls	r3, r3, #20
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	d06b      	beq.n	8007f52 <_strtod_l+0x8fa>
 8007e7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e7e:	d868      	bhi.n	8007f52 <_strtod_l+0x8fa>
 8007e80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e84:	f67f ae9d 	bls.w	8007bc2 <_strtod_l+0x56a>
 8007e88:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb4 <_strtod_l+0x85c>)
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f7f8 fbba 	bl	8000608 <__aeabi_dmul>
 8007e94:	4b08      	ldr	r3, [pc, #32]	@ (8007eb8 <_strtod_l+0x860>)
 8007e96:	400b      	ands	r3, r1
 8007e98:	4682      	mov	sl, r0
 8007e9a:	468b      	mov	fp, r1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f47f ae05 	bne.w	8007aac <_strtod_l+0x454>
 8007ea2:	9a05      	ldr	r2, [sp, #20]
 8007ea4:	2322      	movs	r3, #34	@ 0x22
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	e600      	b.n	8007aac <_strtod_l+0x454>
 8007eaa:	bf00      	nop
 8007eac:	08009750 	.word	0x08009750
 8007eb0:	fffffc02 	.word	0xfffffc02
 8007eb4:	39500000 	.word	0x39500000
 8007eb8:	7ff00000 	.word	0x7ff00000
 8007ebc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ec0:	d165      	bne.n	8007f8e <_strtod_l+0x936>
 8007ec2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ec8:	b35a      	cbz	r2, 8007f22 <_strtod_l+0x8ca>
 8007eca:	4a9f      	ldr	r2, [pc, #636]	@ (8008148 <_strtod_l+0xaf0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d12b      	bne.n	8007f28 <_strtod_l+0x8d0>
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	b303      	cbz	r3, 8007f18 <_strtod_l+0x8c0>
 8007ed6:	4b9d      	ldr	r3, [pc, #628]	@ (800814c <_strtod_l+0xaf4>)
 8007ed8:	465a      	mov	r2, fp
 8007eda:	4013      	ands	r3, r2
 8007edc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee4:	d81b      	bhi.n	8007f1e <_strtod_l+0x8c6>
 8007ee6:	0d1b      	lsrs	r3, r3, #20
 8007ee8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	d119      	bne.n	8007f28 <_strtod_l+0x8d0>
 8007ef4:	4b96      	ldr	r3, [pc, #600]	@ (8008150 <_strtod_l+0xaf8>)
 8007ef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d102      	bne.n	8007f02 <_strtod_l+0x8aa>
 8007efc:	3101      	adds	r1, #1
 8007efe:	f43f adca 	beq.w	8007a96 <_strtod_l+0x43e>
 8007f02:	4b92      	ldr	r3, [pc, #584]	@ (800814c <_strtod_l+0xaf4>)
 8007f04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f06:	401a      	ands	r2, r3
 8007f08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f0c:	f04f 0a00 	mov.w	sl, #0
 8007f10:	9b08      	ldr	r3, [sp, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1b8      	bne.n	8007e88 <_strtod_l+0x830>
 8007f16:	e5c9      	b.n	8007aac <_strtod_l+0x454>
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1c:	e7e8      	b.n	8007ef0 <_strtod_l+0x898>
 8007f1e:	4613      	mov	r3, r2
 8007f20:	e7e6      	b.n	8007ef0 <_strtod_l+0x898>
 8007f22:	ea53 030a 	orrs.w	r3, r3, sl
 8007f26:	d0a1      	beq.n	8007e6c <_strtod_l+0x814>
 8007f28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f2a:	b1db      	cbz	r3, 8007f64 <_strtod_l+0x90c>
 8007f2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f2e:	4213      	tst	r3, r2
 8007f30:	d0ee      	beq.n	8007f10 <_strtod_l+0x8b8>
 8007f32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f34:	9a08      	ldr	r2, [sp, #32]
 8007f36:	4650      	mov	r0, sl
 8007f38:	4659      	mov	r1, fp
 8007f3a:	b1bb      	cbz	r3, 8007f6c <_strtod_l+0x914>
 8007f3c:	f7ff fb6e 	bl	800761c <sulp>
 8007f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f44:	ec53 2b10 	vmov	r2, r3, d0
 8007f48:	f7f8 f9a8 	bl	800029c <__adddf3>
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	468b      	mov	fp, r1
 8007f50:	e7de      	b.n	8007f10 <_strtod_l+0x8b8>
 8007f52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007f56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8007f62:	e7d5      	b.n	8007f10 <_strtod_l+0x8b8>
 8007f64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f66:	ea13 0f0a 	tst.w	r3, sl
 8007f6a:	e7e1      	b.n	8007f30 <_strtod_l+0x8d8>
 8007f6c:	f7ff fb56 	bl	800761c <sulp>
 8007f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f74:	ec53 2b10 	vmov	r2, r3, d0
 8007f78:	f7f8 f98e 	bl	8000298 <__aeabi_dsub>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4682      	mov	sl, r0
 8007f82:	468b      	mov	fp, r1
 8007f84:	f7f8 fda8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0c1      	beq.n	8007f10 <_strtod_l+0x8b8>
 8007f8c:	e619      	b.n	8007bc2 <_strtod_l+0x56a>
 8007f8e:	4641      	mov	r1, r8
 8007f90:	4620      	mov	r0, r4
 8007f92:	f7ff facd 	bl	8007530 <__ratio>
 8007f96:	ec57 6b10 	vmov	r6, r7, d0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fdac 	bl	8000b00 <__aeabi_dcmple>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d06f      	beq.n	800808c <_strtod_l+0xa34>
 8007fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d17a      	bne.n	80080a8 <_strtod_l+0xa50>
 8007fb2:	f1ba 0f00 	cmp.w	sl, #0
 8007fb6:	d158      	bne.n	800806a <_strtod_l+0xa12>
 8007fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d15a      	bne.n	8008078 <_strtod_l+0xa20>
 8007fc2:	4b64      	ldr	r3, [pc, #400]	@ (8008154 <_strtod_l+0xafc>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 fd8f 	bl	8000aec <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d159      	bne.n	8008086 <_strtod_l+0xa2e>
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4b60      	ldr	r3, [pc, #384]	@ (8008158 <_strtod_l+0xb00>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7f8 fb15 	bl	8000608 <__aeabi_dmul>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460f      	mov	r7, r1
 8007fe2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007fe6:	9606      	str	r6, [sp, #24]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fee:	4d57      	ldr	r5, [pc, #348]	@ (800814c <_strtod_l+0xaf4>)
 8007ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ff6:	401d      	ands	r5, r3
 8007ff8:	4b58      	ldr	r3, [pc, #352]	@ (800815c <_strtod_l+0xb04>)
 8007ffa:	429d      	cmp	r5, r3
 8007ffc:	f040 80b2 	bne.w	8008164 <_strtod_l+0xb0c>
 8008000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008002:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008006:	ec4b ab10 	vmov	d0, sl, fp
 800800a:	f7ff f9c9 	bl	80073a0 <__ulp>
 800800e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008012:	ec51 0b10 	vmov	r0, r1, d0
 8008016:	f7f8 faf7 	bl	8000608 <__aeabi_dmul>
 800801a:	4652      	mov	r2, sl
 800801c:	465b      	mov	r3, fp
 800801e:	f7f8 f93d 	bl	800029c <__adddf3>
 8008022:	460b      	mov	r3, r1
 8008024:	4949      	ldr	r1, [pc, #292]	@ (800814c <_strtod_l+0xaf4>)
 8008026:	4a4e      	ldr	r2, [pc, #312]	@ (8008160 <_strtod_l+0xb08>)
 8008028:	4019      	ands	r1, r3
 800802a:	4291      	cmp	r1, r2
 800802c:	4682      	mov	sl, r0
 800802e:	d942      	bls.n	80080b6 <_strtod_l+0xa5e>
 8008030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008032:	4b47      	ldr	r3, [pc, #284]	@ (8008150 <_strtod_l+0xaf8>)
 8008034:	429a      	cmp	r2, r3
 8008036:	d103      	bne.n	8008040 <_strtod_l+0x9e8>
 8008038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800803a:	3301      	adds	r3, #1
 800803c:	f43f ad2b 	beq.w	8007a96 <_strtod_l+0x43e>
 8008040:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008150 <_strtod_l+0xaf8>
 8008044:	f04f 3aff 	mov.w	sl, #4294967295
 8008048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800804a:	9805      	ldr	r0, [sp, #20]
 800804c:	f7fe fe74 	bl	8006d38 <_Bfree>
 8008050:	9805      	ldr	r0, [sp, #20]
 8008052:	4649      	mov	r1, r9
 8008054:	f7fe fe70 	bl	8006d38 <_Bfree>
 8008058:	9805      	ldr	r0, [sp, #20]
 800805a:	4641      	mov	r1, r8
 800805c:	f7fe fe6c 	bl	8006d38 <_Bfree>
 8008060:	9805      	ldr	r0, [sp, #20]
 8008062:	4621      	mov	r1, r4
 8008064:	f7fe fe68 	bl	8006d38 <_Bfree>
 8008068:	e618      	b.n	8007c9c <_strtod_l+0x644>
 800806a:	f1ba 0f01 	cmp.w	sl, #1
 800806e:	d103      	bne.n	8008078 <_strtod_l+0xa20>
 8008070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008072:	2b00      	cmp	r3, #0
 8008074:	f43f ada5 	beq.w	8007bc2 <_strtod_l+0x56a>
 8008078:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008128 <_strtod_l+0xad0>
 800807c:	4f35      	ldr	r7, [pc, #212]	@ (8008154 <_strtod_l+0xafc>)
 800807e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008082:	2600      	movs	r6, #0
 8008084:	e7b1      	b.n	8007fea <_strtod_l+0x992>
 8008086:	4f34      	ldr	r7, [pc, #208]	@ (8008158 <_strtod_l+0xb00>)
 8008088:	2600      	movs	r6, #0
 800808a:	e7aa      	b.n	8007fe2 <_strtod_l+0x98a>
 800808c:	4b32      	ldr	r3, [pc, #200]	@ (8008158 <_strtod_l+0xb00>)
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	2200      	movs	r2, #0
 8008094:	f7f8 fab8 	bl	8000608 <__aeabi_dmul>
 8008098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800809a:	4606      	mov	r6, r0
 800809c:	460f      	mov	r7, r1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d09f      	beq.n	8007fe2 <_strtod_l+0x98a>
 80080a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80080a6:	e7a0      	b.n	8007fea <_strtod_l+0x992>
 80080a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008130 <_strtod_l+0xad8>
 80080ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080b0:	ec57 6b17 	vmov	r6, r7, d7
 80080b4:	e799      	b.n	8007fea <_strtod_l+0x992>
 80080b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1c1      	bne.n	8008048 <_strtod_l+0x9f0>
 80080c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080c8:	0d1b      	lsrs	r3, r3, #20
 80080ca:	051b      	lsls	r3, r3, #20
 80080cc:	429d      	cmp	r5, r3
 80080ce:	d1bb      	bne.n	8008048 <_strtod_l+0x9f0>
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 fdf8 	bl	8000cc8 <__aeabi_d2lz>
 80080d8:	f7f8 fa68 	bl	80005ac <__aeabi_l2d>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 f8d8 	bl	8000298 <__aeabi_dsub>
 80080e8:	460b      	mov	r3, r1
 80080ea:	4602      	mov	r2, r0
 80080ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80080f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080f6:	ea46 060a 	orr.w	r6, r6, sl
 80080fa:	431e      	orrs	r6, r3
 80080fc:	d06f      	beq.n	80081de <_strtod_l+0xb86>
 80080fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008138 <_strtod_l+0xae0>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f7f8 fcf2 	bl	8000aec <__aeabi_dcmplt>
 8008108:	2800      	cmp	r0, #0
 800810a:	f47f accf 	bne.w	8007aac <_strtod_l+0x454>
 800810e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008140 <_strtod_l+0xae8>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008118:	f7f8 fd06 	bl	8000b28 <__aeabi_dcmpgt>
 800811c:	2800      	cmp	r0, #0
 800811e:	d093      	beq.n	8008048 <_strtod_l+0x9f0>
 8008120:	e4c4      	b.n	8007aac <_strtod_l+0x454>
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	00000000 	.word	0x00000000
 800812c:	bff00000 	.word	0xbff00000
 8008130:	00000000 	.word	0x00000000
 8008134:	3ff00000 	.word	0x3ff00000
 8008138:	94a03595 	.word	0x94a03595
 800813c:	3fdfffff 	.word	0x3fdfffff
 8008140:	35afe535 	.word	0x35afe535
 8008144:	3fe00000 	.word	0x3fe00000
 8008148:	000fffff 	.word	0x000fffff
 800814c:	7ff00000 	.word	0x7ff00000
 8008150:	7fefffff 	.word	0x7fefffff
 8008154:	3ff00000 	.word	0x3ff00000
 8008158:	3fe00000 	.word	0x3fe00000
 800815c:	7fe00000 	.word	0x7fe00000
 8008160:	7c9fffff 	.word	0x7c9fffff
 8008164:	9b08      	ldr	r3, [sp, #32]
 8008166:	b323      	cbz	r3, 80081b2 <_strtod_l+0xb5a>
 8008168:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800816c:	d821      	bhi.n	80081b2 <_strtod_l+0xb5a>
 800816e:	a328      	add	r3, pc, #160	@ (adr r3, 8008210 <_strtod_l+0xbb8>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	4630      	mov	r0, r6
 8008176:	4639      	mov	r1, r7
 8008178:	f7f8 fcc2 	bl	8000b00 <__aeabi_dcmple>
 800817c:	b1a0      	cbz	r0, 80081a8 <_strtod_l+0xb50>
 800817e:	4639      	mov	r1, r7
 8008180:	4630      	mov	r0, r6
 8008182:	f7f8 fd19 	bl	8000bb8 <__aeabi_d2uiz>
 8008186:	2801      	cmp	r0, #1
 8008188:	bf38      	it	cc
 800818a:	2001      	movcc	r0, #1
 800818c:	f7f8 f9c2 	bl	8000514 <__aeabi_ui2d>
 8008190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	b9fb      	cbnz	r3, 80081d8 <_strtod_l+0xb80>
 8008198:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800819c:	9014      	str	r0, [sp, #80]	@ 0x50
 800819e:	9315      	str	r3, [sp, #84]	@ 0x54
 80081a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80081a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80081ae:	1b5b      	subs	r3, r3, r5
 80081b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80081b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80081b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80081ba:	f7ff f8f1 	bl	80073a0 <__ulp>
 80081be:	4650      	mov	r0, sl
 80081c0:	ec53 2b10 	vmov	r2, r3, d0
 80081c4:	4659      	mov	r1, fp
 80081c6:	f7f8 fa1f 	bl	8000608 <__aeabi_dmul>
 80081ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80081ce:	f7f8 f865 	bl	800029c <__adddf3>
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	e770      	b.n	80080ba <_strtod_l+0xa62>
 80081d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80081dc:	e7e0      	b.n	80081a0 <_strtod_l+0xb48>
 80081de:	a30e      	add	r3, pc, #56	@ (adr r3, 8008218 <_strtod_l+0xbc0>)
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	f7f8 fc82 	bl	8000aec <__aeabi_dcmplt>
 80081e8:	e798      	b.n	800811c <_strtod_l+0xac4>
 80081ea:	2300      	movs	r3, #0
 80081ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80081f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	f7ff ba6d 	b.w	80076d2 <_strtod_l+0x7a>
 80081f8:	2a65      	cmp	r2, #101	@ 0x65
 80081fa:	f43f ab66 	beq.w	80078ca <_strtod_l+0x272>
 80081fe:	2a45      	cmp	r2, #69	@ 0x45
 8008200:	f43f ab63 	beq.w	80078ca <_strtod_l+0x272>
 8008204:	2301      	movs	r3, #1
 8008206:	f7ff bb9e 	b.w	8007946 <_strtod_l+0x2ee>
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w
 8008210:	ffc00000 	.word	0xffc00000
 8008214:	41dfffff 	.word	0x41dfffff
 8008218:	94a03595 	.word	0x94a03595
 800821c:	3fcfffff 	.word	0x3fcfffff

08008220 <_strtod_r>:
 8008220:	4b01      	ldr	r3, [pc, #4]	@ (8008228 <_strtod_r+0x8>)
 8008222:	f7ff ba19 	b.w	8007658 <_strtod_l>
 8008226:	bf00      	nop
 8008228:	20000068 	.word	0x20000068

0800822c <_strtol_l.constprop.0>:
 800822c:	2b24      	cmp	r3, #36	@ 0x24
 800822e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008232:	4686      	mov	lr, r0
 8008234:	4690      	mov	r8, r2
 8008236:	d801      	bhi.n	800823c <_strtol_l.constprop.0+0x10>
 8008238:	2b01      	cmp	r3, #1
 800823a:	d106      	bne.n	800824a <_strtol_l.constprop.0+0x1e>
 800823c:	f7fd fdbc 	bl	8005db8 <__errno>
 8008240:	2316      	movs	r3, #22
 8008242:	6003      	str	r3, [r0, #0]
 8008244:	2000      	movs	r0, #0
 8008246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824a:	4834      	ldr	r0, [pc, #208]	@ (800831c <_strtol_l.constprop.0+0xf0>)
 800824c:	460d      	mov	r5, r1
 800824e:	462a      	mov	r2, r5
 8008250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008254:	5d06      	ldrb	r6, [r0, r4]
 8008256:	f016 0608 	ands.w	r6, r6, #8
 800825a:	d1f8      	bne.n	800824e <_strtol_l.constprop.0+0x22>
 800825c:	2c2d      	cmp	r4, #45	@ 0x2d
 800825e:	d12d      	bne.n	80082bc <_strtol_l.constprop.0+0x90>
 8008260:	782c      	ldrb	r4, [r5, #0]
 8008262:	2601      	movs	r6, #1
 8008264:	1c95      	adds	r5, r2, #2
 8008266:	f033 0210 	bics.w	r2, r3, #16
 800826a:	d109      	bne.n	8008280 <_strtol_l.constprop.0+0x54>
 800826c:	2c30      	cmp	r4, #48	@ 0x30
 800826e:	d12a      	bne.n	80082c6 <_strtol_l.constprop.0+0x9a>
 8008270:	782a      	ldrb	r2, [r5, #0]
 8008272:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008276:	2a58      	cmp	r2, #88	@ 0x58
 8008278:	d125      	bne.n	80082c6 <_strtol_l.constprop.0+0x9a>
 800827a:	786c      	ldrb	r4, [r5, #1]
 800827c:	2310      	movs	r3, #16
 800827e:	3502      	adds	r5, #2
 8008280:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008284:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008288:	2200      	movs	r2, #0
 800828a:	fbbc f9f3 	udiv	r9, ip, r3
 800828e:	4610      	mov	r0, r2
 8008290:	fb03 ca19 	mls	sl, r3, r9, ip
 8008294:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008298:	2f09      	cmp	r7, #9
 800829a:	d81b      	bhi.n	80082d4 <_strtol_l.constprop.0+0xa8>
 800829c:	463c      	mov	r4, r7
 800829e:	42a3      	cmp	r3, r4
 80082a0:	dd27      	ble.n	80082f2 <_strtol_l.constprop.0+0xc6>
 80082a2:	1c57      	adds	r7, r2, #1
 80082a4:	d007      	beq.n	80082b6 <_strtol_l.constprop.0+0x8a>
 80082a6:	4581      	cmp	r9, r0
 80082a8:	d320      	bcc.n	80082ec <_strtol_l.constprop.0+0xc0>
 80082aa:	d101      	bne.n	80082b0 <_strtol_l.constprop.0+0x84>
 80082ac:	45a2      	cmp	sl, r4
 80082ae:	db1d      	blt.n	80082ec <_strtol_l.constprop.0+0xc0>
 80082b0:	fb00 4003 	mla	r0, r0, r3, r4
 80082b4:	2201      	movs	r2, #1
 80082b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082ba:	e7eb      	b.n	8008294 <_strtol_l.constprop.0+0x68>
 80082bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80082be:	bf04      	itt	eq
 80082c0:	782c      	ldrbeq	r4, [r5, #0]
 80082c2:	1c95      	addeq	r5, r2, #2
 80082c4:	e7cf      	b.n	8008266 <_strtol_l.constprop.0+0x3a>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1da      	bne.n	8008280 <_strtol_l.constprop.0+0x54>
 80082ca:	2c30      	cmp	r4, #48	@ 0x30
 80082cc:	bf0c      	ite	eq
 80082ce:	2308      	moveq	r3, #8
 80082d0:	230a      	movne	r3, #10
 80082d2:	e7d5      	b.n	8008280 <_strtol_l.constprop.0+0x54>
 80082d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80082d8:	2f19      	cmp	r7, #25
 80082da:	d801      	bhi.n	80082e0 <_strtol_l.constprop.0+0xb4>
 80082dc:	3c37      	subs	r4, #55	@ 0x37
 80082de:	e7de      	b.n	800829e <_strtol_l.constprop.0+0x72>
 80082e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80082e4:	2f19      	cmp	r7, #25
 80082e6:	d804      	bhi.n	80082f2 <_strtol_l.constprop.0+0xc6>
 80082e8:	3c57      	subs	r4, #87	@ 0x57
 80082ea:	e7d8      	b.n	800829e <_strtol_l.constprop.0+0x72>
 80082ec:	f04f 32ff 	mov.w	r2, #4294967295
 80082f0:	e7e1      	b.n	80082b6 <_strtol_l.constprop.0+0x8a>
 80082f2:	1c53      	adds	r3, r2, #1
 80082f4:	d108      	bne.n	8008308 <_strtol_l.constprop.0+0xdc>
 80082f6:	2322      	movs	r3, #34	@ 0x22
 80082f8:	f8ce 3000 	str.w	r3, [lr]
 80082fc:	4660      	mov	r0, ip
 80082fe:	f1b8 0f00 	cmp.w	r8, #0
 8008302:	d0a0      	beq.n	8008246 <_strtol_l.constprop.0+0x1a>
 8008304:	1e69      	subs	r1, r5, #1
 8008306:	e006      	b.n	8008316 <_strtol_l.constprop.0+0xea>
 8008308:	b106      	cbz	r6, 800830c <_strtol_l.constprop.0+0xe0>
 800830a:	4240      	negs	r0, r0
 800830c:	f1b8 0f00 	cmp.w	r8, #0
 8008310:	d099      	beq.n	8008246 <_strtol_l.constprop.0+0x1a>
 8008312:	2a00      	cmp	r2, #0
 8008314:	d1f6      	bne.n	8008304 <_strtol_l.constprop.0+0xd8>
 8008316:	f8c8 1000 	str.w	r1, [r8]
 800831a:	e794      	b.n	8008246 <_strtol_l.constprop.0+0x1a>
 800831c:	08009779 	.word	0x08009779

08008320 <_strtol_r>:
 8008320:	f7ff bf84 	b.w	800822c <_strtol_l.constprop.0>

08008324 <__ssputs_r>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	688e      	ldr	r6, [r1, #8]
 800832a:	461f      	mov	r7, r3
 800832c:	42be      	cmp	r6, r7
 800832e:	680b      	ldr	r3, [r1, #0]
 8008330:	4682      	mov	sl, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4690      	mov	r8, r2
 8008336:	d82d      	bhi.n	8008394 <__ssputs_r+0x70>
 8008338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800833c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008340:	d026      	beq.n	8008390 <__ssputs_r+0x6c>
 8008342:	6965      	ldr	r5, [r4, #20]
 8008344:	6909      	ldr	r1, [r1, #16]
 8008346:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800834a:	eba3 0901 	sub.w	r9, r3, r1
 800834e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008352:	1c7b      	adds	r3, r7, #1
 8008354:	444b      	add	r3, r9
 8008356:	106d      	asrs	r5, r5, #1
 8008358:	429d      	cmp	r5, r3
 800835a:	bf38      	it	cc
 800835c:	461d      	movcc	r5, r3
 800835e:	0553      	lsls	r3, r2, #21
 8008360:	d527      	bpl.n	80083b2 <__ssputs_r+0x8e>
 8008362:	4629      	mov	r1, r5
 8008364:	f7fe fc1c 	bl	8006ba0 <_malloc_r>
 8008368:	4606      	mov	r6, r0
 800836a:	b360      	cbz	r0, 80083c6 <__ssputs_r+0xa2>
 800836c:	6921      	ldr	r1, [r4, #16]
 800836e:	464a      	mov	r2, r9
 8008370:	f000 fa18 	bl	80087a4 <memcpy>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800837a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	6126      	str	r6, [r4, #16]
 8008382:	6165      	str	r5, [r4, #20]
 8008384:	444e      	add	r6, r9
 8008386:	eba5 0509 	sub.w	r5, r5, r9
 800838a:	6026      	str	r6, [r4, #0]
 800838c:	60a5      	str	r5, [r4, #8]
 800838e:	463e      	mov	r6, r7
 8008390:	42be      	cmp	r6, r7
 8008392:	d900      	bls.n	8008396 <__ssputs_r+0x72>
 8008394:	463e      	mov	r6, r7
 8008396:	6820      	ldr	r0, [r4, #0]
 8008398:	4632      	mov	r2, r6
 800839a:	4641      	mov	r1, r8
 800839c:	f000 f9c6 	bl	800872c <memmove>
 80083a0:	68a3      	ldr	r3, [r4, #8]
 80083a2:	1b9b      	subs	r3, r3, r6
 80083a4:	60a3      	str	r3, [r4, #8]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	4433      	add	r3, r6
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	2000      	movs	r0, #0
 80083ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b2:	462a      	mov	r2, r5
 80083b4:	f000 fd89 	bl	8008eca <_realloc_r>
 80083b8:	4606      	mov	r6, r0
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d1e0      	bne.n	8008380 <__ssputs_r+0x5c>
 80083be:	6921      	ldr	r1, [r4, #16]
 80083c0:	4650      	mov	r0, sl
 80083c2:	f7fe fb79 	bl	8006ab8 <_free_r>
 80083c6:	230c      	movs	r3, #12
 80083c8:	f8ca 3000 	str.w	r3, [sl]
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	e7e9      	b.n	80083ae <__ssputs_r+0x8a>
	...

080083dc <_svfiprintf_r>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	4698      	mov	r8, r3
 80083e2:	898b      	ldrh	r3, [r1, #12]
 80083e4:	061b      	lsls	r3, r3, #24
 80083e6:	b09d      	sub	sp, #116	@ 0x74
 80083e8:	4607      	mov	r7, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	d510      	bpl.n	8008412 <_svfiprintf_r+0x36>
 80083f0:	690b      	ldr	r3, [r1, #16]
 80083f2:	b973      	cbnz	r3, 8008412 <_svfiprintf_r+0x36>
 80083f4:	2140      	movs	r1, #64	@ 0x40
 80083f6:	f7fe fbd3 	bl	8006ba0 <_malloc_r>
 80083fa:	6028      	str	r0, [r5, #0]
 80083fc:	6128      	str	r0, [r5, #16]
 80083fe:	b930      	cbnz	r0, 800840e <_svfiprintf_r+0x32>
 8008400:	230c      	movs	r3, #12
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	b01d      	add	sp, #116	@ 0x74
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	2340      	movs	r3, #64	@ 0x40
 8008410:	616b      	str	r3, [r5, #20]
 8008412:	2300      	movs	r3, #0
 8008414:	9309      	str	r3, [sp, #36]	@ 0x24
 8008416:	2320      	movs	r3, #32
 8008418:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800841c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008420:	2330      	movs	r3, #48	@ 0x30
 8008422:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085c0 <_svfiprintf_r+0x1e4>
 8008426:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800842a:	f04f 0901 	mov.w	r9, #1
 800842e:	4623      	mov	r3, r4
 8008430:	469a      	mov	sl, r3
 8008432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008436:	b10a      	cbz	r2, 800843c <_svfiprintf_r+0x60>
 8008438:	2a25      	cmp	r2, #37	@ 0x25
 800843a:	d1f9      	bne.n	8008430 <_svfiprintf_r+0x54>
 800843c:	ebba 0b04 	subs.w	fp, sl, r4
 8008440:	d00b      	beq.n	800845a <_svfiprintf_r+0x7e>
 8008442:	465b      	mov	r3, fp
 8008444:	4622      	mov	r2, r4
 8008446:	4629      	mov	r1, r5
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ff6b 	bl	8008324 <__ssputs_r>
 800844e:	3001      	adds	r0, #1
 8008450:	f000 80a7 	beq.w	80085a2 <_svfiprintf_r+0x1c6>
 8008454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008456:	445a      	add	r2, fp
 8008458:	9209      	str	r2, [sp, #36]	@ 0x24
 800845a:	f89a 3000 	ldrb.w	r3, [sl]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 809f 	beq.w	80085a2 <_svfiprintf_r+0x1c6>
 8008464:	2300      	movs	r3, #0
 8008466:	f04f 32ff 	mov.w	r2, #4294967295
 800846a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800846e:	f10a 0a01 	add.w	sl, sl, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	9307      	str	r3, [sp, #28]
 8008476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800847a:	931a      	str	r3, [sp, #104]	@ 0x68
 800847c:	4654      	mov	r4, sl
 800847e:	2205      	movs	r2, #5
 8008480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008484:	484e      	ldr	r0, [pc, #312]	@ (80085c0 <_svfiprintf_r+0x1e4>)
 8008486:	f7f7 feab 	bl	80001e0 <memchr>
 800848a:	9a04      	ldr	r2, [sp, #16]
 800848c:	b9d8      	cbnz	r0, 80084c6 <_svfiprintf_r+0xea>
 800848e:	06d0      	lsls	r0, r2, #27
 8008490:	bf44      	itt	mi
 8008492:	2320      	movmi	r3, #32
 8008494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008498:	0711      	lsls	r1, r2, #28
 800849a:	bf44      	itt	mi
 800849c:	232b      	movmi	r3, #43	@ 0x2b
 800849e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084a2:	f89a 3000 	ldrb.w	r3, [sl]
 80084a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084a8:	d015      	beq.n	80084d6 <_svfiprintf_r+0xfa>
 80084aa:	9a07      	ldr	r2, [sp, #28]
 80084ac:	4654      	mov	r4, sl
 80084ae:	2000      	movs	r0, #0
 80084b0:	f04f 0c0a 	mov.w	ip, #10
 80084b4:	4621      	mov	r1, r4
 80084b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ba:	3b30      	subs	r3, #48	@ 0x30
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d94b      	bls.n	8008558 <_svfiprintf_r+0x17c>
 80084c0:	b1b0      	cbz	r0, 80084f0 <_svfiprintf_r+0x114>
 80084c2:	9207      	str	r2, [sp, #28]
 80084c4:	e014      	b.n	80084f0 <_svfiprintf_r+0x114>
 80084c6:	eba0 0308 	sub.w	r3, r0, r8
 80084ca:	fa09 f303 	lsl.w	r3, r9, r3
 80084ce:	4313      	orrs	r3, r2
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	46a2      	mov	sl, r4
 80084d4:	e7d2      	b.n	800847c <_svfiprintf_r+0xa0>
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	1d19      	adds	r1, r3, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	9103      	str	r1, [sp, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bfbb      	ittet	lt
 80084e2:	425b      	neglt	r3, r3
 80084e4:	f042 0202 	orrlt.w	r2, r2, #2
 80084e8:	9307      	strge	r3, [sp, #28]
 80084ea:	9307      	strlt	r3, [sp, #28]
 80084ec:	bfb8      	it	lt
 80084ee:	9204      	strlt	r2, [sp, #16]
 80084f0:	7823      	ldrb	r3, [r4, #0]
 80084f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80084f4:	d10a      	bne.n	800850c <_svfiprintf_r+0x130>
 80084f6:	7863      	ldrb	r3, [r4, #1]
 80084f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084fa:	d132      	bne.n	8008562 <_svfiprintf_r+0x186>
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	1d1a      	adds	r2, r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	9203      	str	r2, [sp, #12]
 8008504:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008508:	3402      	adds	r4, #2
 800850a:	9305      	str	r3, [sp, #20]
 800850c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085d0 <_svfiprintf_r+0x1f4>
 8008510:	7821      	ldrb	r1, [r4, #0]
 8008512:	2203      	movs	r2, #3
 8008514:	4650      	mov	r0, sl
 8008516:	f7f7 fe63 	bl	80001e0 <memchr>
 800851a:	b138      	cbz	r0, 800852c <_svfiprintf_r+0x150>
 800851c:	9b04      	ldr	r3, [sp, #16]
 800851e:	eba0 000a 	sub.w	r0, r0, sl
 8008522:	2240      	movs	r2, #64	@ 0x40
 8008524:	4082      	lsls	r2, r0
 8008526:	4313      	orrs	r3, r2
 8008528:	3401      	adds	r4, #1
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008530:	4824      	ldr	r0, [pc, #144]	@ (80085c4 <_svfiprintf_r+0x1e8>)
 8008532:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008536:	2206      	movs	r2, #6
 8008538:	f7f7 fe52 	bl	80001e0 <memchr>
 800853c:	2800      	cmp	r0, #0
 800853e:	d036      	beq.n	80085ae <_svfiprintf_r+0x1d2>
 8008540:	4b21      	ldr	r3, [pc, #132]	@ (80085c8 <_svfiprintf_r+0x1ec>)
 8008542:	bb1b      	cbnz	r3, 800858c <_svfiprintf_r+0x1b0>
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	3307      	adds	r3, #7
 8008548:	f023 0307 	bic.w	r3, r3, #7
 800854c:	3308      	adds	r3, #8
 800854e:	9303      	str	r3, [sp, #12]
 8008550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008552:	4433      	add	r3, r6
 8008554:	9309      	str	r3, [sp, #36]	@ 0x24
 8008556:	e76a      	b.n	800842e <_svfiprintf_r+0x52>
 8008558:	fb0c 3202 	mla	r2, ip, r2, r3
 800855c:	460c      	mov	r4, r1
 800855e:	2001      	movs	r0, #1
 8008560:	e7a8      	b.n	80084b4 <_svfiprintf_r+0xd8>
 8008562:	2300      	movs	r3, #0
 8008564:	3401      	adds	r4, #1
 8008566:	9305      	str	r3, [sp, #20]
 8008568:	4619      	mov	r1, r3
 800856a:	f04f 0c0a 	mov.w	ip, #10
 800856e:	4620      	mov	r0, r4
 8008570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008574:	3a30      	subs	r2, #48	@ 0x30
 8008576:	2a09      	cmp	r2, #9
 8008578:	d903      	bls.n	8008582 <_svfiprintf_r+0x1a6>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0c6      	beq.n	800850c <_svfiprintf_r+0x130>
 800857e:	9105      	str	r1, [sp, #20]
 8008580:	e7c4      	b.n	800850c <_svfiprintf_r+0x130>
 8008582:	fb0c 2101 	mla	r1, ip, r1, r2
 8008586:	4604      	mov	r4, r0
 8008588:	2301      	movs	r3, #1
 800858a:	e7f0      	b.n	800856e <_svfiprintf_r+0x192>
 800858c:	ab03      	add	r3, sp, #12
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	462a      	mov	r2, r5
 8008592:	4b0e      	ldr	r3, [pc, #56]	@ (80085cc <_svfiprintf_r+0x1f0>)
 8008594:	a904      	add	r1, sp, #16
 8008596:	4638      	mov	r0, r7
 8008598:	f7fc fc96 	bl	8004ec8 <_printf_float>
 800859c:	1c42      	adds	r2, r0, #1
 800859e:	4606      	mov	r6, r0
 80085a0:	d1d6      	bne.n	8008550 <_svfiprintf_r+0x174>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	065b      	lsls	r3, r3, #25
 80085a6:	f53f af2d 	bmi.w	8008404 <_svfiprintf_r+0x28>
 80085aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085ac:	e72c      	b.n	8008408 <_svfiprintf_r+0x2c>
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	462a      	mov	r2, r5
 80085b4:	4b05      	ldr	r3, [pc, #20]	@ (80085cc <_svfiprintf_r+0x1f0>)
 80085b6:	a904      	add	r1, sp, #16
 80085b8:	4638      	mov	r0, r7
 80085ba:	f7fc ff1d 	bl	80053f8 <_printf_i>
 80085be:	e7ed      	b.n	800859c <_svfiprintf_r+0x1c0>
 80085c0:	08009879 	.word	0x08009879
 80085c4:	08009883 	.word	0x08009883
 80085c8:	08004ec9 	.word	0x08004ec9
 80085cc:	08008325 	.word	0x08008325
 80085d0:	0800987f 	.word	0x0800987f

080085d4 <__sflush_r>:
 80085d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085dc:	0716      	lsls	r6, r2, #28
 80085de:	4605      	mov	r5, r0
 80085e0:	460c      	mov	r4, r1
 80085e2:	d454      	bmi.n	800868e <__sflush_r+0xba>
 80085e4:	684b      	ldr	r3, [r1, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dc02      	bgt.n	80085f0 <__sflush_r+0x1c>
 80085ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	dd48      	ble.n	8008682 <__sflush_r+0xae>
 80085f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085f2:	2e00      	cmp	r6, #0
 80085f4:	d045      	beq.n	8008682 <__sflush_r+0xae>
 80085f6:	2300      	movs	r3, #0
 80085f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085fc:	682f      	ldr	r7, [r5, #0]
 80085fe:	6a21      	ldr	r1, [r4, #32]
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	d030      	beq.n	8008666 <__sflush_r+0x92>
 8008604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	0759      	lsls	r1, r3, #29
 800860a:	d505      	bpl.n	8008618 <__sflush_r+0x44>
 800860c:	6863      	ldr	r3, [r4, #4]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008612:	b10b      	cbz	r3, 8008618 <__sflush_r+0x44>
 8008614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008616:	1ad2      	subs	r2, r2, r3
 8008618:	2300      	movs	r3, #0
 800861a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800861c:	6a21      	ldr	r1, [r4, #32]
 800861e:	4628      	mov	r0, r5
 8008620:	47b0      	blx	r6
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	d106      	bne.n	8008636 <__sflush_r+0x62>
 8008628:	6829      	ldr	r1, [r5, #0]
 800862a:	291d      	cmp	r1, #29
 800862c:	d82b      	bhi.n	8008686 <__sflush_r+0xb2>
 800862e:	4a2a      	ldr	r2, [pc, #168]	@ (80086d8 <__sflush_r+0x104>)
 8008630:	410a      	asrs	r2, r1
 8008632:	07d6      	lsls	r6, r2, #31
 8008634:	d427      	bmi.n	8008686 <__sflush_r+0xb2>
 8008636:	2200      	movs	r2, #0
 8008638:	6062      	str	r2, [r4, #4]
 800863a:	04d9      	lsls	r1, r3, #19
 800863c:	6922      	ldr	r2, [r4, #16]
 800863e:	6022      	str	r2, [r4, #0]
 8008640:	d504      	bpl.n	800864c <__sflush_r+0x78>
 8008642:	1c42      	adds	r2, r0, #1
 8008644:	d101      	bne.n	800864a <__sflush_r+0x76>
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	b903      	cbnz	r3, 800864c <__sflush_r+0x78>
 800864a:	6560      	str	r0, [r4, #84]	@ 0x54
 800864c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800864e:	602f      	str	r7, [r5, #0]
 8008650:	b1b9      	cbz	r1, 8008682 <__sflush_r+0xae>
 8008652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008656:	4299      	cmp	r1, r3
 8008658:	d002      	beq.n	8008660 <__sflush_r+0x8c>
 800865a:	4628      	mov	r0, r5
 800865c:	f7fe fa2c 	bl	8006ab8 <_free_r>
 8008660:	2300      	movs	r3, #0
 8008662:	6363      	str	r3, [r4, #52]	@ 0x34
 8008664:	e00d      	b.n	8008682 <__sflush_r+0xae>
 8008666:	2301      	movs	r3, #1
 8008668:	4628      	mov	r0, r5
 800866a:	47b0      	blx	r6
 800866c:	4602      	mov	r2, r0
 800866e:	1c50      	adds	r0, r2, #1
 8008670:	d1c9      	bne.n	8008606 <__sflush_r+0x32>
 8008672:	682b      	ldr	r3, [r5, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0c6      	beq.n	8008606 <__sflush_r+0x32>
 8008678:	2b1d      	cmp	r3, #29
 800867a:	d001      	beq.n	8008680 <__sflush_r+0xac>
 800867c:	2b16      	cmp	r3, #22
 800867e:	d11e      	bne.n	80086be <__sflush_r+0xea>
 8008680:	602f      	str	r7, [r5, #0]
 8008682:	2000      	movs	r0, #0
 8008684:	e022      	b.n	80086cc <__sflush_r+0xf8>
 8008686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800868a:	b21b      	sxth	r3, r3
 800868c:	e01b      	b.n	80086c6 <__sflush_r+0xf2>
 800868e:	690f      	ldr	r7, [r1, #16]
 8008690:	2f00      	cmp	r7, #0
 8008692:	d0f6      	beq.n	8008682 <__sflush_r+0xae>
 8008694:	0793      	lsls	r3, r2, #30
 8008696:	680e      	ldr	r6, [r1, #0]
 8008698:	bf08      	it	eq
 800869a:	694b      	ldreq	r3, [r1, #20]
 800869c:	600f      	str	r7, [r1, #0]
 800869e:	bf18      	it	ne
 80086a0:	2300      	movne	r3, #0
 80086a2:	eba6 0807 	sub.w	r8, r6, r7
 80086a6:	608b      	str	r3, [r1, #8]
 80086a8:	f1b8 0f00 	cmp.w	r8, #0
 80086ac:	dde9      	ble.n	8008682 <__sflush_r+0xae>
 80086ae:	6a21      	ldr	r1, [r4, #32]
 80086b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086b2:	4643      	mov	r3, r8
 80086b4:	463a      	mov	r2, r7
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b0      	blx	r6
 80086ba:	2800      	cmp	r0, #0
 80086bc:	dc08      	bgt.n	80086d0 <__sflush_r+0xfc>
 80086be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c6:	81a3      	strh	r3, [r4, #12]
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d0:	4407      	add	r7, r0
 80086d2:	eba8 0800 	sub.w	r8, r8, r0
 80086d6:	e7e7      	b.n	80086a8 <__sflush_r+0xd4>
 80086d8:	dfbffffe 	.word	0xdfbffffe

080086dc <_fflush_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	690b      	ldr	r3, [r1, #16]
 80086e0:	4605      	mov	r5, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b913      	cbnz	r3, 80086ec <_fflush_r+0x10>
 80086e6:	2500      	movs	r5, #0
 80086e8:	4628      	mov	r0, r5
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	b118      	cbz	r0, 80086f6 <_fflush_r+0x1a>
 80086ee:	6a03      	ldr	r3, [r0, #32]
 80086f0:	b90b      	cbnz	r3, 80086f6 <_fflush_r+0x1a>
 80086f2:	f7fd fa41 	bl	8005b78 <__sinit>
 80086f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0f3      	beq.n	80086e6 <_fflush_r+0xa>
 80086fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008700:	07d0      	lsls	r0, r2, #31
 8008702:	d404      	bmi.n	800870e <_fflush_r+0x32>
 8008704:	0599      	lsls	r1, r3, #22
 8008706:	d402      	bmi.n	800870e <_fflush_r+0x32>
 8008708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800870a:	f7fd fb80 	bl	8005e0e <__retarget_lock_acquire_recursive>
 800870e:	4628      	mov	r0, r5
 8008710:	4621      	mov	r1, r4
 8008712:	f7ff ff5f 	bl	80085d4 <__sflush_r>
 8008716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008718:	07da      	lsls	r2, r3, #31
 800871a:	4605      	mov	r5, r0
 800871c:	d4e4      	bmi.n	80086e8 <_fflush_r+0xc>
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	059b      	lsls	r3, r3, #22
 8008722:	d4e1      	bmi.n	80086e8 <_fflush_r+0xc>
 8008724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008726:	f7fd fb73 	bl	8005e10 <__retarget_lock_release_recursive>
 800872a:	e7dd      	b.n	80086e8 <_fflush_r+0xc>

0800872c <memmove>:
 800872c:	4288      	cmp	r0, r1
 800872e:	b510      	push	{r4, lr}
 8008730:	eb01 0402 	add.w	r4, r1, r2
 8008734:	d902      	bls.n	800873c <memmove+0x10>
 8008736:	4284      	cmp	r4, r0
 8008738:	4623      	mov	r3, r4
 800873a:	d807      	bhi.n	800874c <memmove+0x20>
 800873c:	1e43      	subs	r3, r0, #1
 800873e:	42a1      	cmp	r1, r4
 8008740:	d008      	beq.n	8008754 <memmove+0x28>
 8008742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800874a:	e7f8      	b.n	800873e <memmove+0x12>
 800874c:	4402      	add	r2, r0
 800874e:	4601      	mov	r1, r0
 8008750:	428a      	cmp	r2, r1
 8008752:	d100      	bne.n	8008756 <memmove+0x2a>
 8008754:	bd10      	pop	{r4, pc}
 8008756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800875a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800875e:	e7f7      	b.n	8008750 <memmove+0x24>

08008760 <strncmp>:
 8008760:	b510      	push	{r4, lr}
 8008762:	b16a      	cbz	r2, 8008780 <strncmp+0x20>
 8008764:	3901      	subs	r1, #1
 8008766:	1884      	adds	r4, r0, r2
 8008768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800876c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008770:	429a      	cmp	r2, r3
 8008772:	d103      	bne.n	800877c <strncmp+0x1c>
 8008774:	42a0      	cmp	r0, r4
 8008776:	d001      	beq.n	800877c <strncmp+0x1c>
 8008778:	2a00      	cmp	r2, #0
 800877a:	d1f5      	bne.n	8008768 <strncmp+0x8>
 800877c:	1ad0      	subs	r0, r2, r3
 800877e:	bd10      	pop	{r4, pc}
 8008780:	4610      	mov	r0, r2
 8008782:	e7fc      	b.n	800877e <strncmp+0x1e>

08008784 <_sbrk_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d06      	ldr	r5, [pc, #24]	@ (80087a0 <_sbrk_r+0x1c>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	f7f9 f8d4 	bl	800193c <_sbrk>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_sbrk_r+0x1a>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_sbrk_r+0x1a>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	200004b8 	.word	0x200004b8

080087a4 <memcpy>:
 80087a4:	440a      	add	r2, r1
 80087a6:	4291      	cmp	r1, r2
 80087a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80087ac:	d100      	bne.n	80087b0 <memcpy+0xc>
 80087ae:	4770      	bx	lr
 80087b0:	b510      	push	{r4, lr}
 80087b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ba:	4291      	cmp	r1, r2
 80087bc:	d1f9      	bne.n	80087b2 <memcpy+0xe>
 80087be:	bd10      	pop	{r4, pc}

080087c0 <nan>:
 80087c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80087c8 <nan+0x8>
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	00000000 	.word	0x00000000
 80087cc:	7ff80000 	.word	0x7ff80000

080087d0 <__assert_func>:
 80087d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087d2:	4614      	mov	r4, r2
 80087d4:	461a      	mov	r2, r3
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <__assert_func+0x2c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	68d8      	ldr	r0, [r3, #12]
 80087de:	b954      	cbnz	r4, 80087f6 <__assert_func+0x26>
 80087e0:	4b07      	ldr	r3, [pc, #28]	@ (8008800 <__assert_func+0x30>)
 80087e2:	461c      	mov	r4, r3
 80087e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087e8:	9100      	str	r1, [sp, #0]
 80087ea:	462b      	mov	r3, r5
 80087ec:	4905      	ldr	r1, [pc, #20]	@ (8008804 <__assert_func+0x34>)
 80087ee:	f000 fba7 	bl	8008f40 <fiprintf>
 80087f2:	f000 fbb7 	bl	8008f64 <abort>
 80087f6:	4b04      	ldr	r3, [pc, #16]	@ (8008808 <__assert_func+0x38>)
 80087f8:	e7f4      	b.n	80087e4 <__assert_func+0x14>
 80087fa:	bf00      	nop
 80087fc:	20000018 	.word	0x20000018
 8008800:	080098cd 	.word	0x080098cd
 8008804:	0800989f 	.word	0x0800989f
 8008808:	08009892 	.word	0x08009892

0800880c <_calloc_r>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	fba1 5402 	umull	r5, r4, r1, r2
 8008812:	b93c      	cbnz	r4, 8008824 <_calloc_r+0x18>
 8008814:	4629      	mov	r1, r5
 8008816:	f7fe f9c3 	bl	8006ba0 <_malloc_r>
 800881a:	4606      	mov	r6, r0
 800881c:	b928      	cbnz	r0, 800882a <_calloc_r+0x1e>
 800881e:	2600      	movs	r6, #0
 8008820:	4630      	mov	r0, r6
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	220c      	movs	r2, #12
 8008826:	6002      	str	r2, [r0, #0]
 8008828:	e7f9      	b.n	800881e <_calloc_r+0x12>
 800882a:	462a      	mov	r2, r5
 800882c:	4621      	mov	r1, r4
 800882e:	f7fd fa70 	bl	8005d12 <memset>
 8008832:	e7f5      	b.n	8008820 <_calloc_r+0x14>

08008834 <rshift>:
 8008834:	6903      	ldr	r3, [r0, #16]
 8008836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800883a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800883e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008842:	f100 0414 	add.w	r4, r0, #20
 8008846:	dd45      	ble.n	80088d4 <rshift+0xa0>
 8008848:	f011 011f 	ands.w	r1, r1, #31
 800884c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008854:	d10c      	bne.n	8008870 <rshift+0x3c>
 8008856:	f100 0710 	add.w	r7, r0, #16
 800885a:	4629      	mov	r1, r5
 800885c:	42b1      	cmp	r1, r6
 800885e:	d334      	bcc.n	80088ca <rshift+0x96>
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	1eea      	subs	r2, r5, #3
 8008866:	4296      	cmp	r6, r2
 8008868:	bf38      	it	cc
 800886a:	2300      	movcc	r3, #0
 800886c:	4423      	add	r3, r4
 800886e:	e015      	b.n	800889c <rshift+0x68>
 8008870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008874:	f1c1 0820 	rsb	r8, r1, #32
 8008878:	40cf      	lsrs	r7, r1
 800887a:	f105 0e04 	add.w	lr, r5, #4
 800887e:	46a1      	mov	r9, r4
 8008880:	4576      	cmp	r6, lr
 8008882:	46f4      	mov	ip, lr
 8008884:	d815      	bhi.n	80088b2 <rshift+0x7e>
 8008886:	1a9a      	subs	r2, r3, r2
 8008888:	0092      	lsls	r2, r2, #2
 800888a:	3a04      	subs	r2, #4
 800888c:	3501      	adds	r5, #1
 800888e:	42ae      	cmp	r6, r5
 8008890:	bf38      	it	cc
 8008892:	2200      	movcc	r2, #0
 8008894:	18a3      	adds	r3, r4, r2
 8008896:	50a7      	str	r7, [r4, r2]
 8008898:	b107      	cbz	r7, 800889c <rshift+0x68>
 800889a:	3304      	adds	r3, #4
 800889c:	1b1a      	subs	r2, r3, r4
 800889e:	42a3      	cmp	r3, r4
 80088a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088a4:	bf08      	it	eq
 80088a6:	2300      	moveq	r3, #0
 80088a8:	6102      	str	r2, [r0, #16]
 80088aa:	bf08      	it	eq
 80088ac:	6143      	streq	r3, [r0, #20]
 80088ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088b2:	f8dc c000 	ldr.w	ip, [ip]
 80088b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80088ba:	ea4c 0707 	orr.w	r7, ip, r7
 80088be:	f849 7b04 	str.w	r7, [r9], #4
 80088c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088c6:	40cf      	lsrs	r7, r1
 80088c8:	e7da      	b.n	8008880 <rshift+0x4c>
 80088ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80088ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80088d2:	e7c3      	b.n	800885c <rshift+0x28>
 80088d4:	4623      	mov	r3, r4
 80088d6:	e7e1      	b.n	800889c <rshift+0x68>

080088d8 <__hexdig_fun>:
 80088d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80088dc:	2b09      	cmp	r3, #9
 80088de:	d802      	bhi.n	80088e6 <__hexdig_fun+0xe>
 80088e0:	3820      	subs	r0, #32
 80088e2:	b2c0      	uxtb	r0, r0
 80088e4:	4770      	bx	lr
 80088e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d801      	bhi.n	80088f2 <__hexdig_fun+0x1a>
 80088ee:	3847      	subs	r0, #71	@ 0x47
 80088f0:	e7f7      	b.n	80088e2 <__hexdig_fun+0xa>
 80088f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80088f6:	2b05      	cmp	r3, #5
 80088f8:	d801      	bhi.n	80088fe <__hexdig_fun+0x26>
 80088fa:	3827      	subs	r0, #39	@ 0x27
 80088fc:	e7f1      	b.n	80088e2 <__hexdig_fun+0xa>
 80088fe:	2000      	movs	r0, #0
 8008900:	4770      	bx	lr
	...

08008904 <__gethex>:
 8008904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	b085      	sub	sp, #20
 800890a:	468a      	mov	sl, r1
 800890c:	9302      	str	r3, [sp, #8]
 800890e:	680b      	ldr	r3, [r1, #0]
 8008910:	9001      	str	r0, [sp, #4]
 8008912:	4690      	mov	r8, r2
 8008914:	1c9c      	adds	r4, r3, #2
 8008916:	46a1      	mov	r9, r4
 8008918:	f814 0b01 	ldrb.w	r0, [r4], #1
 800891c:	2830      	cmp	r0, #48	@ 0x30
 800891e:	d0fa      	beq.n	8008916 <__gethex+0x12>
 8008920:	eba9 0303 	sub.w	r3, r9, r3
 8008924:	f1a3 0b02 	sub.w	fp, r3, #2
 8008928:	f7ff ffd6 	bl	80088d8 <__hexdig_fun>
 800892c:	4605      	mov	r5, r0
 800892e:	2800      	cmp	r0, #0
 8008930:	d168      	bne.n	8008a04 <__gethex+0x100>
 8008932:	49a0      	ldr	r1, [pc, #640]	@ (8008bb4 <__gethex+0x2b0>)
 8008934:	2201      	movs	r2, #1
 8008936:	4648      	mov	r0, r9
 8008938:	f7ff ff12 	bl	8008760 <strncmp>
 800893c:	4607      	mov	r7, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	d167      	bne.n	8008a12 <__gethex+0x10e>
 8008942:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008946:	4626      	mov	r6, r4
 8008948:	f7ff ffc6 	bl	80088d8 <__hexdig_fun>
 800894c:	2800      	cmp	r0, #0
 800894e:	d062      	beq.n	8008a16 <__gethex+0x112>
 8008950:	4623      	mov	r3, r4
 8008952:	7818      	ldrb	r0, [r3, #0]
 8008954:	2830      	cmp	r0, #48	@ 0x30
 8008956:	4699      	mov	r9, r3
 8008958:	f103 0301 	add.w	r3, r3, #1
 800895c:	d0f9      	beq.n	8008952 <__gethex+0x4e>
 800895e:	f7ff ffbb 	bl	80088d8 <__hexdig_fun>
 8008962:	fab0 f580 	clz	r5, r0
 8008966:	096d      	lsrs	r5, r5, #5
 8008968:	f04f 0b01 	mov.w	fp, #1
 800896c:	464a      	mov	r2, r9
 800896e:	4616      	mov	r6, r2
 8008970:	3201      	adds	r2, #1
 8008972:	7830      	ldrb	r0, [r6, #0]
 8008974:	f7ff ffb0 	bl	80088d8 <__hexdig_fun>
 8008978:	2800      	cmp	r0, #0
 800897a:	d1f8      	bne.n	800896e <__gethex+0x6a>
 800897c:	498d      	ldr	r1, [pc, #564]	@ (8008bb4 <__gethex+0x2b0>)
 800897e:	2201      	movs	r2, #1
 8008980:	4630      	mov	r0, r6
 8008982:	f7ff feed 	bl	8008760 <strncmp>
 8008986:	2800      	cmp	r0, #0
 8008988:	d13f      	bne.n	8008a0a <__gethex+0x106>
 800898a:	b944      	cbnz	r4, 800899e <__gethex+0x9a>
 800898c:	1c74      	adds	r4, r6, #1
 800898e:	4622      	mov	r2, r4
 8008990:	4616      	mov	r6, r2
 8008992:	3201      	adds	r2, #1
 8008994:	7830      	ldrb	r0, [r6, #0]
 8008996:	f7ff ff9f 	bl	80088d8 <__hexdig_fun>
 800899a:	2800      	cmp	r0, #0
 800899c:	d1f8      	bne.n	8008990 <__gethex+0x8c>
 800899e:	1ba4      	subs	r4, r4, r6
 80089a0:	00a7      	lsls	r7, r4, #2
 80089a2:	7833      	ldrb	r3, [r6, #0]
 80089a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80089a8:	2b50      	cmp	r3, #80	@ 0x50
 80089aa:	d13e      	bne.n	8008a2a <__gethex+0x126>
 80089ac:	7873      	ldrb	r3, [r6, #1]
 80089ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80089b0:	d033      	beq.n	8008a1a <__gethex+0x116>
 80089b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80089b4:	d034      	beq.n	8008a20 <__gethex+0x11c>
 80089b6:	1c71      	adds	r1, r6, #1
 80089b8:	2400      	movs	r4, #0
 80089ba:	7808      	ldrb	r0, [r1, #0]
 80089bc:	f7ff ff8c 	bl	80088d8 <__hexdig_fun>
 80089c0:	1e43      	subs	r3, r0, #1
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b18      	cmp	r3, #24
 80089c6:	d830      	bhi.n	8008a2a <__gethex+0x126>
 80089c8:	f1a0 0210 	sub.w	r2, r0, #16
 80089cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089d0:	f7ff ff82 	bl	80088d8 <__hexdig_fun>
 80089d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80089d8:	fa5f fc8c 	uxtb.w	ip, ip
 80089dc:	f1bc 0f18 	cmp.w	ip, #24
 80089e0:	f04f 030a 	mov.w	r3, #10
 80089e4:	d91e      	bls.n	8008a24 <__gethex+0x120>
 80089e6:	b104      	cbz	r4, 80089ea <__gethex+0xe6>
 80089e8:	4252      	negs	r2, r2
 80089ea:	4417      	add	r7, r2
 80089ec:	f8ca 1000 	str.w	r1, [sl]
 80089f0:	b1ed      	cbz	r5, 8008a2e <__gethex+0x12a>
 80089f2:	f1bb 0f00 	cmp.w	fp, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2506      	moveq	r5, #6
 80089fa:	2500      	movne	r5, #0
 80089fc:	4628      	mov	r0, r5
 80089fe:	b005      	add	sp, #20
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a04:	2500      	movs	r5, #0
 8008a06:	462c      	mov	r4, r5
 8008a08:	e7b0      	b.n	800896c <__gethex+0x68>
 8008a0a:	2c00      	cmp	r4, #0
 8008a0c:	d1c7      	bne.n	800899e <__gethex+0x9a>
 8008a0e:	4627      	mov	r7, r4
 8008a10:	e7c7      	b.n	80089a2 <__gethex+0x9e>
 8008a12:	464e      	mov	r6, r9
 8008a14:	462f      	mov	r7, r5
 8008a16:	2501      	movs	r5, #1
 8008a18:	e7c3      	b.n	80089a2 <__gethex+0x9e>
 8008a1a:	2400      	movs	r4, #0
 8008a1c:	1cb1      	adds	r1, r6, #2
 8008a1e:	e7cc      	b.n	80089ba <__gethex+0xb6>
 8008a20:	2401      	movs	r4, #1
 8008a22:	e7fb      	b.n	8008a1c <__gethex+0x118>
 8008a24:	fb03 0002 	mla	r0, r3, r2, r0
 8008a28:	e7ce      	b.n	80089c8 <__gethex+0xc4>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	e7de      	b.n	80089ec <__gethex+0xe8>
 8008a2e:	eba6 0309 	sub.w	r3, r6, r9
 8008a32:	3b01      	subs	r3, #1
 8008a34:	4629      	mov	r1, r5
 8008a36:	2b07      	cmp	r3, #7
 8008a38:	dc0a      	bgt.n	8008a50 <__gethex+0x14c>
 8008a3a:	9801      	ldr	r0, [sp, #4]
 8008a3c:	f7fe f93c 	bl	8006cb8 <_Balloc>
 8008a40:	4604      	mov	r4, r0
 8008a42:	b940      	cbnz	r0, 8008a56 <__gethex+0x152>
 8008a44:	4b5c      	ldr	r3, [pc, #368]	@ (8008bb8 <__gethex+0x2b4>)
 8008a46:	4602      	mov	r2, r0
 8008a48:	21e4      	movs	r1, #228	@ 0xe4
 8008a4a:	485c      	ldr	r0, [pc, #368]	@ (8008bbc <__gethex+0x2b8>)
 8008a4c:	f7ff fec0 	bl	80087d0 <__assert_func>
 8008a50:	3101      	adds	r1, #1
 8008a52:	105b      	asrs	r3, r3, #1
 8008a54:	e7ef      	b.n	8008a36 <__gethex+0x132>
 8008a56:	f100 0a14 	add.w	sl, r0, #20
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4655      	mov	r5, sl
 8008a5e:	469b      	mov	fp, r3
 8008a60:	45b1      	cmp	r9, r6
 8008a62:	d337      	bcc.n	8008ad4 <__gethex+0x1d0>
 8008a64:	f845 bb04 	str.w	fp, [r5], #4
 8008a68:	eba5 050a 	sub.w	r5, r5, sl
 8008a6c:	10ad      	asrs	r5, r5, #2
 8008a6e:	6125      	str	r5, [r4, #16]
 8008a70:	4658      	mov	r0, fp
 8008a72:	f7fe fa13 	bl	8006e9c <__hi0bits>
 8008a76:	016d      	lsls	r5, r5, #5
 8008a78:	f8d8 6000 	ldr.w	r6, [r8]
 8008a7c:	1a2d      	subs	r5, r5, r0
 8008a7e:	42b5      	cmp	r5, r6
 8008a80:	dd54      	ble.n	8008b2c <__gethex+0x228>
 8008a82:	1bad      	subs	r5, r5, r6
 8008a84:	4629      	mov	r1, r5
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7fe fda7 	bl	80075da <__any_on>
 8008a8c:	4681      	mov	r9, r0
 8008a8e:	b178      	cbz	r0, 8008ab0 <__gethex+0x1ac>
 8008a90:	1e6b      	subs	r3, r5, #1
 8008a92:	1159      	asrs	r1, r3, #5
 8008a94:	f003 021f 	and.w	r2, r3, #31
 8008a98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008a9c:	f04f 0901 	mov.w	r9, #1
 8008aa0:	fa09 f202 	lsl.w	r2, r9, r2
 8008aa4:	420a      	tst	r2, r1
 8008aa6:	d003      	beq.n	8008ab0 <__gethex+0x1ac>
 8008aa8:	454b      	cmp	r3, r9
 8008aaa:	dc36      	bgt.n	8008b1a <__gethex+0x216>
 8008aac:	f04f 0902 	mov.w	r9, #2
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7ff febe 	bl	8008834 <rshift>
 8008ab8:	442f      	add	r7, r5
 8008aba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008abe:	42bb      	cmp	r3, r7
 8008ac0:	da42      	bge.n	8008b48 <__gethex+0x244>
 8008ac2:	9801      	ldr	r0, [sp, #4]
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f7fe f937 	bl	8006d38 <_Bfree>
 8008aca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008acc:	2300      	movs	r3, #0
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	25a3      	movs	r5, #163	@ 0xa3
 8008ad2:	e793      	b.n	80089fc <__gethex+0xf8>
 8008ad4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ad8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008ada:	d012      	beq.n	8008b02 <__gethex+0x1fe>
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d104      	bne.n	8008aea <__gethex+0x1e6>
 8008ae0:	f845 bb04 	str.w	fp, [r5], #4
 8008ae4:	f04f 0b00 	mov.w	fp, #0
 8008ae8:	465b      	mov	r3, fp
 8008aea:	7830      	ldrb	r0, [r6, #0]
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	f7ff fef3 	bl	80088d8 <__hexdig_fun>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	f000 000f 	and.w	r0, r0, #15
 8008af8:	4098      	lsls	r0, r3
 8008afa:	ea4b 0b00 	orr.w	fp, fp, r0
 8008afe:	3304      	adds	r3, #4
 8008b00:	e7ae      	b.n	8008a60 <__gethex+0x15c>
 8008b02:	45b1      	cmp	r9, r6
 8008b04:	d8ea      	bhi.n	8008adc <__gethex+0x1d8>
 8008b06:	492b      	ldr	r1, [pc, #172]	@ (8008bb4 <__gethex+0x2b0>)
 8008b08:	9303      	str	r3, [sp, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff fe27 	bl	8008760 <strncmp>
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d1e1      	bne.n	8008adc <__gethex+0x1d8>
 8008b18:	e7a2      	b.n	8008a60 <__gethex+0x15c>
 8008b1a:	1ea9      	subs	r1, r5, #2
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f7fe fd5c 	bl	80075da <__any_on>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d0c2      	beq.n	8008aac <__gethex+0x1a8>
 8008b26:	f04f 0903 	mov.w	r9, #3
 8008b2a:	e7c1      	b.n	8008ab0 <__gethex+0x1ac>
 8008b2c:	da09      	bge.n	8008b42 <__gethex+0x23e>
 8008b2e:	1b75      	subs	r5, r6, r5
 8008b30:	4621      	mov	r1, r4
 8008b32:	9801      	ldr	r0, [sp, #4]
 8008b34:	462a      	mov	r2, r5
 8008b36:	f7fe fb17 	bl	8007168 <__lshift>
 8008b3a:	1b7f      	subs	r7, r7, r5
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	f100 0a14 	add.w	sl, r0, #20
 8008b42:	f04f 0900 	mov.w	r9, #0
 8008b46:	e7b8      	b.n	8008aba <__gethex+0x1b6>
 8008b48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b4c:	42bd      	cmp	r5, r7
 8008b4e:	dd6f      	ble.n	8008c30 <__gethex+0x32c>
 8008b50:	1bed      	subs	r5, r5, r7
 8008b52:	42ae      	cmp	r6, r5
 8008b54:	dc34      	bgt.n	8008bc0 <__gethex+0x2bc>
 8008b56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d022      	beq.n	8008ba4 <__gethex+0x2a0>
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d024      	beq.n	8008bac <__gethex+0x2a8>
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d115      	bne.n	8008b92 <__gethex+0x28e>
 8008b66:	42ae      	cmp	r6, r5
 8008b68:	d113      	bne.n	8008b92 <__gethex+0x28e>
 8008b6a:	2e01      	cmp	r6, #1
 8008b6c:	d10b      	bne.n	8008b86 <__gethex+0x282>
 8008b6e:	9a02      	ldr	r2, [sp, #8]
 8008b70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	2301      	movs	r3, #1
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	f8ca 3000 	str.w	r3, [sl]
 8008b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b80:	2562      	movs	r5, #98	@ 0x62
 8008b82:	601c      	str	r4, [r3, #0]
 8008b84:	e73a      	b.n	80089fc <__gethex+0xf8>
 8008b86:	1e71      	subs	r1, r6, #1
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7fe fd26 	bl	80075da <__any_on>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d1ed      	bne.n	8008b6e <__gethex+0x26a>
 8008b92:	9801      	ldr	r0, [sp, #4]
 8008b94:	4621      	mov	r1, r4
 8008b96:	f7fe f8cf 	bl	8006d38 <_Bfree>
 8008b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	2550      	movs	r5, #80	@ 0x50
 8008ba2:	e72b      	b.n	80089fc <__gethex+0xf8>
 8008ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1f3      	bne.n	8008b92 <__gethex+0x28e>
 8008baa:	e7e0      	b.n	8008b6e <__gethex+0x26a>
 8008bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1dd      	bne.n	8008b6e <__gethex+0x26a>
 8008bb2:	e7ee      	b.n	8008b92 <__gethex+0x28e>
 8008bb4:	08009720 	.word	0x08009720
 8008bb8:	080095b9 	.word	0x080095b9
 8008bbc:	080098ce 	.word	0x080098ce
 8008bc0:	1e6f      	subs	r7, r5, #1
 8008bc2:	f1b9 0f00 	cmp.w	r9, #0
 8008bc6:	d130      	bne.n	8008c2a <__gethex+0x326>
 8008bc8:	b127      	cbz	r7, 8008bd4 <__gethex+0x2d0>
 8008bca:	4639      	mov	r1, r7
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7fe fd04 	bl	80075da <__any_on>
 8008bd2:	4681      	mov	r9, r0
 8008bd4:	117a      	asrs	r2, r7, #5
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008bdc:	f007 071f 	and.w	r7, r7, #31
 8008be0:	40bb      	lsls	r3, r7
 8008be2:	4213      	tst	r3, r2
 8008be4:	4629      	mov	r1, r5
 8008be6:	4620      	mov	r0, r4
 8008be8:	bf18      	it	ne
 8008bea:	f049 0902 	orrne.w	r9, r9, #2
 8008bee:	f7ff fe21 	bl	8008834 <rshift>
 8008bf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008bf6:	1b76      	subs	r6, r6, r5
 8008bf8:	2502      	movs	r5, #2
 8008bfa:	f1b9 0f00 	cmp.w	r9, #0
 8008bfe:	d047      	beq.n	8008c90 <__gethex+0x38c>
 8008c00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d015      	beq.n	8008c34 <__gethex+0x330>
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d017      	beq.n	8008c3c <__gethex+0x338>
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d109      	bne.n	8008c24 <__gethex+0x320>
 8008c10:	f019 0f02 	tst.w	r9, #2
 8008c14:	d006      	beq.n	8008c24 <__gethex+0x320>
 8008c16:	f8da 3000 	ldr.w	r3, [sl]
 8008c1a:	ea49 0903 	orr.w	r9, r9, r3
 8008c1e:	f019 0f01 	tst.w	r9, #1
 8008c22:	d10e      	bne.n	8008c42 <__gethex+0x33e>
 8008c24:	f045 0510 	orr.w	r5, r5, #16
 8008c28:	e032      	b.n	8008c90 <__gethex+0x38c>
 8008c2a:	f04f 0901 	mov.w	r9, #1
 8008c2e:	e7d1      	b.n	8008bd4 <__gethex+0x2d0>
 8008c30:	2501      	movs	r5, #1
 8008c32:	e7e2      	b.n	8008bfa <__gethex+0x2f6>
 8008c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c36:	f1c3 0301 	rsb	r3, r3, #1
 8008c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0f0      	beq.n	8008c24 <__gethex+0x320>
 8008c42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c46:	f104 0314 	add.w	r3, r4, #20
 8008c4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c52:	f04f 0c00 	mov.w	ip, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c60:	d01b      	beq.n	8008c9a <__gethex+0x396>
 8008c62:	3201      	adds	r2, #1
 8008c64:	6002      	str	r2, [r0, #0]
 8008c66:	2d02      	cmp	r5, #2
 8008c68:	f104 0314 	add.w	r3, r4, #20
 8008c6c:	d13c      	bne.n	8008ce8 <__gethex+0x3e4>
 8008c6e:	f8d8 2000 	ldr.w	r2, [r8]
 8008c72:	3a01      	subs	r2, #1
 8008c74:	42b2      	cmp	r2, r6
 8008c76:	d109      	bne.n	8008c8c <__gethex+0x388>
 8008c78:	1171      	asrs	r1, r6, #5
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c80:	f006 061f 	and.w	r6, r6, #31
 8008c84:	fa02 f606 	lsl.w	r6, r2, r6
 8008c88:	421e      	tst	r6, r3
 8008c8a:	d13a      	bne.n	8008d02 <__gethex+0x3fe>
 8008c8c:	f045 0520 	orr.w	r5, r5, #32
 8008c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c92:	601c      	str	r4, [r3, #0]
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	601f      	str	r7, [r3, #0]
 8008c98:	e6b0      	b.n	80089fc <__gethex+0xf8>
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ca0:	d8d9      	bhi.n	8008c56 <__gethex+0x352>
 8008ca2:	68a3      	ldr	r3, [r4, #8]
 8008ca4:	459b      	cmp	fp, r3
 8008ca6:	db17      	blt.n	8008cd8 <__gethex+0x3d4>
 8008ca8:	6861      	ldr	r1, [r4, #4]
 8008caa:	9801      	ldr	r0, [sp, #4]
 8008cac:	3101      	adds	r1, #1
 8008cae:	f7fe f803 	bl	8006cb8 <_Balloc>
 8008cb2:	4681      	mov	r9, r0
 8008cb4:	b918      	cbnz	r0, 8008cbe <__gethex+0x3ba>
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d20 <__gethex+0x41c>)
 8008cb8:	4602      	mov	r2, r0
 8008cba:	2184      	movs	r1, #132	@ 0x84
 8008cbc:	e6c5      	b.n	8008a4a <__gethex+0x146>
 8008cbe:	6922      	ldr	r2, [r4, #16]
 8008cc0:	3202      	adds	r2, #2
 8008cc2:	f104 010c 	add.w	r1, r4, #12
 8008cc6:	0092      	lsls	r2, r2, #2
 8008cc8:	300c      	adds	r0, #12
 8008cca:	f7ff fd6b 	bl	80087a4 <memcpy>
 8008cce:	4621      	mov	r1, r4
 8008cd0:	9801      	ldr	r0, [sp, #4]
 8008cd2:	f7fe f831 	bl	8006d38 <_Bfree>
 8008cd6:	464c      	mov	r4, r9
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ce0:	6122      	str	r2, [r4, #16]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	615a      	str	r2, [r3, #20]
 8008ce6:	e7be      	b.n	8008c66 <__gethex+0x362>
 8008ce8:	6922      	ldr	r2, [r4, #16]
 8008cea:	455a      	cmp	r2, fp
 8008cec:	dd0b      	ble.n	8008d06 <__gethex+0x402>
 8008cee:	2101      	movs	r1, #1
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7ff fd9f 	bl	8008834 <rshift>
 8008cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cfa:	3701      	adds	r7, #1
 8008cfc:	42bb      	cmp	r3, r7
 8008cfe:	f6ff aee0 	blt.w	8008ac2 <__gethex+0x1be>
 8008d02:	2501      	movs	r5, #1
 8008d04:	e7c2      	b.n	8008c8c <__gethex+0x388>
 8008d06:	f016 061f 	ands.w	r6, r6, #31
 8008d0a:	d0fa      	beq.n	8008d02 <__gethex+0x3fe>
 8008d0c:	4453      	add	r3, sl
 8008d0e:	f1c6 0620 	rsb	r6, r6, #32
 8008d12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d16:	f7fe f8c1 	bl	8006e9c <__hi0bits>
 8008d1a:	42b0      	cmp	r0, r6
 8008d1c:	dbe7      	blt.n	8008cee <__gethex+0x3ea>
 8008d1e:	e7f0      	b.n	8008d02 <__gethex+0x3fe>
 8008d20:	080095b9 	.word	0x080095b9

08008d24 <L_shift>:
 8008d24:	f1c2 0208 	rsb	r2, r2, #8
 8008d28:	0092      	lsls	r2, r2, #2
 8008d2a:	b570      	push	{r4, r5, r6, lr}
 8008d2c:	f1c2 0620 	rsb	r6, r2, #32
 8008d30:	6843      	ldr	r3, [r0, #4]
 8008d32:	6804      	ldr	r4, [r0, #0]
 8008d34:	fa03 f506 	lsl.w	r5, r3, r6
 8008d38:	432c      	orrs	r4, r5
 8008d3a:	40d3      	lsrs	r3, r2
 8008d3c:	6004      	str	r4, [r0, #0]
 8008d3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d42:	4288      	cmp	r0, r1
 8008d44:	d3f4      	bcc.n	8008d30 <L_shift+0xc>
 8008d46:	bd70      	pop	{r4, r5, r6, pc}

08008d48 <__match>:
 8008d48:	b530      	push	{r4, r5, lr}
 8008d4a:	6803      	ldr	r3, [r0, #0]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d52:	b914      	cbnz	r4, 8008d5a <__match+0x12>
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	2001      	movs	r0, #1
 8008d58:	bd30      	pop	{r4, r5, pc}
 8008d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008d62:	2d19      	cmp	r5, #25
 8008d64:	bf98      	it	ls
 8008d66:	3220      	addls	r2, #32
 8008d68:	42a2      	cmp	r2, r4
 8008d6a:	d0f0      	beq.n	8008d4e <__match+0x6>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	e7f3      	b.n	8008d58 <__match+0x10>

08008d70 <__hexnan>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	680b      	ldr	r3, [r1, #0]
 8008d76:	6801      	ldr	r1, [r0, #0]
 8008d78:	115e      	asrs	r6, r3, #5
 8008d7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d7e:	f013 031f 	ands.w	r3, r3, #31
 8008d82:	b087      	sub	sp, #28
 8008d84:	bf18      	it	ne
 8008d86:	3604      	addne	r6, #4
 8008d88:	2500      	movs	r5, #0
 8008d8a:	1f37      	subs	r7, r6, #4
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	4690      	mov	r8, r2
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d96:	46b9      	mov	r9, r7
 8008d98:	463c      	mov	r4, r7
 8008d9a:	9502      	str	r5, [sp, #8]
 8008d9c:	46ab      	mov	fp, r5
 8008d9e:	784a      	ldrb	r2, [r1, #1]
 8008da0:	1c4b      	adds	r3, r1, #1
 8008da2:	9303      	str	r3, [sp, #12]
 8008da4:	b342      	cbz	r2, 8008df8 <__hexnan+0x88>
 8008da6:	4610      	mov	r0, r2
 8008da8:	9105      	str	r1, [sp, #20]
 8008daa:	9204      	str	r2, [sp, #16]
 8008dac:	f7ff fd94 	bl	80088d8 <__hexdig_fun>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d151      	bne.n	8008e58 <__hexnan+0xe8>
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	9905      	ldr	r1, [sp, #20]
 8008db8:	2a20      	cmp	r2, #32
 8008dba:	d818      	bhi.n	8008dee <__hexnan+0x7e>
 8008dbc:	9b02      	ldr	r3, [sp, #8]
 8008dbe:	459b      	cmp	fp, r3
 8008dc0:	dd13      	ble.n	8008dea <__hexnan+0x7a>
 8008dc2:	454c      	cmp	r4, r9
 8008dc4:	d206      	bcs.n	8008dd4 <__hexnan+0x64>
 8008dc6:	2d07      	cmp	r5, #7
 8008dc8:	dc04      	bgt.n	8008dd4 <__hexnan+0x64>
 8008dca:	462a      	mov	r2, r5
 8008dcc:	4649      	mov	r1, r9
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f7ff ffa8 	bl	8008d24 <L_shift>
 8008dd4:	4544      	cmp	r4, r8
 8008dd6:	d952      	bls.n	8008e7e <__hexnan+0x10e>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f1a4 0904 	sub.w	r9, r4, #4
 8008dde:	f844 3c04 	str.w	r3, [r4, #-4]
 8008de2:	f8cd b008 	str.w	fp, [sp, #8]
 8008de6:	464c      	mov	r4, r9
 8008de8:	461d      	mov	r5, r3
 8008dea:	9903      	ldr	r1, [sp, #12]
 8008dec:	e7d7      	b.n	8008d9e <__hexnan+0x2e>
 8008dee:	2a29      	cmp	r2, #41	@ 0x29
 8008df0:	d157      	bne.n	8008ea2 <__hexnan+0x132>
 8008df2:	3102      	adds	r1, #2
 8008df4:	f8ca 1000 	str.w	r1, [sl]
 8008df8:	f1bb 0f00 	cmp.w	fp, #0
 8008dfc:	d051      	beq.n	8008ea2 <__hexnan+0x132>
 8008dfe:	454c      	cmp	r4, r9
 8008e00:	d206      	bcs.n	8008e10 <__hexnan+0xa0>
 8008e02:	2d07      	cmp	r5, #7
 8008e04:	dc04      	bgt.n	8008e10 <__hexnan+0xa0>
 8008e06:	462a      	mov	r2, r5
 8008e08:	4649      	mov	r1, r9
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f7ff ff8a 	bl	8008d24 <L_shift>
 8008e10:	4544      	cmp	r4, r8
 8008e12:	d936      	bls.n	8008e82 <__hexnan+0x112>
 8008e14:	f1a8 0204 	sub.w	r2, r8, #4
 8008e18:	4623      	mov	r3, r4
 8008e1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e22:	429f      	cmp	r7, r3
 8008e24:	d2f9      	bcs.n	8008e1a <__hexnan+0xaa>
 8008e26:	1b3b      	subs	r3, r7, r4
 8008e28:	f023 0303 	bic.w	r3, r3, #3
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	3401      	adds	r4, #1
 8008e30:	3e03      	subs	r6, #3
 8008e32:	42b4      	cmp	r4, r6
 8008e34:	bf88      	it	hi
 8008e36:	2304      	movhi	r3, #4
 8008e38:	4443      	add	r3, r8
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f843 2b04 	str.w	r2, [r3], #4
 8008e40:	429f      	cmp	r7, r3
 8008e42:	d2fb      	bcs.n	8008e3c <__hexnan+0xcc>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	b91b      	cbnz	r3, 8008e50 <__hexnan+0xe0>
 8008e48:	4547      	cmp	r7, r8
 8008e4a:	d128      	bne.n	8008e9e <__hexnan+0x12e>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	2005      	movs	r0, #5
 8008e52:	b007      	add	sp, #28
 8008e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e58:	3501      	adds	r5, #1
 8008e5a:	2d08      	cmp	r5, #8
 8008e5c:	f10b 0b01 	add.w	fp, fp, #1
 8008e60:	dd06      	ble.n	8008e70 <__hexnan+0x100>
 8008e62:	4544      	cmp	r4, r8
 8008e64:	d9c1      	bls.n	8008dea <__hexnan+0x7a>
 8008e66:	2300      	movs	r3, #0
 8008e68:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e6c:	2501      	movs	r5, #1
 8008e6e:	3c04      	subs	r4, #4
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	f000 000f 	and.w	r0, r0, #15
 8008e76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	e7b5      	b.n	8008dea <__hexnan+0x7a>
 8008e7e:	2508      	movs	r5, #8
 8008e80:	e7b3      	b.n	8008dea <__hexnan+0x7a>
 8008e82:	9b01      	ldr	r3, [sp, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0dd      	beq.n	8008e44 <__hexnan+0xd4>
 8008e88:	f1c3 0320 	rsb	r3, r3, #32
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e90:	40da      	lsrs	r2, r3
 8008e92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008e96:	4013      	ands	r3, r2
 8008e98:	f846 3c04 	str.w	r3, [r6, #-4]
 8008e9c:	e7d2      	b.n	8008e44 <__hexnan+0xd4>
 8008e9e:	3f04      	subs	r7, #4
 8008ea0:	e7d0      	b.n	8008e44 <__hexnan+0xd4>
 8008ea2:	2004      	movs	r0, #4
 8008ea4:	e7d5      	b.n	8008e52 <__hexnan+0xe2>

08008ea6 <__ascii_mbtowc>:
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	b901      	cbnz	r1, 8008eac <__ascii_mbtowc+0x6>
 8008eaa:	a901      	add	r1, sp, #4
 8008eac:	b142      	cbz	r2, 8008ec0 <__ascii_mbtowc+0x1a>
 8008eae:	b14b      	cbz	r3, 8008ec4 <__ascii_mbtowc+0x1e>
 8008eb0:	7813      	ldrb	r3, [r2, #0]
 8008eb2:	600b      	str	r3, [r1, #0]
 8008eb4:	7812      	ldrb	r2, [r2, #0]
 8008eb6:	1e10      	subs	r0, r2, #0
 8008eb8:	bf18      	it	ne
 8008eba:	2001      	movne	r0, #1
 8008ebc:	b002      	add	sp, #8
 8008ebe:	4770      	bx	lr
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	e7fb      	b.n	8008ebc <__ascii_mbtowc+0x16>
 8008ec4:	f06f 0001 	mvn.w	r0, #1
 8008ec8:	e7f8      	b.n	8008ebc <__ascii_mbtowc+0x16>

08008eca <_realloc_r>:
 8008eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4615      	mov	r5, r2
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	b921      	cbnz	r1, 8008ee0 <_realloc_r+0x16>
 8008ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	4611      	mov	r1, r2
 8008edc:	f7fd be60 	b.w	8006ba0 <_malloc_r>
 8008ee0:	b92a      	cbnz	r2, 8008eee <_realloc_r+0x24>
 8008ee2:	f7fd fde9 	bl	8006ab8 <_free_r>
 8008ee6:	2400      	movs	r4, #0
 8008ee8:	4620      	mov	r0, r4
 8008eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eee:	f000 f840 	bl	8008f72 <_malloc_usable_size_r>
 8008ef2:	4285      	cmp	r5, r0
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	d802      	bhi.n	8008efe <_realloc_r+0x34>
 8008ef8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008efc:	d8f4      	bhi.n	8008ee8 <_realloc_r+0x1e>
 8008efe:	4629      	mov	r1, r5
 8008f00:	4640      	mov	r0, r8
 8008f02:	f7fd fe4d 	bl	8006ba0 <_malloc_r>
 8008f06:	4607      	mov	r7, r0
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d0ec      	beq.n	8008ee6 <_realloc_r+0x1c>
 8008f0c:	42b5      	cmp	r5, r6
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4621      	mov	r1, r4
 8008f12:	bf28      	it	cs
 8008f14:	4632      	movcs	r2, r6
 8008f16:	f7ff fc45 	bl	80087a4 <memcpy>
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	f7fd fdcb 	bl	8006ab8 <_free_r>
 8008f22:	463c      	mov	r4, r7
 8008f24:	e7e0      	b.n	8008ee8 <_realloc_r+0x1e>

08008f26 <__ascii_wctomb>:
 8008f26:	4603      	mov	r3, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	b141      	cbz	r1, 8008f3e <__ascii_wctomb+0x18>
 8008f2c:	2aff      	cmp	r2, #255	@ 0xff
 8008f2e:	d904      	bls.n	8008f3a <__ascii_wctomb+0x14>
 8008f30:	228a      	movs	r2, #138	@ 0x8a
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	4770      	bx	lr
 8008f3a:	700a      	strb	r2, [r1, #0]
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	4770      	bx	lr

08008f40 <fiprintf>:
 8008f40:	b40e      	push	{r1, r2, r3}
 8008f42:	b503      	push	{r0, r1, lr}
 8008f44:	4601      	mov	r1, r0
 8008f46:	ab03      	add	r3, sp, #12
 8008f48:	4805      	ldr	r0, [pc, #20]	@ (8008f60 <fiprintf+0x20>)
 8008f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4e:	6800      	ldr	r0, [r0, #0]
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	f000 f83f 	bl	8008fd4 <_vfiprintf_r>
 8008f56:	b002      	add	sp, #8
 8008f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f5c:	b003      	add	sp, #12
 8008f5e:	4770      	bx	lr
 8008f60:	20000018 	.word	0x20000018

08008f64 <abort>:
 8008f64:	b508      	push	{r3, lr}
 8008f66:	2006      	movs	r0, #6
 8008f68:	f000 fa08 	bl	800937c <raise>
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	f7f8 fc6d 	bl	800184c <_exit>

08008f72 <_malloc_usable_size_r>:
 8008f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f76:	1f18      	subs	r0, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bfbc      	itt	lt
 8008f7c:	580b      	ldrlt	r3, [r1, r0]
 8008f7e:	18c0      	addlt	r0, r0, r3
 8008f80:	4770      	bx	lr

08008f82 <__sfputc_r>:
 8008f82:	6893      	ldr	r3, [r2, #8]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	b410      	push	{r4}
 8008f8a:	6093      	str	r3, [r2, #8]
 8008f8c:	da08      	bge.n	8008fa0 <__sfputc_r+0x1e>
 8008f8e:	6994      	ldr	r4, [r2, #24]
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	db01      	blt.n	8008f98 <__sfputc_r+0x16>
 8008f94:	290a      	cmp	r1, #10
 8008f96:	d103      	bne.n	8008fa0 <__sfputc_r+0x1e>
 8008f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f9c:	f000 b932 	b.w	8009204 <__swbuf_r>
 8008fa0:	6813      	ldr	r3, [r2, #0]
 8008fa2:	1c58      	adds	r0, r3, #1
 8008fa4:	6010      	str	r0, [r2, #0]
 8008fa6:	7019      	strb	r1, [r3, #0]
 8008fa8:	4608      	mov	r0, r1
 8008faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <__sfputs_r>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	18d5      	adds	r5, r2, r3
 8008fba:	42ac      	cmp	r4, r5
 8008fbc:	d101      	bne.n	8008fc2 <__sfputs_r+0x12>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e007      	b.n	8008fd2 <__sfputs_r+0x22>
 8008fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff ffda 	bl	8008f82 <__sfputc_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d1f3      	bne.n	8008fba <__sfputs_r+0xa>
 8008fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fd4 <_vfiprintf_r>:
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	460d      	mov	r5, r1
 8008fda:	b09d      	sub	sp, #116	@ 0x74
 8008fdc:	4614      	mov	r4, r2
 8008fde:	4698      	mov	r8, r3
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	b118      	cbz	r0, 8008fec <_vfiprintf_r+0x18>
 8008fe4:	6a03      	ldr	r3, [r0, #32]
 8008fe6:	b90b      	cbnz	r3, 8008fec <_vfiprintf_r+0x18>
 8008fe8:	f7fc fdc6 	bl	8005b78 <__sinit>
 8008fec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fee:	07d9      	lsls	r1, r3, #31
 8008ff0:	d405      	bmi.n	8008ffe <_vfiprintf_r+0x2a>
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	059a      	lsls	r2, r3, #22
 8008ff6:	d402      	bmi.n	8008ffe <_vfiprintf_r+0x2a>
 8008ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ffa:	f7fc ff08 	bl	8005e0e <__retarget_lock_acquire_recursive>
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	071b      	lsls	r3, r3, #28
 8009002:	d501      	bpl.n	8009008 <_vfiprintf_r+0x34>
 8009004:	692b      	ldr	r3, [r5, #16]
 8009006:	b99b      	cbnz	r3, 8009030 <_vfiprintf_r+0x5c>
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f000 f938 	bl	8009280 <__swsetup_r>
 8009010:	b170      	cbz	r0, 8009030 <_vfiprintf_r+0x5c>
 8009012:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009014:	07dc      	lsls	r4, r3, #31
 8009016:	d504      	bpl.n	8009022 <_vfiprintf_r+0x4e>
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	b01d      	add	sp, #116	@ 0x74
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	0598      	lsls	r0, r3, #22
 8009026:	d4f7      	bmi.n	8009018 <_vfiprintf_r+0x44>
 8009028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800902a:	f7fc fef1 	bl	8005e10 <__retarget_lock_release_recursive>
 800902e:	e7f3      	b.n	8009018 <_vfiprintf_r+0x44>
 8009030:	2300      	movs	r3, #0
 8009032:	9309      	str	r3, [sp, #36]	@ 0x24
 8009034:	2320      	movs	r3, #32
 8009036:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800903a:	f8cd 800c 	str.w	r8, [sp, #12]
 800903e:	2330      	movs	r3, #48	@ 0x30
 8009040:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091f0 <_vfiprintf_r+0x21c>
 8009044:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009048:	f04f 0901 	mov.w	r9, #1
 800904c:	4623      	mov	r3, r4
 800904e:	469a      	mov	sl, r3
 8009050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009054:	b10a      	cbz	r2, 800905a <_vfiprintf_r+0x86>
 8009056:	2a25      	cmp	r2, #37	@ 0x25
 8009058:	d1f9      	bne.n	800904e <_vfiprintf_r+0x7a>
 800905a:	ebba 0b04 	subs.w	fp, sl, r4
 800905e:	d00b      	beq.n	8009078 <_vfiprintf_r+0xa4>
 8009060:	465b      	mov	r3, fp
 8009062:	4622      	mov	r2, r4
 8009064:	4629      	mov	r1, r5
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ffa2 	bl	8008fb0 <__sfputs_r>
 800906c:	3001      	adds	r0, #1
 800906e:	f000 80a7 	beq.w	80091c0 <_vfiprintf_r+0x1ec>
 8009072:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009074:	445a      	add	r2, fp
 8009076:	9209      	str	r2, [sp, #36]	@ 0x24
 8009078:	f89a 3000 	ldrb.w	r3, [sl]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 809f 	beq.w	80091c0 <_vfiprintf_r+0x1ec>
 8009082:	2300      	movs	r3, #0
 8009084:	f04f 32ff 	mov.w	r2, #4294967295
 8009088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908c:	f10a 0a01 	add.w	sl, sl, #1
 8009090:	9304      	str	r3, [sp, #16]
 8009092:	9307      	str	r3, [sp, #28]
 8009094:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009098:	931a      	str	r3, [sp, #104]	@ 0x68
 800909a:	4654      	mov	r4, sl
 800909c:	2205      	movs	r2, #5
 800909e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a2:	4853      	ldr	r0, [pc, #332]	@ (80091f0 <_vfiprintf_r+0x21c>)
 80090a4:	f7f7 f89c 	bl	80001e0 <memchr>
 80090a8:	9a04      	ldr	r2, [sp, #16]
 80090aa:	b9d8      	cbnz	r0, 80090e4 <_vfiprintf_r+0x110>
 80090ac:	06d1      	lsls	r1, r2, #27
 80090ae:	bf44      	itt	mi
 80090b0:	2320      	movmi	r3, #32
 80090b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090b6:	0713      	lsls	r3, r2, #28
 80090b8:	bf44      	itt	mi
 80090ba:	232b      	movmi	r3, #43	@ 0x2b
 80090bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090c0:	f89a 3000 	ldrb.w	r3, [sl]
 80090c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80090c6:	d015      	beq.n	80090f4 <_vfiprintf_r+0x120>
 80090c8:	9a07      	ldr	r2, [sp, #28]
 80090ca:	4654      	mov	r4, sl
 80090cc:	2000      	movs	r0, #0
 80090ce:	f04f 0c0a 	mov.w	ip, #10
 80090d2:	4621      	mov	r1, r4
 80090d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d8:	3b30      	subs	r3, #48	@ 0x30
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d94b      	bls.n	8009176 <_vfiprintf_r+0x1a2>
 80090de:	b1b0      	cbz	r0, 800910e <_vfiprintf_r+0x13a>
 80090e0:	9207      	str	r2, [sp, #28]
 80090e2:	e014      	b.n	800910e <_vfiprintf_r+0x13a>
 80090e4:	eba0 0308 	sub.w	r3, r0, r8
 80090e8:	fa09 f303 	lsl.w	r3, r9, r3
 80090ec:	4313      	orrs	r3, r2
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	46a2      	mov	sl, r4
 80090f2:	e7d2      	b.n	800909a <_vfiprintf_r+0xc6>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	1d19      	adds	r1, r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	9103      	str	r1, [sp, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfbb      	ittet	lt
 8009100:	425b      	neglt	r3, r3
 8009102:	f042 0202 	orrlt.w	r2, r2, #2
 8009106:	9307      	strge	r3, [sp, #28]
 8009108:	9307      	strlt	r3, [sp, #28]
 800910a:	bfb8      	it	lt
 800910c:	9204      	strlt	r2, [sp, #16]
 800910e:	7823      	ldrb	r3, [r4, #0]
 8009110:	2b2e      	cmp	r3, #46	@ 0x2e
 8009112:	d10a      	bne.n	800912a <_vfiprintf_r+0x156>
 8009114:	7863      	ldrb	r3, [r4, #1]
 8009116:	2b2a      	cmp	r3, #42	@ 0x2a
 8009118:	d132      	bne.n	8009180 <_vfiprintf_r+0x1ac>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	9203      	str	r2, [sp, #12]
 8009122:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009126:	3402      	adds	r4, #2
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009200 <_vfiprintf_r+0x22c>
 800912e:	7821      	ldrb	r1, [r4, #0]
 8009130:	2203      	movs	r2, #3
 8009132:	4650      	mov	r0, sl
 8009134:	f7f7 f854 	bl	80001e0 <memchr>
 8009138:	b138      	cbz	r0, 800914a <_vfiprintf_r+0x176>
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	eba0 000a 	sub.w	r0, r0, sl
 8009140:	2240      	movs	r2, #64	@ 0x40
 8009142:	4082      	lsls	r2, r0
 8009144:	4313      	orrs	r3, r2
 8009146:	3401      	adds	r4, #1
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914e:	4829      	ldr	r0, [pc, #164]	@ (80091f4 <_vfiprintf_r+0x220>)
 8009150:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009154:	2206      	movs	r2, #6
 8009156:	f7f7 f843 	bl	80001e0 <memchr>
 800915a:	2800      	cmp	r0, #0
 800915c:	d03f      	beq.n	80091de <_vfiprintf_r+0x20a>
 800915e:	4b26      	ldr	r3, [pc, #152]	@ (80091f8 <_vfiprintf_r+0x224>)
 8009160:	bb1b      	cbnz	r3, 80091aa <_vfiprintf_r+0x1d6>
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	3307      	adds	r3, #7
 8009166:	f023 0307 	bic.w	r3, r3, #7
 800916a:	3308      	adds	r3, #8
 800916c:	9303      	str	r3, [sp, #12]
 800916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009170:	443b      	add	r3, r7
 8009172:	9309      	str	r3, [sp, #36]	@ 0x24
 8009174:	e76a      	b.n	800904c <_vfiprintf_r+0x78>
 8009176:	fb0c 3202 	mla	r2, ip, r2, r3
 800917a:	460c      	mov	r4, r1
 800917c:	2001      	movs	r0, #1
 800917e:	e7a8      	b.n	80090d2 <_vfiprintf_r+0xfe>
 8009180:	2300      	movs	r3, #0
 8009182:	3401      	adds	r4, #1
 8009184:	9305      	str	r3, [sp, #20]
 8009186:	4619      	mov	r1, r3
 8009188:	f04f 0c0a 	mov.w	ip, #10
 800918c:	4620      	mov	r0, r4
 800918e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009192:	3a30      	subs	r2, #48	@ 0x30
 8009194:	2a09      	cmp	r2, #9
 8009196:	d903      	bls.n	80091a0 <_vfiprintf_r+0x1cc>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0c6      	beq.n	800912a <_vfiprintf_r+0x156>
 800919c:	9105      	str	r1, [sp, #20]
 800919e:	e7c4      	b.n	800912a <_vfiprintf_r+0x156>
 80091a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80091a4:	4604      	mov	r4, r0
 80091a6:	2301      	movs	r3, #1
 80091a8:	e7f0      	b.n	800918c <_vfiprintf_r+0x1b8>
 80091aa:	ab03      	add	r3, sp, #12
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	462a      	mov	r2, r5
 80091b0:	4b12      	ldr	r3, [pc, #72]	@ (80091fc <_vfiprintf_r+0x228>)
 80091b2:	a904      	add	r1, sp, #16
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7fb fe87 	bl	8004ec8 <_printf_float>
 80091ba:	4607      	mov	r7, r0
 80091bc:	1c78      	adds	r0, r7, #1
 80091be:	d1d6      	bne.n	800916e <_vfiprintf_r+0x19a>
 80091c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091c2:	07d9      	lsls	r1, r3, #31
 80091c4:	d405      	bmi.n	80091d2 <_vfiprintf_r+0x1fe>
 80091c6:	89ab      	ldrh	r3, [r5, #12]
 80091c8:	059a      	lsls	r2, r3, #22
 80091ca:	d402      	bmi.n	80091d2 <_vfiprintf_r+0x1fe>
 80091cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ce:	f7fc fe1f 	bl	8005e10 <__retarget_lock_release_recursive>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	065b      	lsls	r3, r3, #25
 80091d6:	f53f af1f 	bmi.w	8009018 <_vfiprintf_r+0x44>
 80091da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091dc:	e71e      	b.n	800901c <_vfiprintf_r+0x48>
 80091de:	ab03      	add	r3, sp, #12
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	462a      	mov	r2, r5
 80091e4:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <_vfiprintf_r+0x228>)
 80091e6:	a904      	add	r1, sp, #16
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7fc f905 	bl	80053f8 <_printf_i>
 80091ee:	e7e4      	b.n	80091ba <_vfiprintf_r+0x1e6>
 80091f0:	08009879 	.word	0x08009879
 80091f4:	08009883 	.word	0x08009883
 80091f8:	08004ec9 	.word	0x08004ec9
 80091fc:	08008fb1 	.word	0x08008fb1
 8009200:	0800987f 	.word	0x0800987f

08009204 <__swbuf_r>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	460e      	mov	r6, r1
 8009208:	4614      	mov	r4, r2
 800920a:	4605      	mov	r5, r0
 800920c:	b118      	cbz	r0, 8009216 <__swbuf_r+0x12>
 800920e:	6a03      	ldr	r3, [r0, #32]
 8009210:	b90b      	cbnz	r3, 8009216 <__swbuf_r+0x12>
 8009212:	f7fc fcb1 	bl	8005b78 <__sinit>
 8009216:	69a3      	ldr	r3, [r4, #24]
 8009218:	60a3      	str	r3, [r4, #8]
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	071a      	lsls	r2, r3, #28
 800921e:	d501      	bpl.n	8009224 <__swbuf_r+0x20>
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	b943      	cbnz	r3, 8009236 <__swbuf_r+0x32>
 8009224:	4621      	mov	r1, r4
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f82a 	bl	8009280 <__swsetup_r>
 800922c:	b118      	cbz	r0, 8009236 <__swbuf_r+0x32>
 800922e:	f04f 37ff 	mov.w	r7, #4294967295
 8009232:	4638      	mov	r0, r7
 8009234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	1a98      	subs	r0, r3, r2
 800923c:	6963      	ldr	r3, [r4, #20]
 800923e:	b2f6      	uxtb	r6, r6
 8009240:	4283      	cmp	r3, r0
 8009242:	4637      	mov	r7, r6
 8009244:	dc05      	bgt.n	8009252 <__swbuf_r+0x4e>
 8009246:	4621      	mov	r1, r4
 8009248:	4628      	mov	r0, r5
 800924a:	f7ff fa47 	bl	80086dc <_fflush_r>
 800924e:	2800      	cmp	r0, #0
 8009250:	d1ed      	bne.n	800922e <__swbuf_r+0x2a>
 8009252:	68a3      	ldr	r3, [r4, #8]
 8009254:	3b01      	subs	r3, #1
 8009256:	60a3      	str	r3, [r4, #8]
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	6022      	str	r2, [r4, #0]
 800925e:	701e      	strb	r6, [r3, #0]
 8009260:	6962      	ldr	r2, [r4, #20]
 8009262:	1c43      	adds	r3, r0, #1
 8009264:	429a      	cmp	r2, r3
 8009266:	d004      	beq.n	8009272 <__swbuf_r+0x6e>
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	07db      	lsls	r3, r3, #31
 800926c:	d5e1      	bpl.n	8009232 <__swbuf_r+0x2e>
 800926e:	2e0a      	cmp	r6, #10
 8009270:	d1df      	bne.n	8009232 <__swbuf_r+0x2e>
 8009272:	4621      	mov	r1, r4
 8009274:	4628      	mov	r0, r5
 8009276:	f7ff fa31 	bl	80086dc <_fflush_r>
 800927a:	2800      	cmp	r0, #0
 800927c:	d0d9      	beq.n	8009232 <__swbuf_r+0x2e>
 800927e:	e7d6      	b.n	800922e <__swbuf_r+0x2a>

08009280 <__swsetup_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4b29      	ldr	r3, [pc, #164]	@ (8009328 <__swsetup_r+0xa8>)
 8009284:	4605      	mov	r5, r0
 8009286:	6818      	ldr	r0, [r3, #0]
 8009288:	460c      	mov	r4, r1
 800928a:	b118      	cbz	r0, 8009294 <__swsetup_r+0x14>
 800928c:	6a03      	ldr	r3, [r0, #32]
 800928e:	b90b      	cbnz	r3, 8009294 <__swsetup_r+0x14>
 8009290:	f7fc fc72 	bl	8005b78 <__sinit>
 8009294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009298:	0719      	lsls	r1, r3, #28
 800929a:	d422      	bmi.n	80092e2 <__swsetup_r+0x62>
 800929c:	06da      	lsls	r2, r3, #27
 800929e:	d407      	bmi.n	80092b0 <__swsetup_r+0x30>
 80092a0:	2209      	movs	r2, #9
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
 80092ae:	e033      	b.n	8009318 <__swsetup_r+0x98>
 80092b0:	0758      	lsls	r0, r3, #29
 80092b2:	d512      	bpl.n	80092da <__swsetup_r+0x5a>
 80092b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092b6:	b141      	cbz	r1, 80092ca <__swsetup_r+0x4a>
 80092b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092bc:	4299      	cmp	r1, r3
 80092be:	d002      	beq.n	80092c6 <__swsetup_r+0x46>
 80092c0:	4628      	mov	r0, r5
 80092c2:	f7fd fbf9 	bl	8006ab8 <_free_r>
 80092c6:	2300      	movs	r3, #0
 80092c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	2300      	movs	r3, #0
 80092d4:	6063      	str	r3, [r4, #4]
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f043 0308 	orr.w	r3, r3, #8
 80092e0:	81a3      	strh	r3, [r4, #12]
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	b94b      	cbnz	r3, 80092fa <__swsetup_r+0x7a>
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f0:	d003      	beq.n	80092fa <__swsetup_r+0x7a>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4628      	mov	r0, r5
 80092f6:	f000 f883 	bl	8009400 <__smakebuf_r>
 80092fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fe:	f013 0201 	ands.w	r2, r3, #1
 8009302:	d00a      	beq.n	800931a <__swsetup_r+0x9a>
 8009304:	2200      	movs	r2, #0
 8009306:	60a2      	str	r2, [r4, #8]
 8009308:	6962      	ldr	r2, [r4, #20]
 800930a:	4252      	negs	r2, r2
 800930c:	61a2      	str	r2, [r4, #24]
 800930e:	6922      	ldr	r2, [r4, #16]
 8009310:	b942      	cbnz	r2, 8009324 <__swsetup_r+0xa4>
 8009312:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009316:	d1c5      	bne.n	80092a4 <__swsetup_r+0x24>
 8009318:	bd38      	pop	{r3, r4, r5, pc}
 800931a:	0799      	lsls	r1, r3, #30
 800931c:	bf58      	it	pl
 800931e:	6962      	ldrpl	r2, [r4, #20]
 8009320:	60a2      	str	r2, [r4, #8]
 8009322:	e7f4      	b.n	800930e <__swsetup_r+0x8e>
 8009324:	2000      	movs	r0, #0
 8009326:	e7f7      	b.n	8009318 <__swsetup_r+0x98>
 8009328:	20000018 	.word	0x20000018

0800932c <_raise_r>:
 800932c:	291f      	cmp	r1, #31
 800932e:	b538      	push	{r3, r4, r5, lr}
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	d904      	bls.n	8009340 <_raise_r+0x14>
 8009336:	2316      	movs	r3, #22
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009342:	b112      	cbz	r2, 800934a <_raise_r+0x1e>
 8009344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009348:	b94b      	cbnz	r3, 800935e <_raise_r+0x32>
 800934a:	4628      	mov	r0, r5
 800934c:	f000 f830 	bl	80093b0 <_getpid_r>
 8009350:	4622      	mov	r2, r4
 8009352:	4601      	mov	r1, r0
 8009354:	4628      	mov	r0, r5
 8009356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800935a:	f000 b817 	b.w	800938c <_kill_r>
 800935e:	2b01      	cmp	r3, #1
 8009360:	d00a      	beq.n	8009378 <_raise_r+0x4c>
 8009362:	1c59      	adds	r1, r3, #1
 8009364:	d103      	bne.n	800936e <_raise_r+0x42>
 8009366:	2316      	movs	r3, #22
 8009368:	6003      	str	r3, [r0, #0]
 800936a:	2001      	movs	r0, #1
 800936c:	e7e7      	b.n	800933e <_raise_r+0x12>
 800936e:	2100      	movs	r1, #0
 8009370:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009374:	4620      	mov	r0, r4
 8009376:	4798      	blx	r3
 8009378:	2000      	movs	r0, #0
 800937a:	e7e0      	b.n	800933e <_raise_r+0x12>

0800937c <raise>:
 800937c:	4b02      	ldr	r3, [pc, #8]	@ (8009388 <raise+0xc>)
 800937e:	4601      	mov	r1, r0
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	f7ff bfd3 	b.w	800932c <_raise_r>
 8009386:	bf00      	nop
 8009388:	20000018 	.word	0x20000018

0800938c <_kill_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d07      	ldr	r5, [pc, #28]	@ (80093ac <_kill_r+0x20>)
 8009390:	2300      	movs	r3, #0
 8009392:	4604      	mov	r4, r0
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	f7f8 fa47 	bl	800182c <_kill>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d102      	bne.n	80093a8 <_kill_r+0x1c>
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	b103      	cbz	r3, 80093a8 <_kill_r+0x1c>
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	bd38      	pop	{r3, r4, r5, pc}
 80093aa:	bf00      	nop
 80093ac:	200004b8 	.word	0x200004b8

080093b0 <_getpid_r>:
 80093b0:	f7f8 ba34 	b.w	800181c <_getpid>

080093b4 <__swhatbuf_r>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	460c      	mov	r4, r1
 80093b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093bc:	2900      	cmp	r1, #0
 80093be:	b096      	sub	sp, #88	@ 0x58
 80093c0:	4615      	mov	r5, r2
 80093c2:	461e      	mov	r6, r3
 80093c4:	da0d      	bge.n	80093e2 <__swhatbuf_r+0x2e>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093cc:	f04f 0100 	mov.w	r1, #0
 80093d0:	bf14      	ite	ne
 80093d2:	2340      	movne	r3, #64	@ 0x40
 80093d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093d8:	2000      	movs	r0, #0
 80093da:	6031      	str	r1, [r6, #0]
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	b016      	add	sp, #88	@ 0x58
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
 80093e2:	466a      	mov	r2, sp
 80093e4:	f000 f848 	bl	8009478 <_fstat_r>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	dbec      	blt.n	80093c6 <__swhatbuf_r+0x12>
 80093ec:	9901      	ldr	r1, [sp, #4]
 80093ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093f6:	4259      	negs	r1, r3
 80093f8:	4159      	adcs	r1, r3
 80093fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093fe:	e7eb      	b.n	80093d8 <__swhatbuf_r+0x24>

08009400 <__smakebuf_r>:
 8009400:	898b      	ldrh	r3, [r1, #12]
 8009402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009404:	079d      	lsls	r5, r3, #30
 8009406:	4606      	mov	r6, r0
 8009408:	460c      	mov	r4, r1
 800940a:	d507      	bpl.n	800941c <__smakebuf_r+0x1c>
 800940c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	6123      	str	r3, [r4, #16]
 8009414:	2301      	movs	r3, #1
 8009416:	6163      	str	r3, [r4, #20]
 8009418:	b003      	add	sp, #12
 800941a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941c:	ab01      	add	r3, sp, #4
 800941e:	466a      	mov	r2, sp
 8009420:	f7ff ffc8 	bl	80093b4 <__swhatbuf_r>
 8009424:	9f00      	ldr	r7, [sp, #0]
 8009426:	4605      	mov	r5, r0
 8009428:	4639      	mov	r1, r7
 800942a:	4630      	mov	r0, r6
 800942c:	f7fd fbb8 	bl	8006ba0 <_malloc_r>
 8009430:	b948      	cbnz	r0, 8009446 <__smakebuf_r+0x46>
 8009432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009436:	059a      	lsls	r2, r3, #22
 8009438:	d4ee      	bmi.n	8009418 <__smakebuf_r+0x18>
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	f043 0302 	orr.w	r3, r3, #2
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	e7e2      	b.n	800940c <__smakebuf_r+0xc>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	6020      	str	r0, [r4, #0]
 800944a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800944e:	81a3      	strh	r3, [r4, #12]
 8009450:	9b01      	ldr	r3, [sp, #4]
 8009452:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009456:	b15b      	cbz	r3, 8009470 <__smakebuf_r+0x70>
 8009458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800945c:	4630      	mov	r0, r6
 800945e:	f000 f81d 	bl	800949c <_isatty_r>
 8009462:	b128      	cbz	r0, 8009470 <__smakebuf_r+0x70>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	f023 0303 	bic.w	r3, r3, #3
 800946a:	f043 0301 	orr.w	r3, r3, #1
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	431d      	orrs	r5, r3
 8009474:	81a5      	strh	r5, [r4, #12]
 8009476:	e7cf      	b.n	8009418 <__smakebuf_r+0x18>

08009478 <_fstat_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d07      	ldr	r5, [pc, #28]	@ (8009498 <_fstat_r+0x20>)
 800947c:	2300      	movs	r3, #0
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	4611      	mov	r1, r2
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	f7f8 fa31 	bl	80018ec <_fstat>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d102      	bne.n	8009494 <_fstat_r+0x1c>
 800948e:	682b      	ldr	r3, [r5, #0]
 8009490:	b103      	cbz	r3, 8009494 <_fstat_r+0x1c>
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	bd38      	pop	{r3, r4, r5, pc}
 8009496:	bf00      	nop
 8009498:	200004b8 	.word	0x200004b8

0800949c <_isatty_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d06      	ldr	r5, [pc, #24]	@ (80094b8 <_isatty_r+0x1c>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7f8 fa30 	bl	800190c <_isatty>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_isatty_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_isatty_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	200004b8 	.word	0x200004b8

080094bc <_init>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	bf00      	nop
 80094c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c2:	bc08      	pop	{r3}
 80094c4:	469e      	mov	lr, r3
 80094c6:	4770      	bx	lr

080094c8 <_fini>:
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	bf00      	nop
 80094cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ce:	bc08      	pop	{r3}
 80094d0:	469e      	mov	lr, r3
 80094d2:	4770      	bx	lr
