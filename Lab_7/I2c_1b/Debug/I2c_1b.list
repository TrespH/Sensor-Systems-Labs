
I2c_1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007bf0  08007bf0  00008bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa0  08007fa0  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007fa0  08007fa0  00008fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa8  08007fa8  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa8  08007fa8  00008fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fac  08007fac  00008fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007fb0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001d8  08008188  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08008188  000094b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b676  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd2  00000000  00000000  0001487e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00016450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000811  00000000  00000000  00016ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016786  00000000  00000000  000176b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d490  00000000  00000000  0002de3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089562  00000000  00000000  0003b2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4831  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c28  00000000  00000000  000c4874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bd8 	.word	0x08007bd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007bd8 	.word	0x08007bd8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fbfb 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f869 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f94b 	bl	8001150 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 f929 	bl	8001110 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 f8fd 	bl	80010bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ec2:	f000 f8cd 	bl	8001060 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Master_Transmit(&hi2c1, (LM75_ADDRESS << 0), &LM75_REGISTER, 1, 100);
 8000ec6:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <main+0xc0>)
 8000ec8:	8819      	ldrh	r1, [r3, #0]
 8000eca:	2364      	movs	r3, #100	@ 0x64
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <main+0xc4>)
 8000ed2:	4827      	ldr	r0, [pc, #156]	@ (8000f70 <main+0xc8>)
 8000ed4:	f001 fc74 	bl	80027c0 <HAL_I2C_Master_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_I2C_Master_Receive(&hi2c1, (LM75_ADDRESS << 1), temp_reading, 2, 100);
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <main+0xc0>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	b299      	uxth	r1, r3
 8000ee0:	2364      	movs	r3, #100	@ 0x64
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	4a23      	ldr	r2, [pc, #140]	@ (8000f74 <main+0xcc>)
 8000ee8:	4821      	ldr	r0, [pc, #132]	@ (8000f70 <main+0xc8>)
 8000eea:	f001 fd67 	bl	80029bc <HAL_I2C_Master_Receive>
	//temp_reading[0] = 0b11100101; Test for negative temperature of -27 degrees
	int16_t tx_temp = temp_reading[0];
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <main+0xcc>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	80fb      	strh	r3, [r7, #6]
	tx_temp = (tx_temp << 3) + (temp_reading[1] >> 5);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4a1e      	ldr	r2, [pc, #120]	@ (8000f74 <main+0xcc>)
 8000efc:	7852      	ldrb	r2, [r2, #1]
 8000efe:	0952      	lsrs	r2, r2, #5
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	4413      	add	r3, r2
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	80fb      	strh	r3, [r7, #6]
	if ((temp_reading[0] & 10000000) == 128) {
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <main+0xcc>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <main+0xd0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b80      	cmp	r3, #128	@ 0x80
 8000f14:	d104      	bne.n	8000f20 <main+0x78>
		tx_temp += 0b1111100000000000; //
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	80fb      	strh	r3, [r7, #6]
		tx_temp = -((~tx_temp)+1); // 2's complement
	}

	int length = snprintf(buffer_uart, sizeof(buffer_uart),	"Temperature: %0.3f %cC;\n", tx_temp*0.125, 176);
 8000f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fb05 	bl	8000534 <__aeabi_i2d>
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8000f32:	f7ff fb69 	bl	8000608 <__aeabi_dmul>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	21b0      	movs	r1, #176	@ 0xb0
 8000f3c:	9102      	str	r1, [sp, #8]
 8000f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <main+0xd4>)
 8000f44:	2164      	movs	r1, #100	@ 0x64
 8000f46:	480e      	ldr	r0, [pc, #56]	@ (8000f80 <main+0xd8>)
 8000f48:	f004 fd06 	bl	8005958 <sniprintf>
 8000f4c:	6038      	str	r0, [r7, #0]
	HAL_UART_Transmit_DMA(&huart2, buffer_uart, length);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	490a      	ldr	r1, [pc, #40]	@ (8000f80 <main+0xd8>)
 8000f56:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <main+0xdc>)
 8000f58:	f002 ffd0 	bl	8003efc <HAL_UART_Transmit_DMA>

	HAL_Delay(1000);
 8000f5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f60:	f000 fc14 	bl	800178c <HAL_Delay>
  {
 8000f64:	e7b8      	b.n	8000ed8 <main+0x30>
 8000f66:	bf00      	nop
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	200002f0 	.word	0x200002f0
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	200002f4 	.word	0x200002f4
 8000f78:	00989680 	.word	0x00989680
 8000f7c:	08007bf0 	.word	0x08007bf0
 8000f80:	200002f8 	.word	0x200002f8
 8000f84:	20000248 	.word	0x20000248

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2230      	movs	r2, #48	@ 0x30
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fd55 	bl	8005a46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <SystemClock_Config+0xd0>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a28      	ldr	r2, [pc, #160]	@ (8001058 <SystemClock_Config+0xd0>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <SystemClock_Config+0xd0>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b23      	ldr	r3, [pc, #140]	@ (800105c <SystemClock_Config+0xd4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fd4:	4a21      	ldr	r2, [pc, #132]	@ (800105c <SystemClock_Config+0xd4>)
 8000fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001000:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001004:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001006:	2304      	movs	r3, #4
 8001008:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800100a:	2307      	movs	r3, #7
 800100c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fa8a 	bl	800352c <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800101e:	f000 f905 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001026:	2302      	movs	r3, #2
 8001028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2102      	movs	r1, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fcec 	bl	8003a1c <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800104a:	f000 f8ef 	bl	800122c <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	@ 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001066:	4a13      	ldr	r2, [pc, #76]	@ (80010b4 <MX_I2C1_Init+0x54>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800106c:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <MX_I2C1_Init+0x58>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800107e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_I2C1_Init+0x50>)
 800109e:	f001 fa4b 	bl	8002538 <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 f8c0 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200001f4 	.word	0x200001f4
 80010b4:	40005400 	.word	0x40005400
 80010b8:	000186a0 	.word	0x000186a0

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_USART2_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f002 feb2 	bl	8003e5c <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f895 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000248 	.word	0x20000248
 800110c:	40004400 	.word	0x40004400

08001110 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_DMA_Init+0x3c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <MX_DMA_Init+0x3c>)
 8001120:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_DMA_Init+0x3c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2011      	movs	r0, #17
 8001138:	f000 fc27 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800113c:	2011      	movs	r0, #17
 800113e:	f000 fc40 	bl	80019c2 <HAL_NVIC_EnableIRQ>

}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a2c      	ldr	r2, [pc, #176]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2120      	movs	r1, #32
 80011da:	4812      	ldr	r0, [pc, #72]	@ (8001224 <MX_GPIO_Init+0xd4>)
 80011dc:	f001 f992 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_GPIO_Init+0xd8>)
 80011f8:	f001 f800 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011fc:	2320      	movs	r3, #32
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_GPIO_Init+0xd4>)
 8001214:	f000 fff2 	bl	80021fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	@ 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020800 	.word	0x40020800

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a0f      	ldr	r2, [pc, #60]	@ (8001284 <HAL_MspInit+0x4c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_MspInit+0x4c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001276:	2007      	movs	r0, #7
 8001278:	f000 fb7c 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800

08001288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	@ (800130c <HAL_I2C_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12c      	bne.n	8001304 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d8:	2304      	movs	r3, #4
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	@ (8001314 <HAL_I2C_MspInit+0x8c>)
 80012e4:	f000 ff8a 	bl	80021fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	@ 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a34      	ldr	r2, [pc, #208]	@ (8001408 <HAL_UART_MspInit+0xf0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d161      	bne.n	80013fe <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <HAL_UART_MspInit+0xf4>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a32      	ldr	r2, [pc, #200]	@ (800140c <HAL_UART_MspInit+0xf4>)
 8001344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b30      	ldr	r3, [pc, #192]	@ (800140c <HAL_UART_MspInit+0xf4>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_UART_MspInit+0xf4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a2b      	ldr	r2, [pc, #172]	@ (800140c <HAL_UART_MspInit+0xf4>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <HAL_UART_MspInit+0xf4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4820      	ldr	r0, [pc, #128]	@ (8001410 <HAL_UART_MspInit+0xf8>)
 800138e:	f000 ff35 	bl	80021fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 8001394:	4a20      	ldr	r2, [pc, #128]	@ (8001418 <HAL_UART_MspInit+0x100>)
 8001396:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 800139a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800139e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013a2:	2240      	movs	r2, #64	@ 0x40
 80013a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013d2:	4810      	ldr	r0, [pc, #64]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013d4:	f000 fb10 	bl	80019f8 <HAL_DMA_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80013de:	f7ff ff25 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80013e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <HAL_UART_MspInit+0xfc>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2026      	movs	r0, #38	@ 0x26
 80013f4:	f000 fac9 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013f8:	2026      	movs	r0, #38	@ 0x26
 80013fa:	f000 fae2 	bl	80019c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	@ 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40004400 	.word	0x40004400
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000
 8001414:	20000290 	.word	0x20000290
 8001418:	400260a0 	.word	0x400260a0

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 f96b 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA1_Stream6_IRQHandler+0x10>)
 8001482:	f000 fc51 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000290 	.word	0x20000290

08001490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <USART2_IRQHandler+0x10>)
 8001496:	f002 fda1 	bl	8003fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000248 	.word	0x20000248

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014be:	f004 fb15 	bl	8005aec <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <_exit+0x12>

080014ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fc:	f3af 8000 	nop.w
 8001500:	4601      	mov	r1, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	b2ca      	uxtb	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf0      	blt.n	80014fc <_read+0x12>
  }

  return len;
 800151a:	687b      	ldr	r3, [r7, #4]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e009      	b.n	800154a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	60ba      	str	r2, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbf1      	blt.n	8001536 <_write+0x12>
  }
  return len;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_close>:

int _close(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001584:	605a      	str	r2, [r3, #4]
  return 0;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_isatty>:

int _isatty(int file)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f004 fa7a 	bl	8005aec <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20018000 	.word	0x20018000
 8001624:	00000400 	.word	0x00000400
 8001628:	2000035c 	.word	0x2000035c
 800162c:	200004b0 	.word	0x200004b0

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001658:	f7ff ffea 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001682:	f004 fa39 	bl	8005af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fc0f 	bl	8000ea8 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800168c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001698:	08007fb0 	.word	0x08007fb0
  ldr r2, =_sbss
 800169c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80016a0:	200004b0 	.word	0x200004b0

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f94f 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fdac 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f967 	bl	80019de <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f92f 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000004 	.word	0x20000004
 8001744:	2000000c 	.word	0x2000000c
 8001748:	20000008 	.word	0x20000008

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000000c 	.word	0x2000000c
 8001770:	20000360 	.word	0x20000360

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000360 	.word	0x20000360

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	@ (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff feb6 	bl	8001774 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e099      	b.n	8001b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	e00f      	b.n	8001a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a36:	f7ff fe9d 	bl	8001774 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d908      	bls.n	8001a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e078      	b.n	8001b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e8      	bne.n	8001a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_DMA_Init+0x158>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d107      	bne.n	8001ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d117      	bne.n	8001b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fb01 	bl	8002104 <DMA_CheckFifoParam>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2240      	movs	r2, #64	@ 0x40
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b16:	2301      	movs	r3, #1
 8001b18:	e016      	b.n	8001b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fab8 	bl	8002098 <DMA_CalcBaseAndBitshift>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b30:	223f      	movs	r2, #63	@ 0x3f
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	f010803f 	.word	0xf010803f

08001b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_DMA_Start_IT+0x26>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e040      	b.n	8001bfc <HAL_DMA_Start_IT+0xa8>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d12f      	bne.n	8001bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fa4a 	bl	800203c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	223f      	movs	r2, #63	@ 0x3f
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0216 	orr.w	r2, r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e005      	b.n	8001bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c12:	f7ff fdaf 	bl	8001774 <HAL_GetTick>
 8001c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d008      	beq.n	8001c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2280      	movs	r2, #128	@ 0x80
 8001c28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e052      	b.n	8001cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0216 	bic.w	r2, r2, #22
 8001c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <HAL_DMA_Abort+0x62>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0208 	bic.w	r2, r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	e013      	b.n	8001cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c88:	f7ff fd74 	bl	8001774 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d90c      	bls.n	8001cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e015      	b.n	8001cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e4      	bne.n	8001c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	223f      	movs	r2, #63	@ 0x3f
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d004      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2280      	movs	r2, #128	@ 0x80
 8001cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00c      	b.n	8001d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2205      	movs	r2, #5
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d34:	4b8e      	ldr	r3, [pc, #568]	@ (8001f70 <HAL_DMA_IRQHandler+0x248>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a8e      	ldr	r2, [pc, #568]	@ (8001f74 <HAL_DMA_IRQHandler+0x24c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	2208      	movs	r2, #8
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01a      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	2208      	movs	r2, #8
 8001d82:	409a      	lsls	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	2201      	movs	r2, #1
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d012      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db6:	2201      	movs	r2, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dce:	2204      	movs	r2, #4
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2204      	movs	r2, #4
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	2210      	movs	r2, #16
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d043      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03c      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2210      	movs	r2, #16
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d018      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d108      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d024      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
 8001e56:	e01f      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
 8001e68:	e016      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0208 	bic.w	r2, r2, #8
 8001e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 808f 	beq.w	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8087 	beq.w	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d136      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0216 	bic.w	r2, r2, #22
 8001ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <HAL_DMA_IRQHandler+0x1da>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0208 	bic.w	r2, r2, #8
 8001f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f16:	223f      	movs	r2, #63	@ 0x3f
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d07e      	beq.n	8002034 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
        }
        return;
 8001f3e:	e079      	b.n	8002034 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d031      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e02c      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
 8001f6e:	bf00      	nop
 8001f70:	20000004 	.word	0x20000004
 8001f74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d023      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
 8001f88:	e01e      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0210 	bic.w	r2, r2, #16
 8001fa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d032      	beq.n	8002036 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2205      	movs	r2, #5
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d307      	bcc.n	8002010 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f2      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x2cc>
 800200e:	e000      	b.n	8002012 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002010:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
 8002032:	e000      	b.n	8002036 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002034:	bf00      	nop
    }
  }
}
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b40      	cmp	r3, #64	@ 0x40
 8002068:	d108      	bne.n	800207c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800207a:	e007      	b.n	800208c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3b10      	subs	r3, #16
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <DMA_CalcBaseAndBitshift+0x64>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020b2:	4a13      	ldr	r2, [pc, #76]	@ (8002100 <DMA_CalcBaseAndBitshift+0x68>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d909      	bls.n	80020da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	1d1a      	adds	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020d8:	e007      	b.n	80020ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	aaaaaaab 	.word	0xaaaaaaab
 8002100:	08007c24 	.word	0x08007c24

08002104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d11f      	bne.n	800215e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d856      	bhi.n	80021d2 <DMA_CheckFifoParam+0xce>
 8002124:	a201      	add	r2, pc, #4	@ (adr r2, 800212c <DMA_CheckFifoParam+0x28>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	0800213d 	.word	0x0800213d
 8002130:	0800214f 	.word	0x0800214f
 8002134:	0800213d 	.word	0x0800213d
 8002138:	080021d3 	.word	0x080021d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d046      	beq.n	80021d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214c:	e043      	b.n	80021d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002156:	d140      	bne.n	80021da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215c:	e03d      	b.n	80021da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002166:	d121      	bne.n	80021ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d837      	bhi.n	80021de <DMA_CheckFifoParam+0xda>
 800216e:	a201      	add	r2, pc, #4	@ (adr r2, 8002174 <DMA_CheckFifoParam+0x70>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	08002185 	.word	0x08002185
 8002178:	0800218b 	.word	0x0800218b
 800217c:	08002185 	.word	0x08002185
 8002180:	0800219d 	.word	0x0800219d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      break;
 8002188:	e030      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d025      	beq.n	80021e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219a:	e022      	b.n	80021e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021a4:	d11f      	bne.n	80021e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021aa:	e01c      	b.n	80021e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d903      	bls.n	80021ba <DMA_CheckFifoParam+0xb6>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d003      	beq.n	80021c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021b8:	e018      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      break;
 80021be:	e015      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      break;
 80021d0:	e00b      	b.n	80021ea <DMA_CheckFifoParam+0xe6>
      break;
 80021d2:	bf00      	nop
 80021d4:	e00a      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e008      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
 80021dc:	e006      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
 80021e0:	e004      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e002      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;   
 80021e6:	bf00      	nop
 80021e8:	e000      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
    }
  } 
  
  return status; 
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e159      	b.n	80024cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8148 	bne.w	80024c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d005      	beq.n	800224e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	2b02      	cmp	r3, #2
 800224c:	d130      	bne.n	80022b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d017      	beq.n	80022ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a2 	beq.w	80024c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b57      	ldr	r3, [pc, #348]	@ (80024e4 <HAL_GPIO_Init+0x2e8>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	4a56      	ldr	r2, [pc, #344]	@ (80024e4 <HAL_GPIO_Init+0x2e8>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002390:	6453      	str	r3, [r2, #68]	@ 0x44
 8002392:	4b54      	ldr	r3, [pc, #336]	@ (80024e4 <HAL_GPIO_Init+0x2e8>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_GPIO_Init+0x2ec>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a49      	ldr	r2, [pc, #292]	@ (80024ec <HAL_GPIO_Init+0x2f0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x202>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a48      	ldr	r2, [pc, #288]	@ (80024f0 <HAL_GPIO_Init+0x2f4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x1fe>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a47      	ldr	r2, [pc, #284]	@ (80024f4 <HAL_GPIO_Init+0x2f8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x1fa>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a46      	ldr	r2, [pc, #280]	@ (80024f8 <HAL_GPIO_Init+0x2fc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x1f6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a45      	ldr	r2, [pc, #276]	@ (80024fc <HAL_GPIO_Init+0x300>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x1f2>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e008      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e004      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023fe:	2300      	movs	r3, #0
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4093      	lsls	r3, r2
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002410:	4935      	ldr	r1, [pc, #212]	@ (80024e8 <HAL_GPIO_Init+0x2ec>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241e:	4b38      	ldr	r3, [pc, #224]	@ (8002500 <HAL_GPIO_Init+0x304>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002442:	4a2f      	ldr	r2, [pc, #188]	@ (8002500 <HAL_GPIO_Init+0x304>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_GPIO_Init+0x304>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800246c:	4a24      	ldr	r2, [pc, #144]	@ (8002500 <HAL_GPIO_Init+0x304>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002472:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_GPIO_Init+0x304>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002496:	4a1a      	ldr	r2, [pc, #104]	@ (8002500 <HAL_GPIO_Init+0x304>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249c:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <HAL_GPIO_Init+0x304>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002500 <HAL_GPIO_Init+0x304>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3301      	adds	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	f67f aea2 	bls.w	8002218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3724      	adds	r7, #36	@ 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020c00 	.word	0x40020c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40013c00 	.word	0x40013c00

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e12b      	b.n	80027a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fe92 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	@ 0x24
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800258a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800259a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800259c:	f001 fc36 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 80025a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a81      	ldr	r2, [pc, #516]	@ (80027ac <HAL_I2C_Init+0x274>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d807      	bhi.n	80025bc <HAL_I2C_Init+0x84>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a80      	ldr	r2, [pc, #512]	@ (80027b0 <HAL_I2C_Init+0x278>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	bf94      	ite	ls
 80025b4:	2301      	movls	r3, #1
 80025b6:	2300      	movhi	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e006      	b.n	80025ca <HAL_I2C_Init+0x92>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a7d      	ldr	r2, [pc, #500]	@ (80027b4 <HAL_I2C_Init+0x27c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0e7      	b.n	80027a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a78      	ldr	r2, [pc, #480]	@ (80027b8 <HAL_I2C_Init+0x280>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0c9b      	lsrs	r3, r3, #18
 80025dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a6a      	ldr	r2, [pc, #424]	@ (80027ac <HAL_I2C_Init+0x274>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d802      	bhi.n	800260c <HAL_I2C_Init+0xd4>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3301      	adds	r3, #1
 800260a:	e009      	b.n	8002620 <HAL_I2C_Init+0xe8>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a69      	ldr	r2, [pc, #420]	@ (80027bc <HAL_I2C_Init+0x284>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	3301      	adds	r3, #1
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	430b      	orrs	r3, r1
 8002626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002632:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	495c      	ldr	r1, [pc, #368]	@ (80027ac <HAL_I2C_Init+0x274>)
 800263c:	428b      	cmp	r3, r1
 800263e:	d819      	bhi.n	8002674 <HAL_I2C_Init+0x13c>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e59      	subs	r1, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fbb1 f3f3 	udiv	r3, r1, r3
 800264e:	1c59      	adds	r1, r3, #1
 8002650:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002654:	400b      	ands	r3, r1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_I2C_Init+0x138>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e59      	subs	r1, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fbb1 f3f3 	udiv	r3, r1, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	e051      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 8002670:	2304      	movs	r3, #4
 8002672:	e04f      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d111      	bne.n	80026a0 <HAL_I2C_Init+0x168>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e58      	subs	r0, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e012      	b.n	80026c6 <HAL_I2C_Init+0x18e>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	0099      	lsls	r1, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Init+0x196>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e022      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10e      	bne.n	80026f4 <HAL_I2C_Init+0x1bc>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1e58      	subs	r0, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	440b      	add	r3, r1
 80026e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e8:	3301      	adds	r3, #1
 80026ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f2:	e00f      	b.n	8002714 <HAL_I2C_Init+0x1dc>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	0099      	lsls	r1, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	6809      	ldr	r1, [r1, #0]
 8002718:	4313      	orrs	r3, r2
 800271a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002742:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6911      	ldr	r1, [r2, #16]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68d2      	ldr	r2, [r2, #12]
 800274e:	4311      	orrs	r1, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	430b      	orrs	r3, r1
 8002756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	000186a0 	.word	0x000186a0
 80027b0:	001e847f 	.word	0x001e847f
 80027b4:	003d08ff 	.word	0x003d08ff
 80027b8:	431bde83 	.word	0x431bde83
 80027bc:	10624dd3 	.word	0x10624dd3

080027c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	460b      	mov	r3, r1
 80027ce:	817b      	strh	r3, [r7, #10]
 80027d0:	4613      	mov	r3, r2
 80027d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7fe ffce 	bl	8001774 <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	f040 80e0 	bne.w	80029a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2319      	movs	r3, #25
 80027ee:	2201      	movs	r2, #1
 80027f0:	4970      	ldr	r1, [pc, #448]	@ (80029b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fc64 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
 8002800:	e0d3      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_I2C_Master_Transmit+0x50>
 800280c:	2302      	movs	r3, #2
 800280e:	e0cc      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d007      	beq.n	8002836 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002844:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	@ 0x21
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2210      	movs	r2, #16
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a50      	ldr	r2, [pc, #320]	@ (80029b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002878:	8979      	ldrh	r1, [r7, #10]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 face 	bl	8002e20 <I2C_MasterRequestWrite>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e08d      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028a4:	e066      	b.n	8002974 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	6a39      	ldr	r1, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fd22 	bl	80032f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06b      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d11b      	bne.n	8002948 <HAL_I2C_Master_Transmit+0x188>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d017      	beq.n	8002948 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	6a39      	ldr	r1, [r7, #32]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fd19 	bl	8003384 <I2C_WaitOnBTFFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00d      	beq.n	8002974 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	2b04      	cmp	r3, #4
 800295e:	d107      	bne.n	8002970 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e01a      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d194      	bne.n	80028a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800298a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	00100002 	.word	0x00100002
 80029b8:	ffff0000 	.word	0xffff0000

080029bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08c      	sub	sp, #48	@ 0x30
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	460b      	mov	r3, r1
 80029ca:	817b      	strh	r3, [r7, #10]
 80029cc:	4613      	mov	r3, r2
 80029ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7fe fed0 	bl	8001774 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	f040 8217 	bne.w	8002e12 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2319      	movs	r3, #25
 80029ea:	2201      	movs	r2, #1
 80029ec:	497c      	ldr	r1, [pc, #496]	@ (8002be0 <HAL_I2C_Master_Receive+0x224>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fb66 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e20a      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_I2C_Master_Receive+0x50>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e203      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d007      	beq.n	8002a32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2222      	movs	r2, #34	@ 0x22
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	893a      	ldrh	r2, [r7, #8]
 8002a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a5c      	ldr	r2, [pc, #368]	@ (8002be4 <HAL_I2C_Master_Receive+0x228>)
 8002a72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa52 	bl	8002f24 <I2C_MasterRequestRead>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1c4      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d113      	bne.n	8002aba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e198      	b.n	8002dec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d11b      	bne.n	8002afa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e178      	b.n	8002dec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d11b      	bne.n	8002b3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	e158      	b.n	8002dec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b60:	e144      	b.n	8002dec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	f200 80f1 	bhi.w	8002d4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d123      	bne.n	8002bbc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fc4b 	bl	8003414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e145      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bba:	e117      	b.n	8002dec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d14e      	bne.n	8002c62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4906      	ldr	r1, [pc, #24]	@ (8002be8 <HAL_I2C_Master_Receive+0x22c>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa76 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e11a      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
 8002bde:	bf00      	nop
 8002be0:	00100002 	.word	0x00100002
 8002be4:	ffff0000 	.word	0xffff0000
 8002be8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c60:	e0c4      	b.n	8002dec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	2200      	movs	r2, #0
 8002c6a:	496c      	ldr	r1, [pc, #432]	@ (8002e1c <HAL_I2C_Master_Receive+0x460>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fa27 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0cb      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4955      	ldr	r1, [pc, #340]	@ (8002e1c <HAL_I2C_Master_Receive+0x460>)
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f9f9 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e09d      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d4c:	e04e      	b.n	8002dec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fb5e 	bl	8003414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e058      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d124      	bne.n	8002dec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f aeb6 	bne.w	8002b62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3728      	adds	r7, #40	@ 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	00010004 	.word	0x00010004

08002e20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d006      	beq.n	8002e4a <I2C_MasterRequestWrite+0x2a>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d003      	beq.n	8002e4a <I2C_MasterRequestWrite+0x2a>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e48:	d108      	bne.n	8002e5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e00b      	b.n	8002e74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	2b12      	cmp	r3, #18
 8002e62:	d107      	bne.n	8002e74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f91d 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e9a:	d103      	bne.n	8002ea4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e035      	b.n	8002f14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eb0:	d108      	bne.n	8002ec4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ec0:	611a      	str	r2, [r3, #16]
 8002ec2:	e01b      	b.n	8002efc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	11db      	asrs	r3, r3, #7
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 0306 	and.w	r3, r3, #6
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f063 030f 	orn	r3, r3, #15
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	490e      	ldr	r1, [pc, #56]	@ (8002f1c <I2C_MasterRequestWrite+0xfc>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f966 	bl	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e010      	b.n	8002f14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4907      	ldr	r1, [pc, #28]	@ (8002f20 <I2C_MasterRequestWrite+0x100>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f956 	bl	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	00010008 	.word	0x00010008
 8002f20:	00010002 	.word	0x00010002

08002f24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	460b      	mov	r3, r1
 8002f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d006      	beq.n	8002f5e <I2C_MasterRequestRead+0x3a>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d003      	beq.n	8002f5e <I2C_MasterRequestRead+0x3a>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f5c:	d108      	bne.n	8002f70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e00b      	b.n	8002f88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	2b11      	cmp	r3, #17
 8002f76:	d107      	bne.n	8002f88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f893 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fae:	d103      	bne.n	8002fb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e079      	b.n	80030b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fc4:	d108      	bne.n	8002fd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]
 8002fd6:	e05f      	b.n	8003098 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fd8:	897b      	ldrh	r3, [r7, #10]
 8002fda:	11db      	asrs	r3, r3, #7
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f003 0306 	and.w	r3, r3, #6
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f063 030f 	orn	r3, r3, #15
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4930      	ldr	r1, [pc, #192]	@ (80030b8 <I2C_MasterRequestRead+0x194>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8dc 	bl	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e054      	b.n	80030b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4929      	ldr	r1, [pc, #164]	@ (80030bc <I2C_MasterRequestRead+0x198>)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f8cc 	bl	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e044      	b.n	80030b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800304a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f831 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003072:	d103      	bne.n	800307c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e017      	b.n	80030b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003080:	897b      	ldrh	r3, [r7, #10]
 8003082:	11db      	asrs	r3, r3, #7
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0306 	and.w	r3, r3, #6
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f063 030e 	orn	r3, r3, #14
 8003090:	b2da      	uxtb	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4907      	ldr	r1, [pc, #28]	@ (80030bc <I2C_MasterRequestRead+0x198>)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f888 	bl	80031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	00010008 	.word	0x00010008
 80030bc:	00010002 	.word	0x00010002

080030c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d0:	e048      	b.n	8003164 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d044      	beq.n	8003164 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe fb4b 	bl	8001774 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d139      	bne.n	8003164 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10d      	bne.n	8003116 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	e00c      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d116      	bne.n	8003164 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e023      	b.n	80031ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10d      	bne.n	800318a <I2C_WaitOnFlagUntilTimeout+0xca>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	43da      	mvns	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	e00c      	b.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	43da      	mvns	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4013      	ands	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d093      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c2:	e071      	b.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d2:	d123      	bne.n	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f043 0204 	orr.w	r2, r3, #4
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e067      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d041      	beq.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003224:	f7fe faa6 	bl	8001774 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d302      	bcc.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d136      	bne.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10c      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e00b      	b.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e021      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	0c1b      	lsrs	r3, r3, #16
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10c      	bne.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	43da      	mvns	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4013      	ands	r3, r2
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e00b      	b.n	80032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f af6d 	bne.w	80031c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003300:	e034      	b.n	800336c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f8e3 	bl	80034ce <I2C_IsAcknowledgeFailed>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e034      	b.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d028      	beq.n	800336c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe fa2b 	bl	8001774 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d11d      	bne.n	800336c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	2b80      	cmp	r3, #128	@ 0x80
 800333c:	d016      	beq.n	800336c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e007      	b.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b80      	cmp	r3, #128	@ 0x80
 8003378:	d1c3      	bne.n	8003302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003390:	e034      	b.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f89b 	bl	80034ce <I2C_IsAcknowledgeFailed>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e034      	b.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d028      	beq.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe f9e3 	bl	8001774 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d11d      	bne.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d016      	beq.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e007      	b.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	d1c3      	bne.n	8003392 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003420:	e049      	b.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d119      	bne.n	8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0210 	mvn.w	r2, #16
 8003438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e030      	b.n	80034c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe f986 	bl	8001774 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11d      	bne.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b40      	cmp	r3, #64	@ 0x40
 8003486:	d016      	beq.n	80034b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e007      	b.n	80034c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	d1ae      	bne.n	8003422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e4:	d11b      	bne.n	800351e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f043 0204 	orr.w	r2, r3, #4
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e267      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d075      	beq.n	8003636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800354a:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00c      	beq.n	8003570 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b85      	ldr	r3, [pc, #532]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800355e:	2b08      	cmp	r3, #8
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b82      	ldr	r3, [pc, #520]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b7e      	ldr	r3, [pc, #504]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05b      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d157      	bne.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e242      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x74>
 8003592:	4b76      	ldr	r3, [pc, #472]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b70      	ldr	r3, [pc, #448]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6f      	ldr	r2, [pc, #444]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b6d      	ldr	r3, [pc, #436]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6c      	ldr	r2, [pc, #432]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035c4:	4b69      	ldr	r3, [pc, #420]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a68      	ldr	r2, [pc, #416]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b66      	ldr	r3, [pc, #408]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a65      	ldr	r2, [pc, #404]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe f8c6 	bl	8001774 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe f8c2 	bl	8001774 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	@ 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e207      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b5b      	ldr	r3, [pc, #364]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xc0>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe f8b2 	bl	8001774 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe f8ae 	bl	8001774 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1f3      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b51      	ldr	r3, [pc, #324]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003642:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b47      	ldr	r3, [pc, #284]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b44      	ldr	r3, [pc, #272]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b41      	ldr	r3, [pc, #260]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1c7      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3b      	ldr	r3, [pc, #236]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4937      	ldr	r1, [pc, #220]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_RCC_OscConfig+0x244>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe f867 	bl	8001774 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe f863 	bl	8001774 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1a8      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b28      	ldr	r3, [pc, #160]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4925      	ldr	r1, [pc, #148]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCC_OscConfig+0x244>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe f846 	bl	8001774 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe f842 	bl	8001774 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e187      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <HAL_RCC_OscConfig+0x248>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe f826 	bl	8001774 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe f822 	bl	8001774 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e167      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x200>
 800374a:	e01b      	b.n	8003784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_OscConfig+0x248>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fe f80f 	bl	8001774 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00e      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe f80b 	bl	8001774 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d907      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e150      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800376c:	40023800 	.word	0x40023800
 8003770:	42470000 	.word	0x42470000
 8003774:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	4b88      	ldr	r3, [pc, #544]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ea      	bne.n	800375a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8097 	beq.w	80038c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b81      	ldr	r3, [pc, #516]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b7d      	ldr	r3, [pc, #500]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	4a7c      	ldr	r2, [pc, #496]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b2:	4b7a      	ldr	r3, [pc, #488]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b77      	ldr	r3, [pc, #476]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ce:	4b74      	ldr	r3, [pc, #464]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a73      	ldr	r2, [pc, #460]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fd ffcb 	bl	8001774 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fd ffc7 	bl	8001774 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e10c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b6a      	ldr	r3, [pc, #424]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x2ea>
 8003808:	4b64      	ldr	r3, [pc, #400]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380c:	4a63      	ldr	r2, [pc, #396]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	@ 0x70
 8003814:	e01c      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x30c>
 800381e:	4b5f      	ldr	r3, [pc, #380]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	4a5e      	ldr	r2, [pc, #376]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	@ 0x70
 800382a:	4b5c      	ldr	r3, [pc, #368]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	4a5b      	ldr	r2, [pc, #364]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	@ 0x70
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003838:	4b58      	ldr	r3, [pc, #352]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a57      	ldr	r2, [pc, #348]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	4b55      	ldr	r3, [pc, #340]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	4a54      	ldr	r2, [pc, #336]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd ff8c 	bl	8001774 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fd ff88 	bl	8001774 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0cb      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b49      	ldr	r3, [pc, #292]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x334>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fd ff76 	bl	8001774 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fd ff72 	bl	8001774 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0b5      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	4b3e      	ldr	r3, [pc, #248]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b39      	ldr	r3, [pc, #228]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	4a38      	ldr	r2, [pc, #224]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a1 	beq.w	8003a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b34      	ldr	r3, [pc, #208]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d05c      	beq.n	8003990 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d141      	bne.n	8003962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <HAL_RCC_OscConfig+0x478>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fd ff46 	bl	8001774 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fd ff42 	bl	8001774 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e087      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	491b      	ldr	r1, [pc, #108]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fd ff1b 	bl	8001774 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fd ff17 	bl	8001774 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e05c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	4b11      	ldr	r3, [pc, #68]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x416>
 8003960:	e054      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fd ff04 	bl	8001774 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fd ff00 	bl	8001774 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e045      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x444>
 800398e:	e03d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e038      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x4ec>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d028      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d121      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d11a      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d111      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cc      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b68      	ldr	r3, [pc, #416]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90c      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b65      	ldr	r3, [pc, #404]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a58      	ldr	r2, [pc, #352]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d044      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e067      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b37      	ldr	r3, [pc, #220]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4934      	ldr	r1, [pc, #208]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fe32 	bl	8001774 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fd fe2e 	bl	8001774 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b25      	ldr	r3, [pc, #148]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d20c      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	@ (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd fd92 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	08007c0c 	.word	0x08007c0c
 8003be0:	20000004 	.word	0x20000004
 8003be4:	20000008 	.word	0x20000008

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b094      	sub	sp, #80	@ 0x50
 8003bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c00:	4b79      	ldr	r3, [pc, #484]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x40>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	f200 80e1 	bhi.w	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1a:	e0db      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b73      	ldr	r3, [pc, #460]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c20:	e0db      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c22:	4b73      	ldr	r3, [pc, #460]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c26:	e0d8      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c28:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c32:	4b6d      	ldr	r3, [pc, #436]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	2200      	movs	r2, #0
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6c:	0150      	lsls	r0, r2, #5
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4621      	mov	r1, r4
 8003c74:	1a51      	subs	r1, r2, r1
 8003c76:	6139      	str	r1, [r7, #16]
 8003c78:	4629      	mov	r1, r5
 8003c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	018b      	lsls	r3, r1, #6
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c96:	4651      	mov	r1, sl
 8003c98:	018a      	lsls	r2, r1, #6
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cba:	4690      	mov	r8, r2
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb18 0303 	adds.w	r3, r8, r3
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	eb49 0303 	adc.w	r3, r9, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	024b      	lsls	r3, r1, #9
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	024a      	lsls	r2, r1, #9
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cee:	2200      	movs	r2, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cf8:	f7fc ff5e 	bl	8000bb8 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	e058      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4611      	mov	r1, r2
 8003d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	0159      	lsls	r1, r3, #5
 8003d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d32:	0150      	lsls	r0, r2, #5
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d3e:	4649      	mov	r1, r9
 8003d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d58:	ebb2 040a 	subs.w	r4, r2, sl
 8003d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	00eb      	lsls	r3, r5, #3
 8003d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6e:	00e2      	lsls	r2, r4, #3
 8003d70:	4614      	mov	r4, r2
 8003d72:	461d      	mov	r5, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	eb45 0303 	adc.w	r3, r5, r3
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	028b      	lsls	r3, r1, #10
 8003d92:	4621      	mov	r1, r4
 8003d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d98:	4621      	mov	r1, r4
 8003d9a:	028a      	lsls	r2, r1, #10
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	61fa      	str	r2, [r7, #28]
 8003da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dac:	f7fc ff04 	bl	8000bb8 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4613      	mov	r3, r2
 8003db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd2:	e002      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3750      	adds	r7, #80	@ 0x50
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	007a1200 	.word	0x007a1200

08003df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df8:	4b03      	ldr	r3, [pc, #12]	@ (8003e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000004 	.word	0x20000004

08003e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e10:	f7ff fff0 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4903      	ldr	r1, [pc, #12]	@ (8003e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08007c1c 	.word	0x08007c1c

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e38:	f7ff ffdc 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0b5b      	lsrs	r3, r3, #13
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	@ (8003e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08007c1c 	.word	0x08007c1c

08003e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e042      	b.n	8003ef4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fa48 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	@ 0x24
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fdcb 	bl	8004a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08c      	sub	sp, #48	@ 0x30
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d156      	bne.n	8003fc4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_Transmit_DMA+0x26>
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e04f      	b.n	8003fc6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2221      	movs	r2, #33	@ 0x21
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	4a21      	ldr	r2, [pc, #132]	@ (8003fd0 <HAL_UART_Transmit_DMA+0xd4>)
 8003f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	4a20      	ldr	r2, [pc, #128]	@ (8003fd4 <HAL_UART_Transmit_DMA+0xd8>)
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <HAL_UART_Transmit_DMA+0xdc>)
 8003f5c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f62:	2200      	movs	r2, #0
 8003f64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f66:	f107 0308 	add.w	r3, r7, #8
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	f7fd fde9 	bl	8001b54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3314      	adds	r3, #20
 8003f92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fac:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6a39      	ldr	r1, [r7, #32]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3730      	adds	r7, #48	@ 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	08004569 	.word	0x08004569
 8003fd4:	08004603 	.word	0x08004603
 8003fd8:	0800461f 	.word	0x0800461f

08003fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b0ba      	sub	sp, #232	@ 0xe8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800401a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fc40 	bl	80048c0 <UART_Receive_IT>
      return;
 8004040:	e25b      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80de 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
 800404c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800405c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80d1 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
 8004072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
 8004096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
 80040ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d011      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f043 0208 	orr.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 81f2 	beq.w	80044f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fbcb 	bl	80048c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_UART_IRQHandler+0x17a>
 800414e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04f      	beq.n	80041f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fad3 	bl	8004702 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d141      	bne.n	80041ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004196:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800419a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1d9      	bne.n	800416a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d013      	beq.n	80041e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	4a7e      	ldr	r2, [pc, #504]	@ (80043bc <HAL_UART_IRQHandler+0x3e0>)
 80041c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd fd8a 	bl	8001ce4 <HAL_DMA_Abort_IT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e0:	4610      	mov	r0, r2
 80041e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00e      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f9a8 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e00a      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9a4 	bl	800453c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e006      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9a0 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004202:	e175      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	bf00      	nop
    return;
 8004206:	e173      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	2b01      	cmp	r3, #1
 800420e:	f040 814f 	bne.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8148 	beq.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8141 	beq.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	f040 80b6 	bne.w	80043c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8145 	beq.w	80044f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800426e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004272:	429a      	cmp	r2, r3
 8004274:	f080 813e 	bcs.w	80044f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800427e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428a:	f000 8088 	beq.w	800439e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1d9      	bne.n	800428e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e1      	bne.n	80042da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800433a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800433c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800436c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004380:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004382:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004386:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800438e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fc33 	bl	8001c04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8cb 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ba:	e09b      	b.n	80044f4 <HAL_UART_IRQHandler+0x518>
 80043bc:	080047c9 	.word	0x080047c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 808e 	beq.w	80044f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8089 	beq.w	80044f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800440a:	647a      	str	r2, [r7, #68]	@ 0x44
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	623b      	str	r3, [r7, #32]
   return(result);
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004442:	633a      	str	r2, [r7, #48]	@ 0x30
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e3      	bne.n	800441e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	60fb      	str	r3, [r7, #12]
   return(result);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0310 	bic.w	r3, r3, #16
 800447a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004488:	61fa      	str	r2, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	617b      	str	r3, [r7, #20]
   return(result);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e3      	bne.n	8004464 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f851 	bl	8004550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044ae:	e023      	b.n	80044f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_UART_IRQHandler+0x4f4>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f991 	bl	80047f0 <UART_Transmit_IT>
    return;
 80044ce:	e014      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <HAL_UART_IRQHandler+0x51e>
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9d1 	bl	8004890 <UART_EndTransmit_IT>
    return;
 80044ee:	e004      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
    return;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
      return;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
      return;
 80044f8:	bf00      	nop
  }
}
 80044fa:	37e8      	adds	r7, #232	@ 0xe8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b090      	sub	sp, #64	@ 0x40
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d137      	bne.n	80045f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004586:	2200      	movs	r2, #0
 8004588:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800458a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	623b      	str	r3, [r7, #32]
   return(result);
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045de:	61fa      	str	r2, [r7, #28]
 80045e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	617b      	str	r3, [r7, #20]
   return(result);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045f2:	e002      	b.n	80045fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80045f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80045f6:	f7ff ff83 	bl	8004500 <HAL_UART_TxCpltCallback>
}
 80045fa:	bf00      	nop
 80045fc:	3740      	adds	r7, #64	@ 0x40
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff ff7f 	bl	8004514 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463a:	2b80      	cmp	r3, #128	@ 0x80
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b21      	cmp	r3, #33	@ 0x21
 8004650:	d108      	bne.n	8004664 <UART_DMAError+0x46>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f000 f827 	bl	80046b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b22      	cmp	r3, #34	@ 0x22
 8004684:	d108      	bne.n	8004698 <UART_DMAError+0x7a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2200      	movs	r2, #0
 8004690:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004692:	68b8      	ldr	r0, [r7, #8]
 8004694:	f000 f835 	bl	8004702 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469c:	f043 0210 	orr.w	r2, r3, #16
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f7ff ff49 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b089      	sub	sp, #36	@ 0x24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	330c      	adds	r3, #12
 80046c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	61ba      	str	r2, [r7, #24]
 80046dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6979      	ldr	r1, [r7, #20]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	613b      	str	r3, [r7, #16]
   return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e5      	bne.n	80046ba <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80046f6:	bf00      	nop
 80046f8:	3724      	adds	r7, #36	@ 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004702:	b480      	push	{r7}
 8004704:	b095      	sub	sp, #84	@ 0x54
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800472a:	643a      	str	r2, [r7, #64]	@ 0x40
 800472c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004730:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	61fb      	str	r3, [r7, #28]
   return(result);
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800475e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	2b01      	cmp	r3, #1
 8004778:	d119      	bne.n	80047ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	60bb      	str	r3, [r7, #8]
   return(result);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f023 0310 	bic.w	r3, r3, #16
 8004790:	647b      	str	r3, [r7, #68]	@ 0x44
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	330c      	adds	r3, #12
 8004798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479a:	61ba      	str	r2, [r7, #24]
 800479c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6979      	ldr	r1, [r7, #20]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	613b      	str	r3, [r7, #16]
   return(result);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047bc:	bf00      	nop
 80047be:	3754      	adds	r7, #84	@ 0x54
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff feaa 	bl	800453c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b21      	cmp	r3, #33	@ 0x21
 8004802:	d13e      	bne.n	8004882 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480c:	d114      	bne.n	8004838 <UART_Transmit_IT+0x48>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d110      	bne.n	8004838 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]
 8004836:	e008      	b.n	800484a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	1c59      	adds	r1, r3, #1
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6211      	str	r1, [r2, #32]
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29b      	uxth	r3, r3
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4619      	mov	r1, r3
 8004858:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800486c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800487c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fe25 	bl	8004500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b22      	cmp	r3, #34	@ 0x22
 80048d2:	f040 80ae 	bne.w	8004a32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048de:	d117      	bne.n	8004910 <UART_Receive_IT+0x50>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	b29a      	uxth	r2, r3
 8004900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004902:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	629a      	str	r2, [r3, #40]	@ 0x28
 800490e:	e026      	b.n	800495e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004922:	d007      	beq.n	8004934 <UART_Receive_IT+0x74>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <UART_Receive_IT+0x82>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	e008      	b.n	8004954 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800494e:	b2da      	uxtb	r2, r3
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4619      	mov	r1, r3
 800496c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800496e:	2b00      	cmp	r3, #0
 8004970:	d15d      	bne.n	8004a2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0220 	bic.w	r2, r2, #32
 8004980:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d135      	bne.n	8004a24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	623a      	str	r2, [r7, #32]
 80049e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d10a      	bne.n	8004a16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fd97 	bl	8004550 <HAL_UARTEx_RxEventCallback>
 8004a22:	e002      	b.n	8004a2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fd7f 	bl	8004528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e002      	b.n	8004a34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3730      	adds	r7, #48	@ 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b0c0      	sub	sp, #256	@ 0x100
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	ea40 0301 	orr.w	r3, r0, r1
 8004a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a94:	f021 010c 	bic.w	r1, r1, #12
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	6999      	ldr	r1, [r3, #24]
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	ea40 0301 	orr.w	r3, r0, r1
 8004ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b8f      	ldr	r3, [pc, #572]	@ (8004d08 <UART_SetConfig+0x2cc>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d005      	beq.n	8004adc <UART_SetConfig+0xa0>
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8004d0c <UART_SetConfig+0x2d0>)
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d104      	bne.n	8004ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7ff f9aa 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ae4:	e003      	b.n	8004aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7ff f991 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8004aea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af8:	f040 810c 	bne.w	8004d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b16:	415b      	adcs	r3, r3
 8004b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b1e:	4621      	mov	r1, r4
 8004b20:	eb12 0801 	adds.w	r8, r2, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	eb43 0901 	adc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb49 0303 	adc.w	r3, r9, r3
 8004b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	18db      	adds	r3, r3, r3
 8004b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b70:	4613      	mov	r3, r2
 8004b72:	eb42 0303 	adc.w	r3, r2, r3
 8004b76:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b80:	f7fc f81a 	bl	8000bb8 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4b61      	ldr	r3, [pc, #388]	@ (8004d10 <UART_SetConfig+0x2d4>)
 8004b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	011c      	lsls	r4, r3, #4
 8004b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004bac:	415b      	adcs	r3, r3
 8004bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd4:	4692      	mov	sl, r2
 8004bd6:	469b      	mov	fp, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	eb1a 0303 	adds.w	r3, sl, r3
 8004bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004be2:	464b      	mov	r3, r9
 8004be4:	eb4b 0303 	adc.w	r3, fp, r3
 8004be8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c00:	460b      	mov	r3, r1
 8004c02:	18db      	adds	r3, r3, r3
 8004c04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c06:	4613      	mov	r3, r2
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c16:	f7fb ffcf 	bl	8000bb8 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4b3b      	ldr	r3, [pc, #236]	@ (8004d10 <UART_SetConfig+0x2d4>)
 8004c22:	fba3 2301 	umull	r2, r3, r3, r1
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2264      	movs	r2, #100	@ 0x64
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	1acb      	subs	r3, r1, r3
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c36:	4b36      	ldr	r3, [pc, #216]	@ (8004d10 <UART_SetConfig+0x2d4>)
 8004c38:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c44:	441c      	add	r4, r3
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c60:	415b      	adcs	r3, r3
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	18db      	adds	r3, r3, r3
 8004cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004cd2:	f7fb ff71 	bl	8000bb8 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	@ 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	3332      	adds	r3, #50	@ 0x32
 8004cee:	4a08      	ldr	r2, [pc, #32]	@ (8004d10 <UART_SetConfig+0x2d4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	f003 0207 	and.w	r2, r3, #7
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4422      	add	r2, r4
 8004d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d04:	e106      	b.n	8004f14 <UART_SetConfig+0x4d8>
 8004d06:	bf00      	nop
 8004d08:	40011000 	.word	0x40011000
 8004d0c:	40011400 	.word	0x40011400
 8004d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d26:	4642      	mov	r2, r8
 8004d28:	464b      	mov	r3, r9
 8004d2a:	1891      	adds	r1, r2, r2
 8004d2c:	6239      	str	r1, [r7, #32]
 8004d2e:	415b      	adcs	r3, r3
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d36:	4641      	mov	r1, r8
 8004d38:	1854      	adds	r4, r2, r1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	eb43 0501 	adc.w	r5, r3, r1
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	00eb      	lsls	r3, r5, #3
 8004d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4e:	00e2      	lsls	r2, r4, #3
 8004d50:	4614      	mov	r4, r2
 8004d52:	461d      	mov	r5, r3
 8004d54:	4643      	mov	r3, r8
 8004d56:	18e3      	adds	r3, r4, r3
 8004d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	eb45 0303 	adc.w	r3, r5, r3
 8004d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d82:	4629      	mov	r1, r5
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	008a      	lsls	r2, r1, #2
 8004d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d94:	f7fb ff10 	bl	8000bb8 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b60      	ldr	r3, [pc, #384]	@ (8004f20 <UART_SetConfig+0x4e4>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011c      	lsls	r4, r3, #4
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004db0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	61b9      	str	r1, [r7, #24]
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc8:	4641      	mov	r1, r8
 8004dca:	1851      	adds	r1, r2, r1
 8004dcc:	6139      	str	r1, [r7, #16]
 8004dce:	4649      	mov	r1, r9
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de0:	4659      	mov	r1, fp
 8004de2:	00cb      	lsls	r3, r1, #3
 8004de4:	4651      	mov	r1, sl
 8004de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dea:	4651      	mov	r1, sl
 8004dec:	00ca      	lsls	r2, r1, #3
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	4642      	mov	r2, r8
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	460a      	mov	r2, r1
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e20:	4649      	mov	r1, r9
 8004e22:	008b      	lsls	r3, r1, #2
 8004e24:	4641      	mov	r1, r8
 8004e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	008a      	lsls	r2, r1, #2
 8004e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e32:	f7fb fec1 	bl	8000bb8 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4b38      	ldr	r3, [pc, #224]	@ (8004f20 <UART_SetConfig+0x4e4>)
 8004e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2264      	movs	r2, #100	@ 0x64
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	1acb      	subs	r3, r1, r3
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	3332      	adds	r3, #50	@ 0x32
 8004e50:	4a33      	ldr	r2, [pc, #204]	@ (8004f20 <UART_SetConfig+0x4e4>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e5c:	441c      	add	r4, r3
 8004e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e62:	2200      	movs	r2, #0
 8004e64:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e66:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	1891      	adds	r1, r2, r2
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	415b      	adcs	r3, r3
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	1851      	adds	r1, r2, r1
 8004e80:	6039      	str	r1, [r7, #0]
 8004e82:	4649      	mov	r1, r9
 8004e84:	414b      	adcs	r3, r1
 8004e86:	607b      	str	r3, [r7, #4]
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e94:	4659      	mov	r1, fp
 8004e96:	00cb      	lsls	r3, r1, #3
 8004e98:	4651      	mov	r1, sl
 8004e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9e:	4651      	mov	r1, sl
 8004ea0:	00ca      	lsls	r2, r1, #3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	189b      	adds	r3, r3, r2
 8004eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eae:	464b      	mov	r3, r9
 8004eb0:	460a      	mov	r2, r1
 8004eb2:	eb42 0303 	adc.w	r3, r2, r3
 8004eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ec2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	008b      	lsls	r3, r1, #2
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eda:	4641      	mov	r1, r8
 8004edc:	008a      	lsls	r2, r1, #2
 8004ede:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ee2:	f7fb fe69 	bl	8000bb8 <__aeabi_uldivmod>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4b0d      	ldr	r3, [pc, #52]	@ (8004f20 <UART_SetConfig+0x4e4>)
 8004eec:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	2164      	movs	r1, #100	@ 0x64
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	3332      	adds	r3, #50	@ 0x32
 8004efe:	4a08      	ldr	r2, [pc, #32]	@ (8004f20 <UART_SetConfig+0x4e4>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	f003 020f 	and.w	r2, r3, #15
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4422      	add	r2, r4
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f20:	51eb851f 	.word	0x51eb851f

08004f24 <__cvt>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	ec57 6b10 	vmov	r6, r7, d0
 8004f2c:	2f00      	cmp	r7, #0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4619      	mov	r1, r3
 8004f32:	463b      	mov	r3, r7
 8004f34:	bfbb      	ittet	lt
 8004f36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f3a:	461f      	movlt	r7, r3
 8004f3c:	2300      	movge	r3, #0
 8004f3e:	232d      	movlt	r3, #45	@ 0x2d
 8004f40:	700b      	strb	r3, [r1, #0]
 8004f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f48:	4691      	mov	r9, r2
 8004f4a:	f023 0820 	bic.w	r8, r3, #32
 8004f4e:	bfbc      	itt	lt
 8004f50:	4632      	movlt	r2, r6
 8004f52:	4616      	movlt	r6, r2
 8004f54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f58:	d005      	beq.n	8004f66 <__cvt+0x42>
 8004f5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f5e:	d100      	bne.n	8004f62 <__cvt+0x3e>
 8004f60:	3401      	adds	r4, #1
 8004f62:	2102      	movs	r1, #2
 8004f64:	e000      	b.n	8004f68 <__cvt+0x44>
 8004f66:	2103      	movs	r1, #3
 8004f68:	ab03      	add	r3, sp, #12
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	ab02      	add	r3, sp, #8
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	ec47 6b10 	vmov	d0, r6, r7
 8004f74:	4653      	mov	r3, sl
 8004f76:	4622      	mov	r2, r4
 8004f78:	f000 fe6e 	bl	8005c58 <_dtoa_r>
 8004f7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f80:	4605      	mov	r5, r0
 8004f82:	d119      	bne.n	8004fb8 <__cvt+0x94>
 8004f84:	f019 0f01 	tst.w	r9, #1
 8004f88:	d00e      	beq.n	8004fa8 <__cvt+0x84>
 8004f8a:	eb00 0904 	add.w	r9, r0, r4
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	4630      	mov	r0, r6
 8004f94:	4639      	mov	r1, r7
 8004f96:	f7fb fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f9a:	b108      	cbz	r0, 8004fa0 <__cvt+0x7c>
 8004f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fa0:	2230      	movs	r2, #48	@ 0x30
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	454b      	cmp	r3, r9
 8004fa6:	d31e      	bcc.n	8004fe6 <__cvt+0xc2>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fac:	1b5b      	subs	r3, r3, r5
 8004fae:	4628      	mov	r0, r5
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	b004      	add	sp, #16
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fbc:	eb00 0904 	add.w	r9, r0, r4
 8004fc0:	d1e5      	bne.n	8004f8e <__cvt+0x6a>
 8004fc2:	7803      	ldrb	r3, [r0, #0]
 8004fc4:	2b30      	cmp	r3, #48	@ 0x30
 8004fc6:	d10a      	bne.n	8004fde <__cvt+0xba>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f7fb fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd4:	b918      	cbnz	r0, 8004fde <__cvt+0xba>
 8004fd6:	f1c4 0401 	rsb	r4, r4, #1
 8004fda:	f8ca 4000 	str.w	r4, [sl]
 8004fde:	f8da 3000 	ldr.w	r3, [sl]
 8004fe2:	4499      	add	r9, r3
 8004fe4:	e7d3      	b.n	8004f8e <__cvt+0x6a>
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	9103      	str	r1, [sp, #12]
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e7d9      	b.n	8004fa2 <__cvt+0x7e>

08004fee <__exponent>:
 8004fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	bfba      	itte	lt
 8004ff4:	4249      	neglt	r1, r1
 8004ff6:	232d      	movlt	r3, #45	@ 0x2d
 8004ff8:	232b      	movge	r3, #43	@ 0x2b
 8004ffa:	2909      	cmp	r1, #9
 8004ffc:	7002      	strb	r2, [r0, #0]
 8004ffe:	7043      	strb	r3, [r0, #1]
 8005000:	dd29      	ble.n	8005056 <__exponent+0x68>
 8005002:	f10d 0307 	add.w	r3, sp, #7
 8005006:	461d      	mov	r5, r3
 8005008:	270a      	movs	r7, #10
 800500a:	461a      	mov	r2, r3
 800500c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005010:	fb07 1416 	mls	r4, r7, r6, r1
 8005014:	3430      	adds	r4, #48	@ 0x30
 8005016:	f802 4c01 	strb.w	r4, [r2, #-1]
 800501a:	460c      	mov	r4, r1
 800501c:	2c63      	cmp	r4, #99	@ 0x63
 800501e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005022:	4631      	mov	r1, r6
 8005024:	dcf1      	bgt.n	800500a <__exponent+0x1c>
 8005026:	3130      	adds	r1, #48	@ 0x30
 8005028:	1e94      	subs	r4, r2, #2
 800502a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800502e:	1c41      	adds	r1, r0, #1
 8005030:	4623      	mov	r3, r4
 8005032:	42ab      	cmp	r3, r5
 8005034:	d30a      	bcc.n	800504c <__exponent+0x5e>
 8005036:	f10d 0309 	add.w	r3, sp, #9
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	42ac      	cmp	r4, r5
 800503e:	bf88      	it	hi
 8005040:	2300      	movhi	r3, #0
 8005042:	3302      	adds	r3, #2
 8005044:	4403      	add	r3, r0
 8005046:	1a18      	subs	r0, r3, r0
 8005048:	b003      	add	sp, #12
 800504a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005050:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005054:	e7ed      	b.n	8005032 <__exponent+0x44>
 8005056:	2330      	movs	r3, #48	@ 0x30
 8005058:	3130      	adds	r1, #48	@ 0x30
 800505a:	7083      	strb	r3, [r0, #2]
 800505c:	70c1      	strb	r1, [r0, #3]
 800505e:	1d03      	adds	r3, r0, #4
 8005060:	e7f1      	b.n	8005046 <__exponent+0x58>
	...

08005064 <_printf_float>:
 8005064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005068:	b08d      	sub	sp, #52	@ 0x34
 800506a:	460c      	mov	r4, r1
 800506c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005070:	4616      	mov	r6, r2
 8005072:	461f      	mov	r7, r3
 8005074:	4605      	mov	r5, r0
 8005076:	f000 fcef 	bl	8005a58 <_localeconv_r>
 800507a:	6803      	ldr	r3, [r0, #0]
 800507c:	9304      	str	r3, [sp, #16]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb f8fe 	bl	8000280 <strlen>
 8005084:	2300      	movs	r3, #0
 8005086:	930a      	str	r3, [sp, #40]	@ 0x28
 8005088:	f8d8 3000 	ldr.w	r3, [r8]
 800508c:	9005      	str	r0, [sp, #20]
 800508e:	3307      	adds	r3, #7
 8005090:	f023 0307 	bic.w	r3, r3, #7
 8005094:	f103 0208 	add.w	r2, r3, #8
 8005098:	f894 a018 	ldrb.w	sl, [r4, #24]
 800509c:	f8d4 b000 	ldr.w	fp, [r4]
 80050a0:	f8c8 2000 	str.w	r2, [r8]
 80050a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050ac:	9307      	str	r3, [sp, #28]
 80050ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80050b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ba:	4b9c      	ldr	r3, [pc, #624]	@ (800532c <_printf_float+0x2c8>)
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295
 80050c0:	f7fb fd3c 	bl	8000b3c <__aeabi_dcmpun>
 80050c4:	bb70      	cbnz	r0, 8005124 <_printf_float+0xc0>
 80050c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ca:	4b98      	ldr	r3, [pc, #608]	@ (800532c <_printf_float+0x2c8>)
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	f7fb fd16 	bl	8000b00 <__aeabi_dcmple>
 80050d4:	bb30      	cbnz	r0, 8005124 <_printf_float+0xc0>
 80050d6:	2200      	movs	r2, #0
 80050d8:	2300      	movs	r3, #0
 80050da:	4640      	mov	r0, r8
 80050dc:	4649      	mov	r1, r9
 80050de:	f7fb fd05 	bl	8000aec <__aeabi_dcmplt>
 80050e2:	b110      	cbz	r0, 80050ea <_printf_float+0x86>
 80050e4:	232d      	movs	r3, #45	@ 0x2d
 80050e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ea:	4a91      	ldr	r2, [pc, #580]	@ (8005330 <_printf_float+0x2cc>)
 80050ec:	4b91      	ldr	r3, [pc, #580]	@ (8005334 <_printf_float+0x2d0>)
 80050ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050f2:	bf94      	ite	ls
 80050f4:	4690      	movls	r8, r2
 80050f6:	4698      	movhi	r8, r3
 80050f8:	2303      	movs	r3, #3
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	f02b 0304 	bic.w	r3, fp, #4
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	f04f 0900 	mov.w	r9, #0
 8005106:	9700      	str	r7, [sp, #0]
 8005108:	4633      	mov	r3, r6
 800510a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800510c:	4621      	mov	r1, r4
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f9d2 	bl	80054b8 <_printf_common>
 8005114:	3001      	adds	r0, #1
 8005116:	f040 808d 	bne.w	8005234 <_printf_float+0x1d0>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	b00d      	add	sp, #52	@ 0x34
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb fd06 	bl	8000b3c <__aeabi_dcmpun>
 8005130:	b140      	cbz	r0, 8005144 <_printf_float+0xe0>
 8005132:	464b      	mov	r3, r9
 8005134:	2b00      	cmp	r3, #0
 8005136:	bfbc      	itt	lt
 8005138:	232d      	movlt	r3, #45	@ 0x2d
 800513a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800513e:	4a7e      	ldr	r2, [pc, #504]	@ (8005338 <_printf_float+0x2d4>)
 8005140:	4b7e      	ldr	r3, [pc, #504]	@ (800533c <_printf_float+0x2d8>)
 8005142:	e7d4      	b.n	80050ee <_printf_float+0x8a>
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800514a:	9206      	str	r2, [sp, #24]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	d13b      	bne.n	80051c8 <_printf_float+0x164>
 8005150:	2306      	movs	r3, #6
 8005152:	6063      	str	r3, [r4, #4]
 8005154:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005158:	2300      	movs	r3, #0
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005160:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005164:	ab09      	add	r3, sp, #36	@ 0x24
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	6861      	ldr	r1, [r4, #4]
 800516a:	ec49 8b10 	vmov	d0, r8, r9
 800516e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005172:	4628      	mov	r0, r5
 8005174:	f7ff fed6 	bl	8004f24 <__cvt>
 8005178:	9b06      	ldr	r3, [sp, #24]
 800517a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800517c:	2b47      	cmp	r3, #71	@ 0x47
 800517e:	4680      	mov	r8, r0
 8005180:	d129      	bne.n	80051d6 <_printf_float+0x172>
 8005182:	1cc8      	adds	r0, r1, #3
 8005184:	db02      	blt.n	800518c <_printf_float+0x128>
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	4299      	cmp	r1, r3
 800518a:	dd41      	ble.n	8005210 <_printf_float+0x1ac>
 800518c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005190:	fa5f fa8a 	uxtb.w	sl, sl
 8005194:	3901      	subs	r1, #1
 8005196:	4652      	mov	r2, sl
 8005198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800519c:	9109      	str	r1, [sp, #36]	@ 0x24
 800519e:	f7ff ff26 	bl	8004fee <__exponent>
 80051a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051a4:	1813      	adds	r3, r2, r0
 80051a6:	2a01      	cmp	r2, #1
 80051a8:	4681      	mov	r9, r0
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	dc02      	bgt.n	80051b4 <_printf_float+0x150>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	07d2      	lsls	r2, r2, #31
 80051b2:	d501      	bpl.n	80051b8 <_printf_float+0x154>
 80051b4:	3301      	adds	r3, #1
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0a2      	beq.n	8005106 <_printf_float+0xa2>
 80051c0:	232d      	movs	r3, #45	@ 0x2d
 80051c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c6:	e79e      	b.n	8005106 <_printf_float+0xa2>
 80051c8:	9a06      	ldr	r2, [sp, #24]
 80051ca:	2a47      	cmp	r2, #71	@ 0x47
 80051cc:	d1c2      	bne.n	8005154 <_printf_float+0xf0>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1c0      	bne.n	8005154 <_printf_float+0xf0>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e7bd      	b.n	8005152 <_printf_float+0xee>
 80051d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051da:	d9db      	bls.n	8005194 <_printf_float+0x130>
 80051dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051e0:	d118      	bne.n	8005214 <_printf_float+0x1b0>
 80051e2:	2900      	cmp	r1, #0
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	dd0b      	ble.n	8005200 <_printf_float+0x19c>
 80051e8:	6121      	str	r1, [r4, #16]
 80051ea:	b913      	cbnz	r3, 80051f2 <_printf_float+0x18e>
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	07d0      	lsls	r0, r2, #31
 80051f0:	d502      	bpl.n	80051f8 <_printf_float+0x194>
 80051f2:	3301      	adds	r3, #1
 80051f4:	440b      	add	r3, r1
 80051f6:	6123      	str	r3, [r4, #16]
 80051f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051fa:	f04f 0900 	mov.w	r9, #0
 80051fe:	e7db      	b.n	80051b8 <_printf_float+0x154>
 8005200:	b913      	cbnz	r3, 8005208 <_printf_float+0x1a4>
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	07d2      	lsls	r2, r2, #31
 8005206:	d501      	bpl.n	800520c <_printf_float+0x1a8>
 8005208:	3302      	adds	r3, #2
 800520a:	e7f4      	b.n	80051f6 <_printf_float+0x192>
 800520c:	2301      	movs	r3, #1
 800520e:	e7f2      	b.n	80051f6 <_printf_float+0x192>
 8005210:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005216:	4299      	cmp	r1, r3
 8005218:	db05      	blt.n	8005226 <_printf_float+0x1c2>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6121      	str	r1, [r4, #16]
 800521e:	07d8      	lsls	r0, r3, #31
 8005220:	d5ea      	bpl.n	80051f8 <_printf_float+0x194>
 8005222:	1c4b      	adds	r3, r1, #1
 8005224:	e7e7      	b.n	80051f6 <_printf_float+0x192>
 8005226:	2900      	cmp	r1, #0
 8005228:	bfd4      	ite	le
 800522a:	f1c1 0202 	rsble	r2, r1, #2
 800522e:	2201      	movgt	r2, #1
 8005230:	4413      	add	r3, r2
 8005232:	e7e0      	b.n	80051f6 <_printf_float+0x192>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	055a      	lsls	r2, r3, #21
 8005238:	d407      	bmi.n	800524a <_printf_float+0x1e6>
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	4642      	mov	r2, r8
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	d12b      	bne.n	80052a0 <_printf_float+0x23c>
 8005248:	e767      	b.n	800511a <_printf_float+0xb6>
 800524a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800524e:	f240 80dd 	bls.w	800540c <_printf_float+0x3a8>
 8005252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	f7fb fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800525e:	2800      	cmp	r0, #0
 8005260:	d033      	beq.n	80052ca <_printf_float+0x266>
 8005262:	4a37      	ldr	r2, [pc, #220]	@ (8005340 <_printf_float+0x2dc>)
 8005264:	2301      	movs	r3, #1
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f af54 	beq.w	800511a <_printf_float+0xb6>
 8005272:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005276:	4543      	cmp	r3, r8
 8005278:	db02      	blt.n	8005280 <_printf_float+0x21c>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	07d8      	lsls	r0, r3, #31
 800527e:	d50f      	bpl.n	80052a0 <_printf_float+0x23c>
 8005280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f af45 	beq.w	800511a <_printf_float+0xb6>
 8005290:	f04f 0900 	mov.w	r9, #0
 8005294:	f108 38ff 	add.w	r8, r8, #4294967295
 8005298:	f104 0a1a 	add.w	sl, r4, #26
 800529c:	45c8      	cmp	r8, r9
 800529e:	dc09      	bgt.n	80052b4 <_printf_float+0x250>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	f100 8103 	bmi.w	80054ae <_printf_float+0x44a>
 80052a8:	68e0      	ldr	r0, [r4, #12]
 80052aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ac:	4298      	cmp	r0, r3
 80052ae:	bfb8      	it	lt
 80052b0:	4618      	movlt	r0, r3
 80052b2:	e734      	b.n	800511e <_printf_float+0xba>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4652      	mov	r2, sl
 80052b8:	4631      	mov	r1, r6
 80052ba:	4628      	mov	r0, r5
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	f43f af2b 	beq.w	800511a <_printf_float+0xb6>
 80052c4:	f109 0901 	add.w	r9, r9, #1
 80052c8:	e7e8      	b.n	800529c <_printf_float+0x238>
 80052ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc39      	bgt.n	8005344 <_printf_float+0x2e0>
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <_printf_float+0x2dc>)
 80052d2:	2301      	movs	r3, #1
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f af1d 	beq.w	800511a <_printf_float+0xb6>
 80052e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052e4:	ea59 0303 	orrs.w	r3, r9, r3
 80052e8:	d102      	bne.n	80052f0 <_printf_float+0x28c>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	07d9      	lsls	r1, r3, #31
 80052ee:	d5d7      	bpl.n	80052a0 <_printf_float+0x23c>
 80052f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af0d 	beq.w	800511a <_printf_float+0xb6>
 8005300:	f04f 0a00 	mov.w	sl, #0
 8005304:	f104 0b1a 	add.w	fp, r4, #26
 8005308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530a:	425b      	negs	r3, r3
 800530c:	4553      	cmp	r3, sl
 800530e:	dc01      	bgt.n	8005314 <_printf_float+0x2b0>
 8005310:	464b      	mov	r3, r9
 8005312:	e793      	b.n	800523c <_printf_float+0x1d8>
 8005314:	2301      	movs	r3, #1
 8005316:	465a      	mov	r2, fp
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f aefb 	beq.w	800511a <_printf_float+0xb6>
 8005324:	f10a 0a01 	add.w	sl, sl, #1
 8005328:	e7ee      	b.n	8005308 <_printf_float+0x2a4>
 800532a:	bf00      	nop
 800532c:	7fefffff 	.word	0x7fefffff
 8005330:	08007c2c 	.word	0x08007c2c
 8005334:	08007c30 	.word	0x08007c30
 8005338:	08007c34 	.word	0x08007c34
 800533c:	08007c38 	.word	0x08007c38
 8005340:	08007c3c 	.word	0x08007c3c
 8005344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800534a:	4553      	cmp	r3, sl
 800534c:	bfa8      	it	ge
 800534e:	4653      	movge	r3, sl
 8005350:	2b00      	cmp	r3, #0
 8005352:	4699      	mov	r9, r3
 8005354:	dc36      	bgt.n	80053c4 <_printf_float+0x360>
 8005356:	f04f 0b00 	mov.w	fp, #0
 800535a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800535e:	f104 021a 	add.w	r2, r4, #26
 8005362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005364:	9306      	str	r3, [sp, #24]
 8005366:	eba3 0309 	sub.w	r3, r3, r9
 800536a:	455b      	cmp	r3, fp
 800536c:	dc31      	bgt.n	80053d2 <_printf_float+0x36e>
 800536e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005370:	459a      	cmp	sl, r3
 8005372:	dc3a      	bgt.n	80053ea <_printf_float+0x386>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	07da      	lsls	r2, r3, #31
 8005378:	d437      	bmi.n	80053ea <_printf_float+0x386>
 800537a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800537c:	ebaa 0903 	sub.w	r9, sl, r3
 8005380:	9b06      	ldr	r3, [sp, #24]
 8005382:	ebaa 0303 	sub.w	r3, sl, r3
 8005386:	4599      	cmp	r9, r3
 8005388:	bfa8      	it	ge
 800538a:	4699      	movge	r9, r3
 800538c:	f1b9 0f00 	cmp.w	r9, #0
 8005390:	dc33      	bgt.n	80053fa <_printf_float+0x396>
 8005392:	f04f 0800 	mov.w	r8, #0
 8005396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800539a:	f104 0b1a 	add.w	fp, r4, #26
 800539e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a0:	ebaa 0303 	sub.w	r3, sl, r3
 80053a4:	eba3 0309 	sub.w	r3, r3, r9
 80053a8:	4543      	cmp	r3, r8
 80053aa:	f77f af79 	ble.w	80052a0 <_printf_float+0x23c>
 80053ae:	2301      	movs	r3, #1
 80053b0:	465a      	mov	r2, fp
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f aeae 	beq.w	800511a <_printf_float+0xb6>
 80053be:	f108 0801 	add.w	r8, r8, #1
 80053c2:	e7ec      	b.n	800539e <_printf_float+0x33a>
 80053c4:	4642      	mov	r2, r8
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	d1c2      	bne.n	8005356 <_printf_float+0x2f2>
 80053d0:	e6a3      	b.n	800511a <_printf_float+0xb6>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	9206      	str	r2, [sp, #24]
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae9c 	beq.w	800511a <_printf_float+0xb6>
 80053e2:	9a06      	ldr	r2, [sp, #24]
 80053e4:	f10b 0b01 	add.w	fp, fp, #1
 80053e8:	e7bb      	b.n	8005362 <_printf_float+0x2fe>
 80053ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	d1c0      	bne.n	800537a <_printf_float+0x316>
 80053f8:	e68f      	b.n	800511a <_printf_float+0xb6>
 80053fa:	9a06      	ldr	r2, [sp, #24]
 80053fc:	464b      	mov	r3, r9
 80053fe:	4442      	add	r2, r8
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	d1c3      	bne.n	8005392 <_printf_float+0x32e>
 800540a:	e686      	b.n	800511a <_printf_float+0xb6>
 800540c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005410:	f1ba 0f01 	cmp.w	sl, #1
 8005414:	dc01      	bgt.n	800541a <_printf_float+0x3b6>
 8005416:	07db      	lsls	r3, r3, #31
 8005418:	d536      	bpl.n	8005488 <_printf_float+0x424>
 800541a:	2301      	movs	r3, #1
 800541c:	4642      	mov	r2, r8
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae78 	beq.w	800511a <_printf_float+0xb6>
 800542a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	f43f ae70 	beq.w	800511a <_printf_float+0xb6>
 800543a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800543e:	2200      	movs	r2, #0
 8005440:	2300      	movs	r3, #0
 8005442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005446:	f7fb fb47 	bl	8000ad8 <__aeabi_dcmpeq>
 800544a:	b9c0      	cbnz	r0, 800547e <_printf_float+0x41a>
 800544c:	4653      	mov	r3, sl
 800544e:	f108 0201 	add.w	r2, r8, #1
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	d10c      	bne.n	8005476 <_printf_float+0x412>
 800545c:	e65d      	b.n	800511a <_printf_float+0xb6>
 800545e:	2301      	movs	r3, #1
 8005460:	465a      	mov	r2, fp
 8005462:	4631      	mov	r1, r6
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	f43f ae56 	beq.w	800511a <_printf_float+0xb6>
 800546e:	f108 0801 	add.w	r8, r8, #1
 8005472:	45d0      	cmp	r8, sl
 8005474:	dbf3      	blt.n	800545e <_printf_float+0x3fa>
 8005476:	464b      	mov	r3, r9
 8005478:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800547c:	e6df      	b.n	800523e <_printf_float+0x1da>
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	f104 0b1a 	add.w	fp, r4, #26
 8005486:	e7f4      	b.n	8005472 <_printf_float+0x40e>
 8005488:	2301      	movs	r3, #1
 800548a:	4642      	mov	r2, r8
 800548c:	e7e1      	b.n	8005452 <_printf_float+0x3ee>
 800548e:	2301      	movs	r3, #1
 8005490:	464a      	mov	r2, r9
 8005492:	4631      	mov	r1, r6
 8005494:	4628      	mov	r0, r5
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	f43f ae3e 	beq.w	800511a <_printf_float+0xb6>
 800549e:	f108 0801 	add.w	r8, r8, #1
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054a6:	1a5b      	subs	r3, r3, r1
 80054a8:	4543      	cmp	r3, r8
 80054aa:	dcf0      	bgt.n	800548e <_printf_float+0x42a>
 80054ac:	e6fc      	b.n	80052a8 <_printf_float+0x244>
 80054ae:	f04f 0800 	mov.w	r8, #0
 80054b2:	f104 0919 	add.w	r9, r4, #25
 80054b6:	e7f4      	b.n	80054a2 <_printf_float+0x43e>

080054b8 <_printf_common>:
 80054b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	4616      	mov	r6, r2
 80054be:	4698      	mov	r8, r3
 80054c0:	688a      	ldr	r2, [r1, #8]
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bfb8      	it	lt
 80054cc:	4613      	movlt	r3, r2
 80054ce:	6033      	str	r3, [r6, #0]
 80054d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054d4:	4607      	mov	r7, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	b10a      	cbz	r2, 80054de <_printf_common+0x26>
 80054da:	3301      	adds	r3, #1
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	0699      	lsls	r1, r3, #26
 80054e2:	bf42      	ittt	mi
 80054e4:	6833      	ldrmi	r3, [r6, #0]
 80054e6:	3302      	addmi	r3, #2
 80054e8:	6033      	strmi	r3, [r6, #0]
 80054ea:	6825      	ldr	r5, [r4, #0]
 80054ec:	f015 0506 	ands.w	r5, r5, #6
 80054f0:	d106      	bne.n	8005500 <_printf_common+0x48>
 80054f2:	f104 0a19 	add.w	sl, r4, #25
 80054f6:	68e3      	ldr	r3, [r4, #12]
 80054f8:	6832      	ldr	r2, [r6, #0]
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	42ab      	cmp	r3, r5
 80054fe:	dc26      	bgt.n	800554e <_printf_common+0x96>
 8005500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	3b00      	subs	r3, #0
 8005508:	bf18      	it	ne
 800550a:	2301      	movne	r3, #1
 800550c:	0692      	lsls	r2, r2, #26
 800550e:	d42b      	bmi.n	8005568 <_printf_common+0xb0>
 8005510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005514:	4641      	mov	r1, r8
 8005516:	4638      	mov	r0, r7
 8005518:	47c8      	blx	r9
 800551a:	3001      	adds	r0, #1
 800551c:	d01e      	beq.n	800555c <_printf_common+0xa4>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	f003 0306 	and.w	r3, r3, #6
 8005526:	2b04      	cmp	r3, #4
 8005528:	bf02      	ittt	eq
 800552a:	68e5      	ldreq	r5, [r4, #12]
 800552c:	6833      	ldreq	r3, [r6, #0]
 800552e:	1aed      	subeq	r5, r5, r3
 8005530:	68a3      	ldr	r3, [r4, #8]
 8005532:	bf0c      	ite	eq
 8005534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005538:	2500      	movne	r5, #0
 800553a:	4293      	cmp	r3, r2
 800553c:	bfc4      	itt	gt
 800553e:	1a9b      	subgt	r3, r3, r2
 8005540:	18ed      	addgt	r5, r5, r3
 8005542:	2600      	movs	r6, #0
 8005544:	341a      	adds	r4, #26
 8005546:	42b5      	cmp	r5, r6
 8005548:	d11a      	bne.n	8005580 <_printf_common+0xc8>
 800554a:	2000      	movs	r0, #0
 800554c:	e008      	b.n	8005560 <_printf_common+0xa8>
 800554e:	2301      	movs	r3, #1
 8005550:	4652      	mov	r2, sl
 8005552:	4641      	mov	r1, r8
 8005554:	4638      	mov	r0, r7
 8005556:	47c8      	blx	r9
 8005558:	3001      	adds	r0, #1
 800555a:	d103      	bne.n	8005564 <_printf_common+0xac>
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005564:	3501      	adds	r5, #1
 8005566:	e7c6      	b.n	80054f6 <_printf_common+0x3e>
 8005568:	18e1      	adds	r1, r4, r3
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	2030      	movs	r0, #48	@ 0x30
 800556e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005572:	4422      	add	r2, r4
 8005574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800557c:	3302      	adds	r3, #2
 800557e:	e7c7      	b.n	8005510 <_printf_common+0x58>
 8005580:	2301      	movs	r3, #1
 8005582:	4622      	mov	r2, r4
 8005584:	4641      	mov	r1, r8
 8005586:	4638      	mov	r0, r7
 8005588:	47c8      	blx	r9
 800558a:	3001      	adds	r0, #1
 800558c:	d0e6      	beq.n	800555c <_printf_common+0xa4>
 800558e:	3601      	adds	r6, #1
 8005590:	e7d9      	b.n	8005546 <_printf_common+0x8e>
	...

08005594 <_printf_i>:
 8005594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	7e0f      	ldrb	r7, [r1, #24]
 800559a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800559c:	2f78      	cmp	r7, #120	@ 0x78
 800559e:	4691      	mov	r9, r2
 80055a0:	4680      	mov	r8, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	469a      	mov	sl, r3
 80055a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055aa:	d807      	bhi.n	80055bc <_printf_i+0x28>
 80055ac:	2f62      	cmp	r7, #98	@ 0x62
 80055ae:	d80a      	bhi.n	80055c6 <_printf_i+0x32>
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	f000 80d2 	beq.w	800575a <_printf_i+0x1c6>
 80055b6:	2f58      	cmp	r7, #88	@ 0x58
 80055b8:	f000 80b9 	beq.w	800572e <_printf_i+0x19a>
 80055bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055c4:	e03a      	b.n	800563c <_printf_i+0xa8>
 80055c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ca:	2b15      	cmp	r3, #21
 80055cc:	d8f6      	bhi.n	80055bc <_printf_i+0x28>
 80055ce:	a101      	add	r1, pc, #4	@ (adr r1, 80055d4 <_printf_i+0x40>)
 80055d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d4:	0800562d 	.word	0x0800562d
 80055d8:	08005641 	.word	0x08005641
 80055dc:	080055bd 	.word	0x080055bd
 80055e0:	080055bd 	.word	0x080055bd
 80055e4:	080055bd 	.word	0x080055bd
 80055e8:	080055bd 	.word	0x080055bd
 80055ec:	08005641 	.word	0x08005641
 80055f0:	080055bd 	.word	0x080055bd
 80055f4:	080055bd 	.word	0x080055bd
 80055f8:	080055bd 	.word	0x080055bd
 80055fc:	080055bd 	.word	0x080055bd
 8005600:	08005741 	.word	0x08005741
 8005604:	0800566b 	.word	0x0800566b
 8005608:	080056fb 	.word	0x080056fb
 800560c:	080055bd 	.word	0x080055bd
 8005610:	080055bd 	.word	0x080055bd
 8005614:	08005763 	.word	0x08005763
 8005618:	080055bd 	.word	0x080055bd
 800561c:	0800566b 	.word	0x0800566b
 8005620:	080055bd 	.word	0x080055bd
 8005624:	080055bd 	.word	0x080055bd
 8005628:	08005703 	.word	0x08005703
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6032      	str	r2, [r6, #0]
 8005634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800563c:	2301      	movs	r3, #1
 800563e:	e09d      	b.n	800577c <_printf_i+0x1e8>
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	6031      	str	r1, [r6, #0]
 8005648:	0606      	lsls	r6, r0, #24
 800564a:	d501      	bpl.n	8005650 <_printf_i+0xbc>
 800564c:	681d      	ldr	r5, [r3, #0]
 800564e:	e003      	b.n	8005658 <_printf_i+0xc4>
 8005650:	0645      	lsls	r5, r0, #25
 8005652:	d5fb      	bpl.n	800564c <_printf_i+0xb8>
 8005654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005658:	2d00      	cmp	r5, #0
 800565a:	da03      	bge.n	8005664 <_printf_i+0xd0>
 800565c:	232d      	movs	r3, #45	@ 0x2d
 800565e:	426d      	negs	r5, r5
 8005660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005664:	4859      	ldr	r0, [pc, #356]	@ (80057cc <_printf_i+0x238>)
 8005666:	230a      	movs	r3, #10
 8005668:	e011      	b.n	800568e <_printf_i+0xfa>
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	6833      	ldr	r3, [r6, #0]
 800566e:	0608      	lsls	r0, r1, #24
 8005670:	f853 5b04 	ldr.w	r5, [r3], #4
 8005674:	d402      	bmi.n	800567c <_printf_i+0xe8>
 8005676:	0649      	lsls	r1, r1, #25
 8005678:	bf48      	it	mi
 800567a:	b2ad      	uxthmi	r5, r5
 800567c:	2f6f      	cmp	r7, #111	@ 0x6f
 800567e:	4853      	ldr	r0, [pc, #332]	@ (80057cc <_printf_i+0x238>)
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	bf14      	ite	ne
 8005684:	230a      	movne	r3, #10
 8005686:	2308      	moveq	r3, #8
 8005688:	2100      	movs	r1, #0
 800568a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800568e:	6866      	ldr	r6, [r4, #4]
 8005690:	60a6      	str	r6, [r4, #8]
 8005692:	2e00      	cmp	r6, #0
 8005694:	bfa2      	ittt	ge
 8005696:	6821      	ldrge	r1, [r4, #0]
 8005698:	f021 0104 	bicge.w	r1, r1, #4
 800569c:	6021      	strge	r1, [r4, #0]
 800569e:	b90d      	cbnz	r5, 80056a4 <_printf_i+0x110>
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	d04b      	beq.n	800573c <_printf_i+0x1a8>
 80056a4:	4616      	mov	r6, r2
 80056a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80056aa:	fb03 5711 	mls	r7, r3, r1, r5
 80056ae:	5dc7      	ldrb	r7, [r0, r7]
 80056b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b4:	462f      	mov	r7, r5
 80056b6:	42bb      	cmp	r3, r7
 80056b8:	460d      	mov	r5, r1
 80056ba:	d9f4      	bls.n	80056a6 <_printf_i+0x112>
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d10b      	bne.n	80056d8 <_printf_i+0x144>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	07df      	lsls	r7, r3, #31
 80056c4:	d508      	bpl.n	80056d8 <_printf_i+0x144>
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	6861      	ldr	r1, [r4, #4]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	bfde      	ittt	le
 80056ce:	2330      	movle	r3, #48	@ 0x30
 80056d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056d8:	1b92      	subs	r2, r2, r6
 80056da:	6122      	str	r2, [r4, #16]
 80056dc:	f8cd a000 	str.w	sl, [sp]
 80056e0:	464b      	mov	r3, r9
 80056e2:	aa03      	add	r2, sp, #12
 80056e4:	4621      	mov	r1, r4
 80056e6:	4640      	mov	r0, r8
 80056e8:	f7ff fee6 	bl	80054b8 <_printf_common>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d14a      	bne.n	8005786 <_printf_i+0x1f2>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b004      	add	sp, #16
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f043 0320 	orr.w	r3, r3, #32
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	4833      	ldr	r0, [pc, #204]	@ (80057d0 <_printf_i+0x23c>)
 8005704:	2778      	movs	r7, #120	@ 0x78
 8005706:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	6831      	ldr	r1, [r6, #0]
 800570e:	061f      	lsls	r7, r3, #24
 8005710:	f851 5b04 	ldr.w	r5, [r1], #4
 8005714:	d402      	bmi.n	800571c <_printf_i+0x188>
 8005716:	065f      	lsls	r7, r3, #25
 8005718:	bf48      	it	mi
 800571a:	b2ad      	uxthmi	r5, r5
 800571c:	6031      	str	r1, [r6, #0]
 800571e:	07d9      	lsls	r1, r3, #31
 8005720:	bf44      	itt	mi
 8005722:	f043 0320 	orrmi.w	r3, r3, #32
 8005726:	6023      	strmi	r3, [r4, #0]
 8005728:	b11d      	cbz	r5, 8005732 <_printf_i+0x19e>
 800572a:	2310      	movs	r3, #16
 800572c:	e7ac      	b.n	8005688 <_printf_i+0xf4>
 800572e:	4827      	ldr	r0, [pc, #156]	@ (80057cc <_printf_i+0x238>)
 8005730:	e7e9      	b.n	8005706 <_printf_i+0x172>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f023 0320 	bic.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	e7f6      	b.n	800572a <_printf_i+0x196>
 800573c:	4616      	mov	r6, r2
 800573e:	e7bd      	b.n	80056bc <_printf_i+0x128>
 8005740:	6833      	ldr	r3, [r6, #0]
 8005742:	6825      	ldr	r5, [r4, #0]
 8005744:	6961      	ldr	r1, [r4, #20]
 8005746:	1d18      	adds	r0, r3, #4
 8005748:	6030      	str	r0, [r6, #0]
 800574a:	062e      	lsls	r6, r5, #24
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	d501      	bpl.n	8005754 <_printf_i+0x1c0>
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	e002      	b.n	800575a <_printf_i+0x1c6>
 8005754:	0668      	lsls	r0, r5, #25
 8005756:	d5fb      	bpl.n	8005750 <_printf_i+0x1bc>
 8005758:	8019      	strh	r1, [r3, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	6123      	str	r3, [r4, #16]
 800575e:	4616      	mov	r6, r2
 8005760:	e7bc      	b.n	80056dc <_printf_i+0x148>
 8005762:	6833      	ldr	r3, [r6, #0]
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	6032      	str	r2, [r6, #0]
 8005768:	681e      	ldr	r6, [r3, #0]
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	2100      	movs	r1, #0
 800576e:	4630      	mov	r0, r6
 8005770:	f7fa fd36 	bl	80001e0 <memchr>
 8005774:	b108      	cbz	r0, 800577a <_printf_i+0x1e6>
 8005776:	1b80      	subs	r0, r0, r6
 8005778:	6060      	str	r0, [r4, #4]
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	2300      	movs	r3, #0
 8005780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005784:	e7aa      	b.n	80056dc <_printf_i+0x148>
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	4632      	mov	r2, r6
 800578a:	4649      	mov	r1, r9
 800578c:	4640      	mov	r0, r8
 800578e:	47d0      	blx	sl
 8005790:	3001      	adds	r0, #1
 8005792:	d0ad      	beq.n	80056f0 <_printf_i+0x15c>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	079b      	lsls	r3, r3, #30
 8005798:	d413      	bmi.n	80057c2 <_printf_i+0x22e>
 800579a:	68e0      	ldr	r0, [r4, #12]
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	4298      	cmp	r0, r3
 80057a0:	bfb8      	it	lt
 80057a2:	4618      	movlt	r0, r3
 80057a4:	e7a6      	b.n	80056f4 <_printf_i+0x160>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4632      	mov	r2, r6
 80057aa:	4649      	mov	r1, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	47d0      	blx	sl
 80057b0:	3001      	adds	r0, #1
 80057b2:	d09d      	beq.n	80056f0 <_printf_i+0x15c>
 80057b4:	3501      	adds	r5, #1
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	9903      	ldr	r1, [sp, #12]
 80057ba:	1a5b      	subs	r3, r3, r1
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dcf2      	bgt.n	80057a6 <_printf_i+0x212>
 80057c0:	e7eb      	b.n	800579a <_printf_i+0x206>
 80057c2:	2500      	movs	r5, #0
 80057c4:	f104 0619 	add.w	r6, r4, #25
 80057c8:	e7f5      	b.n	80057b6 <_printf_i+0x222>
 80057ca:	bf00      	nop
 80057cc:	08007c3e 	.word	0x08007c3e
 80057d0:	08007c4f 	.word	0x08007c4f

080057d4 <std>:
 80057d4:	2300      	movs	r3, #0
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	e9c0 3300 	strd	r3, r3, [r0]
 80057de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e2:	6083      	str	r3, [r0, #8]
 80057e4:	8181      	strh	r1, [r0, #12]
 80057e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057e8:	81c2      	strh	r2, [r0, #14]
 80057ea:	6183      	str	r3, [r0, #24]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2208      	movs	r2, #8
 80057f0:	305c      	adds	r0, #92	@ 0x5c
 80057f2:	f000 f928 	bl	8005a46 <memset>
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <std+0x58>)
 80057f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <std+0x5c>)
 80057fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <std+0x60>)
 8005800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <std+0x64>)
 8005804:	6323      	str	r3, [r4, #48]	@ 0x30
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <std+0x68>)
 8005808:	6224      	str	r4, [r4, #32]
 800580a:	429c      	cmp	r4, r3
 800580c:	d006      	beq.n	800581c <std+0x48>
 800580e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005812:	4294      	cmp	r4, r2
 8005814:	d002      	beq.n	800581c <std+0x48>
 8005816:	33d0      	adds	r3, #208	@ 0xd0
 8005818:	429c      	cmp	r4, r3
 800581a:	d105      	bne.n	8005828 <std+0x54>
 800581c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	f000 b98c 	b.w	8005b40 <__retarget_lock_init_recursive>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	080059c1 	.word	0x080059c1
 8005830:	080059e3 	.word	0x080059e3
 8005834:	08005a1b 	.word	0x08005a1b
 8005838:	08005a3f 	.word	0x08005a3f
 800583c:	20000364 	.word	0x20000364

08005840 <stdio_exit_handler>:
 8005840:	4a02      	ldr	r2, [pc, #8]	@ (800584c <stdio_exit_handler+0xc>)
 8005842:	4903      	ldr	r1, [pc, #12]	@ (8005850 <stdio_exit_handler+0x10>)
 8005844:	4803      	ldr	r0, [pc, #12]	@ (8005854 <stdio_exit_handler+0x14>)
 8005846:	f000 b869 	b.w	800591c <_fwalk_sglue>
 800584a:	bf00      	nop
 800584c:	20000010 	.word	0x20000010
 8005850:	0800749d 	.word	0x0800749d
 8005854:	20000020 	.word	0x20000020

08005858 <cleanup_stdio>:
 8005858:	6841      	ldr	r1, [r0, #4]
 800585a:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <cleanup_stdio+0x34>)
 800585c:	4299      	cmp	r1, r3
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	d001      	beq.n	8005868 <cleanup_stdio+0x10>
 8005864:	f001 fe1a 	bl	800749c <_fflush_r>
 8005868:	68a1      	ldr	r1, [r4, #8]
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <cleanup_stdio+0x38>)
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <cleanup_stdio+0x1e>
 8005870:	4620      	mov	r0, r4
 8005872:	f001 fe13 	bl	800749c <_fflush_r>
 8005876:	68e1      	ldr	r1, [r4, #12]
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <cleanup_stdio+0x3c>)
 800587a:	4299      	cmp	r1, r3
 800587c:	d004      	beq.n	8005888 <cleanup_stdio+0x30>
 800587e:	4620      	mov	r0, r4
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f001 be0a 	b.w	800749c <_fflush_r>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	20000364 	.word	0x20000364
 8005890:	200003cc 	.word	0x200003cc
 8005894:	20000434 	.word	0x20000434

08005898 <global_stdio_init.part.0>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <global_stdio_init.part.0+0x30>)
 800589c:	4c0b      	ldr	r4, [pc, #44]	@ (80058cc <global_stdio_init.part.0+0x34>)
 800589e:	4a0c      	ldr	r2, [pc, #48]	@ (80058d0 <global_stdio_init.part.0+0x38>)
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	4620      	mov	r0, r4
 80058a4:	2200      	movs	r2, #0
 80058a6:	2104      	movs	r1, #4
 80058a8:	f7ff ff94 	bl	80057d4 <std>
 80058ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058b0:	2201      	movs	r2, #1
 80058b2:	2109      	movs	r1, #9
 80058b4:	f7ff ff8e 	bl	80057d4 <std>
 80058b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058bc:	2202      	movs	r2, #2
 80058be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c2:	2112      	movs	r1, #18
 80058c4:	f7ff bf86 	b.w	80057d4 <std>
 80058c8:	2000049c 	.word	0x2000049c
 80058cc:	20000364 	.word	0x20000364
 80058d0:	08005841 	.word	0x08005841

080058d4 <__sfp_lock_acquire>:
 80058d4:	4801      	ldr	r0, [pc, #4]	@ (80058dc <__sfp_lock_acquire+0x8>)
 80058d6:	f000 b934 	b.w	8005b42 <__retarget_lock_acquire_recursive>
 80058da:	bf00      	nop
 80058dc:	200004a5 	.word	0x200004a5

080058e0 <__sfp_lock_release>:
 80058e0:	4801      	ldr	r0, [pc, #4]	@ (80058e8 <__sfp_lock_release+0x8>)
 80058e2:	f000 b92f 	b.w	8005b44 <__retarget_lock_release_recursive>
 80058e6:	bf00      	nop
 80058e8:	200004a5 	.word	0x200004a5

080058ec <__sinit>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4604      	mov	r4, r0
 80058f0:	f7ff fff0 	bl	80058d4 <__sfp_lock_acquire>
 80058f4:	6a23      	ldr	r3, [r4, #32]
 80058f6:	b11b      	cbz	r3, 8005900 <__sinit+0x14>
 80058f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fc:	f7ff bff0 	b.w	80058e0 <__sfp_lock_release>
 8005900:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <__sinit+0x28>)
 8005902:	6223      	str	r3, [r4, #32]
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <__sinit+0x2c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f5      	bne.n	80058f8 <__sinit+0xc>
 800590c:	f7ff ffc4 	bl	8005898 <global_stdio_init.part.0>
 8005910:	e7f2      	b.n	80058f8 <__sinit+0xc>
 8005912:	bf00      	nop
 8005914:	08005859 	.word	0x08005859
 8005918:	2000049c 	.word	0x2000049c

0800591c <_fwalk_sglue>:
 800591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005920:	4607      	mov	r7, r0
 8005922:	4688      	mov	r8, r1
 8005924:	4614      	mov	r4, r2
 8005926:	2600      	movs	r6, #0
 8005928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800592c:	f1b9 0901 	subs.w	r9, r9, #1
 8005930:	d505      	bpl.n	800593e <_fwalk_sglue+0x22>
 8005932:	6824      	ldr	r4, [r4, #0]
 8005934:	2c00      	cmp	r4, #0
 8005936:	d1f7      	bne.n	8005928 <_fwalk_sglue+0xc>
 8005938:	4630      	mov	r0, r6
 800593a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d907      	bls.n	8005954 <_fwalk_sglue+0x38>
 8005944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005948:	3301      	adds	r3, #1
 800594a:	d003      	beq.n	8005954 <_fwalk_sglue+0x38>
 800594c:	4629      	mov	r1, r5
 800594e:	4638      	mov	r0, r7
 8005950:	47c0      	blx	r8
 8005952:	4306      	orrs	r6, r0
 8005954:	3568      	adds	r5, #104	@ 0x68
 8005956:	e7e9      	b.n	800592c <_fwalk_sglue+0x10>

08005958 <sniprintf>:
 8005958:	b40c      	push	{r2, r3}
 800595a:	b530      	push	{r4, r5, lr}
 800595c:	4b17      	ldr	r3, [pc, #92]	@ (80059bc <sniprintf+0x64>)
 800595e:	1e0c      	subs	r4, r1, #0
 8005960:	681d      	ldr	r5, [r3, #0]
 8005962:	b09d      	sub	sp, #116	@ 0x74
 8005964:	da08      	bge.n	8005978 <sniprintf+0x20>
 8005966:	238b      	movs	r3, #139	@ 0x8b
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	f04f 30ff 	mov.w	r0, #4294967295
 800596e:	b01d      	add	sp, #116	@ 0x74
 8005970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005974:	b002      	add	sp, #8
 8005976:	4770      	bx	lr
 8005978:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800597c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005980:	bf14      	ite	ne
 8005982:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005986:	4623      	moveq	r3, r4
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	9307      	str	r3, [sp, #28]
 800598c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005990:	9002      	str	r0, [sp, #8]
 8005992:	9006      	str	r0, [sp, #24]
 8005994:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005998:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800599a:	ab21      	add	r3, sp, #132	@ 0x84
 800599c:	a902      	add	r1, sp, #8
 800599e:	4628      	mov	r0, r5
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	f001 fbfb 	bl	800719c <_svfiprintf_r>
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	bfbc      	itt	lt
 80059aa:	238b      	movlt	r3, #139	@ 0x8b
 80059ac:	602b      	strlt	r3, [r5, #0]
 80059ae:	2c00      	cmp	r4, #0
 80059b0:	d0dd      	beq.n	800596e <sniprintf+0x16>
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e7d9      	b.n	800596e <sniprintf+0x16>
 80059ba:	bf00      	nop
 80059bc:	2000001c 	.word	0x2000001c

080059c0 <__sread>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	460c      	mov	r4, r1
 80059c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c8:	f000 f86c 	bl	8005aa4 <_read_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	bfab      	itete	ge
 80059d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059d2:	89a3      	ldrhlt	r3, [r4, #12]
 80059d4:	181b      	addge	r3, r3, r0
 80059d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059da:	bfac      	ite	ge
 80059dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059de:	81a3      	strhlt	r3, [r4, #12]
 80059e0:	bd10      	pop	{r4, pc}

080059e2 <__swrite>:
 80059e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e6:	461f      	mov	r7, r3
 80059e8:	898b      	ldrh	r3, [r1, #12]
 80059ea:	05db      	lsls	r3, r3, #23
 80059ec:	4605      	mov	r5, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	4616      	mov	r6, r2
 80059f2:	d505      	bpl.n	8005a00 <__swrite+0x1e>
 80059f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f8:	2302      	movs	r3, #2
 80059fa:	2200      	movs	r2, #0
 80059fc:	f000 f840 	bl	8005a80 <_lseek_r>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	463b      	mov	r3, r7
 8005a10:	4628      	mov	r0, r5
 8005a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a16:	f000 b857 	b.w	8005ac8 <_write_r>

08005a1a <__sseek>:
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a22:	f000 f82d 	bl	8005a80 <_lseek_r>
 8005a26:	1c43      	adds	r3, r0, #1
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	bf15      	itete	ne
 8005a2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a36:	81a3      	strheq	r3, [r4, #12]
 8005a38:	bf18      	it	ne
 8005a3a:	81a3      	strhne	r3, [r4, #12]
 8005a3c:	bd10      	pop	{r4, pc}

08005a3e <__sclose>:
 8005a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a42:	f000 b80d 	b.w	8005a60 <_close_r>

08005a46 <memset>:
 8005a46:	4402      	add	r2, r0
 8005a48:	4603      	mov	r3, r0
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d100      	bne.n	8005a50 <memset+0xa>
 8005a4e:	4770      	bx	lr
 8005a50:	f803 1b01 	strb.w	r1, [r3], #1
 8005a54:	e7f9      	b.n	8005a4a <memset+0x4>
	...

08005a58 <_localeconv_r>:
 8005a58:	4800      	ldr	r0, [pc, #0]	@ (8005a5c <_localeconv_r+0x4>)
 8005a5a:	4770      	bx	lr
 8005a5c:	2000015c 	.word	0x2000015c

08005a60 <_close_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d06      	ldr	r5, [pc, #24]	@ (8005a7c <_close_r+0x1c>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	f7fb fd76 	bl	800155c <_close>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_close_r+0x1a>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_close_r+0x1a>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	200004a0 	.word	0x200004a0

08005a80 <_lseek_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	@ (8005aa0 <_lseek_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fb fd8b 	bl	80015aa <_lseek>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_lseek_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_lseek_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200004a0 	.word	0x200004a0

08005aa4 <_read_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	@ (8005ac4 <_read_r+0x20>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fb fd19 	bl	80014ea <_read>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_read_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_read_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200004a0 	.word	0x200004a0

08005ac8 <_write_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	@ (8005ae8 <_write_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fb fd24 	bl	8001524 <_write>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_write_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_write_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	200004a0 	.word	0x200004a0

08005aec <__errno>:
 8005aec:	4b01      	ldr	r3, [pc, #4]	@ (8005af4 <__errno+0x8>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000001c 	.word	0x2000001c

08005af8 <__libc_init_array>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	4d0d      	ldr	r5, [pc, #52]	@ (8005b30 <__libc_init_array+0x38>)
 8005afc:	4c0d      	ldr	r4, [pc, #52]	@ (8005b34 <__libc_init_array+0x3c>)
 8005afe:	1b64      	subs	r4, r4, r5
 8005b00:	10a4      	asrs	r4, r4, #2
 8005b02:	2600      	movs	r6, #0
 8005b04:	42a6      	cmp	r6, r4
 8005b06:	d109      	bne.n	8005b1c <__libc_init_array+0x24>
 8005b08:	4d0b      	ldr	r5, [pc, #44]	@ (8005b38 <__libc_init_array+0x40>)
 8005b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b3c <__libc_init_array+0x44>)
 8005b0c:	f002 f864 	bl	8007bd8 <_init>
 8005b10:	1b64      	subs	r4, r4, r5
 8005b12:	10a4      	asrs	r4, r4, #2
 8005b14:	2600      	movs	r6, #0
 8005b16:	42a6      	cmp	r6, r4
 8005b18:	d105      	bne.n	8005b26 <__libc_init_array+0x2e>
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b20:	4798      	blx	r3
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7ee      	b.n	8005b04 <__libc_init_array+0xc>
 8005b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2a:	4798      	blx	r3
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	e7f2      	b.n	8005b16 <__libc_init_array+0x1e>
 8005b30:	08007fa8 	.word	0x08007fa8
 8005b34:	08007fa8 	.word	0x08007fa8
 8005b38:	08007fa8 	.word	0x08007fa8
 8005b3c:	08007fac 	.word	0x08007fac

08005b40 <__retarget_lock_init_recursive>:
 8005b40:	4770      	bx	lr

08005b42 <__retarget_lock_acquire_recursive>:
 8005b42:	4770      	bx	lr

08005b44 <__retarget_lock_release_recursive>:
 8005b44:	4770      	bx	lr

08005b46 <quorem>:
 8005b46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	6903      	ldr	r3, [r0, #16]
 8005b4c:	690c      	ldr	r4, [r1, #16]
 8005b4e:	42a3      	cmp	r3, r4
 8005b50:	4607      	mov	r7, r0
 8005b52:	db7e      	blt.n	8005c52 <quorem+0x10c>
 8005b54:	3c01      	subs	r4, #1
 8005b56:	f101 0814 	add.w	r8, r1, #20
 8005b5a:	00a3      	lsls	r3, r4, #2
 8005b5c:	f100 0514 	add.w	r5, r0, #20
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b70:	3301      	adds	r3, #1
 8005b72:	429a      	cmp	r2, r3
 8005b74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b78:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b7c:	d32e      	bcc.n	8005bdc <quorem+0x96>
 8005b7e:	f04f 0a00 	mov.w	sl, #0
 8005b82:	46c4      	mov	ip, r8
 8005b84:	46ae      	mov	lr, r5
 8005b86:	46d3      	mov	fp, sl
 8005b88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b8c:	b298      	uxth	r0, r3
 8005b8e:	fb06 a000 	mla	r0, r6, r0, sl
 8005b92:	0c02      	lsrs	r2, r0, #16
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	fb06 2303 	mla	r3, r6, r3, r2
 8005b9a:	f8de 2000 	ldr.w	r2, [lr]
 8005b9e:	b280      	uxth	r0, r0
 8005ba0:	b292      	uxth	r2, r2
 8005ba2:	1a12      	subs	r2, r2, r0
 8005ba4:	445a      	add	r2, fp
 8005ba6:	f8de 0000 	ldr.w	r0, [lr]
 8005baa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005bb4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bb8:	b292      	uxth	r2, r2
 8005bba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bbe:	45e1      	cmp	r9, ip
 8005bc0:	f84e 2b04 	str.w	r2, [lr], #4
 8005bc4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bc8:	d2de      	bcs.n	8005b88 <quorem+0x42>
 8005bca:	9b00      	ldr	r3, [sp, #0]
 8005bcc:	58eb      	ldr	r3, [r5, r3]
 8005bce:	b92b      	cbnz	r3, 8005bdc <quorem+0x96>
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	429d      	cmp	r5, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	d32f      	bcc.n	8005c3a <quorem+0xf4>
 8005bda:	613c      	str	r4, [r7, #16]
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f001 f979 	bl	8006ed4 <__mcmp>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	db25      	blt.n	8005c32 <quorem+0xec>
 8005be6:	4629      	mov	r1, r5
 8005be8:	2000      	movs	r0, #0
 8005bea:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bee:	f8d1 c000 	ldr.w	ip, [r1]
 8005bf2:	fa1f fe82 	uxth.w	lr, r2
 8005bf6:	fa1f f38c 	uxth.w	r3, ip
 8005bfa:	eba3 030e 	sub.w	r3, r3, lr
 8005bfe:	4403      	add	r3, r0
 8005c00:	0c12      	lsrs	r2, r2, #16
 8005c02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c10:	45c1      	cmp	r9, r8
 8005c12:	f841 3b04 	str.w	r3, [r1], #4
 8005c16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c1a:	d2e6      	bcs.n	8005bea <quorem+0xa4>
 8005c1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c24:	b922      	cbnz	r2, 8005c30 <quorem+0xea>
 8005c26:	3b04      	subs	r3, #4
 8005c28:	429d      	cmp	r5, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	d30b      	bcc.n	8005c46 <quorem+0x100>
 8005c2e:	613c      	str	r4, [r7, #16]
 8005c30:	3601      	adds	r6, #1
 8005c32:	4630      	mov	r0, r6
 8005c34:	b003      	add	sp, #12
 8005c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	d1cb      	bne.n	8005bda <quorem+0x94>
 8005c42:	3c01      	subs	r4, #1
 8005c44:	e7c6      	b.n	8005bd4 <quorem+0x8e>
 8005c46:	6812      	ldr	r2, [r2, #0]
 8005c48:	3b04      	subs	r3, #4
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	d1ef      	bne.n	8005c2e <quorem+0xe8>
 8005c4e:	3c01      	subs	r4, #1
 8005c50:	e7ea      	b.n	8005c28 <quorem+0xe2>
 8005c52:	2000      	movs	r0, #0
 8005c54:	e7ee      	b.n	8005c34 <quorem+0xee>
	...

08005c58 <_dtoa_r>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	69c7      	ldr	r7, [r0, #28]
 8005c5e:	b099      	sub	sp, #100	@ 0x64
 8005c60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c64:	ec55 4b10 	vmov	r4, r5, d0
 8005c68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c6c:	4683      	mov	fp, r0
 8005c6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c72:	b97f      	cbnz	r7, 8005c94 <_dtoa_r+0x3c>
 8005c74:	2010      	movs	r0, #16
 8005c76:	f000 fdfd 	bl	8006874 <malloc>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c80:	b920      	cbnz	r0, 8005c8c <_dtoa_r+0x34>
 8005c82:	4ba7      	ldr	r3, [pc, #668]	@ (8005f20 <_dtoa_r+0x2c8>)
 8005c84:	21ef      	movs	r1, #239	@ 0xef
 8005c86:	48a7      	ldr	r0, [pc, #668]	@ (8005f24 <_dtoa_r+0x2cc>)
 8005c88:	f001 fc68 	bl	800755c <__assert_func>
 8005c8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c90:	6007      	str	r7, [r0, #0]
 8005c92:	60c7      	str	r7, [r0, #12]
 8005c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c98:	6819      	ldr	r1, [r3, #0]
 8005c9a:	b159      	cbz	r1, 8005cb4 <_dtoa_r+0x5c>
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	604a      	str	r2, [r1, #4]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4093      	lsls	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
 8005ca6:	4658      	mov	r0, fp
 8005ca8:	f000 feda 	bl	8006a60 <_Bfree>
 8005cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	1e2b      	subs	r3, r5, #0
 8005cb6:	bfb9      	ittee	lt
 8005cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005cbc:	9303      	strlt	r3, [sp, #12]
 8005cbe:	2300      	movge	r3, #0
 8005cc0:	6033      	strge	r3, [r6, #0]
 8005cc2:	9f03      	ldr	r7, [sp, #12]
 8005cc4:	4b98      	ldr	r3, [pc, #608]	@ (8005f28 <_dtoa_r+0x2d0>)
 8005cc6:	bfbc      	itt	lt
 8005cc8:	2201      	movlt	r2, #1
 8005cca:	6032      	strlt	r2, [r6, #0]
 8005ccc:	43bb      	bics	r3, r7
 8005cce:	d112      	bne.n	8005cf6 <_dtoa_r+0x9e>
 8005cd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005cd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cdc:	4323      	orrs	r3, r4
 8005cde:	f000 854d 	beq.w	800677c <_dtoa_r+0xb24>
 8005ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ce4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f3c <_dtoa_r+0x2e4>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 854f 	beq.w	800678c <_dtoa_r+0xb34>
 8005cee:	f10a 0303 	add.w	r3, sl, #3
 8005cf2:	f000 bd49 	b.w	8006788 <_dtoa_r+0xb30>
 8005cf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	ec51 0b17 	vmov	r0, r1, d7
 8005d00:	2300      	movs	r3, #0
 8005d02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005d06:	f7fa fee7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d0a:	4680      	mov	r8, r0
 8005d0c:	b158      	cbz	r0, 8005d26 <_dtoa_r+0xce>
 8005d0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d10:	2301      	movs	r3, #1
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d16:	b113      	cbz	r3, 8005d1e <_dtoa_r+0xc6>
 8005d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005d1a:	4b84      	ldr	r3, [pc, #528]	@ (8005f2c <_dtoa_r+0x2d4>)
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f40 <_dtoa_r+0x2e8>
 8005d22:	f000 bd33 	b.w	800678c <_dtoa_r+0xb34>
 8005d26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d2a:	aa16      	add	r2, sp, #88	@ 0x58
 8005d2c:	a917      	add	r1, sp, #92	@ 0x5c
 8005d2e:	4658      	mov	r0, fp
 8005d30:	f001 f980 	bl	8007034 <__d2b>
 8005d34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d38:	4681      	mov	r9, r0
 8005d3a:	2e00      	cmp	r6, #0
 8005d3c:	d077      	beq.n	8005e2e <_dtoa_r+0x1d6>
 8005d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4b74      	ldr	r3, [pc, #464]	@ (8005f30 <_dtoa_r+0x2d8>)
 8005d5e:	f7fa fa9b 	bl	8000298 <__aeabi_dsub>
 8005d62:	a369      	add	r3, pc, #420	@ (adr r3, 8005f08 <_dtoa_r+0x2b0>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f7fa fc4e 	bl	8000608 <__aeabi_dmul>
 8005d6c:	a368      	add	r3, pc, #416	@ (adr r3, 8005f10 <_dtoa_r+0x2b8>)
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f7fa fa93 	bl	800029c <__adddf3>
 8005d76:	4604      	mov	r4, r0
 8005d78:	4630      	mov	r0, r6
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	f7fa fbda 	bl	8000534 <__aeabi_i2d>
 8005d80:	a365      	add	r3, pc, #404	@ (adr r3, 8005f18 <_dtoa_r+0x2c0>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fc3f 	bl	8000608 <__aeabi_dmul>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4620      	mov	r0, r4
 8005d90:	4629      	mov	r1, r5
 8005d92:	f7fa fa83 	bl	800029c <__adddf3>
 8005d96:	4604      	mov	r4, r0
 8005d98:	460d      	mov	r5, r1
 8005d9a:	f7fa fee5 	bl	8000b68 <__aeabi_d2iz>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4607      	mov	r7, r0
 8005da2:	2300      	movs	r3, #0
 8005da4:	4620      	mov	r0, r4
 8005da6:	4629      	mov	r1, r5
 8005da8:	f7fa fea0 	bl	8000aec <__aeabi_dcmplt>
 8005dac:	b140      	cbz	r0, 8005dc0 <_dtoa_r+0x168>
 8005dae:	4638      	mov	r0, r7
 8005db0:	f7fa fbc0 	bl	8000534 <__aeabi_i2d>
 8005db4:	4622      	mov	r2, r4
 8005db6:	462b      	mov	r3, r5
 8005db8:	f7fa fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dbc:	b900      	cbnz	r0, 8005dc0 <_dtoa_r+0x168>
 8005dbe:	3f01      	subs	r7, #1
 8005dc0:	2f16      	cmp	r7, #22
 8005dc2:	d851      	bhi.n	8005e68 <_dtoa_r+0x210>
 8005dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8005f34 <_dtoa_r+0x2dc>)
 8005dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dd2:	f7fa fe8b 	bl	8000aec <__aeabi_dcmplt>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d048      	beq.n	8005e6c <_dtoa_r+0x214>
 8005dda:	3f01      	subs	r7, #1
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9312      	str	r3, [sp, #72]	@ 0x48
 8005de0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005de2:	1b9b      	subs	r3, r3, r6
 8005de4:	1e5a      	subs	r2, r3, #1
 8005de6:	bf44      	itt	mi
 8005de8:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dec:	2300      	movmi	r3, #0
 8005dee:	9208      	str	r2, [sp, #32]
 8005df0:	bf54      	ite	pl
 8005df2:	f04f 0800 	movpl.w	r8, #0
 8005df6:	9308      	strmi	r3, [sp, #32]
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	db39      	blt.n	8005e70 <_dtoa_r+0x218>
 8005dfc:	9b08      	ldr	r3, [sp, #32]
 8005dfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005e00:	443b      	add	r3, r7
 8005e02:	9308      	str	r3, [sp, #32]
 8005e04:	2300      	movs	r3, #0
 8005e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	2b09      	cmp	r3, #9
 8005e0c:	d864      	bhi.n	8005ed8 <_dtoa_r+0x280>
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	bfc4      	itt	gt
 8005e12:	3b04      	subgt	r3, #4
 8005e14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e18:	f1a3 0302 	sub.w	r3, r3, #2
 8005e1c:	bfcc      	ite	gt
 8005e1e:	2400      	movgt	r4, #0
 8005e20:	2401      	movle	r4, #1
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d863      	bhi.n	8005eee <_dtoa_r+0x296>
 8005e26:	e8df f003 	tbb	[pc, r3]
 8005e2a:	372a      	.short	0x372a
 8005e2c:	5535      	.short	0x5535
 8005e2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e32:	441e      	add	r6, r3
 8005e34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	bfc1      	itttt	gt
 8005e3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e40:	409f      	lslgt	r7, r3
 8005e42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e4a:	bfd6      	itet	le
 8005e4c:	f1c3 0320 	rsble	r3, r3, #32
 8005e50:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e54:	fa04 f003 	lslle.w	r0, r4, r3
 8005e58:	f7fa fb5c 	bl	8000514 <__aeabi_ui2d>
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e62:	3e01      	subs	r6, #1
 8005e64:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e66:	e777      	b.n	8005d58 <_dtoa_r+0x100>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e7b8      	b.n	8005dde <_dtoa_r+0x186>
 8005e6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e6e:	e7b7      	b.n	8005de0 <_dtoa_r+0x188>
 8005e70:	427b      	negs	r3, r7
 8005e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e74:	2300      	movs	r3, #0
 8005e76:	eba8 0807 	sub.w	r8, r8, r7
 8005e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e7c:	e7c4      	b.n	8005e08 <_dtoa_r+0x1b0>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	dc35      	bgt.n	8005ef4 <_dtoa_r+0x29c>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	9307      	str	r3, [sp, #28]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e92:	e00b      	b.n	8005eac <_dtoa_r+0x254>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e7f3      	b.n	8005e80 <_dtoa_r+0x228>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	bfb8      	it	lt
 8005eaa:	2301      	movlt	r3, #1
 8005eac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	f102 0514 	add.w	r5, r2, #20
 8005eb8:	429d      	cmp	r5, r3
 8005eba:	d91f      	bls.n	8005efc <_dtoa_r+0x2a4>
 8005ebc:	6041      	str	r1, [r0, #4]
 8005ebe:	4658      	mov	r0, fp
 8005ec0:	f000 fd8e 	bl	80069e0 <_Balloc>
 8005ec4:	4682      	mov	sl, r0
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d13c      	bne.n	8005f44 <_dtoa_r+0x2ec>
 8005eca:	4b1b      	ldr	r3, [pc, #108]	@ (8005f38 <_dtoa_r+0x2e0>)
 8005ecc:	4602      	mov	r2, r0
 8005ece:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ed2:	e6d8      	b.n	8005c86 <_dtoa_r+0x2e>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e7e0      	b.n	8005e9a <_dtoa_r+0x242>
 8005ed8:	2401      	movs	r4, #1
 8005eda:	2300      	movs	r3, #0
 8005edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ede:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	9307      	str	r3, [sp, #28]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2312      	movs	r3, #18
 8005eec:	e7d0      	b.n	8005e90 <_dtoa_r+0x238>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ef2:	e7f5      	b.n	8005ee0 <_dtoa_r+0x288>
 8005ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	9307      	str	r3, [sp, #28]
 8005efa:	e7d7      	b.n	8005eac <_dtoa_r+0x254>
 8005efc:	3101      	adds	r1, #1
 8005efe:	0052      	lsls	r2, r2, #1
 8005f00:	e7d8      	b.n	8005eb4 <_dtoa_r+0x25c>
 8005f02:	bf00      	nop
 8005f04:	f3af 8000 	nop.w
 8005f08:	636f4361 	.word	0x636f4361
 8005f0c:	3fd287a7 	.word	0x3fd287a7
 8005f10:	8b60c8b3 	.word	0x8b60c8b3
 8005f14:	3fc68a28 	.word	0x3fc68a28
 8005f18:	509f79fb 	.word	0x509f79fb
 8005f1c:	3fd34413 	.word	0x3fd34413
 8005f20:	08007c6d 	.word	0x08007c6d
 8005f24:	08007c84 	.word	0x08007c84
 8005f28:	7ff00000 	.word	0x7ff00000
 8005f2c:	08007c3d 	.word	0x08007c3d
 8005f30:	3ff80000 	.word	0x3ff80000
 8005f34:	08007d80 	.word	0x08007d80
 8005f38:	08007cdc 	.word	0x08007cdc
 8005f3c:	08007c69 	.word	0x08007c69
 8005f40:	08007c3c 	.word	0x08007c3c
 8005f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f48:	6018      	str	r0, [r3, #0]
 8005f4a:	9b07      	ldr	r3, [sp, #28]
 8005f4c:	2b0e      	cmp	r3, #14
 8005f4e:	f200 80a4 	bhi.w	800609a <_dtoa_r+0x442>
 8005f52:	2c00      	cmp	r4, #0
 8005f54:	f000 80a1 	beq.w	800609a <_dtoa_r+0x442>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	dd33      	ble.n	8005fc4 <_dtoa_r+0x36c>
 8005f5c:	4bad      	ldr	r3, [pc, #692]	@ (8006214 <_dtoa_r+0x5bc>)
 8005f5e:	f007 020f 	and.w	r2, r7, #15
 8005f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f66:	ed93 7b00 	vldr	d7, [r3]
 8005f6a:	05f8      	lsls	r0, r7, #23
 8005f6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f74:	d516      	bpl.n	8005fa4 <_dtoa_r+0x34c>
 8005f76:	4ba8      	ldr	r3, [pc, #672]	@ (8006218 <_dtoa_r+0x5c0>)
 8005f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f80:	f7fa fc6c 	bl	800085c <__aeabi_ddiv>
 8005f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f88:	f004 040f 	and.w	r4, r4, #15
 8005f8c:	2603      	movs	r6, #3
 8005f8e:	4da2      	ldr	r5, [pc, #648]	@ (8006218 <_dtoa_r+0x5c0>)
 8005f90:	b954      	cbnz	r4, 8005fa8 <_dtoa_r+0x350>
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f9a:	f7fa fc5f 	bl	800085c <__aeabi_ddiv>
 8005f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa2:	e028      	b.n	8005ff6 <_dtoa_r+0x39e>
 8005fa4:	2602      	movs	r6, #2
 8005fa6:	e7f2      	b.n	8005f8e <_dtoa_r+0x336>
 8005fa8:	07e1      	lsls	r1, r4, #31
 8005faa:	d508      	bpl.n	8005fbe <_dtoa_r+0x366>
 8005fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fb4:	f7fa fb28 	bl	8000608 <__aeabi_dmul>
 8005fb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	1064      	asrs	r4, r4, #1
 8005fc0:	3508      	adds	r5, #8
 8005fc2:	e7e5      	b.n	8005f90 <_dtoa_r+0x338>
 8005fc4:	f000 80d2 	beq.w	800616c <_dtoa_r+0x514>
 8005fc8:	427c      	negs	r4, r7
 8005fca:	4b92      	ldr	r3, [pc, #584]	@ (8006214 <_dtoa_r+0x5bc>)
 8005fcc:	4d92      	ldr	r5, [pc, #584]	@ (8006218 <_dtoa_r+0x5c0>)
 8005fce:	f004 020f 	and.w	r2, r4, #15
 8005fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fde:	f7fa fb13 	bl	8000608 <__aeabi_dmul>
 8005fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe6:	1124      	asrs	r4, r4, #4
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2602      	movs	r6, #2
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	f040 80b2 	bne.w	8006156 <_dtoa_r+0x4fe>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1d3      	bne.n	8005f9e <_dtoa_r+0x346>
 8005ff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ff8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80b7 	beq.w	8006170 <_dtoa_r+0x518>
 8006002:	4b86      	ldr	r3, [pc, #536]	@ (800621c <_dtoa_r+0x5c4>)
 8006004:	2200      	movs	r2, #0
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa fd6f 	bl	8000aec <__aeabi_dcmplt>
 800600e:	2800      	cmp	r0, #0
 8006010:	f000 80ae 	beq.w	8006170 <_dtoa_r+0x518>
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80aa 	beq.w	8006170 <_dtoa_r+0x518>
 800601c:	9b00      	ldr	r3, [sp, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	dd37      	ble.n	8006092 <_dtoa_r+0x43a>
 8006022:	1e7b      	subs	r3, r7, #1
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	4620      	mov	r0, r4
 8006028:	4b7d      	ldr	r3, [pc, #500]	@ (8006220 <_dtoa_r+0x5c8>)
 800602a:	2200      	movs	r2, #0
 800602c:	4629      	mov	r1, r5
 800602e:	f7fa faeb 	bl	8000608 <__aeabi_dmul>
 8006032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006036:	9c00      	ldr	r4, [sp, #0]
 8006038:	3601      	adds	r6, #1
 800603a:	4630      	mov	r0, r6
 800603c:	f7fa fa7a 	bl	8000534 <__aeabi_i2d>
 8006040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006044:	f7fa fae0 	bl	8000608 <__aeabi_dmul>
 8006048:	4b76      	ldr	r3, [pc, #472]	@ (8006224 <_dtoa_r+0x5cc>)
 800604a:	2200      	movs	r2, #0
 800604c:	f7fa f926 	bl	800029c <__adddf3>
 8006050:	4605      	mov	r5, r0
 8006052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006056:	2c00      	cmp	r4, #0
 8006058:	f040 808d 	bne.w	8006176 <_dtoa_r+0x51e>
 800605c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006060:	4b71      	ldr	r3, [pc, #452]	@ (8006228 <_dtoa_r+0x5d0>)
 8006062:	2200      	movs	r2, #0
 8006064:	f7fa f918 	bl	8000298 <__aeabi_dsub>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006070:	462a      	mov	r2, r5
 8006072:	4633      	mov	r3, r6
 8006074:	f7fa fd58 	bl	8000b28 <__aeabi_dcmpgt>
 8006078:	2800      	cmp	r0, #0
 800607a:	f040 828b 	bne.w	8006594 <_dtoa_r+0x93c>
 800607e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006082:	462a      	mov	r2, r5
 8006084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006088:	f7fa fd30 	bl	8000aec <__aeabi_dcmplt>
 800608c:	2800      	cmp	r0, #0
 800608e:	f040 8128 	bne.w	80062e2 <_dtoa_r+0x68a>
 8006092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800609a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800609c:	2b00      	cmp	r3, #0
 800609e:	f2c0 815a 	blt.w	8006356 <_dtoa_r+0x6fe>
 80060a2:	2f0e      	cmp	r7, #14
 80060a4:	f300 8157 	bgt.w	8006356 <_dtoa_r+0x6fe>
 80060a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006214 <_dtoa_r+0x5bc>)
 80060aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060ae:	ed93 7b00 	vldr	d7, [r3]
 80060b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	ed8d 7b00 	vstr	d7, [sp]
 80060ba:	da03      	bge.n	80060c4 <_dtoa_r+0x46c>
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f340 8101 	ble.w	80062c6 <_dtoa_r+0x66e>
 80060c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060c8:	4656      	mov	r6, sl
 80060ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ce:	4620      	mov	r0, r4
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7fa fbc3 	bl	800085c <__aeabi_ddiv>
 80060d6:	f7fa fd47 	bl	8000b68 <__aeabi_d2iz>
 80060da:	4680      	mov	r8, r0
 80060dc:	f7fa fa2a 	bl	8000534 <__aeabi_i2d>
 80060e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060e4:	f7fa fa90 	bl	8000608 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060f4:	f7fa f8d0 	bl	8000298 <__aeabi_dsub>
 80060f8:	f806 4b01 	strb.w	r4, [r6], #1
 80060fc:	9d07      	ldr	r5, [sp, #28]
 80060fe:	eba6 040a 	sub.w	r4, r6, sl
 8006102:	42a5      	cmp	r5, r4
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	f040 8117 	bne.w	800633a <_dtoa_r+0x6e2>
 800610c:	f7fa f8c6 	bl	800029c <__adddf3>
 8006110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006114:	4604      	mov	r4, r0
 8006116:	460d      	mov	r5, r1
 8006118:	f7fa fd06 	bl	8000b28 <__aeabi_dcmpgt>
 800611c:	2800      	cmp	r0, #0
 800611e:	f040 80f9 	bne.w	8006314 <_dtoa_r+0x6bc>
 8006122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa fcd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800612e:	b118      	cbz	r0, 8006138 <_dtoa_r+0x4e0>
 8006130:	f018 0f01 	tst.w	r8, #1
 8006134:	f040 80ee 	bne.w	8006314 <_dtoa_r+0x6bc>
 8006138:	4649      	mov	r1, r9
 800613a:	4658      	mov	r0, fp
 800613c:	f000 fc90 	bl	8006a60 <_Bfree>
 8006140:	2300      	movs	r3, #0
 8006142:	7033      	strb	r3, [r6, #0]
 8006144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006146:	3701      	adds	r7, #1
 8006148:	601f      	str	r7, [r3, #0]
 800614a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 831d 	beq.w	800678c <_dtoa_r+0xb34>
 8006152:	601e      	str	r6, [r3, #0]
 8006154:	e31a      	b.n	800678c <_dtoa_r+0xb34>
 8006156:	07e2      	lsls	r2, r4, #31
 8006158:	d505      	bpl.n	8006166 <_dtoa_r+0x50e>
 800615a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800615e:	f7fa fa53 	bl	8000608 <__aeabi_dmul>
 8006162:	3601      	adds	r6, #1
 8006164:	2301      	movs	r3, #1
 8006166:	1064      	asrs	r4, r4, #1
 8006168:	3508      	adds	r5, #8
 800616a:	e73f      	b.n	8005fec <_dtoa_r+0x394>
 800616c:	2602      	movs	r6, #2
 800616e:	e742      	b.n	8005ff6 <_dtoa_r+0x39e>
 8006170:	9c07      	ldr	r4, [sp, #28]
 8006172:	9704      	str	r7, [sp, #16]
 8006174:	e761      	b.n	800603a <_dtoa_r+0x3e2>
 8006176:	4b27      	ldr	r3, [pc, #156]	@ (8006214 <_dtoa_r+0x5bc>)
 8006178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800617a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800617e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006182:	4454      	add	r4, sl
 8006184:	2900      	cmp	r1, #0
 8006186:	d053      	beq.n	8006230 <_dtoa_r+0x5d8>
 8006188:	4928      	ldr	r1, [pc, #160]	@ (800622c <_dtoa_r+0x5d4>)
 800618a:	2000      	movs	r0, #0
 800618c:	f7fa fb66 	bl	800085c <__aeabi_ddiv>
 8006190:	4633      	mov	r3, r6
 8006192:	462a      	mov	r2, r5
 8006194:	f7fa f880 	bl	8000298 <__aeabi_dsub>
 8006198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800619c:	4656      	mov	r6, sl
 800619e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a2:	f7fa fce1 	bl	8000b68 <__aeabi_d2iz>
 80061a6:	4605      	mov	r5, r0
 80061a8:	f7fa f9c4 	bl	8000534 <__aeabi_i2d>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b4:	f7fa f870 	bl	8000298 <__aeabi_dsub>
 80061b8:	3530      	adds	r5, #48	@ 0x30
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061c2:	f806 5b01 	strb.w	r5, [r6], #1
 80061c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061ca:	f7fa fc8f 	bl	8000aec <__aeabi_dcmplt>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d171      	bne.n	80062b6 <_dtoa_r+0x65e>
 80061d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d6:	4911      	ldr	r1, [pc, #68]	@ (800621c <_dtoa_r+0x5c4>)
 80061d8:	2000      	movs	r0, #0
 80061da:	f7fa f85d 	bl	8000298 <__aeabi_dsub>
 80061de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061e2:	f7fa fc83 	bl	8000aec <__aeabi_dcmplt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f040 8095 	bne.w	8006316 <_dtoa_r+0x6be>
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	f43f af50 	beq.w	8006092 <_dtoa_r+0x43a>
 80061f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <_dtoa_r+0x5c8>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	f7fa fa05 	bl	8000608 <__aeabi_dmul>
 80061fe:	4b08      	ldr	r3, [pc, #32]	@ (8006220 <_dtoa_r+0x5c8>)
 8006200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006204:	2200      	movs	r2, #0
 8006206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800620a:	f7fa f9fd 	bl	8000608 <__aeabi_dmul>
 800620e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006212:	e7c4      	b.n	800619e <_dtoa_r+0x546>
 8006214:	08007d80 	.word	0x08007d80
 8006218:	08007d58 	.word	0x08007d58
 800621c:	3ff00000 	.word	0x3ff00000
 8006220:	40240000 	.word	0x40240000
 8006224:	401c0000 	.word	0x401c0000
 8006228:	40140000 	.word	0x40140000
 800622c:	3fe00000 	.word	0x3fe00000
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	f7fa f9e8 	bl	8000608 <__aeabi_dmul>
 8006238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800623c:	9415      	str	r4, [sp, #84]	@ 0x54
 800623e:	4656      	mov	r6, sl
 8006240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006244:	f7fa fc90 	bl	8000b68 <__aeabi_d2iz>
 8006248:	4605      	mov	r5, r0
 800624a:	f7fa f973 	bl	8000534 <__aeabi_i2d>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006256:	f7fa f81f 	bl	8000298 <__aeabi_dsub>
 800625a:	3530      	adds	r5, #48	@ 0x30
 800625c:	f806 5b01 	strb.w	r5, [r6], #1
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	42a6      	cmp	r6, r4
 8006266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	d124      	bne.n	80062ba <_dtoa_r+0x662>
 8006270:	4bac      	ldr	r3, [pc, #688]	@ (8006524 <_dtoa_r+0x8cc>)
 8006272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006276:	f7fa f811 	bl	800029c <__adddf3>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006282:	f7fa fc51 	bl	8000b28 <__aeabi_dcmpgt>
 8006286:	2800      	cmp	r0, #0
 8006288:	d145      	bne.n	8006316 <_dtoa_r+0x6be>
 800628a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800628e:	49a5      	ldr	r1, [pc, #660]	@ (8006524 <_dtoa_r+0x8cc>)
 8006290:	2000      	movs	r0, #0
 8006292:	f7fa f801 	bl	8000298 <__aeabi_dsub>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629e:	f7fa fc25 	bl	8000aec <__aeabi_dcmplt>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f43f aef5 	beq.w	8006092 <_dtoa_r+0x43a>
 80062a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80062aa:	1e73      	subs	r3, r6, #1
 80062ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80062ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80062b2:	2b30      	cmp	r3, #48	@ 0x30
 80062b4:	d0f8      	beq.n	80062a8 <_dtoa_r+0x650>
 80062b6:	9f04      	ldr	r7, [sp, #16]
 80062b8:	e73e      	b.n	8006138 <_dtoa_r+0x4e0>
 80062ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006528 <_dtoa_r+0x8d0>)
 80062bc:	f7fa f9a4 	bl	8000608 <__aeabi_dmul>
 80062c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c4:	e7bc      	b.n	8006240 <_dtoa_r+0x5e8>
 80062c6:	d10c      	bne.n	80062e2 <_dtoa_r+0x68a>
 80062c8:	4b98      	ldr	r3, [pc, #608]	@ (800652c <_dtoa_r+0x8d4>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062d0:	f7fa f99a 	bl	8000608 <__aeabi_dmul>
 80062d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062d8:	f7fa fc1c 	bl	8000b14 <__aeabi_dcmpge>
 80062dc:	2800      	cmp	r0, #0
 80062de:	f000 8157 	beq.w	8006590 <_dtoa_r+0x938>
 80062e2:	2400      	movs	r4, #0
 80062e4:	4625      	mov	r5, r4
 80062e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062e8:	43db      	mvns	r3, r3
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	4656      	mov	r6, sl
 80062ee:	2700      	movs	r7, #0
 80062f0:	4621      	mov	r1, r4
 80062f2:	4658      	mov	r0, fp
 80062f4:	f000 fbb4 	bl	8006a60 <_Bfree>
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	d0dc      	beq.n	80062b6 <_dtoa_r+0x65e>
 80062fc:	b12f      	cbz	r7, 800630a <_dtoa_r+0x6b2>
 80062fe:	42af      	cmp	r7, r5
 8006300:	d003      	beq.n	800630a <_dtoa_r+0x6b2>
 8006302:	4639      	mov	r1, r7
 8006304:	4658      	mov	r0, fp
 8006306:	f000 fbab 	bl	8006a60 <_Bfree>
 800630a:	4629      	mov	r1, r5
 800630c:	4658      	mov	r0, fp
 800630e:	f000 fba7 	bl	8006a60 <_Bfree>
 8006312:	e7d0      	b.n	80062b6 <_dtoa_r+0x65e>
 8006314:	9704      	str	r7, [sp, #16]
 8006316:	4633      	mov	r3, r6
 8006318:	461e      	mov	r6, r3
 800631a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800631e:	2a39      	cmp	r2, #57	@ 0x39
 8006320:	d107      	bne.n	8006332 <_dtoa_r+0x6da>
 8006322:	459a      	cmp	sl, r3
 8006324:	d1f8      	bne.n	8006318 <_dtoa_r+0x6c0>
 8006326:	9a04      	ldr	r2, [sp, #16]
 8006328:	3201      	adds	r2, #1
 800632a:	9204      	str	r2, [sp, #16]
 800632c:	2230      	movs	r2, #48	@ 0x30
 800632e:	f88a 2000 	strb.w	r2, [sl]
 8006332:	781a      	ldrb	r2, [r3, #0]
 8006334:	3201      	adds	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e7bd      	b.n	80062b6 <_dtoa_r+0x65e>
 800633a:	4b7b      	ldr	r3, [pc, #492]	@ (8006528 <_dtoa_r+0x8d0>)
 800633c:	2200      	movs	r2, #0
 800633e:	f7fa f963 	bl	8000608 <__aeabi_dmul>
 8006342:	2200      	movs	r2, #0
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	460d      	mov	r5, r1
 800634a:	f7fa fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f aebb 	beq.w	80060ca <_dtoa_r+0x472>
 8006354:	e6f0      	b.n	8006138 <_dtoa_r+0x4e0>
 8006356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006358:	2a00      	cmp	r2, #0
 800635a:	f000 80db 	beq.w	8006514 <_dtoa_r+0x8bc>
 800635e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006360:	2a01      	cmp	r2, #1
 8006362:	f300 80bf 	bgt.w	80064e4 <_dtoa_r+0x88c>
 8006366:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006368:	2a00      	cmp	r2, #0
 800636a:	f000 80b7 	beq.w	80064dc <_dtoa_r+0x884>
 800636e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006372:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006374:	4646      	mov	r6, r8
 8006376:	9a08      	ldr	r2, [sp, #32]
 8006378:	2101      	movs	r1, #1
 800637a:	441a      	add	r2, r3
 800637c:	4658      	mov	r0, fp
 800637e:	4498      	add	r8, r3
 8006380:	9208      	str	r2, [sp, #32]
 8006382:	f000 fc21 	bl	8006bc8 <__i2b>
 8006386:	4605      	mov	r5, r0
 8006388:	b15e      	cbz	r6, 80063a2 <_dtoa_r+0x74a>
 800638a:	9b08      	ldr	r3, [sp, #32]
 800638c:	2b00      	cmp	r3, #0
 800638e:	dd08      	ble.n	80063a2 <_dtoa_r+0x74a>
 8006390:	42b3      	cmp	r3, r6
 8006392:	9a08      	ldr	r2, [sp, #32]
 8006394:	bfa8      	it	ge
 8006396:	4633      	movge	r3, r6
 8006398:	eba8 0803 	sub.w	r8, r8, r3
 800639c:	1af6      	subs	r6, r6, r3
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	9308      	str	r3, [sp, #32]
 80063a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a4:	b1f3      	cbz	r3, 80063e4 <_dtoa_r+0x78c>
 80063a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80b7 	beq.w	800651c <_dtoa_r+0x8c4>
 80063ae:	b18c      	cbz	r4, 80063d4 <_dtoa_r+0x77c>
 80063b0:	4629      	mov	r1, r5
 80063b2:	4622      	mov	r2, r4
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 fcc7 	bl	8006d48 <__pow5mult>
 80063ba:	464a      	mov	r2, r9
 80063bc:	4601      	mov	r1, r0
 80063be:	4605      	mov	r5, r0
 80063c0:	4658      	mov	r0, fp
 80063c2:	f000 fc17 	bl	8006bf4 <__multiply>
 80063c6:	4649      	mov	r1, r9
 80063c8:	9004      	str	r0, [sp, #16]
 80063ca:	4658      	mov	r0, fp
 80063cc:	f000 fb48 	bl	8006a60 <_Bfree>
 80063d0:	9b04      	ldr	r3, [sp, #16]
 80063d2:	4699      	mov	r9, r3
 80063d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063d6:	1b1a      	subs	r2, r3, r4
 80063d8:	d004      	beq.n	80063e4 <_dtoa_r+0x78c>
 80063da:	4649      	mov	r1, r9
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fcb3 	bl	8006d48 <__pow5mult>
 80063e2:	4681      	mov	r9, r0
 80063e4:	2101      	movs	r1, #1
 80063e6:	4658      	mov	r0, fp
 80063e8:	f000 fbee 	bl	8006bc8 <__i2b>
 80063ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063ee:	4604      	mov	r4, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 81cf 	beq.w	8006794 <_dtoa_r+0xb3c>
 80063f6:	461a      	mov	r2, r3
 80063f8:	4601      	mov	r1, r0
 80063fa:	4658      	mov	r0, fp
 80063fc:	f000 fca4 	bl	8006d48 <__pow5mult>
 8006400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006402:	2b01      	cmp	r3, #1
 8006404:	4604      	mov	r4, r0
 8006406:	f300 8095 	bgt.w	8006534 <_dtoa_r+0x8dc>
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 8087 	bne.w	8006520 <_dtoa_r+0x8c8>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 8089 	bne.w	8006530 <_dtoa_r+0x8d8>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006424:	0d1b      	lsrs	r3, r3, #20
 8006426:	051b      	lsls	r3, r3, #20
 8006428:	b12b      	cbz	r3, 8006436 <_dtoa_r+0x7de>
 800642a:	9b08      	ldr	r3, [sp, #32]
 800642c:	3301      	adds	r3, #1
 800642e:	9308      	str	r3, [sp, #32]
 8006430:	f108 0801 	add.w	r8, r8, #1
 8006434:	2301      	movs	r3, #1
 8006436:	930a      	str	r3, [sp, #40]	@ 0x28
 8006438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 81b0 	beq.w	80067a0 <_dtoa_r+0xb48>
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006446:	6918      	ldr	r0, [r3, #16]
 8006448:	f000 fb72 	bl	8006b30 <__hi0bits>
 800644c:	f1c0 0020 	rsb	r0, r0, #32
 8006450:	9b08      	ldr	r3, [sp, #32]
 8006452:	4418      	add	r0, r3
 8006454:	f010 001f 	ands.w	r0, r0, #31
 8006458:	d077      	beq.n	800654a <_dtoa_r+0x8f2>
 800645a:	f1c0 0320 	rsb	r3, r0, #32
 800645e:	2b04      	cmp	r3, #4
 8006460:	dd6b      	ble.n	800653a <_dtoa_r+0x8e2>
 8006462:	9b08      	ldr	r3, [sp, #32]
 8006464:	f1c0 001c 	rsb	r0, r0, #28
 8006468:	4403      	add	r3, r0
 800646a:	4480      	add	r8, r0
 800646c:	4406      	add	r6, r0
 800646e:	9308      	str	r3, [sp, #32]
 8006470:	f1b8 0f00 	cmp.w	r8, #0
 8006474:	dd05      	ble.n	8006482 <_dtoa_r+0x82a>
 8006476:	4649      	mov	r1, r9
 8006478:	4642      	mov	r2, r8
 800647a:	4658      	mov	r0, fp
 800647c:	f000 fcbe 	bl	8006dfc <__lshift>
 8006480:	4681      	mov	r9, r0
 8006482:	9b08      	ldr	r3, [sp, #32]
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd05      	ble.n	8006494 <_dtoa_r+0x83c>
 8006488:	4621      	mov	r1, r4
 800648a:	461a      	mov	r2, r3
 800648c:	4658      	mov	r0, fp
 800648e:	f000 fcb5 	bl	8006dfc <__lshift>
 8006492:	4604      	mov	r4, r0
 8006494:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006496:	2b00      	cmp	r3, #0
 8006498:	d059      	beq.n	800654e <_dtoa_r+0x8f6>
 800649a:	4621      	mov	r1, r4
 800649c:	4648      	mov	r0, r9
 800649e:	f000 fd19 	bl	8006ed4 <__mcmp>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	da53      	bge.n	800654e <_dtoa_r+0x8f6>
 80064a6:	1e7b      	subs	r3, r7, #1
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	4649      	mov	r1, r9
 80064ac:	2300      	movs	r3, #0
 80064ae:	220a      	movs	r2, #10
 80064b0:	4658      	mov	r0, fp
 80064b2:	f000 faf7 	bl	8006aa4 <__multadd>
 80064b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064b8:	4681      	mov	r9, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8172 	beq.w	80067a4 <_dtoa_r+0xb4c>
 80064c0:	2300      	movs	r3, #0
 80064c2:	4629      	mov	r1, r5
 80064c4:	220a      	movs	r2, #10
 80064c6:	4658      	mov	r0, fp
 80064c8:	f000 faec 	bl	8006aa4 <__multadd>
 80064cc:	9b00      	ldr	r3, [sp, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	4605      	mov	r5, r0
 80064d2:	dc67      	bgt.n	80065a4 <_dtoa_r+0x94c>
 80064d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	dc41      	bgt.n	800655e <_dtoa_r+0x906>
 80064da:	e063      	b.n	80065a4 <_dtoa_r+0x94c>
 80064dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064e2:	e746      	b.n	8006372 <_dtoa_r+0x71a>
 80064e4:	9b07      	ldr	r3, [sp, #28]
 80064e6:	1e5c      	subs	r4, r3, #1
 80064e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	bfbf      	itttt	lt
 80064ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064f4:	1ae3      	sublt	r3, r4, r3
 80064f6:	bfb4      	ite	lt
 80064f8:	18d2      	addlt	r2, r2, r3
 80064fa:	1b1c      	subge	r4, r3, r4
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	bfbc      	itt	lt
 8006500:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006502:	2400      	movlt	r4, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	bfb5      	itete	lt
 8006508:	eba8 0603 	sublt.w	r6, r8, r3
 800650c:	9b07      	ldrge	r3, [sp, #28]
 800650e:	2300      	movlt	r3, #0
 8006510:	4646      	movge	r6, r8
 8006512:	e730      	b.n	8006376 <_dtoa_r+0x71e>
 8006514:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006516:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006518:	4646      	mov	r6, r8
 800651a:	e735      	b.n	8006388 <_dtoa_r+0x730>
 800651c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800651e:	e75c      	b.n	80063da <_dtoa_r+0x782>
 8006520:	2300      	movs	r3, #0
 8006522:	e788      	b.n	8006436 <_dtoa_r+0x7de>
 8006524:	3fe00000 	.word	0x3fe00000
 8006528:	40240000 	.word	0x40240000
 800652c:	40140000 	.word	0x40140000
 8006530:	9b02      	ldr	r3, [sp, #8]
 8006532:	e780      	b.n	8006436 <_dtoa_r+0x7de>
 8006534:	2300      	movs	r3, #0
 8006536:	930a      	str	r3, [sp, #40]	@ 0x28
 8006538:	e782      	b.n	8006440 <_dtoa_r+0x7e8>
 800653a:	d099      	beq.n	8006470 <_dtoa_r+0x818>
 800653c:	9a08      	ldr	r2, [sp, #32]
 800653e:	331c      	adds	r3, #28
 8006540:	441a      	add	r2, r3
 8006542:	4498      	add	r8, r3
 8006544:	441e      	add	r6, r3
 8006546:	9208      	str	r2, [sp, #32]
 8006548:	e792      	b.n	8006470 <_dtoa_r+0x818>
 800654a:	4603      	mov	r3, r0
 800654c:	e7f6      	b.n	800653c <_dtoa_r+0x8e4>
 800654e:	9b07      	ldr	r3, [sp, #28]
 8006550:	9704      	str	r7, [sp, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	dc20      	bgt.n	8006598 <_dtoa_r+0x940>
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655a:	2b02      	cmp	r3, #2
 800655c:	dd1e      	ble.n	800659c <_dtoa_r+0x944>
 800655e:	9b00      	ldr	r3, [sp, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f47f aec0 	bne.w	80062e6 <_dtoa_r+0x68e>
 8006566:	4621      	mov	r1, r4
 8006568:	2205      	movs	r2, #5
 800656a:	4658      	mov	r0, fp
 800656c:	f000 fa9a 	bl	8006aa4 <__multadd>
 8006570:	4601      	mov	r1, r0
 8006572:	4604      	mov	r4, r0
 8006574:	4648      	mov	r0, r9
 8006576:	f000 fcad 	bl	8006ed4 <__mcmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	f77f aeb3 	ble.w	80062e6 <_dtoa_r+0x68e>
 8006580:	4656      	mov	r6, sl
 8006582:	2331      	movs	r3, #49	@ 0x31
 8006584:	f806 3b01 	strb.w	r3, [r6], #1
 8006588:	9b04      	ldr	r3, [sp, #16]
 800658a:	3301      	adds	r3, #1
 800658c:	9304      	str	r3, [sp, #16]
 800658e:	e6ae      	b.n	80062ee <_dtoa_r+0x696>
 8006590:	9c07      	ldr	r4, [sp, #28]
 8006592:	9704      	str	r7, [sp, #16]
 8006594:	4625      	mov	r5, r4
 8006596:	e7f3      	b.n	8006580 <_dtoa_r+0x928>
 8006598:	9b07      	ldr	r3, [sp, #28]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8104 	beq.w	80067ac <_dtoa_r+0xb54>
 80065a4:	2e00      	cmp	r6, #0
 80065a6:	dd05      	ble.n	80065b4 <_dtoa_r+0x95c>
 80065a8:	4629      	mov	r1, r5
 80065aa:	4632      	mov	r2, r6
 80065ac:	4658      	mov	r0, fp
 80065ae:	f000 fc25 	bl	8006dfc <__lshift>
 80065b2:	4605      	mov	r5, r0
 80065b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d05a      	beq.n	8006670 <_dtoa_r+0xa18>
 80065ba:	6869      	ldr	r1, [r5, #4]
 80065bc:	4658      	mov	r0, fp
 80065be:	f000 fa0f 	bl	80069e0 <_Balloc>
 80065c2:	4606      	mov	r6, r0
 80065c4:	b928      	cbnz	r0, 80065d2 <_dtoa_r+0x97a>
 80065c6:	4b84      	ldr	r3, [pc, #528]	@ (80067d8 <_dtoa_r+0xb80>)
 80065c8:	4602      	mov	r2, r0
 80065ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065ce:	f7ff bb5a 	b.w	8005c86 <_dtoa_r+0x2e>
 80065d2:	692a      	ldr	r2, [r5, #16]
 80065d4:	3202      	adds	r2, #2
 80065d6:	0092      	lsls	r2, r2, #2
 80065d8:	f105 010c 	add.w	r1, r5, #12
 80065dc:	300c      	adds	r0, #12
 80065de:	f000 ffaf 	bl	8007540 <memcpy>
 80065e2:	2201      	movs	r2, #1
 80065e4:	4631      	mov	r1, r6
 80065e6:	4658      	mov	r0, fp
 80065e8:	f000 fc08 	bl	8006dfc <__lshift>
 80065ec:	f10a 0301 	add.w	r3, sl, #1
 80065f0:	9307      	str	r3, [sp, #28]
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	4453      	add	r3, sl
 80065f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065f8:	9b02      	ldr	r3, [sp, #8]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	462f      	mov	r7, r5
 8006600:	930a      	str	r3, [sp, #40]	@ 0x28
 8006602:	4605      	mov	r5, r0
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	4621      	mov	r1, r4
 8006608:	3b01      	subs	r3, #1
 800660a:	4648      	mov	r0, r9
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	f7ff fa9a 	bl	8005b46 <quorem>
 8006612:	4639      	mov	r1, r7
 8006614:	9002      	str	r0, [sp, #8]
 8006616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800661a:	4648      	mov	r0, r9
 800661c:	f000 fc5a 	bl	8006ed4 <__mcmp>
 8006620:	462a      	mov	r2, r5
 8006622:	9008      	str	r0, [sp, #32]
 8006624:	4621      	mov	r1, r4
 8006626:	4658      	mov	r0, fp
 8006628:	f000 fc70 	bl	8006f0c <__mdiff>
 800662c:	68c2      	ldr	r2, [r0, #12]
 800662e:	4606      	mov	r6, r0
 8006630:	bb02      	cbnz	r2, 8006674 <_dtoa_r+0xa1c>
 8006632:	4601      	mov	r1, r0
 8006634:	4648      	mov	r0, r9
 8006636:	f000 fc4d 	bl	8006ed4 <__mcmp>
 800663a:	4602      	mov	r2, r0
 800663c:	4631      	mov	r1, r6
 800663e:	4658      	mov	r0, fp
 8006640:	920e      	str	r2, [sp, #56]	@ 0x38
 8006642:	f000 fa0d 	bl	8006a60 <_Bfree>
 8006646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800664a:	9e07      	ldr	r6, [sp, #28]
 800664c:	ea43 0102 	orr.w	r1, r3, r2
 8006650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006652:	4319      	orrs	r1, r3
 8006654:	d110      	bne.n	8006678 <_dtoa_r+0xa20>
 8006656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800665a:	d029      	beq.n	80066b0 <_dtoa_r+0xa58>
 800665c:	9b08      	ldr	r3, [sp, #32]
 800665e:	2b00      	cmp	r3, #0
 8006660:	dd02      	ble.n	8006668 <_dtoa_r+0xa10>
 8006662:	9b02      	ldr	r3, [sp, #8]
 8006664:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006668:	9b00      	ldr	r3, [sp, #0]
 800666a:	f883 8000 	strb.w	r8, [r3]
 800666e:	e63f      	b.n	80062f0 <_dtoa_r+0x698>
 8006670:	4628      	mov	r0, r5
 8006672:	e7bb      	b.n	80065ec <_dtoa_r+0x994>
 8006674:	2201      	movs	r2, #1
 8006676:	e7e1      	b.n	800663c <_dtoa_r+0x9e4>
 8006678:	9b08      	ldr	r3, [sp, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	db04      	blt.n	8006688 <_dtoa_r+0xa30>
 800667e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006680:	430b      	orrs	r3, r1
 8006682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006684:	430b      	orrs	r3, r1
 8006686:	d120      	bne.n	80066ca <_dtoa_r+0xa72>
 8006688:	2a00      	cmp	r2, #0
 800668a:	dded      	ble.n	8006668 <_dtoa_r+0xa10>
 800668c:	4649      	mov	r1, r9
 800668e:	2201      	movs	r2, #1
 8006690:	4658      	mov	r0, fp
 8006692:	f000 fbb3 	bl	8006dfc <__lshift>
 8006696:	4621      	mov	r1, r4
 8006698:	4681      	mov	r9, r0
 800669a:	f000 fc1b 	bl	8006ed4 <__mcmp>
 800669e:	2800      	cmp	r0, #0
 80066a0:	dc03      	bgt.n	80066aa <_dtoa_r+0xa52>
 80066a2:	d1e1      	bne.n	8006668 <_dtoa_r+0xa10>
 80066a4:	f018 0f01 	tst.w	r8, #1
 80066a8:	d0de      	beq.n	8006668 <_dtoa_r+0xa10>
 80066aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066ae:	d1d8      	bne.n	8006662 <_dtoa_r+0xa0a>
 80066b0:	9a00      	ldr	r2, [sp, #0]
 80066b2:	2339      	movs	r3, #57	@ 0x39
 80066b4:	7013      	strb	r3, [r2, #0]
 80066b6:	4633      	mov	r3, r6
 80066b8:	461e      	mov	r6, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066c0:	2a39      	cmp	r2, #57	@ 0x39
 80066c2:	d052      	beq.n	800676a <_dtoa_r+0xb12>
 80066c4:	3201      	adds	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	e612      	b.n	80062f0 <_dtoa_r+0x698>
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	dd07      	ble.n	80066de <_dtoa_r+0xa86>
 80066ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066d2:	d0ed      	beq.n	80066b0 <_dtoa_r+0xa58>
 80066d4:	9a00      	ldr	r2, [sp, #0]
 80066d6:	f108 0301 	add.w	r3, r8, #1
 80066da:	7013      	strb	r3, [r2, #0]
 80066dc:	e608      	b.n	80062f0 <_dtoa_r+0x698>
 80066de:	9b07      	ldr	r3, [sp, #28]
 80066e0:	9a07      	ldr	r2, [sp, #28]
 80066e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d028      	beq.n	800673e <_dtoa_r+0xae6>
 80066ec:	4649      	mov	r1, r9
 80066ee:	2300      	movs	r3, #0
 80066f0:	220a      	movs	r2, #10
 80066f2:	4658      	mov	r0, fp
 80066f4:	f000 f9d6 	bl	8006aa4 <__multadd>
 80066f8:	42af      	cmp	r7, r5
 80066fa:	4681      	mov	r9, r0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	f04f 020a 	mov.w	r2, #10
 8006704:	4639      	mov	r1, r7
 8006706:	4658      	mov	r0, fp
 8006708:	d107      	bne.n	800671a <_dtoa_r+0xac2>
 800670a:	f000 f9cb 	bl	8006aa4 <__multadd>
 800670e:	4607      	mov	r7, r0
 8006710:	4605      	mov	r5, r0
 8006712:	9b07      	ldr	r3, [sp, #28]
 8006714:	3301      	adds	r3, #1
 8006716:	9307      	str	r3, [sp, #28]
 8006718:	e774      	b.n	8006604 <_dtoa_r+0x9ac>
 800671a:	f000 f9c3 	bl	8006aa4 <__multadd>
 800671e:	4629      	mov	r1, r5
 8006720:	4607      	mov	r7, r0
 8006722:	2300      	movs	r3, #0
 8006724:	220a      	movs	r2, #10
 8006726:	4658      	mov	r0, fp
 8006728:	f000 f9bc 	bl	8006aa4 <__multadd>
 800672c:	4605      	mov	r5, r0
 800672e:	e7f0      	b.n	8006712 <_dtoa_r+0xaba>
 8006730:	9b00      	ldr	r3, [sp, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	bfcc      	ite	gt
 8006736:	461e      	movgt	r6, r3
 8006738:	2601      	movle	r6, #1
 800673a:	4456      	add	r6, sl
 800673c:	2700      	movs	r7, #0
 800673e:	4649      	mov	r1, r9
 8006740:	2201      	movs	r2, #1
 8006742:	4658      	mov	r0, fp
 8006744:	f000 fb5a 	bl	8006dfc <__lshift>
 8006748:	4621      	mov	r1, r4
 800674a:	4681      	mov	r9, r0
 800674c:	f000 fbc2 	bl	8006ed4 <__mcmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	dcb0      	bgt.n	80066b6 <_dtoa_r+0xa5e>
 8006754:	d102      	bne.n	800675c <_dtoa_r+0xb04>
 8006756:	f018 0f01 	tst.w	r8, #1
 800675a:	d1ac      	bne.n	80066b6 <_dtoa_r+0xa5e>
 800675c:	4633      	mov	r3, r6
 800675e:	461e      	mov	r6, r3
 8006760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006764:	2a30      	cmp	r2, #48	@ 0x30
 8006766:	d0fa      	beq.n	800675e <_dtoa_r+0xb06>
 8006768:	e5c2      	b.n	80062f0 <_dtoa_r+0x698>
 800676a:	459a      	cmp	sl, r3
 800676c:	d1a4      	bne.n	80066b8 <_dtoa_r+0xa60>
 800676e:	9b04      	ldr	r3, [sp, #16]
 8006770:	3301      	adds	r3, #1
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	2331      	movs	r3, #49	@ 0x31
 8006776:	f88a 3000 	strb.w	r3, [sl]
 800677a:	e5b9      	b.n	80062f0 <_dtoa_r+0x698>
 800677c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800677e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067dc <_dtoa_r+0xb84>
 8006782:	b11b      	cbz	r3, 800678c <_dtoa_r+0xb34>
 8006784:	f10a 0308 	add.w	r3, sl, #8
 8006788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	4650      	mov	r0, sl
 800678e:	b019      	add	sp, #100	@ 0x64
 8006790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006796:	2b01      	cmp	r3, #1
 8006798:	f77f ae37 	ble.w	800640a <_dtoa_r+0x7b2>
 800679c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800679e:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a0:	2001      	movs	r0, #1
 80067a2:	e655      	b.n	8006450 <_dtoa_r+0x7f8>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f77f aed6 	ble.w	8006558 <_dtoa_r+0x900>
 80067ac:	4656      	mov	r6, sl
 80067ae:	4621      	mov	r1, r4
 80067b0:	4648      	mov	r0, r9
 80067b2:	f7ff f9c8 	bl	8005b46 <quorem>
 80067b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067ba:	f806 8b01 	strb.w	r8, [r6], #1
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	eba6 020a 	sub.w	r2, r6, sl
 80067c4:	4293      	cmp	r3, r2
 80067c6:	ddb3      	ble.n	8006730 <_dtoa_r+0xad8>
 80067c8:	4649      	mov	r1, r9
 80067ca:	2300      	movs	r3, #0
 80067cc:	220a      	movs	r2, #10
 80067ce:	4658      	mov	r0, fp
 80067d0:	f000 f968 	bl	8006aa4 <__multadd>
 80067d4:	4681      	mov	r9, r0
 80067d6:	e7ea      	b.n	80067ae <_dtoa_r+0xb56>
 80067d8:	08007cdc 	.word	0x08007cdc
 80067dc:	08007c60 	.word	0x08007c60

080067e0 <_free_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4605      	mov	r5, r0
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d041      	beq.n	800686c <_free_r+0x8c>
 80067e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ec:	1f0c      	subs	r4, r1, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfb8      	it	lt
 80067f2:	18e4      	addlt	r4, r4, r3
 80067f4:	f000 f8e8 	bl	80069c8 <__malloc_lock>
 80067f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <_free_r+0x90>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	b933      	cbnz	r3, 800680c <_free_r+0x2c>
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	4628      	mov	r0, r5
 8006804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006808:	f000 b8e4 	b.w	80069d4 <__malloc_unlock>
 800680c:	42a3      	cmp	r3, r4
 800680e:	d908      	bls.n	8006822 <_free_r+0x42>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428b      	cmp	r3, r1
 8006816:	bf01      	itttt	eq
 8006818:	6819      	ldreq	r1, [r3, #0]
 800681a:	685b      	ldreq	r3, [r3, #4]
 800681c:	1809      	addeq	r1, r1, r0
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	e7ed      	b.n	80067fe <_free_r+0x1e>
 8006822:	461a      	mov	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b10b      	cbz	r3, 800682c <_free_r+0x4c>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d9fa      	bls.n	8006822 <_free_r+0x42>
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	1850      	adds	r0, r2, r1
 8006830:	42a0      	cmp	r0, r4
 8006832:	d10b      	bne.n	800684c <_free_r+0x6c>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	4401      	add	r1, r0
 8006838:	1850      	adds	r0, r2, r1
 800683a:	4283      	cmp	r3, r0
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	d1e0      	bne.n	8006802 <_free_r+0x22>
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	6053      	str	r3, [r2, #4]
 8006846:	4408      	add	r0, r1
 8006848:	6010      	str	r0, [r2, #0]
 800684a:	e7da      	b.n	8006802 <_free_r+0x22>
 800684c:	d902      	bls.n	8006854 <_free_r+0x74>
 800684e:	230c      	movs	r3, #12
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	e7d6      	b.n	8006802 <_free_r+0x22>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	1821      	adds	r1, r4, r0
 8006858:	428b      	cmp	r3, r1
 800685a:	bf04      	itt	eq
 800685c:	6819      	ldreq	r1, [r3, #0]
 800685e:	685b      	ldreq	r3, [r3, #4]
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	bf04      	itt	eq
 8006864:	1809      	addeq	r1, r1, r0
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	6054      	str	r4, [r2, #4]
 800686a:	e7ca      	b.n	8006802 <_free_r+0x22>
 800686c:	bd38      	pop	{r3, r4, r5, pc}
 800686e:	bf00      	nop
 8006870:	200004ac 	.word	0x200004ac

08006874 <malloc>:
 8006874:	4b02      	ldr	r3, [pc, #8]	@ (8006880 <malloc+0xc>)
 8006876:	4601      	mov	r1, r0
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	f000 b825 	b.w	80068c8 <_malloc_r>
 800687e:	bf00      	nop
 8006880:	2000001c 	.word	0x2000001c

08006884 <sbrk_aligned>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4e0f      	ldr	r6, [pc, #60]	@ (80068c4 <sbrk_aligned+0x40>)
 8006888:	460c      	mov	r4, r1
 800688a:	6831      	ldr	r1, [r6, #0]
 800688c:	4605      	mov	r5, r0
 800688e:	b911      	cbnz	r1, 8006896 <sbrk_aligned+0x12>
 8006890:	f000 fe46 	bl	8007520 <_sbrk_r>
 8006894:	6030      	str	r0, [r6, #0]
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f000 fe41 	bl	8007520 <_sbrk_r>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d103      	bne.n	80068aa <sbrk_aligned+0x26>
 80068a2:	f04f 34ff 	mov.w	r4, #4294967295
 80068a6:	4620      	mov	r0, r4
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	1cc4      	adds	r4, r0, #3
 80068ac:	f024 0403 	bic.w	r4, r4, #3
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d0f8      	beq.n	80068a6 <sbrk_aligned+0x22>
 80068b4:	1a21      	subs	r1, r4, r0
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fe32 	bl	8007520 <_sbrk_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d1f2      	bne.n	80068a6 <sbrk_aligned+0x22>
 80068c0:	e7ef      	b.n	80068a2 <sbrk_aligned+0x1e>
 80068c2:	bf00      	nop
 80068c4:	200004a8 	.word	0x200004a8

080068c8 <_malloc_r>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	1ccd      	adds	r5, r1, #3
 80068ce:	f025 0503 	bic.w	r5, r5, #3
 80068d2:	3508      	adds	r5, #8
 80068d4:	2d0c      	cmp	r5, #12
 80068d6:	bf38      	it	cc
 80068d8:	250c      	movcc	r5, #12
 80068da:	2d00      	cmp	r5, #0
 80068dc:	4606      	mov	r6, r0
 80068de:	db01      	blt.n	80068e4 <_malloc_r+0x1c>
 80068e0:	42a9      	cmp	r1, r5
 80068e2:	d904      	bls.n	80068ee <_malloc_r+0x26>
 80068e4:	230c      	movs	r3, #12
 80068e6:	6033      	str	r3, [r6, #0]
 80068e8:	2000      	movs	r0, #0
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c4 <_malloc_r+0xfc>
 80068f2:	f000 f869 	bl	80069c8 <__malloc_lock>
 80068f6:	f8d8 3000 	ldr.w	r3, [r8]
 80068fa:	461c      	mov	r4, r3
 80068fc:	bb44      	cbnz	r4, 8006950 <_malloc_r+0x88>
 80068fe:	4629      	mov	r1, r5
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ffbf 	bl	8006884 <sbrk_aligned>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	4604      	mov	r4, r0
 800690a:	d158      	bne.n	80069be <_malloc_r+0xf6>
 800690c:	f8d8 4000 	ldr.w	r4, [r8]
 8006910:	4627      	mov	r7, r4
 8006912:	2f00      	cmp	r7, #0
 8006914:	d143      	bne.n	800699e <_malloc_r+0xd6>
 8006916:	2c00      	cmp	r4, #0
 8006918:	d04b      	beq.n	80069b2 <_malloc_r+0xea>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	4639      	mov	r1, r7
 800691e:	4630      	mov	r0, r6
 8006920:	eb04 0903 	add.w	r9, r4, r3
 8006924:	f000 fdfc 	bl	8007520 <_sbrk_r>
 8006928:	4581      	cmp	r9, r0
 800692a:	d142      	bne.n	80069b2 <_malloc_r+0xea>
 800692c:	6821      	ldr	r1, [r4, #0]
 800692e:	1a6d      	subs	r5, r5, r1
 8006930:	4629      	mov	r1, r5
 8006932:	4630      	mov	r0, r6
 8006934:	f7ff ffa6 	bl	8006884 <sbrk_aligned>
 8006938:	3001      	adds	r0, #1
 800693a:	d03a      	beq.n	80069b2 <_malloc_r+0xea>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	442b      	add	r3, r5
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	f8d8 3000 	ldr.w	r3, [r8]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	bb62      	cbnz	r2, 80069a4 <_malloc_r+0xdc>
 800694a:	f8c8 7000 	str.w	r7, [r8]
 800694e:	e00f      	b.n	8006970 <_malloc_r+0xa8>
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	1b52      	subs	r2, r2, r5
 8006954:	d420      	bmi.n	8006998 <_malloc_r+0xd0>
 8006956:	2a0b      	cmp	r2, #11
 8006958:	d917      	bls.n	800698a <_malloc_r+0xc2>
 800695a:	1961      	adds	r1, r4, r5
 800695c:	42a3      	cmp	r3, r4
 800695e:	6025      	str	r5, [r4, #0]
 8006960:	bf18      	it	ne
 8006962:	6059      	strne	r1, [r3, #4]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	bf08      	it	eq
 8006968:	f8c8 1000 	streq.w	r1, [r8]
 800696c:	5162      	str	r2, [r4, r5]
 800696e:	604b      	str	r3, [r1, #4]
 8006970:	4630      	mov	r0, r6
 8006972:	f000 f82f 	bl	80069d4 <__malloc_unlock>
 8006976:	f104 000b 	add.w	r0, r4, #11
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	f020 0007 	bic.w	r0, r0, #7
 8006980:	1ac2      	subs	r2, r0, r3
 8006982:	bf1c      	itt	ne
 8006984:	1a1b      	subne	r3, r3, r0
 8006986:	50a3      	strne	r3, [r4, r2]
 8006988:	e7af      	b.n	80068ea <_malloc_r+0x22>
 800698a:	6862      	ldr	r2, [r4, #4]
 800698c:	42a3      	cmp	r3, r4
 800698e:	bf0c      	ite	eq
 8006990:	f8c8 2000 	streq.w	r2, [r8]
 8006994:	605a      	strne	r2, [r3, #4]
 8006996:	e7eb      	b.n	8006970 <_malloc_r+0xa8>
 8006998:	4623      	mov	r3, r4
 800699a:	6864      	ldr	r4, [r4, #4]
 800699c:	e7ae      	b.n	80068fc <_malloc_r+0x34>
 800699e:	463c      	mov	r4, r7
 80069a0:	687f      	ldr	r7, [r7, #4]
 80069a2:	e7b6      	b.n	8006912 <_malloc_r+0x4a>
 80069a4:	461a      	mov	r2, r3
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d1fb      	bne.n	80069a4 <_malloc_r+0xdc>
 80069ac:	2300      	movs	r3, #0
 80069ae:	6053      	str	r3, [r2, #4]
 80069b0:	e7de      	b.n	8006970 <_malloc_r+0xa8>
 80069b2:	230c      	movs	r3, #12
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	4630      	mov	r0, r6
 80069b8:	f000 f80c 	bl	80069d4 <__malloc_unlock>
 80069bc:	e794      	b.n	80068e8 <_malloc_r+0x20>
 80069be:	6005      	str	r5, [r0, #0]
 80069c0:	e7d6      	b.n	8006970 <_malloc_r+0xa8>
 80069c2:	bf00      	nop
 80069c4:	200004ac 	.word	0x200004ac

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	@ (80069d0 <__malloc_lock+0x8>)
 80069ca:	f7ff b8ba 	b.w	8005b42 <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	200004a4 	.word	0x200004a4

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__malloc_unlock+0x8>)
 80069d6:	f7ff b8b5 	b.w	8005b44 <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	200004a4 	.word	0x200004a4

080069e0 <_Balloc>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	69c6      	ldr	r6, [r0, #28]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	b976      	cbnz	r6, 8006a08 <_Balloc+0x28>
 80069ea:	2010      	movs	r0, #16
 80069ec:	f7ff ff42 	bl	8006874 <malloc>
 80069f0:	4602      	mov	r2, r0
 80069f2:	61e0      	str	r0, [r4, #28]
 80069f4:	b920      	cbnz	r0, 8006a00 <_Balloc+0x20>
 80069f6:	4b18      	ldr	r3, [pc, #96]	@ (8006a58 <_Balloc+0x78>)
 80069f8:	4818      	ldr	r0, [pc, #96]	@ (8006a5c <_Balloc+0x7c>)
 80069fa:	216b      	movs	r1, #107	@ 0x6b
 80069fc:	f000 fdae 	bl	800755c <__assert_func>
 8006a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a04:	6006      	str	r6, [r0, #0]
 8006a06:	60c6      	str	r6, [r0, #12]
 8006a08:	69e6      	ldr	r6, [r4, #28]
 8006a0a:	68f3      	ldr	r3, [r6, #12]
 8006a0c:	b183      	cbz	r3, 8006a30 <_Balloc+0x50>
 8006a0e:	69e3      	ldr	r3, [r4, #28]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a16:	b9b8      	cbnz	r0, 8006a48 <_Balloc+0x68>
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a1e:	1d72      	adds	r2, r6, #5
 8006a20:	0092      	lsls	r2, r2, #2
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fdb8 	bl	8007598 <_calloc_r>
 8006a28:	b160      	cbz	r0, 8006a44 <_Balloc+0x64>
 8006a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a2e:	e00e      	b.n	8006a4e <_Balloc+0x6e>
 8006a30:	2221      	movs	r2, #33	@ 0x21
 8006a32:	2104      	movs	r1, #4
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fdaf 	bl	8007598 <_calloc_r>
 8006a3a:	69e3      	ldr	r3, [r4, #28]
 8006a3c:	60f0      	str	r0, [r6, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e4      	bne.n	8006a0e <_Balloc+0x2e>
 8006a44:	2000      	movs	r0, #0
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a54:	e7f7      	b.n	8006a46 <_Balloc+0x66>
 8006a56:	bf00      	nop
 8006a58:	08007c6d 	.word	0x08007c6d
 8006a5c:	08007ced 	.word	0x08007ced

08006a60 <_Bfree>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	69c6      	ldr	r6, [r0, #28]
 8006a64:	4605      	mov	r5, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b976      	cbnz	r6, 8006a88 <_Bfree+0x28>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ff02 	bl	8006874 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	61e8      	str	r0, [r5, #28]
 8006a74:	b920      	cbnz	r0, 8006a80 <_Bfree+0x20>
 8006a76:	4b09      	ldr	r3, [pc, #36]	@ (8006a9c <_Bfree+0x3c>)
 8006a78:	4809      	ldr	r0, [pc, #36]	@ (8006aa0 <_Bfree+0x40>)
 8006a7a:	218f      	movs	r1, #143	@ 0x8f
 8006a7c:	f000 fd6e 	bl	800755c <__assert_func>
 8006a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a84:	6006      	str	r6, [r0, #0]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	b13c      	cbz	r4, 8006a9a <_Bfree+0x3a>
 8006a8a:	69eb      	ldr	r3, [r5, #28]
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	08007c6d 	.word	0x08007c6d
 8006aa0:	08007ced 	.word	0x08007ced

08006aa4 <__multadd>:
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	690d      	ldr	r5, [r1, #16]
 8006aaa:	4607      	mov	r7, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	461e      	mov	r6, r3
 8006ab0:	f101 0c14 	add.w	ip, r1, #20
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8006aba:	b299      	uxth	r1, r3
 8006abc:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac0:	0c1e      	lsrs	r6, r3, #16
 8006ac2:	0c0b      	lsrs	r3, r1, #16
 8006ac4:	fb02 3306 	mla	r3, r2, r6, r3
 8006ac8:	b289      	uxth	r1, r1
 8006aca:	3001      	adds	r0, #1
 8006acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad0:	4285      	cmp	r5, r0
 8006ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ada:	dcec      	bgt.n	8006ab6 <__multadd+0x12>
 8006adc:	b30e      	cbz	r6, 8006b22 <__multadd+0x7e>
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	42ab      	cmp	r3, r5
 8006ae2:	dc19      	bgt.n	8006b18 <__multadd+0x74>
 8006ae4:	6861      	ldr	r1, [r4, #4]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	3101      	adds	r1, #1
 8006aea:	f7ff ff79 	bl	80069e0 <_Balloc>
 8006aee:	4680      	mov	r8, r0
 8006af0:	b928      	cbnz	r0, 8006afe <__multadd+0x5a>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <__multadd+0x84>)
 8006af6:	480d      	ldr	r0, [pc, #52]	@ (8006b2c <__multadd+0x88>)
 8006af8:	21ba      	movs	r1, #186	@ 0xba
 8006afa:	f000 fd2f 	bl	800755c <__assert_func>
 8006afe:	6922      	ldr	r2, [r4, #16]
 8006b00:	3202      	adds	r2, #2
 8006b02:	f104 010c 	add.w	r1, r4, #12
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	300c      	adds	r0, #12
 8006b0a:	f000 fd19 	bl	8007540 <memcpy>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ffa5 	bl	8006a60 <_Bfree>
 8006b16:	4644      	mov	r4, r8
 8006b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	615e      	str	r6, [r3, #20]
 8006b20:	6125      	str	r5, [r4, #16]
 8006b22:	4620      	mov	r0, r4
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b28:	08007cdc 	.word	0x08007cdc
 8006b2c:	08007ced 	.word	0x08007ced

08006b30 <__hi0bits>:
 8006b30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b34:	4603      	mov	r3, r0
 8006b36:	bf36      	itet	cc
 8006b38:	0403      	lslcc	r3, r0, #16
 8006b3a:	2000      	movcs	r0, #0
 8006b3c:	2010      	movcc	r0, #16
 8006b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b42:	bf3c      	itt	cc
 8006b44:	021b      	lslcc	r3, r3, #8
 8006b46:	3008      	addcc	r0, #8
 8006b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4c:	bf3c      	itt	cc
 8006b4e:	011b      	lslcc	r3, r3, #4
 8006b50:	3004      	addcc	r0, #4
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	bf3c      	itt	cc
 8006b58:	009b      	lslcc	r3, r3, #2
 8006b5a:	3002      	addcc	r0, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db05      	blt.n	8006b6c <__hi0bits+0x3c>
 8006b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b64:	f100 0001 	add.w	r0, r0, #1
 8006b68:	bf08      	it	eq
 8006b6a:	2020      	moveq	r0, #32
 8006b6c:	4770      	bx	lr

08006b6e <__lo0bits>:
 8006b6e:	6803      	ldr	r3, [r0, #0]
 8006b70:	4602      	mov	r2, r0
 8006b72:	f013 0007 	ands.w	r0, r3, #7
 8006b76:	d00b      	beq.n	8006b90 <__lo0bits+0x22>
 8006b78:	07d9      	lsls	r1, r3, #31
 8006b7a:	d421      	bmi.n	8006bc0 <__lo0bits+0x52>
 8006b7c:	0798      	lsls	r0, r3, #30
 8006b7e:	bf49      	itett	mi
 8006b80:	085b      	lsrmi	r3, r3, #1
 8006b82:	089b      	lsrpl	r3, r3, #2
 8006b84:	2001      	movmi	r0, #1
 8006b86:	6013      	strmi	r3, [r2, #0]
 8006b88:	bf5c      	itt	pl
 8006b8a:	6013      	strpl	r3, [r2, #0]
 8006b8c:	2002      	movpl	r0, #2
 8006b8e:	4770      	bx	lr
 8006b90:	b299      	uxth	r1, r3
 8006b92:	b909      	cbnz	r1, 8006b98 <__lo0bits+0x2a>
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	2010      	movs	r0, #16
 8006b98:	b2d9      	uxtb	r1, r3
 8006b9a:	b909      	cbnz	r1, 8006ba0 <__lo0bits+0x32>
 8006b9c:	3008      	adds	r0, #8
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	bf04      	itt	eq
 8006ba4:	091b      	lsreq	r3, r3, #4
 8006ba6:	3004      	addeq	r0, #4
 8006ba8:	0799      	lsls	r1, r3, #30
 8006baa:	bf04      	itt	eq
 8006bac:	089b      	lsreq	r3, r3, #2
 8006bae:	3002      	addeq	r0, #2
 8006bb0:	07d9      	lsls	r1, r3, #31
 8006bb2:	d403      	bmi.n	8006bbc <__lo0bits+0x4e>
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	f100 0001 	add.w	r0, r0, #1
 8006bba:	d003      	beq.n	8006bc4 <__lo0bits+0x56>
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	4770      	bx	lr
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr
 8006bc4:	2020      	movs	r0, #32
 8006bc6:	4770      	bx	lr

08006bc8 <__i2b>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	2101      	movs	r1, #1
 8006bce:	f7ff ff07 	bl	80069e0 <_Balloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	b928      	cbnz	r0, 8006be2 <__i2b+0x1a>
 8006bd6:	4b05      	ldr	r3, [pc, #20]	@ (8006bec <__i2b+0x24>)
 8006bd8:	4805      	ldr	r0, [pc, #20]	@ (8006bf0 <__i2b+0x28>)
 8006bda:	f240 1145 	movw	r1, #325	@ 0x145
 8006bde:	f000 fcbd 	bl	800755c <__assert_func>
 8006be2:	2301      	movs	r3, #1
 8006be4:	6144      	str	r4, [r0, #20]
 8006be6:	6103      	str	r3, [r0, #16]
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	bf00      	nop
 8006bec:	08007cdc 	.word	0x08007cdc
 8006bf0:	08007ced 	.word	0x08007ced

08006bf4 <__multiply>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	690a      	ldr	r2, [r1, #16]
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	bfa8      	it	ge
 8006c02:	4623      	movge	r3, r4
 8006c04:	460f      	mov	r7, r1
 8006c06:	bfa4      	itt	ge
 8006c08:	460c      	movge	r4, r1
 8006c0a:	461f      	movge	r7, r3
 8006c0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c14:	68a3      	ldr	r3, [r4, #8]
 8006c16:	6861      	ldr	r1, [r4, #4]
 8006c18:	eb0a 0609 	add.w	r6, sl, r9
 8006c1c:	42b3      	cmp	r3, r6
 8006c1e:	b085      	sub	sp, #20
 8006c20:	bfb8      	it	lt
 8006c22:	3101      	addlt	r1, #1
 8006c24:	f7ff fedc 	bl	80069e0 <_Balloc>
 8006c28:	b930      	cbnz	r0, 8006c38 <__multiply+0x44>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	4b44      	ldr	r3, [pc, #272]	@ (8006d40 <__multiply+0x14c>)
 8006c2e:	4845      	ldr	r0, [pc, #276]	@ (8006d44 <__multiply+0x150>)
 8006c30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c34:	f000 fc92 	bl	800755c <__assert_func>
 8006c38:	f100 0514 	add.w	r5, r0, #20
 8006c3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c40:	462b      	mov	r3, r5
 8006c42:	2200      	movs	r2, #0
 8006c44:	4543      	cmp	r3, r8
 8006c46:	d321      	bcc.n	8006c8c <__multiply+0x98>
 8006c48:	f107 0114 	add.w	r1, r7, #20
 8006c4c:	f104 0214 	add.w	r2, r4, #20
 8006c50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c58:	9302      	str	r3, [sp, #8]
 8006c5a:	1b13      	subs	r3, r2, r4
 8006c5c:	3b15      	subs	r3, #21
 8006c5e:	f023 0303 	bic.w	r3, r3, #3
 8006c62:	3304      	adds	r3, #4
 8006c64:	f104 0715 	add.w	r7, r4, #21
 8006c68:	42ba      	cmp	r2, r7
 8006c6a:	bf38      	it	cc
 8006c6c:	2304      	movcc	r3, #4
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	9b02      	ldr	r3, [sp, #8]
 8006c72:	9103      	str	r1, [sp, #12]
 8006c74:	428b      	cmp	r3, r1
 8006c76:	d80c      	bhi.n	8006c92 <__multiply+0x9e>
 8006c78:	2e00      	cmp	r6, #0
 8006c7a:	dd03      	ble.n	8006c84 <__multiply+0x90>
 8006c7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d05b      	beq.n	8006d3c <__multiply+0x148>
 8006c84:	6106      	str	r6, [r0, #16]
 8006c86:	b005      	add	sp, #20
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	f843 2b04 	str.w	r2, [r3], #4
 8006c90:	e7d8      	b.n	8006c44 <__multiply+0x50>
 8006c92:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c96:	f1ba 0f00 	cmp.w	sl, #0
 8006c9a:	d024      	beq.n	8006ce6 <__multiply+0xf2>
 8006c9c:	f104 0e14 	add.w	lr, r4, #20
 8006ca0:	46a9      	mov	r9, r5
 8006ca2:	f04f 0c00 	mov.w	ip, #0
 8006ca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006caa:	f8d9 3000 	ldr.w	r3, [r9]
 8006cae:	fa1f fb87 	uxth.w	fp, r7
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006cbc:	f8d9 7000 	ldr.w	r7, [r9]
 8006cc0:	4463      	add	r3, ip
 8006cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cc6:	fb0a c70b 	mla	r7, sl, fp, ip
 8006cca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cd4:	4572      	cmp	r2, lr
 8006cd6:	f849 3b04 	str.w	r3, [r9], #4
 8006cda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cde:	d8e2      	bhi.n	8006ca6 <__multiply+0xb2>
 8006ce0:	9b01      	ldr	r3, [sp, #4]
 8006ce2:	f845 c003 	str.w	ip, [r5, r3]
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cec:	3104      	adds	r1, #4
 8006cee:	f1b9 0f00 	cmp.w	r9, #0
 8006cf2:	d021      	beq.n	8006d38 <__multiply+0x144>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	f104 0c14 	add.w	ip, r4, #20
 8006cfa:	46ae      	mov	lr, r5
 8006cfc:	f04f 0a00 	mov.w	sl, #0
 8006d00:	f8bc b000 	ldrh.w	fp, [ip]
 8006d04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d08:	fb09 770b 	mla	r7, r9, fp, r7
 8006d0c:	4457      	add	r7, sl
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d14:	f84e 3b04 	str.w	r3, [lr], #4
 8006d18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d20:	f8be 3000 	ldrh.w	r3, [lr]
 8006d24:	fb09 330a 	mla	r3, r9, sl, r3
 8006d28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d2c:	4562      	cmp	r2, ip
 8006d2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d32:	d8e5      	bhi.n	8006d00 <__multiply+0x10c>
 8006d34:	9f01      	ldr	r7, [sp, #4]
 8006d36:	51eb      	str	r3, [r5, r7]
 8006d38:	3504      	adds	r5, #4
 8006d3a:	e799      	b.n	8006c70 <__multiply+0x7c>
 8006d3c:	3e01      	subs	r6, #1
 8006d3e:	e79b      	b.n	8006c78 <__multiply+0x84>
 8006d40:	08007cdc 	.word	0x08007cdc
 8006d44:	08007ced 	.word	0x08007ced

08006d48 <__pow5mult>:
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	4615      	mov	r5, r2
 8006d4e:	f012 0203 	ands.w	r2, r2, #3
 8006d52:	4607      	mov	r7, r0
 8006d54:	460e      	mov	r6, r1
 8006d56:	d007      	beq.n	8006d68 <__pow5mult+0x20>
 8006d58:	4c25      	ldr	r4, [pc, #148]	@ (8006df0 <__pow5mult+0xa8>)
 8006d5a:	3a01      	subs	r2, #1
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d62:	f7ff fe9f 	bl	8006aa4 <__multadd>
 8006d66:	4606      	mov	r6, r0
 8006d68:	10ad      	asrs	r5, r5, #2
 8006d6a:	d03d      	beq.n	8006de8 <__pow5mult+0xa0>
 8006d6c:	69fc      	ldr	r4, [r7, #28]
 8006d6e:	b97c      	cbnz	r4, 8006d90 <__pow5mult+0x48>
 8006d70:	2010      	movs	r0, #16
 8006d72:	f7ff fd7f 	bl	8006874 <malloc>
 8006d76:	4602      	mov	r2, r0
 8006d78:	61f8      	str	r0, [r7, #28]
 8006d7a:	b928      	cbnz	r0, 8006d88 <__pow5mult+0x40>
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006df4 <__pow5mult+0xac>)
 8006d7e:	481e      	ldr	r0, [pc, #120]	@ (8006df8 <__pow5mult+0xb0>)
 8006d80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d84:	f000 fbea 	bl	800755c <__assert_func>
 8006d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d8c:	6004      	str	r4, [r0, #0]
 8006d8e:	60c4      	str	r4, [r0, #12]
 8006d90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d98:	b94c      	cbnz	r4, 8006dae <__pow5mult+0x66>
 8006d9a:	f240 2171 	movw	r1, #625	@ 0x271
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f7ff ff12 	bl	8006bc8 <__i2b>
 8006da4:	2300      	movs	r3, #0
 8006da6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006daa:	4604      	mov	r4, r0
 8006dac:	6003      	str	r3, [r0, #0]
 8006dae:	f04f 0900 	mov.w	r9, #0
 8006db2:	07eb      	lsls	r3, r5, #31
 8006db4:	d50a      	bpl.n	8006dcc <__pow5mult+0x84>
 8006db6:	4631      	mov	r1, r6
 8006db8:	4622      	mov	r2, r4
 8006dba:	4638      	mov	r0, r7
 8006dbc:	f7ff ff1a 	bl	8006bf4 <__multiply>
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f7ff fe4b 	bl	8006a60 <_Bfree>
 8006dca:	4646      	mov	r6, r8
 8006dcc:	106d      	asrs	r5, r5, #1
 8006dce:	d00b      	beq.n	8006de8 <__pow5mult+0xa0>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	b938      	cbnz	r0, 8006de4 <__pow5mult+0x9c>
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f7ff ff0b 	bl	8006bf4 <__multiply>
 8006dde:	6020      	str	r0, [r4, #0]
 8006de0:	f8c0 9000 	str.w	r9, [r0]
 8006de4:	4604      	mov	r4, r0
 8006de6:	e7e4      	b.n	8006db2 <__pow5mult+0x6a>
 8006de8:	4630      	mov	r0, r6
 8006dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dee:	bf00      	nop
 8006df0:	08007d48 	.word	0x08007d48
 8006df4:	08007c6d 	.word	0x08007c6d
 8006df8:	08007ced 	.word	0x08007ced

08006dfc <__lshift>:
 8006dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	460c      	mov	r4, r1
 8006e02:	6849      	ldr	r1, [r1, #4]
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	4691      	mov	r9, r2
 8006e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e14:	f108 0601 	add.w	r6, r8, #1
 8006e18:	42b3      	cmp	r3, r6
 8006e1a:	db0b      	blt.n	8006e34 <__lshift+0x38>
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	f7ff fddf 	bl	80069e0 <_Balloc>
 8006e22:	4605      	mov	r5, r0
 8006e24:	b948      	cbnz	r0, 8006e3a <__lshift+0x3e>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b28      	ldr	r3, [pc, #160]	@ (8006ecc <__lshift+0xd0>)
 8006e2a:	4829      	ldr	r0, [pc, #164]	@ (8006ed0 <__lshift+0xd4>)
 8006e2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e30:	f000 fb94 	bl	800755c <__assert_func>
 8006e34:	3101      	adds	r1, #1
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	e7ee      	b.n	8006e18 <__lshift+0x1c>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f100 0114 	add.w	r1, r0, #20
 8006e40:	f100 0210 	add.w	r2, r0, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	4553      	cmp	r3, sl
 8006e48:	db33      	blt.n	8006eb2 <__lshift+0xb6>
 8006e4a:	6920      	ldr	r0, [r4, #16]
 8006e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e50:	f104 0314 	add.w	r3, r4, #20
 8006e54:	f019 091f 	ands.w	r9, r9, #31
 8006e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e60:	d02b      	beq.n	8006eba <__lshift+0xbe>
 8006e62:	f1c9 0e20 	rsb	lr, r9, #32
 8006e66:	468a      	mov	sl, r1
 8006e68:	2200      	movs	r2, #0
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e70:	4310      	orrs	r0, r2
 8006e72:	f84a 0b04 	str.w	r0, [sl], #4
 8006e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7a:	459c      	cmp	ip, r3
 8006e7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e80:	d8f3      	bhi.n	8006e6a <__lshift+0x6e>
 8006e82:	ebac 0304 	sub.w	r3, ip, r4
 8006e86:	3b15      	subs	r3, #21
 8006e88:	f023 0303 	bic.w	r3, r3, #3
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	f104 0015 	add.w	r0, r4, #21
 8006e92:	4584      	cmp	ip, r0
 8006e94:	bf38      	it	cc
 8006e96:	2304      	movcc	r3, #4
 8006e98:	50ca      	str	r2, [r1, r3]
 8006e9a:	b10a      	cbz	r2, 8006ea0 <__lshift+0xa4>
 8006e9c:	f108 0602 	add.w	r6, r8, #2
 8006ea0:	3e01      	subs	r6, #1
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	612e      	str	r6, [r5, #16]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	f7ff fdda 	bl	8006a60 <_Bfree>
 8006eac:	4628      	mov	r0, r5
 8006eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	e7c5      	b.n	8006e46 <__lshift+0x4a>
 8006eba:	3904      	subs	r1, #4
 8006ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ec4:	459c      	cmp	ip, r3
 8006ec6:	d8f9      	bhi.n	8006ebc <__lshift+0xc0>
 8006ec8:	e7ea      	b.n	8006ea0 <__lshift+0xa4>
 8006eca:	bf00      	nop
 8006ecc:	08007cdc 	.word	0x08007cdc
 8006ed0:	08007ced 	.word	0x08007ced

08006ed4 <__mcmp>:
 8006ed4:	690a      	ldr	r2, [r1, #16]
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	6900      	ldr	r0, [r0, #16]
 8006eda:	1a80      	subs	r0, r0, r2
 8006edc:	b530      	push	{r4, r5, lr}
 8006ede:	d10e      	bne.n	8006efe <__mcmp+0x2a>
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	3114      	adds	r1, #20
 8006ee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006eec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ef4:	4295      	cmp	r5, r2
 8006ef6:	d003      	beq.n	8006f00 <__mcmp+0x2c>
 8006ef8:	d205      	bcs.n	8006f06 <__mcmp+0x32>
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	bd30      	pop	{r4, r5, pc}
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	d3f3      	bcc.n	8006eec <__mcmp+0x18>
 8006f04:	e7fb      	b.n	8006efe <__mcmp+0x2a>
 8006f06:	2001      	movs	r0, #1
 8006f08:	e7f9      	b.n	8006efe <__mcmp+0x2a>
	...

08006f0c <__mdiff>:
 8006f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	4689      	mov	r9, r1
 8006f12:	4606      	mov	r6, r0
 8006f14:	4611      	mov	r1, r2
 8006f16:	4648      	mov	r0, r9
 8006f18:	4614      	mov	r4, r2
 8006f1a:	f7ff ffdb 	bl	8006ed4 <__mcmp>
 8006f1e:	1e05      	subs	r5, r0, #0
 8006f20:	d112      	bne.n	8006f48 <__mdiff+0x3c>
 8006f22:	4629      	mov	r1, r5
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7ff fd5b 	bl	80069e0 <_Balloc>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	b928      	cbnz	r0, 8006f3a <__mdiff+0x2e>
 8006f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800702c <__mdiff+0x120>)
 8006f30:	f240 2137 	movw	r1, #567	@ 0x237
 8006f34:	483e      	ldr	r0, [pc, #248]	@ (8007030 <__mdiff+0x124>)
 8006f36:	f000 fb11 	bl	800755c <__assert_func>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f40:	4610      	mov	r0, r2
 8006f42:	b003      	add	sp, #12
 8006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f48:	bfbc      	itt	lt
 8006f4a:	464b      	movlt	r3, r9
 8006f4c:	46a1      	movlt	r9, r4
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f54:	bfba      	itte	lt
 8006f56:	461c      	movlt	r4, r3
 8006f58:	2501      	movlt	r5, #1
 8006f5a:	2500      	movge	r5, #0
 8006f5c:	f7ff fd40 	bl	80069e0 <_Balloc>
 8006f60:	4602      	mov	r2, r0
 8006f62:	b918      	cbnz	r0, 8006f6c <__mdiff+0x60>
 8006f64:	4b31      	ldr	r3, [pc, #196]	@ (800702c <__mdiff+0x120>)
 8006f66:	f240 2145 	movw	r1, #581	@ 0x245
 8006f6a:	e7e3      	b.n	8006f34 <__mdiff+0x28>
 8006f6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f70:	6926      	ldr	r6, [r4, #16]
 8006f72:	60c5      	str	r5, [r0, #12]
 8006f74:	f109 0310 	add.w	r3, r9, #16
 8006f78:	f109 0514 	add.w	r5, r9, #20
 8006f7c:	f104 0e14 	add.w	lr, r4, #20
 8006f80:	f100 0b14 	add.w	fp, r0, #20
 8006f84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	46d9      	mov	r9, fp
 8006f90:	f04f 0c00 	mov.w	ip, #0
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	fa1f f38a 	uxth.w	r3, sl
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	b283      	uxth	r3, r0
 8006fa8:	1acb      	subs	r3, r1, r3
 8006faa:	0c00      	lsrs	r0, r0, #16
 8006fac:	4463      	add	r3, ip
 8006fae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fbc:	4576      	cmp	r6, lr
 8006fbe:	f849 3b04 	str.w	r3, [r9], #4
 8006fc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fc6:	d8e5      	bhi.n	8006f94 <__mdiff+0x88>
 8006fc8:	1b33      	subs	r3, r6, r4
 8006fca:	3b15      	subs	r3, #21
 8006fcc:	f023 0303 	bic.w	r3, r3, #3
 8006fd0:	3415      	adds	r4, #21
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	42a6      	cmp	r6, r4
 8006fd6:	bf38      	it	cc
 8006fd8:	2304      	movcc	r3, #4
 8006fda:	441d      	add	r5, r3
 8006fdc:	445b      	add	r3, fp
 8006fde:	461e      	mov	r6, r3
 8006fe0:	462c      	mov	r4, r5
 8006fe2:	4544      	cmp	r4, r8
 8006fe4:	d30e      	bcc.n	8007004 <__mdiff+0xf8>
 8006fe6:	f108 0103 	add.w	r1, r8, #3
 8006fea:	1b49      	subs	r1, r1, r5
 8006fec:	f021 0103 	bic.w	r1, r1, #3
 8006ff0:	3d03      	subs	r5, #3
 8006ff2:	45a8      	cmp	r8, r5
 8006ff4:	bf38      	it	cc
 8006ff6:	2100      	movcc	r1, #0
 8006ff8:	440b      	add	r3, r1
 8006ffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ffe:	b191      	cbz	r1, 8007026 <__mdiff+0x11a>
 8007000:	6117      	str	r7, [r2, #16]
 8007002:	e79d      	b.n	8006f40 <__mdiff+0x34>
 8007004:	f854 1b04 	ldr.w	r1, [r4], #4
 8007008:	46e6      	mov	lr, ip
 800700a:	0c08      	lsrs	r0, r1, #16
 800700c:	fa1c fc81 	uxtah	ip, ip, r1
 8007010:	4471      	add	r1, lr
 8007012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007016:	b289      	uxth	r1, r1
 8007018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800701c:	f846 1b04 	str.w	r1, [r6], #4
 8007020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007024:	e7dd      	b.n	8006fe2 <__mdiff+0xd6>
 8007026:	3f01      	subs	r7, #1
 8007028:	e7e7      	b.n	8006ffa <__mdiff+0xee>
 800702a:	bf00      	nop
 800702c:	08007cdc 	.word	0x08007cdc
 8007030:	08007ced 	.word	0x08007ced

08007034 <__d2b>:
 8007034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007038:	460f      	mov	r7, r1
 800703a:	2101      	movs	r1, #1
 800703c:	ec59 8b10 	vmov	r8, r9, d0
 8007040:	4616      	mov	r6, r2
 8007042:	f7ff fccd 	bl	80069e0 <_Balloc>
 8007046:	4604      	mov	r4, r0
 8007048:	b930      	cbnz	r0, 8007058 <__d2b+0x24>
 800704a:	4602      	mov	r2, r0
 800704c:	4b23      	ldr	r3, [pc, #140]	@ (80070dc <__d2b+0xa8>)
 800704e:	4824      	ldr	r0, [pc, #144]	@ (80070e0 <__d2b+0xac>)
 8007050:	f240 310f 	movw	r1, #783	@ 0x30f
 8007054:	f000 fa82 	bl	800755c <__assert_func>
 8007058:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800705c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007060:	b10d      	cbz	r5, 8007066 <__d2b+0x32>
 8007062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	f1b8 0300 	subs.w	r3, r8, #0
 800706c:	d023      	beq.n	80070b6 <__d2b+0x82>
 800706e:	4668      	mov	r0, sp
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	f7ff fd7c 	bl	8006b6e <__lo0bits>
 8007076:	e9dd 1200 	ldrd	r1, r2, [sp]
 800707a:	b1d0      	cbz	r0, 80070b2 <__d2b+0x7e>
 800707c:	f1c0 0320 	rsb	r3, r0, #32
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	430b      	orrs	r3, r1
 8007086:	40c2      	lsrs	r2, r0
 8007088:	6163      	str	r3, [r4, #20]
 800708a:	9201      	str	r2, [sp, #4]
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	61a3      	str	r3, [r4, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bf0c      	ite	eq
 8007094:	2201      	moveq	r2, #1
 8007096:	2202      	movne	r2, #2
 8007098:	6122      	str	r2, [r4, #16]
 800709a:	b1a5      	cbz	r5, 80070c6 <__d2b+0x92>
 800709c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070a0:	4405      	add	r5, r0
 80070a2:	603d      	str	r5, [r7, #0]
 80070a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070a8:	6030      	str	r0, [r6, #0]
 80070aa:	4620      	mov	r0, r4
 80070ac:	b003      	add	sp, #12
 80070ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070b2:	6161      	str	r1, [r4, #20]
 80070b4:	e7ea      	b.n	800708c <__d2b+0x58>
 80070b6:	a801      	add	r0, sp, #4
 80070b8:	f7ff fd59 	bl	8006b6e <__lo0bits>
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	6163      	str	r3, [r4, #20]
 80070c0:	3020      	adds	r0, #32
 80070c2:	2201      	movs	r2, #1
 80070c4:	e7e8      	b.n	8007098 <__d2b+0x64>
 80070c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070ce:	6038      	str	r0, [r7, #0]
 80070d0:	6918      	ldr	r0, [r3, #16]
 80070d2:	f7ff fd2d 	bl	8006b30 <__hi0bits>
 80070d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070da:	e7e5      	b.n	80070a8 <__d2b+0x74>
 80070dc:	08007cdc 	.word	0x08007cdc
 80070e0:	08007ced 	.word	0x08007ced

080070e4 <__ssputs_r>:
 80070e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	688e      	ldr	r6, [r1, #8]
 80070ea:	461f      	mov	r7, r3
 80070ec:	42be      	cmp	r6, r7
 80070ee:	680b      	ldr	r3, [r1, #0]
 80070f0:	4682      	mov	sl, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	4690      	mov	r8, r2
 80070f6:	d82d      	bhi.n	8007154 <__ssputs_r+0x70>
 80070f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007100:	d026      	beq.n	8007150 <__ssputs_r+0x6c>
 8007102:	6965      	ldr	r5, [r4, #20]
 8007104:	6909      	ldr	r1, [r1, #16]
 8007106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800710a:	eba3 0901 	sub.w	r9, r3, r1
 800710e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007112:	1c7b      	adds	r3, r7, #1
 8007114:	444b      	add	r3, r9
 8007116:	106d      	asrs	r5, r5, #1
 8007118:	429d      	cmp	r5, r3
 800711a:	bf38      	it	cc
 800711c:	461d      	movcc	r5, r3
 800711e:	0553      	lsls	r3, r2, #21
 8007120:	d527      	bpl.n	8007172 <__ssputs_r+0x8e>
 8007122:	4629      	mov	r1, r5
 8007124:	f7ff fbd0 	bl	80068c8 <_malloc_r>
 8007128:	4606      	mov	r6, r0
 800712a:	b360      	cbz	r0, 8007186 <__ssputs_r+0xa2>
 800712c:	6921      	ldr	r1, [r4, #16]
 800712e:	464a      	mov	r2, r9
 8007130:	f000 fa06 	bl	8007540 <memcpy>
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800713a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	6126      	str	r6, [r4, #16]
 8007142:	6165      	str	r5, [r4, #20]
 8007144:	444e      	add	r6, r9
 8007146:	eba5 0509 	sub.w	r5, r5, r9
 800714a:	6026      	str	r6, [r4, #0]
 800714c:	60a5      	str	r5, [r4, #8]
 800714e:	463e      	mov	r6, r7
 8007150:	42be      	cmp	r6, r7
 8007152:	d900      	bls.n	8007156 <__ssputs_r+0x72>
 8007154:	463e      	mov	r6, r7
 8007156:	6820      	ldr	r0, [r4, #0]
 8007158:	4632      	mov	r2, r6
 800715a:	4641      	mov	r1, r8
 800715c:	f000 f9c6 	bl	80074ec <memmove>
 8007160:	68a3      	ldr	r3, [r4, #8]
 8007162:	1b9b      	subs	r3, r3, r6
 8007164:	60a3      	str	r3, [r4, #8]
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	4433      	add	r3, r6
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	2000      	movs	r0, #0
 800716e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007172:	462a      	mov	r2, r5
 8007174:	f000 fa36 	bl	80075e4 <_realloc_r>
 8007178:	4606      	mov	r6, r0
 800717a:	2800      	cmp	r0, #0
 800717c:	d1e0      	bne.n	8007140 <__ssputs_r+0x5c>
 800717e:	6921      	ldr	r1, [r4, #16]
 8007180:	4650      	mov	r0, sl
 8007182:	f7ff fb2d 	bl	80067e0 <_free_r>
 8007186:	230c      	movs	r3, #12
 8007188:	f8ca 3000 	str.w	r3, [sl]
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	e7e9      	b.n	800716e <__ssputs_r+0x8a>
	...

0800719c <_svfiprintf_r>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	4698      	mov	r8, r3
 80071a2:	898b      	ldrh	r3, [r1, #12]
 80071a4:	061b      	lsls	r3, r3, #24
 80071a6:	b09d      	sub	sp, #116	@ 0x74
 80071a8:	4607      	mov	r7, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	4614      	mov	r4, r2
 80071ae:	d510      	bpl.n	80071d2 <_svfiprintf_r+0x36>
 80071b0:	690b      	ldr	r3, [r1, #16]
 80071b2:	b973      	cbnz	r3, 80071d2 <_svfiprintf_r+0x36>
 80071b4:	2140      	movs	r1, #64	@ 0x40
 80071b6:	f7ff fb87 	bl	80068c8 <_malloc_r>
 80071ba:	6028      	str	r0, [r5, #0]
 80071bc:	6128      	str	r0, [r5, #16]
 80071be:	b930      	cbnz	r0, 80071ce <_svfiprintf_r+0x32>
 80071c0:	230c      	movs	r3, #12
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	b01d      	add	sp, #116	@ 0x74
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	2340      	movs	r3, #64	@ 0x40
 80071d0:	616b      	str	r3, [r5, #20]
 80071d2:	2300      	movs	r3, #0
 80071d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071d6:	2320      	movs	r3, #32
 80071d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e0:	2330      	movs	r3, #48	@ 0x30
 80071e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007380 <_svfiprintf_r+0x1e4>
 80071e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071ea:	f04f 0901 	mov.w	r9, #1
 80071ee:	4623      	mov	r3, r4
 80071f0:	469a      	mov	sl, r3
 80071f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f6:	b10a      	cbz	r2, 80071fc <_svfiprintf_r+0x60>
 80071f8:	2a25      	cmp	r2, #37	@ 0x25
 80071fa:	d1f9      	bne.n	80071f0 <_svfiprintf_r+0x54>
 80071fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007200:	d00b      	beq.n	800721a <_svfiprintf_r+0x7e>
 8007202:	465b      	mov	r3, fp
 8007204:	4622      	mov	r2, r4
 8007206:	4629      	mov	r1, r5
 8007208:	4638      	mov	r0, r7
 800720a:	f7ff ff6b 	bl	80070e4 <__ssputs_r>
 800720e:	3001      	adds	r0, #1
 8007210:	f000 80a7 	beq.w	8007362 <_svfiprintf_r+0x1c6>
 8007214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007216:	445a      	add	r2, fp
 8007218:	9209      	str	r2, [sp, #36]	@ 0x24
 800721a:	f89a 3000 	ldrb.w	r3, [sl]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 809f 	beq.w	8007362 <_svfiprintf_r+0x1c6>
 8007224:	2300      	movs	r3, #0
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800722e:	f10a 0a01 	add.w	sl, sl, #1
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	9307      	str	r3, [sp, #28]
 8007236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800723a:	931a      	str	r3, [sp, #104]	@ 0x68
 800723c:	4654      	mov	r4, sl
 800723e:	2205      	movs	r2, #5
 8007240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007244:	484e      	ldr	r0, [pc, #312]	@ (8007380 <_svfiprintf_r+0x1e4>)
 8007246:	f7f8 ffcb 	bl	80001e0 <memchr>
 800724a:	9a04      	ldr	r2, [sp, #16]
 800724c:	b9d8      	cbnz	r0, 8007286 <_svfiprintf_r+0xea>
 800724e:	06d0      	lsls	r0, r2, #27
 8007250:	bf44      	itt	mi
 8007252:	2320      	movmi	r3, #32
 8007254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007258:	0711      	lsls	r1, r2, #28
 800725a:	bf44      	itt	mi
 800725c:	232b      	movmi	r3, #43	@ 0x2b
 800725e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007262:	f89a 3000 	ldrb.w	r3, [sl]
 8007266:	2b2a      	cmp	r3, #42	@ 0x2a
 8007268:	d015      	beq.n	8007296 <_svfiprintf_r+0xfa>
 800726a:	9a07      	ldr	r2, [sp, #28]
 800726c:	4654      	mov	r4, sl
 800726e:	2000      	movs	r0, #0
 8007270:	f04f 0c0a 	mov.w	ip, #10
 8007274:	4621      	mov	r1, r4
 8007276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727a:	3b30      	subs	r3, #48	@ 0x30
 800727c:	2b09      	cmp	r3, #9
 800727e:	d94b      	bls.n	8007318 <_svfiprintf_r+0x17c>
 8007280:	b1b0      	cbz	r0, 80072b0 <_svfiprintf_r+0x114>
 8007282:	9207      	str	r2, [sp, #28]
 8007284:	e014      	b.n	80072b0 <_svfiprintf_r+0x114>
 8007286:	eba0 0308 	sub.w	r3, r0, r8
 800728a:	fa09 f303 	lsl.w	r3, r9, r3
 800728e:	4313      	orrs	r3, r2
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	46a2      	mov	sl, r4
 8007294:	e7d2      	b.n	800723c <_svfiprintf_r+0xa0>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	9103      	str	r1, [sp, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bfbb      	ittet	lt
 80072a2:	425b      	neglt	r3, r3
 80072a4:	f042 0202 	orrlt.w	r2, r2, #2
 80072a8:	9307      	strge	r3, [sp, #28]
 80072aa:	9307      	strlt	r3, [sp, #28]
 80072ac:	bfb8      	it	lt
 80072ae:	9204      	strlt	r2, [sp, #16]
 80072b0:	7823      	ldrb	r3, [r4, #0]
 80072b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80072b4:	d10a      	bne.n	80072cc <_svfiprintf_r+0x130>
 80072b6:	7863      	ldrb	r3, [r4, #1]
 80072b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072ba:	d132      	bne.n	8007322 <_svfiprintf_r+0x186>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	9203      	str	r2, [sp, #12]
 80072c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072c8:	3402      	adds	r4, #2
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007390 <_svfiprintf_r+0x1f4>
 80072d0:	7821      	ldrb	r1, [r4, #0]
 80072d2:	2203      	movs	r2, #3
 80072d4:	4650      	mov	r0, sl
 80072d6:	f7f8 ff83 	bl	80001e0 <memchr>
 80072da:	b138      	cbz	r0, 80072ec <_svfiprintf_r+0x150>
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	eba0 000a 	sub.w	r0, r0, sl
 80072e2:	2240      	movs	r2, #64	@ 0x40
 80072e4:	4082      	lsls	r2, r0
 80072e6:	4313      	orrs	r3, r2
 80072e8:	3401      	adds	r4, #1
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f0:	4824      	ldr	r0, [pc, #144]	@ (8007384 <_svfiprintf_r+0x1e8>)
 80072f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072f6:	2206      	movs	r2, #6
 80072f8:	f7f8 ff72 	bl	80001e0 <memchr>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d036      	beq.n	800736e <_svfiprintf_r+0x1d2>
 8007300:	4b21      	ldr	r3, [pc, #132]	@ (8007388 <_svfiprintf_r+0x1ec>)
 8007302:	bb1b      	cbnz	r3, 800734c <_svfiprintf_r+0x1b0>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	3307      	adds	r3, #7
 8007308:	f023 0307 	bic.w	r3, r3, #7
 800730c:	3308      	adds	r3, #8
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007312:	4433      	add	r3, r6
 8007314:	9309      	str	r3, [sp, #36]	@ 0x24
 8007316:	e76a      	b.n	80071ee <_svfiprintf_r+0x52>
 8007318:	fb0c 3202 	mla	r2, ip, r2, r3
 800731c:	460c      	mov	r4, r1
 800731e:	2001      	movs	r0, #1
 8007320:	e7a8      	b.n	8007274 <_svfiprintf_r+0xd8>
 8007322:	2300      	movs	r3, #0
 8007324:	3401      	adds	r4, #1
 8007326:	9305      	str	r3, [sp, #20]
 8007328:	4619      	mov	r1, r3
 800732a:	f04f 0c0a 	mov.w	ip, #10
 800732e:	4620      	mov	r0, r4
 8007330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007334:	3a30      	subs	r2, #48	@ 0x30
 8007336:	2a09      	cmp	r2, #9
 8007338:	d903      	bls.n	8007342 <_svfiprintf_r+0x1a6>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0c6      	beq.n	80072cc <_svfiprintf_r+0x130>
 800733e:	9105      	str	r1, [sp, #20]
 8007340:	e7c4      	b.n	80072cc <_svfiprintf_r+0x130>
 8007342:	fb0c 2101 	mla	r1, ip, r1, r2
 8007346:	4604      	mov	r4, r0
 8007348:	2301      	movs	r3, #1
 800734a:	e7f0      	b.n	800732e <_svfiprintf_r+0x192>
 800734c:	ab03      	add	r3, sp, #12
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	462a      	mov	r2, r5
 8007352:	4b0e      	ldr	r3, [pc, #56]	@ (800738c <_svfiprintf_r+0x1f0>)
 8007354:	a904      	add	r1, sp, #16
 8007356:	4638      	mov	r0, r7
 8007358:	f7fd fe84 	bl	8005064 <_printf_float>
 800735c:	1c42      	adds	r2, r0, #1
 800735e:	4606      	mov	r6, r0
 8007360:	d1d6      	bne.n	8007310 <_svfiprintf_r+0x174>
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	065b      	lsls	r3, r3, #25
 8007366:	f53f af2d 	bmi.w	80071c4 <_svfiprintf_r+0x28>
 800736a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800736c:	e72c      	b.n	80071c8 <_svfiprintf_r+0x2c>
 800736e:	ab03      	add	r3, sp, #12
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	462a      	mov	r2, r5
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <_svfiprintf_r+0x1f0>)
 8007376:	a904      	add	r1, sp, #16
 8007378:	4638      	mov	r0, r7
 800737a:	f7fe f90b 	bl	8005594 <_printf_i>
 800737e:	e7ed      	b.n	800735c <_svfiprintf_r+0x1c0>
 8007380:	08007e48 	.word	0x08007e48
 8007384:	08007e52 	.word	0x08007e52
 8007388:	08005065 	.word	0x08005065
 800738c:	080070e5 	.word	0x080070e5
 8007390:	08007e4e 	.word	0x08007e4e

08007394 <__sflush_r>:
 8007394:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	0716      	lsls	r6, r2, #28
 800739e:	4605      	mov	r5, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	d454      	bmi.n	800744e <__sflush_r+0xba>
 80073a4:	684b      	ldr	r3, [r1, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dc02      	bgt.n	80073b0 <__sflush_r+0x1c>
 80073aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd48      	ble.n	8007442 <__sflush_r+0xae>
 80073b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d045      	beq.n	8007442 <__sflush_r+0xae>
 80073b6:	2300      	movs	r3, #0
 80073b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073bc:	682f      	ldr	r7, [r5, #0]
 80073be:	6a21      	ldr	r1, [r4, #32]
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	d030      	beq.n	8007426 <__sflush_r+0x92>
 80073c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	0759      	lsls	r1, r3, #29
 80073ca:	d505      	bpl.n	80073d8 <__sflush_r+0x44>
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073d2:	b10b      	cbz	r3, 80073d8 <__sflush_r+0x44>
 80073d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	2300      	movs	r3, #0
 80073da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073dc:	6a21      	ldr	r1, [r4, #32]
 80073de:	4628      	mov	r0, r5
 80073e0:	47b0      	blx	r6
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	d106      	bne.n	80073f6 <__sflush_r+0x62>
 80073e8:	6829      	ldr	r1, [r5, #0]
 80073ea:	291d      	cmp	r1, #29
 80073ec:	d82b      	bhi.n	8007446 <__sflush_r+0xb2>
 80073ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007498 <__sflush_r+0x104>)
 80073f0:	410a      	asrs	r2, r1
 80073f2:	07d6      	lsls	r6, r2, #31
 80073f4:	d427      	bmi.n	8007446 <__sflush_r+0xb2>
 80073f6:	2200      	movs	r2, #0
 80073f8:	6062      	str	r2, [r4, #4]
 80073fa:	04d9      	lsls	r1, r3, #19
 80073fc:	6922      	ldr	r2, [r4, #16]
 80073fe:	6022      	str	r2, [r4, #0]
 8007400:	d504      	bpl.n	800740c <__sflush_r+0x78>
 8007402:	1c42      	adds	r2, r0, #1
 8007404:	d101      	bne.n	800740a <__sflush_r+0x76>
 8007406:	682b      	ldr	r3, [r5, #0]
 8007408:	b903      	cbnz	r3, 800740c <__sflush_r+0x78>
 800740a:	6560      	str	r0, [r4, #84]	@ 0x54
 800740c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800740e:	602f      	str	r7, [r5, #0]
 8007410:	b1b9      	cbz	r1, 8007442 <__sflush_r+0xae>
 8007412:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007416:	4299      	cmp	r1, r3
 8007418:	d002      	beq.n	8007420 <__sflush_r+0x8c>
 800741a:	4628      	mov	r0, r5
 800741c:	f7ff f9e0 	bl	80067e0 <_free_r>
 8007420:	2300      	movs	r3, #0
 8007422:	6363      	str	r3, [r4, #52]	@ 0x34
 8007424:	e00d      	b.n	8007442 <__sflush_r+0xae>
 8007426:	2301      	movs	r3, #1
 8007428:	4628      	mov	r0, r5
 800742a:	47b0      	blx	r6
 800742c:	4602      	mov	r2, r0
 800742e:	1c50      	adds	r0, r2, #1
 8007430:	d1c9      	bne.n	80073c6 <__sflush_r+0x32>
 8007432:	682b      	ldr	r3, [r5, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0c6      	beq.n	80073c6 <__sflush_r+0x32>
 8007438:	2b1d      	cmp	r3, #29
 800743a:	d001      	beq.n	8007440 <__sflush_r+0xac>
 800743c:	2b16      	cmp	r3, #22
 800743e:	d11e      	bne.n	800747e <__sflush_r+0xea>
 8007440:	602f      	str	r7, [r5, #0]
 8007442:	2000      	movs	r0, #0
 8007444:	e022      	b.n	800748c <__sflush_r+0xf8>
 8007446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744a:	b21b      	sxth	r3, r3
 800744c:	e01b      	b.n	8007486 <__sflush_r+0xf2>
 800744e:	690f      	ldr	r7, [r1, #16]
 8007450:	2f00      	cmp	r7, #0
 8007452:	d0f6      	beq.n	8007442 <__sflush_r+0xae>
 8007454:	0793      	lsls	r3, r2, #30
 8007456:	680e      	ldr	r6, [r1, #0]
 8007458:	bf08      	it	eq
 800745a:	694b      	ldreq	r3, [r1, #20]
 800745c:	600f      	str	r7, [r1, #0]
 800745e:	bf18      	it	ne
 8007460:	2300      	movne	r3, #0
 8007462:	eba6 0807 	sub.w	r8, r6, r7
 8007466:	608b      	str	r3, [r1, #8]
 8007468:	f1b8 0f00 	cmp.w	r8, #0
 800746c:	dde9      	ble.n	8007442 <__sflush_r+0xae>
 800746e:	6a21      	ldr	r1, [r4, #32]
 8007470:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007472:	4643      	mov	r3, r8
 8007474:	463a      	mov	r2, r7
 8007476:	4628      	mov	r0, r5
 8007478:	47b0      	blx	r6
 800747a:	2800      	cmp	r0, #0
 800747c:	dc08      	bgt.n	8007490 <__sflush_r+0xfc>
 800747e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007486:	81a3      	strh	r3, [r4, #12]
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007490:	4407      	add	r7, r0
 8007492:	eba8 0800 	sub.w	r8, r8, r0
 8007496:	e7e7      	b.n	8007468 <__sflush_r+0xd4>
 8007498:	dfbffffe 	.word	0xdfbffffe

0800749c <_fflush_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	690b      	ldr	r3, [r1, #16]
 80074a0:	4605      	mov	r5, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	b913      	cbnz	r3, 80074ac <_fflush_r+0x10>
 80074a6:	2500      	movs	r5, #0
 80074a8:	4628      	mov	r0, r5
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	b118      	cbz	r0, 80074b6 <_fflush_r+0x1a>
 80074ae:	6a03      	ldr	r3, [r0, #32]
 80074b0:	b90b      	cbnz	r3, 80074b6 <_fflush_r+0x1a>
 80074b2:	f7fe fa1b 	bl	80058ec <__sinit>
 80074b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f3      	beq.n	80074a6 <_fflush_r+0xa>
 80074be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074c0:	07d0      	lsls	r0, r2, #31
 80074c2:	d404      	bmi.n	80074ce <_fflush_r+0x32>
 80074c4:	0599      	lsls	r1, r3, #22
 80074c6:	d402      	bmi.n	80074ce <_fflush_r+0x32>
 80074c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ca:	f7fe fb3a 	bl	8005b42 <__retarget_lock_acquire_recursive>
 80074ce:	4628      	mov	r0, r5
 80074d0:	4621      	mov	r1, r4
 80074d2:	f7ff ff5f 	bl	8007394 <__sflush_r>
 80074d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074d8:	07da      	lsls	r2, r3, #31
 80074da:	4605      	mov	r5, r0
 80074dc:	d4e4      	bmi.n	80074a8 <_fflush_r+0xc>
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	059b      	lsls	r3, r3, #22
 80074e2:	d4e1      	bmi.n	80074a8 <_fflush_r+0xc>
 80074e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074e6:	f7fe fb2d 	bl	8005b44 <__retarget_lock_release_recursive>
 80074ea:	e7dd      	b.n	80074a8 <_fflush_r+0xc>

080074ec <memmove>:
 80074ec:	4288      	cmp	r0, r1
 80074ee:	b510      	push	{r4, lr}
 80074f0:	eb01 0402 	add.w	r4, r1, r2
 80074f4:	d902      	bls.n	80074fc <memmove+0x10>
 80074f6:	4284      	cmp	r4, r0
 80074f8:	4623      	mov	r3, r4
 80074fa:	d807      	bhi.n	800750c <memmove+0x20>
 80074fc:	1e43      	subs	r3, r0, #1
 80074fe:	42a1      	cmp	r1, r4
 8007500:	d008      	beq.n	8007514 <memmove+0x28>
 8007502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800750a:	e7f8      	b.n	80074fe <memmove+0x12>
 800750c:	4402      	add	r2, r0
 800750e:	4601      	mov	r1, r0
 8007510:	428a      	cmp	r2, r1
 8007512:	d100      	bne.n	8007516 <memmove+0x2a>
 8007514:	bd10      	pop	{r4, pc}
 8007516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800751a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800751e:	e7f7      	b.n	8007510 <memmove+0x24>

08007520 <_sbrk_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d06      	ldr	r5, [pc, #24]	@ (800753c <_sbrk_r+0x1c>)
 8007524:	2300      	movs	r3, #0
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	602b      	str	r3, [r5, #0]
 800752c:	f7fa f84a 	bl	80015c4 <_sbrk>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_sbrk_r+0x1a>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_sbrk_r+0x1a>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	200004a0 	.word	0x200004a0

08007540 <memcpy>:
 8007540:	440a      	add	r2, r1
 8007542:	4291      	cmp	r1, r2
 8007544:	f100 33ff 	add.w	r3, r0, #4294967295
 8007548:	d100      	bne.n	800754c <memcpy+0xc>
 800754a:	4770      	bx	lr
 800754c:	b510      	push	{r4, lr}
 800754e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007556:	4291      	cmp	r1, r2
 8007558:	d1f9      	bne.n	800754e <memcpy+0xe>
 800755a:	bd10      	pop	{r4, pc}

0800755c <__assert_func>:
 800755c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800755e:	4614      	mov	r4, r2
 8007560:	461a      	mov	r2, r3
 8007562:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <__assert_func+0x2c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4605      	mov	r5, r0
 8007568:	68d8      	ldr	r0, [r3, #12]
 800756a:	b954      	cbnz	r4, 8007582 <__assert_func+0x26>
 800756c:	4b07      	ldr	r3, [pc, #28]	@ (800758c <__assert_func+0x30>)
 800756e:	461c      	mov	r4, r3
 8007570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007574:	9100      	str	r1, [sp, #0]
 8007576:	462b      	mov	r3, r5
 8007578:	4905      	ldr	r1, [pc, #20]	@ (8007590 <__assert_func+0x34>)
 800757a:	f000 f86f 	bl	800765c <fiprintf>
 800757e:	f000 f87f 	bl	8007680 <abort>
 8007582:	4b04      	ldr	r3, [pc, #16]	@ (8007594 <__assert_func+0x38>)
 8007584:	e7f4      	b.n	8007570 <__assert_func+0x14>
 8007586:	bf00      	nop
 8007588:	2000001c 	.word	0x2000001c
 800758c:	08007e9e 	.word	0x08007e9e
 8007590:	08007e70 	.word	0x08007e70
 8007594:	08007e63 	.word	0x08007e63

08007598 <_calloc_r>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	fba1 5402 	umull	r5, r4, r1, r2
 800759e:	b93c      	cbnz	r4, 80075b0 <_calloc_r+0x18>
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7ff f991 	bl	80068c8 <_malloc_r>
 80075a6:	4606      	mov	r6, r0
 80075a8:	b928      	cbnz	r0, 80075b6 <_calloc_r+0x1e>
 80075aa:	2600      	movs	r6, #0
 80075ac:	4630      	mov	r0, r6
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	220c      	movs	r2, #12
 80075b2:	6002      	str	r2, [r0, #0]
 80075b4:	e7f9      	b.n	80075aa <_calloc_r+0x12>
 80075b6:	462a      	mov	r2, r5
 80075b8:	4621      	mov	r1, r4
 80075ba:	f7fe fa44 	bl	8005a46 <memset>
 80075be:	e7f5      	b.n	80075ac <_calloc_r+0x14>

080075c0 <__ascii_mbtowc>:
 80075c0:	b082      	sub	sp, #8
 80075c2:	b901      	cbnz	r1, 80075c6 <__ascii_mbtowc+0x6>
 80075c4:	a901      	add	r1, sp, #4
 80075c6:	b142      	cbz	r2, 80075da <__ascii_mbtowc+0x1a>
 80075c8:	b14b      	cbz	r3, 80075de <__ascii_mbtowc+0x1e>
 80075ca:	7813      	ldrb	r3, [r2, #0]
 80075cc:	600b      	str	r3, [r1, #0]
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	1e10      	subs	r0, r2, #0
 80075d2:	bf18      	it	ne
 80075d4:	2001      	movne	r0, #1
 80075d6:	b002      	add	sp, #8
 80075d8:	4770      	bx	lr
 80075da:	4610      	mov	r0, r2
 80075dc:	e7fb      	b.n	80075d6 <__ascii_mbtowc+0x16>
 80075de:	f06f 0001 	mvn.w	r0, #1
 80075e2:	e7f8      	b.n	80075d6 <__ascii_mbtowc+0x16>

080075e4 <_realloc_r>:
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	4680      	mov	r8, r0
 80075ea:	4615      	mov	r5, r2
 80075ec:	460c      	mov	r4, r1
 80075ee:	b921      	cbnz	r1, 80075fa <_realloc_r+0x16>
 80075f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f4:	4611      	mov	r1, r2
 80075f6:	f7ff b967 	b.w	80068c8 <_malloc_r>
 80075fa:	b92a      	cbnz	r2, 8007608 <_realloc_r+0x24>
 80075fc:	f7ff f8f0 	bl	80067e0 <_free_r>
 8007600:	2400      	movs	r4, #0
 8007602:	4620      	mov	r0, r4
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007608:	f000 f841 	bl	800768e <_malloc_usable_size_r>
 800760c:	4285      	cmp	r5, r0
 800760e:	4606      	mov	r6, r0
 8007610:	d802      	bhi.n	8007618 <_realloc_r+0x34>
 8007612:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007616:	d8f4      	bhi.n	8007602 <_realloc_r+0x1e>
 8007618:	4629      	mov	r1, r5
 800761a:	4640      	mov	r0, r8
 800761c:	f7ff f954 	bl	80068c8 <_malloc_r>
 8007620:	4607      	mov	r7, r0
 8007622:	2800      	cmp	r0, #0
 8007624:	d0ec      	beq.n	8007600 <_realloc_r+0x1c>
 8007626:	42b5      	cmp	r5, r6
 8007628:	462a      	mov	r2, r5
 800762a:	4621      	mov	r1, r4
 800762c:	bf28      	it	cs
 800762e:	4632      	movcs	r2, r6
 8007630:	f7ff ff86 	bl	8007540 <memcpy>
 8007634:	4621      	mov	r1, r4
 8007636:	4640      	mov	r0, r8
 8007638:	f7ff f8d2 	bl	80067e0 <_free_r>
 800763c:	463c      	mov	r4, r7
 800763e:	e7e0      	b.n	8007602 <_realloc_r+0x1e>

08007640 <__ascii_wctomb>:
 8007640:	4603      	mov	r3, r0
 8007642:	4608      	mov	r0, r1
 8007644:	b141      	cbz	r1, 8007658 <__ascii_wctomb+0x18>
 8007646:	2aff      	cmp	r2, #255	@ 0xff
 8007648:	d904      	bls.n	8007654 <__ascii_wctomb+0x14>
 800764a:	228a      	movs	r2, #138	@ 0x8a
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f04f 30ff 	mov.w	r0, #4294967295
 8007652:	4770      	bx	lr
 8007654:	700a      	strb	r2, [r1, #0]
 8007656:	2001      	movs	r0, #1
 8007658:	4770      	bx	lr
	...

0800765c <fiprintf>:
 800765c:	b40e      	push	{r1, r2, r3}
 800765e:	b503      	push	{r0, r1, lr}
 8007660:	4601      	mov	r1, r0
 8007662:	ab03      	add	r3, sp, #12
 8007664:	4805      	ldr	r0, [pc, #20]	@ (800767c <fiprintf+0x20>)
 8007666:	f853 2b04 	ldr.w	r2, [r3], #4
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	f000 f83f 	bl	80076f0 <_vfiprintf_r>
 8007672:	b002      	add	sp, #8
 8007674:	f85d eb04 	ldr.w	lr, [sp], #4
 8007678:	b003      	add	sp, #12
 800767a:	4770      	bx	lr
 800767c:	2000001c 	.word	0x2000001c

08007680 <abort>:
 8007680:	b508      	push	{r3, lr}
 8007682:	2006      	movs	r0, #6
 8007684:	f000 fa08 	bl	8007a98 <raise>
 8007688:	2001      	movs	r0, #1
 800768a:	f7f9 ff23 	bl	80014d4 <_exit>

0800768e <_malloc_usable_size_r>:
 800768e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007692:	1f18      	subs	r0, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfbc      	itt	lt
 8007698:	580b      	ldrlt	r3, [r1, r0]
 800769a:	18c0      	addlt	r0, r0, r3
 800769c:	4770      	bx	lr

0800769e <__sfputc_r>:
 800769e:	6893      	ldr	r3, [r2, #8]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	b410      	push	{r4}
 80076a6:	6093      	str	r3, [r2, #8]
 80076a8:	da08      	bge.n	80076bc <__sfputc_r+0x1e>
 80076aa:	6994      	ldr	r4, [r2, #24]
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	db01      	blt.n	80076b4 <__sfputc_r+0x16>
 80076b0:	290a      	cmp	r1, #10
 80076b2:	d103      	bne.n	80076bc <__sfputc_r+0x1e>
 80076b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b8:	f000 b932 	b.w	8007920 <__swbuf_r>
 80076bc:	6813      	ldr	r3, [r2, #0]
 80076be:	1c58      	adds	r0, r3, #1
 80076c0:	6010      	str	r0, [r2, #0]
 80076c2:	7019      	strb	r1, [r3, #0]
 80076c4:	4608      	mov	r0, r1
 80076c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <__sfputs_r>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	4606      	mov	r6, r0
 80076d0:	460f      	mov	r7, r1
 80076d2:	4614      	mov	r4, r2
 80076d4:	18d5      	adds	r5, r2, r3
 80076d6:	42ac      	cmp	r4, r5
 80076d8:	d101      	bne.n	80076de <__sfputs_r+0x12>
 80076da:	2000      	movs	r0, #0
 80076dc:	e007      	b.n	80076ee <__sfputs_r+0x22>
 80076de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e2:	463a      	mov	r2, r7
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff ffda 	bl	800769e <__sfputc_r>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d1f3      	bne.n	80076d6 <__sfputs_r+0xa>
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076f0 <_vfiprintf_r>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	460d      	mov	r5, r1
 80076f6:	b09d      	sub	sp, #116	@ 0x74
 80076f8:	4614      	mov	r4, r2
 80076fa:	4698      	mov	r8, r3
 80076fc:	4606      	mov	r6, r0
 80076fe:	b118      	cbz	r0, 8007708 <_vfiprintf_r+0x18>
 8007700:	6a03      	ldr	r3, [r0, #32]
 8007702:	b90b      	cbnz	r3, 8007708 <_vfiprintf_r+0x18>
 8007704:	f7fe f8f2 	bl	80058ec <__sinit>
 8007708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800770a:	07d9      	lsls	r1, r3, #31
 800770c:	d405      	bmi.n	800771a <_vfiprintf_r+0x2a>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	059a      	lsls	r2, r3, #22
 8007712:	d402      	bmi.n	800771a <_vfiprintf_r+0x2a>
 8007714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007716:	f7fe fa14 	bl	8005b42 <__retarget_lock_acquire_recursive>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	071b      	lsls	r3, r3, #28
 800771e:	d501      	bpl.n	8007724 <_vfiprintf_r+0x34>
 8007720:	692b      	ldr	r3, [r5, #16]
 8007722:	b99b      	cbnz	r3, 800774c <_vfiprintf_r+0x5c>
 8007724:	4629      	mov	r1, r5
 8007726:	4630      	mov	r0, r6
 8007728:	f000 f938 	bl	800799c <__swsetup_r>
 800772c:	b170      	cbz	r0, 800774c <_vfiprintf_r+0x5c>
 800772e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007730:	07dc      	lsls	r4, r3, #31
 8007732:	d504      	bpl.n	800773e <_vfiprintf_r+0x4e>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	b01d      	add	sp, #116	@ 0x74
 800773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	0598      	lsls	r0, r3, #22
 8007742:	d4f7      	bmi.n	8007734 <_vfiprintf_r+0x44>
 8007744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007746:	f7fe f9fd 	bl	8005b44 <__retarget_lock_release_recursive>
 800774a:	e7f3      	b.n	8007734 <_vfiprintf_r+0x44>
 800774c:	2300      	movs	r3, #0
 800774e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007750:	2320      	movs	r3, #32
 8007752:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007756:	f8cd 800c 	str.w	r8, [sp, #12]
 800775a:	2330      	movs	r3, #48	@ 0x30
 800775c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800790c <_vfiprintf_r+0x21c>
 8007760:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007764:	f04f 0901 	mov.w	r9, #1
 8007768:	4623      	mov	r3, r4
 800776a:	469a      	mov	sl, r3
 800776c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007770:	b10a      	cbz	r2, 8007776 <_vfiprintf_r+0x86>
 8007772:	2a25      	cmp	r2, #37	@ 0x25
 8007774:	d1f9      	bne.n	800776a <_vfiprintf_r+0x7a>
 8007776:	ebba 0b04 	subs.w	fp, sl, r4
 800777a:	d00b      	beq.n	8007794 <_vfiprintf_r+0xa4>
 800777c:	465b      	mov	r3, fp
 800777e:	4622      	mov	r2, r4
 8007780:	4629      	mov	r1, r5
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff ffa2 	bl	80076cc <__sfputs_r>
 8007788:	3001      	adds	r0, #1
 800778a:	f000 80a7 	beq.w	80078dc <_vfiprintf_r+0x1ec>
 800778e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007790:	445a      	add	r2, fp
 8007792:	9209      	str	r2, [sp, #36]	@ 0x24
 8007794:	f89a 3000 	ldrb.w	r3, [sl]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 809f 	beq.w	80078dc <_vfiprintf_r+0x1ec>
 800779e:	2300      	movs	r3, #0
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295
 80077a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a8:	f10a 0a01 	add.w	sl, sl, #1
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	9307      	str	r3, [sp, #28]
 80077b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80077b6:	4654      	mov	r4, sl
 80077b8:	2205      	movs	r2, #5
 80077ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077be:	4853      	ldr	r0, [pc, #332]	@ (800790c <_vfiprintf_r+0x21c>)
 80077c0:	f7f8 fd0e 	bl	80001e0 <memchr>
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	b9d8      	cbnz	r0, 8007800 <_vfiprintf_r+0x110>
 80077c8:	06d1      	lsls	r1, r2, #27
 80077ca:	bf44      	itt	mi
 80077cc:	2320      	movmi	r3, #32
 80077ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d2:	0713      	lsls	r3, r2, #28
 80077d4:	bf44      	itt	mi
 80077d6:	232b      	movmi	r3, #43	@ 0x2b
 80077d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077dc:	f89a 3000 	ldrb.w	r3, [sl]
 80077e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e2:	d015      	beq.n	8007810 <_vfiprintf_r+0x120>
 80077e4:	9a07      	ldr	r2, [sp, #28]
 80077e6:	4654      	mov	r4, sl
 80077e8:	2000      	movs	r0, #0
 80077ea:	f04f 0c0a 	mov.w	ip, #10
 80077ee:	4621      	mov	r1, r4
 80077f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f4:	3b30      	subs	r3, #48	@ 0x30
 80077f6:	2b09      	cmp	r3, #9
 80077f8:	d94b      	bls.n	8007892 <_vfiprintf_r+0x1a2>
 80077fa:	b1b0      	cbz	r0, 800782a <_vfiprintf_r+0x13a>
 80077fc:	9207      	str	r2, [sp, #28]
 80077fe:	e014      	b.n	800782a <_vfiprintf_r+0x13a>
 8007800:	eba0 0308 	sub.w	r3, r0, r8
 8007804:	fa09 f303 	lsl.w	r3, r9, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	9304      	str	r3, [sp, #16]
 800780c:	46a2      	mov	sl, r4
 800780e:	e7d2      	b.n	80077b6 <_vfiprintf_r+0xc6>
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	1d19      	adds	r1, r3, #4
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	9103      	str	r1, [sp, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	bfbb      	ittet	lt
 800781c:	425b      	neglt	r3, r3
 800781e:	f042 0202 	orrlt.w	r2, r2, #2
 8007822:	9307      	strge	r3, [sp, #28]
 8007824:	9307      	strlt	r3, [sp, #28]
 8007826:	bfb8      	it	lt
 8007828:	9204      	strlt	r2, [sp, #16]
 800782a:	7823      	ldrb	r3, [r4, #0]
 800782c:	2b2e      	cmp	r3, #46	@ 0x2e
 800782e:	d10a      	bne.n	8007846 <_vfiprintf_r+0x156>
 8007830:	7863      	ldrb	r3, [r4, #1]
 8007832:	2b2a      	cmp	r3, #42	@ 0x2a
 8007834:	d132      	bne.n	800789c <_vfiprintf_r+0x1ac>
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	1d1a      	adds	r2, r3, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	9203      	str	r2, [sp, #12]
 800783e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007842:	3402      	adds	r4, #2
 8007844:	9305      	str	r3, [sp, #20]
 8007846:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800791c <_vfiprintf_r+0x22c>
 800784a:	7821      	ldrb	r1, [r4, #0]
 800784c:	2203      	movs	r2, #3
 800784e:	4650      	mov	r0, sl
 8007850:	f7f8 fcc6 	bl	80001e0 <memchr>
 8007854:	b138      	cbz	r0, 8007866 <_vfiprintf_r+0x176>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	eba0 000a 	sub.w	r0, r0, sl
 800785c:	2240      	movs	r2, #64	@ 0x40
 800785e:	4082      	lsls	r2, r0
 8007860:	4313      	orrs	r3, r2
 8007862:	3401      	adds	r4, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786a:	4829      	ldr	r0, [pc, #164]	@ (8007910 <_vfiprintf_r+0x220>)
 800786c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007870:	2206      	movs	r2, #6
 8007872:	f7f8 fcb5 	bl	80001e0 <memchr>
 8007876:	2800      	cmp	r0, #0
 8007878:	d03f      	beq.n	80078fa <_vfiprintf_r+0x20a>
 800787a:	4b26      	ldr	r3, [pc, #152]	@ (8007914 <_vfiprintf_r+0x224>)
 800787c:	bb1b      	cbnz	r3, 80078c6 <_vfiprintf_r+0x1d6>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	3307      	adds	r3, #7
 8007882:	f023 0307 	bic.w	r3, r3, #7
 8007886:	3308      	adds	r3, #8
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788c:	443b      	add	r3, r7
 800788e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007890:	e76a      	b.n	8007768 <_vfiprintf_r+0x78>
 8007892:	fb0c 3202 	mla	r2, ip, r2, r3
 8007896:	460c      	mov	r4, r1
 8007898:	2001      	movs	r0, #1
 800789a:	e7a8      	b.n	80077ee <_vfiprintf_r+0xfe>
 800789c:	2300      	movs	r3, #0
 800789e:	3401      	adds	r4, #1
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	4619      	mov	r1, r3
 80078a4:	f04f 0c0a 	mov.w	ip, #10
 80078a8:	4620      	mov	r0, r4
 80078aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ae:	3a30      	subs	r2, #48	@ 0x30
 80078b0:	2a09      	cmp	r2, #9
 80078b2:	d903      	bls.n	80078bc <_vfiprintf_r+0x1cc>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0c6      	beq.n	8007846 <_vfiprintf_r+0x156>
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	e7c4      	b.n	8007846 <_vfiprintf_r+0x156>
 80078bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c0:	4604      	mov	r4, r0
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f0      	b.n	80078a8 <_vfiprintf_r+0x1b8>
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	4b12      	ldr	r3, [pc, #72]	@ (8007918 <_vfiprintf_r+0x228>)
 80078ce:	a904      	add	r1, sp, #16
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7fd fbc7 	bl	8005064 <_printf_float>
 80078d6:	4607      	mov	r7, r0
 80078d8:	1c78      	adds	r0, r7, #1
 80078da:	d1d6      	bne.n	800788a <_vfiprintf_r+0x19a>
 80078dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078de:	07d9      	lsls	r1, r3, #31
 80078e0:	d405      	bmi.n	80078ee <_vfiprintf_r+0x1fe>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	059a      	lsls	r2, r3, #22
 80078e6:	d402      	bmi.n	80078ee <_vfiprintf_r+0x1fe>
 80078e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ea:	f7fe f92b 	bl	8005b44 <__retarget_lock_release_recursive>
 80078ee:	89ab      	ldrh	r3, [r5, #12]
 80078f0:	065b      	lsls	r3, r3, #25
 80078f2:	f53f af1f 	bmi.w	8007734 <_vfiprintf_r+0x44>
 80078f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078f8:	e71e      	b.n	8007738 <_vfiprintf_r+0x48>
 80078fa:	ab03      	add	r3, sp, #12
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	462a      	mov	r2, r5
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <_vfiprintf_r+0x228>)
 8007902:	a904      	add	r1, sp, #16
 8007904:	4630      	mov	r0, r6
 8007906:	f7fd fe45 	bl	8005594 <_printf_i>
 800790a:	e7e4      	b.n	80078d6 <_vfiprintf_r+0x1e6>
 800790c:	08007e48 	.word	0x08007e48
 8007910:	08007e52 	.word	0x08007e52
 8007914:	08005065 	.word	0x08005065
 8007918:	080076cd 	.word	0x080076cd
 800791c:	08007e4e 	.word	0x08007e4e

08007920 <__swbuf_r>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	460e      	mov	r6, r1
 8007924:	4614      	mov	r4, r2
 8007926:	4605      	mov	r5, r0
 8007928:	b118      	cbz	r0, 8007932 <__swbuf_r+0x12>
 800792a:	6a03      	ldr	r3, [r0, #32]
 800792c:	b90b      	cbnz	r3, 8007932 <__swbuf_r+0x12>
 800792e:	f7fd ffdd 	bl	80058ec <__sinit>
 8007932:	69a3      	ldr	r3, [r4, #24]
 8007934:	60a3      	str	r3, [r4, #8]
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	071a      	lsls	r2, r3, #28
 800793a:	d501      	bpl.n	8007940 <__swbuf_r+0x20>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	b943      	cbnz	r3, 8007952 <__swbuf_r+0x32>
 8007940:	4621      	mov	r1, r4
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f82a 	bl	800799c <__swsetup_r>
 8007948:	b118      	cbz	r0, 8007952 <__swbuf_r+0x32>
 800794a:	f04f 37ff 	mov.w	r7, #4294967295
 800794e:	4638      	mov	r0, r7
 8007950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	6922      	ldr	r2, [r4, #16]
 8007956:	1a98      	subs	r0, r3, r2
 8007958:	6963      	ldr	r3, [r4, #20]
 800795a:	b2f6      	uxtb	r6, r6
 800795c:	4283      	cmp	r3, r0
 800795e:	4637      	mov	r7, r6
 8007960:	dc05      	bgt.n	800796e <__swbuf_r+0x4e>
 8007962:	4621      	mov	r1, r4
 8007964:	4628      	mov	r0, r5
 8007966:	f7ff fd99 	bl	800749c <_fflush_r>
 800796a:	2800      	cmp	r0, #0
 800796c:	d1ed      	bne.n	800794a <__swbuf_r+0x2a>
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	3b01      	subs	r3, #1
 8007972:	60a3      	str	r3, [r4, #8]
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	6022      	str	r2, [r4, #0]
 800797a:	701e      	strb	r6, [r3, #0]
 800797c:	6962      	ldr	r2, [r4, #20]
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	429a      	cmp	r2, r3
 8007982:	d004      	beq.n	800798e <__swbuf_r+0x6e>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	07db      	lsls	r3, r3, #31
 8007988:	d5e1      	bpl.n	800794e <__swbuf_r+0x2e>
 800798a:	2e0a      	cmp	r6, #10
 800798c:	d1df      	bne.n	800794e <__swbuf_r+0x2e>
 800798e:	4621      	mov	r1, r4
 8007990:	4628      	mov	r0, r5
 8007992:	f7ff fd83 	bl	800749c <_fflush_r>
 8007996:	2800      	cmp	r0, #0
 8007998:	d0d9      	beq.n	800794e <__swbuf_r+0x2e>
 800799a:	e7d6      	b.n	800794a <__swbuf_r+0x2a>

0800799c <__swsetup_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4b29      	ldr	r3, [pc, #164]	@ (8007a44 <__swsetup_r+0xa8>)
 80079a0:	4605      	mov	r5, r0
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	460c      	mov	r4, r1
 80079a6:	b118      	cbz	r0, 80079b0 <__swsetup_r+0x14>
 80079a8:	6a03      	ldr	r3, [r0, #32]
 80079aa:	b90b      	cbnz	r3, 80079b0 <__swsetup_r+0x14>
 80079ac:	f7fd ff9e 	bl	80058ec <__sinit>
 80079b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b4:	0719      	lsls	r1, r3, #28
 80079b6:	d422      	bmi.n	80079fe <__swsetup_r+0x62>
 80079b8:	06da      	lsls	r2, r3, #27
 80079ba:	d407      	bmi.n	80079cc <__swsetup_r+0x30>
 80079bc:	2209      	movs	r2, #9
 80079be:	602a      	str	r2, [r5, #0]
 80079c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ca:	e033      	b.n	8007a34 <__swsetup_r+0x98>
 80079cc:	0758      	lsls	r0, r3, #29
 80079ce:	d512      	bpl.n	80079f6 <__swsetup_r+0x5a>
 80079d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079d2:	b141      	cbz	r1, 80079e6 <__swsetup_r+0x4a>
 80079d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079d8:	4299      	cmp	r1, r3
 80079da:	d002      	beq.n	80079e2 <__swsetup_r+0x46>
 80079dc:	4628      	mov	r0, r5
 80079de:	f7fe feff 	bl	80067e0 <_free_r>
 80079e2:	2300      	movs	r3, #0
 80079e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079ec:	81a3      	strh	r3, [r4, #12]
 80079ee:	2300      	movs	r3, #0
 80079f0:	6063      	str	r3, [r4, #4]
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	f043 0308 	orr.w	r3, r3, #8
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	b94b      	cbnz	r3, 8007a16 <__swsetup_r+0x7a>
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a0c:	d003      	beq.n	8007a16 <__swsetup_r+0x7a>
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 f883 	bl	8007b1c <__smakebuf_r>
 8007a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1a:	f013 0201 	ands.w	r2, r3, #1
 8007a1e:	d00a      	beq.n	8007a36 <__swsetup_r+0x9a>
 8007a20:	2200      	movs	r2, #0
 8007a22:	60a2      	str	r2, [r4, #8]
 8007a24:	6962      	ldr	r2, [r4, #20]
 8007a26:	4252      	negs	r2, r2
 8007a28:	61a2      	str	r2, [r4, #24]
 8007a2a:	6922      	ldr	r2, [r4, #16]
 8007a2c:	b942      	cbnz	r2, 8007a40 <__swsetup_r+0xa4>
 8007a2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a32:	d1c5      	bne.n	80079c0 <__swsetup_r+0x24>
 8007a34:	bd38      	pop	{r3, r4, r5, pc}
 8007a36:	0799      	lsls	r1, r3, #30
 8007a38:	bf58      	it	pl
 8007a3a:	6962      	ldrpl	r2, [r4, #20]
 8007a3c:	60a2      	str	r2, [r4, #8]
 8007a3e:	e7f4      	b.n	8007a2a <__swsetup_r+0x8e>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e7f7      	b.n	8007a34 <__swsetup_r+0x98>
 8007a44:	2000001c 	.word	0x2000001c

08007a48 <_raise_r>:
 8007a48:	291f      	cmp	r1, #31
 8007a4a:	b538      	push	{r3, r4, r5, lr}
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	d904      	bls.n	8007a5c <_raise_r+0x14>
 8007a52:	2316      	movs	r3, #22
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a5e:	b112      	cbz	r2, 8007a66 <_raise_r+0x1e>
 8007a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a64:	b94b      	cbnz	r3, 8007a7a <_raise_r+0x32>
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 f830 	bl	8007acc <_getpid_r>
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4601      	mov	r1, r0
 8007a70:	4628      	mov	r0, r5
 8007a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a76:	f000 b817 	b.w	8007aa8 <_kill_r>
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d00a      	beq.n	8007a94 <_raise_r+0x4c>
 8007a7e:	1c59      	adds	r1, r3, #1
 8007a80:	d103      	bne.n	8007a8a <_raise_r+0x42>
 8007a82:	2316      	movs	r3, #22
 8007a84:	6003      	str	r3, [r0, #0]
 8007a86:	2001      	movs	r0, #1
 8007a88:	e7e7      	b.n	8007a5a <_raise_r+0x12>
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a90:	4620      	mov	r0, r4
 8007a92:	4798      	blx	r3
 8007a94:	2000      	movs	r0, #0
 8007a96:	e7e0      	b.n	8007a5a <_raise_r+0x12>

08007a98 <raise>:
 8007a98:	4b02      	ldr	r3, [pc, #8]	@ (8007aa4 <raise+0xc>)
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	f7ff bfd3 	b.w	8007a48 <_raise_r>
 8007aa2:	bf00      	nop
 8007aa4:	2000001c 	.word	0x2000001c

08007aa8 <_kill_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	@ (8007ac8 <_kill_r+0x20>)
 8007aac:	2300      	movs	r3, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	f7f9 fcfd 	bl	80014b4 <_kill>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d102      	bne.n	8007ac4 <_kill_r+0x1c>
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	b103      	cbz	r3, 8007ac4 <_kill_r+0x1c>
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	bf00      	nop
 8007ac8:	200004a0 	.word	0x200004a0

08007acc <_getpid_r>:
 8007acc:	f7f9 bcea 	b.w	80014a4 <_getpid>

08007ad0 <__swhatbuf_r>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	b096      	sub	sp, #88	@ 0x58
 8007adc:	4615      	mov	r5, r2
 8007ade:	461e      	mov	r6, r3
 8007ae0:	da0d      	bge.n	8007afe <__swhatbuf_r+0x2e>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2340      	movne	r3, #64	@ 0x40
 8007af0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007af4:	2000      	movs	r0, #0
 8007af6:	6031      	str	r1, [r6, #0]
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	b016      	add	sp, #88	@ 0x58
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	466a      	mov	r2, sp
 8007b00:	f000 f848 	bl	8007b94 <_fstat_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dbec      	blt.n	8007ae2 <__swhatbuf_r+0x12>
 8007b08:	9901      	ldr	r1, [sp, #4]
 8007b0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b12:	4259      	negs	r1, r3
 8007b14:	4159      	adcs	r1, r3
 8007b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b1a:	e7eb      	b.n	8007af4 <__swhatbuf_r+0x24>

08007b1c <__smakebuf_r>:
 8007b1c:	898b      	ldrh	r3, [r1, #12]
 8007b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b20:	079d      	lsls	r5, r3, #30
 8007b22:	4606      	mov	r6, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	d507      	bpl.n	8007b38 <__smakebuf_r+0x1c>
 8007b28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	6123      	str	r3, [r4, #16]
 8007b30:	2301      	movs	r3, #1
 8007b32:	6163      	str	r3, [r4, #20]
 8007b34:	b003      	add	sp, #12
 8007b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b38:	ab01      	add	r3, sp, #4
 8007b3a:	466a      	mov	r2, sp
 8007b3c:	f7ff ffc8 	bl	8007ad0 <__swhatbuf_r>
 8007b40:	9f00      	ldr	r7, [sp, #0]
 8007b42:	4605      	mov	r5, r0
 8007b44:	4639      	mov	r1, r7
 8007b46:	4630      	mov	r0, r6
 8007b48:	f7fe febe 	bl	80068c8 <_malloc_r>
 8007b4c:	b948      	cbnz	r0, 8007b62 <__smakebuf_r+0x46>
 8007b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b52:	059a      	lsls	r2, r3, #22
 8007b54:	d4ee      	bmi.n	8007b34 <__smakebuf_r+0x18>
 8007b56:	f023 0303 	bic.w	r3, r3, #3
 8007b5a:	f043 0302 	orr.w	r3, r3, #2
 8007b5e:	81a3      	strh	r3, [r4, #12]
 8007b60:	e7e2      	b.n	8007b28 <__smakebuf_r+0xc>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	6020      	str	r0, [r4, #0]
 8007b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b72:	b15b      	cbz	r3, 8007b8c <__smakebuf_r+0x70>
 8007b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f81d 	bl	8007bb8 <_isatty_r>
 8007b7e:	b128      	cbz	r0, 8007b8c <__smakebuf_r+0x70>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	431d      	orrs	r5, r3
 8007b90:	81a5      	strh	r5, [r4, #12]
 8007b92:	e7cf      	b.n	8007b34 <__smakebuf_r+0x18>

08007b94 <_fstat_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	@ (8007bb4 <_fstat_r+0x20>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	f7f9 fce7 	bl	8001574 <_fstat>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d102      	bne.n	8007bb0 <_fstat_r+0x1c>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	b103      	cbz	r3, 8007bb0 <_fstat_r+0x1c>
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200004a0 	.word	0x200004a0

08007bb8 <_isatty_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d06      	ldr	r5, [pc, #24]	@ (8007bd4 <_isatty_r+0x1c>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	f7f9 fce6 	bl	8001594 <_isatty>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_isatty_r+0x1a>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_isatty_r+0x1a>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	200004a0 	.word	0x200004a0

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
