
I2c_1b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007bc0  08007bc0  00008bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f80  08007f80  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007f80  08007f80  00008f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f88  08007f88  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f88  08007f88  00008f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f8c  08007f8c  00008f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007f90  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001d8  08008168  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08008168  000094ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b670  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd4  00000000  00000000  00014878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00016450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000811  00000000  00000000  00016ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016786  00000000  00000000  000176b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d475  00000000  00000000  0002de3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089555  00000000  00000000  0003b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c28  00000000  00000000  000c484c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c8474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ba8 	.word	0x08007ba8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007ba8 	.word	0x08007ba8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fbe1 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f84f 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f931 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 f90f 	bl	80010dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 f8e3 	bl	8001088 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ec2:	f000 f8b3 	bl	800102c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Master_Transmit(&hi2c1, (LM75_ADDRESS << 0), &LM75_REGISTER, 1, 100);
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <main+0x8c>)
 8000ec8:	8819      	ldrh	r1, [r3, #0]
 8000eca:	2364      	movs	r3, #100	@ 0x64
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4a19      	ldr	r2, [pc, #100]	@ (8000f38 <main+0x90>)
 8000ed2:	481a      	ldr	r0, [pc, #104]	@ (8000f3c <main+0x94>)
 8000ed4:	f001 fc5a 	bl	800278c <HAL_I2C_Master_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	int length;
	if (HAL_I2C_Master_Receive(&hi2c1, (LM75_ADDRESS << 1), &temp_reading, 1, 100) == HAL_OK) {
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <main+0x8c>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	b299      	uxth	r1, r3
 8000ee0:	2364      	movs	r3, #100	@ 0x64
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <main+0x98>)
 8000ee8:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <main+0x94>)
 8000eea:	f001 fd4d 	bl	8002988 <HAL_I2C_Master_Receive>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10c      	bne.n	8000f0e <main+0x66>
		length = snprintf(buffer_uart, sizeof(buffer_uart),	"Temperature: %d %cC;\n", temp_reading, 176);
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <main+0x98>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	23b0      	movs	r3, #176	@ 0xb0
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4613      	mov	r3, r2
 8000f00:	4a10      	ldr	r2, [pc, #64]	@ (8000f44 <main+0x9c>)
 8000f02:	2164      	movs	r1, #100	@ 0x64
 8000f04:	4810      	ldr	r0, [pc, #64]	@ (8000f48 <main+0xa0>)
 8000f06:	f004 fd0d 	bl	8005924 <sniprintf>
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	e005      	b.n	8000f1a <main+0x72>
	}
	else {
		length = snprintf(buffer_uart, sizeof(buffer_uart),	"Error in reading!\n");
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <main+0xa4>)
 8000f10:	2164      	movs	r1, #100	@ 0x64
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <main+0xa0>)
 8000f14:	f004 fd06 	bl	8005924 <sniprintf>
 8000f18:	6078      	str	r0, [r7, #4]
	}
	HAL_UART_Transmit_DMA(&huart2, buffer_uart, length);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4909      	ldr	r1, [pc, #36]	@ (8000f48 <main+0xa0>)
 8000f22:	480b      	ldr	r0, [pc, #44]	@ (8000f50 <main+0xa8>)
 8000f24:	f002 ffd0 	bl	8003ec8 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8000f28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2c:	f000 fc14 	bl	8001758 <HAL_Delay>
  {
 8000f30:	e7d2      	b.n	8000ed8 <main+0x30>
 8000f32:	bf00      	nop
 8000f34:	20000000 	.word	0x20000000
 8000f38:	200002f0 	.word	0x200002f0
 8000f3c:	200001f4 	.word	0x200001f4
 8000f40:	200002f1 	.word	0x200002f1
 8000f44:	08007bc0 	.word	0x08007bc0
 8000f48:	200002f4 	.word	0x200002f4
 8000f4c:	08007bd8 	.word	0x08007bd8
 8000f50:	20000248 	.word	0x20000248

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	@ 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	@ 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 fd55 	bl	8005a12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <SystemClock_Config+0xd0>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <SystemClock_Config+0xd0>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <SystemClock_Config+0xd0>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <SystemClock_Config+0xd4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <SystemClock_Config+0xd4>)
 8000fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <SystemClock_Config+0xd4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fcc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fa8a 	bl	80034f8 <HAL_RCC_OscConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fea:	f000 f905 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2102      	movs	r1, #2
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fcec 	bl	80039e8 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001016:	f000 f8ef 	bl	80011f8 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	@ 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_I2C1_Init+0x50>)
 8001032:	4a13      	ldr	r2, [pc, #76]	@ (8001080 <MX_I2C1_Init+0x54>)
 8001034:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_I2C1_Init+0x50>)
 8001038:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <MX_I2C1_Init+0x58>)
 800103a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_I2C1_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_I2C1_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_I2C1_Init+0x50>)
 800104a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800104e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_I2C1_Init+0x50>)
 800106a:	f001 fa4b 	bl	8002504 <HAL_I2C_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001074:	f000 f8c0 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001f4 	.word	0x200001f4
 8001080:	40005400 	.word	0x40005400
 8001084:	000186a0 	.word	0x000186a0

08001088 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <MX_USART2_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f002 feb2 	bl	8003e28 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f000 f895 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000248 	.word	0x20000248
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001118 <MX_DMA_Init+0x3c>)
 80010ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2011      	movs	r0, #17
 8001104:	f000 fc27 	bl	8001956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001108:	2011      	movs	r0, #17
 800110a:	f000 fc40 	bl	800198e <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a2c      	ldr	r2, [pc, #176]	@ (80011ec <MX_GPIO_Init+0xd0>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a25      	ldr	r2, [pc, #148]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <MX_GPIO_Init+0xd0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2120      	movs	r1, #32
 80011a6:	4812      	ldr	r0, [pc, #72]	@ (80011f0 <MX_GPIO_Init+0xd4>)
 80011a8:	f001 f992 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <MX_GPIO_Init+0xd8>)
 80011c4:	f001 f800 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011c8:	2320      	movs	r3, #32
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_GPIO_Init+0xd4>)
 80011e0:	f000 fff2 	bl	80021c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	@ 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020800 	.word	0x40020800

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001242:	2007      	movs	r0, #7
 8001244:	f000 fb7c 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	@ (80012d8 <HAL_I2C_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12c      	bne.n	80012d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001292:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a4:	2304      	movs	r3, #4
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <HAL_I2C_MspInit+0x8c>)
 80012b0:	f000 ff8a 	bl	80021c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 80012be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_I2C_MspInit+0x88>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a34      	ldr	r2, [pc, #208]	@ (80013d4 <HAL_UART_MspInit+0xf0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d161      	bne.n	80013ca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_UART_MspInit+0xf4>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a32      	ldr	r2, [pc, #200]	@ (80013d8 <HAL_UART_MspInit+0xf4>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <HAL_UART_MspInit+0xf4>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <HAL_UART_MspInit+0xf4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a2b      	ldr	r2, [pc, #172]	@ (80013d8 <HAL_UART_MspInit+0xf4>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_UART_MspInit+0xf4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133e:	230c      	movs	r3, #12
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134e:	2307      	movs	r3, #7
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4820      	ldr	r0, [pc, #128]	@ (80013dc <HAL_UART_MspInit+0xf8>)
 800135a:	f000 ff35 	bl	80021c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 8001360:	4a20      	ldr	r2, [pc, #128]	@ (80013e4 <HAL_UART_MspInit+0x100>)
 8001362:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001364:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 8001366:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800136a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 800136e:	2240      	movs	r2, #64	@ 0x40
 8001370:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 800137a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800137e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800139e:	4810      	ldr	r0, [pc, #64]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 80013a0:	f000 fb10 	bl	80019c4 <HAL_DMA_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80013aa:	f7ff ff25 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 80013b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80013b4:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_UART_MspInit+0xfc>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2026      	movs	r0, #38	@ 0x26
 80013c0:	f000 fac9 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c4:	2026      	movs	r0, #38	@ 0x26
 80013c6:	f000 fae2 	bl	800198e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	@ 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	20000290 	.word	0x20000290
 80013e4:	400260a0 	.word	0x400260a0

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f000 f96b 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <DMA1_Stream6_IRQHandler+0x10>)
 800144e:	f000 fc51 	bl	8001cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000290 	.word	0x20000290

0800145c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <USART2_IRQHandler+0x10>)
 8001462:	f002 fda1 	bl	8003fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000248 	.word	0x20000248

08001470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_kill>:

int _kill(int pid, int sig)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800148a:	f004 fb15 	bl	8005ab8 <__errno>
 800148e:	4603      	mov	r3, r0
 8001490:	2216      	movs	r2, #22
 8001492:	601a      	str	r2, [r3, #0]
  return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_exit>:

void _exit (int status)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffe7 	bl	8001480 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014b2:	bf00      	nop
 80014b4:	e7fd      	b.n	80014b2 <_exit+0x12>

080014b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e00a      	b.n	80014de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c8:	f3af 8000 	nop.w
 80014cc:	4601      	mov	r1, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	60ba      	str	r2, [r7, #8]
 80014d4:	b2ca      	uxtb	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbf0      	blt.n	80014c8 <_read+0x12>
  }

  return len;
 80014e6:	687b      	ldr	r3, [r7, #4]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e009      	b.n	8001516 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	dbf1      	blt.n	8001502 <_write+0x12>
  }
  return len;
 800151e:	687b      	ldr	r3, [r7, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_close>:

int _close(int file)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001550:	605a      	str	r2, [r3, #4]
  return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_isatty>:

int _isatty(int file)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	@ (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f004 fa7a 	bl	8005ab8 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	@ (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20018000 	.word	0x20018000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	20000358 	.word	0x20000358
 80015f8:	200004b0 	.word	0x200004b0

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001624:	f7ff ffea 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	@ (8001660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	@ (800166c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800164e:	f004 fa39 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff fc29 	bl	8000ea8 <main>
  bx  lr    
 8001656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001658:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001664:	08007f90 	.word	0x08007f90
  ldr r2, =_sbss
 8001668:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800166c:	200004ac 	.word	0x200004ac

08001670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f94f 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fdac 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f967 	bl	80019aa <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f92f 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000004 	.word	0x20000004
 8001710:	2000000c 	.word	0x2000000c
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000000c 	.word	0x2000000c
 800173c:	2000035c 	.word	0x2000035c

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000035c 	.word	0x2000035c

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	@ (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	@ (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff3e 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff31 	bl	8001804 <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff feb6 	bl	8001740 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e099      	b.n	8001b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a00:	e00f      	b.n	8001a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a02:	f7ff fe9d 	bl	8001740 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d908      	bls.n	8001a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2203      	movs	r2, #3
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e078      	b.n	8001b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1e8      	bne.n	8001a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4b38      	ldr	r3, [pc, #224]	@ (8001b1c <HAL_DMA_Init+0x158>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d107      	bne.n	8001a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	4313      	orrs	r3, r2
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f023 0307 	bic.w	r3, r3, #7
 8001aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d117      	bne.n	8001ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00e      	beq.n	8001ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fb01 	bl	80020d0 <DMA_CheckFifoParam>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2240      	movs	r2, #64	@ 0x40
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e016      	b.n	8001b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fab8 	bl	8002064 <DMA_CalcBaseAndBitshift>
 8001af4:	4603      	mov	r3, r0
 8001af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afc:	223f      	movs	r2, #63	@ 0x3f
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	f010803f 	.word	0xf010803f

08001b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_DMA_Start_IT+0x26>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e040      	b.n	8001bc8 <HAL_DMA_Start_IT+0xa8>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d12f      	bne.n	8001bba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fa4a 	bl	8002008 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b78:	223f      	movs	r2, #63	@ 0x3f
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0216 	orr.w	r2, r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0208 	orr.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e005      	b.n	8001bc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bde:	f7ff fdaf 	bl	8001740 <HAL_GetTick>
 8001be2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d008      	beq.n	8001c02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2280      	movs	r2, #128	@ 0x80
 8001bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e052      	b.n	8001ca8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0216 	bic.w	r2, r2, #22
 8001c10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_DMA_Abort+0x62>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0208 	bic.w	r2, r2, #8
 8001c40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	e013      	b.n	8001c7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c54:	f7ff fd74 	bl	8001740 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d90c      	bls.n	8001c7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e015      	b.n	8001ca8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e4      	bne.n	8001c54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8e:	223f      	movs	r2, #63	@ 0x3f
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d004      	beq.n	8001cce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00c      	b.n	8001ce8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d00:	4b8e      	ldr	r3, [pc, #568]	@ (8001f3c <HAL_DMA_IRQHandler+0x248>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a8e      	ldr	r2, [pc, #568]	@ (8001f40 <HAL_DMA_IRQHandler+0x24c>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	2208      	movs	r2, #8
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01a      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0204 	bic.w	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	2201      	movs	r2, #1
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d012      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	2201      	movs	r2, #1
 8001d84:	409a      	lsls	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	2204      	movs	r2, #4
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f043 0204 	orr.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d043      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03c      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2210      	movs	r2, #16
 8001df0:	409a      	lsls	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d108      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d024      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
 8001e22:	e01f      	b.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
 8001e34:	e016      	b.n	8001e64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0208 	bic.w	r2, r2, #8
 8001e52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	2220      	movs	r2, #32
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 808f 	beq.w	8001f94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8087 	beq.w	8001f94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d136      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0216 	bic.w	r2, r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ebc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <HAL_DMA_IRQHandler+0x1da>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0208 	bic.w	r2, r2, #8
 8001edc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	223f      	movs	r2, #63	@ 0x3f
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d07e      	beq.n	8002000 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
        }
        return;
 8001f0a:	e079      	b.n	8002000 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01d      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d031      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e02c      	b.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
 8001f3a:	bf00      	nop
 8001f3c:	20000004 	.word	0x20000004
 8001f40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d023      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
 8001f54:	e01e      	b.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10f      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0210 	bic.w	r2, r2, #16
 8001f72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d032      	beq.n	8002002 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2205      	movs	r2, #5
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d307      	bcc.n	8001fdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f2      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x2cc>
 8001fda:	e000      	b.n	8001fde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
 8001ffe:	e000      	b.n	8002002 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002000:	bf00      	nop
    }
  }
}
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002024:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b40      	cmp	r3, #64	@ 0x40
 8002034:	d108      	bne.n	8002048 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002046:	e007      	b.n	8002058 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	3b10      	subs	r3, #16
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <DMA_CalcBaseAndBitshift+0x68>)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d909      	bls.n	80020a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	1d1a      	adds	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a4:	e007      	b.n	80020b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	aaaaaaab 	.word	0xaaaaaaab
 80020cc:	08007c04 	.word	0x08007c04

080020d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11f      	bne.n	800212a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d856      	bhi.n	800219e <DMA_CheckFifoParam+0xce>
 80020f0:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <DMA_CheckFifoParam+0x28>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	08002109 	.word	0x08002109
 80020fc:	0800211b 	.word	0x0800211b
 8002100:	08002109 	.word	0x08002109
 8002104:	0800219f 	.word	0x0800219f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d046      	beq.n	80021a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002118:	e043      	b.n	80021a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002122:	d140      	bne.n	80021a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002128:	e03d      	b.n	80021a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002132:	d121      	bne.n	8002178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d837      	bhi.n	80021aa <DMA_CheckFifoParam+0xda>
 800213a:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <DMA_CheckFifoParam+0x70>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002151 	.word	0x08002151
 8002144:	08002157 	.word	0x08002157
 8002148:	08002151 	.word	0x08002151
 800214c:	08002169 	.word	0x08002169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
      break;
 8002154:	e030      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d025      	beq.n	80021ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002166:	e022      	b.n	80021ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002170:	d11f      	bne.n	80021b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002176:	e01c      	b.n	80021b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d903      	bls.n	8002186 <DMA_CheckFifoParam+0xb6>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d003      	beq.n	800218c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002184:	e018      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
      break;
 800218a:	e015      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00e      	beq.n	80021b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      break;
 800219c:	e00b      	b.n	80021b6 <DMA_CheckFifoParam+0xe6>
      break;
 800219e:	bf00      	nop
 80021a0:	e00a      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e008      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e006      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
 80021ac:	e004      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
 80021b0:	e002      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021b2:	bf00      	nop
 80021b4:	e000      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021b6:	bf00      	nop
    }
  } 
  
  return status; 
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	e159      	b.n	8002498 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	f040 8148 	bne.w	8002492 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d005      	beq.n	800221a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	2b02      	cmp	r3, #2
 8002218:	d130      	bne.n	800227c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 0201 	and.w	r2, r3, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b03      	cmp	r3, #3
 8002286:	d017      	beq.n	80022b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d123      	bne.n	800230c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0203 	and.w	r2, r3, #3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a2 	beq.w	8002492 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <HAL_GPIO_Init+0x2e8>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	4a56      	ldr	r2, [pc, #344]	@ (80024b0 <HAL_GPIO_Init+0x2e8>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800235c:	6453      	str	r3, [r2, #68]	@ 0x44
 800235e:	4b54      	ldr	r3, [pc, #336]	@ (80024b0 <HAL_GPIO_Init+0x2e8>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236a:	4a52      	ldr	r2, [pc, #328]	@ (80024b4 <HAL_GPIO_Init+0x2ec>)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a49      	ldr	r2, [pc, #292]	@ (80024b8 <HAL_GPIO_Init+0x2f0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d019      	beq.n	80023ca <HAL_GPIO_Init+0x202>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a48      	ldr	r2, [pc, #288]	@ (80024bc <HAL_GPIO_Init+0x2f4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x1fe>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a47      	ldr	r2, [pc, #284]	@ (80024c0 <HAL_GPIO_Init+0x2f8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_GPIO_Init+0x1fa>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a46      	ldr	r2, [pc, #280]	@ (80024c4 <HAL_GPIO_Init+0x2fc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x1f6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a45      	ldr	r2, [pc, #276]	@ (80024c8 <HAL_GPIO_Init+0x300>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_GPIO_Init+0x1f2>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e008      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023ba:	2307      	movs	r3, #7
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023be:	2303      	movs	r3, #3
 80023c0:	e004      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_GPIO_Init+0x204>
 80023ca:	2300      	movs	r3, #0
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	f002 0203 	and.w	r2, r2, #3
 80023d2:	0092      	lsls	r2, r2, #2
 80023d4:	4093      	lsls	r3, r2
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023dc:	4935      	ldr	r1, [pc, #212]	@ (80024b4 <HAL_GPIO_Init+0x2ec>)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	3302      	adds	r3, #2
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ea:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_GPIO_Init+0x304>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240e:	4a2f      	ldr	r2, [pc, #188]	@ (80024cc <HAL_GPIO_Init+0x304>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002414:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <HAL_GPIO_Init+0x304>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002438:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <HAL_GPIO_Init+0x304>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243e:	4b23      	ldr	r3, [pc, #140]	@ (80024cc <HAL_GPIO_Init+0x304>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002462:	4a1a      	ldr	r2, [pc, #104]	@ (80024cc <HAL_GPIO_Init+0x304>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002468:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <HAL_GPIO_Init+0x304>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800248c:	4a0f      	ldr	r2, [pc, #60]	@ (80024cc <HAL_GPIO_Init+0x304>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b0f      	cmp	r3, #15
 800249c:	f67f aea2 	bls.w	80021e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40013800 	.word	0x40013800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ec:	e003      	b.n	80024f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	619a      	str	r2, [r3, #24]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e12b      	b.n	800276e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fe92 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2224      	movs	r2, #36	@ 0x24
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002568:	f001 fc36 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 800256c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a81      	ldr	r2, [pc, #516]	@ (8002778 <HAL_I2C_Init+0x274>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d807      	bhi.n	8002588 <HAL_I2C_Init+0x84>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a80      	ldr	r2, [pc, #512]	@ (800277c <HAL_I2C_Init+0x278>)
 800257c:	4293      	cmp	r3, r2
 800257e:	bf94      	ite	ls
 8002580:	2301      	movls	r3, #1
 8002582:	2300      	movhi	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e006      	b.n	8002596 <HAL_I2C_Init+0x92>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a7d      	ldr	r2, [pc, #500]	@ (8002780 <HAL_I2C_Init+0x27c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0e7      	b.n	800276e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a78      	ldr	r2, [pc, #480]	@ (8002784 <HAL_I2C_Init+0x280>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002778 <HAL_I2C_Init+0x274>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d802      	bhi.n	80025d8 <HAL_I2C_Init+0xd4>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3301      	adds	r3, #1
 80025d6:	e009      	b.n	80025ec <HAL_I2C_Init+0xe8>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	4a69      	ldr	r2, [pc, #420]	@ (8002788 <HAL_I2C_Init+0x284>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	3301      	adds	r3, #1
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	495c      	ldr	r1, [pc, #368]	@ (8002778 <HAL_I2C_Init+0x274>)
 8002608:	428b      	cmp	r3, r1
 800260a:	d819      	bhi.n	8002640 <HAL_I2C_Init+0x13c>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e59      	subs	r1, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fbb1 f3f3 	udiv	r3, r1, r3
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002620:	400b      	ands	r3, r1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_I2C_Init+0x138>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e59      	subs	r1, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fbb1 f3f3 	udiv	r3, r1, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263a:	e051      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 800263c:	2304      	movs	r3, #4
 800263e:	e04f      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d111      	bne.n	800266c <HAL_I2C_Init+0x168>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e58      	subs	r0, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e012      	b.n	8002692 <HAL_I2C_Init+0x18e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e58      	subs	r0, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	0099      	lsls	r1, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Init+0x196>
 8002696:	2301      	movs	r3, #1
 8002698:	e022      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10e      	bne.n	80026c0 <HAL_I2C_Init+0x1bc>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1e58      	subs	r0, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	440b      	add	r3, r1
 80026b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026be:	e00f      	b.n	80026e0 <HAL_I2C_Init+0x1dc>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	0099      	lsls	r1, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	6809      	ldr	r1, [r1, #0]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800270e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6911      	ldr	r1, [r2, #16]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	000186a0 	.word	0x000186a0
 800277c:	001e847f 	.word	0x001e847f
 8002780:	003d08ff 	.word	0x003d08ff
 8002784:	431bde83 	.word	0x431bde83
 8002788:	10624dd3 	.word	0x10624dd3

0800278c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	460b      	mov	r3, r1
 800279a:	817b      	strh	r3, [r7, #10]
 800279c:	4613      	mov	r3, r2
 800279e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7fe ffce 	bl	8001740 <HAL_GetTick>
 80027a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 80e0 	bne.w	8002974 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	4970      	ldr	r1, [pc, #448]	@ (8002980 <HAL_I2C_Master_Transmit+0x1f4>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fc64 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0d3      	b.n	8002976 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_Master_Transmit+0x50>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0cc      	b.n	8002976 <HAL_I2C_Master_Transmit+0x1ea>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d007      	beq.n	8002802 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002810:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2221      	movs	r2, #33	@ 0x21
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2210      	movs	r2, #16
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	893a      	ldrh	r2, [r7, #8]
 8002832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a50      	ldr	r2, [pc, #320]	@ (8002984 <HAL_I2C_Master_Transmit+0x1f8>)
 8002842:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 face 	bl	8002dec <I2C_MasterRequestWrite>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e08d      	b.n	8002976 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002870:	e066      	b.n	8002940 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	6a39      	ldr	r1, [r7, #32]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fd22 	bl	80032c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2b04      	cmp	r3, #4
 8002888:	d107      	bne.n	800289a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d11b      	bne.n	8002914 <HAL_I2C_Master_Transmit+0x188>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d017      	beq.n	8002914 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	6a39      	ldr	r1, [r7, #32]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fd19 	bl	8003350 <I2C_WaitOnBTFFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	2b04      	cmp	r3, #4
 800292a:	d107      	bne.n	800293c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e01a      	b.n	8002976 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d194      	bne.n	8002872 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	00100002 	.word	0x00100002
 8002984:	ffff0000 	.word	0xffff0000

08002988 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	@ 0x30
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	461a      	mov	r2, r3
 8002994:	460b      	mov	r3, r1
 8002996:	817b      	strh	r3, [r7, #10]
 8002998:	4613      	mov	r3, r2
 800299a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7fe fed0 	bl	8001740 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	f040 8217 	bne.w	8002dde <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2319      	movs	r3, #25
 80029b6:	2201      	movs	r2, #1
 80029b8:	497c      	ldr	r1, [pc, #496]	@ (8002bac <HAL_I2C_Master_Receive+0x224>)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb66 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
 80029c8:	e20a      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_I2C_Master_Receive+0x50>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e203      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d007      	beq.n	80029fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2222      	movs	r2, #34	@ 0x22
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	893a      	ldrh	r2, [r7, #8]
 8002a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb0 <HAL_I2C_Master_Receive+0x228>)
 8002a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a40:	8979      	ldrh	r1, [r7, #10]
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa52 	bl	8002ef0 <I2C_MasterRequestRead>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e1c4      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	623b      	str	r3, [r7, #32]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	623b      	str	r3, [r7, #32]
 8002a72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e198      	b.n	8002db8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d11b      	bne.n	8002ac6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e178      	b.n	8002db8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d11b      	bne.n	8002b06 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002adc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	e158      	b.n	8002db8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b2c:	e144      	b.n	8002db8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	f200 80f1 	bhi.w	8002d1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d123      	bne.n	8002b88 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fc4b 	bl	80033e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e145      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b86:	e117      	b.n	8002db8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d14e      	bne.n	8002c2e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b96:	2200      	movs	r2, #0
 8002b98:	4906      	ldr	r1, [pc, #24]	@ (8002bb4 <HAL_I2C_Master_Receive+0x22c>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa76 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e11a      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
 8002baa:	bf00      	nop
 8002bac:	00100002 	.word	0x00100002
 8002bb0:	ffff0000 	.word	0xffff0000
 8002bb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c2c:	e0c4      	b.n	8002db8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	2200      	movs	r2, #0
 8002c36:	496c      	ldr	r1, [pc, #432]	@ (8002de8 <HAL_I2C_Master_Receive+0x460>)
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fa27 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0cb      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	2200      	movs	r2, #0
 8002c92:	4955      	ldr	r1, [pc, #340]	@ (8002de8 <HAL_I2C_Master_Receive+0x460>)
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f9f9 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e09d      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d18:	e04e      	b.n	8002db8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fb5e 	bl	80033e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e058      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d124      	bne.n	8002db8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d107      	bne.n	8002d86 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d84:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f aeb6 	bne.w	8002b2e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3728      	adds	r7, #40	@ 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	00010004 	.word	0x00010004

08002dec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d006      	beq.n	8002e16 <I2C_MasterRequestWrite+0x2a>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <I2C_MasterRequestWrite+0x2a>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e14:	d108      	bne.n	8002e28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e00b      	b.n	8002e40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	2b12      	cmp	r3, #18
 8002e2e:	d107      	bne.n	8002e40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f91d 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00d      	beq.n	8002e74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e66:	d103      	bne.n	8002e70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e035      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e7c:	d108      	bne.n	8002e90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	e01b      	b.n	8002ec8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e90:	897b      	ldrh	r3, [r7, #10]
 8002e92:	11db      	asrs	r3, r3, #7
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0306 	and.w	r3, r3, #6
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f063 030f 	orn	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	490e      	ldr	r1, [pc, #56]	@ (8002ee8 <I2C_MasterRequestWrite+0xfc>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f966 	bl	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e010      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4907      	ldr	r1, [pc, #28]	@ (8002eec <I2C_MasterRequestWrite+0x100>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f956 	bl	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	00010008 	.word	0x00010008
 8002eec:	00010002 	.word	0x00010002

08002ef0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	460b      	mov	r3, r1
 8002efe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d006      	beq.n	8002f2a <I2C_MasterRequestRead+0x3a>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d003      	beq.n	8002f2a <I2C_MasterRequestRead+0x3a>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f28:	d108      	bne.n	8002f3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e00b      	b.n	8002f54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	2b11      	cmp	r3, #17
 8002f42:	d107      	bne.n	8002f54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f893 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7a:	d103      	bne.n	8002f84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e079      	b.n	800307c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f90:	d108      	bne.n	8002fa4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	e05f      	b.n	8003064 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	11db      	asrs	r3, r3, #7
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 0306 	and.w	r3, r3, #6
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f063 030f 	orn	r3, r3, #15
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4930      	ldr	r1, [pc, #192]	@ (8003084 <I2C_MasterRequestRead+0x194>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8dc 	bl	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e054      	b.n	800307c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4929      	ldr	r1, [pc, #164]	@ (8003088 <I2C_MasterRequestRead+0x198>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8cc 	bl	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e044      	b.n	800307c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003016:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f831 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303e:	d103      	bne.n	8003048 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e017      	b.n	800307c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800304c:	897b      	ldrh	r3, [r7, #10]
 800304e:	11db      	asrs	r3, r3, #7
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0306 	and.w	r3, r3, #6
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f063 030e 	orn	r3, r3, #14
 800305c:	b2da      	uxtb	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4907      	ldr	r1, [pc, #28]	@ (8003088 <I2C_MasterRequestRead+0x198>)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f888 	bl	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	00010008 	.word	0x00010008
 8003088:	00010002 	.word	0x00010002

0800308c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800309c:	e048      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d044      	beq.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7fe fb4b 	bl	8001740 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d139      	bne.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10d      	bne.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	43da      	mvns	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4013      	ands	r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	e00c      	b.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	43da      	mvns	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d116      	bne.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e023      	b.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10d      	bne.n	8003156 <I2C_WaitOnFlagUntilTimeout+0xca>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	e00c      	b.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	429a      	cmp	r2, r3
 8003174:	d093      	beq.n	800309e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800318e:	e071      	b.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319e:	d123      	bne.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e067      	b.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d041      	beq.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7fe faa6 	bl	8001740 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d136      	bne.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10c      	bne.n	800322a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	e00b      	b.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	43da      	mvns	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e021      	b.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10c      	bne.n	8003298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	43da      	mvns	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e00b      	b.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f af6d 	bne.w	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032cc:	e034      	b.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f8e3 	bl	800349a <I2C_IsAcknowledgeFailed>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e034      	b.n	8003348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d028      	beq.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fe fa2b 	bl	8001740 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11d      	bne.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003306:	2b80      	cmp	r3, #128	@ 0x80
 8003308:	d016      	beq.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e007      	b.n	8003348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b80      	cmp	r3, #128	@ 0x80
 8003344:	d1c3      	bne.n	80032ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800335c:	e034      	b.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f89b 	bl	800349a <I2C_IsAcknowledgeFailed>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e034      	b.n	80033d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d028      	beq.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7fe f9e3 	bl	8001740 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11d      	bne.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d016      	beq.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e007      	b.n	80033d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d1c3      	bne.n	800335e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ec:	e049      	b.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b10      	cmp	r3, #16
 80033fa:	d119      	bne.n	8003430 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0210 	mvn.w	r2, #16
 8003404:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e030      	b.n	8003492 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003430:	f7fe f986 	bl	8001740 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	d302      	bcc.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11d      	bne.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003450:	2b40      	cmp	r3, #64	@ 0x40
 8003452:	d016      	beq.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f043 0220 	orr.w	r2, r3, #32
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	d1ae      	bne.n	80033ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b0:	d11b      	bne.n	80034ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e267      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d075      	beq.n	8003602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003516:	4b88      	ldr	r3, [pc, #544]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00c      	beq.n	800353c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b85      	ldr	r3, [pc, #532]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800352a:	2b08      	cmp	r3, #8
 800352c:	d112      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b82      	ldr	r3, [pc, #520]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b7e      	ldr	r3, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05b      	beq.n	8003600 <HAL_RCC_OscConfig+0x108>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d157      	bne.n	8003600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e242      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x74>
 800355e:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x98>
 8003576:	4b70      	ldr	r3, [pc, #448]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6c      	ldr	r2, [pc, #432]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 8003590:	4b69      	ldr	r3, [pc, #420]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b66      	ldr	r3, [pc, #408]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a65      	ldr	r2, [pc, #404]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe f8c6 	bl	8001740 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fe f8c2 	bl	8001740 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	@ 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e207      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xc0>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe f8b2 	bl	8001740 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fe f8ae 	bl	8001740 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	@ 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1f3      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b51      	ldr	r3, [pc, #324]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0xe8>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800360e:	4b4a      	ldr	r3, [pc, #296]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b47      	ldr	r3, [pc, #284]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003622:	2b08      	cmp	r3, #8
 8003624:	d11c      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b44      	ldr	r3, [pc, #272]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	4b41      	ldr	r3, [pc, #260]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c7      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4937      	ldr	r1, [pc, #220]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e03a      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b34      	ldr	r3, [pc, #208]	@ (800373c <HAL_RCC_OscConfig+0x244>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe f867 	bl	8001740 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe f863 	bl	8001740 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a8      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b2b      	ldr	r3, [pc, #172]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b28      	ldr	r3, [pc, #160]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4925      	ldr	r1, [pc, #148]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_RCC_OscConfig+0x244>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe f846 	bl	8001740 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fe f842 	bl	8001740 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e187      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <HAL_RCC_OscConfig+0x248>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fe f826 	bl	8001740 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fe f822 	bl	8001740 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e167      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800370c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x200>
 8003716:	e01b      	b.n	8003750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_OscConfig+0x248>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fe f80f 	bl	8001740 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	e00e      	b.n	8003744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003726:	f7fe f80b 	bl	8001740 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d907      	bls.n	8003744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e150      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
 8003740:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ea      	bne.n	8003726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8097 	beq.w	800388c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b81      	ldr	r3, [pc, #516]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	4b7d      	ldr	r3, [pc, #500]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	4a7c      	ldr	r2, [pc, #496]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	@ 0x40
 800377e:	4b7a      	ldr	r3, [pc, #488]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b77      	ldr	r3, [pc, #476]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b74      	ldr	r3, [pc, #464]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a73      	ldr	r2, [pc, #460]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fd ffcb 	bl	8001740 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd ffc7 	bl	8001740 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e10c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2ea>
 80037d4:	4b64      	ldr	r3, [pc, #400]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	4a63      	ldr	r2, [pc, #396]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x30c>
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	@ 0x70
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 8003804:	4b58      	ldr	r3, [pc, #352]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003810:	4b55      	ldr	r3, [pc, #340]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	4a54      	ldr	r2, [pc, #336]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fd ff8c 	bl	8001740 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fd ff88 	bl	8001740 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0cb      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4b49      	ldr	r3, [pc, #292]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ee      	beq.n	800382c <HAL_RCC_OscConfig+0x334>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd ff76 	bl	8001740 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd ff72 	bl	8001740 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0b5      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	4b3e      	ldr	r3, [pc, #248]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ee      	bne.n	8003858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b39      	ldr	r3, [pc, #228]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	4a38      	ldr	r2, [pc, #224]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a1 	beq.w	80039d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003896:	4b34      	ldr	r3, [pc, #208]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d05c      	beq.n	800395c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d141      	bne.n	800392e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fd ff46 	bl	8001740 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd ff42 	bl	8001740 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e087      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	491b      	ldr	r1, [pc, #108]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd ff1b 	bl	8001740 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd ff17 	bl	8001740 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e05c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x416>
 800392c:	e054      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd ff04 	bl	8001740 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd ff00 	bl	8001740 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e045      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x444>
 800395a:	e03d      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e038      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000
 8003970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_RCC_OscConfig+0x4ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d028      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d121      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	3b01      	subs	r3, #1
 80039be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cc      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b68      	ldr	r3, [pc, #416]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90c      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e067      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b37      	ldr	r3, [pc, #220]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4934      	ldr	r1, [pc, #208]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fe32 	bl	8001740 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd fe2e 	bl	8001740 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20c      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f821 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	@ (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fd92 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08007bec 	.word	0x08007bec
 8003bac:	20000004 	.word	0x20000004
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b094      	sub	sp, #80	@ 0x50
 8003bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bcc:	4b79      	ldr	r3, [pc, #484]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	f200 80e1 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x34>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x3a>
 8003be6:	e0db      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b73      	ldr	r3, [pc, #460]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bec:	e0db      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bee:	4b73      	ldr	r3, [pc, #460]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8003bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bf2:	e0d8      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	0159      	lsls	r1, r3, #5
 8003c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c38:	0150      	lsls	r0, r2, #5
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4621      	mov	r1, r4
 8003c40:	1a51      	subs	r1, r2, r1
 8003c42:	6139      	str	r1, [r7, #16]
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c62:	4651      	mov	r1, sl
 8003c64:	018a      	lsls	r2, r1, #6
 8003c66:	4651      	mov	r1, sl
 8003c68:	ebb2 0801 	subs.w	r8, r2, r1
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c86:	4690      	mov	r8, r2
 8003c88:	4699      	mov	r9, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	eb18 0303 	adds.w	r3, r8, r3
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	462b      	mov	r3, r5
 8003c94:	eb49 0303 	adc.w	r3, r9, r3
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	024b      	lsls	r3, r1, #9
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	024a      	lsls	r2, r1, #9
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cba:	2200      	movs	r2, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cc4:	f7fc ff78 	bl	8000bb8 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4613      	mov	r3, r2
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	e058      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd2:	4b38      	ldr	r3, [pc, #224]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	4611      	mov	r1, r2
 8003cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	0159      	lsls	r1, r3, #5
 8003cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfe:	0150      	lsls	r0, r2, #5
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4641      	mov	r1, r8
 8003d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d24:	ebb2 040a 	subs.w	r4, r2, sl
 8003d28:	eb63 050b 	sbc.w	r5, r3, fp
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	00eb      	lsls	r3, r5, #3
 8003d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d3a:	00e2      	lsls	r2, r4, #3
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	461d      	mov	r5, r3
 8003d40:	4643      	mov	r3, r8
 8003d42:	18e3      	adds	r3, r4, r3
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb45 0303 	adc.w	r3, r5, r3
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	028b      	lsls	r3, r1, #10
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d64:	4621      	mov	r1, r4
 8003d66:	028a      	lsls	r2, r1, #10
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	61fa      	str	r2, [r7, #28]
 8003d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d78:	f7fc ff1e 	bl	8000bb8 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3750      	adds	r7, #80	@ 0x50
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200

08003dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000004 	.word	0x20000004

08003dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ddc:	f7ff fff0 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0a9b      	lsrs	r3, r3, #10
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4903      	ldr	r1, [pc, #12]	@ (8003dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08007bfc 	.word	0x08007bfc

08003e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e04:	f7ff ffdc 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	@ (8003e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0b5b      	lsrs	r3, r3, #13
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	@ (8003e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08007bfc 	.word	0x08007bfc

08003e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e042      	b.n	8003ec0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fa48 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	@ 0x24
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fdcb 	bl	8004a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08c      	sub	sp, #48	@ 0x30
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d156      	bne.n	8003f90 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_UART_Transmit_DMA+0x26>
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e04f      	b.n	8003f92 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2221      	movs	r2, #33	@ 0x21
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <HAL_UART_Transmit_DMA+0xd4>)
 8003f18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	4a20      	ldr	r2, [pc, #128]	@ (8003fa0 <HAL_UART_Transmit_DMA+0xd8>)
 8003f20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa4 <HAL_UART_Transmit_DMA+0xdc>)
 8003f28:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	2200      	movs	r2, #0
 8003f30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	461a      	mov	r2, r3
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	f7fd fde9 	bl	8001b20 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	617b      	str	r3, [r7, #20]
   return(result);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f78:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6a39      	ldr	r1, [r7, #32]
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3730      	adds	r7, #48	@ 0x30
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	08004535 	.word	0x08004535
 8003fa0:	080045cf 	.word	0x080045cf
 8003fa4:	080045eb 	.word	0x080045eb

08003fa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b0ba      	sub	sp, #232	@ 0xe8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10f      	bne.n	800400e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_UART_IRQHandler+0x66>
 8003ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fc40 	bl	800488c <UART_Receive_IT>
      return;
 800400c:	e25b      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800400e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80de 	beq.w	80041d4 <HAL_UART_IRQHandler+0x22c>
 8004018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004028:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80d1 	beq.w	80041d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_UART_IRQHandler+0xae>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0201 	orr.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_UART_IRQHandler+0xd2>
 8004062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f043 0202 	orr.w	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_UART_IRQHandler+0xf6>
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f043 0204 	orr.w	r2, r3, #4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d011      	beq.n	80040ce <HAL_UART_IRQHandler+0x126>
 80040aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d105      	bne.n	80040c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0208 	orr.w	r2, r3, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 81f2 	beq.w	80044bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_UART_IRQHandler+0x14e>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fbcb 	bl	800488c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b40      	cmp	r3, #64	@ 0x40
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_UART_IRQHandler+0x17a>
 800411a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04f      	beq.n	80041c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fad3 	bl	80046ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d141      	bne.n	80041ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800414c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004162:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800416e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800417a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1d9      	bne.n	8004136 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d013      	beq.n	80041b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	4a7e      	ldr	r2, [pc, #504]	@ (8004388 <HAL_UART_IRQHandler+0x3e0>)
 8004190:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fd8a 	bl	8001cb0 <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041ac:	4610      	mov	r0, r2
 80041ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e00e      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f9a8 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e00a      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9a4 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	e006      	b.n	80041d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9a0 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041ce:	e175      	b.n	80044bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	bf00      	nop
    return;
 80041d2:	e173      	b.n	80044bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	f040 814f 	bne.w	800447c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8148 	beq.w	800447c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8141 	beq.w	800447c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b40      	cmp	r3, #64	@ 0x40
 800421c:	f040 80b6 	bne.w	800438c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800422c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8145 	beq.w	80044c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800423e:	429a      	cmp	r2, r3
 8004240:	f080 813e 	bcs.w	80044c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800424a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004256:	f000 8088 	beq.w	800436a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004270:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800428a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004292:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800429e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1d9      	bne.n	800425a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3314      	adds	r3, #20
 80042c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e1      	bne.n	80042a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3314      	adds	r3, #20
 80042e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004306:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004308:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800430c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e3      	bne.n	80042e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800433a:	f023 0310 	bic.w	r3, r3, #16
 800433e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800434c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800434e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004352:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800435a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e3      	bne.n	8004328 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	4618      	mov	r0, r3
 8004366:	f7fd fc33 	bl	8001bd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8cb 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004386:	e09b      	b.n	80044c0 <HAL_UART_IRQHandler+0x518>
 8004388:	08004795 	.word	0x08004795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004394:	b29b      	uxth	r3, r3
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 808e 	beq.w	80044c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8089 	beq.w	80044c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e3      	bne.n	80043b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	623b      	str	r3, [r7, #32]
   return(result);
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800440e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e3      	bne.n	80043ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004454:	61fa      	str	r2, [r7, #28]
 8004456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	617b      	str	r3, [r7, #20]
   return(result);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e3      	bne.n	8004430 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800446e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f851 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800447a:	e023      	b.n	80044c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_UART_IRQHandler+0x4f4>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f991 	bl	80047bc <UART_Transmit_IT>
    return;
 800449a:	e014      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <HAL_UART_IRQHandler+0x51e>
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f9d1 	bl	800485c <UART_EndTransmit_IT>
    return;
 80044ba:	e004      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80044bc:	bf00      	nop
 80044be:	e002      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044c4:	bf00      	nop
  }
}
 80044c6:	37e8      	adds	r7, #232	@ 0xe8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b090      	sub	sp, #64	@ 0x40
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d137      	bne.n	80045c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004552:	2200      	movs	r2, #0
 8004554:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	623b      	str	r3, [r7, #32]
   return(result);
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800456c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3314      	adds	r3, #20
 8004574:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004576:	633a      	str	r2, [r7, #48]	@ 0x30
 8004578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800457c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800458a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	60fb      	str	r3, [r7, #12]
   return(result);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045aa:	61fa      	str	r2, [r7, #28]
 80045ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	69b9      	ldr	r1, [r7, #24]
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	617b      	str	r3, [r7, #20]
   return(result);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045be:	e002      	b.n	80045c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80045c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80045c2:	f7ff ff83 	bl	80044cc <HAL_UART_TxCpltCallback>
}
 80045c6:	bf00      	nop
 80045c8:	3740      	adds	r7, #64	@ 0x40
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff ff7f 	bl	80044e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b21      	cmp	r3, #33	@ 0x21
 800461c:	d108      	bne.n	8004630 <UART_DMAError+0x46>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800462a:	68b8      	ldr	r0, [r7, #8]
 800462c:	f000 f827 	bl	800467e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463a:	2b40      	cmp	r3, #64	@ 0x40
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b22      	cmp	r3, #34	@ 0x22
 8004650:	d108      	bne.n	8004664 <UART_DMAError+0x7a>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800465e:	68b8      	ldr	r0, [r7, #8]
 8004660:	f000 f835 	bl	80046ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	f043 0210 	orr.w	r2, r3, #16
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004670:	68b8      	ldr	r0, [r7, #8]
 8004672:	f7ff ff49 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800467e:	b480      	push	{r7}
 8004680:	b089      	sub	sp, #36	@ 0x24
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	60bb      	str	r3, [r7, #8]
   return(result);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	61ba      	str	r2, [r7, #24]
 80046a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	613b      	str	r3, [r7, #16]
   return(result);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e5      	bne.n	8004686 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80046c2:	bf00      	nop
 80046c4:	3724      	adds	r7, #36	@ 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b095      	sub	sp, #84	@ 0x54
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80046f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e5      	bne.n	80046d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	61fb      	str	r3, [r7, #28]
   return(result);
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3314      	adds	r3, #20
 8004728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800472a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	2b01      	cmp	r3, #1
 8004744:	d119      	bne.n	800477a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	60bb      	str	r3, [r7, #8]
   return(result);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0310 	bic.w	r3, r3, #16
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004766:	61ba      	str	r2, [r7, #24]
 8004768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6979      	ldr	r1, [r7, #20]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	613b      	str	r3, [r7, #16]
   return(result);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004788:	bf00      	nop
 800478a:	3754      	adds	r7, #84	@ 0x54
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff feaa 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b21      	cmp	r3, #33	@ 0x21
 80047ce:	d13e      	bne.n	800484e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d8:	d114      	bne.n	8004804 <UART_Transmit_IT+0x48>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d110      	bne.n	8004804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	621a      	str	r2, [r3, #32]
 8004802:	e008      	b.n	8004816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	1c59      	adds	r1, r3, #1
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6211      	str	r1, [r2, #32]
 800480e:	781a      	ldrb	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29b      	uxth	r3, r3
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	4619      	mov	r1, r3
 8004824:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10f      	bne.n	800484a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004872:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fe25 	bl	80044cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	@ 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b22      	cmp	r3, #34	@ 0x22
 800489e:	f040 80ae 	bne.w	80049fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048aa:	d117      	bne.n	80048dc <UART_Receive_IT+0x50>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d113      	bne.n	80048dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80048da:	e026      	b.n	800492a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ee:	d007      	beq.n	8004900 <UART_Receive_IT+0x74>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <UART_Receive_IT+0x82>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d106      	bne.n	800490e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e008      	b.n	8004920 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491a:	b2da      	uxtb	r2, r3
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4619      	mov	r1, r3
 8004938:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800493a:	2b00      	cmp	r3, #0
 800493c:	d15d      	bne.n	80049fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0220 	bic.w	r2, r2, #32
 800494c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800495c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695a      	ldr	r2, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	2b01      	cmp	r3, #1
 8004982:	d135      	bne.n	80049f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	613b      	str	r3, [r7, #16]
   return(result);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f023 0310 	bic.w	r3, r3, #16
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049aa:	623a      	str	r2, [r7, #32]
 80049ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	69f9      	ldr	r1, [r7, #28]
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d10a      	bne.n	80049e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fd97 	bl	800451c <HAL_UARTEx_RxEventCallback>
 80049ee:	e002      	b.n	80049f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fd7f 	bl	80044f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e002      	b.n	8004a00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3730      	adds	r7, #48	@ 0x30
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b0c0      	sub	sp, #256	@ 0x100
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	68d9      	ldr	r1, [r3, #12]
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	ea40 0301 	orr.w	r3, r0, r1
 8004a30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a60:	f021 010c 	bic.w	r1, r1, #12
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a82:	6999      	ldr	r1, [r3, #24]
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	ea40 0301 	orr.w	r3, r0, r1
 8004a8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd4 <UART_SetConfig+0x2cc>)
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d005      	beq.n	8004aa8 <UART_SetConfig+0xa0>
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8004cd8 <UART_SetConfig+0x2d0>)
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d104      	bne.n	8004ab2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7ff f9aa 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 8004aac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ab0:	e003      	b.n	8004aba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ab2:	f7ff f991 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8004ab6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac4:	f040 810c 	bne.w	8004ce0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ad2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ad6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ada:	4622      	mov	r2, r4
 8004adc:	462b      	mov	r3, r5
 8004ade:	1891      	adds	r1, r2, r2
 8004ae0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ae2:	415b      	adcs	r3, r3
 8004ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ae6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aea:	4621      	mov	r1, r4
 8004aec:	eb12 0801 	adds.w	r8, r2, r1
 8004af0:	4629      	mov	r1, r5
 8004af2:	eb43 0901 	adc.w	r9, r3, r1
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0a:	4690      	mov	r8, r2
 8004b0c:	4699      	mov	r9, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	eb18 0303 	adds.w	r3, r8, r3
 8004b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b18:	462b      	mov	r3, r5
 8004b1a:	eb49 0303 	adc.w	r3, r9, r3
 8004b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b36:	460b      	mov	r3, r1
 8004b38:	18db      	adds	r3, r3, r3
 8004b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	eb42 0303 	adc.w	r3, r2, r3
 8004b42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b4c:	f7fc f834 	bl	8000bb8 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4b61      	ldr	r3, [pc, #388]	@ (8004cdc <UART_SetConfig+0x2d4>)
 8004b56:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	011c      	lsls	r4, r3, #4
 8004b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	1891      	adds	r1, r2, r2
 8004b76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b78:	415b      	adcs	r3, r3
 8004b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b80:	4641      	mov	r1, r8
 8004b82:	eb12 0a01 	adds.w	sl, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb43 0b01 	adc.w	fp, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ba0:	4692      	mov	sl, r2
 8004ba2:	469b      	mov	fp, r3
 8004ba4:	4643      	mov	r3, r8
 8004ba6:	eb1a 0303 	adds.w	r3, sl, r3
 8004baa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bae:	464b      	mov	r3, r9
 8004bb0:	eb4b 0303 	adc.w	r3, fp, r3
 8004bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	18db      	adds	r3, r3, r3
 8004bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	eb42 0303 	adc.w	r3, r2, r3
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004be2:	f7fb ffe9 	bl	8000bb8 <__aeabi_uldivmod>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4611      	mov	r1, r2
 8004bec:	4b3b      	ldr	r3, [pc, #236]	@ (8004cdc <UART_SetConfig+0x2d4>)
 8004bee:	fba3 2301 	umull	r2, r3, r3, r1
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	2264      	movs	r2, #100	@ 0x64
 8004bf6:	fb02 f303 	mul.w	r3, r2, r3
 8004bfa:	1acb      	subs	r3, r1, r3
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c02:	4b36      	ldr	r3, [pc, #216]	@ (8004cdc <UART_SetConfig+0x2d4>)
 8004c04:	fba3 2302 	umull	r2, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c10:	441c      	add	r4, r3
 8004c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c24:	4642      	mov	r2, r8
 8004c26:	464b      	mov	r3, r9
 8004c28:	1891      	adds	r1, r2, r2
 8004c2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c2c:	415b      	adcs	r3, r3
 8004c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c34:	4641      	mov	r1, r8
 8004c36:	1851      	adds	r1, r2, r1
 8004c38:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	414b      	adcs	r3, r1
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c4c:	4659      	mov	r1, fp
 8004c4e:	00cb      	lsls	r3, r1, #3
 8004c50:	4651      	mov	r1, sl
 8004c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c56:	4651      	mov	r1, sl
 8004c58:	00ca      	lsls	r2, r1, #3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4642      	mov	r2, r8
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c68:	464b      	mov	r3, r9
 8004c6a:	460a      	mov	r2, r1
 8004c6c:	eb42 0303 	adc.w	r3, r2, r3
 8004c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c88:	460b      	mov	r3, r1
 8004c8a:	18db      	adds	r3, r3, r3
 8004c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c8e:	4613      	mov	r3, r2
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c9e:	f7fb ff8b 	bl	8000bb8 <__aeabi_uldivmod>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <UART_SetConfig+0x2d4>)
 8004ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	2164      	movs	r1, #100	@ 0x64
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	3332      	adds	r3, #50	@ 0x32
 8004cba:	4a08      	ldr	r2, [pc, #32]	@ (8004cdc <UART_SetConfig+0x2d4>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	f003 0207 	and.w	r2, r3, #7
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4422      	add	r2, r4
 8004cce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cd0:	e106      	b.n	8004ee0 <UART_SetConfig+0x4d8>
 8004cd2:	bf00      	nop
 8004cd4:	40011000 	.word	0x40011000
 8004cd8:	40011400 	.word	0x40011400
 8004cdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	1891      	adds	r1, r2, r2
 8004cf8:	6239      	str	r1, [r7, #32]
 8004cfa:	415b      	adcs	r3, r3
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d02:	4641      	mov	r1, r8
 8004d04:	1854      	adds	r4, r2, r1
 8004d06:	4649      	mov	r1, r9
 8004d08:	eb43 0501 	adc.w	r5, r3, r1
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	00eb      	lsls	r3, r5, #3
 8004d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1a:	00e2      	lsls	r2, r4, #3
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	461d      	mov	r5, r3
 8004d20:	4643      	mov	r3, r8
 8004d22:	18e3      	adds	r3, r4, r3
 8004d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d28:	464b      	mov	r3, r9
 8004d2a:	eb45 0303 	adc.w	r3, r5, r3
 8004d2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d4e:	4629      	mov	r1, r5
 8004d50:	008b      	lsls	r3, r1, #2
 8004d52:	4621      	mov	r1, r4
 8004d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d58:	4621      	mov	r1, r4
 8004d5a:	008a      	lsls	r2, r1, #2
 8004d5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d60:	f7fb ff2a 	bl	8000bb8 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4b60      	ldr	r3, [pc, #384]	@ (8004eec <UART_SetConfig+0x4e4>)
 8004d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	011c      	lsls	r4, r3, #4
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	61b9      	str	r1, [r7, #24]
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6139      	str	r1, [r7, #16]
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dc8:	464b      	mov	r3, r9
 8004dca:	460a      	mov	r2, r1
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dec:	4649      	mov	r1, r9
 8004dee:	008b      	lsls	r3, r1, #2
 8004df0:	4641      	mov	r1, r8
 8004df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df6:	4641      	mov	r1, r8
 8004df8:	008a      	lsls	r2, r1, #2
 8004dfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dfe:	f7fb fedb 	bl	8000bb8 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	4b38      	ldr	r3, [pc, #224]	@ (8004eec <UART_SetConfig+0x4e4>)
 8004e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2264      	movs	r2, #100	@ 0x64
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	1acb      	subs	r3, r1, r3
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	3332      	adds	r3, #50	@ 0x32
 8004e1c:	4a33      	ldr	r2, [pc, #204]	@ (8004eec <UART_SetConfig+0x4e4>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e28:	441c      	add	r4, r3
 8004e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e2e:	2200      	movs	r2, #0
 8004e30:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e32:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	1891      	adds	r1, r2, r2
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	415b      	adcs	r3, r3
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e48:	4641      	mov	r1, r8
 8004e4a:	1851      	adds	r1, r2, r1
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	4649      	mov	r1, r9
 8004e50:	414b      	adcs	r3, r1
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e60:	4659      	mov	r1, fp
 8004e62:	00cb      	lsls	r3, r1, #3
 8004e64:	4651      	mov	r1, sl
 8004e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6a:	4651      	mov	r1, sl
 8004e6c:	00ca      	lsls	r2, r1, #3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4619      	mov	r1, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	4642      	mov	r2, r8
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	460a      	mov	r2, r1
 8004e7e:	eb42 0303 	adc.w	r3, r2, r3
 8004e82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	008b      	lsls	r3, r1, #2
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	008a      	lsls	r2, r1, #2
 8004eaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004eae:	f7fb fe83 	bl	8000bb8 <__aeabi_uldivmod>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <UART_SetConfig+0x4e4>)
 8004eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	2164      	movs	r1, #100	@ 0x64
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	3332      	adds	r3, #50	@ 0x32
 8004eca:	4a08      	ldr	r2, [pc, #32]	@ (8004eec <UART_SetConfig+0x4e4>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4422      	add	r2, r4
 8004ede:	609a      	str	r2, [r3, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eec:	51eb851f 	.word	0x51eb851f

08004ef0 <__cvt>:
 8004ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	ec57 6b10 	vmov	r6, r7, d0
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	460c      	mov	r4, r1
 8004efc:	4619      	mov	r1, r3
 8004efe:	463b      	mov	r3, r7
 8004f00:	bfbb      	ittet	lt
 8004f02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f06:	461f      	movlt	r7, r3
 8004f08:	2300      	movge	r3, #0
 8004f0a:	232d      	movlt	r3, #45	@ 0x2d
 8004f0c:	700b      	strb	r3, [r1, #0]
 8004f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f14:	4691      	mov	r9, r2
 8004f16:	f023 0820 	bic.w	r8, r3, #32
 8004f1a:	bfbc      	itt	lt
 8004f1c:	4632      	movlt	r2, r6
 8004f1e:	4616      	movlt	r6, r2
 8004f20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f24:	d005      	beq.n	8004f32 <__cvt+0x42>
 8004f26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f2a:	d100      	bne.n	8004f2e <__cvt+0x3e>
 8004f2c:	3401      	adds	r4, #1
 8004f2e:	2102      	movs	r1, #2
 8004f30:	e000      	b.n	8004f34 <__cvt+0x44>
 8004f32:	2103      	movs	r1, #3
 8004f34:	ab03      	add	r3, sp, #12
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	ab02      	add	r3, sp, #8
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	ec47 6b10 	vmov	d0, r6, r7
 8004f40:	4653      	mov	r3, sl
 8004f42:	4622      	mov	r2, r4
 8004f44:	f000 fe70 	bl	8005c28 <_dtoa_r>
 8004f48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	d119      	bne.n	8004f84 <__cvt+0x94>
 8004f50:	f019 0f01 	tst.w	r9, #1
 8004f54:	d00e      	beq.n	8004f74 <__cvt+0x84>
 8004f56:	eb00 0904 	add.w	r9, r0, r4
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4630      	mov	r0, r6
 8004f60:	4639      	mov	r1, r7
 8004f62:	f7fb fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f66:	b108      	cbz	r0, 8004f6c <__cvt+0x7c>
 8004f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f6c:	2230      	movs	r2, #48	@ 0x30
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	454b      	cmp	r3, r9
 8004f72:	d31e      	bcc.n	8004fb2 <__cvt+0xc2>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f78:	1b5b      	subs	r3, r3, r5
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	b004      	add	sp, #16
 8004f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f88:	eb00 0904 	add.w	r9, r0, r4
 8004f8c:	d1e5      	bne.n	8004f5a <__cvt+0x6a>
 8004f8e:	7803      	ldrb	r3, [r0, #0]
 8004f90:	2b30      	cmp	r3, #48	@ 0x30
 8004f92:	d10a      	bne.n	8004faa <__cvt+0xba>
 8004f94:	2200      	movs	r2, #0
 8004f96:	2300      	movs	r3, #0
 8004f98:	4630      	mov	r0, r6
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f7fb fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fa0:	b918      	cbnz	r0, 8004faa <__cvt+0xba>
 8004fa2:	f1c4 0401 	rsb	r4, r4, #1
 8004fa6:	f8ca 4000 	str.w	r4, [sl]
 8004faa:	f8da 3000 	ldr.w	r3, [sl]
 8004fae:	4499      	add	r9, r3
 8004fb0:	e7d3      	b.n	8004f5a <__cvt+0x6a>
 8004fb2:	1c59      	adds	r1, r3, #1
 8004fb4:	9103      	str	r1, [sp, #12]
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e7d9      	b.n	8004f6e <__cvt+0x7e>

08004fba <__exponent>:
 8004fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fbc:	2900      	cmp	r1, #0
 8004fbe:	bfba      	itte	lt
 8004fc0:	4249      	neglt	r1, r1
 8004fc2:	232d      	movlt	r3, #45	@ 0x2d
 8004fc4:	232b      	movge	r3, #43	@ 0x2b
 8004fc6:	2909      	cmp	r1, #9
 8004fc8:	7002      	strb	r2, [r0, #0]
 8004fca:	7043      	strb	r3, [r0, #1]
 8004fcc:	dd29      	ble.n	8005022 <__exponent+0x68>
 8004fce:	f10d 0307 	add.w	r3, sp, #7
 8004fd2:	461d      	mov	r5, r3
 8004fd4:	270a      	movs	r7, #10
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fdc:	fb07 1416 	mls	r4, r7, r6, r1
 8004fe0:	3430      	adds	r4, #48	@ 0x30
 8004fe2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	2c63      	cmp	r4, #99	@ 0x63
 8004fea:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fee:	4631      	mov	r1, r6
 8004ff0:	dcf1      	bgt.n	8004fd6 <__exponent+0x1c>
 8004ff2:	3130      	adds	r1, #48	@ 0x30
 8004ff4:	1e94      	subs	r4, r2, #2
 8004ff6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ffa:	1c41      	adds	r1, r0, #1
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	42ab      	cmp	r3, r5
 8005000:	d30a      	bcc.n	8005018 <__exponent+0x5e>
 8005002:	f10d 0309 	add.w	r3, sp, #9
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	42ac      	cmp	r4, r5
 800500a:	bf88      	it	hi
 800500c:	2300      	movhi	r3, #0
 800500e:	3302      	adds	r3, #2
 8005010:	4403      	add	r3, r0
 8005012:	1a18      	subs	r0, r3, r0
 8005014:	b003      	add	sp, #12
 8005016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005018:	f813 6b01 	ldrb.w	r6, [r3], #1
 800501c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005020:	e7ed      	b.n	8004ffe <__exponent+0x44>
 8005022:	2330      	movs	r3, #48	@ 0x30
 8005024:	3130      	adds	r1, #48	@ 0x30
 8005026:	7083      	strb	r3, [r0, #2]
 8005028:	70c1      	strb	r1, [r0, #3]
 800502a:	1d03      	adds	r3, r0, #4
 800502c:	e7f1      	b.n	8005012 <__exponent+0x58>
	...

08005030 <_printf_float>:
 8005030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005034:	b08d      	sub	sp, #52	@ 0x34
 8005036:	460c      	mov	r4, r1
 8005038:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800503c:	4616      	mov	r6, r2
 800503e:	461f      	mov	r7, r3
 8005040:	4605      	mov	r5, r0
 8005042:	f000 fcef 	bl	8005a24 <_localeconv_r>
 8005046:	6803      	ldr	r3, [r0, #0]
 8005048:	9304      	str	r3, [sp, #16]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fb f918 	bl	8000280 <strlen>
 8005050:	2300      	movs	r3, #0
 8005052:	930a      	str	r3, [sp, #40]	@ 0x28
 8005054:	f8d8 3000 	ldr.w	r3, [r8]
 8005058:	9005      	str	r0, [sp, #20]
 800505a:	3307      	adds	r3, #7
 800505c:	f023 0307 	bic.w	r3, r3, #7
 8005060:	f103 0208 	add.w	r2, r3, #8
 8005064:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005068:	f8d4 b000 	ldr.w	fp, [r4]
 800506c:	f8c8 2000 	str.w	r2, [r8]
 8005070:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005074:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005078:	9307      	str	r3, [sp, #28]
 800507a:	f8cd 8018 	str.w	r8, [sp, #24]
 800507e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005086:	4b9c      	ldr	r3, [pc, #624]	@ (80052f8 <_printf_float+0x2c8>)
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	f7fb fd56 	bl	8000b3c <__aeabi_dcmpun>
 8005090:	bb70      	cbnz	r0, 80050f0 <_printf_float+0xc0>
 8005092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005096:	4b98      	ldr	r3, [pc, #608]	@ (80052f8 <_printf_float+0x2c8>)
 8005098:	f04f 32ff 	mov.w	r2, #4294967295
 800509c:	f7fb fd30 	bl	8000b00 <__aeabi_dcmple>
 80050a0:	bb30      	cbnz	r0, 80050f0 <_printf_float+0xc0>
 80050a2:	2200      	movs	r2, #0
 80050a4:	2300      	movs	r3, #0
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb fd1f 	bl	8000aec <__aeabi_dcmplt>
 80050ae:	b110      	cbz	r0, 80050b6 <_printf_float+0x86>
 80050b0:	232d      	movs	r3, #45	@ 0x2d
 80050b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b6:	4a91      	ldr	r2, [pc, #580]	@ (80052fc <_printf_float+0x2cc>)
 80050b8:	4b91      	ldr	r3, [pc, #580]	@ (8005300 <_printf_float+0x2d0>)
 80050ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050be:	bf94      	ite	ls
 80050c0:	4690      	movls	r8, r2
 80050c2:	4698      	movhi	r8, r3
 80050c4:	2303      	movs	r3, #3
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	f02b 0304 	bic.w	r3, fp, #4
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	f04f 0900 	mov.w	r9, #0
 80050d2:	9700      	str	r7, [sp, #0]
 80050d4:	4633      	mov	r3, r6
 80050d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050d8:	4621      	mov	r1, r4
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 f9d2 	bl	8005484 <_printf_common>
 80050e0:	3001      	adds	r0, #1
 80050e2:	f040 808d 	bne.w	8005200 <_printf_float+0x1d0>
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	b00d      	add	sp, #52	@ 0x34
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb fd20 	bl	8000b3c <__aeabi_dcmpun>
 80050fc:	b140      	cbz	r0, 8005110 <_printf_float+0xe0>
 80050fe:	464b      	mov	r3, r9
 8005100:	2b00      	cmp	r3, #0
 8005102:	bfbc      	itt	lt
 8005104:	232d      	movlt	r3, #45	@ 0x2d
 8005106:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800510a:	4a7e      	ldr	r2, [pc, #504]	@ (8005304 <_printf_float+0x2d4>)
 800510c:	4b7e      	ldr	r3, [pc, #504]	@ (8005308 <_printf_float+0x2d8>)
 800510e:	e7d4      	b.n	80050ba <_printf_float+0x8a>
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005116:	9206      	str	r2, [sp, #24]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	d13b      	bne.n	8005194 <_printf_float+0x164>
 800511c:	2306      	movs	r3, #6
 800511e:	6063      	str	r3, [r4, #4]
 8005120:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005124:	2300      	movs	r3, #0
 8005126:	6022      	str	r2, [r4, #0]
 8005128:	9303      	str	r3, [sp, #12]
 800512a:	ab0a      	add	r3, sp, #40	@ 0x28
 800512c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005130:	ab09      	add	r3, sp, #36	@ 0x24
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6861      	ldr	r1, [r4, #4]
 8005136:	ec49 8b10 	vmov	d0, r8, r9
 800513a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800513e:	4628      	mov	r0, r5
 8005140:	f7ff fed6 	bl	8004ef0 <__cvt>
 8005144:	9b06      	ldr	r3, [sp, #24]
 8005146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005148:	2b47      	cmp	r3, #71	@ 0x47
 800514a:	4680      	mov	r8, r0
 800514c:	d129      	bne.n	80051a2 <_printf_float+0x172>
 800514e:	1cc8      	adds	r0, r1, #3
 8005150:	db02      	blt.n	8005158 <_printf_float+0x128>
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	4299      	cmp	r1, r3
 8005156:	dd41      	ble.n	80051dc <_printf_float+0x1ac>
 8005158:	f1aa 0a02 	sub.w	sl, sl, #2
 800515c:	fa5f fa8a 	uxtb.w	sl, sl
 8005160:	3901      	subs	r1, #1
 8005162:	4652      	mov	r2, sl
 8005164:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005168:	9109      	str	r1, [sp, #36]	@ 0x24
 800516a:	f7ff ff26 	bl	8004fba <__exponent>
 800516e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005170:	1813      	adds	r3, r2, r0
 8005172:	2a01      	cmp	r2, #1
 8005174:	4681      	mov	r9, r0
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	dc02      	bgt.n	8005180 <_printf_float+0x150>
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	07d2      	lsls	r2, r2, #31
 800517e:	d501      	bpl.n	8005184 <_printf_float+0x154>
 8005180:	3301      	adds	r3, #1
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0a2      	beq.n	80050d2 <_printf_float+0xa2>
 800518c:	232d      	movs	r3, #45	@ 0x2d
 800518e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005192:	e79e      	b.n	80050d2 <_printf_float+0xa2>
 8005194:	9a06      	ldr	r2, [sp, #24]
 8005196:	2a47      	cmp	r2, #71	@ 0x47
 8005198:	d1c2      	bne.n	8005120 <_printf_float+0xf0>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1c0      	bne.n	8005120 <_printf_float+0xf0>
 800519e:	2301      	movs	r3, #1
 80051a0:	e7bd      	b.n	800511e <_printf_float+0xee>
 80051a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051a6:	d9db      	bls.n	8005160 <_printf_float+0x130>
 80051a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051ac:	d118      	bne.n	80051e0 <_printf_float+0x1b0>
 80051ae:	2900      	cmp	r1, #0
 80051b0:	6863      	ldr	r3, [r4, #4]
 80051b2:	dd0b      	ble.n	80051cc <_printf_float+0x19c>
 80051b4:	6121      	str	r1, [r4, #16]
 80051b6:	b913      	cbnz	r3, 80051be <_printf_float+0x18e>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	07d0      	lsls	r0, r2, #31
 80051bc:	d502      	bpl.n	80051c4 <_printf_float+0x194>
 80051be:	3301      	adds	r3, #1
 80051c0:	440b      	add	r3, r1
 80051c2:	6123      	str	r3, [r4, #16]
 80051c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051c6:	f04f 0900 	mov.w	r9, #0
 80051ca:	e7db      	b.n	8005184 <_printf_float+0x154>
 80051cc:	b913      	cbnz	r3, 80051d4 <_printf_float+0x1a4>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	07d2      	lsls	r2, r2, #31
 80051d2:	d501      	bpl.n	80051d8 <_printf_float+0x1a8>
 80051d4:	3302      	adds	r3, #2
 80051d6:	e7f4      	b.n	80051c2 <_printf_float+0x192>
 80051d8:	2301      	movs	r3, #1
 80051da:	e7f2      	b.n	80051c2 <_printf_float+0x192>
 80051dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e2:	4299      	cmp	r1, r3
 80051e4:	db05      	blt.n	80051f2 <_printf_float+0x1c2>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	6121      	str	r1, [r4, #16]
 80051ea:	07d8      	lsls	r0, r3, #31
 80051ec:	d5ea      	bpl.n	80051c4 <_printf_float+0x194>
 80051ee:	1c4b      	adds	r3, r1, #1
 80051f0:	e7e7      	b.n	80051c2 <_printf_float+0x192>
 80051f2:	2900      	cmp	r1, #0
 80051f4:	bfd4      	ite	le
 80051f6:	f1c1 0202 	rsble	r2, r1, #2
 80051fa:	2201      	movgt	r2, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	e7e0      	b.n	80051c2 <_printf_float+0x192>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	055a      	lsls	r2, r3, #21
 8005204:	d407      	bmi.n	8005216 <_printf_float+0x1e6>
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	4642      	mov	r2, r8
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	d12b      	bne.n	800526c <_printf_float+0x23c>
 8005214:	e767      	b.n	80050e6 <_printf_float+0xb6>
 8005216:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800521a:	f240 80dd 	bls.w	80053d8 <_printf_float+0x3a8>
 800521e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005222:	2200      	movs	r2, #0
 8005224:	2300      	movs	r3, #0
 8005226:	f7fb fc57 	bl	8000ad8 <__aeabi_dcmpeq>
 800522a:	2800      	cmp	r0, #0
 800522c:	d033      	beq.n	8005296 <_printf_float+0x266>
 800522e:	4a37      	ldr	r2, [pc, #220]	@ (800530c <_printf_float+0x2dc>)
 8005230:	2301      	movs	r3, #1
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	f43f af54 	beq.w	80050e6 <_printf_float+0xb6>
 800523e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005242:	4543      	cmp	r3, r8
 8005244:	db02      	blt.n	800524c <_printf_float+0x21c>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	07d8      	lsls	r0, r3, #31
 800524a:	d50f      	bpl.n	800526c <_printf_float+0x23c>
 800524c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f af45 	beq.w	80050e6 <_printf_float+0xb6>
 800525c:	f04f 0900 	mov.w	r9, #0
 8005260:	f108 38ff 	add.w	r8, r8, #4294967295
 8005264:	f104 0a1a 	add.w	sl, r4, #26
 8005268:	45c8      	cmp	r8, r9
 800526a:	dc09      	bgt.n	8005280 <_printf_float+0x250>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	079b      	lsls	r3, r3, #30
 8005270:	f100 8103 	bmi.w	800547a <_printf_float+0x44a>
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005278:	4298      	cmp	r0, r3
 800527a:	bfb8      	it	lt
 800527c:	4618      	movlt	r0, r3
 800527e:	e734      	b.n	80050ea <_printf_float+0xba>
 8005280:	2301      	movs	r3, #1
 8005282:	4652      	mov	r2, sl
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f af2b 	beq.w	80050e6 <_printf_float+0xb6>
 8005290:	f109 0901 	add.w	r9, r9, #1
 8005294:	e7e8      	b.n	8005268 <_printf_float+0x238>
 8005296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	dc39      	bgt.n	8005310 <_printf_float+0x2e0>
 800529c:	4a1b      	ldr	r2, [pc, #108]	@ (800530c <_printf_float+0x2dc>)
 800529e:	2301      	movs	r3, #1
 80052a0:	4631      	mov	r1, r6
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	f43f af1d 	beq.w	80050e6 <_printf_float+0xb6>
 80052ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052b0:	ea59 0303 	orrs.w	r3, r9, r3
 80052b4:	d102      	bne.n	80052bc <_printf_float+0x28c>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	07d9      	lsls	r1, r3, #31
 80052ba:	d5d7      	bpl.n	800526c <_printf_float+0x23c>
 80052bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af0d 	beq.w	80050e6 <_printf_float+0xb6>
 80052cc:	f04f 0a00 	mov.w	sl, #0
 80052d0:	f104 0b1a 	add.w	fp, r4, #26
 80052d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d6:	425b      	negs	r3, r3
 80052d8:	4553      	cmp	r3, sl
 80052da:	dc01      	bgt.n	80052e0 <_printf_float+0x2b0>
 80052dc:	464b      	mov	r3, r9
 80052de:	e793      	b.n	8005208 <_printf_float+0x1d8>
 80052e0:	2301      	movs	r3, #1
 80052e2:	465a      	mov	r2, fp
 80052e4:	4631      	mov	r1, r6
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b8      	blx	r7
 80052ea:	3001      	adds	r0, #1
 80052ec:	f43f aefb 	beq.w	80050e6 <_printf_float+0xb6>
 80052f0:	f10a 0a01 	add.w	sl, sl, #1
 80052f4:	e7ee      	b.n	80052d4 <_printf_float+0x2a4>
 80052f6:	bf00      	nop
 80052f8:	7fefffff 	.word	0x7fefffff
 80052fc:	08007c0c 	.word	0x08007c0c
 8005300:	08007c10 	.word	0x08007c10
 8005304:	08007c14 	.word	0x08007c14
 8005308:	08007c18 	.word	0x08007c18
 800530c:	08007c1c 	.word	0x08007c1c
 8005310:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005312:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005316:	4553      	cmp	r3, sl
 8005318:	bfa8      	it	ge
 800531a:	4653      	movge	r3, sl
 800531c:	2b00      	cmp	r3, #0
 800531e:	4699      	mov	r9, r3
 8005320:	dc36      	bgt.n	8005390 <_printf_float+0x360>
 8005322:	f04f 0b00 	mov.w	fp, #0
 8005326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800532a:	f104 021a 	add.w	r2, r4, #26
 800532e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005330:	9306      	str	r3, [sp, #24]
 8005332:	eba3 0309 	sub.w	r3, r3, r9
 8005336:	455b      	cmp	r3, fp
 8005338:	dc31      	bgt.n	800539e <_printf_float+0x36e>
 800533a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800533c:	459a      	cmp	sl, r3
 800533e:	dc3a      	bgt.n	80053b6 <_printf_float+0x386>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	07da      	lsls	r2, r3, #31
 8005344:	d437      	bmi.n	80053b6 <_printf_float+0x386>
 8005346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005348:	ebaa 0903 	sub.w	r9, sl, r3
 800534c:	9b06      	ldr	r3, [sp, #24]
 800534e:	ebaa 0303 	sub.w	r3, sl, r3
 8005352:	4599      	cmp	r9, r3
 8005354:	bfa8      	it	ge
 8005356:	4699      	movge	r9, r3
 8005358:	f1b9 0f00 	cmp.w	r9, #0
 800535c:	dc33      	bgt.n	80053c6 <_printf_float+0x396>
 800535e:	f04f 0800 	mov.w	r8, #0
 8005362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005366:	f104 0b1a 	add.w	fp, r4, #26
 800536a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800536c:	ebaa 0303 	sub.w	r3, sl, r3
 8005370:	eba3 0309 	sub.w	r3, r3, r9
 8005374:	4543      	cmp	r3, r8
 8005376:	f77f af79 	ble.w	800526c <_printf_float+0x23c>
 800537a:	2301      	movs	r3, #1
 800537c:	465a      	mov	r2, fp
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	f43f aeae 	beq.w	80050e6 <_printf_float+0xb6>
 800538a:	f108 0801 	add.w	r8, r8, #1
 800538e:	e7ec      	b.n	800536a <_printf_float+0x33a>
 8005390:	4642      	mov	r2, r8
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d1c2      	bne.n	8005322 <_printf_float+0x2f2>
 800539c:	e6a3      	b.n	80050e6 <_printf_float+0xb6>
 800539e:	2301      	movs	r3, #1
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	9206      	str	r2, [sp, #24]
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f ae9c 	beq.w	80050e6 <_printf_float+0xb6>
 80053ae:	9a06      	ldr	r2, [sp, #24]
 80053b0:	f10b 0b01 	add.w	fp, fp, #1
 80053b4:	e7bb      	b.n	800532e <_printf_float+0x2fe>
 80053b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	d1c0      	bne.n	8005346 <_printf_float+0x316>
 80053c4:	e68f      	b.n	80050e6 <_printf_float+0xb6>
 80053c6:	9a06      	ldr	r2, [sp, #24]
 80053c8:	464b      	mov	r3, r9
 80053ca:	4442      	add	r2, r8
 80053cc:	4631      	mov	r1, r6
 80053ce:	4628      	mov	r0, r5
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	d1c3      	bne.n	800535e <_printf_float+0x32e>
 80053d6:	e686      	b.n	80050e6 <_printf_float+0xb6>
 80053d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053dc:	f1ba 0f01 	cmp.w	sl, #1
 80053e0:	dc01      	bgt.n	80053e6 <_printf_float+0x3b6>
 80053e2:	07db      	lsls	r3, r3, #31
 80053e4:	d536      	bpl.n	8005454 <_printf_float+0x424>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4642      	mov	r2, r8
 80053ea:	4631      	mov	r1, r6
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f ae78 	beq.w	80050e6 <_printf_float+0xb6>
 80053f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	f43f ae70 	beq.w	80050e6 <_printf_float+0xb6>
 8005406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800540a:	2200      	movs	r2, #0
 800540c:	2300      	movs	r3, #0
 800540e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005412:	f7fb fb61 	bl	8000ad8 <__aeabi_dcmpeq>
 8005416:	b9c0      	cbnz	r0, 800544a <_printf_float+0x41a>
 8005418:	4653      	mov	r3, sl
 800541a:	f108 0201 	add.w	r2, r8, #1
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	d10c      	bne.n	8005442 <_printf_float+0x412>
 8005428:	e65d      	b.n	80050e6 <_printf_float+0xb6>
 800542a:	2301      	movs	r3, #1
 800542c:	465a      	mov	r2, fp
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	f43f ae56 	beq.w	80050e6 <_printf_float+0xb6>
 800543a:	f108 0801 	add.w	r8, r8, #1
 800543e:	45d0      	cmp	r8, sl
 8005440:	dbf3      	blt.n	800542a <_printf_float+0x3fa>
 8005442:	464b      	mov	r3, r9
 8005444:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005448:	e6df      	b.n	800520a <_printf_float+0x1da>
 800544a:	f04f 0800 	mov.w	r8, #0
 800544e:	f104 0b1a 	add.w	fp, r4, #26
 8005452:	e7f4      	b.n	800543e <_printf_float+0x40e>
 8005454:	2301      	movs	r3, #1
 8005456:	4642      	mov	r2, r8
 8005458:	e7e1      	b.n	800541e <_printf_float+0x3ee>
 800545a:	2301      	movs	r3, #1
 800545c:	464a      	mov	r2, r9
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f ae3e 	beq.w	80050e6 <_printf_float+0xb6>
 800546a:	f108 0801 	add.w	r8, r8, #1
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	4543      	cmp	r3, r8
 8005476:	dcf0      	bgt.n	800545a <_printf_float+0x42a>
 8005478:	e6fc      	b.n	8005274 <_printf_float+0x244>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	f104 0919 	add.w	r9, r4, #25
 8005482:	e7f4      	b.n	800546e <_printf_float+0x43e>

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4616      	mov	r6, r2
 800548a:	4698      	mov	r8, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005494:	4293      	cmp	r3, r2
 8005496:	bfb8      	it	lt
 8005498:	4613      	movlt	r3, r2
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a0:	4607      	mov	r7, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	b10a      	cbz	r2, 80054aa <_printf_common+0x26>
 80054a6:	3301      	adds	r3, #1
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	6833      	ldrmi	r3, [r6, #0]
 80054b2:	3302      	addmi	r3, #2
 80054b4:	6033      	strmi	r3, [r6, #0]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	f015 0506 	ands.w	r5, r5, #6
 80054bc:	d106      	bne.n	80054cc <_printf_common+0x48>
 80054be:	f104 0a19 	add.w	sl, r4, #25
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	6832      	ldr	r2, [r6, #0]
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dc26      	bgt.n	800551a <_printf_common+0x96>
 80054cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	3b00      	subs	r3, #0
 80054d4:	bf18      	it	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	0692      	lsls	r2, r2, #26
 80054da:	d42b      	bmi.n	8005534 <_printf_common+0xb0>
 80054dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e0:	4641      	mov	r1, r8
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c8      	blx	r9
 80054e6:	3001      	adds	r0, #1
 80054e8:	d01e      	beq.n	8005528 <_printf_common+0xa4>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	6922      	ldr	r2, [r4, #16]
 80054ee:	f003 0306 	and.w	r3, r3, #6
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf02      	ittt	eq
 80054f6:	68e5      	ldreq	r5, [r4, #12]
 80054f8:	6833      	ldreq	r3, [r6, #0]
 80054fa:	1aed      	subeq	r5, r5, r3
 80054fc:	68a3      	ldr	r3, [r4, #8]
 80054fe:	bf0c      	ite	eq
 8005500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005504:	2500      	movne	r5, #0
 8005506:	4293      	cmp	r3, r2
 8005508:	bfc4      	itt	gt
 800550a:	1a9b      	subgt	r3, r3, r2
 800550c:	18ed      	addgt	r5, r5, r3
 800550e:	2600      	movs	r6, #0
 8005510:	341a      	adds	r4, #26
 8005512:	42b5      	cmp	r5, r6
 8005514:	d11a      	bne.n	800554c <_printf_common+0xc8>
 8005516:	2000      	movs	r0, #0
 8005518:	e008      	b.n	800552c <_printf_common+0xa8>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4641      	mov	r1, r8
 8005520:	4638      	mov	r0, r7
 8005522:	47c8      	blx	r9
 8005524:	3001      	adds	r0, #1
 8005526:	d103      	bne.n	8005530 <_printf_common+0xac>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	3501      	adds	r5, #1
 8005532:	e7c6      	b.n	80054c2 <_printf_common+0x3e>
 8005534:	18e1      	adds	r1, r4, r3
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	2030      	movs	r0, #48	@ 0x30
 800553a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800553e:	4422      	add	r2, r4
 8005540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005548:	3302      	adds	r3, #2
 800554a:	e7c7      	b.n	80054dc <_printf_common+0x58>
 800554c:	2301      	movs	r3, #1
 800554e:	4622      	mov	r2, r4
 8005550:	4641      	mov	r1, r8
 8005552:	4638      	mov	r0, r7
 8005554:	47c8      	blx	r9
 8005556:	3001      	adds	r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa4>
 800555a:	3601      	adds	r6, #1
 800555c:	e7d9      	b.n	8005512 <_printf_common+0x8e>
	...

08005560 <_printf_i>:
 8005560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	7e0f      	ldrb	r7, [r1, #24]
 8005566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005568:	2f78      	cmp	r7, #120	@ 0x78
 800556a:	4691      	mov	r9, r2
 800556c:	4680      	mov	r8, r0
 800556e:	460c      	mov	r4, r1
 8005570:	469a      	mov	sl, r3
 8005572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005576:	d807      	bhi.n	8005588 <_printf_i+0x28>
 8005578:	2f62      	cmp	r7, #98	@ 0x62
 800557a:	d80a      	bhi.n	8005592 <_printf_i+0x32>
 800557c:	2f00      	cmp	r7, #0
 800557e:	f000 80d2 	beq.w	8005726 <_printf_i+0x1c6>
 8005582:	2f58      	cmp	r7, #88	@ 0x58
 8005584:	f000 80b9 	beq.w	80056fa <_printf_i+0x19a>
 8005588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800558c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005590:	e03a      	b.n	8005608 <_printf_i+0xa8>
 8005592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005596:	2b15      	cmp	r3, #21
 8005598:	d8f6      	bhi.n	8005588 <_printf_i+0x28>
 800559a:	a101      	add	r1, pc, #4	@ (adr r1, 80055a0 <_printf_i+0x40>)
 800559c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	08005589 	.word	0x08005589
 80055ac:	08005589 	.word	0x08005589
 80055b0:	08005589 	.word	0x08005589
 80055b4:	08005589 	.word	0x08005589
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005589 	.word	0x08005589
 80055c0:	08005589 	.word	0x08005589
 80055c4:	08005589 	.word	0x08005589
 80055c8:	08005589 	.word	0x08005589
 80055cc:	0800570d 	.word	0x0800570d
 80055d0:	08005637 	.word	0x08005637
 80055d4:	080056c7 	.word	0x080056c7
 80055d8:	08005589 	.word	0x08005589
 80055dc:	08005589 	.word	0x08005589
 80055e0:	0800572f 	.word	0x0800572f
 80055e4:	08005589 	.word	0x08005589
 80055e8:	08005637 	.word	0x08005637
 80055ec:	08005589 	.word	0x08005589
 80055f0:	08005589 	.word	0x08005589
 80055f4:	080056cf 	.word	0x080056cf
 80055f8:	6833      	ldr	r3, [r6, #0]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6032      	str	r2, [r6, #0]
 8005600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005608:	2301      	movs	r3, #1
 800560a:	e09d      	b.n	8005748 <_printf_i+0x1e8>
 800560c:	6833      	ldr	r3, [r6, #0]
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	1d19      	adds	r1, r3, #4
 8005612:	6031      	str	r1, [r6, #0]
 8005614:	0606      	lsls	r6, r0, #24
 8005616:	d501      	bpl.n	800561c <_printf_i+0xbc>
 8005618:	681d      	ldr	r5, [r3, #0]
 800561a:	e003      	b.n	8005624 <_printf_i+0xc4>
 800561c:	0645      	lsls	r5, r0, #25
 800561e:	d5fb      	bpl.n	8005618 <_printf_i+0xb8>
 8005620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005624:	2d00      	cmp	r5, #0
 8005626:	da03      	bge.n	8005630 <_printf_i+0xd0>
 8005628:	232d      	movs	r3, #45	@ 0x2d
 800562a:	426d      	negs	r5, r5
 800562c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005630:	4859      	ldr	r0, [pc, #356]	@ (8005798 <_printf_i+0x238>)
 8005632:	230a      	movs	r3, #10
 8005634:	e011      	b.n	800565a <_printf_i+0xfa>
 8005636:	6821      	ldr	r1, [r4, #0]
 8005638:	6833      	ldr	r3, [r6, #0]
 800563a:	0608      	lsls	r0, r1, #24
 800563c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005640:	d402      	bmi.n	8005648 <_printf_i+0xe8>
 8005642:	0649      	lsls	r1, r1, #25
 8005644:	bf48      	it	mi
 8005646:	b2ad      	uxthmi	r5, r5
 8005648:	2f6f      	cmp	r7, #111	@ 0x6f
 800564a:	4853      	ldr	r0, [pc, #332]	@ (8005798 <_printf_i+0x238>)
 800564c:	6033      	str	r3, [r6, #0]
 800564e:	bf14      	ite	ne
 8005650:	230a      	movne	r3, #10
 8005652:	2308      	moveq	r3, #8
 8005654:	2100      	movs	r1, #0
 8005656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800565a:	6866      	ldr	r6, [r4, #4]
 800565c:	60a6      	str	r6, [r4, #8]
 800565e:	2e00      	cmp	r6, #0
 8005660:	bfa2      	ittt	ge
 8005662:	6821      	ldrge	r1, [r4, #0]
 8005664:	f021 0104 	bicge.w	r1, r1, #4
 8005668:	6021      	strge	r1, [r4, #0]
 800566a:	b90d      	cbnz	r5, 8005670 <_printf_i+0x110>
 800566c:	2e00      	cmp	r6, #0
 800566e:	d04b      	beq.n	8005708 <_printf_i+0x1a8>
 8005670:	4616      	mov	r6, r2
 8005672:	fbb5 f1f3 	udiv	r1, r5, r3
 8005676:	fb03 5711 	mls	r7, r3, r1, r5
 800567a:	5dc7      	ldrb	r7, [r0, r7]
 800567c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005680:	462f      	mov	r7, r5
 8005682:	42bb      	cmp	r3, r7
 8005684:	460d      	mov	r5, r1
 8005686:	d9f4      	bls.n	8005672 <_printf_i+0x112>
 8005688:	2b08      	cmp	r3, #8
 800568a:	d10b      	bne.n	80056a4 <_printf_i+0x144>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	07df      	lsls	r7, r3, #31
 8005690:	d508      	bpl.n	80056a4 <_printf_i+0x144>
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	6861      	ldr	r1, [r4, #4]
 8005696:	4299      	cmp	r1, r3
 8005698:	bfde      	ittt	le
 800569a:	2330      	movle	r3, #48	@ 0x30
 800569c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056a4:	1b92      	subs	r2, r2, r6
 80056a6:	6122      	str	r2, [r4, #16]
 80056a8:	f8cd a000 	str.w	sl, [sp]
 80056ac:	464b      	mov	r3, r9
 80056ae:	aa03      	add	r2, sp, #12
 80056b0:	4621      	mov	r1, r4
 80056b2:	4640      	mov	r0, r8
 80056b4:	f7ff fee6 	bl	8005484 <_printf_common>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d14a      	bne.n	8005752 <_printf_i+0x1f2>
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	b004      	add	sp, #16
 80056c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f043 0320 	orr.w	r3, r3, #32
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	4833      	ldr	r0, [pc, #204]	@ (800579c <_printf_i+0x23c>)
 80056d0:	2778      	movs	r7, #120	@ 0x78
 80056d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6831      	ldr	r1, [r6, #0]
 80056da:	061f      	lsls	r7, r3, #24
 80056dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80056e0:	d402      	bmi.n	80056e8 <_printf_i+0x188>
 80056e2:	065f      	lsls	r7, r3, #25
 80056e4:	bf48      	it	mi
 80056e6:	b2ad      	uxthmi	r5, r5
 80056e8:	6031      	str	r1, [r6, #0]
 80056ea:	07d9      	lsls	r1, r3, #31
 80056ec:	bf44      	itt	mi
 80056ee:	f043 0320 	orrmi.w	r3, r3, #32
 80056f2:	6023      	strmi	r3, [r4, #0]
 80056f4:	b11d      	cbz	r5, 80056fe <_printf_i+0x19e>
 80056f6:	2310      	movs	r3, #16
 80056f8:	e7ac      	b.n	8005654 <_printf_i+0xf4>
 80056fa:	4827      	ldr	r0, [pc, #156]	@ (8005798 <_printf_i+0x238>)
 80056fc:	e7e9      	b.n	80056d2 <_printf_i+0x172>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	f023 0320 	bic.w	r3, r3, #32
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	e7f6      	b.n	80056f6 <_printf_i+0x196>
 8005708:	4616      	mov	r6, r2
 800570a:	e7bd      	b.n	8005688 <_printf_i+0x128>
 800570c:	6833      	ldr	r3, [r6, #0]
 800570e:	6825      	ldr	r5, [r4, #0]
 8005710:	6961      	ldr	r1, [r4, #20]
 8005712:	1d18      	adds	r0, r3, #4
 8005714:	6030      	str	r0, [r6, #0]
 8005716:	062e      	lsls	r6, r5, #24
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	d501      	bpl.n	8005720 <_printf_i+0x1c0>
 800571c:	6019      	str	r1, [r3, #0]
 800571e:	e002      	b.n	8005726 <_printf_i+0x1c6>
 8005720:	0668      	lsls	r0, r5, #25
 8005722:	d5fb      	bpl.n	800571c <_printf_i+0x1bc>
 8005724:	8019      	strh	r1, [r3, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	6123      	str	r3, [r4, #16]
 800572a:	4616      	mov	r6, r2
 800572c:	e7bc      	b.n	80056a8 <_printf_i+0x148>
 800572e:	6833      	ldr	r3, [r6, #0]
 8005730:	1d1a      	adds	r2, r3, #4
 8005732:	6032      	str	r2, [r6, #0]
 8005734:	681e      	ldr	r6, [r3, #0]
 8005736:	6862      	ldr	r2, [r4, #4]
 8005738:	2100      	movs	r1, #0
 800573a:	4630      	mov	r0, r6
 800573c:	f7fa fd50 	bl	80001e0 <memchr>
 8005740:	b108      	cbz	r0, 8005746 <_printf_i+0x1e6>
 8005742:	1b80      	subs	r0, r0, r6
 8005744:	6060      	str	r0, [r4, #4]
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	2300      	movs	r3, #0
 800574c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005750:	e7aa      	b.n	80056a8 <_printf_i+0x148>
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	4632      	mov	r2, r6
 8005756:	4649      	mov	r1, r9
 8005758:	4640      	mov	r0, r8
 800575a:	47d0      	blx	sl
 800575c:	3001      	adds	r0, #1
 800575e:	d0ad      	beq.n	80056bc <_printf_i+0x15c>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	079b      	lsls	r3, r3, #30
 8005764:	d413      	bmi.n	800578e <_printf_i+0x22e>
 8005766:	68e0      	ldr	r0, [r4, #12]
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	4298      	cmp	r0, r3
 800576c:	bfb8      	it	lt
 800576e:	4618      	movlt	r0, r3
 8005770:	e7a6      	b.n	80056c0 <_printf_i+0x160>
 8005772:	2301      	movs	r3, #1
 8005774:	4632      	mov	r2, r6
 8005776:	4649      	mov	r1, r9
 8005778:	4640      	mov	r0, r8
 800577a:	47d0      	blx	sl
 800577c:	3001      	adds	r0, #1
 800577e:	d09d      	beq.n	80056bc <_printf_i+0x15c>
 8005780:	3501      	adds	r5, #1
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	9903      	ldr	r1, [sp, #12]
 8005786:	1a5b      	subs	r3, r3, r1
 8005788:	42ab      	cmp	r3, r5
 800578a:	dcf2      	bgt.n	8005772 <_printf_i+0x212>
 800578c:	e7eb      	b.n	8005766 <_printf_i+0x206>
 800578e:	2500      	movs	r5, #0
 8005790:	f104 0619 	add.w	r6, r4, #25
 8005794:	e7f5      	b.n	8005782 <_printf_i+0x222>
 8005796:	bf00      	nop
 8005798:	08007c1e 	.word	0x08007c1e
 800579c:	08007c2f 	.word	0x08007c2f

080057a0 <std>:
 80057a0:	2300      	movs	r3, #0
 80057a2:	b510      	push	{r4, lr}
 80057a4:	4604      	mov	r4, r0
 80057a6:	e9c0 3300 	strd	r3, r3, [r0]
 80057aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ae:	6083      	str	r3, [r0, #8]
 80057b0:	8181      	strh	r1, [r0, #12]
 80057b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80057b4:	81c2      	strh	r2, [r0, #14]
 80057b6:	6183      	str	r3, [r0, #24]
 80057b8:	4619      	mov	r1, r3
 80057ba:	2208      	movs	r2, #8
 80057bc:	305c      	adds	r0, #92	@ 0x5c
 80057be:	f000 f928 	bl	8005a12 <memset>
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <std+0x58>)
 80057c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <std+0x5c>)
 80057c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <std+0x60>)
 80057cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <std+0x64>)
 80057d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x68>)
 80057d4:	6224      	str	r4, [r4, #32]
 80057d6:	429c      	cmp	r4, r3
 80057d8:	d006      	beq.n	80057e8 <std+0x48>
 80057da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057de:	4294      	cmp	r4, r2
 80057e0:	d002      	beq.n	80057e8 <std+0x48>
 80057e2:	33d0      	adds	r3, #208	@ 0xd0
 80057e4:	429c      	cmp	r4, r3
 80057e6:	d105      	bne.n	80057f4 <std+0x54>
 80057e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f0:	f000 b98c 	b.w	8005b0c <__retarget_lock_init_recursive>
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	0800598d 	.word	0x0800598d
 80057fc:	080059af 	.word	0x080059af
 8005800:	080059e7 	.word	0x080059e7
 8005804:	08005a0b 	.word	0x08005a0b
 8005808:	20000360 	.word	0x20000360

0800580c <stdio_exit_handler>:
 800580c:	4a02      	ldr	r2, [pc, #8]	@ (8005818 <stdio_exit_handler+0xc>)
 800580e:	4903      	ldr	r1, [pc, #12]	@ (800581c <stdio_exit_handler+0x10>)
 8005810:	4803      	ldr	r0, [pc, #12]	@ (8005820 <stdio_exit_handler+0x14>)
 8005812:	f000 b869 	b.w	80058e8 <_fwalk_sglue>
 8005816:	bf00      	nop
 8005818:	20000010 	.word	0x20000010
 800581c:	0800746d 	.word	0x0800746d
 8005820:	20000020 	.word	0x20000020

08005824 <cleanup_stdio>:
 8005824:	6841      	ldr	r1, [r0, #4]
 8005826:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <cleanup_stdio+0x34>)
 8005828:	4299      	cmp	r1, r3
 800582a:	b510      	push	{r4, lr}
 800582c:	4604      	mov	r4, r0
 800582e:	d001      	beq.n	8005834 <cleanup_stdio+0x10>
 8005830:	f001 fe1c 	bl	800746c <_fflush_r>
 8005834:	68a1      	ldr	r1, [r4, #8]
 8005836:	4b09      	ldr	r3, [pc, #36]	@ (800585c <cleanup_stdio+0x38>)
 8005838:	4299      	cmp	r1, r3
 800583a:	d002      	beq.n	8005842 <cleanup_stdio+0x1e>
 800583c:	4620      	mov	r0, r4
 800583e:	f001 fe15 	bl	800746c <_fflush_r>
 8005842:	68e1      	ldr	r1, [r4, #12]
 8005844:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <cleanup_stdio+0x3c>)
 8005846:	4299      	cmp	r1, r3
 8005848:	d004      	beq.n	8005854 <cleanup_stdio+0x30>
 800584a:	4620      	mov	r0, r4
 800584c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005850:	f001 be0c 	b.w	800746c <_fflush_r>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	bf00      	nop
 8005858:	20000360 	.word	0x20000360
 800585c:	200003c8 	.word	0x200003c8
 8005860:	20000430 	.word	0x20000430

08005864 <global_stdio_init.part.0>:
 8005864:	b510      	push	{r4, lr}
 8005866:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <global_stdio_init.part.0+0x30>)
 8005868:	4c0b      	ldr	r4, [pc, #44]	@ (8005898 <global_stdio_init.part.0+0x34>)
 800586a:	4a0c      	ldr	r2, [pc, #48]	@ (800589c <global_stdio_init.part.0+0x38>)
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	4620      	mov	r0, r4
 8005870:	2200      	movs	r2, #0
 8005872:	2104      	movs	r1, #4
 8005874:	f7ff ff94 	bl	80057a0 <std>
 8005878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800587c:	2201      	movs	r2, #1
 800587e:	2109      	movs	r1, #9
 8005880:	f7ff ff8e 	bl	80057a0 <std>
 8005884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005888:	2202      	movs	r2, #2
 800588a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588e:	2112      	movs	r1, #18
 8005890:	f7ff bf86 	b.w	80057a0 <std>
 8005894:	20000498 	.word	0x20000498
 8005898:	20000360 	.word	0x20000360
 800589c:	0800580d 	.word	0x0800580d

080058a0 <__sfp_lock_acquire>:
 80058a0:	4801      	ldr	r0, [pc, #4]	@ (80058a8 <__sfp_lock_acquire+0x8>)
 80058a2:	f000 b934 	b.w	8005b0e <__retarget_lock_acquire_recursive>
 80058a6:	bf00      	nop
 80058a8:	200004a1 	.word	0x200004a1

080058ac <__sfp_lock_release>:
 80058ac:	4801      	ldr	r0, [pc, #4]	@ (80058b4 <__sfp_lock_release+0x8>)
 80058ae:	f000 b92f 	b.w	8005b10 <__retarget_lock_release_recursive>
 80058b2:	bf00      	nop
 80058b4:	200004a1 	.word	0x200004a1

080058b8 <__sinit>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	f7ff fff0 	bl	80058a0 <__sfp_lock_acquire>
 80058c0:	6a23      	ldr	r3, [r4, #32]
 80058c2:	b11b      	cbz	r3, 80058cc <__sinit+0x14>
 80058c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c8:	f7ff bff0 	b.w	80058ac <__sfp_lock_release>
 80058cc:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <__sinit+0x28>)
 80058ce:	6223      	str	r3, [r4, #32]
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <__sinit+0x2c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f5      	bne.n	80058c4 <__sinit+0xc>
 80058d8:	f7ff ffc4 	bl	8005864 <global_stdio_init.part.0>
 80058dc:	e7f2      	b.n	80058c4 <__sinit+0xc>
 80058de:	bf00      	nop
 80058e0:	08005825 	.word	0x08005825
 80058e4:	20000498 	.word	0x20000498

080058e8 <_fwalk_sglue>:
 80058e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ec:	4607      	mov	r7, r0
 80058ee:	4688      	mov	r8, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	2600      	movs	r6, #0
 80058f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058f8:	f1b9 0901 	subs.w	r9, r9, #1
 80058fc:	d505      	bpl.n	800590a <_fwalk_sglue+0x22>
 80058fe:	6824      	ldr	r4, [r4, #0]
 8005900:	2c00      	cmp	r4, #0
 8005902:	d1f7      	bne.n	80058f4 <_fwalk_sglue+0xc>
 8005904:	4630      	mov	r0, r6
 8005906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590a:	89ab      	ldrh	r3, [r5, #12]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d907      	bls.n	8005920 <_fwalk_sglue+0x38>
 8005910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005914:	3301      	adds	r3, #1
 8005916:	d003      	beq.n	8005920 <_fwalk_sglue+0x38>
 8005918:	4629      	mov	r1, r5
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	4306      	orrs	r6, r0
 8005920:	3568      	adds	r5, #104	@ 0x68
 8005922:	e7e9      	b.n	80058f8 <_fwalk_sglue+0x10>

08005924 <sniprintf>:
 8005924:	b40c      	push	{r2, r3}
 8005926:	b530      	push	{r4, r5, lr}
 8005928:	4b17      	ldr	r3, [pc, #92]	@ (8005988 <sniprintf+0x64>)
 800592a:	1e0c      	subs	r4, r1, #0
 800592c:	681d      	ldr	r5, [r3, #0]
 800592e:	b09d      	sub	sp, #116	@ 0x74
 8005930:	da08      	bge.n	8005944 <sniprintf+0x20>
 8005932:	238b      	movs	r3, #139	@ 0x8b
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	f04f 30ff 	mov.w	r0, #4294967295
 800593a:	b01d      	add	sp, #116	@ 0x74
 800593c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005940:	b002      	add	sp, #8
 8005942:	4770      	bx	lr
 8005944:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005948:	f8ad 3014 	strh.w	r3, [sp, #20]
 800594c:	bf14      	ite	ne
 800594e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005952:	4623      	moveq	r3, r4
 8005954:	9304      	str	r3, [sp, #16]
 8005956:	9307      	str	r3, [sp, #28]
 8005958:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800595c:	9002      	str	r0, [sp, #8]
 800595e:	9006      	str	r0, [sp, #24]
 8005960:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005964:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005966:	ab21      	add	r3, sp, #132	@ 0x84
 8005968:	a902      	add	r1, sp, #8
 800596a:	4628      	mov	r0, r5
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	f001 fbfd 	bl	800716c <_svfiprintf_r>
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	bfbc      	itt	lt
 8005976:	238b      	movlt	r3, #139	@ 0x8b
 8005978:	602b      	strlt	r3, [r5, #0]
 800597a:	2c00      	cmp	r4, #0
 800597c:	d0dd      	beq.n	800593a <sniprintf+0x16>
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e7d9      	b.n	800593a <sniprintf+0x16>
 8005986:	bf00      	nop
 8005988:	2000001c 	.word	0x2000001c

0800598c <__sread>:
 800598c:	b510      	push	{r4, lr}
 800598e:	460c      	mov	r4, r1
 8005990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005994:	f000 f86c 	bl	8005a70 <_read_r>
 8005998:	2800      	cmp	r0, #0
 800599a:	bfab      	itete	ge
 800599c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800599e:	89a3      	ldrhlt	r3, [r4, #12]
 80059a0:	181b      	addge	r3, r3, r0
 80059a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059a6:	bfac      	ite	ge
 80059a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059aa:	81a3      	strhlt	r3, [r4, #12]
 80059ac:	bd10      	pop	{r4, pc}

080059ae <__swrite>:
 80059ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	461f      	mov	r7, r3
 80059b4:	898b      	ldrh	r3, [r1, #12]
 80059b6:	05db      	lsls	r3, r3, #23
 80059b8:	4605      	mov	r5, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	4616      	mov	r6, r2
 80059be:	d505      	bpl.n	80059cc <__swrite+0x1e>
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	2302      	movs	r3, #2
 80059c6:	2200      	movs	r2, #0
 80059c8:	f000 f840 	bl	8005a4c <_lseek_r>
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059d6:	81a3      	strh	r3, [r4, #12]
 80059d8:	4632      	mov	r2, r6
 80059da:	463b      	mov	r3, r7
 80059dc:	4628      	mov	r0, r5
 80059de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	f000 b857 	b.w	8005a94 <_write_r>

080059e6 <__sseek>:
 80059e6:	b510      	push	{r4, lr}
 80059e8:	460c      	mov	r4, r1
 80059ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ee:	f000 f82d 	bl	8005a4c <_lseek_r>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	bf15      	itete	ne
 80059f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a02:	81a3      	strheq	r3, [r4, #12]
 8005a04:	bf18      	it	ne
 8005a06:	81a3      	strhne	r3, [r4, #12]
 8005a08:	bd10      	pop	{r4, pc}

08005a0a <__sclose>:
 8005a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0e:	f000 b80d 	b.w	8005a2c <_close_r>

08005a12 <memset>:
 8005a12:	4402      	add	r2, r0
 8005a14:	4603      	mov	r3, r0
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d100      	bne.n	8005a1c <memset+0xa>
 8005a1a:	4770      	bx	lr
 8005a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a20:	e7f9      	b.n	8005a16 <memset+0x4>
	...

08005a24 <_localeconv_r>:
 8005a24:	4800      	ldr	r0, [pc, #0]	@ (8005a28 <_localeconv_r+0x4>)
 8005a26:	4770      	bx	lr
 8005a28:	2000015c 	.word	0x2000015c

08005a2c <_close_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4d06      	ldr	r5, [pc, #24]	@ (8005a48 <_close_r+0x1c>)
 8005a30:	2300      	movs	r3, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	602b      	str	r3, [r5, #0]
 8005a38:	f7fb fd76 	bl	8001528 <_close>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d102      	bne.n	8005a46 <_close_r+0x1a>
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	b103      	cbz	r3, 8005a46 <_close_r+0x1a>
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	2000049c 	.word	0x2000049c

08005a4c <_lseek_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4d07      	ldr	r5, [pc, #28]	@ (8005a6c <_lseek_r+0x20>)
 8005a50:	4604      	mov	r4, r0
 8005a52:	4608      	mov	r0, r1
 8005a54:	4611      	mov	r1, r2
 8005a56:	2200      	movs	r2, #0
 8005a58:	602a      	str	r2, [r5, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f7fb fd8b 	bl	8001576 <_lseek>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_lseek_r+0x1e>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_lseek_r+0x1e>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	2000049c 	.word	0x2000049c

08005a70 <_read_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d07      	ldr	r5, [pc, #28]	@ (8005a90 <_read_r+0x20>)
 8005a74:	4604      	mov	r4, r0
 8005a76:	4608      	mov	r0, r1
 8005a78:	4611      	mov	r1, r2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fb fd19 	bl	80014b6 <_read>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_read_r+0x1e>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_read_r+0x1e>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	2000049c 	.word	0x2000049c

08005a94 <_write_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d07      	ldr	r5, [pc, #28]	@ (8005ab4 <_write_r+0x20>)
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f7fb fd24 	bl	80014f0 <_write>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_write_r+0x1e>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_write_r+0x1e>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	2000049c 	.word	0x2000049c

08005ab8 <__errno>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	@ (8005ac0 <__errno+0x8>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	2000001c 	.word	0x2000001c

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f002 f866 	bl	8007ba8 <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08007f88 	.word	0x08007f88
 8005b00:	08007f88 	.word	0x08007f88
 8005b04:	08007f88 	.word	0x08007f88
 8005b08:	08007f8c 	.word	0x08007f8c

08005b0c <__retarget_lock_init_recursive>:
 8005b0c:	4770      	bx	lr

08005b0e <__retarget_lock_acquire_recursive>:
 8005b0e:	4770      	bx	lr

08005b10 <__retarget_lock_release_recursive>:
 8005b10:	4770      	bx	lr

08005b12 <quorem>:
 8005b12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	6903      	ldr	r3, [r0, #16]
 8005b18:	690c      	ldr	r4, [r1, #16]
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	db7e      	blt.n	8005c1e <quorem+0x10c>
 8005b20:	3c01      	subs	r4, #1
 8005b22:	f101 0814 	add.w	r8, r1, #20
 8005b26:	00a3      	lsls	r3, r4, #2
 8005b28:	f100 0514 	add.w	r5, r0, #20
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b44:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b48:	d32e      	bcc.n	8005ba8 <quorem+0x96>
 8005b4a:	f04f 0a00 	mov.w	sl, #0
 8005b4e:	46c4      	mov	ip, r8
 8005b50:	46ae      	mov	lr, r5
 8005b52:	46d3      	mov	fp, sl
 8005b54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b58:	b298      	uxth	r0, r3
 8005b5a:	fb06 a000 	mla	r0, r6, r0, sl
 8005b5e:	0c02      	lsrs	r2, r0, #16
 8005b60:	0c1b      	lsrs	r3, r3, #16
 8005b62:	fb06 2303 	mla	r3, r6, r3, r2
 8005b66:	f8de 2000 	ldr.w	r2, [lr]
 8005b6a:	b280      	uxth	r0, r0
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	1a12      	subs	r2, r2, r0
 8005b70:	445a      	add	r2, fp
 8005b72:	f8de 0000 	ldr.w	r0, [lr]
 8005b76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b84:	b292      	uxth	r2, r2
 8005b86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b8a:	45e1      	cmp	r9, ip
 8005b8c:	f84e 2b04 	str.w	r2, [lr], #4
 8005b90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b94:	d2de      	bcs.n	8005b54 <quorem+0x42>
 8005b96:	9b00      	ldr	r3, [sp, #0]
 8005b98:	58eb      	ldr	r3, [r5, r3]
 8005b9a:	b92b      	cbnz	r3, 8005ba8 <quorem+0x96>
 8005b9c:	9b01      	ldr	r3, [sp, #4]
 8005b9e:	3b04      	subs	r3, #4
 8005ba0:	429d      	cmp	r5, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	d32f      	bcc.n	8005c06 <quorem+0xf4>
 8005ba6:	613c      	str	r4, [r7, #16]
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f001 f97b 	bl	8006ea4 <__mcmp>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	db25      	blt.n	8005bfe <quorem+0xec>
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bba:	f8d1 c000 	ldr.w	ip, [r1]
 8005bbe:	fa1f fe82 	uxth.w	lr, r2
 8005bc2:	fa1f f38c 	uxth.w	r3, ip
 8005bc6:	eba3 030e 	sub.w	r3, r3, lr
 8005bca:	4403      	add	r3, r0
 8005bcc:	0c12      	lsrs	r2, r2, #16
 8005bce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bdc:	45c1      	cmp	r9, r8
 8005bde:	f841 3b04 	str.w	r3, [r1], #4
 8005be2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005be6:	d2e6      	bcs.n	8005bb6 <quorem+0xa4>
 8005be8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf0:	b922      	cbnz	r2, 8005bfc <quorem+0xea>
 8005bf2:	3b04      	subs	r3, #4
 8005bf4:	429d      	cmp	r5, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	d30b      	bcc.n	8005c12 <quorem+0x100>
 8005bfa:	613c      	str	r4, [r7, #16]
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	4630      	mov	r0, r6
 8005c00:	b003      	add	sp, #12
 8005c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	3b04      	subs	r3, #4
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	d1cb      	bne.n	8005ba6 <quorem+0x94>
 8005c0e:	3c01      	subs	r4, #1
 8005c10:	e7c6      	b.n	8005ba0 <quorem+0x8e>
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	d1ef      	bne.n	8005bfa <quorem+0xe8>
 8005c1a:	3c01      	subs	r4, #1
 8005c1c:	e7ea      	b.n	8005bf4 <quorem+0xe2>
 8005c1e:	2000      	movs	r0, #0
 8005c20:	e7ee      	b.n	8005c00 <quorem+0xee>
 8005c22:	0000      	movs	r0, r0
 8005c24:	0000      	movs	r0, r0
	...

08005c28 <_dtoa_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	69c7      	ldr	r7, [r0, #28]
 8005c2e:	b099      	sub	sp, #100	@ 0x64
 8005c30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c34:	ec55 4b10 	vmov	r4, r5, d0
 8005c38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c3c:	4683      	mov	fp, r0
 8005c3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c42:	b97f      	cbnz	r7, 8005c64 <_dtoa_r+0x3c>
 8005c44:	2010      	movs	r0, #16
 8005c46:	f000 fdfd 	bl	8006844 <malloc>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c50:	b920      	cbnz	r0, 8005c5c <_dtoa_r+0x34>
 8005c52:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef0 <_dtoa_r+0x2c8>)
 8005c54:	21ef      	movs	r1, #239	@ 0xef
 8005c56:	48a7      	ldr	r0, [pc, #668]	@ (8005ef4 <_dtoa_r+0x2cc>)
 8005c58:	f001 fc68 	bl	800752c <__assert_func>
 8005c5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c60:	6007      	str	r7, [r0, #0]
 8005c62:	60c7      	str	r7, [r0, #12]
 8005c64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	b159      	cbz	r1, 8005c84 <_dtoa_r+0x5c>
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	604a      	str	r2, [r1, #4]
 8005c70:	2301      	movs	r3, #1
 8005c72:	4093      	lsls	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
 8005c76:	4658      	mov	r0, fp
 8005c78:	f000 feda 	bl	8006a30 <_Bfree>
 8005c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	1e2b      	subs	r3, r5, #0
 8005c86:	bfb9      	ittee	lt
 8005c88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c8c:	9303      	strlt	r3, [sp, #12]
 8005c8e:	2300      	movge	r3, #0
 8005c90:	6033      	strge	r3, [r6, #0]
 8005c92:	9f03      	ldr	r7, [sp, #12]
 8005c94:	4b98      	ldr	r3, [pc, #608]	@ (8005ef8 <_dtoa_r+0x2d0>)
 8005c96:	bfbc      	itt	lt
 8005c98:	2201      	movlt	r2, #1
 8005c9a:	6032      	strlt	r2, [r6, #0]
 8005c9c:	43bb      	bics	r3, r7
 8005c9e:	d112      	bne.n	8005cc6 <_dtoa_r+0x9e>
 8005ca0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ca2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cac:	4323      	orrs	r3, r4
 8005cae:	f000 854d 	beq.w	800674c <_dtoa_r+0xb24>
 8005cb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f0c <_dtoa_r+0x2e4>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 854f 	beq.w	800675c <_dtoa_r+0xb34>
 8005cbe:	f10a 0303 	add.w	r3, sl, #3
 8005cc2:	f000 bd49 	b.w	8006758 <_dtoa_r+0xb30>
 8005cc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	ec51 0b17 	vmov	r0, r1, d7
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cd6:	f7fa feff 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cda:	4680      	mov	r8, r0
 8005cdc:	b158      	cbz	r0, 8005cf6 <_dtoa_r+0xce>
 8005cde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ce6:	b113      	cbz	r3, 8005cee <_dtoa_r+0xc6>
 8005ce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cea:	4b84      	ldr	r3, [pc, #528]	@ (8005efc <_dtoa_r+0x2d4>)
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f10 <_dtoa_r+0x2e8>
 8005cf2:	f000 bd33 	b.w	800675c <_dtoa_r+0xb34>
 8005cf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005cfa:	aa16      	add	r2, sp, #88	@ 0x58
 8005cfc:	a917      	add	r1, sp, #92	@ 0x5c
 8005cfe:	4658      	mov	r0, fp
 8005d00:	f001 f980 	bl	8007004 <__d2b>
 8005d04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d08:	4681      	mov	r9, r0
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	d077      	beq.n	8005dfe <_dtoa_r+0x1d6>
 8005d0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d28:	4619      	mov	r1, r3
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	4b74      	ldr	r3, [pc, #464]	@ (8005f00 <_dtoa_r+0x2d8>)
 8005d2e:	f7fa fab3 	bl	8000298 <__aeabi_dsub>
 8005d32:	a369      	add	r3, pc, #420	@ (adr r3, 8005ed8 <_dtoa_r+0x2b0>)
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f7fa fc66 	bl	8000608 <__aeabi_dmul>
 8005d3c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee0 <_dtoa_r+0x2b8>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa faab 	bl	800029c <__adddf3>
 8005d46:	4604      	mov	r4, r0
 8005d48:	4630      	mov	r0, r6
 8005d4a:	460d      	mov	r5, r1
 8005d4c:	f7fa fbf2 	bl	8000534 <__aeabi_i2d>
 8005d50:	a365      	add	r3, pc, #404	@ (adr r3, 8005ee8 <_dtoa_r+0x2c0>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f7fa fc57 	bl	8000608 <__aeabi_dmul>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4620      	mov	r0, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	f7fa fa9b 	bl	800029c <__adddf3>
 8005d66:	4604      	mov	r4, r0
 8005d68:	460d      	mov	r5, r1
 8005d6a:	f7fa fefd 	bl	8000b68 <__aeabi_d2iz>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	4607      	mov	r7, r0
 8005d72:	2300      	movs	r3, #0
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa feb8 	bl	8000aec <__aeabi_dcmplt>
 8005d7c:	b140      	cbz	r0, 8005d90 <_dtoa_r+0x168>
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f7fa fbd8 	bl	8000534 <__aeabi_i2d>
 8005d84:	4622      	mov	r2, r4
 8005d86:	462b      	mov	r3, r5
 8005d88:	f7fa fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8c:	b900      	cbnz	r0, 8005d90 <_dtoa_r+0x168>
 8005d8e:	3f01      	subs	r7, #1
 8005d90:	2f16      	cmp	r7, #22
 8005d92:	d851      	bhi.n	8005e38 <_dtoa_r+0x210>
 8005d94:	4b5b      	ldr	r3, [pc, #364]	@ (8005f04 <_dtoa_r+0x2dc>)
 8005d96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005da2:	f7fa fea3 	bl	8000aec <__aeabi_dcmplt>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d048      	beq.n	8005e3c <_dtoa_r+0x214>
 8005daa:	3f01      	subs	r7, #1
 8005dac:	2300      	movs	r3, #0
 8005dae:	9312      	str	r3, [sp, #72]	@ 0x48
 8005db0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005db2:	1b9b      	subs	r3, r3, r6
 8005db4:	1e5a      	subs	r2, r3, #1
 8005db6:	bf44      	itt	mi
 8005db8:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dbc:	2300      	movmi	r3, #0
 8005dbe:	9208      	str	r2, [sp, #32]
 8005dc0:	bf54      	ite	pl
 8005dc2:	f04f 0800 	movpl.w	r8, #0
 8005dc6:	9308      	strmi	r3, [sp, #32]
 8005dc8:	2f00      	cmp	r7, #0
 8005dca:	db39      	blt.n	8005e40 <_dtoa_r+0x218>
 8005dcc:	9b08      	ldr	r3, [sp, #32]
 8005dce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005dd0:	443b      	add	r3, r7
 8005dd2:	9308      	str	r3, [sp, #32]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d864      	bhi.n	8005ea8 <_dtoa_r+0x280>
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	bfc4      	itt	gt
 8005de2:	3b04      	subgt	r3, #4
 8005de4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de8:	f1a3 0302 	sub.w	r3, r3, #2
 8005dec:	bfcc      	ite	gt
 8005dee:	2400      	movgt	r4, #0
 8005df0:	2401      	movle	r4, #1
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d863      	bhi.n	8005ebe <_dtoa_r+0x296>
 8005df6:	e8df f003 	tbb	[pc, r3]
 8005dfa:	372a      	.short	0x372a
 8005dfc:	5535      	.short	0x5535
 8005dfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e02:	441e      	add	r6, r3
 8005e04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	bfc1      	itttt	gt
 8005e0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e10:	409f      	lslgt	r7, r3
 8005e12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e1a:	bfd6      	itet	le
 8005e1c:	f1c3 0320 	rsble	r3, r3, #32
 8005e20:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e24:	fa04 f003 	lslle.w	r0, r4, r3
 8005e28:	f7fa fb74 	bl	8000514 <__aeabi_ui2d>
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e32:	3e01      	subs	r6, #1
 8005e34:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e36:	e777      	b.n	8005d28 <_dtoa_r+0x100>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e7b8      	b.n	8005dae <_dtoa_r+0x186>
 8005e3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e3e:	e7b7      	b.n	8005db0 <_dtoa_r+0x188>
 8005e40:	427b      	negs	r3, r7
 8005e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e44:	2300      	movs	r3, #0
 8005e46:	eba8 0807 	sub.w	r8, r8, r7
 8005e4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e4c:	e7c4      	b.n	8005dd8 <_dtoa_r+0x1b0>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dc35      	bgt.n	8005ec4 <_dtoa_r+0x29c>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	9307      	str	r3, [sp, #28]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e62:	e00b      	b.n	8005e7c <_dtoa_r+0x254>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e7f3      	b.n	8005e50 <_dtoa_r+0x228>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	bfb8      	it	lt
 8005e7a:	2301      	movlt	r3, #1
 8005e7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e80:	2100      	movs	r1, #0
 8005e82:	2204      	movs	r2, #4
 8005e84:	f102 0514 	add.w	r5, r2, #20
 8005e88:	429d      	cmp	r5, r3
 8005e8a:	d91f      	bls.n	8005ecc <_dtoa_r+0x2a4>
 8005e8c:	6041      	str	r1, [r0, #4]
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f000 fd8e 	bl	80069b0 <_Balloc>
 8005e94:	4682      	mov	sl, r0
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d13c      	bne.n	8005f14 <_dtoa_r+0x2ec>
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f08 <_dtoa_r+0x2e0>)
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ea2:	e6d8      	b.n	8005c56 <_dtoa_r+0x2e>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e7e0      	b.n	8005e6a <_dtoa_r+0x242>
 8005ea8:	2401      	movs	r4, #1
 8005eaa:	2300      	movs	r3, #0
 8005eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	9307      	str	r3, [sp, #28]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2312      	movs	r3, #18
 8005ebc:	e7d0      	b.n	8005e60 <_dtoa_r+0x238>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ec2:	e7f5      	b.n	8005eb0 <_dtoa_r+0x288>
 8005ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	9307      	str	r3, [sp, #28]
 8005eca:	e7d7      	b.n	8005e7c <_dtoa_r+0x254>
 8005ecc:	3101      	adds	r1, #1
 8005ece:	0052      	lsls	r2, r2, #1
 8005ed0:	e7d8      	b.n	8005e84 <_dtoa_r+0x25c>
 8005ed2:	bf00      	nop
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	636f4361 	.word	0x636f4361
 8005edc:	3fd287a7 	.word	0x3fd287a7
 8005ee0:	8b60c8b3 	.word	0x8b60c8b3
 8005ee4:	3fc68a28 	.word	0x3fc68a28
 8005ee8:	509f79fb 	.word	0x509f79fb
 8005eec:	3fd34413 	.word	0x3fd34413
 8005ef0:	08007c4d 	.word	0x08007c4d
 8005ef4:	08007c64 	.word	0x08007c64
 8005ef8:	7ff00000 	.word	0x7ff00000
 8005efc:	08007c1d 	.word	0x08007c1d
 8005f00:	3ff80000 	.word	0x3ff80000
 8005f04:	08007d60 	.word	0x08007d60
 8005f08:	08007cbc 	.word	0x08007cbc
 8005f0c:	08007c49 	.word	0x08007c49
 8005f10:	08007c1c 	.word	0x08007c1c
 8005f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f18:	6018      	str	r0, [r3, #0]
 8005f1a:	9b07      	ldr	r3, [sp, #28]
 8005f1c:	2b0e      	cmp	r3, #14
 8005f1e:	f200 80a4 	bhi.w	800606a <_dtoa_r+0x442>
 8005f22:	2c00      	cmp	r4, #0
 8005f24:	f000 80a1 	beq.w	800606a <_dtoa_r+0x442>
 8005f28:	2f00      	cmp	r7, #0
 8005f2a:	dd33      	ble.n	8005f94 <_dtoa_r+0x36c>
 8005f2c:	4bad      	ldr	r3, [pc, #692]	@ (80061e4 <_dtoa_r+0x5bc>)
 8005f2e:	f007 020f 	and.w	r2, r7, #15
 8005f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f36:	ed93 7b00 	vldr	d7, [r3]
 8005f3a:	05f8      	lsls	r0, r7, #23
 8005f3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f44:	d516      	bpl.n	8005f74 <_dtoa_r+0x34c>
 8005f46:	4ba8      	ldr	r3, [pc, #672]	@ (80061e8 <_dtoa_r+0x5c0>)
 8005f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f50:	f7fa fc84 	bl	800085c <__aeabi_ddiv>
 8005f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f58:	f004 040f 	and.w	r4, r4, #15
 8005f5c:	2603      	movs	r6, #3
 8005f5e:	4da2      	ldr	r5, [pc, #648]	@ (80061e8 <_dtoa_r+0x5c0>)
 8005f60:	b954      	cbnz	r4, 8005f78 <_dtoa_r+0x350>
 8005f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f6a:	f7fa fc77 	bl	800085c <__aeabi_ddiv>
 8005f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f72:	e028      	b.n	8005fc6 <_dtoa_r+0x39e>
 8005f74:	2602      	movs	r6, #2
 8005f76:	e7f2      	b.n	8005f5e <_dtoa_r+0x336>
 8005f78:	07e1      	lsls	r1, r4, #31
 8005f7a:	d508      	bpl.n	8005f8e <_dtoa_r+0x366>
 8005f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f84:	f7fa fb40 	bl	8000608 <__aeabi_dmul>
 8005f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	1064      	asrs	r4, r4, #1
 8005f90:	3508      	adds	r5, #8
 8005f92:	e7e5      	b.n	8005f60 <_dtoa_r+0x338>
 8005f94:	f000 80d2 	beq.w	800613c <_dtoa_r+0x514>
 8005f98:	427c      	negs	r4, r7
 8005f9a:	4b92      	ldr	r3, [pc, #584]	@ (80061e4 <_dtoa_r+0x5bc>)
 8005f9c:	4d92      	ldr	r5, [pc, #584]	@ (80061e8 <_dtoa_r+0x5c0>)
 8005f9e:	f004 020f 	and.w	r2, r4, #15
 8005fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fae:	f7fa fb2b 	bl	8000608 <__aeabi_dmul>
 8005fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb6:	1124      	asrs	r4, r4, #4
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2602      	movs	r6, #2
 8005fbc:	2c00      	cmp	r4, #0
 8005fbe:	f040 80b2 	bne.w	8006126 <_dtoa_r+0x4fe>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1d3      	bne.n	8005f6e <_dtoa_r+0x346>
 8005fc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80b7 	beq.w	8006140 <_dtoa_r+0x518>
 8005fd2:	4b86      	ldr	r3, [pc, #536]	@ (80061ec <_dtoa_r+0x5c4>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa fd87 	bl	8000aec <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f000 80ae 	beq.w	8006140 <_dtoa_r+0x518>
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 80aa 	beq.w	8006140 <_dtoa_r+0x518>
 8005fec:	9b00      	ldr	r3, [sp, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dd37      	ble.n	8006062 <_dtoa_r+0x43a>
 8005ff2:	1e7b      	subs	r3, r7, #1
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4b7d      	ldr	r3, [pc, #500]	@ (80061f0 <_dtoa_r+0x5c8>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7fa fb03 	bl	8000608 <__aeabi_dmul>
 8006002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006006:	9c00      	ldr	r4, [sp, #0]
 8006008:	3601      	adds	r6, #1
 800600a:	4630      	mov	r0, r6
 800600c:	f7fa fa92 	bl	8000534 <__aeabi_i2d>
 8006010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006014:	f7fa faf8 	bl	8000608 <__aeabi_dmul>
 8006018:	4b76      	ldr	r3, [pc, #472]	@ (80061f4 <_dtoa_r+0x5cc>)
 800601a:	2200      	movs	r2, #0
 800601c:	f7fa f93e 	bl	800029c <__adddf3>
 8006020:	4605      	mov	r5, r0
 8006022:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006026:	2c00      	cmp	r4, #0
 8006028:	f040 808d 	bne.w	8006146 <_dtoa_r+0x51e>
 800602c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006030:	4b71      	ldr	r3, [pc, #452]	@ (80061f8 <_dtoa_r+0x5d0>)
 8006032:	2200      	movs	r2, #0
 8006034:	f7fa f930 	bl	8000298 <__aeabi_dsub>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006040:	462a      	mov	r2, r5
 8006042:	4633      	mov	r3, r6
 8006044:	f7fa fd70 	bl	8000b28 <__aeabi_dcmpgt>
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 828b 	bne.w	8006564 <_dtoa_r+0x93c>
 800604e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006052:	462a      	mov	r2, r5
 8006054:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006058:	f7fa fd48 	bl	8000aec <__aeabi_dcmplt>
 800605c:	2800      	cmp	r0, #0
 800605e:	f040 8128 	bne.w	80062b2 <_dtoa_r+0x68a>
 8006062:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006066:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800606a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800606c:	2b00      	cmp	r3, #0
 800606e:	f2c0 815a 	blt.w	8006326 <_dtoa_r+0x6fe>
 8006072:	2f0e      	cmp	r7, #14
 8006074:	f300 8157 	bgt.w	8006326 <_dtoa_r+0x6fe>
 8006078:	4b5a      	ldr	r3, [pc, #360]	@ (80061e4 <_dtoa_r+0x5bc>)
 800607a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800607e:	ed93 7b00 	vldr	d7, [r3]
 8006082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	ed8d 7b00 	vstr	d7, [sp]
 800608a:	da03      	bge.n	8006094 <_dtoa_r+0x46c>
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f340 8101 	ble.w	8006296 <_dtoa_r+0x66e>
 8006094:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006098:	4656      	mov	r6, sl
 800609a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fbdb 	bl	800085c <__aeabi_ddiv>
 80060a6:	f7fa fd5f 	bl	8000b68 <__aeabi_d2iz>
 80060aa:	4680      	mov	r8, r0
 80060ac:	f7fa fa42 	bl	8000534 <__aeabi_i2d>
 80060b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060b4:	f7fa faa8 	bl	8000608 <__aeabi_dmul>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4620      	mov	r0, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060c4:	f7fa f8e8 	bl	8000298 <__aeabi_dsub>
 80060c8:	f806 4b01 	strb.w	r4, [r6], #1
 80060cc:	9d07      	ldr	r5, [sp, #28]
 80060ce:	eba6 040a 	sub.w	r4, r6, sl
 80060d2:	42a5      	cmp	r5, r4
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	f040 8117 	bne.w	800630a <_dtoa_r+0x6e2>
 80060dc:	f7fa f8de 	bl	800029c <__adddf3>
 80060e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060e4:	4604      	mov	r4, r0
 80060e6:	460d      	mov	r5, r1
 80060e8:	f7fa fd1e 	bl	8000b28 <__aeabi_dcmpgt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 80f9 	bne.w	80062e4 <_dtoa_r+0x6bc>
 80060f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7fa fced 	bl	8000ad8 <__aeabi_dcmpeq>
 80060fe:	b118      	cbz	r0, 8006108 <_dtoa_r+0x4e0>
 8006100:	f018 0f01 	tst.w	r8, #1
 8006104:	f040 80ee 	bne.w	80062e4 <_dtoa_r+0x6bc>
 8006108:	4649      	mov	r1, r9
 800610a:	4658      	mov	r0, fp
 800610c:	f000 fc90 	bl	8006a30 <_Bfree>
 8006110:	2300      	movs	r3, #0
 8006112:	7033      	strb	r3, [r6, #0]
 8006114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006116:	3701      	adds	r7, #1
 8006118:	601f      	str	r7, [r3, #0]
 800611a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 831d 	beq.w	800675c <_dtoa_r+0xb34>
 8006122:	601e      	str	r6, [r3, #0]
 8006124:	e31a      	b.n	800675c <_dtoa_r+0xb34>
 8006126:	07e2      	lsls	r2, r4, #31
 8006128:	d505      	bpl.n	8006136 <_dtoa_r+0x50e>
 800612a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800612e:	f7fa fa6b 	bl	8000608 <__aeabi_dmul>
 8006132:	3601      	adds	r6, #1
 8006134:	2301      	movs	r3, #1
 8006136:	1064      	asrs	r4, r4, #1
 8006138:	3508      	adds	r5, #8
 800613a:	e73f      	b.n	8005fbc <_dtoa_r+0x394>
 800613c:	2602      	movs	r6, #2
 800613e:	e742      	b.n	8005fc6 <_dtoa_r+0x39e>
 8006140:	9c07      	ldr	r4, [sp, #28]
 8006142:	9704      	str	r7, [sp, #16]
 8006144:	e761      	b.n	800600a <_dtoa_r+0x3e2>
 8006146:	4b27      	ldr	r3, [pc, #156]	@ (80061e4 <_dtoa_r+0x5bc>)
 8006148:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800614a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800614e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006152:	4454      	add	r4, sl
 8006154:	2900      	cmp	r1, #0
 8006156:	d053      	beq.n	8006200 <_dtoa_r+0x5d8>
 8006158:	4928      	ldr	r1, [pc, #160]	@ (80061fc <_dtoa_r+0x5d4>)
 800615a:	2000      	movs	r0, #0
 800615c:	f7fa fb7e 	bl	800085c <__aeabi_ddiv>
 8006160:	4633      	mov	r3, r6
 8006162:	462a      	mov	r2, r5
 8006164:	f7fa f898 	bl	8000298 <__aeabi_dsub>
 8006168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800616c:	4656      	mov	r6, sl
 800616e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006172:	f7fa fcf9 	bl	8000b68 <__aeabi_d2iz>
 8006176:	4605      	mov	r5, r0
 8006178:	f7fa f9dc 	bl	8000534 <__aeabi_i2d>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006184:	f7fa f888 	bl	8000298 <__aeabi_dsub>
 8006188:	3530      	adds	r5, #48	@ 0x30
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006192:	f806 5b01 	strb.w	r5, [r6], #1
 8006196:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800619a:	f7fa fca7 	bl	8000aec <__aeabi_dcmplt>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d171      	bne.n	8006286 <_dtoa_r+0x65e>
 80061a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061a6:	4911      	ldr	r1, [pc, #68]	@ (80061ec <_dtoa_r+0x5c4>)
 80061a8:	2000      	movs	r0, #0
 80061aa:	f7fa f875 	bl	8000298 <__aeabi_dsub>
 80061ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061b2:	f7fa fc9b 	bl	8000aec <__aeabi_dcmplt>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f040 8095 	bne.w	80062e6 <_dtoa_r+0x6be>
 80061bc:	42a6      	cmp	r6, r4
 80061be:	f43f af50 	beq.w	8006062 <_dtoa_r+0x43a>
 80061c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061c6:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <_dtoa_r+0x5c8>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	f7fa fa1d 	bl	8000608 <__aeabi_dmul>
 80061ce:	4b08      	ldr	r3, [pc, #32]	@ (80061f0 <_dtoa_r+0x5c8>)
 80061d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061d4:	2200      	movs	r2, #0
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	f7fa fa15 	bl	8000608 <__aeabi_dmul>
 80061de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e2:	e7c4      	b.n	800616e <_dtoa_r+0x546>
 80061e4:	08007d60 	.word	0x08007d60
 80061e8:	08007d38 	.word	0x08007d38
 80061ec:	3ff00000 	.word	0x3ff00000
 80061f0:	40240000 	.word	0x40240000
 80061f4:	401c0000 	.word	0x401c0000
 80061f8:	40140000 	.word	0x40140000
 80061fc:	3fe00000 	.word	0x3fe00000
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	f7fa fa00 	bl	8000608 <__aeabi_dmul>
 8006208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800620c:	9415      	str	r4, [sp, #84]	@ 0x54
 800620e:	4656      	mov	r6, sl
 8006210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006214:	f7fa fca8 	bl	8000b68 <__aeabi_d2iz>
 8006218:	4605      	mov	r5, r0
 800621a:	f7fa f98b 	bl	8000534 <__aeabi_i2d>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006226:	f7fa f837 	bl	8000298 <__aeabi_dsub>
 800622a:	3530      	adds	r5, #48	@ 0x30
 800622c:	f806 5b01 	strb.w	r5, [r6], #1
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	42a6      	cmp	r6, r4
 8006236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	d124      	bne.n	800628a <_dtoa_r+0x662>
 8006240:	4bac      	ldr	r3, [pc, #688]	@ (80064f4 <_dtoa_r+0x8cc>)
 8006242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006246:	f7fa f829 	bl	800029c <__adddf3>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006252:	f7fa fc69 	bl	8000b28 <__aeabi_dcmpgt>
 8006256:	2800      	cmp	r0, #0
 8006258:	d145      	bne.n	80062e6 <_dtoa_r+0x6be>
 800625a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800625e:	49a5      	ldr	r1, [pc, #660]	@ (80064f4 <_dtoa_r+0x8cc>)
 8006260:	2000      	movs	r0, #0
 8006262:	f7fa f819 	bl	8000298 <__aeabi_dsub>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626e:	f7fa fc3d 	bl	8000aec <__aeabi_dcmplt>
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f aef5 	beq.w	8006062 <_dtoa_r+0x43a>
 8006278:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800627a:	1e73      	subs	r3, r6, #1
 800627c:	9315      	str	r3, [sp, #84]	@ 0x54
 800627e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006282:	2b30      	cmp	r3, #48	@ 0x30
 8006284:	d0f8      	beq.n	8006278 <_dtoa_r+0x650>
 8006286:	9f04      	ldr	r7, [sp, #16]
 8006288:	e73e      	b.n	8006108 <_dtoa_r+0x4e0>
 800628a:	4b9b      	ldr	r3, [pc, #620]	@ (80064f8 <_dtoa_r+0x8d0>)
 800628c:	f7fa f9bc 	bl	8000608 <__aeabi_dmul>
 8006290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006294:	e7bc      	b.n	8006210 <_dtoa_r+0x5e8>
 8006296:	d10c      	bne.n	80062b2 <_dtoa_r+0x68a>
 8006298:	4b98      	ldr	r3, [pc, #608]	@ (80064fc <_dtoa_r+0x8d4>)
 800629a:	2200      	movs	r2, #0
 800629c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062a0:	f7fa f9b2 	bl	8000608 <__aeabi_dmul>
 80062a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a8:	f7fa fc34 	bl	8000b14 <__aeabi_dcmpge>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f000 8157 	beq.w	8006560 <_dtoa_r+0x938>
 80062b2:	2400      	movs	r4, #0
 80062b4:	4625      	mov	r5, r4
 80062b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062b8:	43db      	mvns	r3, r3
 80062ba:	9304      	str	r3, [sp, #16]
 80062bc:	4656      	mov	r6, sl
 80062be:	2700      	movs	r7, #0
 80062c0:	4621      	mov	r1, r4
 80062c2:	4658      	mov	r0, fp
 80062c4:	f000 fbb4 	bl	8006a30 <_Bfree>
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	d0dc      	beq.n	8006286 <_dtoa_r+0x65e>
 80062cc:	b12f      	cbz	r7, 80062da <_dtoa_r+0x6b2>
 80062ce:	42af      	cmp	r7, r5
 80062d0:	d003      	beq.n	80062da <_dtoa_r+0x6b2>
 80062d2:	4639      	mov	r1, r7
 80062d4:	4658      	mov	r0, fp
 80062d6:	f000 fbab 	bl	8006a30 <_Bfree>
 80062da:	4629      	mov	r1, r5
 80062dc:	4658      	mov	r0, fp
 80062de:	f000 fba7 	bl	8006a30 <_Bfree>
 80062e2:	e7d0      	b.n	8006286 <_dtoa_r+0x65e>
 80062e4:	9704      	str	r7, [sp, #16]
 80062e6:	4633      	mov	r3, r6
 80062e8:	461e      	mov	r6, r3
 80062ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ee:	2a39      	cmp	r2, #57	@ 0x39
 80062f0:	d107      	bne.n	8006302 <_dtoa_r+0x6da>
 80062f2:	459a      	cmp	sl, r3
 80062f4:	d1f8      	bne.n	80062e8 <_dtoa_r+0x6c0>
 80062f6:	9a04      	ldr	r2, [sp, #16]
 80062f8:	3201      	adds	r2, #1
 80062fa:	9204      	str	r2, [sp, #16]
 80062fc:	2230      	movs	r2, #48	@ 0x30
 80062fe:	f88a 2000 	strb.w	r2, [sl]
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	3201      	adds	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e7bd      	b.n	8006286 <_dtoa_r+0x65e>
 800630a:	4b7b      	ldr	r3, [pc, #492]	@ (80064f8 <_dtoa_r+0x8d0>)
 800630c:	2200      	movs	r2, #0
 800630e:	f7fa f97b 	bl	8000608 <__aeabi_dmul>
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	460d      	mov	r5, r1
 800631a:	f7fa fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f aebb 	beq.w	800609a <_dtoa_r+0x472>
 8006324:	e6f0      	b.n	8006108 <_dtoa_r+0x4e0>
 8006326:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006328:	2a00      	cmp	r2, #0
 800632a:	f000 80db 	beq.w	80064e4 <_dtoa_r+0x8bc>
 800632e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006330:	2a01      	cmp	r2, #1
 8006332:	f300 80bf 	bgt.w	80064b4 <_dtoa_r+0x88c>
 8006336:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006338:	2a00      	cmp	r2, #0
 800633a:	f000 80b7 	beq.w	80064ac <_dtoa_r+0x884>
 800633e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006342:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006344:	4646      	mov	r6, r8
 8006346:	9a08      	ldr	r2, [sp, #32]
 8006348:	2101      	movs	r1, #1
 800634a:	441a      	add	r2, r3
 800634c:	4658      	mov	r0, fp
 800634e:	4498      	add	r8, r3
 8006350:	9208      	str	r2, [sp, #32]
 8006352:	f000 fc21 	bl	8006b98 <__i2b>
 8006356:	4605      	mov	r5, r0
 8006358:	b15e      	cbz	r6, 8006372 <_dtoa_r+0x74a>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	dd08      	ble.n	8006372 <_dtoa_r+0x74a>
 8006360:	42b3      	cmp	r3, r6
 8006362:	9a08      	ldr	r2, [sp, #32]
 8006364:	bfa8      	it	ge
 8006366:	4633      	movge	r3, r6
 8006368:	eba8 0803 	sub.w	r8, r8, r3
 800636c:	1af6      	subs	r6, r6, r3
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	9308      	str	r3, [sp, #32]
 8006372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006374:	b1f3      	cbz	r3, 80063b4 <_dtoa_r+0x78c>
 8006376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80b7 	beq.w	80064ec <_dtoa_r+0x8c4>
 800637e:	b18c      	cbz	r4, 80063a4 <_dtoa_r+0x77c>
 8006380:	4629      	mov	r1, r5
 8006382:	4622      	mov	r2, r4
 8006384:	4658      	mov	r0, fp
 8006386:	f000 fcc7 	bl	8006d18 <__pow5mult>
 800638a:	464a      	mov	r2, r9
 800638c:	4601      	mov	r1, r0
 800638e:	4605      	mov	r5, r0
 8006390:	4658      	mov	r0, fp
 8006392:	f000 fc17 	bl	8006bc4 <__multiply>
 8006396:	4649      	mov	r1, r9
 8006398:	9004      	str	r0, [sp, #16]
 800639a:	4658      	mov	r0, fp
 800639c:	f000 fb48 	bl	8006a30 <_Bfree>
 80063a0:	9b04      	ldr	r3, [sp, #16]
 80063a2:	4699      	mov	r9, r3
 80063a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a6:	1b1a      	subs	r2, r3, r4
 80063a8:	d004      	beq.n	80063b4 <_dtoa_r+0x78c>
 80063aa:	4649      	mov	r1, r9
 80063ac:	4658      	mov	r0, fp
 80063ae:	f000 fcb3 	bl	8006d18 <__pow5mult>
 80063b2:	4681      	mov	r9, r0
 80063b4:	2101      	movs	r1, #1
 80063b6:	4658      	mov	r0, fp
 80063b8:	f000 fbee 	bl	8006b98 <__i2b>
 80063bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063be:	4604      	mov	r4, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 81cf 	beq.w	8006764 <_dtoa_r+0xb3c>
 80063c6:	461a      	mov	r2, r3
 80063c8:	4601      	mov	r1, r0
 80063ca:	4658      	mov	r0, fp
 80063cc:	f000 fca4 	bl	8006d18 <__pow5mult>
 80063d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	4604      	mov	r4, r0
 80063d6:	f300 8095 	bgt.w	8006504 <_dtoa_r+0x8dc>
 80063da:	9b02      	ldr	r3, [sp, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 8087 	bne.w	80064f0 <_dtoa_r+0x8c8>
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 8089 	bne.w	8006500 <_dtoa_r+0x8d8>
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063f4:	0d1b      	lsrs	r3, r3, #20
 80063f6:	051b      	lsls	r3, r3, #20
 80063f8:	b12b      	cbz	r3, 8006406 <_dtoa_r+0x7de>
 80063fa:	9b08      	ldr	r3, [sp, #32]
 80063fc:	3301      	adds	r3, #1
 80063fe:	9308      	str	r3, [sp, #32]
 8006400:	f108 0801 	add.w	r8, r8, #1
 8006404:	2301      	movs	r3, #1
 8006406:	930a      	str	r3, [sp, #40]	@ 0x28
 8006408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 81b0 	beq.w	8006770 <_dtoa_r+0xb48>
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006416:	6918      	ldr	r0, [r3, #16]
 8006418:	f000 fb72 	bl	8006b00 <__hi0bits>
 800641c:	f1c0 0020 	rsb	r0, r0, #32
 8006420:	9b08      	ldr	r3, [sp, #32]
 8006422:	4418      	add	r0, r3
 8006424:	f010 001f 	ands.w	r0, r0, #31
 8006428:	d077      	beq.n	800651a <_dtoa_r+0x8f2>
 800642a:	f1c0 0320 	rsb	r3, r0, #32
 800642e:	2b04      	cmp	r3, #4
 8006430:	dd6b      	ble.n	800650a <_dtoa_r+0x8e2>
 8006432:	9b08      	ldr	r3, [sp, #32]
 8006434:	f1c0 001c 	rsb	r0, r0, #28
 8006438:	4403      	add	r3, r0
 800643a:	4480      	add	r8, r0
 800643c:	4406      	add	r6, r0
 800643e:	9308      	str	r3, [sp, #32]
 8006440:	f1b8 0f00 	cmp.w	r8, #0
 8006444:	dd05      	ble.n	8006452 <_dtoa_r+0x82a>
 8006446:	4649      	mov	r1, r9
 8006448:	4642      	mov	r2, r8
 800644a:	4658      	mov	r0, fp
 800644c:	f000 fcbe 	bl	8006dcc <__lshift>
 8006450:	4681      	mov	r9, r0
 8006452:	9b08      	ldr	r3, [sp, #32]
 8006454:	2b00      	cmp	r3, #0
 8006456:	dd05      	ble.n	8006464 <_dtoa_r+0x83c>
 8006458:	4621      	mov	r1, r4
 800645a:	461a      	mov	r2, r3
 800645c:	4658      	mov	r0, fp
 800645e:	f000 fcb5 	bl	8006dcc <__lshift>
 8006462:	4604      	mov	r4, r0
 8006464:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006466:	2b00      	cmp	r3, #0
 8006468:	d059      	beq.n	800651e <_dtoa_r+0x8f6>
 800646a:	4621      	mov	r1, r4
 800646c:	4648      	mov	r0, r9
 800646e:	f000 fd19 	bl	8006ea4 <__mcmp>
 8006472:	2800      	cmp	r0, #0
 8006474:	da53      	bge.n	800651e <_dtoa_r+0x8f6>
 8006476:	1e7b      	subs	r3, r7, #1
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	4649      	mov	r1, r9
 800647c:	2300      	movs	r3, #0
 800647e:	220a      	movs	r2, #10
 8006480:	4658      	mov	r0, fp
 8006482:	f000 faf7 	bl	8006a74 <__multadd>
 8006486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006488:	4681      	mov	r9, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8172 	beq.w	8006774 <_dtoa_r+0xb4c>
 8006490:	2300      	movs	r3, #0
 8006492:	4629      	mov	r1, r5
 8006494:	220a      	movs	r2, #10
 8006496:	4658      	mov	r0, fp
 8006498:	f000 faec 	bl	8006a74 <__multadd>
 800649c:	9b00      	ldr	r3, [sp, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	4605      	mov	r5, r0
 80064a2:	dc67      	bgt.n	8006574 <_dtoa_r+0x94c>
 80064a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	dc41      	bgt.n	800652e <_dtoa_r+0x906>
 80064aa:	e063      	b.n	8006574 <_dtoa_r+0x94c>
 80064ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064b2:	e746      	b.n	8006342 <_dtoa_r+0x71a>
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	1e5c      	subs	r4, r3, #1
 80064b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	bfbf      	itttt	lt
 80064be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064c4:	1ae3      	sublt	r3, r4, r3
 80064c6:	bfb4      	ite	lt
 80064c8:	18d2      	addlt	r2, r2, r3
 80064ca:	1b1c      	subge	r4, r3, r4
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	bfbc      	itt	lt
 80064d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064d2:	2400      	movlt	r4, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bfb5      	itete	lt
 80064d8:	eba8 0603 	sublt.w	r6, r8, r3
 80064dc:	9b07      	ldrge	r3, [sp, #28]
 80064de:	2300      	movlt	r3, #0
 80064e0:	4646      	movge	r6, r8
 80064e2:	e730      	b.n	8006346 <_dtoa_r+0x71e>
 80064e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064e8:	4646      	mov	r6, r8
 80064ea:	e735      	b.n	8006358 <_dtoa_r+0x730>
 80064ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064ee:	e75c      	b.n	80063aa <_dtoa_r+0x782>
 80064f0:	2300      	movs	r3, #0
 80064f2:	e788      	b.n	8006406 <_dtoa_r+0x7de>
 80064f4:	3fe00000 	.word	0x3fe00000
 80064f8:	40240000 	.word	0x40240000
 80064fc:	40140000 	.word	0x40140000
 8006500:	9b02      	ldr	r3, [sp, #8]
 8006502:	e780      	b.n	8006406 <_dtoa_r+0x7de>
 8006504:	2300      	movs	r3, #0
 8006506:	930a      	str	r3, [sp, #40]	@ 0x28
 8006508:	e782      	b.n	8006410 <_dtoa_r+0x7e8>
 800650a:	d099      	beq.n	8006440 <_dtoa_r+0x818>
 800650c:	9a08      	ldr	r2, [sp, #32]
 800650e:	331c      	adds	r3, #28
 8006510:	441a      	add	r2, r3
 8006512:	4498      	add	r8, r3
 8006514:	441e      	add	r6, r3
 8006516:	9208      	str	r2, [sp, #32]
 8006518:	e792      	b.n	8006440 <_dtoa_r+0x818>
 800651a:	4603      	mov	r3, r0
 800651c:	e7f6      	b.n	800650c <_dtoa_r+0x8e4>
 800651e:	9b07      	ldr	r3, [sp, #28]
 8006520:	9704      	str	r7, [sp, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	dc20      	bgt.n	8006568 <_dtoa_r+0x940>
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652a:	2b02      	cmp	r3, #2
 800652c:	dd1e      	ble.n	800656c <_dtoa_r+0x944>
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	f47f aec0 	bne.w	80062b6 <_dtoa_r+0x68e>
 8006536:	4621      	mov	r1, r4
 8006538:	2205      	movs	r2, #5
 800653a:	4658      	mov	r0, fp
 800653c:	f000 fa9a 	bl	8006a74 <__multadd>
 8006540:	4601      	mov	r1, r0
 8006542:	4604      	mov	r4, r0
 8006544:	4648      	mov	r0, r9
 8006546:	f000 fcad 	bl	8006ea4 <__mcmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	f77f aeb3 	ble.w	80062b6 <_dtoa_r+0x68e>
 8006550:	4656      	mov	r6, sl
 8006552:	2331      	movs	r3, #49	@ 0x31
 8006554:	f806 3b01 	strb.w	r3, [r6], #1
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	3301      	adds	r3, #1
 800655c:	9304      	str	r3, [sp, #16]
 800655e:	e6ae      	b.n	80062be <_dtoa_r+0x696>
 8006560:	9c07      	ldr	r4, [sp, #28]
 8006562:	9704      	str	r7, [sp, #16]
 8006564:	4625      	mov	r5, r4
 8006566:	e7f3      	b.n	8006550 <_dtoa_r+0x928>
 8006568:	9b07      	ldr	r3, [sp, #28]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8104 	beq.w	800677c <_dtoa_r+0xb54>
 8006574:	2e00      	cmp	r6, #0
 8006576:	dd05      	ble.n	8006584 <_dtoa_r+0x95c>
 8006578:	4629      	mov	r1, r5
 800657a:	4632      	mov	r2, r6
 800657c:	4658      	mov	r0, fp
 800657e:	f000 fc25 	bl	8006dcc <__lshift>
 8006582:	4605      	mov	r5, r0
 8006584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d05a      	beq.n	8006640 <_dtoa_r+0xa18>
 800658a:	6869      	ldr	r1, [r5, #4]
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fa0f 	bl	80069b0 <_Balloc>
 8006592:	4606      	mov	r6, r0
 8006594:	b928      	cbnz	r0, 80065a2 <_dtoa_r+0x97a>
 8006596:	4b84      	ldr	r3, [pc, #528]	@ (80067a8 <_dtoa_r+0xb80>)
 8006598:	4602      	mov	r2, r0
 800659a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800659e:	f7ff bb5a 	b.w	8005c56 <_dtoa_r+0x2e>
 80065a2:	692a      	ldr	r2, [r5, #16]
 80065a4:	3202      	adds	r2, #2
 80065a6:	0092      	lsls	r2, r2, #2
 80065a8:	f105 010c 	add.w	r1, r5, #12
 80065ac:	300c      	adds	r0, #12
 80065ae:	f000 ffaf 	bl	8007510 <memcpy>
 80065b2:	2201      	movs	r2, #1
 80065b4:	4631      	mov	r1, r6
 80065b6:	4658      	mov	r0, fp
 80065b8:	f000 fc08 	bl	8006dcc <__lshift>
 80065bc:	f10a 0301 	add.w	r3, sl, #1
 80065c0:	9307      	str	r3, [sp, #28]
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	4453      	add	r3, sl
 80065c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065c8:	9b02      	ldr	r3, [sp, #8]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	462f      	mov	r7, r5
 80065d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065d2:	4605      	mov	r5, r0
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	4621      	mov	r1, r4
 80065d8:	3b01      	subs	r3, #1
 80065da:	4648      	mov	r0, r9
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	f7ff fa98 	bl	8005b12 <quorem>
 80065e2:	4639      	mov	r1, r7
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065ea:	4648      	mov	r0, r9
 80065ec:	f000 fc5a 	bl	8006ea4 <__mcmp>
 80065f0:	462a      	mov	r2, r5
 80065f2:	9008      	str	r0, [sp, #32]
 80065f4:	4621      	mov	r1, r4
 80065f6:	4658      	mov	r0, fp
 80065f8:	f000 fc70 	bl	8006edc <__mdiff>
 80065fc:	68c2      	ldr	r2, [r0, #12]
 80065fe:	4606      	mov	r6, r0
 8006600:	bb02      	cbnz	r2, 8006644 <_dtoa_r+0xa1c>
 8006602:	4601      	mov	r1, r0
 8006604:	4648      	mov	r0, r9
 8006606:	f000 fc4d 	bl	8006ea4 <__mcmp>
 800660a:	4602      	mov	r2, r0
 800660c:	4631      	mov	r1, r6
 800660e:	4658      	mov	r0, fp
 8006610:	920e      	str	r2, [sp, #56]	@ 0x38
 8006612:	f000 fa0d 	bl	8006a30 <_Bfree>
 8006616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006618:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800661a:	9e07      	ldr	r6, [sp, #28]
 800661c:	ea43 0102 	orr.w	r1, r3, r2
 8006620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006622:	4319      	orrs	r1, r3
 8006624:	d110      	bne.n	8006648 <_dtoa_r+0xa20>
 8006626:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800662a:	d029      	beq.n	8006680 <_dtoa_r+0xa58>
 800662c:	9b08      	ldr	r3, [sp, #32]
 800662e:	2b00      	cmp	r3, #0
 8006630:	dd02      	ble.n	8006638 <_dtoa_r+0xa10>
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006638:	9b00      	ldr	r3, [sp, #0]
 800663a:	f883 8000 	strb.w	r8, [r3]
 800663e:	e63f      	b.n	80062c0 <_dtoa_r+0x698>
 8006640:	4628      	mov	r0, r5
 8006642:	e7bb      	b.n	80065bc <_dtoa_r+0x994>
 8006644:	2201      	movs	r2, #1
 8006646:	e7e1      	b.n	800660c <_dtoa_r+0x9e4>
 8006648:	9b08      	ldr	r3, [sp, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	db04      	blt.n	8006658 <_dtoa_r+0xa30>
 800664e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006650:	430b      	orrs	r3, r1
 8006652:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006654:	430b      	orrs	r3, r1
 8006656:	d120      	bne.n	800669a <_dtoa_r+0xa72>
 8006658:	2a00      	cmp	r2, #0
 800665a:	dded      	ble.n	8006638 <_dtoa_r+0xa10>
 800665c:	4649      	mov	r1, r9
 800665e:	2201      	movs	r2, #1
 8006660:	4658      	mov	r0, fp
 8006662:	f000 fbb3 	bl	8006dcc <__lshift>
 8006666:	4621      	mov	r1, r4
 8006668:	4681      	mov	r9, r0
 800666a:	f000 fc1b 	bl	8006ea4 <__mcmp>
 800666e:	2800      	cmp	r0, #0
 8006670:	dc03      	bgt.n	800667a <_dtoa_r+0xa52>
 8006672:	d1e1      	bne.n	8006638 <_dtoa_r+0xa10>
 8006674:	f018 0f01 	tst.w	r8, #1
 8006678:	d0de      	beq.n	8006638 <_dtoa_r+0xa10>
 800667a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800667e:	d1d8      	bne.n	8006632 <_dtoa_r+0xa0a>
 8006680:	9a00      	ldr	r2, [sp, #0]
 8006682:	2339      	movs	r3, #57	@ 0x39
 8006684:	7013      	strb	r3, [r2, #0]
 8006686:	4633      	mov	r3, r6
 8006688:	461e      	mov	r6, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006690:	2a39      	cmp	r2, #57	@ 0x39
 8006692:	d052      	beq.n	800673a <_dtoa_r+0xb12>
 8006694:	3201      	adds	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e612      	b.n	80062c0 <_dtoa_r+0x698>
 800669a:	2a00      	cmp	r2, #0
 800669c:	dd07      	ble.n	80066ae <_dtoa_r+0xa86>
 800669e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066a2:	d0ed      	beq.n	8006680 <_dtoa_r+0xa58>
 80066a4:	9a00      	ldr	r2, [sp, #0]
 80066a6:	f108 0301 	add.w	r3, r8, #1
 80066aa:	7013      	strb	r3, [r2, #0]
 80066ac:	e608      	b.n	80062c0 <_dtoa_r+0x698>
 80066ae:	9b07      	ldr	r3, [sp, #28]
 80066b0:	9a07      	ldr	r2, [sp, #28]
 80066b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d028      	beq.n	800670e <_dtoa_r+0xae6>
 80066bc:	4649      	mov	r1, r9
 80066be:	2300      	movs	r3, #0
 80066c0:	220a      	movs	r2, #10
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 f9d6 	bl	8006a74 <__multadd>
 80066c8:	42af      	cmp	r7, r5
 80066ca:	4681      	mov	r9, r0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	f04f 020a 	mov.w	r2, #10
 80066d4:	4639      	mov	r1, r7
 80066d6:	4658      	mov	r0, fp
 80066d8:	d107      	bne.n	80066ea <_dtoa_r+0xac2>
 80066da:	f000 f9cb 	bl	8006a74 <__multadd>
 80066de:	4607      	mov	r7, r0
 80066e0:	4605      	mov	r5, r0
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	3301      	adds	r3, #1
 80066e6:	9307      	str	r3, [sp, #28]
 80066e8:	e774      	b.n	80065d4 <_dtoa_r+0x9ac>
 80066ea:	f000 f9c3 	bl	8006a74 <__multadd>
 80066ee:	4629      	mov	r1, r5
 80066f0:	4607      	mov	r7, r0
 80066f2:	2300      	movs	r3, #0
 80066f4:	220a      	movs	r2, #10
 80066f6:	4658      	mov	r0, fp
 80066f8:	f000 f9bc 	bl	8006a74 <__multadd>
 80066fc:	4605      	mov	r5, r0
 80066fe:	e7f0      	b.n	80066e2 <_dtoa_r+0xaba>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	bfcc      	ite	gt
 8006706:	461e      	movgt	r6, r3
 8006708:	2601      	movle	r6, #1
 800670a:	4456      	add	r6, sl
 800670c:	2700      	movs	r7, #0
 800670e:	4649      	mov	r1, r9
 8006710:	2201      	movs	r2, #1
 8006712:	4658      	mov	r0, fp
 8006714:	f000 fb5a 	bl	8006dcc <__lshift>
 8006718:	4621      	mov	r1, r4
 800671a:	4681      	mov	r9, r0
 800671c:	f000 fbc2 	bl	8006ea4 <__mcmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	dcb0      	bgt.n	8006686 <_dtoa_r+0xa5e>
 8006724:	d102      	bne.n	800672c <_dtoa_r+0xb04>
 8006726:	f018 0f01 	tst.w	r8, #1
 800672a:	d1ac      	bne.n	8006686 <_dtoa_r+0xa5e>
 800672c:	4633      	mov	r3, r6
 800672e:	461e      	mov	r6, r3
 8006730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006734:	2a30      	cmp	r2, #48	@ 0x30
 8006736:	d0fa      	beq.n	800672e <_dtoa_r+0xb06>
 8006738:	e5c2      	b.n	80062c0 <_dtoa_r+0x698>
 800673a:	459a      	cmp	sl, r3
 800673c:	d1a4      	bne.n	8006688 <_dtoa_r+0xa60>
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	2331      	movs	r3, #49	@ 0x31
 8006746:	f88a 3000 	strb.w	r3, [sl]
 800674a:	e5b9      	b.n	80062c0 <_dtoa_r+0x698>
 800674c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800674e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067ac <_dtoa_r+0xb84>
 8006752:	b11b      	cbz	r3, 800675c <_dtoa_r+0xb34>
 8006754:	f10a 0308 	add.w	r3, sl, #8
 8006758:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4650      	mov	r0, sl
 800675e:	b019      	add	sp, #100	@ 0x64
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006766:	2b01      	cmp	r3, #1
 8006768:	f77f ae37 	ble.w	80063da <_dtoa_r+0x7b2>
 800676c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800676e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006770:	2001      	movs	r0, #1
 8006772:	e655      	b.n	8006420 <_dtoa_r+0x7f8>
 8006774:	9b00      	ldr	r3, [sp, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f77f aed6 	ble.w	8006528 <_dtoa_r+0x900>
 800677c:	4656      	mov	r6, sl
 800677e:	4621      	mov	r1, r4
 8006780:	4648      	mov	r0, r9
 8006782:	f7ff f9c6 	bl	8005b12 <quorem>
 8006786:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800678a:	f806 8b01 	strb.w	r8, [r6], #1
 800678e:	9b00      	ldr	r3, [sp, #0]
 8006790:	eba6 020a 	sub.w	r2, r6, sl
 8006794:	4293      	cmp	r3, r2
 8006796:	ddb3      	ble.n	8006700 <_dtoa_r+0xad8>
 8006798:	4649      	mov	r1, r9
 800679a:	2300      	movs	r3, #0
 800679c:	220a      	movs	r2, #10
 800679e:	4658      	mov	r0, fp
 80067a0:	f000 f968 	bl	8006a74 <__multadd>
 80067a4:	4681      	mov	r9, r0
 80067a6:	e7ea      	b.n	800677e <_dtoa_r+0xb56>
 80067a8:	08007cbc 	.word	0x08007cbc
 80067ac:	08007c40 	.word	0x08007c40

080067b0 <_free_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4605      	mov	r5, r0
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d041      	beq.n	800683c <_free_r+0x8c>
 80067b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067bc:	1f0c      	subs	r4, r1, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bfb8      	it	lt
 80067c2:	18e4      	addlt	r4, r4, r3
 80067c4:	f000 f8e8 	bl	8006998 <__malloc_lock>
 80067c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006840 <_free_r+0x90>)
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	b933      	cbnz	r3, 80067dc <_free_r+0x2c>
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	4628      	mov	r0, r5
 80067d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067d8:	f000 b8e4 	b.w	80069a4 <__malloc_unlock>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d908      	bls.n	80067f2 <_free_r+0x42>
 80067e0:	6820      	ldr	r0, [r4, #0]
 80067e2:	1821      	adds	r1, r4, r0
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf01      	itttt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	1809      	addeq	r1, r1, r0
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	e7ed      	b.n	80067ce <_free_r+0x1e>
 80067f2:	461a      	mov	r2, r3
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	b10b      	cbz	r3, 80067fc <_free_r+0x4c>
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	d9fa      	bls.n	80067f2 <_free_r+0x42>
 80067fc:	6811      	ldr	r1, [r2, #0]
 80067fe:	1850      	adds	r0, r2, r1
 8006800:	42a0      	cmp	r0, r4
 8006802:	d10b      	bne.n	800681c <_free_r+0x6c>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	4401      	add	r1, r0
 8006808:	1850      	adds	r0, r2, r1
 800680a:	4283      	cmp	r3, r0
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	d1e0      	bne.n	80067d2 <_free_r+0x22>
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	6053      	str	r3, [r2, #4]
 8006816:	4408      	add	r0, r1
 8006818:	6010      	str	r0, [r2, #0]
 800681a:	e7da      	b.n	80067d2 <_free_r+0x22>
 800681c:	d902      	bls.n	8006824 <_free_r+0x74>
 800681e:	230c      	movs	r3, #12
 8006820:	602b      	str	r3, [r5, #0]
 8006822:	e7d6      	b.n	80067d2 <_free_r+0x22>
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	1821      	adds	r1, r4, r0
 8006828:	428b      	cmp	r3, r1
 800682a:	bf04      	itt	eq
 800682c:	6819      	ldreq	r1, [r3, #0]
 800682e:	685b      	ldreq	r3, [r3, #4]
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	bf04      	itt	eq
 8006834:	1809      	addeq	r1, r1, r0
 8006836:	6021      	streq	r1, [r4, #0]
 8006838:	6054      	str	r4, [r2, #4]
 800683a:	e7ca      	b.n	80067d2 <_free_r+0x22>
 800683c:	bd38      	pop	{r3, r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	200004a8 	.word	0x200004a8

08006844 <malloc>:
 8006844:	4b02      	ldr	r3, [pc, #8]	@ (8006850 <malloc+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f000 b825 	b.w	8006898 <_malloc_r>
 800684e:	bf00      	nop
 8006850:	2000001c 	.word	0x2000001c

08006854 <sbrk_aligned>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	4e0f      	ldr	r6, [pc, #60]	@ (8006894 <sbrk_aligned+0x40>)
 8006858:	460c      	mov	r4, r1
 800685a:	6831      	ldr	r1, [r6, #0]
 800685c:	4605      	mov	r5, r0
 800685e:	b911      	cbnz	r1, 8006866 <sbrk_aligned+0x12>
 8006860:	f000 fe46 	bl	80074f0 <_sbrk_r>
 8006864:	6030      	str	r0, [r6, #0]
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f000 fe41 	bl	80074f0 <_sbrk_r>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d103      	bne.n	800687a <sbrk_aligned+0x26>
 8006872:	f04f 34ff 	mov.w	r4, #4294967295
 8006876:	4620      	mov	r0, r4
 8006878:	bd70      	pop	{r4, r5, r6, pc}
 800687a:	1cc4      	adds	r4, r0, #3
 800687c:	f024 0403 	bic.w	r4, r4, #3
 8006880:	42a0      	cmp	r0, r4
 8006882:	d0f8      	beq.n	8006876 <sbrk_aligned+0x22>
 8006884:	1a21      	subs	r1, r4, r0
 8006886:	4628      	mov	r0, r5
 8006888:	f000 fe32 	bl	80074f0 <_sbrk_r>
 800688c:	3001      	adds	r0, #1
 800688e:	d1f2      	bne.n	8006876 <sbrk_aligned+0x22>
 8006890:	e7ef      	b.n	8006872 <sbrk_aligned+0x1e>
 8006892:	bf00      	nop
 8006894:	200004a4 	.word	0x200004a4

08006898 <_malloc_r>:
 8006898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800689c:	1ccd      	adds	r5, r1, #3
 800689e:	f025 0503 	bic.w	r5, r5, #3
 80068a2:	3508      	adds	r5, #8
 80068a4:	2d0c      	cmp	r5, #12
 80068a6:	bf38      	it	cc
 80068a8:	250c      	movcc	r5, #12
 80068aa:	2d00      	cmp	r5, #0
 80068ac:	4606      	mov	r6, r0
 80068ae:	db01      	blt.n	80068b4 <_malloc_r+0x1c>
 80068b0:	42a9      	cmp	r1, r5
 80068b2:	d904      	bls.n	80068be <_malloc_r+0x26>
 80068b4:	230c      	movs	r3, #12
 80068b6:	6033      	str	r3, [r6, #0]
 80068b8:	2000      	movs	r0, #0
 80068ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006994 <_malloc_r+0xfc>
 80068c2:	f000 f869 	bl	8006998 <__malloc_lock>
 80068c6:	f8d8 3000 	ldr.w	r3, [r8]
 80068ca:	461c      	mov	r4, r3
 80068cc:	bb44      	cbnz	r4, 8006920 <_malloc_r+0x88>
 80068ce:	4629      	mov	r1, r5
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff ffbf 	bl	8006854 <sbrk_aligned>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	4604      	mov	r4, r0
 80068da:	d158      	bne.n	800698e <_malloc_r+0xf6>
 80068dc:	f8d8 4000 	ldr.w	r4, [r8]
 80068e0:	4627      	mov	r7, r4
 80068e2:	2f00      	cmp	r7, #0
 80068e4:	d143      	bne.n	800696e <_malloc_r+0xd6>
 80068e6:	2c00      	cmp	r4, #0
 80068e8:	d04b      	beq.n	8006982 <_malloc_r+0xea>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	4639      	mov	r1, r7
 80068ee:	4630      	mov	r0, r6
 80068f0:	eb04 0903 	add.w	r9, r4, r3
 80068f4:	f000 fdfc 	bl	80074f0 <_sbrk_r>
 80068f8:	4581      	cmp	r9, r0
 80068fa:	d142      	bne.n	8006982 <_malloc_r+0xea>
 80068fc:	6821      	ldr	r1, [r4, #0]
 80068fe:	1a6d      	subs	r5, r5, r1
 8006900:	4629      	mov	r1, r5
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff ffa6 	bl	8006854 <sbrk_aligned>
 8006908:	3001      	adds	r0, #1
 800690a:	d03a      	beq.n	8006982 <_malloc_r+0xea>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	442b      	add	r3, r5
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	f8d8 3000 	ldr.w	r3, [r8]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	bb62      	cbnz	r2, 8006974 <_malloc_r+0xdc>
 800691a:	f8c8 7000 	str.w	r7, [r8]
 800691e:	e00f      	b.n	8006940 <_malloc_r+0xa8>
 8006920:	6822      	ldr	r2, [r4, #0]
 8006922:	1b52      	subs	r2, r2, r5
 8006924:	d420      	bmi.n	8006968 <_malloc_r+0xd0>
 8006926:	2a0b      	cmp	r2, #11
 8006928:	d917      	bls.n	800695a <_malloc_r+0xc2>
 800692a:	1961      	adds	r1, r4, r5
 800692c:	42a3      	cmp	r3, r4
 800692e:	6025      	str	r5, [r4, #0]
 8006930:	bf18      	it	ne
 8006932:	6059      	strne	r1, [r3, #4]
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	bf08      	it	eq
 8006938:	f8c8 1000 	streq.w	r1, [r8]
 800693c:	5162      	str	r2, [r4, r5]
 800693e:	604b      	str	r3, [r1, #4]
 8006940:	4630      	mov	r0, r6
 8006942:	f000 f82f 	bl	80069a4 <__malloc_unlock>
 8006946:	f104 000b 	add.w	r0, r4, #11
 800694a:	1d23      	adds	r3, r4, #4
 800694c:	f020 0007 	bic.w	r0, r0, #7
 8006950:	1ac2      	subs	r2, r0, r3
 8006952:	bf1c      	itt	ne
 8006954:	1a1b      	subne	r3, r3, r0
 8006956:	50a3      	strne	r3, [r4, r2]
 8006958:	e7af      	b.n	80068ba <_malloc_r+0x22>
 800695a:	6862      	ldr	r2, [r4, #4]
 800695c:	42a3      	cmp	r3, r4
 800695e:	bf0c      	ite	eq
 8006960:	f8c8 2000 	streq.w	r2, [r8]
 8006964:	605a      	strne	r2, [r3, #4]
 8006966:	e7eb      	b.n	8006940 <_malloc_r+0xa8>
 8006968:	4623      	mov	r3, r4
 800696a:	6864      	ldr	r4, [r4, #4]
 800696c:	e7ae      	b.n	80068cc <_malloc_r+0x34>
 800696e:	463c      	mov	r4, r7
 8006970:	687f      	ldr	r7, [r7, #4]
 8006972:	e7b6      	b.n	80068e2 <_malloc_r+0x4a>
 8006974:	461a      	mov	r2, r3
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	42a3      	cmp	r3, r4
 800697a:	d1fb      	bne.n	8006974 <_malloc_r+0xdc>
 800697c:	2300      	movs	r3, #0
 800697e:	6053      	str	r3, [r2, #4]
 8006980:	e7de      	b.n	8006940 <_malloc_r+0xa8>
 8006982:	230c      	movs	r3, #12
 8006984:	6033      	str	r3, [r6, #0]
 8006986:	4630      	mov	r0, r6
 8006988:	f000 f80c 	bl	80069a4 <__malloc_unlock>
 800698c:	e794      	b.n	80068b8 <_malloc_r+0x20>
 800698e:	6005      	str	r5, [r0, #0]
 8006990:	e7d6      	b.n	8006940 <_malloc_r+0xa8>
 8006992:	bf00      	nop
 8006994:	200004a8 	.word	0x200004a8

08006998 <__malloc_lock>:
 8006998:	4801      	ldr	r0, [pc, #4]	@ (80069a0 <__malloc_lock+0x8>)
 800699a:	f7ff b8b8 	b.w	8005b0e <__retarget_lock_acquire_recursive>
 800699e:	bf00      	nop
 80069a0:	200004a0 	.word	0x200004a0

080069a4 <__malloc_unlock>:
 80069a4:	4801      	ldr	r0, [pc, #4]	@ (80069ac <__malloc_unlock+0x8>)
 80069a6:	f7ff b8b3 	b.w	8005b10 <__retarget_lock_release_recursive>
 80069aa:	bf00      	nop
 80069ac:	200004a0 	.word	0x200004a0

080069b0 <_Balloc>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	69c6      	ldr	r6, [r0, #28]
 80069b4:	4604      	mov	r4, r0
 80069b6:	460d      	mov	r5, r1
 80069b8:	b976      	cbnz	r6, 80069d8 <_Balloc+0x28>
 80069ba:	2010      	movs	r0, #16
 80069bc:	f7ff ff42 	bl	8006844 <malloc>
 80069c0:	4602      	mov	r2, r0
 80069c2:	61e0      	str	r0, [r4, #28]
 80069c4:	b920      	cbnz	r0, 80069d0 <_Balloc+0x20>
 80069c6:	4b18      	ldr	r3, [pc, #96]	@ (8006a28 <_Balloc+0x78>)
 80069c8:	4818      	ldr	r0, [pc, #96]	@ (8006a2c <_Balloc+0x7c>)
 80069ca:	216b      	movs	r1, #107	@ 0x6b
 80069cc:	f000 fdae 	bl	800752c <__assert_func>
 80069d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d4:	6006      	str	r6, [r0, #0]
 80069d6:	60c6      	str	r6, [r0, #12]
 80069d8:	69e6      	ldr	r6, [r4, #28]
 80069da:	68f3      	ldr	r3, [r6, #12]
 80069dc:	b183      	cbz	r3, 8006a00 <_Balloc+0x50>
 80069de:	69e3      	ldr	r3, [r4, #28]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069e6:	b9b8      	cbnz	r0, 8006a18 <_Balloc+0x68>
 80069e8:	2101      	movs	r1, #1
 80069ea:	fa01 f605 	lsl.w	r6, r1, r5
 80069ee:	1d72      	adds	r2, r6, #5
 80069f0:	0092      	lsls	r2, r2, #2
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 fdb8 	bl	8007568 <_calloc_r>
 80069f8:	b160      	cbz	r0, 8006a14 <_Balloc+0x64>
 80069fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069fe:	e00e      	b.n	8006a1e <_Balloc+0x6e>
 8006a00:	2221      	movs	r2, #33	@ 0x21
 8006a02:	2104      	movs	r1, #4
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 fdaf 	bl	8007568 <_calloc_r>
 8006a0a:	69e3      	ldr	r3, [r4, #28]
 8006a0c:	60f0      	str	r0, [r6, #12]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e4      	bne.n	80069de <_Balloc+0x2e>
 8006a14:	2000      	movs	r0, #0
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	6802      	ldr	r2, [r0, #0]
 8006a1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a24:	e7f7      	b.n	8006a16 <_Balloc+0x66>
 8006a26:	bf00      	nop
 8006a28:	08007c4d 	.word	0x08007c4d
 8006a2c:	08007ccd 	.word	0x08007ccd

08006a30 <_Bfree>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	69c6      	ldr	r6, [r0, #28]
 8006a34:	4605      	mov	r5, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	b976      	cbnz	r6, 8006a58 <_Bfree+0x28>
 8006a3a:	2010      	movs	r0, #16
 8006a3c:	f7ff ff02 	bl	8006844 <malloc>
 8006a40:	4602      	mov	r2, r0
 8006a42:	61e8      	str	r0, [r5, #28]
 8006a44:	b920      	cbnz	r0, 8006a50 <_Bfree+0x20>
 8006a46:	4b09      	ldr	r3, [pc, #36]	@ (8006a6c <_Bfree+0x3c>)
 8006a48:	4809      	ldr	r0, [pc, #36]	@ (8006a70 <_Bfree+0x40>)
 8006a4a:	218f      	movs	r1, #143	@ 0x8f
 8006a4c:	f000 fd6e 	bl	800752c <__assert_func>
 8006a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a54:	6006      	str	r6, [r0, #0]
 8006a56:	60c6      	str	r6, [r0, #12]
 8006a58:	b13c      	cbz	r4, 8006a6a <_Bfree+0x3a>
 8006a5a:	69eb      	ldr	r3, [r5, #28]
 8006a5c:	6862      	ldr	r2, [r4, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a64:	6021      	str	r1, [r4, #0]
 8006a66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	08007c4d 	.word	0x08007c4d
 8006a70:	08007ccd 	.word	0x08007ccd

08006a74 <__multadd>:
 8006a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a78:	690d      	ldr	r5, [r1, #16]
 8006a7a:	4607      	mov	r7, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	461e      	mov	r6, r3
 8006a80:	f101 0c14 	add.w	ip, r1, #20
 8006a84:	2000      	movs	r0, #0
 8006a86:	f8dc 3000 	ldr.w	r3, [ip]
 8006a8a:	b299      	uxth	r1, r3
 8006a8c:	fb02 6101 	mla	r1, r2, r1, r6
 8006a90:	0c1e      	lsrs	r6, r3, #16
 8006a92:	0c0b      	lsrs	r3, r1, #16
 8006a94:	fb02 3306 	mla	r3, r2, r6, r3
 8006a98:	b289      	uxth	r1, r1
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aa0:	4285      	cmp	r5, r0
 8006aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8006aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aaa:	dcec      	bgt.n	8006a86 <__multadd+0x12>
 8006aac:	b30e      	cbz	r6, 8006af2 <__multadd+0x7e>
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	dc19      	bgt.n	8006ae8 <__multadd+0x74>
 8006ab4:	6861      	ldr	r1, [r4, #4]
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	3101      	adds	r1, #1
 8006aba:	f7ff ff79 	bl	80069b0 <_Balloc>
 8006abe:	4680      	mov	r8, r0
 8006ac0:	b928      	cbnz	r0, 8006ace <__multadd+0x5a>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8006af8 <__multadd+0x84>)
 8006ac6:	480d      	ldr	r0, [pc, #52]	@ (8006afc <__multadd+0x88>)
 8006ac8:	21ba      	movs	r1, #186	@ 0xba
 8006aca:	f000 fd2f 	bl	800752c <__assert_func>
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	3202      	adds	r2, #2
 8006ad2:	f104 010c 	add.w	r1, r4, #12
 8006ad6:	0092      	lsls	r2, r2, #2
 8006ad8:	300c      	adds	r0, #12
 8006ada:	f000 fd19 	bl	8007510 <memcpy>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f7ff ffa5 	bl	8006a30 <_Bfree>
 8006ae6:	4644      	mov	r4, r8
 8006ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006aec:	3501      	adds	r5, #1
 8006aee:	615e      	str	r6, [r3, #20]
 8006af0:	6125      	str	r5, [r4, #16]
 8006af2:	4620      	mov	r0, r4
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	08007cbc 	.word	0x08007cbc
 8006afc:	08007ccd 	.word	0x08007ccd

08006b00 <__hi0bits>:
 8006b00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b04:	4603      	mov	r3, r0
 8006b06:	bf36      	itet	cc
 8006b08:	0403      	lslcc	r3, r0, #16
 8006b0a:	2000      	movcs	r0, #0
 8006b0c:	2010      	movcc	r0, #16
 8006b0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b12:	bf3c      	itt	cc
 8006b14:	021b      	lslcc	r3, r3, #8
 8006b16:	3008      	addcc	r0, #8
 8006b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b1c:	bf3c      	itt	cc
 8006b1e:	011b      	lslcc	r3, r3, #4
 8006b20:	3004      	addcc	r0, #4
 8006b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b26:	bf3c      	itt	cc
 8006b28:	009b      	lslcc	r3, r3, #2
 8006b2a:	3002      	addcc	r0, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	db05      	blt.n	8006b3c <__hi0bits+0x3c>
 8006b30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b34:	f100 0001 	add.w	r0, r0, #1
 8006b38:	bf08      	it	eq
 8006b3a:	2020      	moveq	r0, #32
 8006b3c:	4770      	bx	lr

08006b3e <__lo0bits>:
 8006b3e:	6803      	ldr	r3, [r0, #0]
 8006b40:	4602      	mov	r2, r0
 8006b42:	f013 0007 	ands.w	r0, r3, #7
 8006b46:	d00b      	beq.n	8006b60 <__lo0bits+0x22>
 8006b48:	07d9      	lsls	r1, r3, #31
 8006b4a:	d421      	bmi.n	8006b90 <__lo0bits+0x52>
 8006b4c:	0798      	lsls	r0, r3, #30
 8006b4e:	bf49      	itett	mi
 8006b50:	085b      	lsrmi	r3, r3, #1
 8006b52:	089b      	lsrpl	r3, r3, #2
 8006b54:	2001      	movmi	r0, #1
 8006b56:	6013      	strmi	r3, [r2, #0]
 8006b58:	bf5c      	itt	pl
 8006b5a:	6013      	strpl	r3, [r2, #0]
 8006b5c:	2002      	movpl	r0, #2
 8006b5e:	4770      	bx	lr
 8006b60:	b299      	uxth	r1, r3
 8006b62:	b909      	cbnz	r1, 8006b68 <__lo0bits+0x2a>
 8006b64:	0c1b      	lsrs	r3, r3, #16
 8006b66:	2010      	movs	r0, #16
 8006b68:	b2d9      	uxtb	r1, r3
 8006b6a:	b909      	cbnz	r1, 8006b70 <__lo0bits+0x32>
 8006b6c:	3008      	adds	r0, #8
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	0719      	lsls	r1, r3, #28
 8006b72:	bf04      	itt	eq
 8006b74:	091b      	lsreq	r3, r3, #4
 8006b76:	3004      	addeq	r0, #4
 8006b78:	0799      	lsls	r1, r3, #30
 8006b7a:	bf04      	itt	eq
 8006b7c:	089b      	lsreq	r3, r3, #2
 8006b7e:	3002      	addeq	r0, #2
 8006b80:	07d9      	lsls	r1, r3, #31
 8006b82:	d403      	bmi.n	8006b8c <__lo0bits+0x4e>
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	f100 0001 	add.w	r0, r0, #1
 8006b8a:	d003      	beq.n	8006b94 <__lo0bits+0x56>
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	4770      	bx	lr
 8006b90:	2000      	movs	r0, #0
 8006b92:	4770      	bx	lr
 8006b94:	2020      	movs	r0, #32
 8006b96:	4770      	bx	lr

08006b98 <__i2b>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	f7ff ff07 	bl	80069b0 <_Balloc>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	b928      	cbnz	r0, 8006bb2 <__i2b+0x1a>
 8006ba6:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <__i2b+0x24>)
 8006ba8:	4805      	ldr	r0, [pc, #20]	@ (8006bc0 <__i2b+0x28>)
 8006baa:	f240 1145 	movw	r1, #325	@ 0x145
 8006bae:	f000 fcbd 	bl	800752c <__assert_func>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	6144      	str	r4, [r0, #20]
 8006bb6:	6103      	str	r3, [r0, #16]
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	bf00      	nop
 8006bbc:	08007cbc 	.word	0x08007cbc
 8006bc0:	08007ccd 	.word	0x08007ccd

08006bc4 <__multiply>:
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	4614      	mov	r4, r2
 8006bca:	690a      	ldr	r2, [r1, #16]
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	bfa8      	it	ge
 8006bd2:	4623      	movge	r3, r4
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	bfa4      	itt	ge
 8006bd8:	460c      	movge	r4, r1
 8006bda:	461f      	movge	r7, r3
 8006bdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006be0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006be4:	68a3      	ldr	r3, [r4, #8]
 8006be6:	6861      	ldr	r1, [r4, #4]
 8006be8:	eb0a 0609 	add.w	r6, sl, r9
 8006bec:	42b3      	cmp	r3, r6
 8006bee:	b085      	sub	sp, #20
 8006bf0:	bfb8      	it	lt
 8006bf2:	3101      	addlt	r1, #1
 8006bf4:	f7ff fedc 	bl	80069b0 <_Balloc>
 8006bf8:	b930      	cbnz	r0, 8006c08 <__multiply+0x44>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	4b44      	ldr	r3, [pc, #272]	@ (8006d10 <__multiply+0x14c>)
 8006bfe:	4845      	ldr	r0, [pc, #276]	@ (8006d14 <__multiply+0x150>)
 8006c00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c04:	f000 fc92 	bl	800752c <__assert_func>
 8006c08:	f100 0514 	add.w	r5, r0, #20
 8006c0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c10:	462b      	mov	r3, r5
 8006c12:	2200      	movs	r2, #0
 8006c14:	4543      	cmp	r3, r8
 8006c16:	d321      	bcc.n	8006c5c <__multiply+0x98>
 8006c18:	f107 0114 	add.w	r1, r7, #20
 8006c1c:	f104 0214 	add.w	r2, r4, #20
 8006c20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c28:	9302      	str	r3, [sp, #8]
 8006c2a:	1b13      	subs	r3, r2, r4
 8006c2c:	3b15      	subs	r3, #21
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	3304      	adds	r3, #4
 8006c34:	f104 0715 	add.w	r7, r4, #21
 8006c38:	42ba      	cmp	r2, r7
 8006c3a:	bf38      	it	cc
 8006c3c:	2304      	movcc	r3, #4
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	9103      	str	r1, [sp, #12]
 8006c44:	428b      	cmp	r3, r1
 8006c46:	d80c      	bhi.n	8006c62 <__multiply+0x9e>
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	dd03      	ble.n	8006c54 <__multiply+0x90>
 8006c4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d05b      	beq.n	8006d0c <__multiply+0x148>
 8006c54:	6106      	str	r6, [r0, #16]
 8006c56:	b005      	add	sp, #20
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	f843 2b04 	str.w	r2, [r3], #4
 8006c60:	e7d8      	b.n	8006c14 <__multiply+0x50>
 8006c62:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c66:	f1ba 0f00 	cmp.w	sl, #0
 8006c6a:	d024      	beq.n	8006cb6 <__multiply+0xf2>
 8006c6c:	f104 0e14 	add.w	lr, r4, #20
 8006c70:	46a9      	mov	r9, r5
 8006c72:	f04f 0c00 	mov.w	ip, #0
 8006c76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c7a:	f8d9 3000 	ldr.w	r3, [r9]
 8006c7e:	fa1f fb87 	uxth.w	fp, r7
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c8c:	f8d9 7000 	ldr.w	r7, [r9]
 8006c90:	4463      	add	r3, ip
 8006c92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c96:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ca4:	4572      	cmp	r2, lr
 8006ca6:	f849 3b04 	str.w	r3, [r9], #4
 8006caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cae:	d8e2      	bhi.n	8006c76 <__multiply+0xb2>
 8006cb0:	9b01      	ldr	r3, [sp, #4]
 8006cb2:	f845 c003 	str.w	ip, [r5, r3]
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cbc:	3104      	adds	r1, #4
 8006cbe:	f1b9 0f00 	cmp.w	r9, #0
 8006cc2:	d021      	beq.n	8006d08 <__multiply+0x144>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	f104 0c14 	add.w	ip, r4, #20
 8006cca:	46ae      	mov	lr, r5
 8006ccc:	f04f 0a00 	mov.w	sl, #0
 8006cd0:	f8bc b000 	ldrh.w	fp, [ip]
 8006cd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006cd8:	fb09 770b 	mla	r7, r9, fp, r7
 8006cdc:	4457      	add	r7, sl
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ce4:	f84e 3b04 	str.w	r3, [lr], #4
 8006ce8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cf0:	f8be 3000 	ldrh.w	r3, [lr]
 8006cf4:	fb09 330a 	mla	r3, r9, sl, r3
 8006cf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006cfc:	4562      	cmp	r2, ip
 8006cfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d02:	d8e5      	bhi.n	8006cd0 <__multiply+0x10c>
 8006d04:	9f01      	ldr	r7, [sp, #4]
 8006d06:	51eb      	str	r3, [r5, r7]
 8006d08:	3504      	adds	r5, #4
 8006d0a:	e799      	b.n	8006c40 <__multiply+0x7c>
 8006d0c:	3e01      	subs	r6, #1
 8006d0e:	e79b      	b.n	8006c48 <__multiply+0x84>
 8006d10:	08007cbc 	.word	0x08007cbc
 8006d14:	08007ccd 	.word	0x08007ccd

08006d18 <__pow5mult>:
 8006d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	f012 0203 	ands.w	r2, r2, #3
 8006d22:	4607      	mov	r7, r0
 8006d24:	460e      	mov	r6, r1
 8006d26:	d007      	beq.n	8006d38 <__pow5mult+0x20>
 8006d28:	4c25      	ldr	r4, [pc, #148]	@ (8006dc0 <__pow5mult+0xa8>)
 8006d2a:	3a01      	subs	r2, #1
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d32:	f7ff fe9f 	bl	8006a74 <__multadd>
 8006d36:	4606      	mov	r6, r0
 8006d38:	10ad      	asrs	r5, r5, #2
 8006d3a:	d03d      	beq.n	8006db8 <__pow5mult+0xa0>
 8006d3c:	69fc      	ldr	r4, [r7, #28]
 8006d3e:	b97c      	cbnz	r4, 8006d60 <__pow5mult+0x48>
 8006d40:	2010      	movs	r0, #16
 8006d42:	f7ff fd7f 	bl	8006844 <malloc>
 8006d46:	4602      	mov	r2, r0
 8006d48:	61f8      	str	r0, [r7, #28]
 8006d4a:	b928      	cbnz	r0, 8006d58 <__pow5mult+0x40>
 8006d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc4 <__pow5mult+0xac>)
 8006d4e:	481e      	ldr	r0, [pc, #120]	@ (8006dc8 <__pow5mult+0xb0>)
 8006d50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d54:	f000 fbea 	bl	800752c <__assert_func>
 8006d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d5c:	6004      	str	r4, [r0, #0]
 8006d5e:	60c4      	str	r4, [r0, #12]
 8006d60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d68:	b94c      	cbnz	r4, 8006d7e <__pow5mult+0x66>
 8006d6a:	f240 2171 	movw	r1, #625	@ 0x271
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f7ff ff12 	bl	8006b98 <__i2b>
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	6003      	str	r3, [r0, #0]
 8006d7e:	f04f 0900 	mov.w	r9, #0
 8006d82:	07eb      	lsls	r3, r5, #31
 8006d84:	d50a      	bpl.n	8006d9c <__pow5mult+0x84>
 8006d86:	4631      	mov	r1, r6
 8006d88:	4622      	mov	r2, r4
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	f7ff ff1a 	bl	8006bc4 <__multiply>
 8006d90:	4631      	mov	r1, r6
 8006d92:	4680      	mov	r8, r0
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff fe4b 	bl	8006a30 <_Bfree>
 8006d9a:	4646      	mov	r6, r8
 8006d9c:	106d      	asrs	r5, r5, #1
 8006d9e:	d00b      	beq.n	8006db8 <__pow5mult+0xa0>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	b938      	cbnz	r0, 8006db4 <__pow5mult+0x9c>
 8006da4:	4622      	mov	r2, r4
 8006da6:	4621      	mov	r1, r4
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff ff0b 	bl	8006bc4 <__multiply>
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	f8c0 9000 	str.w	r9, [r0]
 8006db4:	4604      	mov	r4, r0
 8006db6:	e7e4      	b.n	8006d82 <__pow5mult+0x6a>
 8006db8:	4630      	mov	r0, r6
 8006dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dbe:	bf00      	nop
 8006dc0:	08007d28 	.word	0x08007d28
 8006dc4:	08007c4d 	.word	0x08007c4d
 8006dc8:	08007ccd 	.word	0x08007ccd

08006dcc <__lshift>:
 8006dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	6849      	ldr	r1, [r1, #4]
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	4607      	mov	r7, r0
 8006dde:	4691      	mov	r9, r2
 8006de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006de4:	f108 0601 	add.w	r6, r8, #1
 8006de8:	42b3      	cmp	r3, r6
 8006dea:	db0b      	blt.n	8006e04 <__lshift+0x38>
 8006dec:	4638      	mov	r0, r7
 8006dee:	f7ff fddf 	bl	80069b0 <_Balloc>
 8006df2:	4605      	mov	r5, r0
 8006df4:	b948      	cbnz	r0, 8006e0a <__lshift+0x3e>
 8006df6:	4602      	mov	r2, r0
 8006df8:	4b28      	ldr	r3, [pc, #160]	@ (8006e9c <__lshift+0xd0>)
 8006dfa:	4829      	ldr	r0, [pc, #164]	@ (8006ea0 <__lshift+0xd4>)
 8006dfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e00:	f000 fb94 	bl	800752c <__assert_func>
 8006e04:	3101      	adds	r1, #1
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	e7ee      	b.n	8006de8 <__lshift+0x1c>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f100 0114 	add.w	r1, r0, #20
 8006e10:	f100 0210 	add.w	r2, r0, #16
 8006e14:	4618      	mov	r0, r3
 8006e16:	4553      	cmp	r3, sl
 8006e18:	db33      	blt.n	8006e82 <__lshift+0xb6>
 8006e1a:	6920      	ldr	r0, [r4, #16]
 8006e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e20:	f104 0314 	add.w	r3, r4, #20
 8006e24:	f019 091f 	ands.w	r9, r9, #31
 8006e28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e30:	d02b      	beq.n	8006e8a <__lshift+0xbe>
 8006e32:	f1c9 0e20 	rsb	lr, r9, #32
 8006e36:	468a      	mov	sl, r1
 8006e38:	2200      	movs	r2, #0
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e40:	4310      	orrs	r0, r2
 8006e42:	f84a 0b04 	str.w	r0, [sl], #4
 8006e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4a:	459c      	cmp	ip, r3
 8006e4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e50:	d8f3      	bhi.n	8006e3a <__lshift+0x6e>
 8006e52:	ebac 0304 	sub.w	r3, ip, r4
 8006e56:	3b15      	subs	r3, #21
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	f104 0015 	add.w	r0, r4, #21
 8006e62:	4584      	cmp	ip, r0
 8006e64:	bf38      	it	cc
 8006e66:	2304      	movcc	r3, #4
 8006e68:	50ca      	str	r2, [r1, r3]
 8006e6a:	b10a      	cbz	r2, 8006e70 <__lshift+0xa4>
 8006e6c:	f108 0602 	add.w	r6, r8, #2
 8006e70:	3e01      	subs	r6, #1
 8006e72:	4638      	mov	r0, r7
 8006e74:	612e      	str	r6, [r5, #16]
 8006e76:	4621      	mov	r1, r4
 8006e78:	f7ff fdda 	bl	8006a30 <_Bfree>
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e82:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e86:	3301      	adds	r3, #1
 8006e88:	e7c5      	b.n	8006e16 <__lshift+0x4a>
 8006e8a:	3904      	subs	r1, #4
 8006e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e90:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e94:	459c      	cmp	ip, r3
 8006e96:	d8f9      	bhi.n	8006e8c <__lshift+0xc0>
 8006e98:	e7ea      	b.n	8006e70 <__lshift+0xa4>
 8006e9a:	bf00      	nop
 8006e9c:	08007cbc 	.word	0x08007cbc
 8006ea0:	08007ccd 	.word	0x08007ccd

08006ea4 <__mcmp>:
 8006ea4:	690a      	ldr	r2, [r1, #16]
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6900      	ldr	r0, [r0, #16]
 8006eaa:	1a80      	subs	r0, r0, r2
 8006eac:	b530      	push	{r4, r5, lr}
 8006eae:	d10e      	bne.n	8006ece <__mcmp+0x2a>
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	3114      	adds	r1, #20
 8006eb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006eb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ebc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ec0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ec4:	4295      	cmp	r5, r2
 8006ec6:	d003      	beq.n	8006ed0 <__mcmp+0x2c>
 8006ec8:	d205      	bcs.n	8006ed6 <__mcmp+0x32>
 8006eca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ece:	bd30      	pop	{r4, r5, pc}
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d3f3      	bcc.n	8006ebc <__mcmp+0x18>
 8006ed4:	e7fb      	b.n	8006ece <__mcmp+0x2a>
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	e7f9      	b.n	8006ece <__mcmp+0x2a>
	...

08006edc <__mdiff>:
 8006edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	4689      	mov	r9, r1
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	4648      	mov	r0, r9
 8006ee8:	4614      	mov	r4, r2
 8006eea:	f7ff ffdb 	bl	8006ea4 <__mcmp>
 8006eee:	1e05      	subs	r5, r0, #0
 8006ef0:	d112      	bne.n	8006f18 <__mdiff+0x3c>
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f7ff fd5b 	bl	80069b0 <_Balloc>
 8006efa:	4602      	mov	r2, r0
 8006efc:	b928      	cbnz	r0, 8006f0a <__mdiff+0x2e>
 8006efe:	4b3f      	ldr	r3, [pc, #252]	@ (8006ffc <__mdiff+0x120>)
 8006f00:	f240 2137 	movw	r1, #567	@ 0x237
 8006f04:	483e      	ldr	r0, [pc, #248]	@ (8007000 <__mdiff+0x124>)
 8006f06:	f000 fb11 	bl	800752c <__assert_func>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f10:	4610      	mov	r0, r2
 8006f12:	b003      	add	sp, #12
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	bfbc      	itt	lt
 8006f1a:	464b      	movlt	r3, r9
 8006f1c:	46a1      	movlt	r9, r4
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f24:	bfba      	itte	lt
 8006f26:	461c      	movlt	r4, r3
 8006f28:	2501      	movlt	r5, #1
 8006f2a:	2500      	movge	r5, #0
 8006f2c:	f7ff fd40 	bl	80069b0 <_Balloc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	b918      	cbnz	r0, 8006f3c <__mdiff+0x60>
 8006f34:	4b31      	ldr	r3, [pc, #196]	@ (8006ffc <__mdiff+0x120>)
 8006f36:	f240 2145 	movw	r1, #581	@ 0x245
 8006f3a:	e7e3      	b.n	8006f04 <__mdiff+0x28>
 8006f3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f40:	6926      	ldr	r6, [r4, #16]
 8006f42:	60c5      	str	r5, [r0, #12]
 8006f44:	f109 0310 	add.w	r3, r9, #16
 8006f48:	f109 0514 	add.w	r5, r9, #20
 8006f4c:	f104 0e14 	add.w	lr, r4, #20
 8006f50:	f100 0b14 	add.w	fp, r0, #20
 8006f54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	46d9      	mov	r9, fp
 8006f60:	f04f 0c00 	mov.w	ip, #0
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	fa1f f38a 	uxth.w	r3, sl
 8006f74:	4619      	mov	r1, r3
 8006f76:	b283      	uxth	r3, r0
 8006f78:	1acb      	subs	r3, r1, r3
 8006f7a:	0c00      	lsrs	r0, r0, #16
 8006f7c:	4463      	add	r3, ip
 8006f7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f8c:	4576      	cmp	r6, lr
 8006f8e:	f849 3b04 	str.w	r3, [r9], #4
 8006f92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f96:	d8e5      	bhi.n	8006f64 <__mdiff+0x88>
 8006f98:	1b33      	subs	r3, r6, r4
 8006f9a:	3b15      	subs	r3, #21
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	3415      	adds	r4, #21
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	42a6      	cmp	r6, r4
 8006fa6:	bf38      	it	cc
 8006fa8:	2304      	movcc	r3, #4
 8006faa:	441d      	add	r5, r3
 8006fac:	445b      	add	r3, fp
 8006fae:	461e      	mov	r6, r3
 8006fb0:	462c      	mov	r4, r5
 8006fb2:	4544      	cmp	r4, r8
 8006fb4:	d30e      	bcc.n	8006fd4 <__mdiff+0xf8>
 8006fb6:	f108 0103 	add.w	r1, r8, #3
 8006fba:	1b49      	subs	r1, r1, r5
 8006fbc:	f021 0103 	bic.w	r1, r1, #3
 8006fc0:	3d03      	subs	r5, #3
 8006fc2:	45a8      	cmp	r8, r5
 8006fc4:	bf38      	it	cc
 8006fc6:	2100      	movcc	r1, #0
 8006fc8:	440b      	add	r3, r1
 8006fca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fce:	b191      	cbz	r1, 8006ff6 <__mdiff+0x11a>
 8006fd0:	6117      	str	r7, [r2, #16]
 8006fd2:	e79d      	b.n	8006f10 <__mdiff+0x34>
 8006fd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fd8:	46e6      	mov	lr, ip
 8006fda:	0c08      	lsrs	r0, r1, #16
 8006fdc:	fa1c fc81 	uxtah	ip, ip, r1
 8006fe0:	4471      	add	r1, lr
 8006fe2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fe6:	b289      	uxth	r1, r1
 8006fe8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006fec:	f846 1b04 	str.w	r1, [r6], #4
 8006ff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ff4:	e7dd      	b.n	8006fb2 <__mdiff+0xd6>
 8006ff6:	3f01      	subs	r7, #1
 8006ff8:	e7e7      	b.n	8006fca <__mdiff+0xee>
 8006ffa:	bf00      	nop
 8006ffc:	08007cbc 	.word	0x08007cbc
 8007000:	08007ccd 	.word	0x08007ccd

08007004 <__d2b>:
 8007004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007008:	460f      	mov	r7, r1
 800700a:	2101      	movs	r1, #1
 800700c:	ec59 8b10 	vmov	r8, r9, d0
 8007010:	4616      	mov	r6, r2
 8007012:	f7ff fccd 	bl	80069b0 <_Balloc>
 8007016:	4604      	mov	r4, r0
 8007018:	b930      	cbnz	r0, 8007028 <__d2b+0x24>
 800701a:	4602      	mov	r2, r0
 800701c:	4b23      	ldr	r3, [pc, #140]	@ (80070ac <__d2b+0xa8>)
 800701e:	4824      	ldr	r0, [pc, #144]	@ (80070b0 <__d2b+0xac>)
 8007020:	f240 310f 	movw	r1, #783	@ 0x30f
 8007024:	f000 fa82 	bl	800752c <__assert_func>
 8007028:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800702c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007030:	b10d      	cbz	r5, 8007036 <__d2b+0x32>
 8007032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	f1b8 0300 	subs.w	r3, r8, #0
 800703c:	d023      	beq.n	8007086 <__d2b+0x82>
 800703e:	4668      	mov	r0, sp
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	f7ff fd7c 	bl	8006b3e <__lo0bits>
 8007046:	e9dd 1200 	ldrd	r1, r2, [sp]
 800704a:	b1d0      	cbz	r0, 8007082 <__d2b+0x7e>
 800704c:	f1c0 0320 	rsb	r3, r0, #32
 8007050:	fa02 f303 	lsl.w	r3, r2, r3
 8007054:	430b      	orrs	r3, r1
 8007056:	40c2      	lsrs	r2, r0
 8007058:	6163      	str	r3, [r4, #20]
 800705a:	9201      	str	r2, [sp, #4]
 800705c:	9b01      	ldr	r3, [sp, #4]
 800705e:	61a3      	str	r3, [r4, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf0c      	ite	eq
 8007064:	2201      	moveq	r2, #1
 8007066:	2202      	movne	r2, #2
 8007068:	6122      	str	r2, [r4, #16]
 800706a:	b1a5      	cbz	r5, 8007096 <__d2b+0x92>
 800706c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007070:	4405      	add	r5, r0
 8007072:	603d      	str	r5, [r7, #0]
 8007074:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007078:	6030      	str	r0, [r6, #0]
 800707a:	4620      	mov	r0, r4
 800707c:	b003      	add	sp, #12
 800707e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007082:	6161      	str	r1, [r4, #20]
 8007084:	e7ea      	b.n	800705c <__d2b+0x58>
 8007086:	a801      	add	r0, sp, #4
 8007088:	f7ff fd59 	bl	8006b3e <__lo0bits>
 800708c:	9b01      	ldr	r3, [sp, #4]
 800708e:	6163      	str	r3, [r4, #20]
 8007090:	3020      	adds	r0, #32
 8007092:	2201      	movs	r2, #1
 8007094:	e7e8      	b.n	8007068 <__d2b+0x64>
 8007096:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800709a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800709e:	6038      	str	r0, [r7, #0]
 80070a0:	6918      	ldr	r0, [r3, #16]
 80070a2:	f7ff fd2d 	bl	8006b00 <__hi0bits>
 80070a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070aa:	e7e5      	b.n	8007078 <__d2b+0x74>
 80070ac:	08007cbc 	.word	0x08007cbc
 80070b0:	08007ccd 	.word	0x08007ccd

080070b4 <__ssputs_r>:
 80070b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	688e      	ldr	r6, [r1, #8]
 80070ba:	461f      	mov	r7, r3
 80070bc:	42be      	cmp	r6, r7
 80070be:	680b      	ldr	r3, [r1, #0]
 80070c0:	4682      	mov	sl, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	4690      	mov	r8, r2
 80070c6:	d82d      	bhi.n	8007124 <__ssputs_r+0x70>
 80070c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070d0:	d026      	beq.n	8007120 <__ssputs_r+0x6c>
 80070d2:	6965      	ldr	r5, [r4, #20]
 80070d4:	6909      	ldr	r1, [r1, #16]
 80070d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070da:	eba3 0901 	sub.w	r9, r3, r1
 80070de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070e2:	1c7b      	adds	r3, r7, #1
 80070e4:	444b      	add	r3, r9
 80070e6:	106d      	asrs	r5, r5, #1
 80070e8:	429d      	cmp	r5, r3
 80070ea:	bf38      	it	cc
 80070ec:	461d      	movcc	r5, r3
 80070ee:	0553      	lsls	r3, r2, #21
 80070f0:	d527      	bpl.n	8007142 <__ssputs_r+0x8e>
 80070f2:	4629      	mov	r1, r5
 80070f4:	f7ff fbd0 	bl	8006898 <_malloc_r>
 80070f8:	4606      	mov	r6, r0
 80070fa:	b360      	cbz	r0, 8007156 <__ssputs_r+0xa2>
 80070fc:	6921      	ldr	r1, [r4, #16]
 80070fe:	464a      	mov	r2, r9
 8007100:	f000 fa06 	bl	8007510 <memcpy>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800710a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	6126      	str	r6, [r4, #16]
 8007112:	6165      	str	r5, [r4, #20]
 8007114:	444e      	add	r6, r9
 8007116:	eba5 0509 	sub.w	r5, r5, r9
 800711a:	6026      	str	r6, [r4, #0]
 800711c:	60a5      	str	r5, [r4, #8]
 800711e:	463e      	mov	r6, r7
 8007120:	42be      	cmp	r6, r7
 8007122:	d900      	bls.n	8007126 <__ssputs_r+0x72>
 8007124:	463e      	mov	r6, r7
 8007126:	6820      	ldr	r0, [r4, #0]
 8007128:	4632      	mov	r2, r6
 800712a:	4641      	mov	r1, r8
 800712c:	f000 f9c6 	bl	80074bc <memmove>
 8007130:	68a3      	ldr	r3, [r4, #8]
 8007132:	1b9b      	subs	r3, r3, r6
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	4433      	add	r3, r6
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	2000      	movs	r0, #0
 800713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007142:	462a      	mov	r2, r5
 8007144:	f000 fa36 	bl	80075b4 <_realloc_r>
 8007148:	4606      	mov	r6, r0
 800714a:	2800      	cmp	r0, #0
 800714c:	d1e0      	bne.n	8007110 <__ssputs_r+0x5c>
 800714e:	6921      	ldr	r1, [r4, #16]
 8007150:	4650      	mov	r0, sl
 8007152:	f7ff fb2d 	bl	80067b0 <_free_r>
 8007156:	230c      	movs	r3, #12
 8007158:	f8ca 3000 	str.w	r3, [sl]
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	e7e9      	b.n	800713e <__ssputs_r+0x8a>
	...

0800716c <_svfiprintf_r>:
 800716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	4698      	mov	r8, r3
 8007172:	898b      	ldrh	r3, [r1, #12]
 8007174:	061b      	lsls	r3, r3, #24
 8007176:	b09d      	sub	sp, #116	@ 0x74
 8007178:	4607      	mov	r7, r0
 800717a:	460d      	mov	r5, r1
 800717c:	4614      	mov	r4, r2
 800717e:	d510      	bpl.n	80071a2 <_svfiprintf_r+0x36>
 8007180:	690b      	ldr	r3, [r1, #16]
 8007182:	b973      	cbnz	r3, 80071a2 <_svfiprintf_r+0x36>
 8007184:	2140      	movs	r1, #64	@ 0x40
 8007186:	f7ff fb87 	bl	8006898 <_malloc_r>
 800718a:	6028      	str	r0, [r5, #0]
 800718c:	6128      	str	r0, [r5, #16]
 800718e:	b930      	cbnz	r0, 800719e <_svfiprintf_r+0x32>
 8007190:	230c      	movs	r3, #12
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	b01d      	add	sp, #116	@ 0x74
 800719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719e:	2340      	movs	r3, #64	@ 0x40
 80071a0:	616b      	str	r3, [r5, #20]
 80071a2:	2300      	movs	r3, #0
 80071a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a6:	2320      	movs	r3, #32
 80071a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80071b0:	2330      	movs	r3, #48	@ 0x30
 80071b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007350 <_svfiprintf_r+0x1e4>
 80071b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071ba:	f04f 0901 	mov.w	r9, #1
 80071be:	4623      	mov	r3, r4
 80071c0:	469a      	mov	sl, r3
 80071c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071c6:	b10a      	cbz	r2, 80071cc <_svfiprintf_r+0x60>
 80071c8:	2a25      	cmp	r2, #37	@ 0x25
 80071ca:	d1f9      	bne.n	80071c0 <_svfiprintf_r+0x54>
 80071cc:	ebba 0b04 	subs.w	fp, sl, r4
 80071d0:	d00b      	beq.n	80071ea <_svfiprintf_r+0x7e>
 80071d2:	465b      	mov	r3, fp
 80071d4:	4622      	mov	r2, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	4638      	mov	r0, r7
 80071da:	f7ff ff6b 	bl	80070b4 <__ssputs_r>
 80071de:	3001      	adds	r0, #1
 80071e0:	f000 80a7 	beq.w	8007332 <_svfiprintf_r+0x1c6>
 80071e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071e6:	445a      	add	r2, fp
 80071e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80071ea:	f89a 3000 	ldrb.w	r3, [sl]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 809f 	beq.w	8007332 <_svfiprintf_r+0x1c6>
 80071f4:	2300      	movs	r3, #0
 80071f6:	f04f 32ff 	mov.w	r2, #4294967295
 80071fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071fe:	f10a 0a01 	add.w	sl, sl, #1
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	9307      	str	r3, [sp, #28]
 8007206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800720a:	931a      	str	r3, [sp, #104]	@ 0x68
 800720c:	4654      	mov	r4, sl
 800720e:	2205      	movs	r2, #5
 8007210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007214:	484e      	ldr	r0, [pc, #312]	@ (8007350 <_svfiprintf_r+0x1e4>)
 8007216:	f7f8 ffe3 	bl	80001e0 <memchr>
 800721a:	9a04      	ldr	r2, [sp, #16]
 800721c:	b9d8      	cbnz	r0, 8007256 <_svfiprintf_r+0xea>
 800721e:	06d0      	lsls	r0, r2, #27
 8007220:	bf44      	itt	mi
 8007222:	2320      	movmi	r3, #32
 8007224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007228:	0711      	lsls	r1, r2, #28
 800722a:	bf44      	itt	mi
 800722c:	232b      	movmi	r3, #43	@ 0x2b
 800722e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007232:	f89a 3000 	ldrb.w	r3, [sl]
 8007236:	2b2a      	cmp	r3, #42	@ 0x2a
 8007238:	d015      	beq.n	8007266 <_svfiprintf_r+0xfa>
 800723a:	9a07      	ldr	r2, [sp, #28]
 800723c:	4654      	mov	r4, sl
 800723e:	2000      	movs	r0, #0
 8007240:	f04f 0c0a 	mov.w	ip, #10
 8007244:	4621      	mov	r1, r4
 8007246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800724a:	3b30      	subs	r3, #48	@ 0x30
 800724c:	2b09      	cmp	r3, #9
 800724e:	d94b      	bls.n	80072e8 <_svfiprintf_r+0x17c>
 8007250:	b1b0      	cbz	r0, 8007280 <_svfiprintf_r+0x114>
 8007252:	9207      	str	r2, [sp, #28]
 8007254:	e014      	b.n	8007280 <_svfiprintf_r+0x114>
 8007256:	eba0 0308 	sub.w	r3, r0, r8
 800725a:	fa09 f303 	lsl.w	r3, r9, r3
 800725e:	4313      	orrs	r3, r2
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	46a2      	mov	sl, r4
 8007264:	e7d2      	b.n	800720c <_svfiprintf_r+0xa0>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	1d19      	adds	r1, r3, #4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	9103      	str	r1, [sp, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	bfbb      	ittet	lt
 8007272:	425b      	neglt	r3, r3
 8007274:	f042 0202 	orrlt.w	r2, r2, #2
 8007278:	9307      	strge	r3, [sp, #28]
 800727a:	9307      	strlt	r3, [sp, #28]
 800727c:	bfb8      	it	lt
 800727e:	9204      	strlt	r2, [sp, #16]
 8007280:	7823      	ldrb	r3, [r4, #0]
 8007282:	2b2e      	cmp	r3, #46	@ 0x2e
 8007284:	d10a      	bne.n	800729c <_svfiprintf_r+0x130>
 8007286:	7863      	ldrb	r3, [r4, #1]
 8007288:	2b2a      	cmp	r3, #42	@ 0x2a
 800728a:	d132      	bne.n	80072f2 <_svfiprintf_r+0x186>
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	1d1a      	adds	r2, r3, #4
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	9203      	str	r2, [sp, #12]
 8007294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007298:	3402      	adds	r4, #2
 800729a:	9305      	str	r3, [sp, #20]
 800729c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007360 <_svfiprintf_r+0x1f4>
 80072a0:	7821      	ldrb	r1, [r4, #0]
 80072a2:	2203      	movs	r2, #3
 80072a4:	4650      	mov	r0, sl
 80072a6:	f7f8 ff9b 	bl	80001e0 <memchr>
 80072aa:	b138      	cbz	r0, 80072bc <_svfiprintf_r+0x150>
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	eba0 000a 	sub.w	r0, r0, sl
 80072b2:	2240      	movs	r2, #64	@ 0x40
 80072b4:	4082      	lsls	r2, r0
 80072b6:	4313      	orrs	r3, r2
 80072b8:	3401      	adds	r4, #1
 80072ba:	9304      	str	r3, [sp, #16]
 80072bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c0:	4824      	ldr	r0, [pc, #144]	@ (8007354 <_svfiprintf_r+0x1e8>)
 80072c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072c6:	2206      	movs	r2, #6
 80072c8:	f7f8 ff8a 	bl	80001e0 <memchr>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d036      	beq.n	800733e <_svfiprintf_r+0x1d2>
 80072d0:	4b21      	ldr	r3, [pc, #132]	@ (8007358 <_svfiprintf_r+0x1ec>)
 80072d2:	bb1b      	cbnz	r3, 800731c <_svfiprintf_r+0x1b0>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	3307      	adds	r3, #7
 80072d8:	f023 0307 	bic.w	r3, r3, #7
 80072dc:	3308      	adds	r3, #8
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e2:	4433      	add	r3, r6
 80072e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e6:	e76a      	b.n	80071be <_svfiprintf_r+0x52>
 80072e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ec:	460c      	mov	r4, r1
 80072ee:	2001      	movs	r0, #1
 80072f0:	e7a8      	b.n	8007244 <_svfiprintf_r+0xd8>
 80072f2:	2300      	movs	r3, #0
 80072f4:	3401      	adds	r4, #1
 80072f6:	9305      	str	r3, [sp, #20]
 80072f8:	4619      	mov	r1, r3
 80072fa:	f04f 0c0a 	mov.w	ip, #10
 80072fe:	4620      	mov	r0, r4
 8007300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007304:	3a30      	subs	r2, #48	@ 0x30
 8007306:	2a09      	cmp	r2, #9
 8007308:	d903      	bls.n	8007312 <_svfiprintf_r+0x1a6>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0c6      	beq.n	800729c <_svfiprintf_r+0x130>
 800730e:	9105      	str	r1, [sp, #20]
 8007310:	e7c4      	b.n	800729c <_svfiprintf_r+0x130>
 8007312:	fb0c 2101 	mla	r1, ip, r1, r2
 8007316:	4604      	mov	r4, r0
 8007318:	2301      	movs	r3, #1
 800731a:	e7f0      	b.n	80072fe <_svfiprintf_r+0x192>
 800731c:	ab03      	add	r3, sp, #12
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	462a      	mov	r2, r5
 8007322:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <_svfiprintf_r+0x1f0>)
 8007324:	a904      	add	r1, sp, #16
 8007326:	4638      	mov	r0, r7
 8007328:	f7fd fe82 	bl	8005030 <_printf_float>
 800732c:	1c42      	adds	r2, r0, #1
 800732e:	4606      	mov	r6, r0
 8007330:	d1d6      	bne.n	80072e0 <_svfiprintf_r+0x174>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	065b      	lsls	r3, r3, #25
 8007336:	f53f af2d 	bmi.w	8007194 <_svfiprintf_r+0x28>
 800733a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800733c:	e72c      	b.n	8007198 <_svfiprintf_r+0x2c>
 800733e:	ab03      	add	r3, sp, #12
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	462a      	mov	r2, r5
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <_svfiprintf_r+0x1f0>)
 8007346:	a904      	add	r1, sp, #16
 8007348:	4638      	mov	r0, r7
 800734a:	f7fe f909 	bl	8005560 <_printf_i>
 800734e:	e7ed      	b.n	800732c <_svfiprintf_r+0x1c0>
 8007350:	08007e28 	.word	0x08007e28
 8007354:	08007e32 	.word	0x08007e32
 8007358:	08005031 	.word	0x08005031
 800735c:	080070b5 	.word	0x080070b5
 8007360:	08007e2e 	.word	0x08007e2e

08007364 <__sflush_r>:
 8007364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736c:	0716      	lsls	r6, r2, #28
 800736e:	4605      	mov	r5, r0
 8007370:	460c      	mov	r4, r1
 8007372:	d454      	bmi.n	800741e <__sflush_r+0xba>
 8007374:	684b      	ldr	r3, [r1, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	dc02      	bgt.n	8007380 <__sflush_r+0x1c>
 800737a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	dd48      	ble.n	8007412 <__sflush_r+0xae>
 8007380:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007382:	2e00      	cmp	r6, #0
 8007384:	d045      	beq.n	8007412 <__sflush_r+0xae>
 8007386:	2300      	movs	r3, #0
 8007388:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800738c:	682f      	ldr	r7, [r5, #0]
 800738e:	6a21      	ldr	r1, [r4, #32]
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	d030      	beq.n	80073f6 <__sflush_r+0x92>
 8007394:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	0759      	lsls	r1, r3, #29
 800739a:	d505      	bpl.n	80073a8 <__sflush_r+0x44>
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073a2:	b10b      	cbz	r3, 80073a8 <__sflush_r+0x44>
 80073a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073ac:	6a21      	ldr	r1, [r4, #32]
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b0      	blx	r6
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	d106      	bne.n	80073c6 <__sflush_r+0x62>
 80073b8:	6829      	ldr	r1, [r5, #0]
 80073ba:	291d      	cmp	r1, #29
 80073bc:	d82b      	bhi.n	8007416 <__sflush_r+0xb2>
 80073be:	4a2a      	ldr	r2, [pc, #168]	@ (8007468 <__sflush_r+0x104>)
 80073c0:	410a      	asrs	r2, r1
 80073c2:	07d6      	lsls	r6, r2, #31
 80073c4:	d427      	bmi.n	8007416 <__sflush_r+0xb2>
 80073c6:	2200      	movs	r2, #0
 80073c8:	6062      	str	r2, [r4, #4]
 80073ca:	04d9      	lsls	r1, r3, #19
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	6022      	str	r2, [r4, #0]
 80073d0:	d504      	bpl.n	80073dc <__sflush_r+0x78>
 80073d2:	1c42      	adds	r2, r0, #1
 80073d4:	d101      	bne.n	80073da <__sflush_r+0x76>
 80073d6:	682b      	ldr	r3, [r5, #0]
 80073d8:	b903      	cbnz	r3, 80073dc <__sflush_r+0x78>
 80073da:	6560      	str	r0, [r4, #84]	@ 0x54
 80073dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073de:	602f      	str	r7, [r5, #0]
 80073e0:	b1b9      	cbz	r1, 8007412 <__sflush_r+0xae>
 80073e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073e6:	4299      	cmp	r1, r3
 80073e8:	d002      	beq.n	80073f0 <__sflush_r+0x8c>
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7ff f9e0 	bl	80067b0 <_free_r>
 80073f0:	2300      	movs	r3, #0
 80073f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80073f4:	e00d      	b.n	8007412 <__sflush_r+0xae>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b0      	blx	r6
 80073fc:	4602      	mov	r2, r0
 80073fe:	1c50      	adds	r0, r2, #1
 8007400:	d1c9      	bne.n	8007396 <__sflush_r+0x32>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0c6      	beq.n	8007396 <__sflush_r+0x32>
 8007408:	2b1d      	cmp	r3, #29
 800740a:	d001      	beq.n	8007410 <__sflush_r+0xac>
 800740c:	2b16      	cmp	r3, #22
 800740e:	d11e      	bne.n	800744e <__sflush_r+0xea>
 8007410:	602f      	str	r7, [r5, #0]
 8007412:	2000      	movs	r0, #0
 8007414:	e022      	b.n	800745c <__sflush_r+0xf8>
 8007416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800741a:	b21b      	sxth	r3, r3
 800741c:	e01b      	b.n	8007456 <__sflush_r+0xf2>
 800741e:	690f      	ldr	r7, [r1, #16]
 8007420:	2f00      	cmp	r7, #0
 8007422:	d0f6      	beq.n	8007412 <__sflush_r+0xae>
 8007424:	0793      	lsls	r3, r2, #30
 8007426:	680e      	ldr	r6, [r1, #0]
 8007428:	bf08      	it	eq
 800742a:	694b      	ldreq	r3, [r1, #20]
 800742c:	600f      	str	r7, [r1, #0]
 800742e:	bf18      	it	ne
 8007430:	2300      	movne	r3, #0
 8007432:	eba6 0807 	sub.w	r8, r6, r7
 8007436:	608b      	str	r3, [r1, #8]
 8007438:	f1b8 0f00 	cmp.w	r8, #0
 800743c:	dde9      	ble.n	8007412 <__sflush_r+0xae>
 800743e:	6a21      	ldr	r1, [r4, #32]
 8007440:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007442:	4643      	mov	r3, r8
 8007444:	463a      	mov	r2, r7
 8007446:	4628      	mov	r0, r5
 8007448:	47b0      	blx	r6
 800744a:	2800      	cmp	r0, #0
 800744c:	dc08      	bgt.n	8007460 <__sflush_r+0xfc>
 800744e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007460:	4407      	add	r7, r0
 8007462:	eba8 0800 	sub.w	r8, r8, r0
 8007466:	e7e7      	b.n	8007438 <__sflush_r+0xd4>
 8007468:	dfbffffe 	.word	0xdfbffffe

0800746c <_fflush_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	4605      	mov	r5, r0
 8007472:	460c      	mov	r4, r1
 8007474:	b913      	cbnz	r3, 800747c <_fflush_r+0x10>
 8007476:	2500      	movs	r5, #0
 8007478:	4628      	mov	r0, r5
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	b118      	cbz	r0, 8007486 <_fflush_r+0x1a>
 800747e:	6a03      	ldr	r3, [r0, #32]
 8007480:	b90b      	cbnz	r3, 8007486 <_fflush_r+0x1a>
 8007482:	f7fe fa19 	bl	80058b8 <__sinit>
 8007486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0f3      	beq.n	8007476 <_fflush_r+0xa>
 800748e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007490:	07d0      	lsls	r0, r2, #31
 8007492:	d404      	bmi.n	800749e <_fflush_r+0x32>
 8007494:	0599      	lsls	r1, r3, #22
 8007496:	d402      	bmi.n	800749e <_fflush_r+0x32>
 8007498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800749a:	f7fe fb38 	bl	8005b0e <__retarget_lock_acquire_recursive>
 800749e:	4628      	mov	r0, r5
 80074a0:	4621      	mov	r1, r4
 80074a2:	f7ff ff5f 	bl	8007364 <__sflush_r>
 80074a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074a8:	07da      	lsls	r2, r3, #31
 80074aa:	4605      	mov	r5, r0
 80074ac:	d4e4      	bmi.n	8007478 <_fflush_r+0xc>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	059b      	lsls	r3, r3, #22
 80074b2:	d4e1      	bmi.n	8007478 <_fflush_r+0xc>
 80074b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074b6:	f7fe fb2b 	bl	8005b10 <__retarget_lock_release_recursive>
 80074ba:	e7dd      	b.n	8007478 <_fflush_r+0xc>

080074bc <memmove>:
 80074bc:	4288      	cmp	r0, r1
 80074be:	b510      	push	{r4, lr}
 80074c0:	eb01 0402 	add.w	r4, r1, r2
 80074c4:	d902      	bls.n	80074cc <memmove+0x10>
 80074c6:	4284      	cmp	r4, r0
 80074c8:	4623      	mov	r3, r4
 80074ca:	d807      	bhi.n	80074dc <memmove+0x20>
 80074cc:	1e43      	subs	r3, r0, #1
 80074ce:	42a1      	cmp	r1, r4
 80074d0:	d008      	beq.n	80074e4 <memmove+0x28>
 80074d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074da:	e7f8      	b.n	80074ce <memmove+0x12>
 80074dc:	4402      	add	r2, r0
 80074de:	4601      	mov	r1, r0
 80074e0:	428a      	cmp	r2, r1
 80074e2:	d100      	bne.n	80074e6 <memmove+0x2a>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ee:	e7f7      	b.n	80074e0 <memmove+0x24>

080074f0 <_sbrk_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4d06      	ldr	r5, [pc, #24]	@ (800750c <_sbrk_r+0x1c>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	602b      	str	r3, [r5, #0]
 80074fc:	f7fa f848 	bl	8001590 <_sbrk>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_sbrk_r+0x1a>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_sbrk_r+0x1a>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	2000049c 	.word	0x2000049c

08007510 <memcpy>:
 8007510:	440a      	add	r2, r1
 8007512:	4291      	cmp	r1, r2
 8007514:	f100 33ff 	add.w	r3, r0, #4294967295
 8007518:	d100      	bne.n	800751c <memcpy+0xc>
 800751a:	4770      	bx	lr
 800751c:	b510      	push	{r4, lr}
 800751e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007526:	4291      	cmp	r1, r2
 8007528:	d1f9      	bne.n	800751e <memcpy+0xe>
 800752a:	bd10      	pop	{r4, pc}

0800752c <__assert_func>:
 800752c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800752e:	4614      	mov	r4, r2
 8007530:	461a      	mov	r2, r3
 8007532:	4b09      	ldr	r3, [pc, #36]	@ (8007558 <__assert_func+0x2c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4605      	mov	r5, r0
 8007538:	68d8      	ldr	r0, [r3, #12]
 800753a:	b954      	cbnz	r4, 8007552 <__assert_func+0x26>
 800753c:	4b07      	ldr	r3, [pc, #28]	@ (800755c <__assert_func+0x30>)
 800753e:	461c      	mov	r4, r3
 8007540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007544:	9100      	str	r1, [sp, #0]
 8007546:	462b      	mov	r3, r5
 8007548:	4905      	ldr	r1, [pc, #20]	@ (8007560 <__assert_func+0x34>)
 800754a:	f000 f86f 	bl	800762c <fiprintf>
 800754e:	f000 f87f 	bl	8007650 <abort>
 8007552:	4b04      	ldr	r3, [pc, #16]	@ (8007564 <__assert_func+0x38>)
 8007554:	e7f4      	b.n	8007540 <__assert_func+0x14>
 8007556:	bf00      	nop
 8007558:	2000001c 	.word	0x2000001c
 800755c:	08007e7e 	.word	0x08007e7e
 8007560:	08007e50 	.word	0x08007e50
 8007564:	08007e43 	.word	0x08007e43

08007568 <_calloc_r>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	fba1 5402 	umull	r5, r4, r1, r2
 800756e:	b93c      	cbnz	r4, 8007580 <_calloc_r+0x18>
 8007570:	4629      	mov	r1, r5
 8007572:	f7ff f991 	bl	8006898 <_malloc_r>
 8007576:	4606      	mov	r6, r0
 8007578:	b928      	cbnz	r0, 8007586 <_calloc_r+0x1e>
 800757a:	2600      	movs	r6, #0
 800757c:	4630      	mov	r0, r6
 800757e:	bd70      	pop	{r4, r5, r6, pc}
 8007580:	220c      	movs	r2, #12
 8007582:	6002      	str	r2, [r0, #0]
 8007584:	e7f9      	b.n	800757a <_calloc_r+0x12>
 8007586:	462a      	mov	r2, r5
 8007588:	4621      	mov	r1, r4
 800758a:	f7fe fa42 	bl	8005a12 <memset>
 800758e:	e7f5      	b.n	800757c <_calloc_r+0x14>

08007590 <__ascii_mbtowc>:
 8007590:	b082      	sub	sp, #8
 8007592:	b901      	cbnz	r1, 8007596 <__ascii_mbtowc+0x6>
 8007594:	a901      	add	r1, sp, #4
 8007596:	b142      	cbz	r2, 80075aa <__ascii_mbtowc+0x1a>
 8007598:	b14b      	cbz	r3, 80075ae <__ascii_mbtowc+0x1e>
 800759a:	7813      	ldrb	r3, [r2, #0]
 800759c:	600b      	str	r3, [r1, #0]
 800759e:	7812      	ldrb	r2, [r2, #0]
 80075a0:	1e10      	subs	r0, r2, #0
 80075a2:	bf18      	it	ne
 80075a4:	2001      	movne	r0, #1
 80075a6:	b002      	add	sp, #8
 80075a8:	4770      	bx	lr
 80075aa:	4610      	mov	r0, r2
 80075ac:	e7fb      	b.n	80075a6 <__ascii_mbtowc+0x16>
 80075ae:	f06f 0001 	mvn.w	r0, #1
 80075b2:	e7f8      	b.n	80075a6 <__ascii_mbtowc+0x16>

080075b4 <_realloc_r>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	4680      	mov	r8, r0
 80075ba:	4615      	mov	r5, r2
 80075bc:	460c      	mov	r4, r1
 80075be:	b921      	cbnz	r1, 80075ca <_realloc_r+0x16>
 80075c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c4:	4611      	mov	r1, r2
 80075c6:	f7ff b967 	b.w	8006898 <_malloc_r>
 80075ca:	b92a      	cbnz	r2, 80075d8 <_realloc_r+0x24>
 80075cc:	f7ff f8f0 	bl	80067b0 <_free_r>
 80075d0:	2400      	movs	r4, #0
 80075d2:	4620      	mov	r0, r4
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d8:	f000 f841 	bl	800765e <_malloc_usable_size_r>
 80075dc:	4285      	cmp	r5, r0
 80075de:	4606      	mov	r6, r0
 80075e0:	d802      	bhi.n	80075e8 <_realloc_r+0x34>
 80075e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075e6:	d8f4      	bhi.n	80075d2 <_realloc_r+0x1e>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4640      	mov	r0, r8
 80075ec:	f7ff f954 	bl	8006898 <_malloc_r>
 80075f0:	4607      	mov	r7, r0
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d0ec      	beq.n	80075d0 <_realloc_r+0x1c>
 80075f6:	42b5      	cmp	r5, r6
 80075f8:	462a      	mov	r2, r5
 80075fa:	4621      	mov	r1, r4
 80075fc:	bf28      	it	cs
 80075fe:	4632      	movcs	r2, r6
 8007600:	f7ff ff86 	bl	8007510 <memcpy>
 8007604:	4621      	mov	r1, r4
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff f8d2 	bl	80067b0 <_free_r>
 800760c:	463c      	mov	r4, r7
 800760e:	e7e0      	b.n	80075d2 <_realloc_r+0x1e>

08007610 <__ascii_wctomb>:
 8007610:	4603      	mov	r3, r0
 8007612:	4608      	mov	r0, r1
 8007614:	b141      	cbz	r1, 8007628 <__ascii_wctomb+0x18>
 8007616:	2aff      	cmp	r2, #255	@ 0xff
 8007618:	d904      	bls.n	8007624 <__ascii_wctomb+0x14>
 800761a:	228a      	movs	r2, #138	@ 0x8a
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	4770      	bx	lr
 8007624:	700a      	strb	r2, [r1, #0]
 8007626:	2001      	movs	r0, #1
 8007628:	4770      	bx	lr
	...

0800762c <fiprintf>:
 800762c:	b40e      	push	{r1, r2, r3}
 800762e:	b503      	push	{r0, r1, lr}
 8007630:	4601      	mov	r1, r0
 8007632:	ab03      	add	r3, sp, #12
 8007634:	4805      	ldr	r0, [pc, #20]	@ (800764c <fiprintf+0x20>)
 8007636:	f853 2b04 	ldr.w	r2, [r3], #4
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	f000 f83f 	bl	80076c0 <_vfiprintf_r>
 8007642:	b002      	add	sp, #8
 8007644:	f85d eb04 	ldr.w	lr, [sp], #4
 8007648:	b003      	add	sp, #12
 800764a:	4770      	bx	lr
 800764c:	2000001c 	.word	0x2000001c

08007650 <abort>:
 8007650:	b508      	push	{r3, lr}
 8007652:	2006      	movs	r0, #6
 8007654:	f000 fa08 	bl	8007a68 <raise>
 8007658:	2001      	movs	r0, #1
 800765a:	f7f9 ff21 	bl	80014a0 <_exit>

0800765e <_malloc_usable_size_r>:
 800765e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007662:	1f18      	subs	r0, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	bfbc      	itt	lt
 8007668:	580b      	ldrlt	r3, [r1, r0]
 800766a:	18c0      	addlt	r0, r0, r3
 800766c:	4770      	bx	lr

0800766e <__sfputc_r>:
 800766e:	6893      	ldr	r3, [r2, #8]
 8007670:	3b01      	subs	r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	b410      	push	{r4}
 8007676:	6093      	str	r3, [r2, #8]
 8007678:	da08      	bge.n	800768c <__sfputc_r+0x1e>
 800767a:	6994      	ldr	r4, [r2, #24]
 800767c:	42a3      	cmp	r3, r4
 800767e:	db01      	blt.n	8007684 <__sfputc_r+0x16>
 8007680:	290a      	cmp	r1, #10
 8007682:	d103      	bne.n	800768c <__sfputc_r+0x1e>
 8007684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007688:	f000 b932 	b.w	80078f0 <__swbuf_r>
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	1c58      	adds	r0, r3, #1
 8007690:	6010      	str	r0, [r2, #0]
 8007692:	7019      	strb	r1, [r3, #0]
 8007694:	4608      	mov	r0, r1
 8007696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800769a:	4770      	bx	lr

0800769c <__sfputs_r>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	4606      	mov	r6, r0
 80076a0:	460f      	mov	r7, r1
 80076a2:	4614      	mov	r4, r2
 80076a4:	18d5      	adds	r5, r2, r3
 80076a6:	42ac      	cmp	r4, r5
 80076a8:	d101      	bne.n	80076ae <__sfputs_r+0x12>
 80076aa:	2000      	movs	r0, #0
 80076ac:	e007      	b.n	80076be <__sfputs_r+0x22>
 80076ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b2:	463a      	mov	r2, r7
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7ff ffda 	bl	800766e <__sfputc_r>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d1f3      	bne.n	80076a6 <__sfputs_r+0xa>
 80076be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076c0 <_vfiprintf_r>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	460d      	mov	r5, r1
 80076c6:	b09d      	sub	sp, #116	@ 0x74
 80076c8:	4614      	mov	r4, r2
 80076ca:	4698      	mov	r8, r3
 80076cc:	4606      	mov	r6, r0
 80076ce:	b118      	cbz	r0, 80076d8 <_vfiprintf_r+0x18>
 80076d0:	6a03      	ldr	r3, [r0, #32]
 80076d2:	b90b      	cbnz	r3, 80076d8 <_vfiprintf_r+0x18>
 80076d4:	f7fe f8f0 	bl	80058b8 <__sinit>
 80076d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076da:	07d9      	lsls	r1, r3, #31
 80076dc:	d405      	bmi.n	80076ea <_vfiprintf_r+0x2a>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	059a      	lsls	r2, r3, #22
 80076e2:	d402      	bmi.n	80076ea <_vfiprintf_r+0x2a>
 80076e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076e6:	f7fe fa12 	bl	8005b0e <__retarget_lock_acquire_recursive>
 80076ea:	89ab      	ldrh	r3, [r5, #12]
 80076ec:	071b      	lsls	r3, r3, #28
 80076ee:	d501      	bpl.n	80076f4 <_vfiprintf_r+0x34>
 80076f0:	692b      	ldr	r3, [r5, #16]
 80076f2:	b99b      	cbnz	r3, 800771c <_vfiprintf_r+0x5c>
 80076f4:	4629      	mov	r1, r5
 80076f6:	4630      	mov	r0, r6
 80076f8:	f000 f938 	bl	800796c <__swsetup_r>
 80076fc:	b170      	cbz	r0, 800771c <_vfiprintf_r+0x5c>
 80076fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007700:	07dc      	lsls	r4, r3, #31
 8007702:	d504      	bpl.n	800770e <_vfiprintf_r+0x4e>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	b01d      	add	sp, #116	@ 0x74
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	0598      	lsls	r0, r3, #22
 8007712:	d4f7      	bmi.n	8007704 <_vfiprintf_r+0x44>
 8007714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007716:	f7fe f9fb 	bl	8005b10 <__retarget_lock_release_recursive>
 800771a:	e7f3      	b.n	8007704 <_vfiprintf_r+0x44>
 800771c:	2300      	movs	r3, #0
 800771e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007720:	2320      	movs	r3, #32
 8007722:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007726:	f8cd 800c 	str.w	r8, [sp, #12]
 800772a:	2330      	movs	r3, #48	@ 0x30
 800772c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078dc <_vfiprintf_r+0x21c>
 8007730:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007734:	f04f 0901 	mov.w	r9, #1
 8007738:	4623      	mov	r3, r4
 800773a:	469a      	mov	sl, r3
 800773c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007740:	b10a      	cbz	r2, 8007746 <_vfiprintf_r+0x86>
 8007742:	2a25      	cmp	r2, #37	@ 0x25
 8007744:	d1f9      	bne.n	800773a <_vfiprintf_r+0x7a>
 8007746:	ebba 0b04 	subs.w	fp, sl, r4
 800774a:	d00b      	beq.n	8007764 <_vfiprintf_r+0xa4>
 800774c:	465b      	mov	r3, fp
 800774e:	4622      	mov	r2, r4
 8007750:	4629      	mov	r1, r5
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ffa2 	bl	800769c <__sfputs_r>
 8007758:	3001      	adds	r0, #1
 800775a:	f000 80a7 	beq.w	80078ac <_vfiprintf_r+0x1ec>
 800775e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007760:	445a      	add	r2, fp
 8007762:	9209      	str	r2, [sp, #36]	@ 0x24
 8007764:	f89a 3000 	ldrb.w	r3, [sl]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 809f 	beq.w	80078ac <_vfiprintf_r+0x1ec>
 800776e:	2300      	movs	r3, #0
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007778:	f10a 0a01 	add.w	sl, sl, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007784:	931a      	str	r3, [sp, #104]	@ 0x68
 8007786:	4654      	mov	r4, sl
 8007788:	2205      	movs	r2, #5
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	4853      	ldr	r0, [pc, #332]	@ (80078dc <_vfiprintf_r+0x21c>)
 8007790:	f7f8 fd26 	bl	80001e0 <memchr>
 8007794:	9a04      	ldr	r2, [sp, #16]
 8007796:	b9d8      	cbnz	r0, 80077d0 <_vfiprintf_r+0x110>
 8007798:	06d1      	lsls	r1, r2, #27
 800779a:	bf44      	itt	mi
 800779c:	2320      	movmi	r3, #32
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a2:	0713      	lsls	r3, r2, #28
 80077a4:	bf44      	itt	mi
 80077a6:	232b      	movmi	r3, #43	@ 0x2b
 80077a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077ac:	f89a 3000 	ldrb.w	r3, [sl]
 80077b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b2:	d015      	beq.n	80077e0 <_vfiprintf_r+0x120>
 80077b4:	9a07      	ldr	r2, [sp, #28]
 80077b6:	4654      	mov	r4, sl
 80077b8:	2000      	movs	r0, #0
 80077ba:	f04f 0c0a 	mov.w	ip, #10
 80077be:	4621      	mov	r1, r4
 80077c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c4:	3b30      	subs	r3, #48	@ 0x30
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d94b      	bls.n	8007862 <_vfiprintf_r+0x1a2>
 80077ca:	b1b0      	cbz	r0, 80077fa <_vfiprintf_r+0x13a>
 80077cc:	9207      	str	r2, [sp, #28]
 80077ce:	e014      	b.n	80077fa <_vfiprintf_r+0x13a>
 80077d0:	eba0 0308 	sub.w	r3, r0, r8
 80077d4:	fa09 f303 	lsl.w	r3, r9, r3
 80077d8:	4313      	orrs	r3, r2
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	46a2      	mov	sl, r4
 80077de:	e7d2      	b.n	8007786 <_vfiprintf_r+0xc6>
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	1d19      	adds	r1, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	9103      	str	r1, [sp, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbb      	ittet	lt
 80077ec:	425b      	neglt	r3, r3
 80077ee:	f042 0202 	orrlt.w	r2, r2, #2
 80077f2:	9307      	strge	r3, [sp, #28]
 80077f4:	9307      	strlt	r3, [sp, #28]
 80077f6:	bfb8      	it	lt
 80077f8:	9204      	strlt	r2, [sp, #16]
 80077fa:	7823      	ldrb	r3, [r4, #0]
 80077fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80077fe:	d10a      	bne.n	8007816 <_vfiprintf_r+0x156>
 8007800:	7863      	ldrb	r3, [r4, #1]
 8007802:	2b2a      	cmp	r3, #42	@ 0x2a
 8007804:	d132      	bne.n	800786c <_vfiprintf_r+0x1ac>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9203      	str	r2, [sp, #12]
 800780e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007812:	3402      	adds	r4, #2
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078ec <_vfiprintf_r+0x22c>
 800781a:	7821      	ldrb	r1, [r4, #0]
 800781c:	2203      	movs	r2, #3
 800781e:	4650      	mov	r0, sl
 8007820:	f7f8 fcde 	bl	80001e0 <memchr>
 8007824:	b138      	cbz	r0, 8007836 <_vfiprintf_r+0x176>
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	eba0 000a 	sub.w	r0, r0, sl
 800782c:	2240      	movs	r2, #64	@ 0x40
 800782e:	4082      	lsls	r2, r0
 8007830:	4313      	orrs	r3, r2
 8007832:	3401      	adds	r4, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783a:	4829      	ldr	r0, [pc, #164]	@ (80078e0 <_vfiprintf_r+0x220>)
 800783c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007840:	2206      	movs	r2, #6
 8007842:	f7f8 fccd 	bl	80001e0 <memchr>
 8007846:	2800      	cmp	r0, #0
 8007848:	d03f      	beq.n	80078ca <_vfiprintf_r+0x20a>
 800784a:	4b26      	ldr	r3, [pc, #152]	@ (80078e4 <_vfiprintf_r+0x224>)
 800784c:	bb1b      	cbnz	r3, 8007896 <_vfiprintf_r+0x1d6>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	3308      	adds	r3, #8
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785c:	443b      	add	r3, r7
 800785e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007860:	e76a      	b.n	8007738 <_vfiprintf_r+0x78>
 8007862:	fb0c 3202 	mla	r2, ip, r2, r3
 8007866:	460c      	mov	r4, r1
 8007868:	2001      	movs	r0, #1
 800786a:	e7a8      	b.n	80077be <_vfiprintf_r+0xfe>
 800786c:	2300      	movs	r3, #0
 800786e:	3401      	adds	r4, #1
 8007870:	9305      	str	r3, [sp, #20]
 8007872:	4619      	mov	r1, r3
 8007874:	f04f 0c0a 	mov.w	ip, #10
 8007878:	4620      	mov	r0, r4
 800787a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787e:	3a30      	subs	r2, #48	@ 0x30
 8007880:	2a09      	cmp	r2, #9
 8007882:	d903      	bls.n	800788c <_vfiprintf_r+0x1cc>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0c6      	beq.n	8007816 <_vfiprintf_r+0x156>
 8007888:	9105      	str	r1, [sp, #20]
 800788a:	e7c4      	b.n	8007816 <_vfiprintf_r+0x156>
 800788c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007890:	4604      	mov	r4, r0
 8007892:	2301      	movs	r3, #1
 8007894:	e7f0      	b.n	8007878 <_vfiprintf_r+0x1b8>
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	462a      	mov	r2, r5
 800789c:	4b12      	ldr	r3, [pc, #72]	@ (80078e8 <_vfiprintf_r+0x228>)
 800789e:	a904      	add	r1, sp, #16
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7fd fbc5 	bl	8005030 <_printf_float>
 80078a6:	4607      	mov	r7, r0
 80078a8:	1c78      	adds	r0, r7, #1
 80078aa:	d1d6      	bne.n	800785a <_vfiprintf_r+0x19a>
 80078ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	d405      	bmi.n	80078be <_vfiprintf_r+0x1fe>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	059a      	lsls	r2, r3, #22
 80078b6:	d402      	bmi.n	80078be <_vfiprintf_r+0x1fe>
 80078b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ba:	f7fe f929 	bl	8005b10 <__retarget_lock_release_recursive>
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	065b      	lsls	r3, r3, #25
 80078c2:	f53f af1f 	bmi.w	8007704 <_vfiprintf_r+0x44>
 80078c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078c8:	e71e      	b.n	8007708 <_vfiprintf_r+0x48>
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	462a      	mov	r2, r5
 80078d0:	4b05      	ldr	r3, [pc, #20]	@ (80078e8 <_vfiprintf_r+0x228>)
 80078d2:	a904      	add	r1, sp, #16
 80078d4:	4630      	mov	r0, r6
 80078d6:	f7fd fe43 	bl	8005560 <_printf_i>
 80078da:	e7e4      	b.n	80078a6 <_vfiprintf_r+0x1e6>
 80078dc:	08007e28 	.word	0x08007e28
 80078e0:	08007e32 	.word	0x08007e32
 80078e4:	08005031 	.word	0x08005031
 80078e8:	0800769d 	.word	0x0800769d
 80078ec:	08007e2e 	.word	0x08007e2e

080078f0 <__swbuf_r>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	460e      	mov	r6, r1
 80078f4:	4614      	mov	r4, r2
 80078f6:	4605      	mov	r5, r0
 80078f8:	b118      	cbz	r0, 8007902 <__swbuf_r+0x12>
 80078fa:	6a03      	ldr	r3, [r0, #32]
 80078fc:	b90b      	cbnz	r3, 8007902 <__swbuf_r+0x12>
 80078fe:	f7fd ffdb 	bl	80058b8 <__sinit>
 8007902:	69a3      	ldr	r3, [r4, #24]
 8007904:	60a3      	str	r3, [r4, #8]
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	071a      	lsls	r2, r3, #28
 800790a:	d501      	bpl.n	8007910 <__swbuf_r+0x20>
 800790c:	6923      	ldr	r3, [r4, #16]
 800790e:	b943      	cbnz	r3, 8007922 <__swbuf_r+0x32>
 8007910:	4621      	mov	r1, r4
 8007912:	4628      	mov	r0, r5
 8007914:	f000 f82a 	bl	800796c <__swsetup_r>
 8007918:	b118      	cbz	r0, 8007922 <__swbuf_r+0x32>
 800791a:	f04f 37ff 	mov.w	r7, #4294967295
 800791e:	4638      	mov	r0, r7
 8007920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	6922      	ldr	r2, [r4, #16]
 8007926:	1a98      	subs	r0, r3, r2
 8007928:	6963      	ldr	r3, [r4, #20]
 800792a:	b2f6      	uxtb	r6, r6
 800792c:	4283      	cmp	r3, r0
 800792e:	4637      	mov	r7, r6
 8007930:	dc05      	bgt.n	800793e <__swbuf_r+0x4e>
 8007932:	4621      	mov	r1, r4
 8007934:	4628      	mov	r0, r5
 8007936:	f7ff fd99 	bl	800746c <_fflush_r>
 800793a:	2800      	cmp	r0, #0
 800793c:	d1ed      	bne.n	800791a <__swbuf_r+0x2a>
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	3b01      	subs	r3, #1
 8007942:	60a3      	str	r3, [r4, #8]
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	6022      	str	r2, [r4, #0]
 800794a:	701e      	strb	r6, [r3, #0]
 800794c:	6962      	ldr	r2, [r4, #20]
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	429a      	cmp	r2, r3
 8007952:	d004      	beq.n	800795e <__swbuf_r+0x6e>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	07db      	lsls	r3, r3, #31
 8007958:	d5e1      	bpl.n	800791e <__swbuf_r+0x2e>
 800795a:	2e0a      	cmp	r6, #10
 800795c:	d1df      	bne.n	800791e <__swbuf_r+0x2e>
 800795e:	4621      	mov	r1, r4
 8007960:	4628      	mov	r0, r5
 8007962:	f7ff fd83 	bl	800746c <_fflush_r>
 8007966:	2800      	cmp	r0, #0
 8007968:	d0d9      	beq.n	800791e <__swbuf_r+0x2e>
 800796a:	e7d6      	b.n	800791a <__swbuf_r+0x2a>

0800796c <__swsetup_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4b29      	ldr	r3, [pc, #164]	@ (8007a14 <__swsetup_r+0xa8>)
 8007970:	4605      	mov	r5, r0
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	460c      	mov	r4, r1
 8007976:	b118      	cbz	r0, 8007980 <__swsetup_r+0x14>
 8007978:	6a03      	ldr	r3, [r0, #32]
 800797a:	b90b      	cbnz	r3, 8007980 <__swsetup_r+0x14>
 800797c:	f7fd ff9c 	bl	80058b8 <__sinit>
 8007980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007984:	0719      	lsls	r1, r3, #28
 8007986:	d422      	bmi.n	80079ce <__swsetup_r+0x62>
 8007988:	06da      	lsls	r2, r3, #27
 800798a:	d407      	bmi.n	800799c <__swsetup_r+0x30>
 800798c:	2209      	movs	r2, #9
 800798e:	602a      	str	r2, [r5, #0]
 8007990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	e033      	b.n	8007a04 <__swsetup_r+0x98>
 800799c:	0758      	lsls	r0, r3, #29
 800799e:	d512      	bpl.n	80079c6 <__swsetup_r+0x5a>
 80079a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079a2:	b141      	cbz	r1, 80079b6 <__swsetup_r+0x4a>
 80079a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d002      	beq.n	80079b2 <__swsetup_r+0x46>
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7fe feff 	bl	80067b0 <_free_r>
 80079b2:	2300      	movs	r3, #0
 80079b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	2300      	movs	r3, #0
 80079c0:	6063      	str	r3, [r4, #4]
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f043 0308 	orr.w	r3, r3, #8
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	b94b      	cbnz	r3, 80079e6 <__swsetup_r+0x7a>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079dc:	d003      	beq.n	80079e6 <__swsetup_r+0x7a>
 80079de:	4621      	mov	r1, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 f883 	bl	8007aec <__smakebuf_r>
 80079e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ea:	f013 0201 	ands.w	r2, r3, #1
 80079ee:	d00a      	beq.n	8007a06 <__swsetup_r+0x9a>
 80079f0:	2200      	movs	r2, #0
 80079f2:	60a2      	str	r2, [r4, #8]
 80079f4:	6962      	ldr	r2, [r4, #20]
 80079f6:	4252      	negs	r2, r2
 80079f8:	61a2      	str	r2, [r4, #24]
 80079fa:	6922      	ldr	r2, [r4, #16]
 80079fc:	b942      	cbnz	r2, 8007a10 <__swsetup_r+0xa4>
 80079fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a02:	d1c5      	bne.n	8007990 <__swsetup_r+0x24>
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	0799      	lsls	r1, r3, #30
 8007a08:	bf58      	it	pl
 8007a0a:	6962      	ldrpl	r2, [r4, #20]
 8007a0c:	60a2      	str	r2, [r4, #8]
 8007a0e:	e7f4      	b.n	80079fa <__swsetup_r+0x8e>
 8007a10:	2000      	movs	r0, #0
 8007a12:	e7f7      	b.n	8007a04 <__swsetup_r+0x98>
 8007a14:	2000001c 	.word	0x2000001c

08007a18 <_raise_r>:
 8007a18:	291f      	cmp	r1, #31
 8007a1a:	b538      	push	{r3, r4, r5, lr}
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	d904      	bls.n	8007a2c <_raise_r+0x14>
 8007a22:	2316      	movs	r3, #22
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a2e:	b112      	cbz	r2, 8007a36 <_raise_r+0x1e>
 8007a30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a34:	b94b      	cbnz	r3, 8007a4a <_raise_r+0x32>
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f830 	bl	8007a9c <_getpid_r>
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4601      	mov	r1, r0
 8007a40:	4628      	mov	r0, r5
 8007a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a46:	f000 b817 	b.w	8007a78 <_kill_r>
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d00a      	beq.n	8007a64 <_raise_r+0x4c>
 8007a4e:	1c59      	adds	r1, r3, #1
 8007a50:	d103      	bne.n	8007a5a <_raise_r+0x42>
 8007a52:	2316      	movs	r3, #22
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	2001      	movs	r0, #1
 8007a58:	e7e7      	b.n	8007a2a <_raise_r+0x12>
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a60:	4620      	mov	r0, r4
 8007a62:	4798      	blx	r3
 8007a64:	2000      	movs	r0, #0
 8007a66:	e7e0      	b.n	8007a2a <_raise_r+0x12>

08007a68 <raise>:
 8007a68:	4b02      	ldr	r3, [pc, #8]	@ (8007a74 <raise+0xc>)
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	6818      	ldr	r0, [r3, #0]
 8007a6e:	f7ff bfd3 	b.w	8007a18 <_raise_r>
 8007a72:	bf00      	nop
 8007a74:	2000001c 	.word	0x2000001c

08007a78 <_kill_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d07      	ldr	r5, [pc, #28]	@ (8007a98 <_kill_r+0x20>)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	f7f9 fcfb 	bl	8001480 <_kill>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	d102      	bne.n	8007a94 <_kill_r+0x1c>
 8007a8e:	682b      	ldr	r3, [r5, #0]
 8007a90:	b103      	cbz	r3, 8007a94 <_kill_r+0x1c>
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	bd38      	pop	{r3, r4, r5, pc}
 8007a96:	bf00      	nop
 8007a98:	2000049c 	.word	0x2000049c

08007a9c <_getpid_r>:
 8007a9c:	f7f9 bce8 	b.w	8001470 <_getpid>

08007aa0 <__swhatbuf_r>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	b096      	sub	sp, #88	@ 0x58
 8007aac:	4615      	mov	r5, r2
 8007aae:	461e      	mov	r6, r3
 8007ab0:	da0d      	bge.n	8007ace <__swhatbuf_r+0x2e>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	bf14      	ite	ne
 8007abe:	2340      	movne	r3, #64	@ 0x40
 8007ac0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	6031      	str	r1, [r6, #0]
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	b016      	add	sp, #88	@ 0x58
 8007acc:	bd70      	pop	{r4, r5, r6, pc}
 8007ace:	466a      	mov	r2, sp
 8007ad0:	f000 f848 	bl	8007b64 <_fstat_r>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	dbec      	blt.n	8007ab2 <__swhatbuf_r+0x12>
 8007ad8:	9901      	ldr	r1, [sp, #4]
 8007ada:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ade:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ae2:	4259      	negs	r1, r3
 8007ae4:	4159      	adcs	r1, r3
 8007ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aea:	e7eb      	b.n	8007ac4 <__swhatbuf_r+0x24>

08007aec <__smakebuf_r>:
 8007aec:	898b      	ldrh	r3, [r1, #12]
 8007aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007af0:	079d      	lsls	r5, r3, #30
 8007af2:	4606      	mov	r6, r0
 8007af4:	460c      	mov	r4, r1
 8007af6:	d507      	bpl.n	8007b08 <__smakebuf_r+0x1c>
 8007af8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	2301      	movs	r3, #1
 8007b02:	6163      	str	r3, [r4, #20]
 8007b04:	b003      	add	sp, #12
 8007b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b08:	ab01      	add	r3, sp, #4
 8007b0a:	466a      	mov	r2, sp
 8007b0c:	f7ff ffc8 	bl	8007aa0 <__swhatbuf_r>
 8007b10:	9f00      	ldr	r7, [sp, #0]
 8007b12:	4605      	mov	r5, r0
 8007b14:	4639      	mov	r1, r7
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7fe febe 	bl	8006898 <_malloc_r>
 8007b1c:	b948      	cbnz	r0, 8007b32 <__smakebuf_r+0x46>
 8007b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b22:	059a      	lsls	r2, r3, #22
 8007b24:	d4ee      	bmi.n	8007b04 <__smakebuf_r+0x18>
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	f043 0302 	orr.w	r3, r3, #2
 8007b2e:	81a3      	strh	r3, [r4, #12]
 8007b30:	e7e2      	b.n	8007af8 <__smakebuf_r+0xc>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	6020      	str	r0, [r4, #0]
 8007b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b42:	b15b      	cbz	r3, 8007b5c <__smakebuf_r+0x70>
 8007b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f000 f81d 	bl	8007b88 <_isatty_r>
 8007b4e:	b128      	cbz	r0, 8007b5c <__smakebuf_r+0x70>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	431d      	orrs	r5, r3
 8007b60:	81a5      	strh	r5, [r4, #12]
 8007b62:	e7cf      	b.n	8007b04 <__smakebuf_r+0x18>

08007b64 <_fstat_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d07      	ldr	r5, [pc, #28]	@ (8007b84 <_fstat_r+0x20>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	602b      	str	r3, [r5, #0]
 8007b72:	f7f9 fce5 	bl	8001540 <_fstat>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	d102      	bne.n	8007b80 <_fstat_r+0x1c>
 8007b7a:	682b      	ldr	r3, [r5, #0]
 8007b7c:	b103      	cbz	r3, 8007b80 <_fstat_r+0x1c>
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	bd38      	pop	{r3, r4, r5, pc}
 8007b82:	bf00      	nop
 8007b84:	2000049c 	.word	0x2000049c

08007b88 <_isatty_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4d06      	ldr	r5, [pc, #24]	@ (8007ba4 <_isatty_r+0x1c>)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	f7f9 fce4 	bl	8001560 <_isatty>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d102      	bne.n	8007ba2 <_isatty_r+0x1a>
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	b103      	cbz	r3, 8007ba2 <_isatty_r+0x1a>
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	2000049c 	.word	0x2000049c

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
