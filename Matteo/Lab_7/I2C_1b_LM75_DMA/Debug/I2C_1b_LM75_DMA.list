
I2C_1b_LM75_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b62c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800b7d0  0800b7d0  0000c7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc48  0800bc48  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc48  0800bc48  0000cc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc50  0800bc50  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc50  0800bc50  0000cc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc54  0800bc54  0000cc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bc58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001d8  0800be30  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800be30  0000d520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001044f  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219e  00000000  00000000  0001d657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c81  00000000  00000000  000207c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017571  00000000  00000000  00021449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001275d  00000000  00000000  000389ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ce2  00000000  00000000  0004b117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcdf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005950  00000000  00000000  000dce3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000e278c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7b4 	.word	0x0800b7b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b7b4 	.word	0x0800b7b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001004:	d11c      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x4c>
    // Start I2C reception using DMA
		HAL_StatusTypeDef status_rx = HAL_I2C_Master_Receive_DMA(&hi2c1, LM75_RD_ADDRESS, data, 2); //LM75A
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	2302      	movs	r3, #2
 800100e:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001010:	480f      	ldr	r0, [pc, #60]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001012:	f001 fea3 	bl	8002d5c <HAL_I2C_Master_Receive_DMA>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
		//HAL_I2C_Master_Receive_DMA(&hi2c1, LM75_RD_ADDRESS, data, 6); //LM75B
		if (status_rx != HAL_OK) {
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00f      	beq.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x4c>
			string_length = snprintf(string, sizeof(string), "I2C DMA Error\n");
 8001020:	4a0c      	ldr	r2, [pc, #48]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001022:	2120      	movs	r1, #32
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001026:	f006 ff57 	bl	8007ed8 <sniprintf>
 800102a:	4603      	mov	r3, r0
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800102e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart2, string, string_length);
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	461a      	mov	r2, r3
 8001038:	4907      	ldr	r1, [pc, #28]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800103c:	f005 f80a 	bl	8006054 <HAL_UART_Transmit_DMA>
		}
	}
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000001 	.word	0x20000001
 800104c:	2000039c 	.word	0x2000039c
 8001050:	200001f4 	.word	0x200001f4
 8001054:	0800b7d0 	.word	0x0800b7d0
 8001058:	200003a0 	.word	0x200003a0
 800105c:	200003c0 	.word	0x200003c0
 8001060:	200002f0 	.word	0x200002f0

08001064 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af04      	add	r7, sp, #16
 800106a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a20      	ldr	r2, [pc, #128]	@ (80010f4 <HAL_I2C_MasterRxCpltCallback+0x90>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d13a      	bne.n	80010ec <HAL_I2C_MasterRxCpltCallback+0x88>
		// Transmit the data over UART
		string_length = snprintf(string, sizeof(string), "Temperature: %.3f %cC \n", temperature, 176);
		HAL_UART_Transmit_DMA(&huart2, string, string_length);*/

		// ---------------- LM75A Sensor code ----------------- //
		concat_data = data[0] << 8 | data[1];
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <HAL_I2C_MasterRxCpltCallback+0x94>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <HAL_I2C_MasterRxCpltCallback+0x94>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_I2C_MasterRxCpltCallback+0x98>)
 800108a:	801a      	strh	r2, [r3, #0]
		{
			temperature = (Rx_data[4] << 8) | Rx_data[5];
		}
		*/
		// --------------------------------------------------- //
		out_temperature = concat_data*0.125;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HAL_I2C_MasterRxCpltCallback+0x98>)
 800108e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa4e 	bl	8000534 <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80010a0:	f7ff fab2 	bl	8000608 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fda4 	bl	8000bf8 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <HAL_I2C_MasterRxCpltCallback+0x9c>)
 80010b4:	6013      	str	r3, [r2, #0]
		string_length = snprintf(string, sizeof(string), "Temperature: %.3f %cC \n", out_temperature, 176);
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_I2C_MasterRxCpltCallback+0x9c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa4c 	bl	8000558 <__aeabi_f2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	21b0      	movs	r1, #176	@ 0xb0
 80010c6:	9102      	str	r1, [sp, #8]
 80010c8:	e9cd 2300 	strd	r2, r3, [sp]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_I2C_MasterRxCpltCallback+0xa0>)
 80010ce:	2120      	movs	r1, #32
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <HAL_I2C_MasterRxCpltCallback+0xa4>)
 80010d2:	f006 ff01 	bl	8007ed8 <sniprintf>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a0c      	ldr	r2, [pc, #48]	@ (800110c <HAL_I2C_MasterRxCpltCallback+0xa8>)
 80010da:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, string, string_length);
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_I2C_MasterRxCpltCallback+0xa8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	4908      	ldr	r1, [pc, #32]	@ (8001108 <HAL_I2C_MasterRxCpltCallback+0xa4>)
 80010e6:	480a      	ldr	r0, [pc, #40]	@ (8001110 <HAL_I2C_MasterRxCpltCallback+0xac>)
 80010e8:	f004 ffb4 	bl	8006054 <HAL_UART_Transmit_DMA>
	}
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005400 	.word	0x40005400
 80010f8:	2000039c 	.word	0x2000039c
 80010fc:	200003c4 	.word	0x200003c4
 8001100:	200003c8 	.word	0x200003c8
 8001104:	0800b7e0 	.word	0x0800b7e0
 8001108:	200003a0 	.word	0x200003a0
 800110c:	200003c0 	.word	0x200003c0
 8001110:	200002f0 	.word	0x200002f0

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111a:	f000 fc89 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111e:	f000 f821 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001122:	f000 f959 	bl	80013d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001126:	f000 f92f 	bl	8001388 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800112a:	f000 f903 	bl	8001334 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800112e:	f000 f885 	bl	800123c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001132:	f000 f8b1 	bl	8001298 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_StatusTypeDef status_tx =
  HAL_I2C_Master_Transmit(&hi2c1, LM75_WR_ADDRESS, &LM75_TEMP_REGISTER, 2, 10);
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <main+0x40>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	230a      	movs	r3, #10
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2302      	movs	r3, #2
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <main+0x44>)
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <main+0x48>)
 8001146:	f001 fd0b 	bl	8002b60 <HAL_I2C_Master_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <main+0x4c>)
 800114c:	f004 fb48 	bl	80057e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <main+0x3c>
 8001154:	20000000 	.word	0x20000000
 8001158:	20000398 	.word	0x20000398
 800115c:	200001f4 	.word	0x200001f4
 8001160:	200002a8 	.word	0x200002a8

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	@ 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	2230      	movs	r2, #48	@ 0x30
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f006 ff47 	bl	8008006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <SystemClock_Config+0xd0>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <SystemClock_Config+0xd0>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	@ 0x40
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <SystemClock_Config+0xd0>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <SystemClock_Config+0xd4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <SystemClock_Config+0xd4>)
 80011b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <SystemClock_Config+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d8:	2310      	movs	r3, #16
 80011da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fe0e 	bl	8004e10 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011fa:	f000 f95b 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f004 f870 	bl	8005300 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001226:	f000 f945 	bl	80014b4 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	@ 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_I2C1_Init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <MX_I2C1_Init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_I2C1_Init+0x50>)
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <MX_I2C1_Init+0x58>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_I2C1_Init+0x50>)
 800125a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800125e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_I2C1_Init+0x50>)
 800127a:	f001 fb17 	bl	80028ac <HAL_I2C_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001284:	f000 f916 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001f4 	.word	0x200001f4
 8001290:	40005400 	.word	0x40005400
 8001294:	000186a0 	.word	0x000186a0

08001298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012be:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10) - 1;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012de:	4814      	ldr	r0, [pc, #80]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012e0:	f004 fa2e 	bl	8005740 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ea:	f000 f8e3 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM2_Init+0x98>)
 80012fc:	f004 fbc2 	bl	8005a84 <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001306:	f000 f8d5 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_TIM2_Init+0x98>)
 8001318:	f004 fdca 	bl	8005eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001322:	f000 f8c7 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002a8 	.word	0x200002a8

08001334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_USART2_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800136c:	f004 fe22 	bl	8005fb4 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f000 f89d 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002f0 	.word	0x200002f0
 8001384:	40004400 	.word	0x40004400

08001388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <MX_DMA_Init+0x4c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <MX_DMA_Init+0x4c>)
 8001398:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_DMA_Init+0x4c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	200b      	movs	r0, #11
 80013b0:	f000 fc8b 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013b4:	200b      	movs	r0, #11
 80013b6:	f000 fca4 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2011      	movs	r0, #17
 80013c0:	f000 fc83 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013c4:	2011      	movs	r0, #17
 80013c6:	f000 fc9c 	bl	8001d02 <HAL_NVIC_EnableIRQ>

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a2c      	ldr	r2, [pc, #176]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a25      	ldr	r2, [pc, #148]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 8001414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2120      	movs	r1, #32
 8001462:	4812      	ldr	r0, [pc, #72]	@ (80014ac <MX_GPIO_Init+0xd4>)
 8001464:	f001 fa08 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800146e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <MX_GPIO_Init+0xd8>)
 8001480:	f001 f876 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001484:	2320      	movs	r3, #32
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4804      	ldr	r0, [pc, #16]	@ (80014ac <MX_GPIO_Init+0xd4>)
 800149c:	f001 f868 	bl	8002570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	@ 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020800 	.word	0x40020800

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a0f      	ldr	r2, [pc, #60]	@ (800150c <HAL_MspInit+0x4c>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	@ (800150c <HAL_MspInit+0x4c>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014fe:	2007      	movs	r0, #7
 8001500:	f000 fbd8 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a35      	ldr	r2, [pc, #212]	@ (8001604 <HAL_I2C_MspInit+0xf4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d163      	bne.n	80015fa <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <HAL_I2C_MspInit+0xf8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a33      	ldr	r2, [pc, #204]	@ (8001608 <HAL_I2C_MspInit+0xf8>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <HAL_I2C_MspInit+0xf8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800154e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001554:	2312      	movs	r3, #18
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001560:	2304      	movs	r3, #4
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4828      	ldr	r0, [pc, #160]	@ (800160c <HAL_I2C_MspInit+0xfc>)
 800156c:	f001 f800 	bl	8002570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_I2C_MspInit+0xf8>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <HAL_I2C_MspInit+0xf8>)
 800157a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800157e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001580:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <HAL_I2C_MspInit+0xf8>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800158c:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 800158e:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <HAL_I2C_MspInit+0x104>)
 8001590:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001592:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 8001594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001598:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159a:	4b1d      	ldr	r3, [pc, #116]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b4:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015c6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015ce:	4810      	ldr	r0, [pc, #64]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015d0:	f000 fbb2 	bl	8001d38 <HAL_DMA_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80015da:	f7ff ff6b 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <HAL_I2C_MspInit+0x100>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	201f      	movs	r0, #31
 80015f0:	f000 fb6b 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015f4:	201f      	movs	r0, #31
 80015f6:	f000 fb84 	bl	8001d02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	@ 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400
 8001610:	20000248 	.word	0x20000248
 8001614:	40026010 	.word	0x40026010

08001618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001628:	d115      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_TIM_Base_MspInit+0x48>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_TIM_Base_MspInit+0x48>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_TIM_Base_MspInit+0x48>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	201c      	movs	r0, #28
 800164c:	f000 fb3d 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001650:	201c      	movs	r0, #28
 8001652:	f000 fb56 	bl	8001d02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a34      	ldr	r2, [pc, #208]	@ (8001754 <HAL_UART_MspInit+0xf0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d162      	bne.n	800174c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <HAL_UART_MspInit+0xf4>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	4a32      	ldr	r2, [pc, #200]	@ (8001758 <HAL_UART_MspInit+0xf4>)
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	6413      	str	r3, [r2, #64]	@ 0x40
 8001696:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <HAL_UART_MspInit+0xf4>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <HAL_UART_MspInit+0xf4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001758 <HAL_UART_MspInit+0xf4>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b29      	ldr	r3, [pc, #164]	@ (8001758 <HAL_UART_MspInit+0xf4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016be:	230c      	movs	r3, #12
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ce:	2307      	movs	r3, #7
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4820      	ldr	r0, [pc, #128]	@ (800175c <HAL_UART_MspInit+0xf8>)
 80016da:	f000 ff49 	bl	8002570 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 80016e0:	4a20      	ldr	r2, [pc, #128]	@ (8001764 <HAL_UART_MspInit+0x100>)
 80016e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 80016e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 80016ee:	2240      	movs	r2, #64	@ 0x40
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 80016fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001700:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 8001714:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001718:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001720:	480f      	ldr	r0, [pc, #60]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 8001722:	f000 fb09 	bl	8001d38 <HAL_DMA_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800172c:	f7ff fec2 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 8001734:	639a      	str	r2, [r3, #56]	@ 0x38
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <HAL_UART_MspInit+0xfc>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2026      	movs	r0, #38	@ 0x26
 8001742:	f000 fac2 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001746:	2026      	movs	r0, #38	@ 0x26
 8001748:	f000 fadb 	bl	8001d02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40004400 	.word	0x40004400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	20000338 	.word	0x20000338
 8001764:	400260a0 	.word	0x400260a0

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <NMI_Handler+0x4>

08001770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <MemManage_Handler+0x4>

08001780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <UsageFault_Handler+0x4>

08001790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017be:	f000 f989 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Stream0_IRQHandler+0x10>)
 80017ce:	f000 fc4b 	bl	8002068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000248 	.word	0x20000248

080017dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Stream6_IRQHandler+0x10>)
 80017e2:	f000 fc41 	bl	8002068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000338 	.word	0x20000338

080017f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <TIM2_IRQHandler+0x10>)
 80017f6:	f004 f855 	bl	80058a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002a8 	.word	0x200002a8

08001804 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <I2C1_EV_IRQHandler+0x10>)
 800180a:	f001 fbd3 	bl	8002fb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001f4 	.word	0x200001f4

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f004 fc89 	bl	8006134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200002f0 	.word	0x200002f0

0800182c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_kill>:

int _kill(int pid, int sig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001846:	f006 fc31 	bl	80080ac <__errno>
 800184a:	4603      	mov	r3, r0
 800184c:	2216      	movs	r2, #22
 800184e:	601a      	str	r2, [r3, #0]
  return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_exit>:

void _exit (int status)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <_kill>
  while (1) {}    /* Make sure we hang here */
 800186e:	bf00      	nop
 8001870:	e7fd      	b.n	800186e <_exit+0x12>

08001872 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e00a      	b.n	800189a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001884:	f3af 8000 	nop.w
 8001888:	4601      	mov	r1, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	60ba      	str	r2, [r7, #8]
 8001890:	b2ca      	uxtb	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dbf0      	blt.n	8001884 <_read+0x12>
  }

  return len;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e009      	b.n	80018d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf1      	blt.n	80018be <_write+0x12>
  }
  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_close>:

int _close(int file)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800190c:	605a      	str	r2, [r3, #4]
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_isatty>:

int _isatty(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	@ (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f006 fb96 	bl	80080ac <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20018000 	.word	0x20018000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	200003cc 	.word	0x200003cc
 80019b4:	20000520 	.word	0x20000520

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019e0:	f7ff ffea 	bl	80019b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f006 fb55 	bl	80080b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fb81 	bl	8001114 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a20:	0800bc58 	.word	0x0800bc58
  ldr r2, =_sbss
 8001a24:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a28:	20000520 	.word	0x20000520

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f92b 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fd2c 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f943 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f000 f90b 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	2000000c 	.word	0x2000000c
 8001af8:	200003d0 	.word	0x200003d0

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200003d0 	.word	0x200003d0

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	@ (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	@ (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff3e 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff feda 	bl	8001afc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e099      	b.n	8001e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	e00f      	b.n	8001d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff fec1 	bl	8001afc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d908      	bls.n	8001d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e078      	b.n	8001e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e8      	bne.n	8001d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_DMA_Init+0x158>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d117      	bne.n	8001e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fb1b 	bl	8002478 <DMA_CheckFifoParam>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2240      	movs	r2, #64	@ 0x40
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e56:	2301      	movs	r3, #1
 8001e58:	e016      	b.n	8001e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fad2 	bl	800240c <DMA_CalcBaseAndBitshift>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	223f      	movs	r2, #63	@ 0x3f
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	f010803f 	.word	0xf010803f

08001e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DMA_Start_IT+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e040      	b.n	8001f3c <HAL_DMA_Start_IT+0xa8>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d12f      	bne.n	8001f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fa64 	bl	80023b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	223f      	movs	r2, #63	@ 0x3f
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0216 	orr.w	r2, r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e005      	b.n	8001f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f52:	f7ff fdd3 	bl	8001afc <HAL_GetTick>
 8001f56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2280      	movs	r2, #128	@ 0x80
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e052      	b.n	800201c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0216 	bic.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_DMA_Abort+0x62>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc6:	e013      	b.n	8001ff0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc8:	f7ff fd98 	bl	8001afc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d90c      	bls.n	8001ff0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e015      	b.n	800201c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e4      	bne.n	8001fc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002002:	223f      	movs	r2, #63	@ 0x3f
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d004      	beq.n	8002042 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2280      	movs	r2, #128	@ 0x80
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00c      	b.n	800205c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2205      	movs	r2, #5
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002074:	4b8e      	ldr	r3, [pc, #568]	@ (80022b0 <HAL_DMA_IRQHandler+0x248>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a8e      	ldr	r2, [pc, #568]	@ (80022b4 <HAL_DMA_IRQHandler+0x24c>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0a9b      	lsrs	r3, r3, #10
 8002080:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002092:	2208      	movs	r2, #8
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01a      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0204 	bic.w	r2, r2, #4
 80020ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	2208      	movs	r2, #8
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	2201      	movs	r2, #1
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f6:	2201      	movs	r2, #1
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	2204      	movs	r2, #4
 8002110:	409a      	lsls	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d012      	beq.n	8002140 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212c:	2204      	movs	r2, #4
 800212e:	409a      	lsls	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	2210      	movs	r2, #16
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d043      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03c      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002162:	2210      	movs	r2, #16
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d018      	beq.n	80021aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d024      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
 8002196:	e01f      	b.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e016      	b.n	80021d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0208 	bic.w	r2, r2, #8
 80021c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	2220      	movs	r2, #32
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 808f 	beq.w	8002308 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8087 	beq.w	8002308 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	2220      	movs	r2, #32
 8002200:	409a      	lsls	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b05      	cmp	r3, #5
 8002210:	d136      	bne.n	8002280 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0216 	bic.w	r2, r2, #22
 8002220:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002230:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_DMA_IRQHandler+0x1da>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0208 	bic.w	r2, r2, #8
 8002250:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	223f      	movs	r2, #63	@ 0x3f
 8002258:	409a      	lsls	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002272:	2b00      	cmp	r3, #0
 8002274:	d07e      	beq.n	8002374 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
        }
        return;
 800227e:	e079      	b.n	8002374 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01d      	beq.n	80022ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d031      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e02c      	b.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
 80022ae:	bf00      	nop
 80022b0:	20000004 	.word	0x20000004
 80022b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	e01e      	b.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0210 	bic.w	r2, r2, #16
 80022e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	2b00      	cmp	r3, #0
 800230e:	d032      	beq.n	8002376 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d022      	beq.n	8002362 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2205      	movs	r2, #5
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3301      	adds	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d307      	bcc.n	8002350 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f2      	bne.n	8002334 <HAL_DMA_IRQHandler+0x2cc>
 800234e:	e000      	b.n	8002352 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002350:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
 8002372:	e000      	b.n	8002376 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002374:	bf00      	nop
    }
  }
}
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238a:	b2db      	uxtb	r3, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b40      	cmp	r3, #64	@ 0x40
 80023dc:	d108      	bne.n	80023f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ee:	e007      	b.n	8002400 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3b10      	subs	r3, #16
 800241c:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <DMA_CalcBaseAndBitshift+0x64>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002426:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <DMA_CalcBaseAndBitshift+0x68>)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d909      	bls.n	800244e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	1d1a      	adds	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	659a      	str	r2, [r3, #88]	@ 0x58
 800244c:	e007      	b.n	800245e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	aaaaaaab 	.word	0xaaaaaaab
 8002474:	0800b810 	.word	0x0800b810

08002478 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11f      	bne.n	80024d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d856      	bhi.n	8002546 <DMA_CheckFifoParam+0xce>
 8002498:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <DMA_CheckFifoParam+0x28>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080024c3 	.word	0x080024c3
 80024a8:	080024b1 	.word	0x080024b1
 80024ac:	08002547 	.word	0x08002547
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d046      	beq.n	800254a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e043      	b.n	800254a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ca:	d140      	bne.n	800254e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d0:	e03d      	b.n	800254e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024da:	d121      	bne.n	8002520 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d837      	bhi.n	8002552 <DMA_CheckFifoParam+0xda>
 80024e2:	a201      	add	r2, pc, #4	@ (adr r2, 80024e8 <DMA_CheckFifoParam+0x70>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	080024ff 	.word	0x080024ff
 80024f0:	080024f9 	.word	0x080024f9
 80024f4:	08002511 	.word	0x08002511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
      break;
 80024fc:	e030      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d025      	beq.n	8002556 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250e:	e022      	b.n	8002556 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002518:	d11f      	bne.n	800255a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800251e:	e01c      	b.n	800255a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d903      	bls.n	800252e <DMA_CheckFifoParam+0xb6>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d003      	beq.n	8002534 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800252c:	e018      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      break;
 8002532:	e015      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00e      	beq.n	800255e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e00b      	b.n	800255e <DMA_CheckFifoParam+0xe6>
      break;
 8002546:	bf00      	nop
 8002548:	e00a      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 800254a:	bf00      	nop
 800254c:	e008      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
 8002550:	e006      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 8002552:	bf00      	nop
 8002554:	e004      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 8002556:	bf00      	nop
 8002558:	e002      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;   
 800255a:	bf00      	nop
 800255c:	e000      	b.n	8002560 <DMA_CheckFifoParam+0xe8>
      break;
 800255e:	bf00      	nop
    }
  } 
  
  return status; 
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e159      	b.n	8002840 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8148 	bne.w	800283a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a2 	beq.w	800283a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b57      	ldr	r3, [pc, #348]	@ (8002858 <HAL_GPIO_Init+0x2e8>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	4a56      	ldr	r2, [pc, #344]	@ (8002858 <HAL_GPIO_Init+0x2e8>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002704:	6453      	str	r3, [r2, #68]	@ 0x44
 8002706:	4b54      	ldr	r3, [pc, #336]	@ (8002858 <HAL_GPIO_Init+0x2e8>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002712:	4a52      	ldr	r2, [pc, #328]	@ (800285c <HAL_GPIO_Init+0x2ec>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a49      	ldr	r2, [pc, #292]	@ (8002860 <HAL_GPIO_Init+0x2f0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x202>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a48      	ldr	r2, [pc, #288]	@ (8002864 <HAL_GPIO_Init+0x2f4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x1fe>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a47      	ldr	r2, [pc, #284]	@ (8002868 <HAL_GPIO_Init+0x2f8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x1fa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a46      	ldr	r2, [pc, #280]	@ (800286c <HAL_GPIO_Init+0x2fc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x1f6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a45      	ldr	r2, [pc, #276]	@ (8002870 <HAL_GPIO_Init+0x300>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x1f2>
 800275e:	2304      	movs	r3, #4
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002762:	2307      	movs	r3, #7
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x204>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x204>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x204>
 8002772:	2300      	movs	r3, #0
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f002 0203 	and.w	r2, r2, #3
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	@ (800285c <HAL_GPIO_Init+0x2ec>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b38      	ldr	r3, [pc, #224]	@ (8002874 <HAL_GPIO_Init+0x304>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e0:	4a24      	ldr	r2, [pc, #144]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e6:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_GPIO_Init+0x304>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280a:	4a1a      	ldr	r2, [pc, #104]	@ (8002874 <HAL_GPIO_Init+0x304>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002810:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <HAL_GPIO_Init+0x304>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_GPIO_Init+0x304>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f67f aea2 	bls.w	800258c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800
 8002860:	40020000 	.word	0x40020000
 8002864:	40020400 	.word	0x40020400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020c00 	.word	0x40020c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40013c00 	.word	0x40013c00

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002894:	e003      	b.n	800289e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e12b      	b.n	8002b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe fe1c 	bl	8001510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800290e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002910:	f002 feee 	bl	80056f0 <HAL_RCC_GetPCLK1Freq>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a81      	ldr	r2, [pc, #516]	@ (8002b20 <HAL_I2C_Init+0x274>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d807      	bhi.n	8002930 <HAL_I2C_Init+0x84>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a80      	ldr	r2, [pc, #512]	@ (8002b24 <HAL_I2C_Init+0x278>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bf94      	ite	ls
 8002928:	2301      	movls	r3, #1
 800292a:	2300      	movhi	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e006      	b.n	800293e <HAL_I2C_Init+0x92>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a7d      	ldr	r2, [pc, #500]	@ (8002b28 <HAL_I2C_Init+0x27c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0e7      	b.n	8002b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a78      	ldr	r2, [pc, #480]	@ (8002b2c <HAL_I2C_Init+0x280>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0c9b      	lsrs	r3, r3, #18
 8002950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a6a      	ldr	r2, [pc, #424]	@ (8002b20 <HAL_I2C_Init+0x274>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d802      	bhi.n	8002980 <HAL_I2C_Init+0xd4>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3301      	adds	r3, #1
 800297e:	e009      	b.n	8002994 <HAL_I2C_Init+0xe8>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	4a69      	ldr	r2, [pc, #420]	@ (8002b30 <HAL_I2C_Init+0x284>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	3301      	adds	r3, #1
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	430b      	orrs	r3, r1
 800299a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	495c      	ldr	r1, [pc, #368]	@ (8002b20 <HAL_I2C_Init+0x274>)
 80029b0:	428b      	cmp	r3, r1
 80029b2:	d819      	bhi.n	80029e8 <HAL_I2C_Init+0x13c>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e59      	subs	r1, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029c8:	400b      	ands	r3, r1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_I2C_Init+0x138>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e59      	subs	r1, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	e051      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e04f      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <HAL_I2C_Init+0x168>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e012      	b.n	8002a3a <HAL_I2C_Init+0x18e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	0099      	lsls	r1, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Init+0x196>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e022      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <HAL_I2C_Init+0x1bc>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e58      	subs	r0, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	440b      	add	r3, r1
 8002a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a66:	e00f      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	6809      	ldr	r1, [r1, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ab6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6911      	ldr	r1, [r2, #16]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68d2      	ldr	r2, [r2, #12]
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	000186a0 	.word	0x000186a0
 8002b24:	001e847f 	.word	0x001e847f
 8002b28:	003d08ff 	.word	0x003d08ff
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	10624dd3 	.word	0x10624dd3

08002b34 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b46:	2b80      	cmp	r3, #128	@ 0x80
 8002b48:	d103      	bne.n	8002b52 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
 8002b70:	4613      	mov	r3, r2
 8002b72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7fe ffc2 	bl	8001afc <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 80e0 	bne.w	8002d48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2319      	movs	r3, #25
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4970      	ldr	r1, [pc, #448]	@ (8002d54 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f001 ff16 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e0d3      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2C_Master_Transmit+0x50>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0cc      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d007      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2221      	movs	r2, #33	@ 0x21
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	893a      	ldrh	r2, [r7, #8]
 8002c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a50      	ldr	r2, [pc, #320]	@ (8002d58 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f001 fc8a 	bl	8004538 <I2C_MasterRequestWrite>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e08d      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c44:	e066      	b.n	8002d14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f001 ffd4 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d107      	bne.n	8002c6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06b      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d11b      	bne.n	8002ce8 <HAL_I2C_Master_Transmit+0x188>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f001 ffcb 	bl	8004c88 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e01a      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d194      	bne.n	8002c46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	00100002 	.word	0x00100002
 8002d58:	ffff0000 	.word	0xffff0000

08002d5c <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	461a      	mov	r2, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	817b      	strh	r3, [r7, #10]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	f040 8109 	bne.w	8002f94 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d82:	4b87      	ldr	r3, [pc, #540]	@ (8002fa0 <HAL_I2C_Master_Receive_DMA+0x244>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	08db      	lsrs	r3, r3, #3
 8002d88:	4a86      	ldr	r2, [pc, #536]	@ (8002fa4 <HAL_I2C_Master_Receive_DMA+0x248>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0a1a      	lsrs	r2, r3, #8
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009a      	lsls	r2, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d112      	bne.n	8002dce <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f043 0220 	orr.w	r2, r3, #32
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0e3      	b.n	8002f96 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d0df      	beq.n	8002d9c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_I2C_Master_Receive_DMA+0x8e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0d5      	b.n	8002f96 <HAL_I2C_Master_Receive_DMA+0x23a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d007      	beq.n	8002e10 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2222      	movs	r2, #34	@ 0x22
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	893a      	ldrh	r2, [r7, #8]
 8002e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a56      	ldr	r2, [pc, #344]	@ (8002fa8 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002e50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e52:	897a      	ldrh	r2, [r7, #10]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07b      	beq.n	8002f58 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02a      	beq.n	8002ebe <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fac <HAL_I2C_Master_Receive_DMA+0x250>)
 8002e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb0 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e76:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	2200      	movs	r2, #0
 8002e96:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eae:	f7fe fff1 	bl	8001e94 <HAL_DMA_Start_IT>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d139      	bne.n	8002f30 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8002ebc:	e013      	b.n	8002ee6 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e057      	b.n	8002f96 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f04:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f1c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	e02f      	b.n	8002f90 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e01e      	b.n	8002f96 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002f6e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f8e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	14f8b589 	.word	0x14f8b589
 8002fa8:	ffff0000 	.word	0xffff0000
 8002fac:	0800463d 	.word	0x0800463d
 8002fb0:	080047fb 	.word	0x080047fb

08002fb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fcc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fdc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d003      	beq.n	8002fec <HAL_I2C_EV_IRQHandler+0x38>
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b40      	cmp	r3, #64	@ 0x40
 8002fe8:	f040 80b1 	bne.w	800314e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <HAL_I2C_EV_IRQHandler+0x6e>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800300c:	d003      	beq.n	8003016 <HAL_I2C_EV_IRQHandler+0x62>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003014:	d101      	bne.n	800301a <HAL_I2C_EV_IRQHandler+0x66>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_I2C_EV_IRQHandler+0x68>
 800301a:	2300      	movs	r3, #0
 800301c:	2b01      	cmp	r3, #1
 800301e:	f000 8114 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_I2C_EV_IRQHandler+0x90>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003032:	2b00      	cmp	r3, #0
 8003034:	d006      	beq.n	8003044 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f001 fecf 	bl	8004dda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fcd1 	bl	80039e4 <I2C_Master_SB>
 8003042:	e083      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_I2C_EV_IRQHandler+0xac>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fd49 	bl	8003af0 <I2C_Master_ADD10>
 800305e:	e075      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_I2C_EV_IRQHandler+0xc8>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fd65 	bl	8003b44 <I2C_Master_ADDR>
 800307a:	e067      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d036      	beq.n	80030f4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003094:	f000 80db 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_I2C_EV_IRQHandler+0x10a>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_I2C_EV_IRQHandler+0x10a>
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f92d 	bl	8003316 <I2C_MasterTransmit_TXE>
 80030bc:	e046      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80c2 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x29a>
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80bc 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030d6:	7bbb      	ldrb	r3, [r7, #14]
 80030d8:	2b21      	cmp	r3, #33	@ 0x21
 80030da:	d103      	bne.n	80030e4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f9b6 	bl	800344e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e2:	e0b4      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b40      	cmp	r3, #64	@ 0x40
 80030e8:	f040 80b1 	bne.w	800324e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fa24 	bl	800353a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f2:	e0ac      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003102:	f000 80a4 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_I2C_EV_IRQHandler+0x178>
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_I2C_EV_IRQHandler+0x178>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 faa0 	bl	800366a <I2C_MasterReceive_RXNE>
 800312a:	e00f      	b.n	800314c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 808b 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x29a>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8085 	beq.w	800324e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fb58 	bl	80037fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800314a:	e080      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x29a>
 800314c:	e07f      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e007      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0x1ea>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00c      	beq.n	800319e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 ff23 	bl	8003fe2 <I2C_Slave_ADDR>
 800319c:	e05a      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0x206>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 ff5e 	bl	8004074 <I2C_Slave_STOPF>
 80031b8:	e04c      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031ba:	7bbb      	ldrb	r3, [r7, #14]
 80031bc:	2b21      	cmp	r3, #33	@ 0x21
 80031be:	d002      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x212>
 80031c0:	7bbb      	ldrb	r3, [r7, #14]
 80031c2:	2b29      	cmp	r3, #41	@ 0x29
 80031c4:	d120      	bne.n	8003208 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x238>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x238>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fe3e 	bl	8003e66 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ea:	e032      	b.n	8003252 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02d      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x29e>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d028      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fe6d 	bl	8003ee0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003206:	e024      	b.n	8003252 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <HAL_I2C_EV_IRQHandler+0x27a>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_I2C_EV_IRQHandler+0x27a>
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fe7b 	bl	8003f22 <I2C_SlaveReceive_RXNE>
 800322c:	e012      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 feab 	bl	8003f9e <I2C_SlaveReceive_BTF>
 8003248:	e004      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800324a:	bf00      	nop
 800324c:	e002      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003252:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
 80032a2:	4613      	mov	r3, r2
 80032a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800332c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d150      	bne.n	80033de <I2C_MasterTransmit_TXE+0xc8>
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b21      	cmp	r3, #33	@ 0x21
 8003340:	d14d      	bne.n	80033de <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d01d      	beq.n	8003384 <I2C_MasterTransmit_TXE+0x6e>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b20      	cmp	r3, #32
 800334c:	d01a      	beq.n	8003384 <I2C_MasterTransmit_TXE+0x6e>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003354:	d016      	beq.n	8003384 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003364:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2211      	movs	r2, #17
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff6c 	bl	800325a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003382:	e060      	b.n	8003446 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003392:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b40      	cmp	r3, #64	@ 0x40
 80033bc:	d107      	bne.n	80033ce <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ff7d 	bl	80032c6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033cc:	e03b      	b.n	8003446 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff3f 	bl	800325a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033dc:	e033      	b.n	8003446 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b21      	cmp	r3, #33	@ 0x21
 80033e2:	d005      	beq.n	80033f0 <I2C_MasterTransmit_TXE+0xda>
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	2b40      	cmp	r3, #64	@ 0x40
 80033e8:	d12d      	bne.n	8003446 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b22      	cmp	r3, #34	@ 0x22
 80033ee:	d12a      	bne.n	8003446 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d108      	bne.n	800340c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003408:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800340a:	e01c      	b.n	8003446 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b40      	cmp	r3, #64	@ 0x40
 8003416:	d103      	bne.n	8003420 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f88e 	bl	800353a <I2C_MemoryTransmit_TXE_BTF>
}
 800341e:	e012      	b.n	8003446 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003444:	e7ff      	b.n	8003446 <I2C_MasterTransmit_TXE+0x130>
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b21      	cmp	r3, #33	@ 0x21
 8003466:	d164      	bne.n	8003532 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003496:	e04c      	b.n	8003532 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d01d      	beq.n	80034da <I2C_MasterTransmit_BTF+0x8c>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d01a      	beq.n	80034da <I2C_MasterTransmit_BTF+0x8c>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034aa:	d016      	beq.n	80034da <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034ba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2211      	movs	r2, #17
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fec1 	bl	800325a <HAL_I2C_MasterTxCpltCallback>
}
 80034d8:	e02b      	b.n	8003532 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034e8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d107      	bne.n	8003524 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fed2 	bl	80032c6 <HAL_I2C_MemTxCpltCallback>
}
 8003522:	e006      	b.n	8003532 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fe94 	bl	800325a <HAL_I2C_MasterTxCpltCallback>
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003548:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11d      	bne.n	800358e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10b      	bne.n	8003572 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355e:	b2da      	uxtb	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003570:	e077      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003576:	b29b      	uxth	r3, r3
 8003578:	121b      	asrs	r3, r3, #8
 800357a:	b2da      	uxtb	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800358c:	e069      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10b      	bne.n	80035ae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359a:	b2da      	uxtb	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80035ac:	e059      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d152      	bne.n	800365c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b22      	cmp	r3, #34	@ 0x22
 80035ba:	d10d      	bne.n	80035d8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80035d6:	e044      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d015      	beq.n	800360e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b21      	cmp	r3, #33	@ 0x21
 80035e6:	d112      	bne.n	800360e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800360c:	e029      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d124      	bne.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b21      	cmp	r3, #33	@ 0x21
 800361c:	d121      	bne.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800362c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fe36 	bl	80032c6 <HAL_I2C_MemTxCpltCallback>
}
 800365a:	e002      	b.n	8003662 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fa69 	bl	8002b34 <I2C_Flush_DR>
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b22      	cmp	r3, #34	@ 0x22
 800367c:	f040 80b9 	bne.w	80037f2 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d921      	bls.n	80036d8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	f040 8096 	bne.w	80037f2 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80036d6:	e08c      	b.n	80037f2 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d07f      	beq.n	80037e0 <I2C_MasterReceive_RXNE+0x176>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d002      	beq.n	80036ec <I2C_MasterReceive_RXNE+0x82>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d179      	bne.n	80037e0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f001 fb13 	bl	8004d18 <I2C_WaitOnSTOPRequestThroughIT>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d14c      	bne.n	8003792 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003706:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003716:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b40      	cmp	r3, #64	@ 0x40
 8003750:	d10a      	bne.n	8003768 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fdba 	bl	80032da <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003766:	e044      	b.n	80037f2 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b08      	cmp	r3, #8
 8003774:	d002      	beq.n	800377c <I2C_MasterReceive_RXNE+0x112>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b20      	cmp	r3, #32
 800377a:	d103      	bne.n	8003784 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
 8003782:	e002      	b.n	800378a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2212      	movs	r2, #18
 8003788:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fc6a 	bl	8001064 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003790:	e02f      	b.n	80037f2 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fd88 	bl	80032ee <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037de:	e008      	b.n	80037f2 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ee:	605a      	str	r2, [r3, #4]
}
 80037f0:	e7ff      	b.n	80037f2 <I2C_MasterReceive_RXNE+0x188>
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b04      	cmp	r3, #4
 8003810:	d11b      	bne.n	800384a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003820:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003848:	e0c8      	b.n	80039dc <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b03      	cmp	r3, #3
 8003852:	d129      	bne.n	80038a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003862:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00a      	beq.n	8003880 <I2C_MasterReceive_BTF+0x86>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d007      	beq.n	8003880 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038a6:	e099      	b.n	80039dc <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	f040 8081 	bne.w	80039b6 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d002      	beq.n	80038c0 <I2C_MasterReceive_BTF+0xc6>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d108      	bne.n	80038d2 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e019      	b.n	8003906 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d002      	beq.n	80038de <I2C_MasterReceive_BTF+0xe4>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d108      	bne.n	80038f0 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e00a      	b.n	8003906 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d007      	beq.n	8003906 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003904:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003960:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	d10a      	bne.n	800398c <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fca8 	bl	80032da <HAL_I2C_MemRxCpltCallback>
}
 800398a:	e027      	b.n	80039dc <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b08      	cmp	r3, #8
 8003998:	d002      	beq.n	80039a0 <I2C_MasterReceive_BTF+0x1a6>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b20      	cmp	r3, #32
 800399e:	d103      	bne.n	80039a8 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80039a6:	e002      	b.n	80039ae <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2212      	movs	r2, #18
 80039ac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fb58 	bl	8001064 <HAL_I2C_MasterRxCpltCallback>
}
 80039b4:	e012      	b.n	80039dc <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b40      	cmp	r3, #64	@ 0x40
 80039f6:	d117      	bne.n	8003a28 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a10:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a12:	e067      	b.n	8003ae4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]
}
 8003a26:	e05d      	b.n	8003ae4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a30:	d133      	bne.n	8003a9a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b21      	cmp	r3, #33	@ 0x21
 8003a3c:	d109      	bne.n	8003a52 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a4e:	611a      	str	r2, [r3, #16]
 8003a50:	e008      	b.n	8003a64 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <I2C_Master_SB+0x92>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d032      	beq.n	8003ae4 <I2C_Master_SB+0x100>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02d      	beq.n	8003ae4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a96:	605a      	str	r2, [r3, #4]
}
 8003a98:	e024      	b.n	8003ae4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10e      	bne.n	8003ac0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	11db      	asrs	r3, r3, #7
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 0306 	and.w	r3, r3, #6
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f063 030f 	orn	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	611a      	str	r2, [r3, #16]
}
 8003abe:	e011      	b.n	8003ae4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10d      	bne.n	8003ae4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	11db      	asrs	r3, r3, #7
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f063 030e 	orn	r3, r3, #14
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <I2C_Master_ADD10+0x26>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <I2C_Master_ADD10+0x48>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b36:	605a      	str	r2, [r3, #4]
  }
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b091      	sub	sp, #68	@ 0x44
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b22      	cmp	r3, #34	@ 0x22
 8003b6c:	f040 8169 	bne.w	8003e42 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10f      	bne.n	8003b98 <I2C_Master_ADDR+0x54>
 8003b78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d10b      	bne.n	8003b98 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b80:	2300      	movs	r3, #0
 8003b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	e160      	b.n	8003e5a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11d      	bne.n	8003bdc <I2C_Master_ADDR+0x98>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ba8:	d118      	bne.n	8003bdc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003baa:	2300      	movs	r3, #0
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bce:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bda:	e13e      	b.n	8003e5a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d113      	bne.n	8003c0e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e115      	b.n	8003e3a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 808a 	bne.w	8003d2e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c20:	d137      	bne.n	8003c92 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c30:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c40:	d113      	bne.n	8003c6a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c50:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c52:	2300      	movs	r3, #0
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	e0e7      	b.n	8003e3a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	623b      	str	r3, [r7, #32]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e0d3      	b.n	8003e3a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d02e      	beq.n	8003cf6 <I2C_Master_ADDR+0x1b2>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d02b      	beq.n	8003cf6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	2b12      	cmp	r3, #18
 8003ca2:	d102      	bne.n	8003caa <I2C_Master_ADDR+0x166>
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d125      	bne.n	8003cf6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d00e      	beq.n	8003cce <I2C_Master_ADDR+0x18a>
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d00b      	beq.n	8003cce <I2C_Master_ADDR+0x18a>
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d008      	beq.n	8003cce <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e007      	b.n	8003cde <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	e0a1      	b.n	8003e3a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d04:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e085      	b.n	8003e3a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d14d      	bne.n	8003dd4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d016      	beq.n	8003d6c <I2C_Master_ADDR+0x228>
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d013      	beq.n	8003d6c <I2C_Master_ADDR+0x228>
 8003d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d010      	beq.n	8003d6c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d58:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e007      	b.n	8003d7c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d7a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8a:	d117      	bne.n	8003dbc <I2C_Master_ADDR+0x278>
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d92:	d00b      	beq.n	8003dac <I2C_Master_ADDR+0x268>
 8003d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d008      	beq.n	8003dac <I2C_Master_ADDR+0x268>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d005      	beq.n	8003dac <I2C_Master_ADDR+0x268>
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d002      	beq.n	8003dac <I2C_Master_ADDR+0x268>
 8003da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d107      	bne.n	8003dbc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	e032      	b.n	8003e3a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003de2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003df2:	d117      	bne.n	8003e24 <I2C_Master_ADDR+0x2e0>
 8003df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dfa:	d00b      	beq.n	8003e14 <I2C_Master_ADDR+0x2d0>
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d008      	beq.n	8003e14 <I2C_Master_ADDR+0x2d0>
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d005      	beq.n	8003e14 <I2C_Master_ADDR+0x2d0>
 8003e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d002      	beq.n	8003e14 <I2C_Master_ADDR+0x2d0>
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d107      	bne.n	8003e24 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e40:	e00b      	b.n	8003e5a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
}
 8003e58:	e7ff      	b.n	8003e5a <I2C_Master_ADDR+0x316>
 8003e5a:	bf00      	nop
 8003e5c:	3744      	adds	r7, #68	@ 0x44
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02b      	beq.n	8003ed8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d114      	bne.n	8003ed8 <I2C_SlaveTransmit_TXE+0x72>
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b29      	cmp	r3, #41	@ 0x29
 8003eb2:	d111      	bne.n	8003ed8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2221      	movs	r2, #33	@ 0x21
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2228      	movs	r2, #40	@ 0x28
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff f9cb 	bl	800326e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d011      	beq.n	8003f16 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02c      	beq.n	8003f96 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d114      	bne.n	8003f96 <I2C_SlaveReceive_RXNE+0x74>
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f70:	d111      	bne.n	8003f96 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2222      	movs	r2, #34	@ 0x22
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2228      	movs	r2, #40	@ 0x28
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff f976 	bl	8003282 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d012      	beq.n	8003fd6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ffc:	2b28      	cmp	r3, #40	@ 0x28
 8003ffe:	d125      	bne.n	800404c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800400e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d103      	bne.n	8004030 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	81bb      	strh	r3, [r7, #12]
 800402e:	e002      	b.n	8004036 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800403e:	89ba      	ldrh	r2, [r7, #12]
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff f926 	bl	8003296 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800404a:	e00e      	b.n	800406a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004082:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004092:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040d0:	d172      	bne.n	80041b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b22      	cmp	r3, #34	@ 0x22
 80040d6:	d002      	beq.n	80040de <I2C_Slave_STOPF+0x6a>
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b2a      	cmp	r3, #42	@ 0x2a
 80040dc:	d135      	bne.n	800414a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004110:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe f930 	bl	800237c <HAL_DMA_GetState>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d049      	beq.n	80041b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	4a69      	ldr	r2, [pc, #420]	@ (80042cc <I2C_Slave_STOPF+0x258>)
 8004128:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd ff78 	bl	8002024 <HAL_DMA_Abort_IT>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d03d      	beq.n	80041b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004148:	e035      	b.n	80041b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	f043 0204 	orr.w	r2, r3, #4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800417c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f8fa 	bl	800237c <HAL_DMA_GetState>
 8004188:	4603      	mov	r3, r0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d014      	beq.n	80041b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	4a4e      	ldr	r2, [pc, #312]	@ (80042cc <I2C_Slave_STOPF+0x258>)
 8004194:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	4618      	mov	r0, r3
 800419c:	f7fd ff42 	bl	8002024 <HAL_DMA_Abort_IT>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041b0:	4610      	mov	r0, r2
 80041b2:	4798      	blx	r3
 80041b4:	e000      	b.n	80041b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d03e      	beq.n	8004240 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d112      	bne.n	80041f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d112      	bne.n	800422a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f843 	bl	80042d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800424e:	e039      	b.n	80042c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b2a      	cmp	r3, #42	@ 0x2a
 8004254:	d109      	bne.n	800426a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2228      	movs	r2, #40	@ 0x28
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff f80c 	bl	8003282 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b28      	cmp	r3, #40	@ 0x28
 8004274:	d111      	bne.n	800429a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a15      	ldr	r2, [pc, #84]	@ (80042d0 <I2C_Slave_STOPF+0x25c>)
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff f80d 	bl	80032b2 <HAL_I2C_ListenCpltCallback>
}
 8004298:	e014      	b.n	80042c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	2b22      	cmp	r3, #34	@ 0x22
 80042a0:	d002      	beq.n	80042a8 <I2C_Slave_STOPF+0x234>
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b22      	cmp	r3, #34	@ 0x22
 80042a6:	d10d      	bne.n	80042c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fe ffdf 	bl	8003282 <HAL_I2C_SlaveRxCpltCallback>
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	08004875 	.word	0x08004875
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042ec:	7bbb      	ldrb	r3, [r7, #14]
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d002      	beq.n	80042f8 <I2C_ITError+0x24>
 80042f2:	7bbb      	ldrb	r3, [r7, #14]
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d10a      	bne.n	800430e <I2C_ITError+0x3a>
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b22      	cmp	r3, #34	@ 0x22
 80042fc:	d107      	bne.n	800430e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800430c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004314:	2b28      	cmp	r3, #40	@ 0x28
 8004316:	d107      	bne.n	8004328 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2228      	movs	r2, #40	@ 0x28
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004326:	e015      	b.n	8004354 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004336:	d00a      	beq.n	800434e <I2C_ITError+0x7a>
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b60      	cmp	r3, #96	@ 0x60
 800433c:	d007      	beq.n	800434e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004362:	d162      	bne.n	800442a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004372:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004378:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d020      	beq.n	80043c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004386:	4a6a      	ldr	r2, [pc, #424]	@ (8004530 <I2C_ITError+0x25c>)
 8004388:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fe48 	bl	8002024 <HAL_DMA_Abort_IT>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8089 	beq.w	80044ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043be:	4610      	mov	r0, r2
 80043c0:	4798      	blx	r3
 80043c2:	e074      	b.n	80044ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	4a59      	ldr	r2, [pc, #356]	@ (8004530 <I2C_ITError+0x25c>)
 80043ca:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd fe27 	bl	8002024 <HAL_DMA_Abort_IT>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d068      	beq.n	80044ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b40      	cmp	r3, #64	@ 0x40
 80043e8:	d10b      	bne.n	8004402 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
 8004428:	e041      	b.n	80044ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b60      	cmp	r3, #96	@ 0x60
 8004434:	d125      	bne.n	8004482 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	d10b      	bne.n	800446a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe ff41 	bl	8003302 <HAL_I2C_AbortCpltCallback>
 8004480:	e015      	b.n	80044ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d10b      	bne.n	80044a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fe ff20 	bl	80032ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d113      	bne.n	8004528 <I2C_ITError+0x254>
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b28      	cmp	r3, #40	@ 0x28
 8004504:	d110      	bne.n	8004528 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a0a      	ldr	r2, [pc, #40]	@ (8004534 <I2C_ITError+0x260>)
 800450a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fe fec5 	bl	80032b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	08004875 	.word	0x08004875
 8004534:	ffff0000 	.word	0xffff0000

08004538 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	460b      	mov	r3, r1
 8004546:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d006      	beq.n	8004562 <I2C_MasterRequestWrite+0x2a>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d003      	beq.n	8004562 <I2C_MasterRequestWrite+0x2a>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004560:	d108      	bne.n	8004574 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e00b      	b.n	800458c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	2b12      	cmp	r3, #18
 800457a:	d107      	bne.n	800458c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800458a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fa13 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b2:	d103      	bne.n	80045bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e035      	b.n	800462c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045c8:	d108      	bne.n	80045dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ca:	897b      	ldrh	r3, [r7, #10]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045d8:	611a      	str	r2, [r3, #16]
 80045da:	e01b      	b.n	8004614 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045dc:	897b      	ldrh	r3, [r7, #10]
 80045de:	11db      	asrs	r3, r3, #7
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0306 	and.w	r3, r3, #6
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f063 030f 	orn	r3, r3, #15
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	490e      	ldr	r1, [pc, #56]	@ (8004634 <I2C_MasterRequestWrite+0xfc>)
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fa5c 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e010      	b.n	800462c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4907      	ldr	r1, [pc, #28]	@ (8004638 <I2C_MasterRequestWrite+0x100>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fa4c 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	00010008 	.word	0x00010008
 8004638:	00010002 	.word	0x00010002

0800463c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004648:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004650:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004658:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800466e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467c:	2200      	movs	r2, #0
 800467e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	2200      	movs	r2, #0
 800468e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004696:	2b21      	cmp	r3, #33	@ 0x21
 8004698:	d007      	beq.n	80046aa <I2C_DMAXferCplt+0x6e>
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80046a0:	2b22      	cmp	r3, #34	@ 0x22
 80046a2:	d131      	bne.n	8004708 <I2C_DMAXferCplt+0xcc>
 80046a4:	7cbb      	ldrb	r3, [r7, #18]
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d12e      	bne.n	8004708 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046b8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	2b29      	cmp	r3, #41	@ 0x29
 80046c4:	d10a      	bne.n	80046dc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2221      	movs	r2, #33	@ 0x21
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2228      	movs	r2, #40	@ 0x28
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d4:	6978      	ldr	r0, [r7, #20]
 80046d6:	f7fe fdca 	bl	800326e <HAL_I2C_SlaveTxCpltCallback>
 80046da:	e00c      	b.n	80046f6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	2b2a      	cmp	r3, #42	@ 0x2a
 80046e0:	d109      	bne.n	80046f6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2222      	movs	r2, #34	@ 0x22
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2228      	movs	r2, #40	@ 0x28
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046f0:	6978      	ldr	r0, [r7, #20]
 80046f2:	f7fe fdc6 	bl	8003282 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004704:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004706:	e074      	b.n	80047f2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d06e      	beq.n	80047f2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800473c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004744:	d009      	beq.n	800475a <I2C_DMAXferCplt+0x11e>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d006      	beq.n	800475a <I2C_DMAXferCplt+0x11e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004752:	d002      	beq.n	800475a <I2C_DMAXferCplt+0x11e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b20      	cmp	r3, #32
 8004758:	d107      	bne.n	800476a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004768:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004778:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004788:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	f7fe fda8 	bl	80032ee <HAL_I2C_ErrorCallback>
}
 800479e:	e028      	b.n	80047f2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b40      	cmp	r3, #64	@ 0x40
 80047b2:	d10a      	bne.n	80047ca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f7fe fd89 	bl	80032da <HAL_I2C_MemRxCpltCallback>
}
 80047c8:	e013      	b.n	80047f2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d002      	beq.n	80047de <I2C_DMAXferCplt+0x1a2>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d103      	bne.n	80047e6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e4:	e002      	b.n	80047ec <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2212      	movs	r2, #18
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80047ec:	6978      	ldr	r0, [r7, #20]
 80047ee:	f7fc fc39 	bl	8001064 <HAL_I2C_MasterRxCpltCallback>
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004814:	2200      	movs	r2, #0
 8004816:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004824:	2200      	movs	r2, #0
 8004826:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fd fdb5 	bl	8002398 <HAL_DMA_GetError>
 800482e:	4603      	mov	r3, r0
 8004830:	2b02      	cmp	r3, #2
 8004832:	d01b      	beq.n	800486c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004842:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f043 0210 	orr.w	r2, r3, #16
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7fe fd41 	bl	80032ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800488e:	4b4b      	ldr	r3, [pc, #300]	@ (80049bc <I2C_DMAAbort+0x148>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	4a4a      	ldr	r2, [pc, #296]	@ (80049c0 <I2C_DMAAbort+0x14c>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	0a1a      	lsrs	r2, r3, #8
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	00da      	lsls	r2, r3, #3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80048ba:	e00a      	b.n	80048d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3b01      	subs	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d0:	d0ea      	beq.n	80048a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	2200      	movs	r2, #0
 80048e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	2200      	movs	r2, #0
 80048f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004900:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2200      	movs	r2, #0
 8004906:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004914:	2200      	movs	r2, #0
 8004916:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	2200      	movs	r2, #0
 8004926:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b60      	cmp	r3, #96	@ 0x60
 8004942:	d10e      	bne.n	8004962 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800495a:	6978      	ldr	r0, [r7, #20]
 800495c:	f7fe fcd1 	bl	8003302 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004960:	e027      	b.n	80049b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004968:	2b28      	cmp	r3, #40	@ 0x28
 800496a:	d117      	bne.n	800499c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800498a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2228      	movs	r2, #40	@ 0x28
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800499a:	e007      	b.n	80049ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049ac:	6978      	ldr	r0, [r7, #20]
 80049ae:	f7fe fc9e 	bl	80032ee <HAL_I2C_ErrorCallback>
}
 80049b2:	bf00      	nop
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000004 	.word	0x20000004
 80049c0:	14f8b589 	.word	0x14f8b589

080049c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d4:	e048      	b.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d044      	beq.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fd f88d 	bl	8001afc <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d139      	bne.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10d      	bne.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x56>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	43da      	mvns	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	e00c      	b.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d116      	bne.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e023      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d10d      	bne.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	e00c      	b.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	43da      	mvns	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d093      	beq.n	80049d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac6:	e071      	b.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad6:	d123      	bne.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	f043 0204 	orr.w	r2, r3, #4
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e067      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d041      	beq.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	f7fc ffe8 	bl	8001afc <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d136      	bne.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d10c      	bne.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4013      	ands	r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e00b      	b.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e021      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10c      	bne.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e00b      	b.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf14      	ite	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2300      	moveq	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f47f af6d 	bne.w	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c04:	e034      	b.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8b8 	bl	8004d7c <I2C_IsAcknowledgeFailed>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e034      	b.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d028      	beq.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fc ff6d 	bl	8001afc <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11d      	bne.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b80      	cmp	r3, #128	@ 0x80
 8004c40:	d016      	beq.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e007      	b.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b80      	cmp	r3, #128	@ 0x80
 8004c7c:	d1c3      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c94:	e034      	b.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f870 	bl	8004d7c <I2C_IsAcknowledgeFailed>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e034      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d028      	beq.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fc ff25 	bl	8001afc <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11d      	bne.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d016      	beq.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e007      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d1c3      	bne.n	8004c96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d24:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	08db      	lsrs	r3, r3, #3
 8004d2a:	4a13      	ldr	r2, [pc, #76]	@ (8004d78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	0a1a      	lsrs	r2, r3, #8
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	f043 0220 	orr.w	r2, r3, #32
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e008      	b.n	8004d68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d64:	d0e9      	beq.n	8004d3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	20000004 	.word	0x20000004
 8004d78:	14f8b589 	.word	0x14f8b589

08004d7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d92:	d11b      	bne.n	8004dcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	f043 0204 	orr.w	r2, r3, #4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004dea:	d103      	bne.n	8004df4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004df2:	e007      	b.n	8004e04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004dfc:	d102      	bne.n	8004e04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2208      	movs	r2, #8
 8004e02:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e267      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d075      	beq.n	8004f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e2e:	4b88      	ldr	r3, [pc, #544]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d00c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3a:	4b85      	ldr	r3, [pc, #532]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d112      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b82      	ldr	r3, [pc, #520]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	4b7e      	ldr	r3, [pc, #504]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05b      	beq.n	8004f18 <HAL_RCC_OscConfig+0x108>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d157      	bne.n	8004f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e242      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x74>
 8004e76:	4b76      	ldr	r3, [pc, #472]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a75      	ldr	r2, [pc, #468]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e01d      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x98>
 8004e8e:	4b70      	ldr	r3, [pc, #448]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a6f      	ldr	r2, [pc, #444]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004ea8:	4b69      	ldr	r3, [pc, #420]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a68      	ldr	r2, [pc, #416]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b66      	ldr	r3, [pc, #408]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a65      	ldr	r2, [pc, #404]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fc fe18 	bl	8001afc <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fc fe14 	bl	8001afc <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	@ 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e207      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xc0>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fc fe04 	bl	8001afc <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fc fe00 	bl	8001afc <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	@ 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1f3      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	4b51      	ldr	r3, [pc, #324]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xe8>
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d063      	beq.n	8004fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f26:	4b4a      	ldr	r3, [pc, #296]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f32:	4b47      	ldr	r3, [pc, #284]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d11c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3e:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	4b41      	ldr	r3, [pc, #260]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e1c7      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f62:	4b3b      	ldr	r3, [pc, #236]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4937      	ldr	r1, [pc, #220]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	e03a      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f80:	4b34      	ldr	r3, [pc, #208]	@ (8005054 <HAL_RCC_OscConfig+0x244>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fc fdb9 	bl	8001afc <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8e:	f7fc fdb5 	bl	8001afc <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e1a8      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b28      	ldr	r3, [pc, #160]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4925      	ldr	r1, [pc, #148]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	e015      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc2:	4b24      	ldr	r3, [pc, #144]	@ (8005054 <HAL_RCC_OscConfig+0x244>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fc fd98 	bl	8001afc <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fc fd94 	bl	8001afc <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e187      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d036      	beq.n	8005068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d016      	beq.n	8005030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005002:	4b15      	ldr	r3, [pc, #84]	@ (8005058 <HAL_RCC_OscConfig+0x248>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fc fd78 	bl	8001afc <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fc fd74 	bl	8001afc <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e167      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCC_OscConfig+0x240>)
 8005024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x200>
 800502e:	e01b      	b.n	8005068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005030:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <HAL_RCC_OscConfig+0x248>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005036:	f7fc fd61 	bl	8001afc <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	e00e      	b.n	800505c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503e:	f7fc fd5d 	bl	8001afc <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d907      	bls.n	800505c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e150      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
 8005050:	40023800 	.word	0x40023800
 8005054:	42470000 	.word	0x42470000
 8005058:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505c:	4b88      	ldr	r3, [pc, #544]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800505e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ea      	bne.n	800503e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8097 	beq.w	80051a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507a:	4b81      	ldr	r3, [pc, #516]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	4b7d      	ldr	r3, [pc, #500]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	4a7c      	ldr	r2, [pc, #496]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6413      	str	r3, [r2, #64]	@ 0x40
 8005096:	4b7a      	ldr	r3, [pc, #488]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a6:	4b77      	ldr	r3, [pc, #476]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d118      	bne.n	80050e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b2:	4b74      	ldr	r3, [pc, #464]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a73      	ldr	r2, [pc, #460]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050be:	f7fc fd1d 	bl	8001afc <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fc fd19 	bl	8001afc <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e10c      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCC_OscConfig+0x474>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x2ea>
 80050ec:	4b64      	ldr	r3, [pc, #400]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f0:	4a63      	ldr	r2, [pc, #396]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f8:	e01c      	b.n	8005134 <HAL_RCC_OscConfig+0x324>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x30c>
 8005102:	4b5f      	ldr	r3, [pc, #380]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005106:	4a5e      	ldr	r2, [pc, #376]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005108:	f043 0304 	orr.w	r3, r3, #4
 800510c:	6713      	str	r3, [r2, #112]	@ 0x70
 800510e:	4b5c      	ldr	r3, [pc, #368]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005112:	4a5b      	ldr	r2, [pc, #364]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	6713      	str	r3, [r2, #112]	@ 0x70
 800511a:	e00b      	b.n	8005134 <HAL_RCC_OscConfig+0x324>
 800511c:	4b58      	ldr	r3, [pc, #352]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005120:	4a57      	ldr	r2, [pc, #348]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	@ 0x70
 8005128:	4b55      	ldr	r3, [pc, #340]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	4a54      	ldr	r2, [pc, #336]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800512e:	f023 0304 	bic.w	r3, r3, #4
 8005132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d015      	beq.n	8005168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513c:	f7fc fcde 	bl	8001afc <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005142:	e00a      	b.n	800515a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005144:	f7fc fcda 	bl	8001afc <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e0cb      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515a:	4b49      	ldr	r3, [pc, #292]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0ee      	beq.n	8005144 <HAL_RCC_OscConfig+0x334>
 8005166:	e014      	b.n	8005192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005168:	f7fc fcc8 	bl	8001afc <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005170:	f7fc fcc4 	bl	8001afc <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e0b5      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005186:	4b3e      	ldr	r3, [pc, #248]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1ee      	bne.n	8005170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005198:	4b39      	ldr	r3, [pc, #228]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	4a38      	ldr	r2, [pc, #224]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800519e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80a1 	beq.w	80052f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ae:	4b34      	ldr	r3, [pc, #208]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d05c      	beq.n	8005274 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d141      	bne.n	8005246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c2:	4b31      	ldr	r3, [pc, #196]	@ (8005288 <HAL_RCC_OscConfig+0x478>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fc fc98 	bl	8001afc <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fc fc94 	bl	8001afc <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e087      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	4b27      	ldr	r3, [pc, #156]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69da      	ldr	r2, [r3, #28]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	019b      	lsls	r3, r3, #6
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	3b01      	subs	r3, #1
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	491b      	ldr	r1, [pc, #108]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005218:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <HAL_RCC_OscConfig+0x478>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7fc fc6d 	bl	8001afc <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005226:	f7fc fc69 	bl	8001afc <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e05c      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005238:	4b11      	ldr	r3, [pc, #68]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x416>
 8005244:	e054      	b.n	80052f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b10      	ldr	r3, [pc, #64]	@ (8005288 <HAL_RCC_OscConfig+0x478>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fc fc56 	bl	8001afc <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7fc fc52 	bl	8001afc <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e045      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <HAL_RCC_OscConfig+0x470>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f0      	bne.n	8005254 <HAL_RCC_OscConfig+0x444>
 8005272:	e03d      	b.n	80052f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e038      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
 8005280:	40023800 	.word	0x40023800
 8005284:	40007000 	.word	0x40007000
 8005288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x4ec>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d028      	beq.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d121      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d11a      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d111      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	3b01      	subs	r3, #1
 80052d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d107      	bne.n	80052ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0cc      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b68      	ldr	r3, [pc, #416]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d90c      	bls.n	800533c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b65      	ldr	r3, [pc, #404]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b63      	ldr	r3, [pc, #396]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0b8      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005354:	4b59      	ldr	r3, [pc, #356]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a58      	ldr	r2, [pc, #352]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800535e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800536c:	4b53      	ldr	r3, [pc, #332]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a52      	ldr	r2, [pc, #328]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005378:	4b50      	ldr	r3, [pc, #320]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	494d      	ldr	r1, [pc, #308]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d044      	beq.n	8005420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b47      	ldr	r3, [pc, #284]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d119      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e07f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d003      	beq.n	80053be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053be:	4b3f      	ldr	r3, [pc, #252]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e06f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ce:	4b3b      	ldr	r3, [pc, #236]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e067      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053de:	4b37      	ldr	r3, [pc, #220]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 0203 	bic.w	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4934      	ldr	r1, [pc, #208]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f0:	f7fc fb84 	bl	8001afc <HAL_GetTick>
 80053f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f6:	e00a      	b.n	800540e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f8:	f7fc fb80 	bl	8001afc <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e04f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	4b2b      	ldr	r3, [pc, #172]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 020c 	and.w	r2, r3, #12
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	429a      	cmp	r2, r3
 800541e:	d1eb      	bne.n	80053f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005420:	4b25      	ldr	r3, [pc, #148]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d20c      	bcs.n	8005448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b20      	ldr	r3, [pc, #128]	@ (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e032      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005454:	4b19      	ldr	r3, [pc, #100]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4916      	ldr	r1, [pc, #88]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005472:	4b12      	ldr	r3, [pc, #72]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	490e      	ldr	r1, [pc, #56]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005486:	f000 f821 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 800548a:	4602      	mov	r2, r0
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	490a      	ldr	r1, [pc, #40]	@ (80054c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	5ccb      	ldrb	r3, [r1, r3]
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 80054a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054a2:	4b09      	ldr	r3, [pc, #36]	@ (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fc fae4 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023c00 	.word	0x40023c00
 80054bc:	40023800 	.word	0x40023800
 80054c0:	0800b7f8 	.word	0x0800b7f8
 80054c4:	20000004 	.word	0x20000004
 80054c8:	20000008 	.word	0x20000008

080054cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d0:	b094      	sub	sp, #80	@ 0x50
 80054d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e4:	4b79      	ldr	r3, [pc, #484]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x200>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d00d      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x40>
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	f200 80e1 	bhi.w	80056b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x34>
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <HAL_RCC_GetSysClockFreq+0x3a>
 80054fe:	e0db      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005500:	4b73      	ldr	r3, [pc, #460]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005502:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005504:	e0db      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005506:	4b73      	ldr	r3, [pc, #460]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800550a:	e0d8      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800550c:	4b6f      	ldr	r3, [pc, #444]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x200>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005514:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005516:	4b6d      	ldr	r3, [pc, #436]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d063      	beq.n	80055ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005522:	4b6a      	ldr	r3, [pc, #424]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	2200      	movs	r2, #0
 800552a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800552c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800552e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005534:	633b      	str	r3, [r7, #48]	@ 0x30
 8005536:	2300      	movs	r3, #0
 8005538:	637b      	str	r3, [r7, #52]	@ 0x34
 800553a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800553e:	4622      	mov	r2, r4
 8005540:	462b      	mov	r3, r5
 8005542:	f04f 0000 	mov.w	r0, #0
 8005546:	f04f 0100 	mov.w	r1, #0
 800554a:	0159      	lsls	r1, r3, #5
 800554c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005550:	0150      	lsls	r0, r2, #5
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4621      	mov	r1, r4
 8005558:	1a51      	subs	r1, r2, r1
 800555a:	6139      	str	r1, [r7, #16]
 800555c:	4629      	mov	r1, r5
 800555e:	eb63 0301 	sbc.w	r3, r3, r1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005570:	4659      	mov	r1, fp
 8005572:	018b      	lsls	r3, r1, #6
 8005574:	4651      	mov	r1, sl
 8005576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800557a:	4651      	mov	r1, sl
 800557c:	018a      	lsls	r2, r1, #6
 800557e:	4651      	mov	r1, sl
 8005580:	ebb2 0801 	subs.w	r8, r2, r1
 8005584:	4659      	mov	r1, fp
 8005586:	eb63 0901 	sbc.w	r9, r3, r1
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800559a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800559e:	4690      	mov	r8, r2
 80055a0:	4699      	mov	r9, r3
 80055a2:	4623      	mov	r3, r4
 80055a4:	eb18 0303 	adds.w	r3, r8, r3
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	462b      	mov	r3, r5
 80055ac:	eb49 0303 	adc.w	r3, r9, r3
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055be:	4629      	mov	r1, r5
 80055c0:	024b      	lsls	r3, r1, #9
 80055c2:	4621      	mov	r1, r4
 80055c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055c8:	4621      	mov	r1, r4
 80055ca:	024a      	lsls	r2, r1, #9
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d2:	2200      	movs	r2, #0
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055dc:	f7fb fb5c 	bl	8000c98 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4613      	mov	r3, r2
 80055e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e8:	e058      	b.n	800569c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ea:	4b38      	ldr	r3, [pc, #224]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x200>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	099b      	lsrs	r3, r3, #6
 80055f0:	2200      	movs	r2, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	4611      	mov	r1, r2
 80055f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055fa:	623b      	str	r3, [r7, #32]
 80055fc:	2300      	movs	r3, #0
 80055fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005604:	4642      	mov	r2, r8
 8005606:	464b      	mov	r3, r9
 8005608:	f04f 0000 	mov.w	r0, #0
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	0159      	lsls	r1, r3, #5
 8005612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005616:	0150      	lsls	r0, r2, #5
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4641      	mov	r1, r8
 800561e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005622:	4649      	mov	r1, r9
 8005624:	eb63 0b01 	sbc.w	fp, r3, r1
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800563c:	ebb2 040a 	subs.w	r4, r2, sl
 8005640:	eb63 050b 	sbc.w	r5, r3, fp
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	00eb      	lsls	r3, r5, #3
 800564e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005652:	00e2      	lsls	r2, r4, #3
 8005654:	4614      	mov	r4, r2
 8005656:	461d      	mov	r5, r3
 8005658:	4643      	mov	r3, r8
 800565a:	18e3      	adds	r3, r4, r3
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	464b      	mov	r3, r9
 8005660:	eb45 0303 	adc.w	r3, r5, r3
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005672:	4629      	mov	r1, r5
 8005674:	028b      	lsls	r3, r1, #10
 8005676:	4621      	mov	r1, r4
 8005678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800567c:	4621      	mov	r1, r4
 800567e:	028a      	lsls	r2, r1, #10
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005686:	2200      	movs	r2, #0
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	61fa      	str	r2, [r7, #28]
 800568c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005690:	f7fb fb02 	bl	8000c98 <__aeabi_uldivmod>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4613      	mov	r3, r2
 800569a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800569c:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x200>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	3301      	adds	r3, #1
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80056ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056b6:	e002      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3750      	adds	r7, #80	@ 0x50
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800
 80056d0:	00f42400 	.word	0x00f42400
 80056d4:	007a1200 	.word	0x007a1200

080056d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056dc:	4b03      	ldr	r3, [pc, #12]	@ (80056ec <HAL_RCC_GetHCLKFreq+0x14>)
 80056de:	681b      	ldr	r3, [r3, #0]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000004 	.word	0x20000004

080056f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f4:	f7ff fff0 	bl	80056d8 <HAL_RCC_GetHCLKFreq>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	0a9b      	lsrs	r3, r3, #10
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	4903      	ldr	r1, [pc, #12]	@ (8005714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005706:	5ccb      	ldrb	r3, [r1, r3]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40023800 	.word	0x40023800
 8005714:	0800b808 	.word	0x0800b808

08005718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800571c:	f7ff ffdc 	bl	80056d8 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0b5b      	lsrs	r3, r3, #13
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4903      	ldr	r1, [pc, #12]	@ (800573c <HAL_RCC_GetPCLK2Freq+0x24>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	0800b808 	.word	0x0800b808

08005740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e041      	b.n	80057d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fb ff56 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 fa70 	bl	8005c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d001      	beq.n	80057f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e044      	b.n	8005882 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1e      	ldr	r2, [pc, #120]	@ (8005890 <HAL_TIM_Base_Start_IT+0xb0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x6c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d013      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x6c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1a      	ldr	r2, [pc, #104]	@ (8005894 <HAL_TIM_Base_Start_IT+0xb4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x6c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a19      	ldr	r2, [pc, #100]	@ (8005898 <HAL_TIM_Base_Start_IT+0xb8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x6c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a17      	ldr	r2, [pc, #92]	@ (800589c <HAL_TIM_Base_Start_IT+0xbc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x6c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a16      	ldr	r2, [pc, #88]	@ (80058a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d111      	bne.n	8005870 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d010      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	e007      	b.n	8005880 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40014000 	.word	0x40014000

080058a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d020      	beq.n	8005908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01b      	beq.n	8005908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0202 	mvn.w	r2, #2
 80058d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f999 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 80058f4:	e005      	b.n	8005902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f98b 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f99c 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d020      	beq.n	8005954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0204 	mvn.w	r2, #4
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f973 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f965 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f976 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d020      	beq.n	80059a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01b      	beq.n	80059a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0208 	mvn.w	r2, #8
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f94d 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f93f 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f950 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d020      	beq.n	80059ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01b      	beq.n	80059ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0210 	mvn.w	r2, #16
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2208      	movs	r2, #8
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f927 	bl	8005c26 <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f919 	bl	8005c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f92a 	bl	8005c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0201 	mvn.w	r2, #1
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fb faf2 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fab6 	bl	8005fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00c      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8fb 	bl	8005c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0220 	mvn.w	r2, #32
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa88 	bl	8005f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0b4      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x186>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad8:	d03e      	beq.n	8005b58 <HAL_TIM_ConfigClockSource+0xd4>
 8005ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ade:	f200 8087 	bhi.w	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae6:	f000 8086 	beq.w	8005bf6 <HAL_TIM_ConfigClockSource+0x172>
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aee:	d87f      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b70      	cmp	r3, #112	@ 0x70
 8005af2:	d01a      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0xa6>
 8005af4:	2b70      	cmp	r3, #112	@ 0x70
 8005af6:	d87b      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b60      	cmp	r3, #96	@ 0x60
 8005afa:	d050      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x11a>
 8005afc:	2b60      	cmp	r3, #96	@ 0x60
 8005afe:	d877      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b50      	cmp	r3, #80	@ 0x50
 8005b02:	d03c      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0xfa>
 8005b04:	2b50      	cmp	r3, #80	@ 0x50
 8005b06:	d873      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d058      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x13a>
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d86f      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b30      	cmp	r3, #48	@ 0x30
 8005b12:	d064      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b14:	2b30      	cmp	r3, #48	@ 0x30
 8005b16:	d86b      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d060      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d867      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d05c      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d05a      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b28:	e062      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b3a:	f000 f999 	bl	8005e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	609a      	str	r2, [r3, #8]
      break;
 8005b56:	e04f      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b68:	f000 f982 	bl	8005e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b7a:	609a      	str	r2, [r3, #8]
      break;
 8005b7c:	e03c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 f8f6 	bl	8005d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2150      	movs	r1, #80	@ 0x50
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f94f 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e02c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 f915 	bl	8005dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2160      	movs	r1, #96	@ 0x60
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f93f 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e01c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 f8d6 	bl	8005d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2140      	movs	r1, #64	@ 0x40
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f92f 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e00c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f000 f926 	bl	8005e3a <TIM_ITRx_SetConfig>
      break;
 8005bee:	e003      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf4:	e000      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a3a      	ldr	r2, [pc, #232]	@ (8005d60 <TIM_Base_SetConfig+0xfc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00f      	beq.n	8005c9c <TIM_Base_SetConfig+0x38>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c82:	d00b      	beq.n	8005c9c <TIM_Base_SetConfig+0x38>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a37      	ldr	r2, [pc, #220]	@ (8005d64 <TIM_Base_SetConfig+0x100>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_Base_SetConfig+0x38>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a36      	ldr	r2, [pc, #216]	@ (8005d68 <TIM_Base_SetConfig+0x104>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_Base_SetConfig+0x38>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a35      	ldr	r2, [pc, #212]	@ (8005d6c <TIM_Base_SetConfig+0x108>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d60 <TIM_Base_SetConfig+0xfc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01b      	beq.n	8005cee <TIM_Base_SetConfig+0x8a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cbc:	d017      	beq.n	8005cee <TIM_Base_SetConfig+0x8a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a28      	ldr	r2, [pc, #160]	@ (8005d64 <TIM_Base_SetConfig+0x100>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <TIM_Base_SetConfig+0x8a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a27      	ldr	r2, [pc, #156]	@ (8005d68 <TIM_Base_SetConfig+0x104>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	@ (8005d6c <TIM_Base_SetConfig+0x108>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a25      	ldr	r2, [pc, #148]	@ (8005d70 <TIM_Base_SetConfig+0x10c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_Base_SetConfig+0x8a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a24      	ldr	r2, [pc, #144]	@ (8005d74 <TIM_Base_SetConfig+0x110>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_Base_SetConfig+0x8a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a23      	ldr	r2, [pc, #140]	@ (8005d78 <TIM_Base_SetConfig+0x114>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d108      	bne.n	8005d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a0e      	ldr	r2, [pc, #56]	@ (8005d60 <TIM_Base_SetConfig+0xfc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d103      	bne.n	8005d34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d105      	bne.n	8005d52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f023 0201 	bic.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	611a      	str	r2, [r3, #16]
  }
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0201 	bic.w	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f023 030a 	bic.w	r3, r3, #10
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f023 0210 	bic.w	r2, r3, #16
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	031b      	lsls	r3, r3, #12
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f043 0307 	orr.w	r3, r3, #7
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	609a      	str	r2, [r3, #8]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	021a      	lsls	r2, r3, #8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	609a      	str	r2, [r3, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e050      	b.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d018      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f14:	d013      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a18      	ldr	r2, [pc, #96]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00e      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a16      	ldr	r2, [pc, #88]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a15      	ldr	r2, [pc, #84]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a13      	ldr	r2, [pc, #76]	@ (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d10c      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40014000 	.word	0x40014000

08005f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e042      	b.n	800604c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fb fb42 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	@ 0x24
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fdcb 	bl	8006b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800600c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800601c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800602c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08c      	sub	sp, #48	@ 0x30
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b20      	cmp	r3, #32
 800606c:	d156      	bne.n	800611c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_UART_Transmit_DMA+0x26>
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e04f      	b.n	800611e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	88fa      	ldrh	r2, [r7, #6]
 800608e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2221      	movs	r2, #33	@ 0x21
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	4a21      	ldr	r2, [pc, #132]	@ (8006128 <HAL_UART_Transmit_DMA+0xd4>)
 80060a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	4a20      	ldr	r2, [pc, #128]	@ (800612c <HAL_UART_Transmit_DMA+0xd8>)
 80060ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <HAL_UART_Transmit_DMA+0xdc>)
 80060b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	2200      	movs	r2, #0
 80060bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80060be:	f107 0308 	add.w	r3, r7, #8
 80060c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80060c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ca:	6819      	ldr	r1, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	461a      	mov	r2, r3
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	f7fb fedd 	bl	8001e94 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	617b      	str	r3, [r7, #20]
   return(result);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006104:	627a      	str	r2, [r7, #36]	@ 0x24
 8006106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6a39      	ldr	r1, [r7, #32]
 800610a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	61fb      	str	r3, [r7, #28]
   return(result);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3730      	adds	r7, #48	@ 0x30
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	080066c1 	.word	0x080066c1
 800612c:	0800675b 	.word	0x0800675b
 8006130:	08006777 	.word	0x08006777

08006134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b0ba      	sub	sp, #232	@ 0xe8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800615a:	2300      	movs	r3, #0
 800615c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10f      	bne.n	800619a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <HAL_UART_IRQHandler+0x66>
 8006186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fc40 	bl	8006a18 <UART_Receive_IT>
      return;
 8006198:	e25b      	b.n	8006652 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800619a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80de 	beq.w	8006360 <HAL_UART_IRQHandler+0x22c>
 80061a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80d1 	beq.w	8006360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <HAL_UART_IRQHandler+0xae>
 80061ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	f043 0201 	orr.w	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <HAL_UART_IRQHandler+0xd2>
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fe:	f043 0202 	orr.w	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00b      	beq.n	800622a <HAL_UART_IRQHandler+0xf6>
 8006212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d011      	beq.n	800625a <HAL_UART_IRQHandler+0x126>
 8006236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006252:	f043 0208 	orr.w	r2, r3, #8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 81f2 	beq.w	8006648 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_UART_IRQHandler+0x14e>
 8006270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fbcb 	bl	8006a18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628c:	2b40      	cmp	r3, #64	@ 0x40
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d103      	bne.n	80062ae <HAL_UART_IRQHandler+0x17a>
 80062a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d04f      	beq.n	800634e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fad3 	bl	800685a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062be:	2b40      	cmp	r3, #64	@ 0x40
 80062c0:	d141      	bne.n	8006346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3314      	adds	r3, #20
 80062ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1d9      	bne.n	80062c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d013      	beq.n	800633e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631a:	4a7e      	ldr	r2, [pc, #504]	@ (8006514 <HAL_UART_IRQHandler+0x3e0>)
 800631c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006322:	4618      	mov	r0, r3
 8006324:	f7fb fe7e 	bl	8002024 <HAL_DMA_Abort_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006338:	4610      	mov	r0, r2
 800633a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633c:	e00e      	b.n	800635c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f9a8 	bl	8006694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	e00a      	b.n	800635c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9a4 	bl	8006694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800634c:	e006      	b.n	800635c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f9a0 	bl	8006694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800635a:	e175      	b.n	8006648 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	bf00      	nop
    return;
 800635e:	e173      	b.n	8006648 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 814f 	bne.w	8006608 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800636a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8148 	beq.w	8006608 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 8141 	beq.w	8006608 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a6:	2b40      	cmp	r3, #64	@ 0x40
 80063a8:	f040 80b6 	bne.w	8006518 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8145 	beq.w	800664c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063ca:	429a      	cmp	r2, r3
 80063cc:	f080 813e 	bcs.w	800664c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e2:	f000 8088 	beq.w	80064f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006412:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800641e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800642a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1d9      	bne.n	80063e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3314      	adds	r3, #20
 8006438:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006456:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800645a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800645e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e1      	bne.n	8006432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3314      	adds	r3, #20
 8006474:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800647e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3314      	adds	r3, #20
 800648e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006492:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e3      	bne.n	800646e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064c6:	f023 0310 	bic.w	r3, r3, #16
 80064ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e3      	bne.n	80064b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fb fd27 	bl	8001f44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006504:	b29b      	uxth	r3, r3
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	b29b      	uxth	r3, r3
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8cb 	bl	80066a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006512:	e09b      	b.n	800664c <HAL_UART_IRQHandler+0x518>
 8006514:	08006921 	.word	0x08006921
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006520:	b29b      	uxth	r3, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 808e 	beq.w	8006650 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8089 	beq.w	8006650 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800654e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006562:	647a      	str	r2, [r7, #68]	@ 0x44
 8006564:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e3      	bne.n	800653e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	623b      	str	r3, [r7, #32]
   return(result);
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800659a:	633a      	str	r2, [r7, #48]	@ 0x30
 800659c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e3      	bne.n	8006576 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0310 	bic.w	r3, r3, #16
 80065d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065e0:	61fa      	str	r2, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	617b      	str	r3, [r7, #20]
   return(result);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e3      	bne.n	80065bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f851 	bl	80066a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006606:	e023      	b.n	8006650 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <HAL_UART_IRQHandler+0x4f4>
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f991 	bl	8006948 <UART_Transmit_IT>
    return;
 8006626:	e014      	b.n	8006652 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00e      	beq.n	8006652 <HAL_UART_IRQHandler+0x51e>
 8006634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9d1 	bl	80069e8 <UART_EndTransmit_IT>
    return;
 8006646:	e004      	b.n	8006652 <HAL_UART_IRQHandler+0x51e>
    return;
 8006648:	bf00      	nop
 800664a:	e002      	b.n	8006652 <HAL_UART_IRQHandler+0x51e>
      return;
 800664c:	bf00      	nop
 800664e:	e000      	b.n	8006652 <HAL_UART_IRQHandler+0x51e>
      return;
 8006650:	bf00      	nop
  }
}
 8006652:	37e8      	adds	r7, #232	@ 0xe8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b090      	sub	sp, #64	@ 0x40
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d137      	bne.n	800674c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80066dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066de:	2200      	movs	r2, #0
 80066e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3314      	adds	r3, #20
 80066e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	623b      	str	r3, [r7, #32]
   return(result);
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006702:	633a      	str	r2, [r7, #48]	@ 0x30
 8006704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	60fb      	str	r3, [r7, #12]
   return(result);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
 800672e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	330c      	adds	r3, #12
 8006734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006736:	61fa      	str	r2, [r7, #28]
 8006738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	617b      	str	r3, [r7, #20]
   return(result);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800674a:	e002      	b.n	8006752 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800674c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800674e:	f7ff ff83 	bl	8006658 <HAL_UART_TxCpltCallback>
}
 8006752:	bf00      	nop
 8006754:	3740      	adds	r7, #64	@ 0x40
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006766:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff ff7f 	bl	800666c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006786:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006792:	2b80      	cmp	r3, #128	@ 0x80
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b21      	cmp	r3, #33	@ 0x21
 80067a8:	d108      	bne.n	80067bc <UART_DMAError+0x46>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80067b6:	68b8      	ldr	r0, [r7, #8]
 80067b8:	f000 f827 	bl	800680a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c6:	2b40      	cmp	r3, #64	@ 0x40
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b22      	cmp	r3, #34	@ 0x22
 80067dc:	d108      	bne.n	80067f0 <UART_DMAError+0x7a>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80067ea:	68b8      	ldr	r0, [r7, #8]
 80067ec:	f000 f835 	bl	800685a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f4:	f043 0210 	orr.w	r2, r3, #16
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067fc:	68b8      	ldr	r0, [r7, #8]
 80067fe:	f7ff ff49 	bl	8006694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800680a:	b480      	push	{r7}
 800680c:	b089      	sub	sp, #36	@ 0x24
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	330c      	adds	r3, #12
 8006818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	60bb      	str	r3, [r7, #8]
   return(result);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	61ba      	str	r2, [r7, #24]
 8006834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6979      	ldr	r1, [r7, #20]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	613b      	str	r3, [r7, #16]
   return(result);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800684e:	bf00      	nop
 8006850:	3724      	adds	r7, #36	@ 0x24
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800685a:	b480      	push	{r7}
 800685c:	b095      	sub	sp, #84	@ 0x54
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006882:	643a      	str	r2, [r7, #64]	@ 0x40
 8006884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e5      	bne.n	8006862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3314      	adds	r3, #20
 80068b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d119      	bne.n	8006906 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	330c      	adds	r3, #12
 80068d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f023 0310 	bic.w	r3, r3, #16
 80068e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068f2:	61ba      	str	r2, [r7, #24]
 80068f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6979      	ldr	r1, [r7, #20]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006914:	bf00      	nop
 8006916:	3754      	adds	r7, #84	@ 0x54
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff feaa 	bl	8006694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b21      	cmp	r3, #33	@ 0x21
 800695a:	d13e      	bne.n	80069da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006964:	d114      	bne.n	8006990 <UART_Transmit_IT+0x48>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006982:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	621a      	str	r2, [r3, #32]
 800698e:	e008      	b.n	80069a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	1c59      	adds	r1, r3, #1
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6211      	str	r1, [r2, #32]
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4619      	mov	r1, r3
 80069b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10f      	bne.n	80069d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff fe25 	bl	8006658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08c      	sub	sp, #48	@ 0x30
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b22      	cmp	r3, #34	@ 0x22
 8006a2a:	f040 80ae 	bne.w	8006b8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a36:	d117      	bne.n	8006a68 <UART_Receive_IT+0x50>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d113      	bne.n	8006a68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a60:	1c9a      	adds	r2, r3, #2
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a66:	e026      	b.n	8006ab6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a7a:	d007      	beq.n	8006a8c <UART_Receive_IT+0x74>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <UART_Receive_IT+0x82>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	e008      	b.n	8006aac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d15d      	bne.n	8006b86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0220 	bic.w	r2, r2, #32
 8006ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d135      	bne.n	8006b7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	613b      	str	r3, [r7, #16]
   return(result);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f023 0310 	bic.w	r3, r3, #16
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b36:	623a      	str	r2, [r7, #32]
 8006b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	69f9      	ldr	r1, [r7, #28]
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e5      	bne.n	8006b16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d10a      	bne.n	8006b6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fd97 	bl	80066a8 <HAL_UARTEx_RxEventCallback>
 8006b7a:	e002      	b.n	8006b82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff fd7f 	bl	8006680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e002      	b.n	8006b8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b8a:	2302      	movs	r3, #2
  }
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3730      	adds	r7, #48	@ 0x30
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b98:	b0c0      	sub	sp, #256	@ 0x100
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb0:	68d9      	ldr	r1, [r3, #12]
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	ea40 0301 	orr.w	r3, r0, r1
 8006bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006bec:	f021 010c 	bic.w	r1, r1, #12
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0e:	6999      	ldr	r1, [r3, #24]
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	ea40 0301 	orr.w	r3, r0, r1
 8006c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4b8f      	ldr	r3, [pc, #572]	@ (8006e60 <UART_SetConfig+0x2cc>)
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d005      	beq.n	8006c34 <UART_SetConfig+0xa0>
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8006e64 <UART_SetConfig+0x2d0>)
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d104      	bne.n	8006c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c34:	f7fe fd70 	bl	8005718 <HAL_RCC_GetPCLK2Freq>
 8006c38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c3c:	e003      	b.n	8006c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c3e:	f7fe fd57 	bl	80056f0 <HAL_RCC_GetPCLK1Freq>
 8006c42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c50:	f040 810c 	bne.w	8006e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c66:	4622      	mov	r2, r4
 8006c68:	462b      	mov	r3, r5
 8006c6a:	1891      	adds	r1, r2, r2
 8006c6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c6e:	415b      	adcs	r3, r3
 8006c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c76:	4621      	mov	r1, r4
 8006c78:	eb12 0801 	adds.w	r8, r2, r1
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	eb43 0901 	adc.w	r9, r3, r1
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c96:	4690      	mov	r8, r2
 8006c98:	4699      	mov	r9, r3
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	eb18 0303 	adds.w	r3, r8, r3
 8006ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	eb49 0303 	adc.w	r3, r9, r3
 8006caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	18db      	adds	r3, r3, r3
 8006cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cc8:	4613      	mov	r3, r2
 8006cca:	eb42 0303 	adc.w	r3, r2, r3
 8006cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cd8:	f7f9 ffde 	bl	8000c98 <__aeabi_uldivmod>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4b61      	ldr	r3, [pc, #388]	@ (8006e68 <UART_SetConfig+0x2d4>)
 8006ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	011c      	lsls	r4, r3, #4
 8006cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	1891      	adds	r1, r2, r2
 8006d02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d04:	415b      	adcs	r3, r3
 8006d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8006d12:	4649      	mov	r1, r9
 8006d14:	eb43 0b01 	adc.w	fp, r3, r1
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d2c:	4692      	mov	sl, r2
 8006d2e:	469b      	mov	fp, r3
 8006d30:	4643      	mov	r3, r8
 8006d32:	eb1a 0303 	adds.w	r3, sl, r3
 8006d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	18db      	adds	r3, r3, r3
 8006d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d5e:	4613      	mov	r3, r2
 8006d60:	eb42 0303 	adc.w	r3, r2, r3
 8006d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d6e:	f7f9 ff93 	bl	8000c98 <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	4b3b      	ldr	r3, [pc, #236]	@ (8006e68 <UART_SetConfig+0x2d4>)
 8006d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	2264      	movs	r2, #100	@ 0x64
 8006d82:	fb02 f303 	mul.w	r3, r2, r3
 8006d86:	1acb      	subs	r3, r1, r3
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d8e:	4b36      	ldr	r3, [pc, #216]	@ (8006e68 <UART_SetConfig+0x2d4>)
 8006d90:	fba3 2302 	umull	r2, r3, r3, r2
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d9c:	441c      	add	r4, r3
 8006d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006da8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006db0:	4642      	mov	r2, r8
 8006db2:	464b      	mov	r3, r9
 8006db4:	1891      	adds	r1, r2, r2
 8006db6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006db8:	415b      	adcs	r3, r3
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	1851      	adds	r1, r2, r1
 8006dc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	414b      	adcs	r3, r1
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006dd8:	4659      	mov	r1, fp
 8006dda:	00cb      	lsls	r3, r1, #3
 8006ddc:	4651      	mov	r1, sl
 8006dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006de2:	4651      	mov	r1, sl
 8006de4:	00ca      	lsls	r2, r1, #3
 8006de6:	4610      	mov	r0, r2
 8006de8:	4619      	mov	r1, r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	4642      	mov	r2, r8
 8006dee:	189b      	adds	r3, r3, r2
 8006df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006df4:	464b      	mov	r3, r9
 8006df6:	460a      	mov	r2, r1
 8006df8:	eb42 0303 	adc.w	r3, r2, r3
 8006dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e14:	460b      	mov	r3, r1
 8006e16:	18db      	adds	r3, r3, r3
 8006e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	eb42 0303 	adc.w	r3, r2, r3
 8006e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e2a:	f7f9 ff35 	bl	8000c98 <__aeabi_uldivmod>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <UART_SetConfig+0x2d4>)
 8006e34:	fba3 1302 	umull	r1, r3, r3, r2
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	2164      	movs	r1, #100	@ 0x64
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	3332      	adds	r3, #50	@ 0x32
 8006e46:	4a08      	ldr	r2, [pc, #32]	@ (8006e68 <UART_SetConfig+0x2d4>)
 8006e48:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	f003 0207 	and.w	r2, r3, #7
 8006e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4422      	add	r2, r4
 8006e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e5c:	e106      	b.n	800706c <UART_SetConfig+0x4d8>
 8006e5e:	bf00      	nop
 8006e60:	40011000 	.word	0x40011000
 8006e64:	40011400 	.word	0x40011400
 8006e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	1891      	adds	r1, r2, r2
 8006e84:	6239      	str	r1, [r7, #32]
 8006e86:	415b      	adcs	r3, r3
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e8e:	4641      	mov	r1, r8
 8006e90:	1854      	adds	r4, r2, r1
 8006e92:	4649      	mov	r1, r9
 8006e94:	eb43 0501 	adc.w	r5, r3, r1
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	00eb      	lsls	r3, r5, #3
 8006ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ea6:	00e2      	lsls	r2, r4, #3
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	461d      	mov	r5, r3
 8006eac:	4643      	mov	r3, r8
 8006eae:	18e3      	adds	r3, r4, r3
 8006eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	eb45 0303 	adc.w	r3, r5, r3
 8006eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006eda:	4629      	mov	r1, r5
 8006edc:	008b      	lsls	r3, r1, #2
 8006ede:	4621      	mov	r1, r4
 8006ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	008a      	lsls	r2, r1, #2
 8006ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006eec:	f7f9 fed4 	bl	8000c98 <__aeabi_uldivmod>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4b60      	ldr	r3, [pc, #384]	@ (8007078 <UART_SetConfig+0x4e4>)
 8006ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	011c      	lsls	r4, r3, #4
 8006efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	1891      	adds	r1, r2, r2
 8006f16:	61b9      	str	r1, [r7, #24]
 8006f18:	415b      	adcs	r3, r3
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f20:	4641      	mov	r1, r8
 8006f22:	1851      	adds	r1, r2, r1
 8006f24:	6139      	str	r1, [r7, #16]
 8006f26:	4649      	mov	r1, r9
 8006f28:	414b      	adcs	r3, r1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f38:	4659      	mov	r1, fp
 8006f3a:	00cb      	lsls	r3, r1, #3
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f42:	4651      	mov	r1, sl
 8006f44:	00ca      	lsls	r2, r1, #3
 8006f46:	4610      	mov	r0, r2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	189b      	adds	r3, r3, r2
 8006f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f54:	464b      	mov	r3, r9
 8006f56:	460a      	mov	r2, r1
 8006f58:	eb42 0303 	adc.w	r3, r2, r3
 8006f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f78:	4649      	mov	r1, r9
 8006f7a:	008b      	lsls	r3, r1, #2
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f82:	4641      	mov	r1, r8
 8006f84:	008a      	lsls	r2, r1, #2
 8006f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f8a:	f7f9 fe85 	bl	8000c98 <__aeabi_uldivmod>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4611      	mov	r1, r2
 8006f94:	4b38      	ldr	r3, [pc, #224]	@ (8007078 <UART_SetConfig+0x4e4>)
 8006f96:	fba3 2301 	umull	r2, r3, r3, r1
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	2264      	movs	r2, #100	@ 0x64
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	1acb      	subs	r3, r1, r3
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	3332      	adds	r3, #50	@ 0x32
 8006fa8:	4a33      	ldr	r2, [pc, #204]	@ (8007078 <UART_SetConfig+0x4e4>)
 8006faa:	fba2 2303 	umull	r2, r3, r2, r3
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fb4:	441c      	add	r4, r3
 8006fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fba:	2200      	movs	r2, #0
 8006fbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	1891      	adds	r1, r2, r2
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	415b      	adcs	r3, r3
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	1851      	adds	r1, r2, r1
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	4649      	mov	r1, r9
 8006fdc:	414b      	adcs	r3, r1
 8006fde:	607b      	str	r3, [r7, #4]
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fec:	4659      	mov	r1, fp
 8006fee:	00cb      	lsls	r3, r1, #3
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	00ca      	lsls	r2, r1, #3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	4642      	mov	r2, r8
 8007002:	189b      	adds	r3, r3, r2
 8007004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007006:	464b      	mov	r3, r9
 8007008:	460a      	mov	r2, r1
 800700a:	eb42 0303 	adc.w	r3, r2, r3
 800700e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	663b      	str	r3, [r7, #96]	@ 0x60
 800701a:	667a      	str	r2, [r7, #100]	@ 0x64
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007028:	4649      	mov	r1, r9
 800702a:	008b      	lsls	r3, r1, #2
 800702c:	4641      	mov	r1, r8
 800702e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007032:	4641      	mov	r1, r8
 8007034:	008a      	lsls	r2, r1, #2
 8007036:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800703a:	f7f9 fe2d 	bl	8000c98 <__aeabi_uldivmod>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <UART_SetConfig+0x4e4>)
 8007044:	fba3 1302 	umull	r1, r3, r3, r2
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	2164      	movs	r1, #100	@ 0x64
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	3332      	adds	r3, #50	@ 0x32
 8007056:	4a08      	ldr	r2, [pc, #32]	@ (8007078 <UART_SetConfig+0x4e4>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	095b      	lsrs	r3, r3, #5
 800705e:	f003 020f 	and.w	r2, r3, #15
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4422      	add	r2, r4
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007072:	46bd      	mov	sp, r7
 8007074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007078:	51eb851f 	.word	0x51eb851f

0800707c <__cvt>:
 800707c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	ec57 6b10 	vmov	r6, r7, d0
 8007084:	2f00      	cmp	r7, #0
 8007086:	460c      	mov	r4, r1
 8007088:	4619      	mov	r1, r3
 800708a:	463b      	mov	r3, r7
 800708c:	bfbb      	ittet	lt
 800708e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007092:	461f      	movlt	r7, r3
 8007094:	2300      	movge	r3, #0
 8007096:	232d      	movlt	r3, #45	@ 0x2d
 8007098:	700b      	strb	r3, [r1, #0]
 800709a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800709c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80070a0:	4691      	mov	r9, r2
 80070a2:	f023 0820 	bic.w	r8, r3, #32
 80070a6:	bfbc      	itt	lt
 80070a8:	4632      	movlt	r2, r6
 80070aa:	4616      	movlt	r6, r2
 80070ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070b0:	d005      	beq.n	80070be <__cvt+0x42>
 80070b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070b6:	d100      	bne.n	80070ba <__cvt+0x3e>
 80070b8:	3401      	adds	r4, #1
 80070ba:	2102      	movs	r1, #2
 80070bc:	e000      	b.n	80070c0 <__cvt+0x44>
 80070be:	2103      	movs	r1, #3
 80070c0:	ab03      	add	r3, sp, #12
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	ab02      	add	r3, sp, #8
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	ec47 6b10 	vmov	d0, r6, r7
 80070cc:	4653      	mov	r3, sl
 80070ce:	4622      	mov	r2, r4
 80070d0:	f001 f8aa 	bl	8008228 <_dtoa_r>
 80070d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070d8:	4605      	mov	r5, r0
 80070da:	d119      	bne.n	8007110 <__cvt+0x94>
 80070dc:	f019 0f01 	tst.w	r9, #1
 80070e0:	d00e      	beq.n	8007100 <__cvt+0x84>
 80070e2:	eb00 0904 	add.w	r9, r0, r4
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	4630      	mov	r0, r6
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 fcf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80070f2:	b108      	cbz	r0, 80070f8 <__cvt+0x7c>
 80070f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80070f8:	2230      	movs	r2, #48	@ 0x30
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	454b      	cmp	r3, r9
 80070fe:	d31e      	bcc.n	800713e <__cvt+0xc2>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007104:	1b5b      	subs	r3, r3, r5
 8007106:	4628      	mov	r0, r5
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	b004      	add	sp, #16
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007114:	eb00 0904 	add.w	r9, r0, r4
 8007118:	d1e5      	bne.n	80070e6 <__cvt+0x6a>
 800711a:	7803      	ldrb	r3, [r0, #0]
 800711c:	2b30      	cmp	r3, #48	@ 0x30
 800711e:	d10a      	bne.n	8007136 <__cvt+0xba>
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	4630      	mov	r0, r6
 8007126:	4639      	mov	r1, r7
 8007128:	f7f9 fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800712c:	b918      	cbnz	r0, 8007136 <__cvt+0xba>
 800712e:	f1c4 0401 	rsb	r4, r4, #1
 8007132:	f8ca 4000 	str.w	r4, [sl]
 8007136:	f8da 3000 	ldr.w	r3, [sl]
 800713a:	4499      	add	r9, r3
 800713c:	e7d3      	b.n	80070e6 <__cvt+0x6a>
 800713e:	1c59      	adds	r1, r3, #1
 8007140:	9103      	str	r1, [sp, #12]
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	e7d9      	b.n	80070fa <__cvt+0x7e>

08007146 <__exponent>:
 8007146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007148:	2900      	cmp	r1, #0
 800714a:	bfba      	itte	lt
 800714c:	4249      	neglt	r1, r1
 800714e:	232d      	movlt	r3, #45	@ 0x2d
 8007150:	232b      	movge	r3, #43	@ 0x2b
 8007152:	2909      	cmp	r1, #9
 8007154:	7002      	strb	r2, [r0, #0]
 8007156:	7043      	strb	r3, [r0, #1]
 8007158:	dd29      	ble.n	80071ae <__exponent+0x68>
 800715a:	f10d 0307 	add.w	r3, sp, #7
 800715e:	461d      	mov	r5, r3
 8007160:	270a      	movs	r7, #10
 8007162:	461a      	mov	r2, r3
 8007164:	fbb1 f6f7 	udiv	r6, r1, r7
 8007168:	fb07 1416 	mls	r4, r7, r6, r1
 800716c:	3430      	adds	r4, #48	@ 0x30
 800716e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007172:	460c      	mov	r4, r1
 8007174:	2c63      	cmp	r4, #99	@ 0x63
 8007176:	f103 33ff 	add.w	r3, r3, #4294967295
 800717a:	4631      	mov	r1, r6
 800717c:	dcf1      	bgt.n	8007162 <__exponent+0x1c>
 800717e:	3130      	adds	r1, #48	@ 0x30
 8007180:	1e94      	subs	r4, r2, #2
 8007182:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007186:	1c41      	adds	r1, r0, #1
 8007188:	4623      	mov	r3, r4
 800718a:	42ab      	cmp	r3, r5
 800718c:	d30a      	bcc.n	80071a4 <__exponent+0x5e>
 800718e:	f10d 0309 	add.w	r3, sp, #9
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	42ac      	cmp	r4, r5
 8007196:	bf88      	it	hi
 8007198:	2300      	movhi	r3, #0
 800719a:	3302      	adds	r3, #2
 800719c:	4403      	add	r3, r0
 800719e:	1a18      	subs	r0, r3, r0
 80071a0:	b003      	add	sp, #12
 80071a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071ac:	e7ed      	b.n	800718a <__exponent+0x44>
 80071ae:	2330      	movs	r3, #48	@ 0x30
 80071b0:	3130      	adds	r1, #48	@ 0x30
 80071b2:	7083      	strb	r3, [r0, #2]
 80071b4:	70c1      	strb	r1, [r0, #3]
 80071b6:	1d03      	adds	r3, r0, #4
 80071b8:	e7f1      	b.n	800719e <__exponent+0x58>
	...

080071bc <_printf_float>:
 80071bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c0:	b08d      	sub	sp, #52	@ 0x34
 80071c2:	460c      	mov	r4, r1
 80071c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80071c8:	4616      	mov	r6, r2
 80071ca:	461f      	mov	r7, r3
 80071cc:	4605      	mov	r5, r0
 80071ce:	f000 ff23 	bl	8008018 <_localeconv_r>
 80071d2:	6803      	ldr	r3, [r0, #0]
 80071d4:	9304      	str	r3, [sp, #16]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7f9 f852 	bl	8000280 <strlen>
 80071dc:	2300      	movs	r3, #0
 80071de:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e0:	f8d8 3000 	ldr.w	r3, [r8]
 80071e4:	9005      	str	r0, [sp, #20]
 80071e6:	3307      	adds	r3, #7
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	f103 0208 	add.w	r2, r3, #8
 80071f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071f4:	f8d4 b000 	ldr.w	fp, [r4]
 80071f8:	f8c8 2000 	str.w	r2, [r8]
 80071fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007200:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007204:	9307      	str	r3, [sp, #28]
 8007206:	f8cd 8018 	str.w	r8, [sp, #24]
 800720a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800720e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007212:	4b9c      	ldr	r3, [pc, #624]	@ (8007484 <_printf_float+0x2c8>)
 8007214:	f04f 32ff 	mov.w	r2, #4294967295
 8007218:	f7f9 fc90 	bl	8000b3c <__aeabi_dcmpun>
 800721c:	bb70      	cbnz	r0, 800727c <_printf_float+0xc0>
 800721e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007222:	4b98      	ldr	r3, [pc, #608]	@ (8007484 <_printf_float+0x2c8>)
 8007224:	f04f 32ff 	mov.w	r2, #4294967295
 8007228:	f7f9 fc6a 	bl	8000b00 <__aeabi_dcmple>
 800722c:	bb30      	cbnz	r0, 800727c <_printf_float+0xc0>
 800722e:	2200      	movs	r2, #0
 8007230:	2300      	movs	r3, #0
 8007232:	4640      	mov	r0, r8
 8007234:	4649      	mov	r1, r9
 8007236:	f7f9 fc59 	bl	8000aec <__aeabi_dcmplt>
 800723a:	b110      	cbz	r0, 8007242 <_printf_float+0x86>
 800723c:	232d      	movs	r3, #45	@ 0x2d
 800723e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007242:	4a91      	ldr	r2, [pc, #580]	@ (8007488 <_printf_float+0x2cc>)
 8007244:	4b91      	ldr	r3, [pc, #580]	@ (800748c <_printf_float+0x2d0>)
 8007246:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800724a:	bf94      	ite	ls
 800724c:	4690      	movls	r8, r2
 800724e:	4698      	movhi	r8, r3
 8007250:	2303      	movs	r3, #3
 8007252:	6123      	str	r3, [r4, #16]
 8007254:	f02b 0304 	bic.w	r3, fp, #4
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	f04f 0900 	mov.w	r9, #0
 800725e:	9700      	str	r7, [sp, #0]
 8007260:	4633      	mov	r3, r6
 8007262:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007264:	4621      	mov	r1, r4
 8007266:	4628      	mov	r0, r5
 8007268:	f000 f9d2 	bl	8007610 <_printf_common>
 800726c:	3001      	adds	r0, #1
 800726e:	f040 808d 	bne.w	800738c <_printf_float+0x1d0>
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	b00d      	add	sp, #52	@ 0x34
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	f7f9 fc5a 	bl	8000b3c <__aeabi_dcmpun>
 8007288:	b140      	cbz	r0, 800729c <_printf_float+0xe0>
 800728a:	464b      	mov	r3, r9
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfbc      	itt	lt
 8007290:	232d      	movlt	r3, #45	@ 0x2d
 8007292:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007296:	4a7e      	ldr	r2, [pc, #504]	@ (8007490 <_printf_float+0x2d4>)
 8007298:	4b7e      	ldr	r3, [pc, #504]	@ (8007494 <_printf_float+0x2d8>)
 800729a:	e7d4      	b.n	8007246 <_printf_float+0x8a>
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80072a2:	9206      	str	r2, [sp, #24]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	d13b      	bne.n	8007320 <_printf_float+0x164>
 80072a8:	2306      	movs	r3, #6
 80072aa:	6063      	str	r3, [r4, #4]
 80072ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80072b0:	2300      	movs	r3, #0
 80072b2:	6022      	str	r2, [r4, #0]
 80072b4:	9303      	str	r3, [sp, #12]
 80072b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80072b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80072bc:	ab09      	add	r3, sp, #36	@ 0x24
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	6861      	ldr	r1, [r4, #4]
 80072c2:	ec49 8b10 	vmov	d0, r8, r9
 80072c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80072ca:	4628      	mov	r0, r5
 80072cc:	f7ff fed6 	bl	800707c <__cvt>
 80072d0:	9b06      	ldr	r3, [sp, #24]
 80072d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072d4:	2b47      	cmp	r3, #71	@ 0x47
 80072d6:	4680      	mov	r8, r0
 80072d8:	d129      	bne.n	800732e <_printf_float+0x172>
 80072da:	1cc8      	adds	r0, r1, #3
 80072dc:	db02      	blt.n	80072e4 <_printf_float+0x128>
 80072de:	6863      	ldr	r3, [r4, #4]
 80072e0:	4299      	cmp	r1, r3
 80072e2:	dd41      	ble.n	8007368 <_printf_float+0x1ac>
 80072e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80072e8:	fa5f fa8a 	uxtb.w	sl, sl
 80072ec:	3901      	subs	r1, #1
 80072ee:	4652      	mov	r2, sl
 80072f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80072f6:	f7ff ff26 	bl	8007146 <__exponent>
 80072fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072fc:	1813      	adds	r3, r2, r0
 80072fe:	2a01      	cmp	r2, #1
 8007300:	4681      	mov	r9, r0
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	dc02      	bgt.n	800730c <_printf_float+0x150>
 8007306:	6822      	ldr	r2, [r4, #0]
 8007308:	07d2      	lsls	r2, r2, #31
 800730a:	d501      	bpl.n	8007310 <_printf_float+0x154>
 800730c:	3301      	adds	r3, #1
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0a2      	beq.n	800725e <_printf_float+0xa2>
 8007318:	232d      	movs	r3, #45	@ 0x2d
 800731a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800731e:	e79e      	b.n	800725e <_printf_float+0xa2>
 8007320:	9a06      	ldr	r2, [sp, #24]
 8007322:	2a47      	cmp	r2, #71	@ 0x47
 8007324:	d1c2      	bne.n	80072ac <_printf_float+0xf0>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1c0      	bne.n	80072ac <_printf_float+0xf0>
 800732a:	2301      	movs	r3, #1
 800732c:	e7bd      	b.n	80072aa <_printf_float+0xee>
 800732e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007332:	d9db      	bls.n	80072ec <_printf_float+0x130>
 8007334:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007338:	d118      	bne.n	800736c <_printf_float+0x1b0>
 800733a:	2900      	cmp	r1, #0
 800733c:	6863      	ldr	r3, [r4, #4]
 800733e:	dd0b      	ble.n	8007358 <_printf_float+0x19c>
 8007340:	6121      	str	r1, [r4, #16]
 8007342:	b913      	cbnz	r3, 800734a <_printf_float+0x18e>
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	07d0      	lsls	r0, r2, #31
 8007348:	d502      	bpl.n	8007350 <_printf_float+0x194>
 800734a:	3301      	adds	r3, #1
 800734c:	440b      	add	r3, r1
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	e7db      	b.n	8007310 <_printf_float+0x154>
 8007358:	b913      	cbnz	r3, 8007360 <_printf_float+0x1a4>
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	07d2      	lsls	r2, r2, #31
 800735e:	d501      	bpl.n	8007364 <_printf_float+0x1a8>
 8007360:	3302      	adds	r3, #2
 8007362:	e7f4      	b.n	800734e <_printf_float+0x192>
 8007364:	2301      	movs	r3, #1
 8007366:	e7f2      	b.n	800734e <_printf_float+0x192>
 8007368:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800736c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800736e:	4299      	cmp	r1, r3
 8007370:	db05      	blt.n	800737e <_printf_float+0x1c2>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	6121      	str	r1, [r4, #16]
 8007376:	07d8      	lsls	r0, r3, #31
 8007378:	d5ea      	bpl.n	8007350 <_printf_float+0x194>
 800737a:	1c4b      	adds	r3, r1, #1
 800737c:	e7e7      	b.n	800734e <_printf_float+0x192>
 800737e:	2900      	cmp	r1, #0
 8007380:	bfd4      	ite	le
 8007382:	f1c1 0202 	rsble	r2, r1, #2
 8007386:	2201      	movgt	r2, #1
 8007388:	4413      	add	r3, r2
 800738a:	e7e0      	b.n	800734e <_printf_float+0x192>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	055a      	lsls	r2, r3, #21
 8007390:	d407      	bmi.n	80073a2 <_printf_float+0x1e6>
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	4642      	mov	r2, r8
 8007396:	4631      	mov	r1, r6
 8007398:	4628      	mov	r0, r5
 800739a:	47b8      	blx	r7
 800739c:	3001      	adds	r0, #1
 800739e:	d12b      	bne.n	80073f8 <_printf_float+0x23c>
 80073a0:	e767      	b.n	8007272 <_printf_float+0xb6>
 80073a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073a6:	f240 80dd 	bls.w	8007564 <_printf_float+0x3a8>
 80073aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073ae:	2200      	movs	r2, #0
 80073b0:	2300      	movs	r3, #0
 80073b2:	f7f9 fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d033      	beq.n	8007422 <_printf_float+0x266>
 80073ba:	4a37      	ldr	r2, [pc, #220]	@ (8007498 <_printf_float+0x2dc>)
 80073bc:	2301      	movs	r3, #1
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f af54 	beq.w	8007272 <_printf_float+0xb6>
 80073ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80073ce:	4543      	cmp	r3, r8
 80073d0:	db02      	blt.n	80073d8 <_printf_float+0x21c>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	07d8      	lsls	r0, r3, #31
 80073d6:	d50f      	bpl.n	80073f8 <_printf_float+0x23c>
 80073d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f af45 	beq.w	8007272 <_printf_float+0xb6>
 80073e8:	f04f 0900 	mov.w	r9, #0
 80073ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80073f0:	f104 0a1a 	add.w	sl, r4, #26
 80073f4:	45c8      	cmp	r8, r9
 80073f6:	dc09      	bgt.n	800740c <_printf_float+0x250>
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	079b      	lsls	r3, r3, #30
 80073fc:	f100 8103 	bmi.w	8007606 <_printf_float+0x44a>
 8007400:	68e0      	ldr	r0, [r4, #12]
 8007402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007404:	4298      	cmp	r0, r3
 8007406:	bfb8      	it	lt
 8007408:	4618      	movlt	r0, r3
 800740a:	e734      	b.n	8007276 <_printf_float+0xba>
 800740c:	2301      	movs	r3, #1
 800740e:	4652      	mov	r2, sl
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f af2b 	beq.w	8007272 <_printf_float+0xb6>
 800741c:	f109 0901 	add.w	r9, r9, #1
 8007420:	e7e8      	b.n	80073f4 <_printf_float+0x238>
 8007422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc39      	bgt.n	800749c <_printf_float+0x2e0>
 8007428:	4a1b      	ldr	r2, [pc, #108]	@ (8007498 <_printf_float+0x2dc>)
 800742a:	2301      	movs	r3, #1
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	f43f af1d 	beq.w	8007272 <_printf_float+0xb6>
 8007438:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800743c:	ea59 0303 	orrs.w	r3, r9, r3
 8007440:	d102      	bne.n	8007448 <_printf_float+0x28c>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	07d9      	lsls	r1, r3, #31
 8007446:	d5d7      	bpl.n	80073f8 <_printf_float+0x23c>
 8007448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f af0d 	beq.w	8007272 <_printf_float+0xb6>
 8007458:	f04f 0a00 	mov.w	sl, #0
 800745c:	f104 0b1a 	add.w	fp, r4, #26
 8007460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007462:	425b      	negs	r3, r3
 8007464:	4553      	cmp	r3, sl
 8007466:	dc01      	bgt.n	800746c <_printf_float+0x2b0>
 8007468:	464b      	mov	r3, r9
 800746a:	e793      	b.n	8007394 <_printf_float+0x1d8>
 800746c:	2301      	movs	r3, #1
 800746e:	465a      	mov	r2, fp
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f aefb 	beq.w	8007272 <_printf_float+0xb6>
 800747c:	f10a 0a01 	add.w	sl, sl, #1
 8007480:	e7ee      	b.n	8007460 <_printf_float+0x2a4>
 8007482:	bf00      	nop
 8007484:	7fefffff 	.word	0x7fefffff
 8007488:	0800b818 	.word	0x0800b818
 800748c:	0800b81c 	.word	0x0800b81c
 8007490:	0800b820 	.word	0x0800b820
 8007494:	0800b824 	.word	0x0800b824
 8007498:	0800b828 	.word	0x0800b828
 800749c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800749e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074a2:	4553      	cmp	r3, sl
 80074a4:	bfa8      	it	ge
 80074a6:	4653      	movge	r3, sl
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	4699      	mov	r9, r3
 80074ac:	dc36      	bgt.n	800751c <_printf_float+0x360>
 80074ae:	f04f 0b00 	mov.w	fp, #0
 80074b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074b6:	f104 021a 	add.w	r2, r4, #26
 80074ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074bc:	9306      	str	r3, [sp, #24]
 80074be:	eba3 0309 	sub.w	r3, r3, r9
 80074c2:	455b      	cmp	r3, fp
 80074c4:	dc31      	bgt.n	800752a <_printf_float+0x36e>
 80074c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c8:	459a      	cmp	sl, r3
 80074ca:	dc3a      	bgt.n	8007542 <_printf_float+0x386>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	07da      	lsls	r2, r3, #31
 80074d0:	d437      	bmi.n	8007542 <_printf_float+0x386>
 80074d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d4:	ebaa 0903 	sub.w	r9, sl, r3
 80074d8:	9b06      	ldr	r3, [sp, #24]
 80074da:	ebaa 0303 	sub.w	r3, sl, r3
 80074de:	4599      	cmp	r9, r3
 80074e0:	bfa8      	it	ge
 80074e2:	4699      	movge	r9, r3
 80074e4:	f1b9 0f00 	cmp.w	r9, #0
 80074e8:	dc33      	bgt.n	8007552 <_printf_float+0x396>
 80074ea:	f04f 0800 	mov.w	r8, #0
 80074ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f2:	f104 0b1a 	add.w	fp, r4, #26
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	ebaa 0303 	sub.w	r3, sl, r3
 80074fc:	eba3 0309 	sub.w	r3, r3, r9
 8007500:	4543      	cmp	r3, r8
 8007502:	f77f af79 	ble.w	80073f8 <_printf_float+0x23c>
 8007506:	2301      	movs	r3, #1
 8007508:	465a      	mov	r2, fp
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	f43f aeae 	beq.w	8007272 <_printf_float+0xb6>
 8007516:	f108 0801 	add.w	r8, r8, #1
 800751a:	e7ec      	b.n	80074f6 <_printf_float+0x33a>
 800751c:	4642      	mov	r2, r8
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	d1c2      	bne.n	80074ae <_printf_float+0x2f2>
 8007528:	e6a3      	b.n	8007272 <_printf_float+0xb6>
 800752a:	2301      	movs	r3, #1
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	9206      	str	r2, [sp, #24]
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	f43f ae9c 	beq.w	8007272 <_printf_float+0xb6>
 800753a:	9a06      	ldr	r2, [sp, #24]
 800753c:	f10b 0b01 	add.w	fp, fp, #1
 8007540:	e7bb      	b.n	80074ba <_printf_float+0x2fe>
 8007542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	47b8      	blx	r7
 800754c:	3001      	adds	r0, #1
 800754e:	d1c0      	bne.n	80074d2 <_printf_float+0x316>
 8007550:	e68f      	b.n	8007272 <_printf_float+0xb6>
 8007552:	9a06      	ldr	r2, [sp, #24]
 8007554:	464b      	mov	r3, r9
 8007556:	4442      	add	r2, r8
 8007558:	4631      	mov	r1, r6
 800755a:	4628      	mov	r0, r5
 800755c:	47b8      	blx	r7
 800755e:	3001      	adds	r0, #1
 8007560:	d1c3      	bne.n	80074ea <_printf_float+0x32e>
 8007562:	e686      	b.n	8007272 <_printf_float+0xb6>
 8007564:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007568:	f1ba 0f01 	cmp.w	sl, #1
 800756c:	dc01      	bgt.n	8007572 <_printf_float+0x3b6>
 800756e:	07db      	lsls	r3, r3, #31
 8007570:	d536      	bpl.n	80075e0 <_printf_float+0x424>
 8007572:	2301      	movs	r3, #1
 8007574:	4642      	mov	r2, r8
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f ae78 	beq.w	8007272 <_printf_float+0xb6>
 8007582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	f43f ae70 	beq.w	8007272 <_printf_float+0xb6>
 8007592:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007596:	2200      	movs	r2, #0
 8007598:	2300      	movs	r3, #0
 800759a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800759e:	f7f9 fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80075a2:	b9c0      	cbnz	r0, 80075d6 <_printf_float+0x41a>
 80075a4:	4653      	mov	r3, sl
 80075a6:	f108 0201 	add.w	r2, r8, #1
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	d10c      	bne.n	80075ce <_printf_float+0x412>
 80075b4:	e65d      	b.n	8007272 <_printf_float+0xb6>
 80075b6:	2301      	movs	r3, #1
 80075b8:	465a      	mov	r2, fp
 80075ba:	4631      	mov	r1, r6
 80075bc:	4628      	mov	r0, r5
 80075be:	47b8      	blx	r7
 80075c0:	3001      	adds	r0, #1
 80075c2:	f43f ae56 	beq.w	8007272 <_printf_float+0xb6>
 80075c6:	f108 0801 	add.w	r8, r8, #1
 80075ca:	45d0      	cmp	r8, sl
 80075cc:	dbf3      	blt.n	80075b6 <_printf_float+0x3fa>
 80075ce:	464b      	mov	r3, r9
 80075d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075d4:	e6df      	b.n	8007396 <_printf_float+0x1da>
 80075d6:	f04f 0800 	mov.w	r8, #0
 80075da:	f104 0b1a 	add.w	fp, r4, #26
 80075de:	e7f4      	b.n	80075ca <_printf_float+0x40e>
 80075e0:	2301      	movs	r3, #1
 80075e2:	4642      	mov	r2, r8
 80075e4:	e7e1      	b.n	80075aa <_printf_float+0x3ee>
 80075e6:	2301      	movs	r3, #1
 80075e8:	464a      	mov	r2, r9
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	f43f ae3e 	beq.w	8007272 <_printf_float+0xb6>
 80075f6:	f108 0801 	add.w	r8, r8, #1
 80075fa:	68e3      	ldr	r3, [r4, #12]
 80075fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075fe:	1a5b      	subs	r3, r3, r1
 8007600:	4543      	cmp	r3, r8
 8007602:	dcf0      	bgt.n	80075e6 <_printf_float+0x42a>
 8007604:	e6fc      	b.n	8007400 <_printf_float+0x244>
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	f104 0919 	add.w	r9, r4, #25
 800760e:	e7f4      	b.n	80075fa <_printf_float+0x43e>

08007610 <_printf_common>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	4616      	mov	r6, r2
 8007616:	4698      	mov	r8, r3
 8007618:	688a      	ldr	r2, [r1, #8]
 800761a:	690b      	ldr	r3, [r1, #16]
 800761c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007620:	4293      	cmp	r3, r2
 8007622:	bfb8      	it	lt
 8007624:	4613      	movlt	r3, r2
 8007626:	6033      	str	r3, [r6, #0]
 8007628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800762c:	4607      	mov	r7, r0
 800762e:	460c      	mov	r4, r1
 8007630:	b10a      	cbz	r2, 8007636 <_printf_common+0x26>
 8007632:	3301      	adds	r3, #1
 8007634:	6033      	str	r3, [r6, #0]
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	0699      	lsls	r1, r3, #26
 800763a:	bf42      	ittt	mi
 800763c:	6833      	ldrmi	r3, [r6, #0]
 800763e:	3302      	addmi	r3, #2
 8007640:	6033      	strmi	r3, [r6, #0]
 8007642:	6825      	ldr	r5, [r4, #0]
 8007644:	f015 0506 	ands.w	r5, r5, #6
 8007648:	d106      	bne.n	8007658 <_printf_common+0x48>
 800764a:	f104 0a19 	add.w	sl, r4, #25
 800764e:	68e3      	ldr	r3, [r4, #12]
 8007650:	6832      	ldr	r2, [r6, #0]
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	42ab      	cmp	r3, r5
 8007656:	dc26      	bgt.n	80076a6 <_printf_common+0x96>
 8007658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800765c:	6822      	ldr	r2, [r4, #0]
 800765e:	3b00      	subs	r3, #0
 8007660:	bf18      	it	ne
 8007662:	2301      	movne	r3, #1
 8007664:	0692      	lsls	r2, r2, #26
 8007666:	d42b      	bmi.n	80076c0 <_printf_common+0xb0>
 8007668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800766c:	4641      	mov	r1, r8
 800766e:	4638      	mov	r0, r7
 8007670:	47c8      	blx	r9
 8007672:	3001      	adds	r0, #1
 8007674:	d01e      	beq.n	80076b4 <_printf_common+0xa4>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	6922      	ldr	r2, [r4, #16]
 800767a:	f003 0306 	and.w	r3, r3, #6
 800767e:	2b04      	cmp	r3, #4
 8007680:	bf02      	ittt	eq
 8007682:	68e5      	ldreq	r5, [r4, #12]
 8007684:	6833      	ldreq	r3, [r6, #0]
 8007686:	1aed      	subeq	r5, r5, r3
 8007688:	68a3      	ldr	r3, [r4, #8]
 800768a:	bf0c      	ite	eq
 800768c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007690:	2500      	movne	r5, #0
 8007692:	4293      	cmp	r3, r2
 8007694:	bfc4      	itt	gt
 8007696:	1a9b      	subgt	r3, r3, r2
 8007698:	18ed      	addgt	r5, r5, r3
 800769a:	2600      	movs	r6, #0
 800769c:	341a      	adds	r4, #26
 800769e:	42b5      	cmp	r5, r6
 80076a0:	d11a      	bne.n	80076d8 <_printf_common+0xc8>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e008      	b.n	80076b8 <_printf_common+0xa8>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4652      	mov	r2, sl
 80076aa:	4641      	mov	r1, r8
 80076ac:	4638      	mov	r0, r7
 80076ae:	47c8      	blx	r9
 80076b0:	3001      	adds	r0, #1
 80076b2:	d103      	bne.n	80076bc <_printf_common+0xac>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076bc:	3501      	adds	r5, #1
 80076be:	e7c6      	b.n	800764e <_printf_common+0x3e>
 80076c0:	18e1      	adds	r1, r4, r3
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	2030      	movs	r0, #48	@ 0x30
 80076c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ca:	4422      	add	r2, r4
 80076cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076d4:	3302      	adds	r3, #2
 80076d6:	e7c7      	b.n	8007668 <_printf_common+0x58>
 80076d8:	2301      	movs	r3, #1
 80076da:	4622      	mov	r2, r4
 80076dc:	4641      	mov	r1, r8
 80076de:	4638      	mov	r0, r7
 80076e0:	47c8      	blx	r9
 80076e2:	3001      	adds	r0, #1
 80076e4:	d0e6      	beq.n	80076b4 <_printf_common+0xa4>
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7d9      	b.n	800769e <_printf_common+0x8e>
	...

080076ec <_printf_i>:
 80076ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	7e0f      	ldrb	r7, [r1, #24]
 80076f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076f4:	2f78      	cmp	r7, #120	@ 0x78
 80076f6:	4691      	mov	r9, r2
 80076f8:	4680      	mov	r8, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	469a      	mov	sl, r3
 80076fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007702:	d807      	bhi.n	8007714 <_printf_i+0x28>
 8007704:	2f62      	cmp	r7, #98	@ 0x62
 8007706:	d80a      	bhi.n	800771e <_printf_i+0x32>
 8007708:	2f00      	cmp	r7, #0
 800770a:	f000 80d2 	beq.w	80078b2 <_printf_i+0x1c6>
 800770e:	2f58      	cmp	r7, #88	@ 0x58
 8007710:	f000 80b9 	beq.w	8007886 <_printf_i+0x19a>
 8007714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800771c:	e03a      	b.n	8007794 <_printf_i+0xa8>
 800771e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007722:	2b15      	cmp	r3, #21
 8007724:	d8f6      	bhi.n	8007714 <_printf_i+0x28>
 8007726:	a101      	add	r1, pc, #4	@ (adr r1, 800772c <_printf_i+0x40>)
 8007728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800772c:	08007785 	.word	0x08007785
 8007730:	08007799 	.word	0x08007799
 8007734:	08007715 	.word	0x08007715
 8007738:	08007715 	.word	0x08007715
 800773c:	08007715 	.word	0x08007715
 8007740:	08007715 	.word	0x08007715
 8007744:	08007799 	.word	0x08007799
 8007748:	08007715 	.word	0x08007715
 800774c:	08007715 	.word	0x08007715
 8007750:	08007715 	.word	0x08007715
 8007754:	08007715 	.word	0x08007715
 8007758:	08007899 	.word	0x08007899
 800775c:	080077c3 	.word	0x080077c3
 8007760:	08007853 	.word	0x08007853
 8007764:	08007715 	.word	0x08007715
 8007768:	08007715 	.word	0x08007715
 800776c:	080078bb 	.word	0x080078bb
 8007770:	08007715 	.word	0x08007715
 8007774:	080077c3 	.word	0x080077c3
 8007778:	08007715 	.word	0x08007715
 800777c:	08007715 	.word	0x08007715
 8007780:	0800785b 	.word	0x0800785b
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	1d1a      	adds	r2, r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6032      	str	r2, [r6, #0]
 800778c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007794:	2301      	movs	r3, #1
 8007796:	e09d      	b.n	80078d4 <_printf_i+0x1e8>
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	6820      	ldr	r0, [r4, #0]
 800779c:	1d19      	adds	r1, r3, #4
 800779e:	6031      	str	r1, [r6, #0]
 80077a0:	0606      	lsls	r6, r0, #24
 80077a2:	d501      	bpl.n	80077a8 <_printf_i+0xbc>
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	e003      	b.n	80077b0 <_printf_i+0xc4>
 80077a8:	0645      	lsls	r5, r0, #25
 80077aa:	d5fb      	bpl.n	80077a4 <_printf_i+0xb8>
 80077ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	da03      	bge.n	80077bc <_printf_i+0xd0>
 80077b4:	232d      	movs	r3, #45	@ 0x2d
 80077b6:	426d      	negs	r5, r5
 80077b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077bc:	4859      	ldr	r0, [pc, #356]	@ (8007924 <_printf_i+0x238>)
 80077be:	230a      	movs	r3, #10
 80077c0:	e011      	b.n	80077e6 <_printf_i+0xfa>
 80077c2:	6821      	ldr	r1, [r4, #0]
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	0608      	lsls	r0, r1, #24
 80077c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80077cc:	d402      	bmi.n	80077d4 <_printf_i+0xe8>
 80077ce:	0649      	lsls	r1, r1, #25
 80077d0:	bf48      	it	mi
 80077d2:	b2ad      	uxthmi	r5, r5
 80077d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80077d6:	4853      	ldr	r0, [pc, #332]	@ (8007924 <_printf_i+0x238>)
 80077d8:	6033      	str	r3, [r6, #0]
 80077da:	bf14      	ite	ne
 80077dc:	230a      	movne	r3, #10
 80077de:	2308      	moveq	r3, #8
 80077e0:	2100      	movs	r1, #0
 80077e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077e6:	6866      	ldr	r6, [r4, #4]
 80077e8:	60a6      	str	r6, [r4, #8]
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	bfa2      	ittt	ge
 80077ee:	6821      	ldrge	r1, [r4, #0]
 80077f0:	f021 0104 	bicge.w	r1, r1, #4
 80077f4:	6021      	strge	r1, [r4, #0]
 80077f6:	b90d      	cbnz	r5, 80077fc <_printf_i+0x110>
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	d04b      	beq.n	8007894 <_printf_i+0x1a8>
 80077fc:	4616      	mov	r6, r2
 80077fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007802:	fb03 5711 	mls	r7, r3, r1, r5
 8007806:	5dc7      	ldrb	r7, [r0, r7]
 8007808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800780c:	462f      	mov	r7, r5
 800780e:	42bb      	cmp	r3, r7
 8007810:	460d      	mov	r5, r1
 8007812:	d9f4      	bls.n	80077fe <_printf_i+0x112>
 8007814:	2b08      	cmp	r3, #8
 8007816:	d10b      	bne.n	8007830 <_printf_i+0x144>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	07df      	lsls	r7, r3, #31
 800781c:	d508      	bpl.n	8007830 <_printf_i+0x144>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	6861      	ldr	r1, [r4, #4]
 8007822:	4299      	cmp	r1, r3
 8007824:	bfde      	ittt	le
 8007826:	2330      	movle	r3, #48	@ 0x30
 8007828:	f806 3c01 	strble.w	r3, [r6, #-1]
 800782c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007830:	1b92      	subs	r2, r2, r6
 8007832:	6122      	str	r2, [r4, #16]
 8007834:	f8cd a000 	str.w	sl, [sp]
 8007838:	464b      	mov	r3, r9
 800783a:	aa03      	add	r2, sp, #12
 800783c:	4621      	mov	r1, r4
 800783e:	4640      	mov	r0, r8
 8007840:	f7ff fee6 	bl	8007610 <_printf_common>
 8007844:	3001      	adds	r0, #1
 8007846:	d14a      	bne.n	80078de <_printf_i+0x1f2>
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	b004      	add	sp, #16
 800784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	f043 0320 	orr.w	r3, r3, #32
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	4833      	ldr	r0, [pc, #204]	@ (8007928 <_printf_i+0x23c>)
 800785c:	2778      	movs	r7, #120	@ 0x78
 800785e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	6831      	ldr	r1, [r6, #0]
 8007866:	061f      	lsls	r7, r3, #24
 8007868:	f851 5b04 	ldr.w	r5, [r1], #4
 800786c:	d402      	bmi.n	8007874 <_printf_i+0x188>
 800786e:	065f      	lsls	r7, r3, #25
 8007870:	bf48      	it	mi
 8007872:	b2ad      	uxthmi	r5, r5
 8007874:	6031      	str	r1, [r6, #0]
 8007876:	07d9      	lsls	r1, r3, #31
 8007878:	bf44      	itt	mi
 800787a:	f043 0320 	orrmi.w	r3, r3, #32
 800787e:	6023      	strmi	r3, [r4, #0]
 8007880:	b11d      	cbz	r5, 800788a <_printf_i+0x19e>
 8007882:	2310      	movs	r3, #16
 8007884:	e7ac      	b.n	80077e0 <_printf_i+0xf4>
 8007886:	4827      	ldr	r0, [pc, #156]	@ (8007924 <_printf_i+0x238>)
 8007888:	e7e9      	b.n	800785e <_printf_i+0x172>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	f023 0320 	bic.w	r3, r3, #32
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	e7f6      	b.n	8007882 <_printf_i+0x196>
 8007894:	4616      	mov	r6, r2
 8007896:	e7bd      	b.n	8007814 <_printf_i+0x128>
 8007898:	6833      	ldr	r3, [r6, #0]
 800789a:	6825      	ldr	r5, [r4, #0]
 800789c:	6961      	ldr	r1, [r4, #20]
 800789e:	1d18      	adds	r0, r3, #4
 80078a0:	6030      	str	r0, [r6, #0]
 80078a2:	062e      	lsls	r6, r5, #24
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	d501      	bpl.n	80078ac <_printf_i+0x1c0>
 80078a8:	6019      	str	r1, [r3, #0]
 80078aa:	e002      	b.n	80078b2 <_printf_i+0x1c6>
 80078ac:	0668      	lsls	r0, r5, #25
 80078ae:	d5fb      	bpl.n	80078a8 <_printf_i+0x1bc>
 80078b0:	8019      	strh	r1, [r3, #0]
 80078b2:	2300      	movs	r3, #0
 80078b4:	6123      	str	r3, [r4, #16]
 80078b6:	4616      	mov	r6, r2
 80078b8:	e7bc      	b.n	8007834 <_printf_i+0x148>
 80078ba:	6833      	ldr	r3, [r6, #0]
 80078bc:	1d1a      	adds	r2, r3, #4
 80078be:	6032      	str	r2, [r6, #0]
 80078c0:	681e      	ldr	r6, [r3, #0]
 80078c2:	6862      	ldr	r2, [r4, #4]
 80078c4:	2100      	movs	r1, #0
 80078c6:	4630      	mov	r0, r6
 80078c8:	f7f8 fc8a 	bl	80001e0 <memchr>
 80078cc:	b108      	cbz	r0, 80078d2 <_printf_i+0x1e6>
 80078ce:	1b80      	subs	r0, r0, r6
 80078d0:	6060      	str	r0, [r4, #4]
 80078d2:	6863      	ldr	r3, [r4, #4]
 80078d4:	6123      	str	r3, [r4, #16]
 80078d6:	2300      	movs	r3, #0
 80078d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078dc:	e7aa      	b.n	8007834 <_printf_i+0x148>
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	4632      	mov	r2, r6
 80078e2:	4649      	mov	r1, r9
 80078e4:	4640      	mov	r0, r8
 80078e6:	47d0      	blx	sl
 80078e8:	3001      	adds	r0, #1
 80078ea:	d0ad      	beq.n	8007848 <_printf_i+0x15c>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	079b      	lsls	r3, r3, #30
 80078f0:	d413      	bmi.n	800791a <_printf_i+0x22e>
 80078f2:	68e0      	ldr	r0, [r4, #12]
 80078f4:	9b03      	ldr	r3, [sp, #12]
 80078f6:	4298      	cmp	r0, r3
 80078f8:	bfb8      	it	lt
 80078fa:	4618      	movlt	r0, r3
 80078fc:	e7a6      	b.n	800784c <_printf_i+0x160>
 80078fe:	2301      	movs	r3, #1
 8007900:	4632      	mov	r2, r6
 8007902:	4649      	mov	r1, r9
 8007904:	4640      	mov	r0, r8
 8007906:	47d0      	blx	sl
 8007908:	3001      	adds	r0, #1
 800790a:	d09d      	beq.n	8007848 <_printf_i+0x15c>
 800790c:	3501      	adds	r5, #1
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	9903      	ldr	r1, [sp, #12]
 8007912:	1a5b      	subs	r3, r3, r1
 8007914:	42ab      	cmp	r3, r5
 8007916:	dcf2      	bgt.n	80078fe <_printf_i+0x212>
 8007918:	e7eb      	b.n	80078f2 <_printf_i+0x206>
 800791a:	2500      	movs	r5, #0
 800791c:	f104 0619 	add.w	r6, r4, #25
 8007920:	e7f5      	b.n	800790e <_printf_i+0x222>
 8007922:	bf00      	nop
 8007924:	0800b82a 	.word	0x0800b82a
 8007928:	0800b83b 	.word	0x0800b83b

0800792c <_scanf_float>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	b087      	sub	sp, #28
 8007932:	4617      	mov	r7, r2
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	688b      	ldr	r3, [r1, #8]
 8007938:	1e5a      	subs	r2, r3, #1
 800793a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800793e:	bf81      	itttt	hi
 8007940:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007944:	eb03 0b05 	addhi.w	fp, r3, r5
 8007948:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800794c:	608b      	strhi	r3, [r1, #8]
 800794e:	680b      	ldr	r3, [r1, #0]
 8007950:	460a      	mov	r2, r1
 8007952:	f04f 0500 	mov.w	r5, #0
 8007956:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800795a:	f842 3b1c 	str.w	r3, [r2], #28
 800795e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007962:	4680      	mov	r8, r0
 8007964:	460c      	mov	r4, r1
 8007966:	bf98      	it	ls
 8007968:	f04f 0b00 	movls.w	fp, #0
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	4616      	mov	r6, r2
 8007970:	46aa      	mov	sl, r5
 8007972:	46a9      	mov	r9, r5
 8007974:	9502      	str	r5, [sp, #8]
 8007976:	68a2      	ldr	r2, [r4, #8]
 8007978:	b152      	cbz	r2, 8007990 <_scanf_float+0x64>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007980:	d864      	bhi.n	8007a4c <_scanf_float+0x120>
 8007982:	2b40      	cmp	r3, #64	@ 0x40
 8007984:	d83c      	bhi.n	8007a00 <_scanf_float+0xd4>
 8007986:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800798a:	b2c8      	uxtb	r0, r1
 800798c:	280e      	cmp	r0, #14
 800798e:	d93a      	bls.n	8007a06 <_scanf_float+0xda>
 8007990:	f1b9 0f00 	cmp.w	r9, #0
 8007994:	d003      	beq.n	800799e <_scanf_float+0x72>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079a2:	f1ba 0f01 	cmp.w	sl, #1
 80079a6:	f200 8117 	bhi.w	8007bd8 <_scanf_float+0x2ac>
 80079aa:	9b01      	ldr	r3, [sp, #4]
 80079ac:	429e      	cmp	r6, r3
 80079ae:	f200 8108 	bhi.w	8007bc2 <_scanf_float+0x296>
 80079b2:	2001      	movs	r0, #1
 80079b4:	b007      	add	sp, #28
 80079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80079be:	2a0d      	cmp	r2, #13
 80079c0:	d8e6      	bhi.n	8007990 <_scanf_float+0x64>
 80079c2:	a101      	add	r1, pc, #4	@ (adr r1, 80079c8 <_scanf_float+0x9c>)
 80079c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079c8:	08007b0f 	.word	0x08007b0f
 80079cc:	08007991 	.word	0x08007991
 80079d0:	08007991 	.word	0x08007991
 80079d4:	08007991 	.word	0x08007991
 80079d8:	08007b6f 	.word	0x08007b6f
 80079dc:	08007b47 	.word	0x08007b47
 80079e0:	08007991 	.word	0x08007991
 80079e4:	08007991 	.word	0x08007991
 80079e8:	08007b1d 	.word	0x08007b1d
 80079ec:	08007991 	.word	0x08007991
 80079f0:	08007991 	.word	0x08007991
 80079f4:	08007991 	.word	0x08007991
 80079f8:	08007991 	.word	0x08007991
 80079fc:	08007ad5 	.word	0x08007ad5
 8007a00:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007a04:	e7db      	b.n	80079be <_scanf_float+0x92>
 8007a06:	290e      	cmp	r1, #14
 8007a08:	d8c2      	bhi.n	8007990 <_scanf_float+0x64>
 8007a0a:	a001      	add	r0, pc, #4	@ (adr r0, 8007a10 <_scanf_float+0xe4>)
 8007a0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a10:	08007ac5 	.word	0x08007ac5
 8007a14:	08007991 	.word	0x08007991
 8007a18:	08007ac5 	.word	0x08007ac5
 8007a1c:	08007b5b 	.word	0x08007b5b
 8007a20:	08007991 	.word	0x08007991
 8007a24:	08007a6d 	.word	0x08007a6d
 8007a28:	08007aab 	.word	0x08007aab
 8007a2c:	08007aab 	.word	0x08007aab
 8007a30:	08007aab 	.word	0x08007aab
 8007a34:	08007aab 	.word	0x08007aab
 8007a38:	08007aab 	.word	0x08007aab
 8007a3c:	08007aab 	.word	0x08007aab
 8007a40:	08007aab 	.word	0x08007aab
 8007a44:	08007aab 	.word	0x08007aab
 8007a48:	08007aab 	.word	0x08007aab
 8007a4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8007a4e:	d809      	bhi.n	8007a64 <_scanf_float+0x138>
 8007a50:	2b60      	cmp	r3, #96	@ 0x60
 8007a52:	d8b2      	bhi.n	80079ba <_scanf_float+0x8e>
 8007a54:	2b54      	cmp	r3, #84	@ 0x54
 8007a56:	d07b      	beq.n	8007b50 <_scanf_float+0x224>
 8007a58:	2b59      	cmp	r3, #89	@ 0x59
 8007a5a:	d199      	bne.n	8007990 <_scanf_float+0x64>
 8007a5c:	2d07      	cmp	r5, #7
 8007a5e:	d197      	bne.n	8007990 <_scanf_float+0x64>
 8007a60:	2508      	movs	r5, #8
 8007a62:	e02c      	b.n	8007abe <_scanf_float+0x192>
 8007a64:	2b74      	cmp	r3, #116	@ 0x74
 8007a66:	d073      	beq.n	8007b50 <_scanf_float+0x224>
 8007a68:	2b79      	cmp	r3, #121	@ 0x79
 8007a6a:	e7f6      	b.n	8007a5a <_scanf_float+0x12e>
 8007a6c:	6821      	ldr	r1, [r4, #0]
 8007a6e:	05c8      	lsls	r0, r1, #23
 8007a70:	d51b      	bpl.n	8007aaa <_scanf_float+0x17e>
 8007a72:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007a76:	6021      	str	r1, [r4, #0]
 8007a78:	f109 0901 	add.w	r9, r9, #1
 8007a7c:	f1bb 0f00 	cmp.w	fp, #0
 8007a80:	d003      	beq.n	8007a8a <_scanf_float+0x15e>
 8007a82:	3201      	adds	r2, #1
 8007a84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a88:	60a2      	str	r2, [r4, #8]
 8007a8a:	68a3      	ldr	r3, [r4, #8]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	60a3      	str	r3, [r4, #8]
 8007a90:	6923      	ldr	r3, [r4, #16]
 8007a92:	3301      	adds	r3, #1
 8007a94:	6123      	str	r3, [r4, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	f340 8087 	ble.w	8007bb0 <_scanf_float+0x284>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	603b      	str	r3, [r7, #0]
 8007aa8:	e765      	b.n	8007976 <_scanf_float+0x4a>
 8007aaa:	eb1a 0105 	adds.w	r1, sl, r5
 8007aae:	f47f af6f 	bne.w	8007990 <_scanf_float+0x64>
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007ab8:	6022      	str	r2, [r4, #0]
 8007aba:	460d      	mov	r5, r1
 8007abc:	468a      	mov	sl, r1
 8007abe:	f806 3b01 	strb.w	r3, [r6], #1
 8007ac2:	e7e2      	b.n	8007a8a <_scanf_float+0x15e>
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	0610      	lsls	r0, r2, #24
 8007ac8:	f57f af62 	bpl.w	8007990 <_scanf_float+0x64>
 8007acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ad0:	6022      	str	r2, [r4, #0]
 8007ad2:	e7f4      	b.n	8007abe <_scanf_float+0x192>
 8007ad4:	f1ba 0f00 	cmp.w	sl, #0
 8007ad8:	d10e      	bne.n	8007af8 <_scanf_float+0x1cc>
 8007ada:	f1b9 0f00 	cmp.w	r9, #0
 8007ade:	d10e      	bne.n	8007afe <_scanf_float+0x1d2>
 8007ae0:	6822      	ldr	r2, [r4, #0]
 8007ae2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ae6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007aea:	d108      	bne.n	8007afe <_scanf_float+0x1d2>
 8007aec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	f04f 0a01 	mov.w	sl, #1
 8007af6:	e7e2      	b.n	8007abe <_scanf_float+0x192>
 8007af8:	f1ba 0f02 	cmp.w	sl, #2
 8007afc:	d055      	beq.n	8007baa <_scanf_float+0x27e>
 8007afe:	2d01      	cmp	r5, #1
 8007b00:	d002      	beq.n	8007b08 <_scanf_float+0x1dc>
 8007b02:	2d04      	cmp	r5, #4
 8007b04:	f47f af44 	bne.w	8007990 <_scanf_float+0x64>
 8007b08:	3501      	adds	r5, #1
 8007b0a:	b2ed      	uxtb	r5, r5
 8007b0c:	e7d7      	b.n	8007abe <_scanf_float+0x192>
 8007b0e:	f1ba 0f01 	cmp.w	sl, #1
 8007b12:	f47f af3d 	bne.w	8007990 <_scanf_float+0x64>
 8007b16:	f04f 0a02 	mov.w	sl, #2
 8007b1a:	e7d0      	b.n	8007abe <_scanf_float+0x192>
 8007b1c:	b97d      	cbnz	r5, 8007b3e <_scanf_float+0x212>
 8007b1e:	f1b9 0f00 	cmp.w	r9, #0
 8007b22:	f47f af38 	bne.w	8007996 <_scanf_float+0x6a>
 8007b26:	6822      	ldr	r2, [r4, #0]
 8007b28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b30:	f040 8108 	bne.w	8007d44 <_scanf_float+0x418>
 8007b34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b38:	6022      	str	r2, [r4, #0]
 8007b3a:	2501      	movs	r5, #1
 8007b3c:	e7bf      	b.n	8007abe <_scanf_float+0x192>
 8007b3e:	2d03      	cmp	r5, #3
 8007b40:	d0e2      	beq.n	8007b08 <_scanf_float+0x1dc>
 8007b42:	2d05      	cmp	r5, #5
 8007b44:	e7de      	b.n	8007b04 <_scanf_float+0x1d8>
 8007b46:	2d02      	cmp	r5, #2
 8007b48:	f47f af22 	bne.w	8007990 <_scanf_float+0x64>
 8007b4c:	2503      	movs	r5, #3
 8007b4e:	e7b6      	b.n	8007abe <_scanf_float+0x192>
 8007b50:	2d06      	cmp	r5, #6
 8007b52:	f47f af1d 	bne.w	8007990 <_scanf_float+0x64>
 8007b56:	2507      	movs	r5, #7
 8007b58:	e7b1      	b.n	8007abe <_scanf_float+0x192>
 8007b5a:	6822      	ldr	r2, [r4, #0]
 8007b5c:	0591      	lsls	r1, r2, #22
 8007b5e:	f57f af17 	bpl.w	8007990 <_scanf_float+0x64>
 8007b62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b6c:	e7a7      	b.n	8007abe <_scanf_float+0x192>
 8007b6e:	6822      	ldr	r2, [r4, #0]
 8007b70:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007b74:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007b78:	d006      	beq.n	8007b88 <_scanf_float+0x25c>
 8007b7a:	0550      	lsls	r0, r2, #21
 8007b7c:	f57f af08 	bpl.w	8007990 <_scanf_float+0x64>
 8007b80:	f1b9 0f00 	cmp.w	r9, #0
 8007b84:	f000 80de 	beq.w	8007d44 <_scanf_float+0x418>
 8007b88:	0591      	lsls	r1, r2, #22
 8007b8a:	bf58      	it	pl
 8007b8c:	9902      	ldrpl	r1, [sp, #8]
 8007b8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b92:	bf58      	it	pl
 8007b94:	eba9 0101 	subpl.w	r1, r9, r1
 8007b98:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b9c:	bf58      	it	pl
 8007b9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ba2:	6022      	str	r2, [r4, #0]
 8007ba4:	f04f 0900 	mov.w	r9, #0
 8007ba8:	e789      	b.n	8007abe <_scanf_float+0x192>
 8007baa:	f04f 0a03 	mov.w	sl, #3
 8007bae:	e786      	b.n	8007abe <_scanf_float+0x192>
 8007bb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4798      	blx	r3
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f43f aedb 	beq.w	8007976 <_scanf_float+0x4a>
 8007bc0:	e6e6      	b.n	8007990 <_scanf_float+0x64>
 8007bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bca:	463a      	mov	r2, r7
 8007bcc:	4640      	mov	r0, r8
 8007bce:	4798      	blx	r3
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	6123      	str	r3, [r4, #16]
 8007bd6:	e6e8      	b.n	80079aa <_scanf_float+0x7e>
 8007bd8:	1e6b      	subs	r3, r5, #1
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d824      	bhi.n	8007c28 <_scanf_float+0x2fc>
 8007bde:	2d02      	cmp	r5, #2
 8007be0:	d836      	bhi.n	8007c50 <_scanf_float+0x324>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	429e      	cmp	r6, r3
 8007be6:	f67f aee4 	bls.w	80079b2 <_scanf_float+0x86>
 8007bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bf2:	463a      	mov	r2, r7
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4798      	blx	r3
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	e7f0      	b.n	8007be2 <_scanf_float+0x2b6>
 8007c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c04:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007c08:	463a      	mov	r2, r7
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4798      	blx	r3
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	6123      	str	r3, [r4, #16]
 8007c14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c18:	fa5f fa8a 	uxtb.w	sl, sl
 8007c1c:	f1ba 0f02 	cmp.w	sl, #2
 8007c20:	d1ee      	bne.n	8007c00 <_scanf_float+0x2d4>
 8007c22:	3d03      	subs	r5, #3
 8007c24:	b2ed      	uxtb	r5, r5
 8007c26:	1b76      	subs	r6, r6, r5
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	05da      	lsls	r2, r3, #23
 8007c2c:	d530      	bpl.n	8007c90 <_scanf_float+0x364>
 8007c2e:	055b      	lsls	r3, r3, #21
 8007c30:	d511      	bpl.n	8007c56 <_scanf_float+0x32a>
 8007c32:	9b01      	ldr	r3, [sp, #4]
 8007c34:	429e      	cmp	r6, r3
 8007c36:	f67f aebc 	bls.w	80079b2 <_scanf_float+0x86>
 8007c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c42:	463a      	mov	r2, r7
 8007c44:	4640      	mov	r0, r8
 8007c46:	4798      	blx	r3
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	6123      	str	r3, [r4, #16]
 8007c4e:	e7f0      	b.n	8007c32 <_scanf_float+0x306>
 8007c50:	46aa      	mov	sl, r5
 8007c52:	46b3      	mov	fp, r6
 8007c54:	e7de      	b.n	8007c14 <_scanf_float+0x2e8>
 8007c56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	2965      	cmp	r1, #101	@ 0x65
 8007c5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c62:	f106 35ff 	add.w	r5, r6, #4294967295
 8007c66:	6123      	str	r3, [r4, #16]
 8007c68:	d00c      	beq.n	8007c84 <_scanf_float+0x358>
 8007c6a:	2945      	cmp	r1, #69	@ 0x45
 8007c6c:	d00a      	beq.n	8007c84 <_scanf_float+0x358>
 8007c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c72:	463a      	mov	r2, r7
 8007c74:	4640      	mov	r0, r8
 8007c76:	4798      	blx	r3
 8007c78:	6923      	ldr	r3, [r4, #16]
 8007c7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	1eb5      	subs	r5, r6, #2
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c88:	463a      	mov	r2, r7
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4798      	blx	r3
 8007c8e:	462e      	mov	r6, r5
 8007c90:	6822      	ldr	r2, [r4, #0]
 8007c92:	f012 0210 	ands.w	r2, r2, #16
 8007c96:	d001      	beq.n	8007c9c <_scanf_float+0x370>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e68b      	b.n	80079b4 <_scanf_float+0x88>
 8007c9c:	7032      	strb	r2, [r6, #0]
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca8:	d11c      	bne.n	8007ce4 <_scanf_float+0x3b8>
 8007caa:	9b02      	ldr	r3, [sp, #8]
 8007cac:	454b      	cmp	r3, r9
 8007cae:	eba3 0209 	sub.w	r2, r3, r9
 8007cb2:	d123      	bne.n	8007cfc <_scanf_float+0x3d0>
 8007cb4:	9901      	ldr	r1, [sp, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4640      	mov	r0, r8
 8007cba:	f002 fc2d 	bl	800a518 <_strtod_r>
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	6821      	ldr	r1, [r4, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f011 0f02 	tst.w	r1, #2
 8007cc8:	ec57 6b10 	vmov	r6, r7, d0
 8007ccc:	f103 0204 	add.w	r2, r3, #4
 8007cd0:	d01f      	beq.n	8007d12 <_scanf_float+0x3e6>
 8007cd2:	9903      	ldr	r1, [sp, #12]
 8007cd4:	600a      	str	r2, [r1, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	e9c3 6700 	strd	r6, r7, [r3]
 8007cdc:	68e3      	ldr	r3, [r4, #12]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	60e3      	str	r3, [r4, #12]
 8007ce2:	e7d9      	b.n	8007c98 <_scanf_float+0x36c>
 8007ce4:	9b04      	ldr	r3, [sp, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0e4      	beq.n	8007cb4 <_scanf_float+0x388>
 8007cea:	9905      	ldr	r1, [sp, #20]
 8007cec:	230a      	movs	r3, #10
 8007cee:	3101      	adds	r1, #1
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	f002 fc91 	bl	800a618 <_strtol_r>
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	9e05      	ldr	r6, [sp, #20]
 8007cfa:	1ac2      	subs	r2, r0, r3
 8007cfc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007d00:	429e      	cmp	r6, r3
 8007d02:	bf28      	it	cs
 8007d04:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007d08:	4910      	ldr	r1, [pc, #64]	@ (8007d4c <_scanf_float+0x420>)
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f000 f918 	bl	8007f40 <siprintf>
 8007d10:	e7d0      	b.n	8007cb4 <_scanf_float+0x388>
 8007d12:	f011 0f04 	tst.w	r1, #4
 8007d16:	9903      	ldr	r1, [sp, #12]
 8007d18:	600a      	str	r2, [r1, #0]
 8007d1a:	d1dc      	bne.n	8007cd6 <_scanf_float+0x3aa>
 8007d1c:	681d      	ldr	r5, [r3, #0]
 8007d1e:	4632      	mov	r2, r6
 8007d20:	463b      	mov	r3, r7
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 ff09 	bl	8000b3c <__aeabi_dcmpun>
 8007d2a:	b128      	cbz	r0, 8007d38 <_scanf_float+0x40c>
 8007d2c:	4808      	ldr	r0, [pc, #32]	@ (8007d50 <_scanf_float+0x424>)
 8007d2e:	f000 f9eb 	bl	8008108 <nanf>
 8007d32:	ed85 0a00 	vstr	s0, [r5]
 8007d36:	e7d1      	b.n	8007cdc <_scanf_float+0x3b0>
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 ff5c 	bl	8000bf8 <__aeabi_d2f>
 8007d40:	6028      	str	r0, [r5, #0]
 8007d42:	e7cb      	b.n	8007cdc <_scanf_float+0x3b0>
 8007d44:	f04f 0900 	mov.w	r9, #0
 8007d48:	e629      	b.n	800799e <_scanf_float+0x72>
 8007d4a:	bf00      	nop
 8007d4c:	0800b84c 	.word	0x0800b84c
 8007d50:	0800bbe5 	.word	0x0800bbe5

08007d54 <std>:
 8007d54:	2300      	movs	r3, #0
 8007d56:	b510      	push	{r4, lr}
 8007d58:	4604      	mov	r4, r0
 8007d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d62:	6083      	str	r3, [r0, #8]
 8007d64:	8181      	strh	r1, [r0, #12]
 8007d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d68:	81c2      	strh	r2, [r0, #14]
 8007d6a:	6183      	str	r3, [r0, #24]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	2208      	movs	r2, #8
 8007d70:	305c      	adds	r0, #92	@ 0x5c
 8007d72:	f000 f948 	bl	8008006 <memset>
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <std+0x58>)
 8007d78:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <std+0x5c>)
 8007d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <std+0x60>)
 8007d80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d82:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <std+0x64>)
 8007d84:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d86:	4b0d      	ldr	r3, [pc, #52]	@ (8007dbc <std+0x68>)
 8007d88:	6224      	str	r4, [r4, #32]
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d006      	beq.n	8007d9c <std+0x48>
 8007d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d92:	4294      	cmp	r4, r2
 8007d94:	d002      	beq.n	8007d9c <std+0x48>
 8007d96:	33d0      	adds	r3, #208	@ 0xd0
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d105      	bne.n	8007da8 <std+0x54>
 8007d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	f000 b9ac 	b.w	8008100 <__retarget_lock_init_recursive>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop
 8007dac:	08007f81 	.word	0x08007f81
 8007db0:	08007fa3 	.word	0x08007fa3
 8007db4:	08007fdb 	.word	0x08007fdb
 8007db8:	08007fff 	.word	0x08007fff
 8007dbc:	200003d4 	.word	0x200003d4

08007dc0 <stdio_exit_handler>:
 8007dc0:	4a02      	ldr	r2, [pc, #8]	@ (8007dcc <stdio_exit_handler+0xc>)
 8007dc2:	4903      	ldr	r1, [pc, #12]	@ (8007dd0 <stdio_exit_handler+0x10>)
 8007dc4:	4803      	ldr	r0, [pc, #12]	@ (8007dd4 <stdio_exit_handler+0x14>)
 8007dc6:	f000 b869 	b.w	8007e9c <_fwalk_sglue>
 8007dca:	bf00      	nop
 8007dcc:	20000010 	.word	0x20000010
 8007dd0:	0800a9d5 	.word	0x0800a9d5
 8007dd4:	20000020 	.word	0x20000020

08007dd8 <cleanup_stdio>:
 8007dd8:	6841      	ldr	r1, [r0, #4]
 8007dda:	4b0c      	ldr	r3, [pc, #48]	@ (8007e0c <cleanup_stdio+0x34>)
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	d001      	beq.n	8007de8 <cleanup_stdio+0x10>
 8007de4:	f002 fdf6 	bl	800a9d4 <_fflush_r>
 8007de8:	68a1      	ldr	r1, [r4, #8]
 8007dea:	4b09      	ldr	r3, [pc, #36]	@ (8007e10 <cleanup_stdio+0x38>)
 8007dec:	4299      	cmp	r1, r3
 8007dee:	d002      	beq.n	8007df6 <cleanup_stdio+0x1e>
 8007df0:	4620      	mov	r0, r4
 8007df2:	f002 fdef 	bl	800a9d4 <_fflush_r>
 8007df6:	68e1      	ldr	r1, [r4, #12]
 8007df8:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <cleanup_stdio+0x3c>)
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	d004      	beq.n	8007e08 <cleanup_stdio+0x30>
 8007dfe:	4620      	mov	r0, r4
 8007e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e04:	f002 bde6 	b.w	800a9d4 <_fflush_r>
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200003d4 	.word	0x200003d4
 8007e10:	2000043c 	.word	0x2000043c
 8007e14:	200004a4 	.word	0x200004a4

08007e18 <global_stdio_init.part.0>:
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <global_stdio_init.part.0+0x30>)
 8007e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8007e4c <global_stdio_init.part.0+0x34>)
 8007e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e50 <global_stdio_init.part.0+0x38>)
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	4620      	mov	r0, r4
 8007e24:	2200      	movs	r2, #0
 8007e26:	2104      	movs	r1, #4
 8007e28:	f7ff ff94 	bl	8007d54 <std>
 8007e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e30:	2201      	movs	r2, #1
 8007e32:	2109      	movs	r1, #9
 8007e34:	f7ff ff8e 	bl	8007d54 <std>
 8007e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e42:	2112      	movs	r1, #18
 8007e44:	f7ff bf86 	b.w	8007d54 <std>
 8007e48:	2000050c 	.word	0x2000050c
 8007e4c:	200003d4 	.word	0x200003d4
 8007e50:	08007dc1 	.word	0x08007dc1

08007e54 <__sfp_lock_acquire>:
 8007e54:	4801      	ldr	r0, [pc, #4]	@ (8007e5c <__sfp_lock_acquire+0x8>)
 8007e56:	f000 b954 	b.w	8008102 <__retarget_lock_acquire_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20000515 	.word	0x20000515

08007e60 <__sfp_lock_release>:
 8007e60:	4801      	ldr	r0, [pc, #4]	@ (8007e68 <__sfp_lock_release+0x8>)
 8007e62:	f000 b94f 	b.w	8008104 <__retarget_lock_release_recursive>
 8007e66:	bf00      	nop
 8007e68:	20000515 	.word	0x20000515

08007e6c <__sinit>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4604      	mov	r4, r0
 8007e70:	f7ff fff0 	bl	8007e54 <__sfp_lock_acquire>
 8007e74:	6a23      	ldr	r3, [r4, #32]
 8007e76:	b11b      	cbz	r3, 8007e80 <__sinit+0x14>
 8007e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7c:	f7ff bff0 	b.w	8007e60 <__sfp_lock_release>
 8007e80:	4b04      	ldr	r3, [pc, #16]	@ (8007e94 <__sinit+0x28>)
 8007e82:	6223      	str	r3, [r4, #32]
 8007e84:	4b04      	ldr	r3, [pc, #16]	@ (8007e98 <__sinit+0x2c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f5      	bne.n	8007e78 <__sinit+0xc>
 8007e8c:	f7ff ffc4 	bl	8007e18 <global_stdio_init.part.0>
 8007e90:	e7f2      	b.n	8007e78 <__sinit+0xc>
 8007e92:	bf00      	nop
 8007e94:	08007dd9 	.word	0x08007dd9
 8007e98:	2000050c 	.word	0x2000050c

08007e9c <_fwalk_sglue>:
 8007e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	4688      	mov	r8, r1
 8007ea4:	4614      	mov	r4, r2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eac:	f1b9 0901 	subs.w	r9, r9, #1
 8007eb0:	d505      	bpl.n	8007ebe <_fwalk_sglue+0x22>
 8007eb2:	6824      	ldr	r4, [r4, #0]
 8007eb4:	2c00      	cmp	r4, #0
 8007eb6:	d1f7      	bne.n	8007ea8 <_fwalk_sglue+0xc>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	89ab      	ldrh	r3, [r5, #12]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d907      	bls.n	8007ed4 <_fwalk_sglue+0x38>
 8007ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	d003      	beq.n	8007ed4 <_fwalk_sglue+0x38>
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4638      	mov	r0, r7
 8007ed0:	47c0      	blx	r8
 8007ed2:	4306      	orrs	r6, r0
 8007ed4:	3568      	adds	r5, #104	@ 0x68
 8007ed6:	e7e9      	b.n	8007eac <_fwalk_sglue+0x10>

08007ed8 <sniprintf>:
 8007ed8:	b40c      	push	{r2, r3}
 8007eda:	b530      	push	{r4, r5, lr}
 8007edc:	4b17      	ldr	r3, [pc, #92]	@ (8007f3c <sniprintf+0x64>)
 8007ede:	1e0c      	subs	r4, r1, #0
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	b09d      	sub	sp, #116	@ 0x74
 8007ee4:	da08      	bge.n	8007ef8 <sniprintf+0x20>
 8007ee6:	238b      	movs	r3, #139	@ 0x8b
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	b01d      	add	sp, #116	@ 0x74
 8007ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ef4:	b002      	add	sp, #8
 8007ef6:	4770      	bx	lr
 8007ef8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007efc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f00:	bf14      	ite	ne
 8007f02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f06:	4623      	moveq	r3, r4
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	9307      	str	r3, [sp, #28]
 8007f0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f10:	9002      	str	r0, [sp, #8]
 8007f12:	9006      	str	r0, [sp, #24]
 8007f14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f1a:	ab21      	add	r3, sp, #132	@ 0x84
 8007f1c:	a902      	add	r1, sp, #8
 8007f1e:	4628      	mov	r0, r5
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f002 fbd7 	bl	800a6d4 <_svfiprintf_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	bfbc      	itt	lt
 8007f2a:	238b      	movlt	r3, #139	@ 0x8b
 8007f2c:	602b      	strlt	r3, [r5, #0]
 8007f2e:	2c00      	cmp	r4, #0
 8007f30:	d0dd      	beq.n	8007eee <sniprintf+0x16>
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	e7d9      	b.n	8007eee <sniprintf+0x16>
 8007f3a:	bf00      	nop
 8007f3c:	2000001c 	.word	0x2000001c

08007f40 <siprintf>:
 8007f40:	b40e      	push	{r1, r2, r3}
 8007f42:	b500      	push	{lr}
 8007f44:	b09c      	sub	sp, #112	@ 0x70
 8007f46:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f48:	9002      	str	r0, [sp, #8]
 8007f4a:	9006      	str	r0, [sp, #24]
 8007f4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f50:	4809      	ldr	r0, [pc, #36]	@ (8007f78 <siprintf+0x38>)
 8007f52:	9107      	str	r1, [sp, #28]
 8007f54:	9104      	str	r1, [sp, #16]
 8007f56:	4909      	ldr	r1, [pc, #36]	@ (8007f7c <siprintf+0x3c>)
 8007f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5c:	9105      	str	r1, [sp, #20]
 8007f5e:	6800      	ldr	r0, [r0, #0]
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	a902      	add	r1, sp, #8
 8007f64:	f002 fbb6 	bl	800a6d4 <_svfiprintf_r>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	b01c      	add	sp, #112	@ 0x70
 8007f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f74:	b003      	add	sp, #12
 8007f76:	4770      	bx	lr
 8007f78:	2000001c 	.word	0x2000001c
 8007f7c:	ffff0208 	.word	0xffff0208

08007f80 <__sread>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	460c      	mov	r4, r1
 8007f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f88:	f000 f86c 	bl	8008064 <_read_r>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	bfab      	itete	ge
 8007f90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f92:	89a3      	ldrhlt	r3, [r4, #12]
 8007f94:	181b      	addge	r3, r3, r0
 8007f96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f9a:	bfac      	ite	ge
 8007f9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f9e:	81a3      	strhlt	r3, [r4, #12]
 8007fa0:	bd10      	pop	{r4, pc}

08007fa2 <__swrite>:
 8007fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa6:	461f      	mov	r7, r3
 8007fa8:	898b      	ldrh	r3, [r1, #12]
 8007faa:	05db      	lsls	r3, r3, #23
 8007fac:	4605      	mov	r5, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	4616      	mov	r6, r2
 8007fb2:	d505      	bpl.n	8007fc0 <__swrite+0x1e>
 8007fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb8:	2302      	movs	r3, #2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f000 f840 	bl	8008040 <_lseek_r>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	4632      	mov	r2, r6
 8007fce:	463b      	mov	r3, r7
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd6:	f000 b857 	b.w	8008088 <_write_r>

08007fda <__sseek>:
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	460c      	mov	r4, r1
 8007fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe2:	f000 f82d 	bl	8008040 <_lseek_r>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	bf15      	itete	ne
 8007fec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ff2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ff6:	81a3      	strheq	r3, [r4, #12]
 8007ff8:	bf18      	it	ne
 8007ffa:	81a3      	strhne	r3, [r4, #12]
 8007ffc:	bd10      	pop	{r4, pc}

08007ffe <__sclose>:
 8007ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008002:	f000 b80d 	b.w	8008020 <_close_r>

08008006 <memset>:
 8008006:	4402      	add	r2, r0
 8008008:	4603      	mov	r3, r0
 800800a:	4293      	cmp	r3, r2
 800800c:	d100      	bne.n	8008010 <memset+0xa>
 800800e:	4770      	bx	lr
 8008010:	f803 1b01 	strb.w	r1, [r3], #1
 8008014:	e7f9      	b.n	800800a <memset+0x4>
	...

08008018 <_localeconv_r>:
 8008018:	4800      	ldr	r0, [pc, #0]	@ (800801c <_localeconv_r+0x4>)
 800801a:	4770      	bx	lr
 800801c:	2000015c 	.word	0x2000015c

08008020 <_close_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d06      	ldr	r5, [pc, #24]	@ (800803c <_close_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	602b      	str	r3, [r5, #0]
 800802c:	f7f9 fc5a 	bl	80018e4 <_close>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_close_r+0x1a>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_close_r+0x1a>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	20000510 	.word	0x20000510

08008040 <_lseek_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d07      	ldr	r5, [pc, #28]	@ (8008060 <_lseek_r+0x20>)
 8008044:	4604      	mov	r4, r0
 8008046:	4608      	mov	r0, r1
 8008048:	4611      	mov	r1, r2
 800804a:	2200      	movs	r2, #0
 800804c:	602a      	str	r2, [r5, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	f7f9 fc6f 	bl	8001932 <_lseek>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_lseek_r+0x1e>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_lseek_r+0x1e>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000510 	.word	0x20000510

08008064 <_read_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	@ (8008084 <_read_r+0x20>)
 8008068:	4604      	mov	r4, r0
 800806a:	4608      	mov	r0, r1
 800806c:	4611      	mov	r1, r2
 800806e:	2200      	movs	r2, #0
 8008070:	602a      	str	r2, [r5, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f7f9 fbfd 	bl	8001872 <_read>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_read_r+0x1e>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_read_r+0x1e>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20000510 	.word	0x20000510

08008088 <_write_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d07      	ldr	r5, [pc, #28]	@ (80080a8 <_write_r+0x20>)
 800808c:	4604      	mov	r4, r0
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f7f9 fc08 	bl	80018ac <_write>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_write_r+0x1e>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_write_r+0x1e>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	20000510 	.word	0x20000510

080080ac <__errno>:
 80080ac:	4b01      	ldr	r3, [pc, #4]	@ (80080b4 <__errno+0x8>)
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	2000001c 	.word	0x2000001c

080080b8 <__libc_init_array>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	4d0d      	ldr	r5, [pc, #52]	@ (80080f0 <__libc_init_array+0x38>)
 80080bc:	4c0d      	ldr	r4, [pc, #52]	@ (80080f4 <__libc_init_array+0x3c>)
 80080be:	1b64      	subs	r4, r4, r5
 80080c0:	10a4      	asrs	r4, r4, #2
 80080c2:	2600      	movs	r6, #0
 80080c4:	42a6      	cmp	r6, r4
 80080c6:	d109      	bne.n	80080dc <__libc_init_array+0x24>
 80080c8:	4d0b      	ldr	r5, [pc, #44]	@ (80080f8 <__libc_init_array+0x40>)
 80080ca:	4c0c      	ldr	r4, [pc, #48]	@ (80080fc <__libc_init_array+0x44>)
 80080cc:	f003 fb72 	bl	800b7b4 <_init>
 80080d0:	1b64      	subs	r4, r4, r5
 80080d2:	10a4      	asrs	r4, r4, #2
 80080d4:	2600      	movs	r6, #0
 80080d6:	42a6      	cmp	r6, r4
 80080d8:	d105      	bne.n	80080e6 <__libc_init_array+0x2e>
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e0:	4798      	blx	r3
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7ee      	b.n	80080c4 <__libc_init_array+0xc>
 80080e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ea:	4798      	blx	r3
 80080ec:	3601      	adds	r6, #1
 80080ee:	e7f2      	b.n	80080d6 <__libc_init_array+0x1e>
 80080f0:	0800bc50 	.word	0x0800bc50
 80080f4:	0800bc50 	.word	0x0800bc50
 80080f8:	0800bc50 	.word	0x0800bc50
 80080fc:	0800bc54 	.word	0x0800bc54

08008100 <__retarget_lock_init_recursive>:
 8008100:	4770      	bx	lr

08008102 <__retarget_lock_acquire_recursive>:
 8008102:	4770      	bx	lr

08008104 <__retarget_lock_release_recursive>:
 8008104:	4770      	bx	lr
	...

08008108 <nanf>:
 8008108:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008110 <nanf+0x8>
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	7fc00000 	.word	0x7fc00000

08008114 <quorem>:
 8008114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	6903      	ldr	r3, [r0, #16]
 800811a:	690c      	ldr	r4, [r1, #16]
 800811c:	42a3      	cmp	r3, r4
 800811e:	4607      	mov	r7, r0
 8008120:	db7e      	blt.n	8008220 <quorem+0x10c>
 8008122:	3c01      	subs	r4, #1
 8008124:	f101 0814 	add.w	r8, r1, #20
 8008128:	00a3      	lsls	r3, r4, #2
 800812a:	f100 0514 	add.w	r5, r0, #20
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800813a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800813e:	3301      	adds	r3, #1
 8008140:	429a      	cmp	r2, r3
 8008142:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008146:	fbb2 f6f3 	udiv	r6, r2, r3
 800814a:	d32e      	bcc.n	80081aa <quorem+0x96>
 800814c:	f04f 0a00 	mov.w	sl, #0
 8008150:	46c4      	mov	ip, r8
 8008152:	46ae      	mov	lr, r5
 8008154:	46d3      	mov	fp, sl
 8008156:	f85c 3b04 	ldr.w	r3, [ip], #4
 800815a:	b298      	uxth	r0, r3
 800815c:	fb06 a000 	mla	r0, r6, r0, sl
 8008160:	0c02      	lsrs	r2, r0, #16
 8008162:	0c1b      	lsrs	r3, r3, #16
 8008164:	fb06 2303 	mla	r3, r6, r3, r2
 8008168:	f8de 2000 	ldr.w	r2, [lr]
 800816c:	b280      	uxth	r0, r0
 800816e:	b292      	uxth	r2, r2
 8008170:	1a12      	subs	r2, r2, r0
 8008172:	445a      	add	r2, fp
 8008174:	f8de 0000 	ldr.w	r0, [lr]
 8008178:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800817c:	b29b      	uxth	r3, r3
 800817e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008182:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008186:	b292      	uxth	r2, r2
 8008188:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800818c:	45e1      	cmp	r9, ip
 800818e:	f84e 2b04 	str.w	r2, [lr], #4
 8008192:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008196:	d2de      	bcs.n	8008156 <quorem+0x42>
 8008198:	9b00      	ldr	r3, [sp, #0]
 800819a:	58eb      	ldr	r3, [r5, r3]
 800819c:	b92b      	cbnz	r3, 80081aa <quorem+0x96>
 800819e:	9b01      	ldr	r3, [sp, #4]
 80081a0:	3b04      	subs	r3, #4
 80081a2:	429d      	cmp	r5, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	d32f      	bcc.n	8008208 <quorem+0xf4>
 80081a8:	613c      	str	r4, [r7, #16]
 80081aa:	4638      	mov	r0, r7
 80081ac:	f001 f9c4 	bl	8009538 <__mcmp>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	db25      	blt.n	8008200 <quorem+0xec>
 80081b4:	4629      	mov	r1, r5
 80081b6:	2000      	movs	r0, #0
 80081b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80081bc:	f8d1 c000 	ldr.w	ip, [r1]
 80081c0:	fa1f fe82 	uxth.w	lr, r2
 80081c4:	fa1f f38c 	uxth.w	r3, ip
 80081c8:	eba3 030e 	sub.w	r3, r3, lr
 80081cc:	4403      	add	r3, r0
 80081ce:	0c12      	lsrs	r2, r2, #16
 80081d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081d8:	b29b      	uxth	r3, r3
 80081da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081de:	45c1      	cmp	r9, r8
 80081e0:	f841 3b04 	str.w	r3, [r1], #4
 80081e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081e8:	d2e6      	bcs.n	80081b8 <quorem+0xa4>
 80081ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081f2:	b922      	cbnz	r2, 80081fe <quorem+0xea>
 80081f4:	3b04      	subs	r3, #4
 80081f6:	429d      	cmp	r5, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	d30b      	bcc.n	8008214 <quorem+0x100>
 80081fc:	613c      	str	r4, [r7, #16]
 80081fe:	3601      	adds	r6, #1
 8008200:	4630      	mov	r0, r6
 8008202:	b003      	add	sp, #12
 8008204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	3b04      	subs	r3, #4
 800820c:	2a00      	cmp	r2, #0
 800820e:	d1cb      	bne.n	80081a8 <quorem+0x94>
 8008210:	3c01      	subs	r4, #1
 8008212:	e7c6      	b.n	80081a2 <quorem+0x8e>
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	3b04      	subs	r3, #4
 8008218:	2a00      	cmp	r2, #0
 800821a:	d1ef      	bne.n	80081fc <quorem+0xe8>
 800821c:	3c01      	subs	r4, #1
 800821e:	e7ea      	b.n	80081f6 <quorem+0xe2>
 8008220:	2000      	movs	r0, #0
 8008222:	e7ee      	b.n	8008202 <quorem+0xee>
 8008224:	0000      	movs	r0, r0
	...

08008228 <_dtoa_r>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	69c7      	ldr	r7, [r0, #28]
 800822e:	b099      	sub	sp, #100	@ 0x64
 8008230:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008234:	ec55 4b10 	vmov	r4, r5, d0
 8008238:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800823a:	9109      	str	r1, [sp, #36]	@ 0x24
 800823c:	4683      	mov	fp, r0
 800823e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008240:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008242:	b97f      	cbnz	r7, 8008264 <_dtoa_r+0x3c>
 8008244:	2010      	movs	r0, #16
 8008246:	f000 fdfd 	bl	8008e44 <malloc>
 800824a:	4602      	mov	r2, r0
 800824c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008250:	b920      	cbnz	r0, 800825c <_dtoa_r+0x34>
 8008252:	4ba7      	ldr	r3, [pc, #668]	@ (80084f0 <_dtoa_r+0x2c8>)
 8008254:	21ef      	movs	r1, #239	@ 0xef
 8008256:	48a7      	ldr	r0, [pc, #668]	@ (80084f4 <_dtoa_r+0x2cc>)
 8008258:	f002 fc36 	bl	800aac8 <__assert_func>
 800825c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008260:	6007      	str	r7, [r0, #0]
 8008262:	60c7      	str	r7, [r0, #12]
 8008264:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008268:	6819      	ldr	r1, [r3, #0]
 800826a:	b159      	cbz	r1, 8008284 <_dtoa_r+0x5c>
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	604a      	str	r2, [r1, #4]
 8008270:	2301      	movs	r3, #1
 8008272:	4093      	lsls	r3, r2
 8008274:	608b      	str	r3, [r1, #8]
 8008276:	4658      	mov	r0, fp
 8008278:	f000 feda 	bl	8009030 <_Bfree>
 800827c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	1e2b      	subs	r3, r5, #0
 8008286:	bfb9      	ittee	lt
 8008288:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800828c:	9303      	strlt	r3, [sp, #12]
 800828e:	2300      	movge	r3, #0
 8008290:	6033      	strge	r3, [r6, #0]
 8008292:	9f03      	ldr	r7, [sp, #12]
 8008294:	4b98      	ldr	r3, [pc, #608]	@ (80084f8 <_dtoa_r+0x2d0>)
 8008296:	bfbc      	itt	lt
 8008298:	2201      	movlt	r2, #1
 800829a:	6032      	strlt	r2, [r6, #0]
 800829c:	43bb      	bics	r3, r7
 800829e:	d112      	bne.n	80082c6 <_dtoa_r+0x9e>
 80082a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082ac:	4323      	orrs	r3, r4
 80082ae:	f000 854d 	beq.w	8008d4c <_dtoa_r+0xb24>
 80082b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800850c <_dtoa_r+0x2e4>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 854f 	beq.w	8008d5c <_dtoa_r+0xb34>
 80082be:	f10a 0303 	add.w	r3, sl, #3
 80082c2:	f000 bd49 	b.w	8008d58 <_dtoa_r+0xb30>
 80082c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	ec51 0b17 	vmov	r0, r1, d7
 80082d0:	2300      	movs	r3, #0
 80082d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80082d6:	f7f8 fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80082da:	4680      	mov	r8, r0
 80082dc:	b158      	cbz	r0, 80082f6 <_dtoa_r+0xce>
 80082de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082e0:	2301      	movs	r3, #1
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082e6:	b113      	cbz	r3, 80082ee <_dtoa_r+0xc6>
 80082e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082ea:	4b84      	ldr	r3, [pc, #528]	@ (80084fc <_dtoa_r+0x2d4>)
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008510 <_dtoa_r+0x2e8>
 80082f2:	f000 bd33 	b.w	8008d5c <_dtoa_r+0xb34>
 80082f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082fa:	aa16      	add	r2, sp, #88	@ 0x58
 80082fc:	a917      	add	r1, sp, #92	@ 0x5c
 80082fe:	4658      	mov	r0, fp
 8008300:	f001 fa3a 	bl	8009778 <__d2b>
 8008304:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008308:	4681      	mov	r9, r0
 800830a:	2e00      	cmp	r6, #0
 800830c:	d077      	beq.n	80083fe <_dtoa_r+0x1d6>
 800830e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008310:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800831c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008320:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008324:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008328:	4619      	mov	r1, r3
 800832a:	2200      	movs	r2, #0
 800832c:	4b74      	ldr	r3, [pc, #464]	@ (8008500 <_dtoa_r+0x2d8>)
 800832e:	f7f7 ffb3 	bl	8000298 <__aeabi_dsub>
 8008332:	a369      	add	r3, pc, #420	@ (adr r3, 80084d8 <_dtoa_r+0x2b0>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f7f8 f966 	bl	8000608 <__aeabi_dmul>
 800833c:	a368      	add	r3, pc, #416	@ (adr r3, 80084e0 <_dtoa_r+0x2b8>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	f7f7 ffab 	bl	800029c <__adddf3>
 8008346:	4604      	mov	r4, r0
 8008348:	4630      	mov	r0, r6
 800834a:	460d      	mov	r5, r1
 800834c:	f7f8 f8f2 	bl	8000534 <__aeabi_i2d>
 8008350:	a365      	add	r3, pc, #404	@ (adr r3, 80084e8 <_dtoa_r+0x2c0>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f7f8 f957 	bl	8000608 <__aeabi_dmul>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4620      	mov	r0, r4
 8008360:	4629      	mov	r1, r5
 8008362:	f7f7 ff9b 	bl	800029c <__adddf3>
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	f7f8 fbfd 	bl	8000b68 <__aeabi_d2iz>
 800836e:	2200      	movs	r2, #0
 8008370:	4607      	mov	r7, r0
 8008372:	2300      	movs	r3, #0
 8008374:	4620      	mov	r0, r4
 8008376:	4629      	mov	r1, r5
 8008378:	f7f8 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800837c:	b140      	cbz	r0, 8008390 <_dtoa_r+0x168>
 800837e:	4638      	mov	r0, r7
 8008380:	f7f8 f8d8 	bl	8000534 <__aeabi_i2d>
 8008384:	4622      	mov	r2, r4
 8008386:	462b      	mov	r3, r5
 8008388:	f7f8 fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800838c:	b900      	cbnz	r0, 8008390 <_dtoa_r+0x168>
 800838e:	3f01      	subs	r7, #1
 8008390:	2f16      	cmp	r7, #22
 8008392:	d851      	bhi.n	8008438 <_dtoa_r+0x210>
 8008394:	4b5b      	ldr	r3, [pc, #364]	@ (8008504 <_dtoa_r+0x2dc>)
 8008396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083a2:	f7f8 fba3 	bl	8000aec <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d048      	beq.n	800843c <_dtoa_r+0x214>
 80083aa:	3f01      	subs	r7, #1
 80083ac:	2300      	movs	r3, #0
 80083ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80083b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083b2:	1b9b      	subs	r3, r3, r6
 80083b4:	1e5a      	subs	r2, r3, #1
 80083b6:	bf44      	itt	mi
 80083b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80083bc:	2300      	movmi	r3, #0
 80083be:	9208      	str	r2, [sp, #32]
 80083c0:	bf54      	ite	pl
 80083c2:	f04f 0800 	movpl.w	r8, #0
 80083c6:	9308      	strmi	r3, [sp, #32]
 80083c8:	2f00      	cmp	r7, #0
 80083ca:	db39      	blt.n	8008440 <_dtoa_r+0x218>
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80083d0:	443b      	add	r3, r7
 80083d2:	9308      	str	r3, [sp, #32]
 80083d4:	2300      	movs	r3, #0
 80083d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083da:	2b09      	cmp	r3, #9
 80083dc:	d864      	bhi.n	80084a8 <_dtoa_r+0x280>
 80083de:	2b05      	cmp	r3, #5
 80083e0:	bfc4      	itt	gt
 80083e2:	3b04      	subgt	r3, #4
 80083e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e8:	f1a3 0302 	sub.w	r3, r3, #2
 80083ec:	bfcc      	ite	gt
 80083ee:	2400      	movgt	r4, #0
 80083f0:	2401      	movle	r4, #1
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d863      	bhi.n	80084be <_dtoa_r+0x296>
 80083f6:	e8df f003 	tbb	[pc, r3]
 80083fa:	372a      	.short	0x372a
 80083fc:	5535      	.short	0x5535
 80083fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008402:	441e      	add	r6, r3
 8008404:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008408:	2b20      	cmp	r3, #32
 800840a:	bfc1      	itttt	gt
 800840c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008410:	409f      	lslgt	r7, r3
 8008412:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008416:	fa24 f303 	lsrgt.w	r3, r4, r3
 800841a:	bfd6      	itet	le
 800841c:	f1c3 0320 	rsble	r3, r3, #32
 8008420:	ea47 0003 	orrgt.w	r0, r7, r3
 8008424:	fa04 f003 	lslle.w	r0, r4, r3
 8008428:	f7f8 f874 	bl	8000514 <__aeabi_ui2d>
 800842c:	2201      	movs	r2, #1
 800842e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008432:	3e01      	subs	r6, #1
 8008434:	9214      	str	r2, [sp, #80]	@ 0x50
 8008436:	e777      	b.n	8008328 <_dtoa_r+0x100>
 8008438:	2301      	movs	r3, #1
 800843a:	e7b8      	b.n	80083ae <_dtoa_r+0x186>
 800843c:	9012      	str	r0, [sp, #72]	@ 0x48
 800843e:	e7b7      	b.n	80083b0 <_dtoa_r+0x188>
 8008440:	427b      	negs	r3, r7
 8008442:	930a      	str	r3, [sp, #40]	@ 0x28
 8008444:	2300      	movs	r3, #0
 8008446:	eba8 0807 	sub.w	r8, r8, r7
 800844a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800844c:	e7c4      	b.n	80083d8 <_dtoa_r+0x1b0>
 800844e:	2300      	movs	r3, #0
 8008450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008454:	2b00      	cmp	r3, #0
 8008456:	dc35      	bgt.n	80084c4 <_dtoa_r+0x29c>
 8008458:	2301      	movs	r3, #1
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	9307      	str	r3, [sp, #28]
 800845e:	461a      	mov	r2, r3
 8008460:	920e      	str	r2, [sp, #56]	@ 0x38
 8008462:	e00b      	b.n	800847c <_dtoa_r+0x254>
 8008464:	2301      	movs	r3, #1
 8008466:	e7f3      	b.n	8008450 <_dtoa_r+0x228>
 8008468:	2300      	movs	r3, #0
 800846a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800846c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	2b01      	cmp	r3, #1
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	bfb8      	it	lt
 800847a:	2301      	movlt	r3, #1
 800847c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008480:	2100      	movs	r1, #0
 8008482:	2204      	movs	r2, #4
 8008484:	f102 0514 	add.w	r5, r2, #20
 8008488:	429d      	cmp	r5, r3
 800848a:	d91f      	bls.n	80084cc <_dtoa_r+0x2a4>
 800848c:	6041      	str	r1, [r0, #4]
 800848e:	4658      	mov	r0, fp
 8008490:	f000 fd8e 	bl	8008fb0 <_Balloc>
 8008494:	4682      	mov	sl, r0
 8008496:	2800      	cmp	r0, #0
 8008498:	d13c      	bne.n	8008514 <_dtoa_r+0x2ec>
 800849a:	4b1b      	ldr	r3, [pc, #108]	@ (8008508 <_dtoa_r+0x2e0>)
 800849c:	4602      	mov	r2, r0
 800849e:	f240 11af 	movw	r1, #431	@ 0x1af
 80084a2:	e6d8      	b.n	8008256 <_dtoa_r+0x2e>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e7e0      	b.n	800846a <_dtoa_r+0x242>
 80084a8:	2401      	movs	r4, #1
 80084aa:	2300      	movs	r3, #0
 80084ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	9307      	str	r3, [sp, #28]
 80084b8:	2200      	movs	r2, #0
 80084ba:	2312      	movs	r3, #18
 80084bc:	e7d0      	b.n	8008460 <_dtoa_r+0x238>
 80084be:	2301      	movs	r3, #1
 80084c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084c2:	e7f5      	b.n	80084b0 <_dtoa_r+0x288>
 80084c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	9307      	str	r3, [sp, #28]
 80084ca:	e7d7      	b.n	800847c <_dtoa_r+0x254>
 80084cc:	3101      	adds	r1, #1
 80084ce:	0052      	lsls	r2, r2, #1
 80084d0:	e7d8      	b.n	8008484 <_dtoa_r+0x25c>
 80084d2:	bf00      	nop
 80084d4:	f3af 8000 	nop.w
 80084d8:	636f4361 	.word	0x636f4361
 80084dc:	3fd287a7 	.word	0x3fd287a7
 80084e0:	8b60c8b3 	.word	0x8b60c8b3
 80084e4:	3fc68a28 	.word	0x3fc68a28
 80084e8:	509f79fb 	.word	0x509f79fb
 80084ec:	3fd34413 	.word	0x3fd34413
 80084f0:	0800b85e 	.word	0x0800b85e
 80084f4:	0800b875 	.word	0x0800b875
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	0800b829 	.word	0x0800b829
 8008500:	3ff80000 	.word	0x3ff80000
 8008504:	0800b970 	.word	0x0800b970
 8008508:	0800b8cd 	.word	0x0800b8cd
 800850c:	0800b85a 	.word	0x0800b85a
 8008510:	0800b828 	.word	0x0800b828
 8008514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008518:	6018      	str	r0, [r3, #0]
 800851a:	9b07      	ldr	r3, [sp, #28]
 800851c:	2b0e      	cmp	r3, #14
 800851e:	f200 80a4 	bhi.w	800866a <_dtoa_r+0x442>
 8008522:	2c00      	cmp	r4, #0
 8008524:	f000 80a1 	beq.w	800866a <_dtoa_r+0x442>
 8008528:	2f00      	cmp	r7, #0
 800852a:	dd33      	ble.n	8008594 <_dtoa_r+0x36c>
 800852c:	4bad      	ldr	r3, [pc, #692]	@ (80087e4 <_dtoa_r+0x5bc>)
 800852e:	f007 020f 	and.w	r2, r7, #15
 8008532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008536:	ed93 7b00 	vldr	d7, [r3]
 800853a:	05f8      	lsls	r0, r7, #23
 800853c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008540:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008544:	d516      	bpl.n	8008574 <_dtoa_r+0x34c>
 8008546:	4ba8      	ldr	r3, [pc, #672]	@ (80087e8 <_dtoa_r+0x5c0>)
 8008548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800854c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008550:	f7f8 f984 	bl	800085c <__aeabi_ddiv>
 8008554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008558:	f004 040f 	and.w	r4, r4, #15
 800855c:	2603      	movs	r6, #3
 800855e:	4da2      	ldr	r5, [pc, #648]	@ (80087e8 <_dtoa_r+0x5c0>)
 8008560:	b954      	cbnz	r4, 8008578 <_dtoa_r+0x350>
 8008562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856a:	f7f8 f977 	bl	800085c <__aeabi_ddiv>
 800856e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008572:	e028      	b.n	80085c6 <_dtoa_r+0x39e>
 8008574:	2602      	movs	r6, #2
 8008576:	e7f2      	b.n	800855e <_dtoa_r+0x336>
 8008578:	07e1      	lsls	r1, r4, #31
 800857a:	d508      	bpl.n	800858e <_dtoa_r+0x366>
 800857c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008580:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008584:	f7f8 f840 	bl	8000608 <__aeabi_dmul>
 8008588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800858c:	3601      	adds	r6, #1
 800858e:	1064      	asrs	r4, r4, #1
 8008590:	3508      	adds	r5, #8
 8008592:	e7e5      	b.n	8008560 <_dtoa_r+0x338>
 8008594:	f000 80d2 	beq.w	800873c <_dtoa_r+0x514>
 8008598:	427c      	negs	r4, r7
 800859a:	4b92      	ldr	r3, [pc, #584]	@ (80087e4 <_dtoa_r+0x5bc>)
 800859c:	4d92      	ldr	r5, [pc, #584]	@ (80087e8 <_dtoa_r+0x5c0>)
 800859e:	f004 020f 	and.w	r2, r4, #15
 80085a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ae:	f7f8 f82b 	bl	8000608 <__aeabi_dmul>
 80085b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b6:	1124      	asrs	r4, r4, #4
 80085b8:	2300      	movs	r3, #0
 80085ba:	2602      	movs	r6, #2
 80085bc:	2c00      	cmp	r4, #0
 80085be:	f040 80b2 	bne.w	8008726 <_dtoa_r+0x4fe>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1d3      	bne.n	800856e <_dtoa_r+0x346>
 80085c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80b7 	beq.w	8008740 <_dtoa_r+0x518>
 80085d2:	4b86      	ldr	r3, [pc, #536]	@ (80087ec <_dtoa_r+0x5c4>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	4620      	mov	r0, r4
 80085d8:	4629      	mov	r1, r5
 80085da:	f7f8 fa87 	bl	8000aec <__aeabi_dcmplt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	f000 80ae 	beq.w	8008740 <_dtoa_r+0x518>
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 80aa 	beq.w	8008740 <_dtoa_r+0x518>
 80085ec:	9b00      	ldr	r3, [sp, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dd37      	ble.n	8008662 <_dtoa_r+0x43a>
 80085f2:	1e7b      	subs	r3, r7, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	4620      	mov	r0, r4
 80085f8:	4b7d      	ldr	r3, [pc, #500]	@ (80087f0 <_dtoa_r+0x5c8>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f8 f803 	bl	8000608 <__aeabi_dmul>
 8008602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008606:	9c00      	ldr	r4, [sp, #0]
 8008608:	3601      	adds	r6, #1
 800860a:	4630      	mov	r0, r6
 800860c:	f7f7 ff92 	bl	8000534 <__aeabi_i2d>
 8008610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008614:	f7f7 fff8 	bl	8000608 <__aeabi_dmul>
 8008618:	4b76      	ldr	r3, [pc, #472]	@ (80087f4 <_dtoa_r+0x5cc>)
 800861a:	2200      	movs	r2, #0
 800861c:	f7f7 fe3e 	bl	800029c <__adddf3>
 8008620:	4605      	mov	r5, r0
 8008622:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008626:	2c00      	cmp	r4, #0
 8008628:	f040 808d 	bne.w	8008746 <_dtoa_r+0x51e>
 800862c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008630:	4b71      	ldr	r3, [pc, #452]	@ (80087f8 <_dtoa_r+0x5d0>)
 8008632:	2200      	movs	r2, #0
 8008634:	f7f7 fe30 	bl	8000298 <__aeabi_dsub>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008640:	462a      	mov	r2, r5
 8008642:	4633      	mov	r3, r6
 8008644:	f7f8 fa70 	bl	8000b28 <__aeabi_dcmpgt>
 8008648:	2800      	cmp	r0, #0
 800864a:	f040 828b 	bne.w	8008b64 <_dtoa_r+0x93c>
 800864e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008652:	462a      	mov	r2, r5
 8008654:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008658:	f7f8 fa48 	bl	8000aec <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	f040 8128 	bne.w	80088b2 <_dtoa_r+0x68a>
 8008662:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008666:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800866a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800866c:	2b00      	cmp	r3, #0
 800866e:	f2c0 815a 	blt.w	8008926 <_dtoa_r+0x6fe>
 8008672:	2f0e      	cmp	r7, #14
 8008674:	f300 8157 	bgt.w	8008926 <_dtoa_r+0x6fe>
 8008678:	4b5a      	ldr	r3, [pc, #360]	@ (80087e4 <_dtoa_r+0x5bc>)
 800867a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800867e:	ed93 7b00 	vldr	d7, [r3]
 8008682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	ed8d 7b00 	vstr	d7, [sp]
 800868a:	da03      	bge.n	8008694 <_dtoa_r+0x46c>
 800868c:	9b07      	ldr	r3, [sp, #28]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f340 8101 	ble.w	8008896 <_dtoa_r+0x66e>
 8008694:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008698:	4656      	mov	r6, sl
 800869a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f8 f8db 	bl	800085c <__aeabi_ddiv>
 80086a6:	f7f8 fa5f 	bl	8000b68 <__aeabi_d2iz>
 80086aa:	4680      	mov	r8, r0
 80086ac:	f7f7 ff42 	bl	8000534 <__aeabi_i2d>
 80086b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b4:	f7f7 ffa8 	bl	8000608 <__aeabi_dmul>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086c4:	f7f7 fde8 	bl	8000298 <__aeabi_dsub>
 80086c8:	f806 4b01 	strb.w	r4, [r6], #1
 80086cc:	9d07      	ldr	r5, [sp, #28]
 80086ce:	eba6 040a 	sub.w	r4, r6, sl
 80086d2:	42a5      	cmp	r5, r4
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	f040 8117 	bne.w	800890a <_dtoa_r+0x6e2>
 80086dc:	f7f7 fdde 	bl	800029c <__adddf3>
 80086e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086e4:	4604      	mov	r4, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	f7f8 fa1e 	bl	8000b28 <__aeabi_dcmpgt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f040 80f9 	bne.w	80088e4 <_dtoa_r+0x6bc>
 80086f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086f6:	4620      	mov	r0, r4
 80086f8:	4629      	mov	r1, r5
 80086fa:	f7f8 f9ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80086fe:	b118      	cbz	r0, 8008708 <_dtoa_r+0x4e0>
 8008700:	f018 0f01 	tst.w	r8, #1
 8008704:	f040 80ee 	bne.w	80088e4 <_dtoa_r+0x6bc>
 8008708:	4649      	mov	r1, r9
 800870a:	4658      	mov	r0, fp
 800870c:	f000 fc90 	bl	8009030 <_Bfree>
 8008710:	2300      	movs	r3, #0
 8008712:	7033      	strb	r3, [r6, #0]
 8008714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008716:	3701      	adds	r7, #1
 8008718:	601f      	str	r7, [r3, #0]
 800871a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 831d 	beq.w	8008d5c <_dtoa_r+0xb34>
 8008722:	601e      	str	r6, [r3, #0]
 8008724:	e31a      	b.n	8008d5c <_dtoa_r+0xb34>
 8008726:	07e2      	lsls	r2, r4, #31
 8008728:	d505      	bpl.n	8008736 <_dtoa_r+0x50e>
 800872a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800872e:	f7f7 ff6b 	bl	8000608 <__aeabi_dmul>
 8008732:	3601      	adds	r6, #1
 8008734:	2301      	movs	r3, #1
 8008736:	1064      	asrs	r4, r4, #1
 8008738:	3508      	adds	r5, #8
 800873a:	e73f      	b.n	80085bc <_dtoa_r+0x394>
 800873c:	2602      	movs	r6, #2
 800873e:	e742      	b.n	80085c6 <_dtoa_r+0x39e>
 8008740:	9c07      	ldr	r4, [sp, #28]
 8008742:	9704      	str	r7, [sp, #16]
 8008744:	e761      	b.n	800860a <_dtoa_r+0x3e2>
 8008746:	4b27      	ldr	r3, [pc, #156]	@ (80087e4 <_dtoa_r+0x5bc>)
 8008748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800874a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800874e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008752:	4454      	add	r4, sl
 8008754:	2900      	cmp	r1, #0
 8008756:	d053      	beq.n	8008800 <_dtoa_r+0x5d8>
 8008758:	4928      	ldr	r1, [pc, #160]	@ (80087fc <_dtoa_r+0x5d4>)
 800875a:	2000      	movs	r0, #0
 800875c:	f7f8 f87e 	bl	800085c <__aeabi_ddiv>
 8008760:	4633      	mov	r3, r6
 8008762:	462a      	mov	r2, r5
 8008764:	f7f7 fd98 	bl	8000298 <__aeabi_dsub>
 8008768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800876c:	4656      	mov	r6, sl
 800876e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008772:	f7f8 f9f9 	bl	8000b68 <__aeabi_d2iz>
 8008776:	4605      	mov	r5, r0
 8008778:	f7f7 fedc 	bl	8000534 <__aeabi_i2d>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008784:	f7f7 fd88 	bl	8000298 <__aeabi_dsub>
 8008788:	3530      	adds	r5, #48	@ 0x30
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008792:	f806 5b01 	strb.w	r5, [r6], #1
 8008796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800879a:	f7f8 f9a7 	bl	8000aec <__aeabi_dcmplt>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d171      	bne.n	8008886 <_dtoa_r+0x65e>
 80087a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087a6:	4911      	ldr	r1, [pc, #68]	@ (80087ec <_dtoa_r+0x5c4>)
 80087a8:	2000      	movs	r0, #0
 80087aa:	f7f7 fd75 	bl	8000298 <__aeabi_dsub>
 80087ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087b2:	f7f8 f99b 	bl	8000aec <__aeabi_dcmplt>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f040 8095 	bne.w	80088e6 <_dtoa_r+0x6be>
 80087bc:	42a6      	cmp	r6, r4
 80087be:	f43f af50 	beq.w	8008662 <_dtoa_r+0x43a>
 80087c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087c6:	4b0a      	ldr	r3, [pc, #40]	@ (80087f0 <_dtoa_r+0x5c8>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	f7f7 ff1d 	bl	8000608 <__aeabi_dmul>
 80087ce:	4b08      	ldr	r3, [pc, #32]	@ (80087f0 <_dtoa_r+0x5c8>)
 80087d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087d4:	2200      	movs	r2, #0
 80087d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087da:	f7f7 ff15 	bl	8000608 <__aeabi_dmul>
 80087de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087e2:	e7c4      	b.n	800876e <_dtoa_r+0x546>
 80087e4:	0800b970 	.word	0x0800b970
 80087e8:	0800b948 	.word	0x0800b948
 80087ec:	3ff00000 	.word	0x3ff00000
 80087f0:	40240000 	.word	0x40240000
 80087f4:	401c0000 	.word	0x401c0000
 80087f8:	40140000 	.word	0x40140000
 80087fc:	3fe00000 	.word	0x3fe00000
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	f7f7 ff00 	bl	8000608 <__aeabi_dmul>
 8008808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800880c:	9415      	str	r4, [sp, #84]	@ 0x54
 800880e:	4656      	mov	r6, sl
 8008810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008814:	f7f8 f9a8 	bl	8000b68 <__aeabi_d2iz>
 8008818:	4605      	mov	r5, r0
 800881a:	f7f7 fe8b 	bl	8000534 <__aeabi_i2d>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008826:	f7f7 fd37 	bl	8000298 <__aeabi_dsub>
 800882a:	3530      	adds	r5, #48	@ 0x30
 800882c:	f806 5b01 	strb.w	r5, [r6], #1
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	42a6      	cmp	r6, r4
 8008836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	d124      	bne.n	800888a <_dtoa_r+0x662>
 8008840:	4bac      	ldr	r3, [pc, #688]	@ (8008af4 <_dtoa_r+0x8cc>)
 8008842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008846:	f7f7 fd29 	bl	800029c <__adddf3>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008852:	f7f8 f969 	bl	8000b28 <__aeabi_dcmpgt>
 8008856:	2800      	cmp	r0, #0
 8008858:	d145      	bne.n	80088e6 <_dtoa_r+0x6be>
 800885a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800885e:	49a5      	ldr	r1, [pc, #660]	@ (8008af4 <_dtoa_r+0x8cc>)
 8008860:	2000      	movs	r0, #0
 8008862:	f7f7 fd19 	bl	8000298 <__aeabi_dsub>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886e:	f7f8 f93d 	bl	8000aec <__aeabi_dcmplt>
 8008872:	2800      	cmp	r0, #0
 8008874:	f43f aef5 	beq.w	8008662 <_dtoa_r+0x43a>
 8008878:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800887a:	1e73      	subs	r3, r6, #1
 800887c:	9315      	str	r3, [sp, #84]	@ 0x54
 800887e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008882:	2b30      	cmp	r3, #48	@ 0x30
 8008884:	d0f8      	beq.n	8008878 <_dtoa_r+0x650>
 8008886:	9f04      	ldr	r7, [sp, #16]
 8008888:	e73e      	b.n	8008708 <_dtoa_r+0x4e0>
 800888a:	4b9b      	ldr	r3, [pc, #620]	@ (8008af8 <_dtoa_r+0x8d0>)
 800888c:	f7f7 febc 	bl	8000608 <__aeabi_dmul>
 8008890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008894:	e7bc      	b.n	8008810 <_dtoa_r+0x5e8>
 8008896:	d10c      	bne.n	80088b2 <_dtoa_r+0x68a>
 8008898:	4b98      	ldr	r3, [pc, #608]	@ (8008afc <_dtoa_r+0x8d4>)
 800889a:	2200      	movs	r2, #0
 800889c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088a0:	f7f7 feb2 	bl	8000608 <__aeabi_dmul>
 80088a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088a8:	f7f8 f934 	bl	8000b14 <__aeabi_dcmpge>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f000 8157 	beq.w	8008b60 <_dtoa_r+0x938>
 80088b2:	2400      	movs	r4, #0
 80088b4:	4625      	mov	r5, r4
 80088b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088b8:	43db      	mvns	r3, r3
 80088ba:	9304      	str	r3, [sp, #16]
 80088bc:	4656      	mov	r6, sl
 80088be:	2700      	movs	r7, #0
 80088c0:	4621      	mov	r1, r4
 80088c2:	4658      	mov	r0, fp
 80088c4:	f000 fbb4 	bl	8009030 <_Bfree>
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	d0dc      	beq.n	8008886 <_dtoa_r+0x65e>
 80088cc:	b12f      	cbz	r7, 80088da <_dtoa_r+0x6b2>
 80088ce:	42af      	cmp	r7, r5
 80088d0:	d003      	beq.n	80088da <_dtoa_r+0x6b2>
 80088d2:	4639      	mov	r1, r7
 80088d4:	4658      	mov	r0, fp
 80088d6:	f000 fbab 	bl	8009030 <_Bfree>
 80088da:	4629      	mov	r1, r5
 80088dc:	4658      	mov	r0, fp
 80088de:	f000 fba7 	bl	8009030 <_Bfree>
 80088e2:	e7d0      	b.n	8008886 <_dtoa_r+0x65e>
 80088e4:	9704      	str	r7, [sp, #16]
 80088e6:	4633      	mov	r3, r6
 80088e8:	461e      	mov	r6, r3
 80088ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088ee:	2a39      	cmp	r2, #57	@ 0x39
 80088f0:	d107      	bne.n	8008902 <_dtoa_r+0x6da>
 80088f2:	459a      	cmp	sl, r3
 80088f4:	d1f8      	bne.n	80088e8 <_dtoa_r+0x6c0>
 80088f6:	9a04      	ldr	r2, [sp, #16]
 80088f8:	3201      	adds	r2, #1
 80088fa:	9204      	str	r2, [sp, #16]
 80088fc:	2230      	movs	r2, #48	@ 0x30
 80088fe:	f88a 2000 	strb.w	r2, [sl]
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	3201      	adds	r2, #1
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	e7bd      	b.n	8008886 <_dtoa_r+0x65e>
 800890a:	4b7b      	ldr	r3, [pc, #492]	@ (8008af8 <_dtoa_r+0x8d0>)
 800890c:	2200      	movs	r2, #0
 800890e:	f7f7 fe7b 	bl	8000608 <__aeabi_dmul>
 8008912:	2200      	movs	r2, #0
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	460d      	mov	r5, r1
 800891a:	f7f8 f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f aebb 	beq.w	800869a <_dtoa_r+0x472>
 8008924:	e6f0      	b.n	8008708 <_dtoa_r+0x4e0>
 8008926:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008928:	2a00      	cmp	r2, #0
 800892a:	f000 80db 	beq.w	8008ae4 <_dtoa_r+0x8bc>
 800892e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008930:	2a01      	cmp	r2, #1
 8008932:	f300 80bf 	bgt.w	8008ab4 <_dtoa_r+0x88c>
 8008936:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008938:	2a00      	cmp	r2, #0
 800893a:	f000 80b7 	beq.w	8008aac <_dtoa_r+0x884>
 800893e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008942:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008944:	4646      	mov	r6, r8
 8008946:	9a08      	ldr	r2, [sp, #32]
 8008948:	2101      	movs	r1, #1
 800894a:	441a      	add	r2, r3
 800894c:	4658      	mov	r0, fp
 800894e:	4498      	add	r8, r3
 8008950:	9208      	str	r2, [sp, #32]
 8008952:	f000 fc6b 	bl	800922c <__i2b>
 8008956:	4605      	mov	r5, r0
 8008958:	b15e      	cbz	r6, 8008972 <_dtoa_r+0x74a>
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	2b00      	cmp	r3, #0
 800895e:	dd08      	ble.n	8008972 <_dtoa_r+0x74a>
 8008960:	42b3      	cmp	r3, r6
 8008962:	9a08      	ldr	r2, [sp, #32]
 8008964:	bfa8      	it	ge
 8008966:	4633      	movge	r3, r6
 8008968:	eba8 0803 	sub.w	r8, r8, r3
 800896c:	1af6      	subs	r6, r6, r3
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	9308      	str	r3, [sp, #32]
 8008972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008974:	b1f3      	cbz	r3, 80089b4 <_dtoa_r+0x78c>
 8008976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80b7 	beq.w	8008aec <_dtoa_r+0x8c4>
 800897e:	b18c      	cbz	r4, 80089a4 <_dtoa_r+0x77c>
 8008980:	4629      	mov	r1, r5
 8008982:	4622      	mov	r2, r4
 8008984:	4658      	mov	r0, fp
 8008986:	f000 fd11 	bl	80093ac <__pow5mult>
 800898a:	464a      	mov	r2, r9
 800898c:	4601      	mov	r1, r0
 800898e:	4605      	mov	r5, r0
 8008990:	4658      	mov	r0, fp
 8008992:	f000 fc61 	bl	8009258 <__multiply>
 8008996:	4649      	mov	r1, r9
 8008998:	9004      	str	r0, [sp, #16]
 800899a:	4658      	mov	r0, fp
 800899c:	f000 fb48 	bl	8009030 <_Bfree>
 80089a0:	9b04      	ldr	r3, [sp, #16]
 80089a2:	4699      	mov	r9, r3
 80089a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089a6:	1b1a      	subs	r2, r3, r4
 80089a8:	d004      	beq.n	80089b4 <_dtoa_r+0x78c>
 80089aa:	4649      	mov	r1, r9
 80089ac:	4658      	mov	r0, fp
 80089ae:	f000 fcfd 	bl	80093ac <__pow5mult>
 80089b2:	4681      	mov	r9, r0
 80089b4:	2101      	movs	r1, #1
 80089b6:	4658      	mov	r0, fp
 80089b8:	f000 fc38 	bl	800922c <__i2b>
 80089bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089be:	4604      	mov	r4, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 81cf 	beq.w	8008d64 <_dtoa_r+0xb3c>
 80089c6:	461a      	mov	r2, r3
 80089c8:	4601      	mov	r1, r0
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 fcee 	bl	80093ac <__pow5mult>
 80089d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	4604      	mov	r4, r0
 80089d6:	f300 8095 	bgt.w	8008b04 <_dtoa_r+0x8dc>
 80089da:	9b02      	ldr	r3, [sp, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 8087 	bne.w	8008af0 <_dtoa_r+0x8c8>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f040 8089 	bne.w	8008b00 <_dtoa_r+0x8d8>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089f4:	0d1b      	lsrs	r3, r3, #20
 80089f6:	051b      	lsls	r3, r3, #20
 80089f8:	b12b      	cbz	r3, 8008a06 <_dtoa_r+0x7de>
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	3301      	adds	r3, #1
 80089fe:	9308      	str	r3, [sp, #32]
 8008a00:	f108 0801 	add.w	r8, r8, #1
 8008a04:	2301      	movs	r3, #1
 8008a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 81b0 	beq.w	8008d70 <_dtoa_r+0xb48>
 8008a10:	6923      	ldr	r3, [r4, #16]
 8008a12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a16:	6918      	ldr	r0, [r3, #16]
 8008a18:	f000 fbbc 	bl	8009194 <__hi0bits>
 8008a1c:	f1c0 0020 	rsb	r0, r0, #32
 8008a20:	9b08      	ldr	r3, [sp, #32]
 8008a22:	4418      	add	r0, r3
 8008a24:	f010 001f 	ands.w	r0, r0, #31
 8008a28:	d077      	beq.n	8008b1a <_dtoa_r+0x8f2>
 8008a2a:	f1c0 0320 	rsb	r3, r0, #32
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	dd6b      	ble.n	8008b0a <_dtoa_r+0x8e2>
 8008a32:	9b08      	ldr	r3, [sp, #32]
 8008a34:	f1c0 001c 	rsb	r0, r0, #28
 8008a38:	4403      	add	r3, r0
 8008a3a:	4480      	add	r8, r0
 8008a3c:	4406      	add	r6, r0
 8008a3e:	9308      	str	r3, [sp, #32]
 8008a40:	f1b8 0f00 	cmp.w	r8, #0
 8008a44:	dd05      	ble.n	8008a52 <_dtoa_r+0x82a>
 8008a46:	4649      	mov	r1, r9
 8008a48:	4642      	mov	r2, r8
 8008a4a:	4658      	mov	r0, fp
 8008a4c:	f000 fd08 	bl	8009460 <__lshift>
 8008a50:	4681      	mov	r9, r0
 8008a52:	9b08      	ldr	r3, [sp, #32]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dd05      	ble.n	8008a64 <_dtoa_r+0x83c>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4658      	mov	r0, fp
 8008a5e:	f000 fcff 	bl	8009460 <__lshift>
 8008a62:	4604      	mov	r4, r0
 8008a64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d059      	beq.n	8008b1e <_dtoa_r+0x8f6>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	4648      	mov	r0, r9
 8008a6e:	f000 fd63 	bl	8009538 <__mcmp>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	da53      	bge.n	8008b1e <_dtoa_r+0x8f6>
 8008a76:	1e7b      	subs	r3, r7, #1
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	220a      	movs	r2, #10
 8008a80:	4658      	mov	r0, fp
 8008a82:	f000 faf7 	bl	8009074 <__multadd>
 8008a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a88:	4681      	mov	r9, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8172 	beq.w	8008d74 <_dtoa_r+0xb4c>
 8008a90:	2300      	movs	r3, #0
 8008a92:	4629      	mov	r1, r5
 8008a94:	220a      	movs	r2, #10
 8008a96:	4658      	mov	r0, fp
 8008a98:	f000 faec 	bl	8009074 <__multadd>
 8008a9c:	9b00      	ldr	r3, [sp, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	dc67      	bgt.n	8008b74 <_dtoa_r+0x94c>
 8008aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	dc41      	bgt.n	8008b2e <_dtoa_r+0x906>
 8008aaa:	e063      	b.n	8008b74 <_dtoa_r+0x94c>
 8008aac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008aae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008ab2:	e746      	b.n	8008942 <_dtoa_r+0x71a>
 8008ab4:	9b07      	ldr	r3, [sp, #28]
 8008ab6:	1e5c      	subs	r4, r3, #1
 8008ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aba:	42a3      	cmp	r3, r4
 8008abc:	bfbf      	itttt	lt
 8008abe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ac0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008ac2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008ac4:	1ae3      	sublt	r3, r4, r3
 8008ac6:	bfb4      	ite	lt
 8008ac8:	18d2      	addlt	r2, r2, r3
 8008aca:	1b1c      	subge	r4, r3, r4
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	bfbc      	itt	lt
 8008ad0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008ad2:	2400      	movlt	r4, #0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfb5      	itete	lt
 8008ad8:	eba8 0603 	sublt.w	r6, r8, r3
 8008adc:	9b07      	ldrge	r3, [sp, #28]
 8008ade:	2300      	movlt	r3, #0
 8008ae0:	4646      	movge	r6, r8
 8008ae2:	e730      	b.n	8008946 <_dtoa_r+0x71e>
 8008ae4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ae6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ae8:	4646      	mov	r6, r8
 8008aea:	e735      	b.n	8008958 <_dtoa_r+0x730>
 8008aec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008aee:	e75c      	b.n	80089aa <_dtoa_r+0x782>
 8008af0:	2300      	movs	r3, #0
 8008af2:	e788      	b.n	8008a06 <_dtoa_r+0x7de>
 8008af4:	3fe00000 	.word	0x3fe00000
 8008af8:	40240000 	.word	0x40240000
 8008afc:	40140000 	.word	0x40140000
 8008b00:	9b02      	ldr	r3, [sp, #8]
 8008b02:	e780      	b.n	8008a06 <_dtoa_r+0x7de>
 8008b04:	2300      	movs	r3, #0
 8008b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b08:	e782      	b.n	8008a10 <_dtoa_r+0x7e8>
 8008b0a:	d099      	beq.n	8008a40 <_dtoa_r+0x818>
 8008b0c:	9a08      	ldr	r2, [sp, #32]
 8008b0e:	331c      	adds	r3, #28
 8008b10:	441a      	add	r2, r3
 8008b12:	4498      	add	r8, r3
 8008b14:	441e      	add	r6, r3
 8008b16:	9208      	str	r2, [sp, #32]
 8008b18:	e792      	b.n	8008a40 <_dtoa_r+0x818>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	e7f6      	b.n	8008b0c <_dtoa_r+0x8e4>
 8008b1e:	9b07      	ldr	r3, [sp, #28]
 8008b20:	9704      	str	r7, [sp, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dc20      	bgt.n	8008b68 <_dtoa_r+0x940>
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	dd1e      	ble.n	8008b6c <_dtoa_r+0x944>
 8008b2e:	9b00      	ldr	r3, [sp, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f47f aec0 	bne.w	80088b6 <_dtoa_r+0x68e>
 8008b36:	4621      	mov	r1, r4
 8008b38:	2205      	movs	r2, #5
 8008b3a:	4658      	mov	r0, fp
 8008b3c:	f000 fa9a 	bl	8009074 <__multadd>
 8008b40:	4601      	mov	r1, r0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4648      	mov	r0, r9
 8008b46:	f000 fcf7 	bl	8009538 <__mcmp>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f77f aeb3 	ble.w	80088b6 <_dtoa_r+0x68e>
 8008b50:	4656      	mov	r6, sl
 8008b52:	2331      	movs	r3, #49	@ 0x31
 8008b54:	f806 3b01 	strb.w	r3, [r6], #1
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	e6ae      	b.n	80088be <_dtoa_r+0x696>
 8008b60:	9c07      	ldr	r4, [sp, #28]
 8008b62:	9704      	str	r7, [sp, #16]
 8008b64:	4625      	mov	r5, r4
 8008b66:	e7f3      	b.n	8008b50 <_dtoa_r+0x928>
 8008b68:	9b07      	ldr	r3, [sp, #28]
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 8104 	beq.w	8008d7c <_dtoa_r+0xb54>
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	dd05      	ble.n	8008b84 <_dtoa_r+0x95c>
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4632      	mov	r2, r6
 8008b7c:	4658      	mov	r0, fp
 8008b7e:	f000 fc6f 	bl	8009460 <__lshift>
 8008b82:	4605      	mov	r5, r0
 8008b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d05a      	beq.n	8008c40 <_dtoa_r+0xa18>
 8008b8a:	6869      	ldr	r1, [r5, #4]
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	f000 fa0f 	bl	8008fb0 <_Balloc>
 8008b92:	4606      	mov	r6, r0
 8008b94:	b928      	cbnz	r0, 8008ba2 <_dtoa_r+0x97a>
 8008b96:	4b84      	ldr	r3, [pc, #528]	@ (8008da8 <_dtoa_r+0xb80>)
 8008b98:	4602      	mov	r2, r0
 8008b9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b9e:	f7ff bb5a 	b.w	8008256 <_dtoa_r+0x2e>
 8008ba2:	692a      	ldr	r2, [r5, #16]
 8008ba4:	3202      	adds	r2, #2
 8008ba6:	0092      	lsls	r2, r2, #2
 8008ba8:	f105 010c 	add.w	r1, r5, #12
 8008bac:	300c      	adds	r0, #12
 8008bae:	f001 ff75 	bl	800aa9c <memcpy>
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	f000 fc52 	bl	8009460 <__lshift>
 8008bbc:	f10a 0301 	add.w	r3, sl, #1
 8008bc0:	9307      	str	r3, [sp, #28]
 8008bc2:	9b00      	ldr	r3, [sp, #0]
 8008bc4:	4453      	add	r3, sl
 8008bc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bc8:	9b02      	ldr	r3, [sp, #8]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	462f      	mov	r7, r5
 8008bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	9b07      	ldr	r3, [sp, #28]
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	4648      	mov	r0, r9
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	f7ff fa99 	bl	8008114 <quorem>
 8008be2:	4639      	mov	r1, r7
 8008be4:	9002      	str	r0, [sp, #8]
 8008be6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bea:	4648      	mov	r0, r9
 8008bec:	f000 fca4 	bl	8009538 <__mcmp>
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	9008      	str	r0, [sp, #32]
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f000 fcba 	bl	8009570 <__mdiff>
 8008bfc:	68c2      	ldr	r2, [r0, #12]
 8008bfe:	4606      	mov	r6, r0
 8008c00:	bb02      	cbnz	r2, 8008c44 <_dtoa_r+0xa1c>
 8008c02:	4601      	mov	r1, r0
 8008c04:	4648      	mov	r0, r9
 8008c06:	f000 fc97 	bl	8009538 <__mcmp>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4658      	mov	r0, fp
 8008c10:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c12:	f000 fa0d 	bl	8009030 <_Bfree>
 8008c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c1a:	9e07      	ldr	r6, [sp, #28]
 8008c1c:	ea43 0102 	orr.w	r1, r3, r2
 8008c20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c22:	4319      	orrs	r1, r3
 8008c24:	d110      	bne.n	8008c48 <_dtoa_r+0xa20>
 8008c26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c2a:	d029      	beq.n	8008c80 <_dtoa_r+0xa58>
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dd02      	ble.n	8008c38 <_dtoa_r+0xa10>
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c38:	9b00      	ldr	r3, [sp, #0]
 8008c3a:	f883 8000 	strb.w	r8, [r3]
 8008c3e:	e63f      	b.n	80088c0 <_dtoa_r+0x698>
 8008c40:	4628      	mov	r0, r5
 8008c42:	e7bb      	b.n	8008bbc <_dtoa_r+0x994>
 8008c44:	2201      	movs	r2, #1
 8008c46:	e7e1      	b.n	8008c0c <_dtoa_r+0x9e4>
 8008c48:	9b08      	ldr	r3, [sp, #32]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db04      	blt.n	8008c58 <_dtoa_r+0xa30>
 8008c4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c50:	430b      	orrs	r3, r1
 8008c52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c54:	430b      	orrs	r3, r1
 8008c56:	d120      	bne.n	8008c9a <_dtoa_r+0xa72>
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	dded      	ble.n	8008c38 <_dtoa_r+0xa10>
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	2201      	movs	r2, #1
 8008c60:	4658      	mov	r0, fp
 8008c62:	f000 fbfd 	bl	8009460 <__lshift>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4681      	mov	r9, r0
 8008c6a:	f000 fc65 	bl	8009538 <__mcmp>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	dc03      	bgt.n	8008c7a <_dtoa_r+0xa52>
 8008c72:	d1e1      	bne.n	8008c38 <_dtoa_r+0xa10>
 8008c74:	f018 0f01 	tst.w	r8, #1
 8008c78:	d0de      	beq.n	8008c38 <_dtoa_r+0xa10>
 8008c7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c7e:	d1d8      	bne.n	8008c32 <_dtoa_r+0xa0a>
 8008c80:	9a00      	ldr	r2, [sp, #0]
 8008c82:	2339      	movs	r3, #57	@ 0x39
 8008c84:	7013      	strb	r3, [r2, #0]
 8008c86:	4633      	mov	r3, r6
 8008c88:	461e      	mov	r6, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c90:	2a39      	cmp	r2, #57	@ 0x39
 8008c92:	d052      	beq.n	8008d3a <_dtoa_r+0xb12>
 8008c94:	3201      	adds	r2, #1
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	e612      	b.n	80088c0 <_dtoa_r+0x698>
 8008c9a:	2a00      	cmp	r2, #0
 8008c9c:	dd07      	ble.n	8008cae <_dtoa_r+0xa86>
 8008c9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ca2:	d0ed      	beq.n	8008c80 <_dtoa_r+0xa58>
 8008ca4:	9a00      	ldr	r2, [sp, #0]
 8008ca6:	f108 0301 	add.w	r3, r8, #1
 8008caa:	7013      	strb	r3, [r2, #0]
 8008cac:	e608      	b.n	80088c0 <_dtoa_r+0x698>
 8008cae:	9b07      	ldr	r3, [sp, #28]
 8008cb0:	9a07      	ldr	r2, [sp, #28]
 8008cb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d028      	beq.n	8008d0e <_dtoa_r+0xae6>
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	220a      	movs	r2, #10
 8008cc2:	4658      	mov	r0, fp
 8008cc4:	f000 f9d6 	bl	8009074 <__multadd>
 8008cc8:	42af      	cmp	r7, r5
 8008cca:	4681      	mov	r9, r0
 8008ccc:	f04f 0300 	mov.w	r3, #0
 8008cd0:	f04f 020a 	mov.w	r2, #10
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	4658      	mov	r0, fp
 8008cd8:	d107      	bne.n	8008cea <_dtoa_r+0xac2>
 8008cda:	f000 f9cb 	bl	8009074 <__multadd>
 8008cde:	4607      	mov	r7, r0
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	9b07      	ldr	r3, [sp, #28]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	9307      	str	r3, [sp, #28]
 8008ce8:	e774      	b.n	8008bd4 <_dtoa_r+0x9ac>
 8008cea:	f000 f9c3 	bl	8009074 <__multadd>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	220a      	movs	r2, #10
 8008cf6:	4658      	mov	r0, fp
 8008cf8:	f000 f9bc 	bl	8009074 <__multadd>
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	e7f0      	b.n	8008ce2 <_dtoa_r+0xaba>
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfcc      	ite	gt
 8008d06:	461e      	movgt	r6, r3
 8008d08:	2601      	movle	r6, #1
 8008d0a:	4456      	add	r6, sl
 8008d0c:	2700      	movs	r7, #0
 8008d0e:	4649      	mov	r1, r9
 8008d10:	2201      	movs	r2, #1
 8008d12:	4658      	mov	r0, fp
 8008d14:	f000 fba4 	bl	8009460 <__lshift>
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4681      	mov	r9, r0
 8008d1c:	f000 fc0c 	bl	8009538 <__mcmp>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	dcb0      	bgt.n	8008c86 <_dtoa_r+0xa5e>
 8008d24:	d102      	bne.n	8008d2c <_dtoa_r+0xb04>
 8008d26:	f018 0f01 	tst.w	r8, #1
 8008d2a:	d1ac      	bne.n	8008c86 <_dtoa_r+0xa5e>
 8008d2c:	4633      	mov	r3, r6
 8008d2e:	461e      	mov	r6, r3
 8008d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d34:	2a30      	cmp	r2, #48	@ 0x30
 8008d36:	d0fa      	beq.n	8008d2e <_dtoa_r+0xb06>
 8008d38:	e5c2      	b.n	80088c0 <_dtoa_r+0x698>
 8008d3a:	459a      	cmp	sl, r3
 8008d3c:	d1a4      	bne.n	8008c88 <_dtoa_r+0xa60>
 8008d3e:	9b04      	ldr	r3, [sp, #16]
 8008d40:	3301      	adds	r3, #1
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	2331      	movs	r3, #49	@ 0x31
 8008d46:	f88a 3000 	strb.w	r3, [sl]
 8008d4a:	e5b9      	b.n	80088c0 <_dtoa_r+0x698>
 8008d4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008dac <_dtoa_r+0xb84>
 8008d52:	b11b      	cbz	r3, 8008d5c <_dtoa_r+0xb34>
 8008d54:	f10a 0308 	add.w	r3, sl, #8
 8008d58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	4650      	mov	r0, sl
 8008d5e:	b019      	add	sp, #100	@ 0x64
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	f77f ae37 	ble.w	80089da <_dtoa_r+0x7b2>
 8008d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d70:	2001      	movs	r0, #1
 8008d72:	e655      	b.n	8008a20 <_dtoa_r+0x7f8>
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f77f aed6 	ble.w	8008b28 <_dtoa_r+0x900>
 8008d7c:	4656      	mov	r6, sl
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4648      	mov	r0, r9
 8008d82:	f7ff f9c7 	bl	8008114 <quorem>
 8008d86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d8a:	f806 8b01 	strb.w	r8, [r6], #1
 8008d8e:	9b00      	ldr	r3, [sp, #0]
 8008d90:	eba6 020a 	sub.w	r2, r6, sl
 8008d94:	4293      	cmp	r3, r2
 8008d96:	ddb3      	ble.n	8008d00 <_dtoa_r+0xad8>
 8008d98:	4649      	mov	r1, r9
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	220a      	movs	r2, #10
 8008d9e:	4658      	mov	r0, fp
 8008da0:	f000 f968 	bl	8009074 <__multadd>
 8008da4:	4681      	mov	r9, r0
 8008da6:	e7ea      	b.n	8008d7e <_dtoa_r+0xb56>
 8008da8:	0800b8cd 	.word	0x0800b8cd
 8008dac:	0800b851 	.word	0x0800b851

08008db0 <_free_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4605      	mov	r5, r0
 8008db4:	2900      	cmp	r1, #0
 8008db6:	d041      	beq.n	8008e3c <_free_r+0x8c>
 8008db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dbc:	1f0c      	subs	r4, r1, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bfb8      	it	lt
 8008dc2:	18e4      	addlt	r4, r4, r3
 8008dc4:	f000 f8e8 	bl	8008f98 <__malloc_lock>
 8008dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e40 <_free_r+0x90>)
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	b933      	cbnz	r3, 8008ddc <_free_r+0x2c>
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6014      	str	r4, [r2, #0]
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd8:	f000 b8e4 	b.w	8008fa4 <__malloc_unlock>
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	d908      	bls.n	8008df2 <_free_r+0x42>
 8008de0:	6820      	ldr	r0, [r4, #0]
 8008de2:	1821      	adds	r1, r4, r0
 8008de4:	428b      	cmp	r3, r1
 8008de6:	bf01      	itttt	eq
 8008de8:	6819      	ldreq	r1, [r3, #0]
 8008dea:	685b      	ldreq	r3, [r3, #4]
 8008dec:	1809      	addeq	r1, r1, r0
 8008dee:	6021      	streq	r1, [r4, #0]
 8008df0:	e7ed      	b.n	8008dce <_free_r+0x1e>
 8008df2:	461a      	mov	r2, r3
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b10b      	cbz	r3, 8008dfc <_free_r+0x4c>
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d9fa      	bls.n	8008df2 <_free_r+0x42>
 8008dfc:	6811      	ldr	r1, [r2, #0]
 8008dfe:	1850      	adds	r0, r2, r1
 8008e00:	42a0      	cmp	r0, r4
 8008e02:	d10b      	bne.n	8008e1c <_free_r+0x6c>
 8008e04:	6820      	ldr	r0, [r4, #0]
 8008e06:	4401      	add	r1, r0
 8008e08:	1850      	adds	r0, r2, r1
 8008e0a:	4283      	cmp	r3, r0
 8008e0c:	6011      	str	r1, [r2, #0]
 8008e0e:	d1e0      	bne.n	8008dd2 <_free_r+0x22>
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	6053      	str	r3, [r2, #4]
 8008e16:	4408      	add	r0, r1
 8008e18:	6010      	str	r0, [r2, #0]
 8008e1a:	e7da      	b.n	8008dd2 <_free_r+0x22>
 8008e1c:	d902      	bls.n	8008e24 <_free_r+0x74>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	e7d6      	b.n	8008dd2 <_free_r+0x22>
 8008e24:	6820      	ldr	r0, [r4, #0]
 8008e26:	1821      	adds	r1, r4, r0
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf04      	itt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	bf04      	itt	eq
 8008e34:	1809      	addeq	r1, r1, r0
 8008e36:	6021      	streq	r1, [r4, #0]
 8008e38:	6054      	str	r4, [r2, #4]
 8008e3a:	e7ca      	b.n	8008dd2 <_free_r+0x22>
 8008e3c:	bd38      	pop	{r3, r4, r5, pc}
 8008e3e:	bf00      	nop
 8008e40:	2000051c 	.word	0x2000051c

08008e44 <malloc>:
 8008e44:	4b02      	ldr	r3, [pc, #8]	@ (8008e50 <malloc+0xc>)
 8008e46:	4601      	mov	r1, r0
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f000 b825 	b.w	8008e98 <_malloc_r>
 8008e4e:	bf00      	nop
 8008e50:	2000001c 	.word	0x2000001c

08008e54 <sbrk_aligned>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4e0f      	ldr	r6, [pc, #60]	@ (8008e94 <sbrk_aligned+0x40>)
 8008e58:	460c      	mov	r4, r1
 8008e5a:	6831      	ldr	r1, [r6, #0]
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	b911      	cbnz	r1, 8008e66 <sbrk_aligned+0x12>
 8008e60:	f001 fe0c 	bl	800aa7c <_sbrk_r>
 8008e64:	6030      	str	r0, [r6, #0]
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f001 fe07 	bl	800aa7c <_sbrk_r>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	d103      	bne.n	8008e7a <sbrk_aligned+0x26>
 8008e72:	f04f 34ff 	mov.w	r4, #4294967295
 8008e76:	4620      	mov	r0, r4
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
 8008e7a:	1cc4      	adds	r4, r0, #3
 8008e7c:	f024 0403 	bic.w	r4, r4, #3
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d0f8      	beq.n	8008e76 <sbrk_aligned+0x22>
 8008e84:	1a21      	subs	r1, r4, r0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f001 fdf8 	bl	800aa7c <_sbrk_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d1f2      	bne.n	8008e76 <sbrk_aligned+0x22>
 8008e90:	e7ef      	b.n	8008e72 <sbrk_aligned+0x1e>
 8008e92:	bf00      	nop
 8008e94:	20000518 	.word	0x20000518

08008e98 <_malloc_r>:
 8008e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e9c:	1ccd      	adds	r5, r1, #3
 8008e9e:	f025 0503 	bic.w	r5, r5, #3
 8008ea2:	3508      	adds	r5, #8
 8008ea4:	2d0c      	cmp	r5, #12
 8008ea6:	bf38      	it	cc
 8008ea8:	250c      	movcc	r5, #12
 8008eaa:	2d00      	cmp	r5, #0
 8008eac:	4606      	mov	r6, r0
 8008eae:	db01      	blt.n	8008eb4 <_malloc_r+0x1c>
 8008eb0:	42a9      	cmp	r1, r5
 8008eb2:	d904      	bls.n	8008ebe <_malloc_r+0x26>
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	6033      	str	r3, [r6, #0]
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f94 <_malloc_r+0xfc>
 8008ec2:	f000 f869 	bl	8008f98 <__malloc_lock>
 8008ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eca:	461c      	mov	r4, r3
 8008ecc:	bb44      	cbnz	r4, 8008f20 <_malloc_r+0x88>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f7ff ffbf 	bl	8008e54 <sbrk_aligned>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	4604      	mov	r4, r0
 8008eda:	d158      	bne.n	8008f8e <_malloc_r+0xf6>
 8008edc:	f8d8 4000 	ldr.w	r4, [r8]
 8008ee0:	4627      	mov	r7, r4
 8008ee2:	2f00      	cmp	r7, #0
 8008ee4:	d143      	bne.n	8008f6e <_malloc_r+0xd6>
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	d04b      	beq.n	8008f82 <_malloc_r+0xea>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	4639      	mov	r1, r7
 8008eee:	4630      	mov	r0, r6
 8008ef0:	eb04 0903 	add.w	r9, r4, r3
 8008ef4:	f001 fdc2 	bl	800aa7c <_sbrk_r>
 8008ef8:	4581      	cmp	r9, r0
 8008efa:	d142      	bne.n	8008f82 <_malloc_r+0xea>
 8008efc:	6821      	ldr	r1, [r4, #0]
 8008efe:	1a6d      	subs	r5, r5, r1
 8008f00:	4629      	mov	r1, r5
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7ff ffa6 	bl	8008e54 <sbrk_aligned>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d03a      	beq.n	8008f82 <_malloc_r+0xea>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	442b      	add	r3, r5
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	f8d8 3000 	ldr.w	r3, [r8]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	bb62      	cbnz	r2, 8008f74 <_malloc_r+0xdc>
 8008f1a:	f8c8 7000 	str.w	r7, [r8]
 8008f1e:	e00f      	b.n	8008f40 <_malloc_r+0xa8>
 8008f20:	6822      	ldr	r2, [r4, #0]
 8008f22:	1b52      	subs	r2, r2, r5
 8008f24:	d420      	bmi.n	8008f68 <_malloc_r+0xd0>
 8008f26:	2a0b      	cmp	r2, #11
 8008f28:	d917      	bls.n	8008f5a <_malloc_r+0xc2>
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	6025      	str	r5, [r4, #0]
 8008f30:	bf18      	it	ne
 8008f32:	6059      	strne	r1, [r3, #4]
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	bf08      	it	eq
 8008f38:	f8c8 1000 	streq.w	r1, [r8]
 8008f3c:	5162      	str	r2, [r4, r5]
 8008f3e:	604b      	str	r3, [r1, #4]
 8008f40:	4630      	mov	r0, r6
 8008f42:	f000 f82f 	bl	8008fa4 <__malloc_unlock>
 8008f46:	f104 000b 	add.w	r0, r4, #11
 8008f4a:	1d23      	adds	r3, r4, #4
 8008f4c:	f020 0007 	bic.w	r0, r0, #7
 8008f50:	1ac2      	subs	r2, r0, r3
 8008f52:	bf1c      	itt	ne
 8008f54:	1a1b      	subne	r3, r3, r0
 8008f56:	50a3      	strne	r3, [r4, r2]
 8008f58:	e7af      	b.n	8008eba <_malloc_r+0x22>
 8008f5a:	6862      	ldr	r2, [r4, #4]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	bf0c      	ite	eq
 8008f60:	f8c8 2000 	streq.w	r2, [r8]
 8008f64:	605a      	strne	r2, [r3, #4]
 8008f66:	e7eb      	b.n	8008f40 <_malloc_r+0xa8>
 8008f68:	4623      	mov	r3, r4
 8008f6a:	6864      	ldr	r4, [r4, #4]
 8008f6c:	e7ae      	b.n	8008ecc <_malloc_r+0x34>
 8008f6e:	463c      	mov	r4, r7
 8008f70:	687f      	ldr	r7, [r7, #4]
 8008f72:	e7b6      	b.n	8008ee2 <_malloc_r+0x4a>
 8008f74:	461a      	mov	r2, r3
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	d1fb      	bne.n	8008f74 <_malloc_r+0xdc>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	6053      	str	r3, [r2, #4]
 8008f80:	e7de      	b.n	8008f40 <_malloc_r+0xa8>
 8008f82:	230c      	movs	r3, #12
 8008f84:	6033      	str	r3, [r6, #0]
 8008f86:	4630      	mov	r0, r6
 8008f88:	f000 f80c 	bl	8008fa4 <__malloc_unlock>
 8008f8c:	e794      	b.n	8008eb8 <_malloc_r+0x20>
 8008f8e:	6005      	str	r5, [r0, #0]
 8008f90:	e7d6      	b.n	8008f40 <_malloc_r+0xa8>
 8008f92:	bf00      	nop
 8008f94:	2000051c 	.word	0x2000051c

08008f98 <__malloc_lock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	@ (8008fa0 <__malloc_lock+0x8>)
 8008f9a:	f7ff b8b2 	b.w	8008102 <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	20000514 	.word	0x20000514

08008fa4 <__malloc_unlock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	@ (8008fac <__malloc_unlock+0x8>)
 8008fa6:	f7ff b8ad 	b.w	8008104 <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	20000514 	.word	0x20000514

08008fb0 <_Balloc>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	69c6      	ldr	r6, [r0, #28]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	b976      	cbnz	r6, 8008fd8 <_Balloc+0x28>
 8008fba:	2010      	movs	r0, #16
 8008fbc:	f7ff ff42 	bl	8008e44 <malloc>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	61e0      	str	r0, [r4, #28]
 8008fc4:	b920      	cbnz	r0, 8008fd0 <_Balloc+0x20>
 8008fc6:	4b18      	ldr	r3, [pc, #96]	@ (8009028 <_Balloc+0x78>)
 8008fc8:	4818      	ldr	r0, [pc, #96]	@ (800902c <_Balloc+0x7c>)
 8008fca:	216b      	movs	r1, #107	@ 0x6b
 8008fcc:	f001 fd7c 	bl	800aac8 <__assert_func>
 8008fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd4:	6006      	str	r6, [r0, #0]
 8008fd6:	60c6      	str	r6, [r0, #12]
 8008fd8:	69e6      	ldr	r6, [r4, #28]
 8008fda:	68f3      	ldr	r3, [r6, #12]
 8008fdc:	b183      	cbz	r3, 8009000 <_Balloc+0x50>
 8008fde:	69e3      	ldr	r3, [r4, #28]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fe6:	b9b8      	cbnz	r0, 8009018 <_Balloc+0x68>
 8008fe8:	2101      	movs	r1, #1
 8008fea:	fa01 f605 	lsl.w	r6, r1, r5
 8008fee:	1d72      	adds	r2, r6, #5
 8008ff0:	0092      	lsls	r2, r2, #2
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f001 fd86 	bl	800ab04 <_calloc_r>
 8008ff8:	b160      	cbz	r0, 8009014 <_Balloc+0x64>
 8008ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ffe:	e00e      	b.n	800901e <_Balloc+0x6e>
 8009000:	2221      	movs	r2, #33	@ 0x21
 8009002:	2104      	movs	r1, #4
 8009004:	4620      	mov	r0, r4
 8009006:	f001 fd7d 	bl	800ab04 <_calloc_r>
 800900a:	69e3      	ldr	r3, [r4, #28]
 800900c:	60f0      	str	r0, [r6, #12]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e4      	bne.n	8008fde <_Balloc+0x2e>
 8009014:	2000      	movs	r0, #0
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	6802      	ldr	r2, [r0, #0]
 800901a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800901e:	2300      	movs	r3, #0
 8009020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009024:	e7f7      	b.n	8009016 <_Balloc+0x66>
 8009026:	bf00      	nop
 8009028:	0800b85e 	.word	0x0800b85e
 800902c:	0800b8de 	.word	0x0800b8de

08009030 <_Bfree>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	69c6      	ldr	r6, [r0, #28]
 8009034:	4605      	mov	r5, r0
 8009036:	460c      	mov	r4, r1
 8009038:	b976      	cbnz	r6, 8009058 <_Bfree+0x28>
 800903a:	2010      	movs	r0, #16
 800903c:	f7ff ff02 	bl	8008e44 <malloc>
 8009040:	4602      	mov	r2, r0
 8009042:	61e8      	str	r0, [r5, #28]
 8009044:	b920      	cbnz	r0, 8009050 <_Bfree+0x20>
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <_Bfree+0x3c>)
 8009048:	4809      	ldr	r0, [pc, #36]	@ (8009070 <_Bfree+0x40>)
 800904a:	218f      	movs	r1, #143	@ 0x8f
 800904c:	f001 fd3c 	bl	800aac8 <__assert_func>
 8009050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009054:	6006      	str	r6, [r0, #0]
 8009056:	60c6      	str	r6, [r0, #12]
 8009058:	b13c      	cbz	r4, 800906a <_Bfree+0x3a>
 800905a:	69eb      	ldr	r3, [r5, #28]
 800905c:	6862      	ldr	r2, [r4, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009064:	6021      	str	r1, [r4, #0]
 8009066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	0800b85e 	.word	0x0800b85e
 8009070:	0800b8de 	.word	0x0800b8de

08009074 <__multadd>:
 8009074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009078:	690d      	ldr	r5, [r1, #16]
 800907a:	4607      	mov	r7, r0
 800907c:	460c      	mov	r4, r1
 800907e:	461e      	mov	r6, r3
 8009080:	f101 0c14 	add.w	ip, r1, #20
 8009084:	2000      	movs	r0, #0
 8009086:	f8dc 3000 	ldr.w	r3, [ip]
 800908a:	b299      	uxth	r1, r3
 800908c:	fb02 6101 	mla	r1, r2, r1, r6
 8009090:	0c1e      	lsrs	r6, r3, #16
 8009092:	0c0b      	lsrs	r3, r1, #16
 8009094:	fb02 3306 	mla	r3, r2, r6, r3
 8009098:	b289      	uxth	r1, r1
 800909a:	3001      	adds	r0, #1
 800909c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090a0:	4285      	cmp	r5, r0
 80090a2:	f84c 1b04 	str.w	r1, [ip], #4
 80090a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090aa:	dcec      	bgt.n	8009086 <__multadd+0x12>
 80090ac:	b30e      	cbz	r6, 80090f2 <__multadd+0x7e>
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dc19      	bgt.n	80090e8 <__multadd+0x74>
 80090b4:	6861      	ldr	r1, [r4, #4]
 80090b6:	4638      	mov	r0, r7
 80090b8:	3101      	adds	r1, #1
 80090ba:	f7ff ff79 	bl	8008fb0 <_Balloc>
 80090be:	4680      	mov	r8, r0
 80090c0:	b928      	cbnz	r0, 80090ce <__multadd+0x5a>
 80090c2:	4602      	mov	r2, r0
 80090c4:	4b0c      	ldr	r3, [pc, #48]	@ (80090f8 <__multadd+0x84>)
 80090c6:	480d      	ldr	r0, [pc, #52]	@ (80090fc <__multadd+0x88>)
 80090c8:	21ba      	movs	r1, #186	@ 0xba
 80090ca:	f001 fcfd 	bl	800aac8 <__assert_func>
 80090ce:	6922      	ldr	r2, [r4, #16]
 80090d0:	3202      	adds	r2, #2
 80090d2:	f104 010c 	add.w	r1, r4, #12
 80090d6:	0092      	lsls	r2, r2, #2
 80090d8:	300c      	adds	r0, #12
 80090da:	f001 fcdf 	bl	800aa9c <memcpy>
 80090de:	4621      	mov	r1, r4
 80090e0:	4638      	mov	r0, r7
 80090e2:	f7ff ffa5 	bl	8009030 <_Bfree>
 80090e6:	4644      	mov	r4, r8
 80090e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090ec:	3501      	adds	r5, #1
 80090ee:	615e      	str	r6, [r3, #20]
 80090f0:	6125      	str	r5, [r4, #16]
 80090f2:	4620      	mov	r0, r4
 80090f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f8:	0800b8cd 	.word	0x0800b8cd
 80090fc:	0800b8de 	.word	0x0800b8de

08009100 <__s2b>:
 8009100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009104:	460c      	mov	r4, r1
 8009106:	4615      	mov	r5, r2
 8009108:	461f      	mov	r7, r3
 800910a:	2209      	movs	r2, #9
 800910c:	3308      	adds	r3, #8
 800910e:	4606      	mov	r6, r0
 8009110:	fb93 f3f2 	sdiv	r3, r3, r2
 8009114:	2100      	movs	r1, #0
 8009116:	2201      	movs	r2, #1
 8009118:	429a      	cmp	r2, r3
 800911a:	db09      	blt.n	8009130 <__s2b+0x30>
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff ff47 	bl	8008fb0 <_Balloc>
 8009122:	b940      	cbnz	r0, 8009136 <__s2b+0x36>
 8009124:	4602      	mov	r2, r0
 8009126:	4b19      	ldr	r3, [pc, #100]	@ (800918c <__s2b+0x8c>)
 8009128:	4819      	ldr	r0, [pc, #100]	@ (8009190 <__s2b+0x90>)
 800912a:	21d3      	movs	r1, #211	@ 0xd3
 800912c:	f001 fccc 	bl	800aac8 <__assert_func>
 8009130:	0052      	lsls	r2, r2, #1
 8009132:	3101      	adds	r1, #1
 8009134:	e7f0      	b.n	8009118 <__s2b+0x18>
 8009136:	9b08      	ldr	r3, [sp, #32]
 8009138:	6143      	str	r3, [r0, #20]
 800913a:	2d09      	cmp	r5, #9
 800913c:	f04f 0301 	mov.w	r3, #1
 8009140:	6103      	str	r3, [r0, #16]
 8009142:	dd16      	ble.n	8009172 <__s2b+0x72>
 8009144:	f104 0909 	add.w	r9, r4, #9
 8009148:	46c8      	mov	r8, r9
 800914a:	442c      	add	r4, r5
 800914c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009150:	4601      	mov	r1, r0
 8009152:	3b30      	subs	r3, #48	@ 0x30
 8009154:	220a      	movs	r2, #10
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ff8c 	bl	8009074 <__multadd>
 800915c:	45a0      	cmp	r8, r4
 800915e:	d1f5      	bne.n	800914c <__s2b+0x4c>
 8009160:	f1a5 0408 	sub.w	r4, r5, #8
 8009164:	444c      	add	r4, r9
 8009166:	1b2d      	subs	r5, r5, r4
 8009168:	1963      	adds	r3, r4, r5
 800916a:	42bb      	cmp	r3, r7
 800916c:	db04      	blt.n	8009178 <__s2b+0x78>
 800916e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009172:	340a      	adds	r4, #10
 8009174:	2509      	movs	r5, #9
 8009176:	e7f6      	b.n	8009166 <__s2b+0x66>
 8009178:	f814 3b01 	ldrb.w	r3, [r4], #1
 800917c:	4601      	mov	r1, r0
 800917e:	3b30      	subs	r3, #48	@ 0x30
 8009180:	220a      	movs	r2, #10
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff ff76 	bl	8009074 <__multadd>
 8009188:	e7ee      	b.n	8009168 <__s2b+0x68>
 800918a:	bf00      	nop
 800918c:	0800b8cd 	.word	0x0800b8cd
 8009190:	0800b8de 	.word	0x0800b8de

08009194 <__hi0bits>:
 8009194:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009198:	4603      	mov	r3, r0
 800919a:	bf36      	itet	cc
 800919c:	0403      	lslcc	r3, r0, #16
 800919e:	2000      	movcs	r0, #0
 80091a0:	2010      	movcc	r0, #16
 80091a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091a6:	bf3c      	itt	cc
 80091a8:	021b      	lslcc	r3, r3, #8
 80091aa:	3008      	addcc	r0, #8
 80091ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091b0:	bf3c      	itt	cc
 80091b2:	011b      	lslcc	r3, r3, #4
 80091b4:	3004      	addcc	r0, #4
 80091b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ba:	bf3c      	itt	cc
 80091bc:	009b      	lslcc	r3, r3, #2
 80091be:	3002      	addcc	r0, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	db05      	blt.n	80091d0 <__hi0bits+0x3c>
 80091c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091c8:	f100 0001 	add.w	r0, r0, #1
 80091cc:	bf08      	it	eq
 80091ce:	2020      	moveq	r0, #32
 80091d0:	4770      	bx	lr

080091d2 <__lo0bits>:
 80091d2:	6803      	ldr	r3, [r0, #0]
 80091d4:	4602      	mov	r2, r0
 80091d6:	f013 0007 	ands.w	r0, r3, #7
 80091da:	d00b      	beq.n	80091f4 <__lo0bits+0x22>
 80091dc:	07d9      	lsls	r1, r3, #31
 80091de:	d421      	bmi.n	8009224 <__lo0bits+0x52>
 80091e0:	0798      	lsls	r0, r3, #30
 80091e2:	bf49      	itett	mi
 80091e4:	085b      	lsrmi	r3, r3, #1
 80091e6:	089b      	lsrpl	r3, r3, #2
 80091e8:	2001      	movmi	r0, #1
 80091ea:	6013      	strmi	r3, [r2, #0]
 80091ec:	bf5c      	itt	pl
 80091ee:	6013      	strpl	r3, [r2, #0]
 80091f0:	2002      	movpl	r0, #2
 80091f2:	4770      	bx	lr
 80091f4:	b299      	uxth	r1, r3
 80091f6:	b909      	cbnz	r1, 80091fc <__lo0bits+0x2a>
 80091f8:	0c1b      	lsrs	r3, r3, #16
 80091fa:	2010      	movs	r0, #16
 80091fc:	b2d9      	uxtb	r1, r3
 80091fe:	b909      	cbnz	r1, 8009204 <__lo0bits+0x32>
 8009200:	3008      	adds	r0, #8
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	0719      	lsls	r1, r3, #28
 8009206:	bf04      	itt	eq
 8009208:	091b      	lsreq	r3, r3, #4
 800920a:	3004      	addeq	r0, #4
 800920c:	0799      	lsls	r1, r3, #30
 800920e:	bf04      	itt	eq
 8009210:	089b      	lsreq	r3, r3, #2
 8009212:	3002      	addeq	r0, #2
 8009214:	07d9      	lsls	r1, r3, #31
 8009216:	d403      	bmi.n	8009220 <__lo0bits+0x4e>
 8009218:	085b      	lsrs	r3, r3, #1
 800921a:	f100 0001 	add.w	r0, r0, #1
 800921e:	d003      	beq.n	8009228 <__lo0bits+0x56>
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	4770      	bx	lr
 8009224:	2000      	movs	r0, #0
 8009226:	4770      	bx	lr
 8009228:	2020      	movs	r0, #32
 800922a:	4770      	bx	lr

0800922c <__i2b>:
 800922c:	b510      	push	{r4, lr}
 800922e:	460c      	mov	r4, r1
 8009230:	2101      	movs	r1, #1
 8009232:	f7ff febd 	bl	8008fb0 <_Balloc>
 8009236:	4602      	mov	r2, r0
 8009238:	b928      	cbnz	r0, 8009246 <__i2b+0x1a>
 800923a:	4b05      	ldr	r3, [pc, #20]	@ (8009250 <__i2b+0x24>)
 800923c:	4805      	ldr	r0, [pc, #20]	@ (8009254 <__i2b+0x28>)
 800923e:	f240 1145 	movw	r1, #325	@ 0x145
 8009242:	f001 fc41 	bl	800aac8 <__assert_func>
 8009246:	2301      	movs	r3, #1
 8009248:	6144      	str	r4, [r0, #20]
 800924a:	6103      	str	r3, [r0, #16]
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	0800b8cd 	.word	0x0800b8cd
 8009254:	0800b8de 	.word	0x0800b8de

08009258 <__multiply>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	4614      	mov	r4, r2
 800925e:	690a      	ldr	r2, [r1, #16]
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	429a      	cmp	r2, r3
 8009264:	bfa8      	it	ge
 8009266:	4623      	movge	r3, r4
 8009268:	460f      	mov	r7, r1
 800926a:	bfa4      	itt	ge
 800926c:	460c      	movge	r4, r1
 800926e:	461f      	movge	r7, r3
 8009270:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009274:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009278:	68a3      	ldr	r3, [r4, #8]
 800927a:	6861      	ldr	r1, [r4, #4]
 800927c:	eb0a 0609 	add.w	r6, sl, r9
 8009280:	42b3      	cmp	r3, r6
 8009282:	b085      	sub	sp, #20
 8009284:	bfb8      	it	lt
 8009286:	3101      	addlt	r1, #1
 8009288:	f7ff fe92 	bl	8008fb0 <_Balloc>
 800928c:	b930      	cbnz	r0, 800929c <__multiply+0x44>
 800928e:	4602      	mov	r2, r0
 8009290:	4b44      	ldr	r3, [pc, #272]	@ (80093a4 <__multiply+0x14c>)
 8009292:	4845      	ldr	r0, [pc, #276]	@ (80093a8 <__multiply+0x150>)
 8009294:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009298:	f001 fc16 	bl	800aac8 <__assert_func>
 800929c:	f100 0514 	add.w	r5, r0, #20
 80092a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092a4:	462b      	mov	r3, r5
 80092a6:	2200      	movs	r2, #0
 80092a8:	4543      	cmp	r3, r8
 80092aa:	d321      	bcc.n	80092f0 <__multiply+0x98>
 80092ac:	f107 0114 	add.w	r1, r7, #20
 80092b0:	f104 0214 	add.w	r2, r4, #20
 80092b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80092b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80092bc:	9302      	str	r3, [sp, #8]
 80092be:	1b13      	subs	r3, r2, r4
 80092c0:	3b15      	subs	r3, #21
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	3304      	adds	r3, #4
 80092c8:	f104 0715 	add.w	r7, r4, #21
 80092cc:	42ba      	cmp	r2, r7
 80092ce:	bf38      	it	cc
 80092d0:	2304      	movcc	r3, #4
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	9b02      	ldr	r3, [sp, #8]
 80092d6:	9103      	str	r1, [sp, #12]
 80092d8:	428b      	cmp	r3, r1
 80092da:	d80c      	bhi.n	80092f6 <__multiply+0x9e>
 80092dc:	2e00      	cmp	r6, #0
 80092de:	dd03      	ble.n	80092e8 <__multiply+0x90>
 80092e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d05b      	beq.n	80093a0 <__multiply+0x148>
 80092e8:	6106      	str	r6, [r0, #16]
 80092ea:	b005      	add	sp, #20
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	f843 2b04 	str.w	r2, [r3], #4
 80092f4:	e7d8      	b.n	80092a8 <__multiply+0x50>
 80092f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80092fa:	f1ba 0f00 	cmp.w	sl, #0
 80092fe:	d024      	beq.n	800934a <__multiply+0xf2>
 8009300:	f104 0e14 	add.w	lr, r4, #20
 8009304:	46a9      	mov	r9, r5
 8009306:	f04f 0c00 	mov.w	ip, #0
 800930a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800930e:	f8d9 3000 	ldr.w	r3, [r9]
 8009312:	fa1f fb87 	uxth.w	fp, r7
 8009316:	b29b      	uxth	r3, r3
 8009318:	fb0a 330b 	mla	r3, sl, fp, r3
 800931c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009320:	f8d9 7000 	ldr.w	r7, [r9]
 8009324:	4463      	add	r3, ip
 8009326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800932a:	fb0a c70b 	mla	r7, sl, fp, ip
 800932e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009332:	b29b      	uxth	r3, r3
 8009334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009338:	4572      	cmp	r2, lr
 800933a:	f849 3b04 	str.w	r3, [r9], #4
 800933e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009342:	d8e2      	bhi.n	800930a <__multiply+0xb2>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	f845 c003 	str.w	ip, [r5, r3]
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009350:	3104      	adds	r1, #4
 8009352:	f1b9 0f00 	cmp.w	r9, #0
 8009356:	d021      	beq.n	800939c <__multiply+0x144>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	f104 0c14 	add.w	ip, r4, #20
 800935e:	46ae      	mov	lr, r5
 8009360:	f04f 0a00 	mov.w	sl, #0
 8009364:	f8bc b000 	ldrh.w	fp, [ip]
 8009368:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800936c:	fb09 770b 	mla	r7, r9, fp, r7
 8009370:	4457      	add	r7, sl
 8009372:	b29b      	uxth	r3, r3
 8009374:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009378:	f84e 3b04 	str.w	r3, [lr], #4
 800937c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009384:	f8be 3000 	ldrh.w	r3, [lr]
 8009388:	fb09 330a 	mla	r3, r9, sl, r3
 800938c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009390:	4562      	cmp	r2, ip
 8009392:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009396:	d8e5      	bhi.n	8009364 <__multiply+0x10c>
 8009398:	9f01      	ldr	r7, [sp, #4]
 800939a:	51eb      	str	r3, [r5, r7]
 800939c:	3504      	adds	r5, #4
 800939e:	e799      	b.n	80092d4 <__multiply+0x7c>
 80093a0:	3e01      	subs	r6, #1
 80093a2:	e79b      	b.n	80092dc <__multiply+0x84>
 80093a4:	0800b8cd 	.word	0x0800b8cd
 80093a8:	0800b8de 	.word	0x0800b8de

080093ac <__pow5mult>:
 80093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	4615      	mov	r5, r2
 80093b2:	f012 0203 	ands.w	r2, r2, #3
 80093b6:	4607      	mov	r7, r0
 80093b8:	460e      	mov	r6, r1
 80093ba:	d007      	beq.n	80093cc <__pow5mult+0x20>
 80093bc:	4c25      	ldr	r4, [pc, #148]	@ (8009454 <__pow5mult+0xa8>)
 80093be:	3a01      	subs	r2, #1
 80093c0:	2300      	movs	r3, #0
 80093c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093c6:	f7ff fe55 	bl	8009074 <__multadd>
 80093ca:	4606      	mov	r6, r0
 80093cc:	10ad      	asrs	r5, r5, #2
 80093ce:	d03d      	beq.n	800944c <__pow5mult+0xa0>
 80093d0:	69fc      	ldr	r4, [r7, #28]
 80093d2:	b97c      	cbnz	r4, 80093f4 <__pow5mult+0x48>
 80093d4:	2010      	movs	r0, #16
 80093d6:	f7ff fd35 	bl	8008e44 <malloc>
 80093da:	4602      	mov	r2, r0
 80093dc:	61f8      	str	r0, [r7, #28]
 80093de:	b928      	cbnz	r0, 80093ec <__pow5mult+0x40>
 80093e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009458 <__pow5mult+0xac>)
 80093e2:	481e      	ldr	r0, [pc, #120]	@ (800945c <__pow5mult+0xb0>)
 80093e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093e8:	f001 fb6e 	bl	800aac8 <__assert_func>
 80093ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093f0:	6004      	str	r4, [r0, #0]
 80093f2:	60c4      	str	r4, [r0, #12]
 80093f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093fc:	b94c      	cbnz	r4, 8009412 <__pow5mult+0x66>
 80093fe:	f240 2171 	movw	r1, #625	@ 0x271
 8009402:	4638      	mov	r0, r7
 8009404:	f7ff ff12 	bl	800922c <__i2b>
 8009408:	2300      	movs	r3, #0
 800940a:	f8c8 0008 	str.w	r0, [r8, #8]
 800940e:	4604      	mov	r4, r0
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	f04f 0900 	mov.w	r9, #0
 8009416:	07eb      	lsls	r3, r5, #31
 8009418:	d50a      	bpl.n	8009430 <__pow5mult+0x84>
 800941a:	4631      	mov	r1, r6
 800941c:	4622      	mov	r2, r4
 800941e:	4638      	mov	r0, r7
 8009420:	f7ff ff1a 	bl	8009258 <__multiply>
 8009424:	4631      	mov	r1, r6
 8009426:	4680      	mov	r8, r0
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff fe01 	bl	8009030 <_Bfree>
 800942e:	4646      	mov	r6, r8
 8009430:	106d      	asrs	r5, r5, #1
 8009432:	d00b      	beq.n	800944c <__pow5mult+0xa0>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	b938      	cbnz	r0, 8009448 <__pow5mult+0x9c>
 8009438:	4622      	mov	r2, r4
 800943a:	4621      	mov	r1, r4
 800943c:	4638      	mov	r0, r7
 800943e:	f7ff ff0b 	bl	8009258 <__multiply>
 8009442:	6020      	str	r0, [r4, #0]
 8009444:	f8c0 9000 	str.w	r9, [r0]
 8009448:	4604      	mov	r4, r0
 800944a:	e7e4      	b.n	8009416 <__pow5mult+0x6a>
 800944c:	4630      	mov	r0, r6
 800944e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009452:	bf00      	nop
 8009454:	0800b938 	.word	0x0800b938
 8009458:	0800b85e 	.word	0x0800b85e
 800945c:	0800b8de 	.word	0x0800b8de

08009460 <__lshift>:
 8009460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009464:	460c      	mov	r4, r1
 8009466:	6849      	ldr	r1, [r1, #4]
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	4607      	mov	r7, r0
 8009472:	4691      	mov	r9, r2
 8009474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009478:	f108 0601 	add.w	r6, r8, #1
 800947c:	42b3      	cmp	r3, r6
 800947e:	db0b      	blt.n	8009498 <__lshift+0x38>
 8009480:	4638      	mov	r0, r7
 8009482:	f7ff fd95 	bl	8008fb0 <_Balloc>
 8009486:	4605      	mov	r5, r0
 8009488:	b948      	cbnz	r0, 800949e <__lshift+0x3e>
 800948a:	4602      	mov	r2, r0
 800948c:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <__lshift+0xd0>)
 800948e:	4829      	ldr	r0, [pc, #164]	@ (8009534 <__lshift+0xd4>)
 8009490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009494:	f001 fb18 	bl	800aac8 <__assert_func>
 8009498:	3101      	adds	r1, #1
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	e7ee      	b.n	800947c <__lshift+0x1c>
 800949e:	2300      	movs	r3, #0
 80094a0:	f100 0114 	add.w	r1, r0, #20
 80094a4:	f100 0210 	add.w	r2, r0, #16
 80094a8:	4618      	mov	r0, r3
 80094aa:	4553      	cmp	r3, sl
 80094ac:	db33      	blt.n	8009516 <__lshift+0xb6>
 80094ae:	6920      	ldr	r0, [r4, #16]
 80094b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094b4:	f104 0314 	add.w	r3, r4, #20
 80094b8:	f019 091f 	ands.w	r9, r9, #31
 80094bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094c4:	d02b      	beq.n	800951e <__lshift+0xbe>
 80094c6:	f1c9 0e20 	rsb	lr, r9, #32
 80094ca:	468a      	mov	sl, r1
 80094cc:	2200      	movs	r2, #0
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	fa00 f009 	lsl.w	r0, r0, r9
 80094d4:	4310      	orrs	r0, r2
 80094d6:	f84a 0b04 	str.w	r0, [sl], #4
 80094da:	f853 2b04 	ldr.w	r2, [r3], #4
 80094de:	459c      	cmp	ip, r3
 80094e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80094e4:	d8f3      	bhi.n	80094ce <__lshift+0x6e>
 80094e6:	ebac 0304 	sub.w	r3, ip, r4
 80094ea:	3b15      	subs	r3, #21
 80094ec:	f023 0303 	bic.w	r3, r3, #3
 80094f0:	3304      	adds	r3, #4
 80094f2:	f104 0015 	add.w	r0, r4, #21
 80094f6:	4584      	cmp	ip, r0
 80094f8:	bf38      	it	cc
 80094fa:	2304      	movcc	r3, #4
 80094fc:	50ca      	str	r2, [r1, r3]
 80094fe:	b10a      	cbz	r2, 8009504 <__lshift+0xa4>
 8009500:	f108 0602 	add.w	r6, r8, #2
 8009504:	3e01      	subs	r6, #1
 8009506:	4638      	mov	r0, r7
 8009508:	612e      	str	r6, [r5, #16]
 800950a:	4621      	mov	r1, r4
 800950c:	f7ff fd90 	bl	8009030 <_Bfree>
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	f842 0f04 	str.w	r0, [r2, #4]!
 800951a:	3301      	adds	r3, #1
 800951c:	e7c5      	b.n	80094aa <__lshift+0x4a>
 800951e:	3904      	subs	r1, #4
 8009520:	f853 2b04 	ldr.w	r2, [r3], #4
 8009524:	f841 2f04 	str.w	r2, [r1, #4]!
 8009528:	459c      	cmp	ip, r3
 800952a:	d8f9      	bhi.n	8009520 <__lshift+0xc0>
 800952c:	e7ea      	b.n	8009504 <__lshift+0xa4>
 800952e:	bf00      	nop
 8009530:	0800b8cd 	.word	0x0800b8cd
 8009534:	0800b8de 	.word	0x0800b8de

08009538 <__mcmp>:
 8009538:	690a      	ldr	r2, [r1, #16]
 800953a:	4603      	mov	r3, r0
 800953c:	6900      	ldr	r0, [r0, #16]
 800953e:	1a80      	subs	r0, r0, r2
 8009540:	b530      	push	{r4, r5, lr}
 8009542:	d10e      	bne.n	8009562 <__mcmp+0x2a>
 8009544:	3314      	adds	r3, #20
 8009546:	3114      	adds	r1, #20
 8009548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800954c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009558:	4295      	cmp	r5, r2
 800955a:	d003      	beq.n	8009564 <__mcmp+0x2c>
 800955c:	d205      	bcs.n	800956a <__mcmp+0x32>
 800955e:	f04f 30ff 	mov.w	r0, #4294967295
 8009562:	bd30      	pop	{r4, r5, pc}
 8009564:	42a3      	cmp	r3, r4
 8009566:	d3f3      	bcc.n	8009550 <__mcmp+0x18>
 8009568:	e7fb      	b.n	8009562 <__mcmp+0x2a>
 800956a:	2001      	movs	r0, #1
 800956c:	e7f9      	b.n	8009562 <__mcmp+0x2a>
	...

08009570 <__mdiff>:
 8009570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	4689      	mov	r9, r1
 8009576:	4606      	mov	r6, r0
 8009578:	4611      	mov	r1, r2
 800957a:	4648      	mov	r0, r9
 800957c:	4614      	mov	r4, r2
 800957e:	f7ff ffdb 	bl	8009538 <__mcmp>
 8009582:	1e05      	subs	r5, r0, #0
 8009584:	d112      	bne.n	80095ac <__mdiff+0x3c>
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff fd11 	bl	8008fb0 <_Balloc>
 800958e:	4602      	mov	r2, r0
 8009590:	b928      	cbnz	r0, 800959e <__mdiff+0x2e>
 8009592:	4b3f      	ldr	r3, [pc, #252]	@ (8009690 <__mdiff+0x120>)
 8009594:	f240 2137 	movw	r1, #567	@ 0x237
 8009598:	483e      	ldr	r0, [pc, #248]	@ (8009694 <__mdiff+0x124>)
 800959a:	f001 fa95 	bl	800aac8 <__assert_func>
 800959e:	2301      	movs	r3, #1
 80095a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095a4:	4610      	mov	r0, r2
 80095a6:	b003      	add	sp, #12
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	bfbc      	itt	lt
 80095ae:	464b      	movlt	r3, r9
 80095b0:	46a1      	movlt	r9, r4
 80095b2:	4630      	mov	r0, r6
 80095b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095b8:	bfba      	itte	lt
 80095ba:	461c      	movlt	r4, r3
 80095bc:	2501      	movlt	r5, #1
 80095be:	2500      	movge	r5, #0
 80095c0:	f7ff fcf6 	bl	8008fb0 <_Balloc>
 80095c4:	4602      	mov	r2, r0
 80095c6:	b918      	cbnz	r0, 80095d0 <__mdiff+0x60>
 80095c8:	4b31      	ldr	r3, [pc, #196]	@ (8009690 <__mdiff+0x120>)
 80095ca:	f240 2145 	movw	r1, #581	@ 0x245
 80095ce:	e7e3      	b.n	8009598 <__mdiff+0x28>
 80095d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095d4:	6926      	ldr	r6, [r4, #16]
 80095d6:	60c5      	str	r5, [r0, #12]
 80095d8:	f109 0310 	add.w	r3, r9, #16
 80095dc:	f109 0514 	add.w	r5, r9, #20
 80095e0:	f104 0e14 	add.w	lr, r4, #20
 80095e4:	f100 0b14 	add.w	fp, r0, #20
 80095e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	46d9      	mov	r9, fp
 80095f4:	f04f 0c00 	mov.w	ip, #0
 80095f8:	9b01      	ldr	r3, [sp, #4]
 80095fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	fa1f f38a 	uxth.w	r3, sl
 8009608:	4619      	mov	r1, r3
 800960a:	b283      	uxth	r3, r0
 800960c:	1acb      	subs	r3, r1, r3
 800960e:	0c00      	lsrs	r0, r0, #16
 8009610:	4463      	add	r3, ip
 8009612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800961a:	b29b      	uxth	r3, r3
 800961c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009620:	4576      	cmp	r6, lr
 8009622:	f849 3b04 	str.w	r3, [r9], #4
 8009626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800962a:	d8e5      	bhi.n	80095f8 <__mdiff+0x88>
 800962c:	1b33      	subs	r3, r6, r4
 800962e:	3b15      	subs	r3, #21
 8009630:	f023 0303 	bic.w	r3, r3, #3
 8009634:	3415      	adds	r4, #21
 8009636:	3304      	adds	r3, #4
 8009638:	42a6      	cmp	r6, r4
 800963a:	bf38      	it	cc
 800963c:	2304      	movcc	r3, #4
 800963e:	441d      	add	r5, r3
 8009640:	445b      	add	r3, fp
 8009642:	461e      	mov	r6, r3
 8009644:	462c      	mov	r4, r5
 8009646:	4544      	cmp	r4, r8
 8009648:	d30e      	bcc.n	8009668 <__mdiff+0xf8>
 800964a:	f108 0103 	add.w	r1, r8, #3
 800964e:	1b49      	subs	r1, r1, r5
 8009650:	f021 0103 	bic.w	r1, r1, #3
 8009654:	3d03      	subs	r5, #3
 8009656:	45a8      	cmp	r8, r5
 8009658:	bf38      	it	cc
 800965a:	2100      	movcc	r1, #0
 800965c:	440b      	add	r3, r1
 800965e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009662:	b191      	cbz	r1, 800968a <__mdiff+0x11a>
 8009664:	6117      	str	r7, [r2, #16]
 8009666:	e79d      	b.n	80095a4 <__mdiff+0x34>
 8009668:	f854 1b04 	ldr.w	r1, [r4], #4
 800966c:	46e6      	mov	lr, ip
 800966e:	0c08      	lsrs	r0, r1, #16
 8009670:	fa1c fc81 	uxtah	ip, ip, r1
 8009674:	4471      	add	r1, lr
 8009676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800967a:	b289      	uxth	r1, r1
 800967c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009680:	f846 1b04 	str.w	r1, [r6], #4
 8009684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009688:	e7dd      	b.n	8009646 <__mdiff+0xd6>
 800968a:	3f01      	subs	r7, #1
 800968c:	e7e7      	b.n	800965e <__mdiff+0xee>
 800968e:	bf00      	nop
 8009690:	0800b8cd 	.word	0x0800b8cd
 8009694:	0800b8de 	.word	0x0800b8de

08009698 <__ulp>:
 8009698:	b082      	sub	sp, #8
 800969a:	ed8d 0b00 	vstr	d0, [sp]
 800969e:	9a01      	ldr	r2, [sp, #4]
 80096a0:	4b0f      	ldr	r3, [pc, #60]	@ (80096e0 <__ulp+0x48>)
 80096a2:	4013      	ands	r3, r2
 80096a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dc08      	bgt.n	80096be <__ulp+0x26>
 80096ac:	425b      	negs	r3, r3
 80096ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80096b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096b6:	da04      	bge.n	80096c2 <__ulp+0x2a>
 80096b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80096bc:	4113      	asrs	r3, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	e008      	b.n	80096d4 <__ulp+0x3c>
 80096c2:	f1a2 0314 	sub.w	r3, r2, #20
 80096c6:	2b1e      	cmp	r3, #30
 80096c8:	bfda      	itte	le
 80096ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80096ce:	40da      	lsrle	r2, r3
 80096d0:	2201      	movgt	r2, #1
 80096d2:	2300      	movs	r3, #0
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	ec41 0b10 	vmov	d0, r0, r1
 80096dc:	b002      	add	sp, #8
 80096de:	4770      	bx	lr
 80096e0:	7ff00000 	.word	0x7ff00000

080096e4 <__b2d>:
 80096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e8:	6906      	ldr	r6, [r0, #16]
 80096ea:	f100 0814 	add.w	r8, r0, #20
 80096ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80096f2:	1f37      	subs	r7, r6, #4
 80096f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096f8:	4610      	mov	r0, r2
 80096fa:	f7ff fd4b 	bl	8009194 <__hi0bits>
 80096fe:	f1c0 0320 	rsb	r3, r0, #32
 8009702:	280a      	cmp	r0, #10
 8009704:	600b      	str	r3, [r1, #0]
 8009706:	491b      	ldr	r1, [pc, #108]	@ (8009774 <__b2d+0x90>)
 8009708:	dc15      	bgt.n	8009736 <__b2d+0x52>
 800970a:	f1c0 0c0b 	rsb	ip, r0, #11
 800970e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009712:	45b8      	cmp	r8, r7
 8009714:	ea43 0501 	orr.w	r5, r3, r1
 8009718:	bf34      	ite	cc
 800971a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800971e:	2300      	movcs	r3, #0
 8009720:	3015      	adds	r0, #21
 8009722:	fa02 f000 	lsl.w	r0, r2, r0
 8009726:	fa23 f30c 	lsr.w	r3, r3, ip
 800972a:	4303      	orrs	r3, r0
 800972c:	461c      	mov	r4, r3
 800972e:	ec45 4b10 	vmov	d0, r4, r5
 8009732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009736:	45b8      	cmp	r8, r7
 8009738:	bf3a      	itte	cc
 800973a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800973e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009742:	2300      	movcs	r3, #0
 8009744:	380b      	subs	r0, #11
 8009746:	d012      	beq.n	800976e <__b2d+0x8a>
 8009748:	f1c0 0120 	rsb	r1, r0, #32
 800974c:	fa23 f401 	lsr.w	r4, r3, r1
 8009750:	4082      	lsls	r2, r0
 8009752:	4322      	orrs	r2, r4
 8009754:	4547      	cmp	r7, r8
 8009756:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800975a:	bf8c      	ite	hi
 800975c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009760:	2200      	movls	r2, #0
 8009762:	4083      	lsls	r3, r0
 8009764:	40ca      	lsrs	r2, r1
 8009766:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800976a:	4313      	orrs	r3, r2
 800976c:	e7de      	b.n	800972c <__b2d+0x48>
 800976e:	ea42 0501 	orr.w	r5, r2, r1
 8009772:	e7db      	b.n	800972c <__b2d+0x48>
 8009774:	3ff00000 	.word	0x3ff00000

08009778 <__d2b>:
 8009778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800977c:	460f      	mov	r7, r1
 800977e:	2101      	movs	r1, #1
 8009780:	ec59 8b10 	vmov	r8, r9, d0
 8009784:	4616      	mov	r6, r2
 8009786:	f7ff fc13 	bl	8008fb0 <_Balloc>
 800978a:	4604      	mov	r4, r0
 800978c:	b930      	cbnz	r0, 800979c <__d2b+0x24>
 800978e:	4602      	mov	r2, r0
 8009790:	4b23      	ldr	r3, [pc, #140]	@ (8009820 <__d2b+0xa8>)
 8009792:	4824      	ldr	r0, [pc, #144]	@ (8009824 <__d2b+0xac>)
 8009794:	f240 310f 	movw	r1, #783	@ 0x30f
 8009798:	f001 f996 	bl	800aac8 <__assert_func>
 800979c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097a4:	b10d      	cbz	r5, 80097aa <__d2b+0x32>
 80097a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097aa:	9301      	str	r3, [sp, #4]
 80097ac:	f1b8 0300 	subs.w	r3, r8, #0
 80097b0:	d023      	beq.n	80097fa <__d2b+0x82>
 80097b2:	4668      	mov	r0, sp
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	f7ff fd0c 	bl	80091d2 <__lo0bits>
 80097ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097be:	b1d0      	cbz	r0, 80097f6 <__d2b+0x7e>
 80097c0:	f1c0 0320 	rsb	r3, r0, #32
 80097c4:	fa02 f303 	lsl.w	r3, r2, r3
 80097c8:	430b      	orrs	r3, r1
 80097ca:	40c2      	lsrs	r2, r0
 80097cc:	6163      	str	r3, [r4, #20]
 80097ce:	9201      	str	r2, [sp, #4]
 80097d0:	9b01      	ldr	r3, [sp, #4]
 80097d2:	61a3      	str	r3, [r4, #24]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bf0c      	ite	eq
 80097d8:	2201      	moveq	r2, #1
 80097da:	2202      	movne	r2, #2
 80097dc:	6122      	str	r2, [r4, #16]
 80097de:	b1a5      	cbz	r5, 800980a <__d2b+0x92>
 80097e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097e4:	4405      	add	r5, r0
 80097e6:	603d      	str	r5, [r7, #0]
 80097e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097ec:	6030      	str	r0, [r6, #0]
 80097ee:	4620      	mov	r0, r4
 80097f0:	b003      	add	sp, #12
 80097f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097f6:	6161      	str	r1, [r4, #20]
 80097f8:	e7ea      	b.n	80097d0 <__d2b+0x58>
 80097fa:	a801      	add	r0, sp, #4
 80097fc:	f7ff fce9 	bl	80091d2 <__lo0bits>
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	6163      	str	r3, [r4, #20]
 8009804:	3020      	adds	r0, #32
 8009806:	2201      	movs	r2, #1
 8009808:	e7e8      	b.n	80097dc <__d2b+0x64>
 800980a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800980e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009812:	6038      	str	r0, [r7, #0]
 8009814:	6918      	ldr	r0, [r3, #16]
 8009816:	f7ff fcbd 	bl	8009194 <__hi0bits>
 800981a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800981e:	e7e5      	b.n	80097ec <__d2b+0x74>
 8009820:	0800b8cd 	.word	0x0800b8cd
 8009824:	0800b8de 	.word	0x0800b8de

08009828 <__ratio>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	b085      	sub	sp, #20
 800982e:	e9cd 1000 	strd	r1, r0, [sp]
 8009832:	a902      	add	r1, sp, #8
 8009834:	f7ff ff56 	bl	80096e4 <__b2d>
 8009838:	9800      	ldr	r0, [sp, #0]
 800983a:	a903      	add	r1, sp, #12
 800983c:	ec55 4b10 	vmov	r4, r5, d0
 8009840:	f7ff ff50 	bl	80096e4 <__b2d>
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	6919      	ldr	r1, [r3, #16]
 8009848:	9b00      	ldr	r3, [sp, #0]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	1ac9      	subs	r1, r1, r3
 800984e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	ec5b ab10 	vmov	sl, fp, d0
 8009858:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800985c:	2b00      	cmp	r3, #0
 800985e:	bfce      	itee	gt
 8009860:	462a      	movgt	r2, r5
 8009862:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009866:	465a      	movle	r2, fp
 8009868:	462f      	mov	r7, r5
 800986a:	46d9      	mov	r9, fp
 800986c:	bfcc      	ite	gt
 800986e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009872:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009876:	464b      	mov	r3, r9
 8009878:	4652      	mov	r2, sl
 800987a:	4620      	mov	r0, r4
 800987c:	4639      	mov	r1, r7
 800987e:	f7f6 ffed 	bl	800085c <__aeabi_ddiv>
 8009882:	ec41 0b10 	vmov	d0, r0, r1
 8009886:	b005      	add	sp, #20
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800988c <__copybits>:
 800988c:	3901      	subs	r1, #1
 800988e:	b570      	push	{r4, r5, r6, lr}
 8009890:	1149      	asrs	r1, r1, #5
 8009892:	6914      	ldr	r4, [r2, #16]
 8009894:	3101      	adds	r1, #1
 8009896:	f102 0314 	add.w	r3, r2, #20
 800989a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800989e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098a2:	1f05      	subs	r5, r0, #4
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	d30c      	bcc.n	80098c2 <__copybits+0x36>
 80098a8:	1aa3      	subs	r3, r4, r2
 80098aa:	3b11      	subs	r3, #17
 80098ac:	f023 0303 	bic.w	r3, r3, #3
 80098b0:	3211      	adds	r2, #17
 80098b2:	42a2      	cmp	r2, r4
 80098b4:	bf88      	it	hi
 80098b6:	2300      	movhi	r3, #0
 80098b8:	4418      	add	r0, r3
 80098ba:	2300      	movs	r3, #0
 80098bc:	4288      	cmp	r0, r1
 80098be:	d305      	bcc.n	80098cc <__copybits+0x40>
 80098c0:	bd70      	pop	{r4, r5, r6, pc}
 80098c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80098c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80098ca:	e7eb      	b.n	80098a4 <__copybits+0x18>
 80098cc:	f840 3b04 	str.w	r3, [r0], #4
 80098d0:	e7f4      	b.n	80098bc <__copybits+0x30>

080098d2 <__any_on>:
 80098d2:	f100 0214 	add.w	r2, r0, #20
 80098d6:	6900      	ldr	r0, [r0, #16]
 80098d8:	114b      	asrs	r3, r1, #5
 80098da:	4298      	cmp	r0, r3
 80098dc:	b510      	push	{r4, lr}
 80098de:	db11      	blt.n	8009904 <__any_on+0x32>
 80098e0:	dd0a      	ble.n	80098f8 <__any_on+0x26>
 80098e2:	f011 011f 	ands.w	r1, r1, #31
 80098e6:	d007      	beq.n	80098f8 <__any_on+0x26>
 80098e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098ec:	fa24 f001 	lsr.w	r0, r4, r1
 80098f0:	fa00 f101 	lsl.w	r1, r0, r1
 80098f4:	428c      	cmp	r4, r1
 80098f6:	d10b      	bne.n	8009910 <__any_on+0x3e>
 80098f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d803      	bhi.n	8009908 <__any_on+0x36>
 8009900:	2000      	movs	r0, #0
 8009902:	bd10      	pop	{r4, pc}
 8009904:	4603      	mov	r3, r0
 8009906:	e7f7      	b.n	80098f8 <__any_on+0x26>
 8009908:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800990c:	2900      	cmp	r1, #0
 800990e:	d0f5      	beq.n	80098fc <__any_on+0x2a>
 8009910:	2001      	movs	r0, #1
 8009912:	e7f6      	b.n	8009902 <__any_on+0x30>

08009914 <sulp>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	4604      	mov	r4, r0
 8009918:	460d      	mov	r5, r1
 800991a:	ec45 4b10 	vmov	d0, r4, r5
 800991e:	4616      	mov	r6, r2
 8009920:	f7ff feba 	bl	8009698 <__ulp>
 8009924:	ec51 0b10 	vmov	r0, r1, d0
 8009928:	b17e      	cbz	r6, 800994a <sulp+0x36>
 800992a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800992e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009932:	2b00      	cmp	r3, #0
 8009934:	dd09      	ble.n	800994a <sulp+0x36>
 8009936:	051b      	lsls	r3, r3, #20
 8009938:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800993c:	2400      	movs	r4, #0
 800993e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009942:	4622      	mov	r2, r4
 8009944:	462b      	mov	r3, r5
 8009946:	f7f6 fe5f 	bl	8000608 <__aeabi_dmul>
 800994a:	ec41 0b10 	vmov	d0, r0, r1
 800994e:	bd70      	pop	{r4, r5, r6, pc}

08009950 <_strtod_l>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	b09f      	sub	sp, #124	@ 0x7c
 8009956:	460c      	mov	r4, r1
 8009958:	9217      	str	r2, [sp, #92]	@ 0x5c
 800995a:	2200      	movs	r2, #0
 800995c:	921a      	str	r2, [sp, #104]	@ 0x68
 800995e:	9005      	str	r0, [sp, #20]
 8009960:	f04f 0a00 	mov.w	sl, #0
 8009964:	f04f 0b00 	mov.w	fp, #0
 8009968:	460a      	mov	r2, r1
 800996a:	9219      	str	r2, [sp, #100]	@ 0x64
 800996c:	7811      	ldrb	r1, [r2, #0]
 800996e:	292b      	cmp	r1, #43	@ 0x2b
 8009970:	d04a      	beq.n	8009a08 <_strtod_l+0xb8>
 8009972:	d838      	bhi.n	80099e6 <_strtod_l+0x96>
 8009974:	290d      	cmp	r1, #13
 8009976:	d832      	bhi.n	80099de <_strtod_l+0x8e>
 8009978:	2908      	cmp	r1, #8
 800997a:	d832      	bhi.n	80099e2 <_strtod_l+0x92>
 800997c:	2900      	cmp	r1, #0
 800997e:	d03b      	beq.n	80099f8 <_strtod_l+0xa8>
 8009980:	2200      	movs	r2, #0
 8009982:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009984:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009986:	782a      	ldrb	r2, [r5, #0]
 8009988:	2a30      	cmp	r2, #48	@ 0x30
 800998a:	f040 80b3 	bne.w	8009af4 <_strtod_l+0x1a4>
 800998e:	786a      	ldrb	r2, [r5, #1]
 8009990:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009994:	2a58      	cmp	r2, #88	@ 0x58
 8009996:	d16e      	bne.n	8009a76 <_strtod_l+0x126>
 8009998:	9302      	str	r3, [sp, #8]
 800999a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	ab1a      	add	r3, sp, #104	@ 0x68
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	4a8e      	ldr	r2, [pc, #568]	@ (8009bdc <_strtod_l+0x28c>)
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80099a8:	a919      	add	r1, sp, #100	@ 0x64
 80099aa:	f001 f927 	bl	800abfc <__gethex>
 80099ae:	f010 060f 	ands.w	r6, r0, #15
 80099b2:	4604      	mov	r4, r0
 80099b4:	d005      	beq.n	80099c2 <_strtod_l+0x72>
 80099b6:	2e06      	cmp	r6, #6
 80099b8:	d128      	bne.n	8009a0c <_strtod_l+0xbc>
 80099ba:	3501      	adds	r5, #1
 80099bc:	2300      	movs	r3, #0
 80099be:	9519      	str	r5, [sp, #100]	@ 0x64
 80099c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f040 858e 	bne.w	800a4e6 <_strtod_l+0xb96>
 80099ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099cc:	b1cb      	cbz	r3, 8009a02 <_strtod_l+0xb2>
 80099ce:	4652      	mov	r2, sl
 80099d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80099d4:	ec43 2b10 	vmov	d0, r2, r3
 80099d8:	b01f      	add	sp, #124	@ 0x7c
 80099da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099de:	2920      	cmp	r1, #32
 80099e0:	d1ce      	bne.n	8009980 <_strtod_l+0x30>
 80099e2:	3201      	adds	r2, #1
 80099e4:	e7c1      	b.n	800996a <_strtod_l+0x1a>
 80099e6:	292d      	cmp	r1, #45	@ 0x2d
 80099e8:	d1ca      	bne.n	8009980 <_strtod_l+0x30>
 80099ea:	2101      	movs	r1, #1
 80099ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80099ee:	1c51      	adds	r1, r2, #1
 80099f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80099f2:	7852      	ldrb	r2, [r2, #1]
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d1c5      	bne.n	8009984 <_strtod_l+0x34>
 80099f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f040 8570 	bne.w	800a4e2 <_strtod_l+0xb92>
 8009a02:	4652      	mov	r2, sl
 8009a04:	465b      	mov	r3, fp
 8009a06:	e7e5      	b.n	80099d4 <_strtod_l+0x84>
 8009a08:	2100      	movs	r1, #0
 8009a0a:	e7ef      	b.n	80099ec <_strtod_l+0x9c>
 8009a0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a0e:	b13a      	cbz	r2, 8009a20 <_strtod_l+0xd0>
 8009a10:	2135      	movs	r1, #53	@ 0x35
 8009a12:	a81c      	add	r0, sp, #112	@ 0x70
 8009a14:	f7ff ff3a 	bl	800988c <__copybits>
 8009a18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a1a:	9805      	ldr	r0, [sp, #20]
 8009a1c:	f7ff fb08 	bl	8009030 <_Bfree>
 8009a20:	3e01      	subs	r6, #1
 8009a22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009a24:	2e04      	cmp	r6, #4
 8009a26:	d806      	bhi.n	8009a36 <_strtod_l+0xe6>
 8009a28:	e8df f006 	tbb	[pc, r6]
 8009a2c:	201d0314 	.word	0x201d0314
 8009a30:	14          	.byte	0x14
 8009a31:	00          	.byte	0x00
 8009a32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009a36:	05e1      	lsls	r1, r4, #23
 8009a38:	bf48      	it	mi
 8009a3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a42:	0d1b      	lsrs	r3, r3, #20
 8009a44:	051b      	lsls	r3, r3, #20
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1bb      	bne.n	80099c2 <_strtod_l+0x72>
 8009a4a:	f7fe fb2f 	bl	80080ac <__errno>
 8009a4e:	2322      	movs	r3, #34	@ 0x22
 8009a50:	6003      	str	r3, [r0, #0]
 8009a52:	e7b6      	b.n	80099c2 <_strtod_l+0x72>
 8009a54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009a58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a64:	e7e7      	b.n	8009a36 <_strtod_l+0xe6>
 8009a66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009be4 <_strtod_l+0x294>
 8009a6a:	e7e4      	b.n	8009a36 <_strtod_l+0xe6>
 8009a6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a70:	f04f 3aff 	mov.w	sl, #4294967295
 8009a74:	e7df      	b.n	8009a36 <_strtod_l+0xe6>
 8009a76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	2b30      	cmp	r3, #48	@ 0x30
 8009a80:	d0f9      	beq.n	8009a76 <_strtod_l+0x126>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d09d      	beq.n	80099c2 <_strtod_l+0x72>
 8009a86:	2301      	movs	r3, #1
 8009a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9308      	str	r3, [sp, #32]
 8009a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a94:	461f      	mov	r7, r3
 8009a96:	220a      	movs	r2, #10
 8009a98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009a9a:	7805      	ldrb	r5, [r0, #0]
 8009a9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009aa0:	b2d9      	uxtb	r1, r3
 8009aa2:	2909      	cmp	r1, #9
 8009aa4:	d928      	bls.n	8009af8 <_strtod_l+0x1a8>
 8009aa6:	494e      	ldr	r1, [pc, #312]	@ (8009be0 <_strtod_l+0x290>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f000 ffd5 	bl	800aa58 <strncmp>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d032      	beq.n	8009b18 <_strtod_l+0x1c8>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	462a      	mov	r2, r5
 8009ab6:	4681      	mov	r9, r0
 8009ab8:	463d      	mov	r5, r7
 8009aba:	4603      	mov	r3, r0
 8009abc:	2a65      	cmp	r2, #101	@ 0x65
 8009abe:	d001      	beq.n	8009ac4 <_strtod_l+0x174>
 8009ac0:	2a45      	cmp	r2, #69	@ 0x45
 8009ac2:	d114      	bne.n	8009aee <_strtod_l+0x19e>
 8009ac4:	b91d      	cbnz	r5, 8009ace <_strtod_l+0x17e>
 8009ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac8:	4302      	orrs	r2, r0
 8009aca:	d095      	beq.n	80099f8 <_strtod_l+0xa8>
 8009acc:	2500      	movs	r5, #0
 8009ace:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009ad0:	1c62      	adds	r2, r4, #1
 8009ad2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ad4:	7862      	ldrb	r2, [r4, #1]
 8009ad6:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ad8:	d077      	beq.n	8009bca <_strtod_l+0x27a>
 8009ada:	2a2d      	cmp	r2, #45	@ 0x2d
 8009adc:	d07b      	beq.n	8009bd6 <_strtod_l+0x286>
 8009ade:	f04f 0c00 	mov.w	ip, #0
 8009ae2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009ae6:	2909      	cmp	r1, #9
 8009ae8:	f240 8082 	bls.w	8009bf0 <_strtod_l+0x2a0>
 8009aec:	9419      	str	r4, [sp, #100]	@ 0x64
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	e0a2      	b.n	8009c3a <_strtod_l+0x2ea>
 8009af4:	2300      	movs	r3, #0
 8009af6:	e7c7      	b.n	8009a88 <_strtod_l+0x138>
 8009af8:	2f08      	cmp	r7, #8
 8009afa:	bfd5      	itete	le
 8009afc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009afe:	9908      	ldrgt	r1, [sp, #32]
 8009b00:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009b08:	f100 0001 	add.w	r0, r0, #1
 8009b0c:	bfd4      	ite	le
 8009b0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009b10:	9308      	strgt	r3, [sp, #32]
 8009b12:	3701      	adds	r7, #1
 8009b14:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b16:	e7bf      	b.n	8009a98 <_strtod_l+0x148>
 8009b18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b1e:	785a      	ldrb	r2, [r3, #1]
 8009b20:	b37f      	cbz	r7, 8009b82 <_strtod_l+0x232>
 8009b22:	4681      	mov	r9, r0
 8009b24:	463d      	mov	r5, r7
 8009b26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d912      	bls.n	8009b54 <_strtod_l+0x204>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e7c4      	b.n	8009abc <_strtod_l+0x16c>
 8009b32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b38:	785a      	ldrb	r2, [r3, #1]
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	2a30      	cmp	r2, #48	@ 0x30
 8009b3e:	d0f8      	beq.n	8009b32 <_strtod_l+0x1e2>
 8009b40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b44:	2b08      	cmp	r3, #8
 8009b46:	f200 84d3 	bhi.w	800a4f0 <_strtod_l+0xba0>
 8009b4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b4e:	4681      	mov	r9, r0
 8009b50:	2000      	movs	r0, #0
 8009b52:	4605      	mov	r5, r0
 8009b54:	3a30      	subs	r2, #48	@ 0x30
 8009b56:	f100 0301 	add.w	r3, r0, #1
 8009b5a:	d02a      	beq.n	8009bb2 <_strtod_l+0x262>
 8009b5c:	4499      	add	r9, r3
 8009b5e:	eb00 0c05 	add.w	ip, r0, r5
 8009b62:	462b      	mov	r3, r5
 8009b64:	210a      	movs	r1, #10
 8009b66:	4563      	cmp	r3, ip
 8009b68:	d10d      	bne.n	8009b86 <_strtod_l+0x236>
 8009b6a:	1c69      	adds	r1, r5, #1
 8009b6c:	4401      	add	r1, r0
 8009b6e:	4428      	add	r0, r5
 8009b70:	2808      	cmp	r0, #8
 8009b72:	dc16      	bgt.n	8009ba2 <_strtod_l+0x252>
 8009b74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b76:	230a      	movs	r3, #10
 8009b78:	fb03 2300 	mla	r3, r3, r0, r2
 8009b7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e018      	b.n	8009bb4 <_strtod_l+0x264>
 8009b82:	4638      	mov	r0, r7
 8009b84:	e7da      	b.n	8009b3c <_strtod_l+0x1ec>
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	f103 0301 	add.w	r3, r3, #1
 8009b8c:	dc03      	bgt.n	8009b96 <_strtod_l+0x246>
 8009b8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009b90:	434e      	muls	r6, r1
 8009b92:	960a      	str	r6, [sp, #40]	@ 0x28
 8009b94:	e7e7      	b.n	8009b66 <_strtod_l+0x216>
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	bfde      	ittt	le
 8009b9a:	9e08      	ldrle	r6, [sp, #32]
 8009b9c:	434e      	mulle	r6, r1
 8009b9e:	9608      	strle	r6, [sp, #32]
 8009ba0:	e7e1      	b.n	8009b66 <_strtod_l+0x216>
 8009ba2:	280f      	cmp	r0, #15
 8009ba4:	dceb      	bgt.n	8009b7e <_strtod_l+0x22e>
 8009ba6:	9808      	ldr	r0, [sp, #32]
 8009ba8:	230a      	movs	r3, #10
 8009baa:	fb03 2300 	mla	r3, r3, r0, r2
 8009bae:	9308      	str	r3, [sp, #32]
 8009bb0:	e7e5      	b.n	8009b7e <_strtod_l+0x22e>
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bb6:	1c50      	adds	r0, r2, #1
 8009bb8:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bba:	7852      	ldrb	r2, [r2, #1]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	e7b1      	b.n	8009b26 <_strtod_l+0x1d6>
 8009bc2:	f04f 0900 	mov.w	r9, #0
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e77d      	b.n	8009ac6 <_strtod_l+0x176>
 8009bca:	f04f 0c00 	mov.w	ip, #0
 8009bce:	1ca2      	adds	r2, r4, #2
 8009bd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bd2:	78a2      	ldrb	r2, [r4, #2]
 8009bd4:	e785      	b.n	8009ae2 <_strtod_l+0x192>
 8009bd6:	f04f 0c01 	mov.w	ip, #1
 8009bda:	e7f8      	b.n	8009bce <_strtod_l+0x27e>
 8009bdc:	0800ba50 	.word	0x0800ba50
 8009be0:	0800ba38 	.word	0x0800ba38
 8009be4:	7ff00000 	.word	0x7ff00000
 8009be8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bea:	1c51      	adds	r1, r2, #1
 8009bec:	9119      	str	r1, [sp, #100]	@ 0x64
 8009bee:	7852      	ldrb	r2, [r2, #1]
 8009bf0:	2a30      	cmp	r2, #48	@ 0x30
 8009bf2:	d0f9      	beq.n	8009be8 <_strtod_l+0x298>
 8009bf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009bf8:	2908      	cmp	r1, #8
 8009bfa:	f63f af78 	bhi.w	8009aee <_strtod_l+0x19e>
 8009bfe:	3a30      	subs	r2, #48	@ 0x30
 8009c00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c06:	f04f 080a 	mov.w	r8, #10
 8009c0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c0c:	1c56      	adds	r6, r2, #1
 8009c0e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009c10:	7852      	ldrb	r2, [r2, #1]
 8009c12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009c16:	f1be 0f09 	cmp.w	lr, #9
 8009c1a:	d939      	bls.n	8009c90 <_strtod_l+0x340>
 8009c1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009c1e:	1a76      	subs	r6, r6, r1
 8009c20:	2e08      	cmp	r6, #8
 8009c22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009c26:	dc03      	bgt.n	8009c30 <_strtod_l+0x2e0>
 8009c28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c2a:	4588      	cmp	r8, r1
 8009c2c:	bfa8      	it	ge
 8009c2e:	4688      	movge	r8, r1
 8009c30:	f1bc 0f00 	cmp.w	ip, #0
 8009c34:	d001      	beq.n	8009c3a <_strtod_l+0x2ea>
 8009c36:	f1c8 0800 	rsb	r8, r8, #0
 8009c3a:	2d00      	cmp	r5, #0
 8009c3c:	d14e      	bne.n	8009cdc <_strtod_l+0x38c>
 8009c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c40:	4308      	orrs	r0, r1
 8009c42:	f47f aebe 	bne.w	80099c2 <_strtod_l+0x72>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f47f aed6 	bne.w	80099f8 <_strtod_l+0xa8>
 8009c4c:	2a69      	cmp	r2, #105	@ 0x69
 8009c4e:	d028      	beq.n	8009ca2 <_strtod_l+0x352>
 8009c50:	dc25      	bgt.n	8009c9e <_strtod_l+0x34e>
 8009c52:	2a49      	cmp	r2, #73	@ 0x49
 8009c54:	d025      	beq.n	8009ca2 <_strtod_l+0x352>
 8009c56:	2a4e      	cmp	r2, #78	@ 0x4e
 8009c58:	f47f aece 	bne.w	80099f8 <_strtod_l+0xa8>
 8009c5c:	499b      	ldr	r1, [pc, #620]	@ (8009ecc <_strtod_l+0x57c>)
 8009c5e:	a819      	add	r0, sp, #100	@ 0x64
 8009c60:	f001 f9ee 	bl	800b040 <__match>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f43f aec7 	beq.w	80099f8 <_strtod_l+0xa8>
 8009c6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b28      	cmp	r3, #40	@ 0x28
 8009c70:	d12e      	bne.n	8009cd0 <_strtod_l+0x380>
 8009c72:	4997      	ldr	r1, [pc, #604]	@ (8009ed0 <_strtod_l+0x580>)
 8009c74:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c76:	a819      	add	r0, sp, #100	@ 0x64
 8009c78:	f001 f9f6 	bl	800b068 <__hexnan>
 8009c7c:	2805      	cmp	r0, #5
 8009c7e:	d127      	bne.n	8009cd0 <_strtod_l+0x380>
 8009c80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009c86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009c8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009c8e:	e698      	b.n	80099c2 <_strtod_l+0x72>
 8009c90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c92:	fb08 2101 	mla	r1, r8, r1, r2
 8009c96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009c9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c9c:	e7b5      	b.n	8009c0a <_strtod_l+0x2ba>
 8009c9e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009ca0:	e7da      	b.n	8009c58 <_strtod_l+0x308>
 8009ca2:	498c      	ldr	r1, [pc, #560]	@ (8009ed4 <_strtod_l+0x584>)
 8009ca4:	a819      	add	r0, sp, #100	@ 0x64
 8009ca6:	f001 f9cb 	bl	800b040 <__match>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f43f aea4 	beq.w	80099f8 <_strtod_l+0xa8>
 8009cb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cb2:	4989      	ldr	r1, [pc, #548]	@ (8009ed8 <_strtod_l+0x588>)
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	a819      	add	r0, sp, #100	@ 0x64
 8009cb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009cba:	f001 f9c1 	bl	800b040 <__match>
 8009cbe:	b910      	cbnz	r0, 8009cc6 <_strtod_l+0x376>
 8009cc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009cc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009ee8 <_strtod_l+0x598>
 8009cca:	f04f 0a00 	mov.w	sl, #0
 8009cce:	e678      	b.n	80099c2 <_strtod_l+0x72>
 8009cd0:	4882      	ldr	r0, [pc, #520]	@ (8009edc <_strtod_l+0x58c>)
 8009cd2:	f000 fef1 	bl	800aab8 <nan>
 8009cd6:	ec5b ab10 	vmov	sl, fp, d0
 8009cda:	e672      	b.n	80099c2 <_strtod_l+0x72>
 8009cdc:	eba8 0309 	sub.w	r3, r8, r9
 8009ce0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ce4:	2f00      	cmp	r7, #0
 8009ce6:	bf08      	it	eq
 8009ce8:	462f      	moveq	r7, r5
 8009cea:	2d10      	cmp	r5, #16
 8009cec:	462c      	mov	r4, r5
 8009cee:	bfa8      	it	ge
 8009cf0:	2410      	movge	r4, #16
 8009cf2:	f7f6 fc0f 	bl	8000514 <__aeabi_ui2d>
 8009cf6:	2d09      	cmp	r5, #9
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	468b      	mov	fp, r1
 8009cfc:	dc13      	bgt.n	8009d26 <_strtod_l+0x3d6>
 8009cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f43f ae5e 	beq.w	80099c2 <_strtod_l+0x72>
 8009d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d08:	dd78      	ble.n	8009dfc <_strtod_l+0x4ac>
 8009d0a:	2b16      	cmp	r3, #22
 8009d0c:	dc5f      	bgt.n	8009dce <_strtod_l+0x47e>
 8009d0e:	4974      	ldr	r1, [pc, #464]	@ (8009ee0 <_strtod_l+0x590>)
 8009d10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d18:	4652      	mov	r2, sl
 8009d1a:	465b      	mov	r3, fp
 8009d1c:	f7f6 fc74 	bl	8000608 <__aeabi_dmul>
 8009d20:	4682      	mov	sl, r0
 8009d22:	468b      	mov	fp, r1
 8009d24:	e64d      	b.n	80099c2 <_strtod_l+0x72>
 8009d26:	4b6e      	ldr	r3, [pc, #440]	@ (8009ee0 <_strtod_l+0x590>)
 8009d28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009d30:	f7f6 fc6a 	bl	8000608 <__aeabi_dmul>
 8009d34:	4682      	mov	sl, r0
 8009d36:	9808      	ldr	r0, [sp, #32]
 8009d38:	468b      	mov	fp, r1
 8009d3a:	f7f6 fbeb 	bl	8000514 <__aeabi_ui2d>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4650      	mov	r0, sl
 8009d44:	4659      	mov	r1, fp
 8009d46:	f7f6 faa9 	bl	800029c <__adddf3>
 8009d4a:	2d0f      	cmp	r5, #15
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	468b      	mov	fp, r1
 8009d50:	ddd5      	ble.n	8009cfe <_strtod_l+0x3ae>
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	1b2c      	subs	r4, r5, r4
 8009d56:	441c      	add	r4, r3
 8009d58:	2c00      	cmp	r4, #0
 8009d5a:	f340 8096 	ble.w	8009e8a <_strtod_l+0x53a>
 8009d5e:	f014 030f 	ands.w	r3, r4, #15
 8009d62:	d00a      	beq.n	8009d7a <_strtod_l+0x42a>
 8009d64:	495e      	ldr	r1, [pc, #376]	@ (8009ee0 <_strtod_l+0x590>)
 8009d66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d72:	f7f6 fc49 	bl	8000608 <__aeabi_dmul>
 8009d76:	4682      	mov	sl, r0
 8009d78:	468b      	mov	fp, r1
 8009d7a:	f034 040f 	bics.w	r4, r4, #15
 8009d7e:	d073      	beq.n	8009e68 <_strtod_l+0x518>
 8009d80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009d84:	dd48      	ble.n	8009e18 <_strtod_l+0x4c8>
 8009d86:	2400      	movs	r4, #0
 8009d88:	46a0      	mov	r8, r4
 8009d8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d8c:	46a1      	mov	r9, r4
 8009d8e:	9a05      	ldr	r2, [sp, #20]
 8009d90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ee8 <_strtod_l+0x598>
 8009d94:	2322      	movs	r3, #34	@ 0x22
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	f04f 0a00 	mov.w	sl, #0
 8009d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f43f ae0f 	beq.w	80099c2 <_strtod_l+0x72>
 8009da4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009da6:	9805      	ldr	r0, [sp, #20]
 8009da8:	f7ff f942 	bl	8009030 <_Bfree>
 8009dac:	9805      	ldr	r0, [sp, #20]
 8009dae:	4649      	mov	r1, r9
 8009db0:	f7ff f93e 	bl	8009030 <_Bfree>
 8009db4:	9805      	ldr	r0, [sp, #20]
 8009db6:	4641      	mov	r1, r8
 8009db8:	f7ff f93a 	bl	8009030 <_Bfree>
 8009dbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dbe:	9805      	ldr	r0, [sp, #20]
 8009dc0:	f7ff f936 	bl	8009030 <_Bfree>
 8009dc4:	9805      	ldr	r0, [sp, #20]
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	f7ff f932 	bl	8009030 <_Bfree>
 8009dcc:	e5f9      	b.n	80099c2 <_strtod_l+0x72>
 8009dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	dbbc      	blt.n	8009d52 <_strtod_l+0x402>
 8009dd8:	4c41      	ldr	r4, [pc, #260]	@ (8009ee0 <_strtod_l+0x590>)
 8009dda:	f1c5 050f 	rsb	r5, r5, #15
 8009dde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009de2:	4652      	mov	r2, sl
 8009de4:	465b      	mov	r3, fp
 8009de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dea:	f7f6 fc0d 	bl	8000608 <__aeabi_dmul>
 8009dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df0:	1b5d      	subs	r5, r3, r5
 8009df2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009df6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009dfa:	e78f      	b.n	8009d1c <_strtod_l+0x3cc>
 8009dfc:	3316      	adds	r3, #22
 8009dfe:	dba8      	blt.n	8009d52 <_strtod_l+0x402>
 8009e00:	4b37      	ldr	r3, [pc, #220]	@ (8009ee0 <_strtod_l+0x590>)
 8009e02:	eba9 0808 	sub.w	r8, r9, r8
 8009e06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009e0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009e0e:	4650      	mov	r0, sl
 8009e10:	4659      	mov	r1, fp
 8009e12:	f7f6 fd23 	bl	800085c <__aeabi_ddiv>
 8009e16:	e783      	b.n	8009d20 <_strtod_l+0x3d0>
 8009e18:	4b32      	ldr	r3, [pc, #200]	@ (8009ee4 <_strtod_l+0x594>)
 8009e1a:	9308      	str	r3, [sp, #32]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	1124      	asrs	r4, r4, #4
 8009e20:	4650      	mov	r0, sl
 8009e22:	4659      	mov	r1, fp
 8009e24:	461e      	mov	r6, r3
 8009e26:	2c01      	cmp	r4, #1
 8009e28:	dc21      	bgt.n	8009e6e <_strtod_l+0x51e>
 8009e2a:	b10b      	cbz	r3, 8009e30 <_strtod_l+0x4e0>
 8009e2c:	4682      	mov	sl, r0
 8009e2e:	468b      	mov	fp, r1
 8009e30:	492c      	ldr	r1, [pc, #176]	@ (8009ee4 <_strtod_l+0x594>)
 8009e32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009e36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e42:	f7f6 fbe1 	bl	8000608 <__aeabi_dmul>
 8009e46:	4b28      	ldr	r3, [pc, #160]	@ (8009ee8 <_strtod_l+0x598>)
 8009e48:	460a      	mov	r2, r1
 8009e4a:	400b      	ands	r3, r1
 8009e4c:	4927      	ldr	r1, [pc, #156]	@ (8009eec <_strtod_l+0x59c>)
 8009e4e:	428b      	cmp	r3, r1
 8009e50:	4682      	mov	sl, r0
 8009e52:	d898      	bhi.n	8009d86 <_strtod_l+0x436>
 8009e54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009e58:	428b      	cmp	r3, r1
 8009e5a:	bf86      	itte	hi
 8009e5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009ef0 <_strtod_l+0x5a0>
 8009e60:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9308      	str	r3, [sp, #32]
 8009e6c:	e07a      	b.n	8009f64 <_strtod_l+0x614>
 8009e6e:	07e2      	lsls	r2, r4, #31
 8009e70:	d505      	bpl.n	8009e7e <_strtod_l+0x52e>
 8009e72:	9b08      	ldr	r3, [sp, #32]
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 fbc6 	bl	8000608 <__aeabi_dmul>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	9a08      	ldr	r2, [sp, #32]
 8009e80:	3208      	adds	r2, #8
 8009e82:	3601      	adds	r6, #1
 8009e84:	1064      	asrs	r4, r4, #1
 8009e86:	9208      	str	r2, [sp, #32]
 8009e88:	e7cd      	b.n	8009e26 <_strtod_l+0x4d6>
 8009e8a:	d0ed      	beq.n	8009e68 <_strtod_l+0x518>
 8009e8c:	4264      	negs	r4, r4
 8009e8e:	f014 020f 	ands.w	r2, r4, #15
 8009e92:	d00a      	beq.n	8009eaa <_strtod_l+0x55a>
 8009e94:	4b12      	ldr	r3, [pc, #72]	@ (8009ee0 <_strtod_l+0x590>)
 8009e96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	4659      	mov	r1, fp
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 fcdb 	bl	800085c <__aeabi_ddiv>
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	1124      	asrs	r4, r4, #4
 8009eac:	d0dc      	beq.n	8009e68 <_strtod_l+0x518>
 8009eae:	2c1f      	cmp	r4, #31
 8009eb0:	dd20      	ble.n	8009ef4 <_strtod_l+0x5a4>
 8009eb2:	2400      	movs	r4, #0
 8009eb4:	46a0      	mov	r8, r4
 8009eb6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009eb8:	46a1      	mov	r9, r4
 8009eba:	9a05      	ldr	r2, [sp, #20]
 8009ebc:	2322      	movs	r3, #34	@ 0x22
 8009ebe:	f04f 0a00 	mov.w	sl, #0
 8009ec2:	f04f 0b00 	mov.w	fp, #0
 8009ec6:	6013      	str	r3, [r2, #0]
 8009ec8:	e768      	b.n	8009d9c <_strtod_l+0x44c>
 8009eca:	bf00      	nop
 8009ecc:	0800b825 	.word	0x0800b825
 8009ed0:	0800ba3c 	.word	0x0800ba3c
 8009ed4:	0800b81d 	.word	0x0800b81d
 8009ed8:	0800b854 	.word	0x0800b854
 8009edc:	0800bbe5 	.word	0x0800bbe5
 8009ee0:	0800b970 	.word	0x0800b970
 8009ee4:	0800b948 	.word	0x0800b948
 8009ee8:	7ff00000 	.word	0x7ff00000
 8009eec:	7ca00000 	.word	0x7ca00000
 8009ef0:	7fefffff 	.word	0x7fefffff
 8009ef4:	f014 0310 	ands.w	r3, r4, #16
 8009ef8:	bf18      	it	ne
 8009efa:	236a      	movne	r3, #106	@ 0x6a
 8009efc:	4ea9      	ldr	r6, [pc, #676]	@ (800a1a4 <_strtod_l+0x854>)
 8009efe:	9308      	str	r3, [sp, #32]
 8009f00:	4650      	mov	r0, sl
 8009f02:	4659      	mov	r1, fp
 8009f04:	2300      	movs	r3, #0
 8009f06:	07e2      	lsls	r2, r4, #31
 8009f08:	d504      	bpl.n	8009f14 <_strtod_l+0x5c4>
 8009f0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f0e:	f7f6 fb7b 	bl	8000608 <__aeabi_dmul>
 8009f12:	2301      	movs	r3, #1
 8009f14:	1064      	asrs	r4, r4, #1
 8009f16:	f106 0608 	add.w	r6, r6, #8
 8009f1a:	d1f4      	bne.n	8009f06 <_strtod_l+0x5b6>
 8009f1c:	b10b      	cbz	r3, 8009f22 <_strtod_l+0x5d2>
 8009f1e:	4682      	mov	sl, r0
 8009f20:	468b      	mov	fp, r1
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	b1b3      	cbz	r3, 8009f54 <_strtod_l+0x604>
 8009f26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	4659      	mov	r1, fp
 8009f32:	dd0f      	ble.n	8009f54 <_strtod_l+0x604>
 8009f34:	2b1f      	cmp	r3, #31
 8009f36:	dd55      	ble.n	8009fe4 <_strtod_l+0x694>
 8009f38:	2b34      	cmp	r3, #52	@ 0x34
 8009f3a:	bfde      	ittt	le
 8009f3c:	f04f 33ff 	movle.w	r3, #4294967295
 8009f40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f44:	4093      	lslle	r3, r2
 8009f46:	f04f 0a00 	mov.w	sl, #0
 8009f4a:	bfcc      	ite	gt
 8009f4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f50:	ea03 0b01 	andle.w	fp, r3, r1
 8009f54:	2200      	movs	r2, #0
 8009f56:	2300      	movs	r3, #0
 8009f58:	4650      	mov	r0, sl
 8009f5a:	4659      	mov	r1, fp
 8009f5c:	f7f6 fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d1a6      	bne.n	8009eb2 <_strtod_l+0x562>
 8009f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f6a:	9805      	ldr	r0, [sp, #20]
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	463a      	mov	r2, r7
 8009f70:	f7ff f8c6 	bl	8009100 <__s2b>
 8009f74:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f43f af05 	beq.w	8009d86 <_strtod_l+0x436>
 8009f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	eba9 0308 	sub.w	r3, r9, r8
 8009f84:	bfa8      	it	ge
 8009f86:	2300      	movge	r3, #0
 8009f88:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f90:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f92:	46a0      	mov	r8, r4
 8009f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f96:	9805      	ldr	r0, [sp, #20]
 8009f98:	6859      	ldr	r1, [r3, #4]
 8009f9a:	f7ff f809 	bl	8008fb0 <_Balloc>
 8009f9e:	4681      	mov	r9, r0
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	f43f aef4 	beq.w	8009d8e <_strtod_l+0x43e>
 8009fa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fa8:	691a      	ldr	r2, [r3, #16]
 8009faa:	3202      	adds	r2, #2
 8009fac:	f103 010c 	add.w	r1, r3, #12
 8009fb0:	0092      	lsls	r2, r2, #2
 8009fb2:	300c      	adds	r0, #12
 8009fb4:	f000 fd72 	bl	800aa9c <memcpy>
 8009fb8:	ec4b ab10 	vmov	d0, sl, fp
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	aa1c      	add	r2, sp, #112	@ 0x70
 8009fc0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009fc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009fc6:	f7ff fbd7 	bl	8009778 <__d2b>
 8009fca:	901a      	str	r0, [sp, #104]	@ 0x68
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	f43f aede 	beq.w	8009d8e <_strtod_l+0x43e>
 8009fd2:	9805      	ldr	r0, [sp, #20]
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	f7ff f929 	bl	800922c <__i2b>
 8009fda:	4680      	mov	r8, r0
 8009fdc:	b948      	cbnz	r0, 8009ff2 <_strtod_l+0x6a2>
 8009fde:	f04f 0800 	mov.w	r8, #0
 8009fe2:	e6d4      	b.n	8009d8e <_strtod_l+0x43e>
 8009fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fec:	ea03 0a0a 	and.w	sl, r3, sl
 8009ff0:	e7b0      	b.n	8009f54 <_strtod_l+0x604>
 8009ff2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009ff4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	bfab      	itete	ge
 8009ffa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009ffc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009ffe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a000:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a002:	bfac      	ite	ge
 800a004:	18ef      	addge	r7, r5, r3
 800a006:	1b5e      	sublt	r6, r3, r5
 800a008:	9b08      	ldr	r3, [sp, #32]
 800a00a:	1aed      	subs	r5, r5, r3
 800a00c:	4415      	add	r5, r2
 800a00e:	4b66      	ldr	r3, [pc, #408]	@ (800a1a8 <_strtod_l+0x858>)
 800a010:	3d01      	subs	r5, #1
 800a012:	429d      	cmp	r5, r3
 800a014:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a018:	da50      	bge.n	800a0bc <_strtod_l+0x76c>
 800a01a:	1b5b      	subs	r3, r3, r5
 800a01c:	2b1f      	cmp	r3, #31
 800a01e:	eba2 0203 	sub.w	r2, r2, r3
 800a022:	f04f 0101 	mov.w	r1, #1
 800a026:	dc3d      	bgt.n	800a0a4 <_strtod_l+0x754>
 800a028:	fa01 f303 	lsl.w	r3, r1, r3
 800a02c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a02e:	2300      	movs	r3, #0
 800a030:	9310      	str	r3, [sp, #64]	@ 0x40
 800a032:	18bd      	adds	r5, r7, r2
 800a034:	9b08      	ldr	r3, [sp, #32]
 800a036:	42af      	cmp	r7, r5
 800a038:	4416      	add	r6, r2
 800a03a:	441e      	add	r6, r3
 800a03c:	463b      	mov	r3, r7
 800a03e:	bfa8      	it	ge
 800a040:	462b      	movge	r3, r5
 800a042:	42b3      	cmp	r3, r6
 800a044:	bfa8      	it	ge
 800a046:	4633      	movge	r3, r6
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bfc2      	ittt	gt
 800a04c:	1aed      	subgt	r5, r5, r3
 800a04e:	1af6      	subgt	r6, r6, r3
 800a050:	1aff      	subgt	r7, r7, r3
 800a052:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a054:	2b00      	cmp	r3, #0
 800a056:	dd16      	ble.n	800a086 <_strtod_l+0x736>
 800a058:	4641      	mov	r1, r8
 800a05a:	9805      	ldr	r0, [sp, #20]
 800a05c:	461a      	mov	r2, r3
 800a05e:	f7ff f9a5 	bl	80093ac <__pow5mult>
 800a062:	4680      	mov	r8, r0
 800a064:	2800      	cmp	r0, #0
 800a066:	d0ba      	beq.n	8009fde <_strtod_l+0x68e>
 800a068:	4601      	mov	r1, r0
 800a06a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a06c:	9805      	ldr	r0, [sp, #20]
 800a06e:	f7ff f8f3 	bl	8009258 <__multiply>
 800a072:	900e      	str	r0, [sp, #56]	@ 0x38
 800a074:	2800      	cmp	r0, #0
 800a076:	f43f ae8a 	beq.w	8009d8e <_strtod_l+0x43e>
 800a07a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a07c:	9805      	ldr	r0, [sp, #20]
 800a07e:	f7fe ffd7 	bl	8009030 <_Bfree>
 800a082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a084:	931a      	str	r3, [sp, #104]	@ 0x68
 800a086:	2d00      	cmp	r5, #0
 800a088:	dc1d      	bgt.n	800a0c6 <_strtod_l+0x776>
 800a08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd23      	ble.n	800a0d8 <_strtod_l+0x788>
 800a090:	4649      	mov	r1, r9
 800a092:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a094:	9805      	ldr	r0, [sp, #20]
 800a096:	f7ff f989 	bl	80093ac <__pow5mult>
 800a09a:	4681      	mov	r9, r0
 800a09c:	b9e0      	cbnz	r0, 800a0d8 <_strtod_l+0x788>
 800a09e:	f04f 0900 	mov.w	r9, #0
 800a0a2:	e674      	b.n	8009d8e <_strtod_l+0x43e>
 800a0a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a0a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a0ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a0b0:	35e2      	adds	r5, #226	@ 0xe2
 800a0b2:	fa01 f305 	lsl.w	r3, r1, r5
 800a0b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a0ba:	e7ba      	b.n	800a032 <_strtod_l+0x6e2>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0c4:	e7b5      	b.n	800a032 <_strtod_l+0x6e2>
 800a0c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0c8:	9805      	ldr	r0, [sp, #20]
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	f7ff f9c8 	bl	8009460 <__lshift>
 800a0d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d1d9      	bne.n	800a08a <_strtod_l+0x73a>
 800a0d6:	e65a      	b.n	8009d8e <_strtod_l+0x43e>
 800a0d8:	2e00      	cmp	r6, #0
 800a0da:	dd07      	ble.n	800a0ec <_strtod_l+0x79c>
 800a0dc:	4649      	mov	r1, r9
 800a0de:	9805      	ldr	r0, [sp, #20]
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	f7ff f9bd 	bl	8009460 <__lshift>
 800a0e6:	4681      	mov	r9, r0
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d0d8      	beq.n	800a09e <_strtod_l+0x74e>
 800a0ec:	2f00      	cmp	r7, #0
 800a0ee:	dd08      	ble.n	800a102 <_strtod_l+0x7b2>
 800a0f0:	4641      	mov	r1, r8
 800a0f2:	9805      	ldr	r0, [sp, #20]
 800a0f4:	463a      	mov	r2, r7
 800a0f6:	f7ff f9b3 	bl	8009460 <__lshift>
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f43f ae46 	beq.w	8009d8e <_strtod_l+0x43e>
 800a102:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a104:	9805      	ldr	r0, [sp, #20]
 800a106:	464a      	mov	r2, r9
 800a108:	f7ff fa32 	bl	8009570 <__mdiff>
 800a10c:	4604      	mov	r4, r0
 800a10e:	2800      	cmp	r0, #0
 800a110:	f43f ae3d 	beq.w	8009d8e <_strtod_l+0x43e>
 800a114:	68c3      	ldr	r3, [r0, #12]
 800a116:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a118:	2300      	movs	r3, #0
 800a11a:	60c3      	str	r3, [r0, #12]
 800a11c:	4641      	mov	r1, r8
 800a11e:	f7ff fa0b 	bl	8009538 <__mcmp>
 800a122:	2800      	cmp	r0, #0
 800a124:	da46      	bge.n	800a1b4 <_strtod_l+0x864>
 800a126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a128:	ea53 030a 	orrs.w	r3, r3, sl
 800a12c:	d16c      	bne.n	800a208 <_strtod_l+0x8b8>
 800a12e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a132:	2b00      	cmp	r3, #0
 800a134:	d168      	bne.n	800a208 <_strtod_l+0x8b8>
 800a136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a13a:	0d1b      	lsrs	r3, r3, #20
 800a13c:	051b      	lsls	r3, r3, #20
 800a13e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a142:	d961      	bls.n	800a208 <_strtod_l+0x8b8>
 800a144:	6963      	ldr	r3, [r4, #20]
 800a146:	b913      	cbnz	r3, 800a14e <_strtod_l+0x7fe>
 800a148:	6923      	ldr	r3, [r4, #16]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	dd5c      	ble.n	800a208 <_strtod_l+0x8b8>
 800a14e:	4621      	mov	r1, r4
 800a150:	2201      	movs	r2, #1
 800a152:	9805      	ldr	r0, [sp, #20]
 800a154:	f7ff f984 	bl	8009460 <__lshift>
 800a158:	4641      	mov	r1, r8
 800a15a:	4604      	mov	r4, r0
 800a15c:	f7ff f9ec 	bl	8009538 <__mcmp>
 800a160:	2800      	cmp	r0, #0
 800a162:	dd51      	ble.n	800a208 <_strtod_l+0x8b8>
 800a164:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a168:	9a08      	ldr	r2, [sp, #32]
 800a16a:	0d1b      	lsrs	r3, r3, #20
 800a16c:	051b      	lsls	r3, r3, #20
 800a16e:	2a00      	cmp	r2, #0
 800a170:	d06b      	beq.n	800a24a <_strtod_l+0x8fa>
 800a172:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a176:	d868      	bhi.n	800a24a <_strtod_l+0x8fa>
 800a178:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a17c:	f67f ae9d 	bls.w	8009eba <_strtod_l+0x56a>
 800a180:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <_strtod_l+0x85c>)
 800a182:	4650      	mov	r0, sl
 800a184:	4659      	mov	r1, fp
 800a186:	2200      	movs	r2, #0
 800a188:	f7f6 fa3e 	bl	8000608 <__aeabi_dmul>
 800a18c:	4b08      	ldr	r3, [pc, #32]	@ (800a1b0 <_strtod_l+0x860>)
 800a18e:	400b      	ands	r3, r1
 800a190:	4682      	mov	sl, r0
 800a192:	468b      	mov	fp, r1
 800a194:	2b00      	cmp	r3, #0
 800a196:	f47f ae05 	bne.w	8009da4 <_strtod_l+0x454>
 800a19a:	9a05      	ldr	r2, [sp, #20]
 800a19c:	2322      	movs	r3, #34	@ 0x22
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	e600      	b.n	8009da4 <_strtod_l+0x454>
 800a1a2:	bf00      	nop
 800a1a4:	0800ba68 	.word	0x0800ba68
 800a1a8:	fffffc02 	.word	0xfffffc02
 800a1ac:	39500000 	.word	0x39500000
 800a1b0:	7ff00000 	.word	0x7ff00000
 800a1b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1b8:	d165      	bne.n	800a286 <_strtod_l+0x936>
 800a1ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a1bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1c0:	b35a      	cbz	r2, 800a21a <_strtod_l+0x8ca>
 800a1c2:	4a9f      	ldr	r2, [pc, #636]	@ (800a440 <_strtod_l+0xaf0>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d12b      	bne.n	800a220 <_strtod_l+0x8d0>
 800a1c8:	9b08      	ldr	r3, [sp, #32]
 800a1ca:	4651      	mov	r1, sl
 800a1cc:	b303      	cbz	r3, 800a210 <_strtod_l+0x8c0>
 800a1ce:	4b9d      	ldr	r3, [pc, #628]	@ (800a444 <_strtod_l+0xaf4>)
 800a1d0:	465a      	mov	r2, fp
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1dc:	d81b      	bhi.n	800a216 <_strtod_l+0x8c6>
 800a1de:	0d1b      	lsrs	r3, r3, #20
 800a1e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e8:	4299      	cmp	r1, r3
 800a1ea:	d119      	bne.n	800a220 <_strtod_l+0x8d0>
 800a1ec:	4b96      	ldr	r3, [pc, #600]	@ (800a448 <_strtod_l+0xaf8>)
 800a1ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d102      	bne.n	800a1fa <_strtod_l+0x8aa>
 800a1f4:	3101      	adds	r1, #1
 800a1f6:	f43f adca 	beq.w	8009d8e <_strtod_l+0x43e>
 800a1fa:	4b92      	ldr	r3, [pc, #584]	@ (800a444 <_strtod_l+0xaf4>)
 800a1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1fe:	401a      	ands	r2, r3
 800a200:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a204:	f04f 0a00 	mov.w	sl, #0
 800a208:	9b08      	ldr	r3, [sp, #32]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1b8      	bne.n	800a180 <_strtod_l+0x830>
 800a20e:	e5c9      	b.n	8009da4 <_strtod_l+0x454>
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	e7e8      	b.n	800a1e8 <_strtod_l+0x898>
 800a216:	4613      	mov	r3, r2
 800a218:	e7e6      	b.n	800a1e8 <_strtod_l+0x898>
 800a21a:	ea53 030a 	orrs.w	r3, r3, sl
 800a21e:	d0a1      	beq.n	800a164 <_strtod_l+0x814>
 800a220:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a222:	b1db      	cbz	r3, 800a25c <_strtod_l+0x90c>
 800a224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a226:	4213      	tst	r3, r2
 800a228:	d0ee      	beq.n	800a208 <_strtod_l+0x8b8>
 800a22a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a22c:	9a08      	ldr	r2, [sp, #32]
 800a22e:	4650      	mov	r0, sl
 800a230:	4659      	mov	r1, fp
 800a232:	b1bb      	cbz	r3, 800a264 <_strtod_l+0x914>
 800a234:	f7ff fb6e 	bl	8009914 <sulp>
 800a238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a23c:	ec53 2b10 	vmov	r2, r3, d0
 800a240:	f7f6 f82c 	bl	800029c <__adddf3>
 800a244:	4682      	mov	sl, r0
 800a246:	468b      	mov	fp, r1
 800a248:	e7de      	b.n	800a208 <_strtod_l+0x8b8>
 800a24a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a24e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a252:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a256:	f04f 3aff 	mov.w	sl, #4294967295
 800a25a:	e7d5      	b.n	800a208 <_strtod_l+0x8b8>
 800a25c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a25e:	ea13 0f0a 	tst.w	r3, sl
 800a262:	e7e1      	b.n	800a228 <_strtod_l+0x8d8>
 800a264:	f7ff fb56 	bl	8009914 <sulp>
 800a268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a26c:	ec53 2b10 	vmov	r2, r3, d0
 800a270:	f7f6 f812 	bl	8000298 <__aeabi_dsub>
 800a274:	2200      	movs	r2, #0
 800a276:	2300      	movs	r3, #0
 800a278:	4682      	mov	sl, r0
 800a27a:	468b      	mov	fp, r1
 800a27c:	f7f6 fc2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a280:	2800      	cmp	r0, #0
 800a282:	d0c1      	beq.n	800a208 <_strtod_l+0x8b8>
 800a284:	e619      	b.n	8009eba <_strtod_l+0x56a>
 800a286:	4641      	mov	r1, r8
 800a288:	4620      	mov	r0, r4
 800a28a:	f7ff facd 	bl	8009828 <__ratio>
 800a28e:	ec57 6b10 	vmov	r6, r7, d0
 800a292:	2200      	movs	r2, #0
 800a294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f6 fc30 	bl	8000b00 <__aeabi_dcmple>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d06f      	beq.n	800a384 <_strtod_l+0xa34>
 800a2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d17a      	bne.n	800a3a0 <_strtod_l+0xa50>
 800a2aa:	f1ba 0f00 	cmp.w	sl, #0
 800a2ae:	d158      	bne.n	800a362 <_strtod_l+0xa12>
 800a2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d15a      	bne.n	800a370 <_strtod_l+0xa20>
 800a2ba:	4b64      	ldr	r3, [pc, #400]	@ (800a44c <_strtod_l+0xafc>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f6 fc13 	bl	8000aec <__aeabi_dcmplt>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d159      	bne.n	800a37e <_strtod_l+0xa2e>
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	4b60      	ldr	r3, [pc, #384]	@ (800a450 <_strtod_l+0xb00>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f7f6 f999 	bl	8000608 <__aeabi_dmul>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	460f      	mov	r7, r1
 800a2da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a2de:	9606      	str	r6, [sp, #24]
 800a2e0:	9307      	str	r3, [sp, #28]
 800a2e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2e6:	4d57      	ldr	r5, [pc, #348]	@ (800a444 <_strtod_l+0xaf4>)
 800a2e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2ee:	401d      	ands	r5, r3
 800a2f0:	4b58      	ldr	r3, [pc, #352]	@ (800a454 <_strtod_l+0xb04>)
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	f040 80b2 	bne.w	800a45c <_strtod_l+0xb0c>
 800a2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a2fe:	ec4b ab10 	vmov	d0, sl, fp
 800a302:	f7ff f9c9 	bl	8009698 <__ulp>
 800a306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a30a:	ec51 0b10 	vmov	r0, r1, d0
 800a30e:	f7f6 f97b 	bl	8000608 <__aeabi_dmul>
 800a312:	4652      	mov	r2, sl
 800a314:	465b      	mov	r3, fp
 800a316:	f7f5 ffc1 	bl	800029c <__adddf3>
 800a31a:	460b      	mov	r3, r1
 800a31c:	4949      	ldr	r1, [pc, #292]	@ (800a444 <_strtod_l+0xaf4>)
 800a31e:	4a4e      	ldr	r2, [pc, #312]	@ (800a458 <_strtod_l+0xb08>)
 800a320:	4019      	ands	r1, r3
 800a322:	4291      	cmp	r1, r2
 800a324:	4682      	mov	sl, r0
 800a326:	d942      	bls.n	800a3ae <_strtod_l+0xa5e>
 800a328:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a32a:	4b47      	ldr	r3, [pc, #284]	@ (800a448 <_strtod_l+0xaf8>)
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d103      	bne.n	800a338 <_strtod_l+0x9e8>
 800a330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a332:	3301      	adds	r3, #1
 800a334:	f43f ad2b 	beq.w	8009d8e <_strtod_l+0x43e>
 800a338:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a448 <_strtod_l+0xaf8>
 800a33c:	f04f 3aff 	mov.w	sl, #4294967295
 800a340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a342:	9805      	ldr	r0, [sp, #20]
 800a344:	f7fe fe74 	bl	8009030 <_Bfree>
 800a348:	9805      	ldr	r0, [sp, #20]
 800a34a:	4649      	mov	r1, r9
 800a34c:	f7fe fe70 	bl	8009030 <_Bfree>
 800a350:	9805      	ldr	r0, [sp, #20]
 800a352:	4641      	mov	r1, r8
 800a354:	f7fe fe6c 	bl	8009030 <_Bfree>
 800a358:	9805      	ldr	r0, [sp, #20]
 800a35a:	4621      	mov	r1, r4
 800a35c:	f7fe fe68 	bl	8009030 <_Bfree>
 800a360:	e618      	b.n	8009f94 <_strtod_l+0x644>
 800a362:	f1ba 0f01 	cmp.w	sl, #1
 800a366:	d103      	bne.n	800a370 <_strtod_l+0xa20>
 800a368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f43f ada5 	beq.w	8009eba <_strtod_l+0x56a>
 800a370:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a420 <_strtod_l+0xad0>
 800a374:	4f35      	ldr	r7, [pc, #212]	@ (800a44c <_strtod_l+0xafc>)
 800a376:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a37a:	2600      	movs	r6, #0
 800a37c:	e7b1      	b.n	800a2e2 <_strtod_l+0x992>
 800a37e:	4f34      	ldr	r7, [pc, #208]	@ (800a450 <_strtod_l+0xb00>)
 800a380:	2600      	movs	r6, #0
 800a382:	e7aa      	b.n	800a2da <_strtod_l+0x98a>
 800a384:	4b32      	ldr	r3, [pc, #200]	@ (800a450 <_strtod_l+0xb00>)
 800a386:	4630      	mov	r0, r6
 800a388:	4639      	mov	r1, r7
 800a38a:	2200      	movs	r2, #0
 800a38c:	f7f6 f93c 	bl	8000608 <__aeabi_dmul>
 800a390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a392:	4606      	mov	r6, r0
 800a394:	460f      	mov	r7, r1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d09f      	beq.n	800a2da <_strtod_l+0x98a>
 800a39a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a39e:	e7a0      	b.n	800a2e2 <_strtod_l+0x992>
 800a3a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a428 <_strtod_l+0xad8>
 800a3a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a3a8:	ec57 6b17 	vmov	r6, r7, d7
 800a3ac:	e799      	b.n	800a2e2 <_strtod_l+0x992>
 800a3ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1c1      	bne.n	800a340 <_strtod_l+0x9f0>
 800a3bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3c0:	0d1b      	lsrs	r3, r3, #20
 800a3c2:	051b      	lsls	r3, r3, #20
 800a3c4:	429d      	cmp	r5, r3
 800a3c6:	d1bb      	bne.n	800a340 <_strtod_l+0x9f0>
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f6 fc7c 	bl	8000cc8 <__aeabi_d2lz>
 800a3d0:	f7f6 f8ec 	bl	80005ac <__aeabi_l2d>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f5 ff5c 	bl	8000298 <__aeabi_dsub>
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a3e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ee:	ea46 060a 	orr.w	r6, r6, sl
 800a3f2:	431e      	orrs	r6, r3
 800a3f4:	d06f      	beq.n	800a4d6 <_strtod_l+0xb86>
 800a3f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a430 <_strtod_l+0xae0>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f6 fb76 	bl	8000aec <__aeabi_dcmplt>
 800a400:	2800      	cmp	r0, #0
 800a402:	f47f accf 	bne.w	8009da4 <_strtod_l+0x454>
 800a406:	a30c      	add	r3, pc, #48	@ (adr r3, 800a438 <_strtod_l+0xae8>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a410:	f7f6 fb8a 	bl	8000b28 <__aeabi_dcmpgt>
 800a414:	2800      	cmp	r0, #0
 800a416:	d093      	beq.n	800a340 <_strtod_l+0x9f0>
 800a418:	e4c4      	b.n	8009da4 <_strtod_l+0x454>
 800a41a:	bf00      	nop
 800a41c:	f3af 8000 	nop.w
 800a420:	00000000 	.word	0x00000000
 800a424:	bff00000 	.word	0xbff00000
 800a428:	00000000 	.word	0x00000000
 800a42c:	3ff00000 	.word	0x3ff00000
 800a430:	94a03595 	.word	0x94a03595
 800a434:	3fdfffff 	.word	0x3fdfffff
 800a438:	35afe535 	.word	0x35afe535
 800a43c:	3fe00000 	.word	0x3fe00000
 800a440:	000fffff 	.word	0x000fffff
 800a444:	7ff00000 	.word	0x7ff00000
 800a448:	7fefffff 	.word	0x7fefffff
 800a44c:	3ff00000 	.word	0x3ff00000
 800a450:	3fe00000 	.word	0x3fe00000
 800a454:	7fe00000 	.word	0x7fe00000
 800a458:	7c9fffff 	.word	0x7c9fffff
 800a45c:	9b08      	ldr	r3, [sp, #32]
 800a45e:	b323      	cbz	r3, 800a4aa <_strtod_l+0xb5a>
 800a460:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a464:	d821      	bhi.n	800a4aa <_strtod_l+0xb5a>
 800a466:	a328      	add	r3, pc, #160	@ (adr r3, 800a508 <_strtod_l+0xbb8>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f6 fb46 	bl	8000b00 <__aeabi_dcmple>
 800a474:	b1a0      	cbz	r0, 800a4a0 <_strtod_l+0xb50>
 800a476:	4639      	mov	r1, r7
 800a478:	4630      	mov	r0, r6
 800a47a:	f7f6 fb9d 	bl	8000bb8 <__aeabi_d2uiz>
 800a47e:	2801      	cmp	r0, #1
 800a480:	bf38      	it	cc
 800a482:	2001      	movcc	r0, #1
 800a484:	f7f6 f846 	bl	8000514 <__aeabi_ui2d>
 800a488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	b9fb      	cbnz	r3, 800a4d0 <_strtod_l+0xb80>
 800a490:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a494:	9014      	str	r0, [sp, #80]	@ 0x50
 800a496:	9315      	str	r3, [sp, #84]	@ 0x54
 800a498:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a49c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a4a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a4a6:	1b5b      	subs	r3, r3, r5
 800a4a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a4ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a4b2:	f7ff f8f1 	bl	8009698 <__ulp>
 800a4b6:	4650      	mov	r0, sl
 800a4b8:	ec53 2b10 	vmov	r2, r3, d0
 800a4bc:	4659      	mov	r1, fp
 800a4be:	f7f6 f8a3 	bl	8000608 <__aeabi_dmul>
 800a4c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a4c6:	f7f5 fee9 	bl	800029c <__adddf3>
 800a4ca:	4682      	mov	sl, r0
 800a4cc:	468b      	mov	fp, r1
 800a4ce:	e770      	b.n	800a3b2 <_strtod_l+0xa62>
 800a4d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a4d4:	e7e0      	b.n	800a498 <_strtod_l+0xb48>
 800a4d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a510 <_strtod_l+0xbc0>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f7f6 fb06 	bl	8000aec <__aeabi_dcmplt>
 800a4e0:	e798      	b.n	800a414 <_strtod_l+0xac4>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a4e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	f7ff ba6d 	b.w	80099ca <_strtod_l+0x7a>
 800a4f0:	2a65      	cmp	r2, #101	@ 0x65
 800a4f2:	f43f ab66 	beq.w	8009bc2 <_strtod_l+0x272>
 800a4f6:	2a45      	cmp	r2, #69	@ 0x45
 800a4f8:	f43f ab63 	beq.w	8009bc2 <_strtod_l+0x272>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	f7ff bb9e 	b.w	8009c3e <_strtod_l+0x2ee>
 800a502:	bf00      	nop
 800a504:	f3af 8000 	nop.w
 800a508:	ffc00000 	.word	0xffc00000
 800a50c:	41dfffff 	.word	0x41dfffff
 800a510:	94a03595 	.word	0x94a03595
 800a514:	3fcfffff 	.word	0x3fcfffff

0800a518 <_strtod_r>:
 800a518:	4b01      	ldr	r3, [pc, #4]	@ (800a520 <_strtod_r+0x8>)
 800a51a:	f7ff ba19 	b.w	8009950 <_strtod_l>
 800a51e:	bf00      	nop
 800a520:	2000006c 	.word	0x2000006c

0800a524 <_strtol_l.constprop.0>:
 800a524:	2b24      	cmp	r3, #36	@ 0x24
 800a526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a52a:	4686      	mov	lr, r0
 800a52c:	4690      	mov	r8, r2
 800a52e:	d801      	bhi.n	800a534 <_strtol_l.constprop.0+0x10>
 800a530:	2b01      	cmp	r3, #1
 800a532:	d106      	bne.n	800a542 <_strtol_l.constprop.0+0x1e>
 800a534:	f7fd fdba 	bl	80080ac <__errno>
 800a538:	2316      	movs	r3, #22
 800a53a:	6003      	str	r3, [r0, #0]
 800a53c:	2000      	movs	r0, #0
 800a53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a542:	4834      	ldr	r0, [pc, #208]	@ (800a614 <_strtol_l.constprop.0+0xf0>)
 800a544:	460d      	mov	r5, r1
 800a546:	462a      	mov	r2, r5
 800a548:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a54c:	5d06      	ldrb	r6, [r0, r4]
 800a54e:	f016 0608 	ands.w	r6, r6, #8
 800a552:	d1f8      	bne.n	800a546 <_strtol_l.constprop.0+0x22>
 800a554:	2c2d      	cmp	r4, #45	@ 0x2d
 800a556:	d12d      	bne.n	800a5b4 <_strtol_l.constprop.0+0x90>
 800a558:	782c      	ldrb	r4, [r5, #0]
 800a55a:	2601      	movs	r6, #1
 800a55c:	1c95      	adds	r5, r2, #2
 800a55e:	f033 0210 	bics.w	r2, r3, #16
 800a562:	d109      	bne.n	800a578 <_strtol_l.constprop.0+0x54>
 800a564:	2c30      	cmp	r4, #48	@ 0x30
 800a566:	d12a      	bne.n	800a5be <_strtol_l.constprop.0+0x9a>
 800a568:	782a      	ldrb	r2, [r5, #0]
 800a56a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a56e:	2a58      	cmp	r2, #88	@ 0x58
 800a570:	d125      	bne.n	800a5be <_strtol_l.constprop.0+0x9a>
 800a572:	786c      	ldrb	r4, [r5, #1]
 800a574:	2310      	movs	r3, #16
 800a576:	3502      	adds	r5, #2
 800a578:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a57c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a580:	2200      	movs	r2, #0
 800a582:	fbbc f9f3 	udiv	r9, ip, r3
 800a586:	4610      	mov	r0, r2
 800a588:	fb03 ca19 	mls	sl, r3, r9, ip
 800a58c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a590:	2f09      	cmp	r7, #9
 800a592:	d81b      	bhi.n	800a5cc <_strtol_l.constprop.0+0xa8>
 800a594:	463c      	mov	r4, r7
 800a596:	42a3      	cmp	r3, r4
 800a598:	dd27      	ble.n	800a5ea <_strtol_l.constprop.0+0xc6>
 800a59a:	1c57      	adds	r7, r2, #1
 800a59c:	d007      	beq.n	800a5ae <_strtol_l.constprop.0+0x8a>
 800a59e:	4581      	cmp	r9, r0
 800a5a0:	d320      	bcc.n	800a5e4 <_strtol_l.constprop.0+0xc0>
 800a5a2:	d101      	bne.n	800a5a8 <_strtol_l.constprop.0+0x84>
 800a5a4:	45a2      	cmp	sl, r4
 800a5a6:	db1d      	blt.n	800a5e4 <_strtol_l.constprop.0+0xc0>
 800a5a8:	fb00 4003 	mla	r0, r0, r3, r4
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5b2:	e7eb      	b.n	800a58c <_strtol_l.constprop.0+0x68>
 800a5b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a5b6:	bf04      	itt	eq
 800a5b8:	782c      	ldrbeq	r4, [r5, #0]
 800a5ba:	1c95      	addeq	r5, r2, #2
 800a5bc:	e7cf      	b.n	800a55e <_strtol_l.constprop.0+0x3a>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1da      	bne.n	800a578 <_strtol_l.constprop.0+0x54>
 800a5c2:	2c30      	cmp	r4, #48	@ 0x30
 800a5c4:	bf0c      	ite	eq
 800a5c6:	2308      	moveq	r3, #8
 800a5c8:	230a      	movne	r3, #10
 800a5ca:	e7d5      	b.n	800a578 <_strtol_l.constprop.0+0x54>
 800a5cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a5d0:	2f19      	cmp	r7, #25
 800a5d2:	d801      	bhi.n	800a5d8 <_strtol_l.constprop.0+0xb4>
 800a5d4:	3c37      	subs	r4, #55	@ 0x37
 800a5d6:	e7de      	b.n	800a596 <_strtol_l.constprop.0+0x72>
 800a5d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a5dc:	2f19      	cmp	r7, #25
 800a5de:	d804      	bhi.n	800a5ea <_strtol_l.constprop.0+0xc6>
 800a5e0:	3c57      	subs	r4, #87	@ 0x57
 800a5e2:	e7d8      	b.n	800a596 <_strtol_l.constprop.0+0x72>
 800a5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e8:	e7e1      	b.n	800a5ae <_strtol_l.constprop.0+0x8a>
 800a5ea:	1c53      	adds	r3, r2, #1
 800a5ec:	d108      	bne.n	800a600 <_strtol_l.constprop.0+0xdc>
 800a5ee:	2322      	movs	r3, #34	@ 0x22
 800a5f0:	f8ce 3000 	str.w	r3, [lr]
 800a5f4:	4660      	mov	r0, ip
 800a5f6:	f1b8 0f00 	cmp.w	r8, #0
 800a5fa:	d0a0      	beq.n	800a53e <_strtol_l.constprop.0+0x1a>
 800a5fc:	1e69      	subs	r1, r5, #1
 800a5fe:	e006      	b.n	800a60e <_strtol_l.constprop.0+0xea>
 800a600:	b106      	cbz	r6, 800a604 <_strtol_l.constprop.0+0xe0>
 800a602:	4240      	negs	r0, r0
 800a604:	f1b8 0f00 	cmp.w	r8, #0
 800a608:	d099      	beq.n	800a53e <_strtol_l.constprop.0+0x1a>
 800a60a:	2a00      	cmp	r2, #0
 800a60c:	d1f6      	bne.n	800a5fc <_strtol_l.constprop.0+0xd8>
 800a60e:	f8c8 1000 	str.w	r1, [r8]
 800a612:	e794      	b.n	800a53e <_strtol_l.constprop.0+0x1a>
 800a614:	0800ba91 	.word	0x0800ba91

0800a618 <_strtol_r>:
 800a618:	f7ff bf84 	b.w	800a524 <_strtol_l.constprop.0>

0800a61c <__ssputs_r>:
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	688e      	ldr	r6, [r1, #8]
 800a622:	461f      	mov	r7, r3
 800a624:	42be      	cmp	r6, r7
 800a626:	680b      	ldr	r3, [r1, #0]
 800a628:	4682      	mov	sl, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	4690      	mov	r8, r2
 800a62e:	d82d      	bhi.n	800a68c <__ssputs_r+0x70>
 800a630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a634:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a638:	d026      	beq.n	800a688 <__ssputs_r+0x6c>
 800a63a:	6965      	ldr	r5, [r4, #20]
 800a63c:	6909      	ldr	r1, [r1, #16]
 800a63e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a642:	eba3 0901 	sub.w	r9, r3, r1
 800a646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a64a:	1c7b      	adds	r3, r7, #1
 800a64c:	444b      	add	r3, r9
 800a64e:	106d      	asrs	r5, r5, #1
 800a650:	429d      	cmp	r5, r3
 800a652:	bf38      	it	cc
 800a654:	461d      	movcc	r5, r3
 800a656:	0553      	lsls	r3, r2, #21
 800a658:	d527      	bpl.n	800a6aa <__ssputs_r+0x8e>
 800a65a:	4629      	mov	r1, r5
 800a65c:	f7fe fc1c 	bl	8008e98 <_malloc_r>
 800a660:	4606      	mov	r6, r0
 800a662:	b360      	cbz	r0, 800a6be <__ssputs_r+0xa2>
 800a664:	6921      	ldr	r1, [r4, #16]
 800a666:	464a      	mov	r2, r9
 800a668:	f000 fa18 	bl	800aa9c <memcpy>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	6126      	str	r6, [r4, #16]
 800a67a:	6165      	str	r5, [r4, #20]
 800a67c:	444e      	add	r6, r9
 800a67e:	eba5 0509 	sub.w	r5, r5, r9
 800a682:	6026      	str	r6, [r4, #0]
 800a684:	60a5      	str	r5, [r4, #8]
 800a686:	463e      	mov	r6, r7
 800a688:	42be      	cmp	r6, r7
 800a68a:	d900      	bls.n	800a68e <__ssputs_r+0x72>
 800a68c:	463e      	mov	r6, r7
 800a68e:	6820      	ldr	r0, [r4, #0]
 800a690:	4632      	mov	r2, r6
 800a692:	4641      	mov	r1, r8
 800a694:	f000 f9c6 	bl	800aa24 <memmove>
 800a698:	68a3      	ldr	r3, [r4, #8]
 800a69a:	1b9b      	subs	r3, r3, r6
 800a69c:	60a3      	str	r3, [r4, #8]
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	4433      	add	r3, r6
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6aa:	462a      	mov	r2, r5
 800a6ac:	f000 fd89 	bl	800b1c2 <_realloc_r>
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d1e0      	bne.n	800a678 <__ssputs_r+0x5c>
 800a6b6:	6921      	ldr	r1, [r4, #16]
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	f7fe fb79 	bl	8008db0 <_free_r>
 800a6be:	230c      	movs	r3, #12
 800a6c0:	f8ca 3000 	str.w	r3, [sl]
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ca:	81a3      	strh	r3, [r4, #12]
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d0:	e7e9      	b.n	800a6a6 <__ssputs_r+0x8a>
	...

0800a6d4 <_svfiprintf_r>:
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	4698      	mov	r8, r3
 800a6da:	898b      	ldrh	r3, [r1, #12]
 800a6dc:	061b      	lsls	r3, r3, #24
 800a6de:	b09d      	sub	sp, #116	@ 0x74
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	d510      	bpl.n	800a70a <_svfiprintf_r+0x36>
 800a6e8:	690b      	ldr	r3, [r1, #16]
 800a6ea:	b973      	cbnz	r3, 800a70a <_svfiprintf_r+0x36>
 800a6ec:	2140      	movs	r1, #64	@ 0x40
 800a6ee:	f7fe fbd3 	bl	8008e98 <_malloc_r>
 800a6f2:	6028      	str	r0, [r5, #0]
 800a6f4:	6128      	str	r0, [r5, #16]
 800a6f6:	b930      	cbnz	r0, 800a706 <_svfiprintf_r+0x32>
 800a6f8:	230c      	movs	r3, #12
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	b01d      	add	sp, #116	@ 0x74
 800a702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a706:	2340      	movs	r3, #64	@ 0x40
 800a708:	616b      	str	r3, [r5, #20]
 800a70a:	2300      	movs	r3, #0
 800a70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a70e:	2320      	movs	r3, #32
 800a710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a714:	f8cd 800c 	str.w	r8, [sp, #12]
 800a718:	2330      	movs	r3, #48	@ 0x30
 800a71a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a8b8 <_svfiprintf_r+0x1e4>
 800a71e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a722:	f04f 0901 	mov.w	r9, #1
 800a726:	4623      	mov	r3, r4
 800a728:	469a      	mov	sl, r3
 800a72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a72e:	b10a      	cbz	r2, 800a734 <_svfiprintf_r+0x60>
 800a730:	2a25      	cmp	r2, #37	@ 0x25
 800a732:	d1f9      	bne.n	800a728 <_svfiprintf_r+0x54>
 800a734:	ebba 0b04 	subs.w	fp, sl, r4
 800a738:	d00b      	beq.n	800a752 <_svfiprintf_r+0x7e>
 800a73a:	465b      	mov	r3, fp
 800a73c:	4622      	mov	r2, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	4638      	mov	r0, r7
 800a742:	f7ff ff6b 	bl	800a61c <__ssputs_r>
 800a746:	3001      	adds	r0, #1
 800a748:	f000 80a7 	beq.w	800a89a <_svfiprintf_r+0x1c6>
 800a74c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a74e:	445a      	add	r2, fp
 800a750:	9209      	str	r2, [sp, #36]	@ 0x24
 800a752:	f89a 3000 	ldrb.w	r3, [sl]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 809f 	beq.w	800a89a <_svfiprintf_r+0x1c6>
 800a75c:	2300      	movs	r3, #0
 800a75e:	f04f 32ff 	mov.w	r2, #4294967295
 800a762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a766:	f10a 0a01 	add.w	sl, sl, #1
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	9307      	str	r3, [sp, #28]
 800a76e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a772:	931a      	str	r3, [sp, #104]	@ 0x68
 800a774:	4654      	mov	r4, sl
 800a776:	2205      	movs	r2, #5
 800a778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77c:	484e      	ldr	r0, [pc, #312]	@ (800a8b8 <_svfiprintf_r+0x1e4>)
 800a77e:	f7f5 fd2f 	bl	80001e0 <memchr>
 800a782:	9a04      	ldr	r2, [sp, #16]
 800a784:	b9d8      	cbnz	r0, 800a7be <_svfiprintf_r+0xea>
 800a786:	06d0      	lsls	r0, r2, #27
 800a788:	bf44      	itt	mi
 800a78a:	2320      	movmi	r3, #32
 800a78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a790:	0711      	lsls	r1, r2, #28
 800a792:	bf44      	itt	mi
 800a794:	232b      	movmi	r3, #43	@ 0x2b
 800a796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a79a:	f89a 3000 	ldrb.w	r3, [sl]
 800a79e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7a0:	d015      	beq.n	800a7ce <_svfiprintf_r+0xfa>
 800a7a2:	9a07      	ldr	r2, [sp, #28]
 800a7a4:	4654      	mov	r4, sl
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	f04f 0c0a 	mov.w	ip, #10
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b2:	3b30      	subs	r3, #48	@ 0x30
 800a7b4:	2b09      	cmp	r3, #9
 800a7b6:	d94b      	bls.n	800a850 <_svfiprintf_r+0x17c>
 800a7b8:	b1b0      	cbz	r0, 800a7e8 <_svfiprintf_r+0x114>
 800a7ba:	9207      	str	r2, [sp, #28]
 800a7bc:	e014      	b.n	800a7e8 <_svfiprintf_r+0x114>
 800a7be:	eba0 0308 	sub.w	r3, r0, r8
 800a7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	9304      	str	r3, [sp, #16]
 800a7ca:	46a2      	mov	sl, r4
 800a7cc:	e7d2      	b.n	800a774 <_svfiprintf_r+0xa0>
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	1d19      	adds	r1, r3, #4
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	9103      	str	r1, [sp, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	bfbb      	ittet	lt
 800a7da:	425b      	neglt	r3, r3
 800a7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e0:	9307      	strge	r3, [sp, #28]
 800a7e2:	9307      	strlt	r3, [sp, #28]
 800a7e4:	bfb8      	it	lt
 800a7e6:	9204      	strlt	r2, [sp, #16]
 800a7e8:	7823      	ldrb	r3, [r4, #0]
 800a7ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7ec:	d10a      	bne.n	800a804 <_svfiprintf_r+0x130>
 800a7ee:	7863      	ldrb	r3, [r4, #1]
 800a7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7f2:	d132      	bne.n	800a85a <_svfiprintf_r+0x186>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	1d1a      	adds	r2, r3, #4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	9203      	str	r2, [sp, #12]
 800a7fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a800:	3402      	adds	r4, #2
 800a802:	9305      	str	r3, [sp, #20]
 800a804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a8c8 <_svfiprintf_r+0x1f4>
 800a808:	7821      	ldrb	r1, [r4, #0]
 800a80a:	2203      	movs	r2, #3
 800a80c:	4650      	mov	r0, sl
 800a80e:	f7f5 fce7 	bl	80001e0 <memchr>
 800a812:	b138      	cbz	r0, 800a824 <_svfiprintf_r+0x150>
 800a814:	9b04      	ldr	r3, [sp, #16]
 800a816:	eba0 000a 	sub.w	r0, r0, sl
 800a81a:	2240      	movs	r2, #64	@ 0x40
 800a81c:	4082      	lsls	r2, r0
 800a81e:	4313      	orrs	r3, r2
 800a820:	3401      	adds	r4, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a828:	4824      	ldr	r0, [pc, #144]	@ (800a8bc <_svfiprintf_r+0x1e8>)
 800a82a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a82e:	2206      	movs	r2, #6
 800a830:	f7f5 fcd6 	bl	80001e0 <memchr>
 800a834:	2800      	cmp	r0, #0
 800a836:	d036      	beq.n	800a8a6 <_svfiprintf_r+0x1d2>
 800a838:	4b21      	ldr	r3, [pc, #132]	@ (800a8c0 <_svfiprintf_r+0x1ec>)
 800a83a:	bb1b      	cbnz	r3, 800a884 <_svfiprintf_r+0x1b0>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	3307      	adds	r3, #7
 800a840:	f023 0307 	bic.w	r3, r3, #7
 800a844:	3308      	adds	r3, #8
 800a846:	9303      	str	r3, [sp, #12]
 800a848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a84a:	4433      	add	r3, r6
 800a84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a84e:	e76a      	b.n	800a726 <_svfiprintf_r+0x52>
 800a850:	fb0c 3202 	mla	r2, ip, r2, r3
 800a854:	460c      	mov	r4, r1
 800a856:	2001      	movs	r0, #1
 800a858:	e7a8      	b.n	800a7ac <_svfiprintf_r+0xd8>
 800a85a:	2300      	movs	r3, #0
 800a85c:	3401      	adds	r4, #1
 800a85e:	9305      	str	r3, [sp, #20]
 800a860:	4619      	mov	r1, r3
 800a862:	f04f 0c0a 	mov.w	ip, #10
 800a866:	4620      	mov	r0, r4
 800a868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a86c:	3a30      	subs	r2, #48	@ 0x30
 800a86e:	2a09      	cmp	r2, #9
 800a870:	d903      	bls.n	800a87a <_svfiprintf_r+0x1a6>
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0c6      	beq.n	800a804 <_svfiprintf_r+0x130>
 800a876:	9105      	str	r1, [sp, #20]
 800a878:	e7c4      	b.n	800a804 <_svfiprintf_r+0x130>
 800a87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a87e:	4604      	mov	r4, r0
 800a880:	2301      	movs	r3, #1
 800a882:	e7f0      	b.n	800a866 <_svfiprintf_r+0x192>
 800a884:	ab03      	add	r3, sp, #12
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	462a      	mov	r2, r5
 800a88a:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c4 <_svfiprintf_r+0x1f0>)
 800a88c:	a904      	add	r1, sp, #16
 800a88e:	4638      	mov	r0, r7
 800a890:	f7fc fc94 	bl	80071bc <_printf_float>
 800a894:	1c42      	adds	r2, r0, #1
 800a896:	4606      	mov	r6, r0
 800a898:	d1d6      	bne.n	800a848 <_svfiprintf_r+0x174>
 800a89a:	89ab      	ldrh	r3, [r5, #12]
 800a89c:	065b      	lsls	r3, r3, #25
 800a89e:	f53f af2d 	bmi.w	800a6fc <_svfiprintf_r+0x28>
 800a8a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8a4:	e72c      	b.n	800a700 <_svfiprintf_r+0x2c>
 800a8a6:	ab03      	add	r3, sp, #12
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	462a      	mov	r2, r5
 800a8ac:	4b05      	ldr	r3, [pc, #20]	@ (800a8c4 <_svfiprintf_r+0x1f0>)
 800a8ae:	a904      	add	r1, sp, #16
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7fc ff1b 	bl	80076ec <_printf_i>
 800a8b6:	e7ed      	b.n	800a894 <_svfiprintf_r+0x1c0>
 800a8b8:	0800bb91 	.word	0x0800bb91
 800a8bc:	0800bb9b 	.word	0x0800bb9b
 800a8c0:	080071bd 	.word	0x080071bd
 800a8c4:	0800a61d 	.word	0x0800a61d
 800a8c8:	0800bb97 	.word	0x0800bb97

0800a8cc <__sflush_r>:
 800a8cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d4:	0716      	lsls	r6, r2, #28
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	460c      	mov	r4, r1
 800a8da:	d454      	bmi.n	800a986 <__sflush_r+0xba>
 800a8dc:	684b      	ldr	r3, [r1, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dc02      	bgt.n	800a8e8 <__sflush_r+0x1c>
 800a8e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dd48      	ble.n	800a97a <__sflush_r+0xae>
 800a8e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8ea:	2e00      	cmp	r6, #0
 800a8ec:	d045      	beq.n	800a97a <__sflush_r+0xae>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8f4:	682f      	ldr	r7, [r5, #0]
 800a8f6:	6a21      	ldr	r1, [r4, #32]
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	d030      	beq.n	800a95e <__sflush_r+0x92>
 800a8fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	0759      	lsls	r1, r3, #29
 800a902:	d505      	bpl.n	800a910 <__sflush_r+0x44>
 800a904:	6863      	ldr	r3, [r4, #4]
 800a906:	1ad2      	subs	r2, r2, r3
 800a908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a90a:	b10b      	cbz	r3, 800a910 <__sflush_r+0x44>
 800a90c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a90e:	1ad2      	subs	r2, r2, r3
 800a910:	2300      	movs	r3, #0
 800a912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a914:	6a21      	ldr	r1, [r4, #32]
 800a916:	4628      	mov	r0, r5
 800a918:	47b0      	blx	r6
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	d106      	bne.n	800a92e <__sflush_r+0x62>
 800a920:	6829      	ldr	r1, [r5, #0]
 800a922:	291d      	cmp	r1, #29
 800a924:	d82b      	bhi.n	800a97e <__sflush_r+0xb2>
 800a926:	4a2a      	ldr	r2, [pc, #168]	@ (800a9d0 <__sflush_r+0x104>)
 800a928:	410a      	asrs	r2, r1
 800a92a:	07d6      	lsls	r6, r2, #31
 800a92c:	d427      	bmi.n	800a97e <__sflush_r+0xb2>
 800a92e:	2200      	movs	r2, #0
 800a930:	6062      	str	r2, [r4, #4]
 800a932:	04d9      	lsls	r1, r3, #19
 800a934:	6922      	ldr	r2, [r4, #16]
 800a936:	6022      	str	r2, [r4, #0]
 800a938:	d504      	bpl.n	800a944 <__sflush_r+0x78>
 800a93a:	1c42      	adds	r2, r0, #1
 800a93c:	d101      	bne.n	800a942 <__sflush_r+0x76>
 800a93e:	682b      	ldr	r3, [r5, #0]
 800a940:	b903      	cbnz	r3, 800a944 <__sflush_r+0x78>
 800a942:	6560      	str	r0, [r4, #84]	@ 0x54
 800a944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a946:	602f      	str	r7, [r5, #0]
 800a948:	b1b9      	cbz	r1, 800a97a <__sflush_r+0xae>
 800a94a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a94e:	4299      	cmp	r1, r3
 800a950:	d002      	beq.n	800a958 <__sflush_r+0x8c>
 800a952:	4628      	mov	r0, r5
 800a954:	f7fe fa2c 	bl	8008db0 <_free_r>
 800a958:	2300      	movs	r3, #0
 800a95a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a95c:	e00d      	b.n	800a97a <__sflush_r+0xae>
 800a95e:	2301      	movs	r3, #1
 800a960:	4628      	mov	r0, r5
 800a962:	47b0      	blx	r6
 800a964:	4602      	mov	r2, r0
 800a966:	1c50      	adds	r0, r2, #1
 800a968:	d1c9      	bne.n	800a8fe <__sflush_r+0x32>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0c6      	beq.n	800a8fe <__sflush_r+0x32>
 800a970:	2b1d      	cmp	r3, #29
 800a972:	d001      	beq.n	800a978 <__sflush_r+0xac>
 800a974:	2b16      	cmp	r3, #22
 800a976:	d11e      	bne.n	800a9b6 <__sflush_r+0xea>
 800a978:	602f      	str	r7, [r5, #0]
 800a97a:	2000      	movs	r0, #0
 800a97c:	e022      	b.n	800a9c4 <__sflush_r+0xf8>
 800a97e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a982:	b21b      	sxth	r3, r3
 800a984:	e01b      	b.n	800a9be <__sflush_r+0xf2>
 800a986:	690f      	ldr	r7, [r1, #16]
 800a988:	2f00      	cmp	r7, #0
 800a98a:	d0f6      	beq.n	800a97a <__sflush_r+0xae>
 800a98c:	0793      	lsls	r3, r2, #30
 800a98e:	680e      	ldr	r6, [r1, #0]
 800a990:	bf08      	it	eq
 800a992:	694b      	ldreq	r3, [r1, #20]
 800a994:	600f      	str	r7, [r1, #0]
 800a996:	bf18      	it	ne
 800a998:	2300      	movne	r3, #0
 800a99a:	eba6 0807 	sub.w	r8, r6, r7
 800a99e:	608b      	str	r3, [r1, #8]
 800a9a0:	f1b8 0f00 	cmp.w	r8, #0
 800a9a4:	dde9      	ble.n	800a97a <__sflush_r+0xae>
 800a9a6:	6a21      	ldr	r1, [r4, #32]
 800a9a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9aa:	4643      	mov	r3, r8
 800a9ac:	463a      	mov	r2, r7
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	47b0      	blx	r6
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	dc08      	bgt.n	800a9c8 <__sflush_r+0xfc>
 800a9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	4407      	add	r7, r0
 800a9ca:	eba8 0800 	sub.w	r8, r8, r0
 800a9ce:	e7e7      	b.n	800a9a0 <__sflush_r+0xd4>
 800a9d0:	dfbffffe 	.word	0xdfbffffe

0800a9d4 <_fflush_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	690b      	ldr	r3, [r1, #16]
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	b913      	cbnz	r3, 800a9e4 <_fflush_r+0x10>
 800a9de:	2500      	movs	r5, #0
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	b118      	cbz	r0, 800a9ee <_fflush_r+0x1a>
 800a9e6:	6a03      	ldr	r3, [r0, #32]
 800a9e8:	b90b      	cbnz	r3, 800a9ee <_fflush_r+0x1a>
 800a9ea:	f7fd fa3f 	bl	8007e6c <__sinit>
 800a9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0f3      	beq.n	800a9de <_fflush_r+0xa>
 800a9f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9f8:	07d0      	lsls	r0, r2, #31
 800a9fa:	d404      	bmi.n	800aa06 <_fflush_r+0x32>
 800a9fc:	0599      	lsls	r1, r3, #22
 800a9fe:	d402      	bmi.n	800aa06 <_fflush_r+0x32>
 800aa00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa02:	f7fd fb7e 	bl	8008102 <__retarget_lock_acquire_recursive>
 800aa06:	4628      	mov	r0, r5
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f7ff ff5f 	bl	800a8cc <__sflush_r>
 800aa0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa10:	07da      	lsls	r2, r3, #31
 800aa12:	4605      	mov	r5, r0
 800aa14:	d4e4      	bmi.n	800a9e0 <_fflush_r+0xc>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	059b      	lsls	r3, r3, #22
 800aa1a:	d4e1      	bmi.n	800a9e0 <_fflush_r+0xc>
 800aa1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa1e:	f7fd fb71 	bl	8008104 <__retarget_lock_release_recursive>
 800aa22:	e7dd      	b.n	800a9e0 <_fflush_r+0xc>

0800aa24 <memmove>:
 800aa24:	4288      	cmp	r0, r1
 800aa26:	b510      	push	{r4, lr}
 800aa28:	eb01 0402 	add.w	r4, r1, r2
 800aa2c:	d902      	bls.n	800aa34 <memmove+0x10>
 800aa2e:	4284      	cmp	r4, r0
 800aa30:	4623      	mov	r3, r4
 800aa32:	d807      	bhi.n	800aa44 <memmove+0x20>
 800aa34:	1e43      	subs	r3, r0, #1
 800aa36:	42a1      	cmp	r1, r4
 800aa38:	d008      	beq.n	800aa4c <memmove+0x28>
 800aa3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa42:	e7f8      	b.n	800aa36 <memmove+0x12>
 800aa44:	4402      	add	r2, r0
 800aa46:	4601      	mov	r1, r0
 800aa48:	428a      	cmp	r2, r1
 800aa4a:	d100      	bne.n	800aa4e <memmove+0x2a>
 800aa4c:	bd10      	pop	{r4, pc}
 800aa4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa56:	e7f7      	b.n	800aa48 <memmove+0x24>

0800aa58 <strncmp>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	b16a      	cbz	r2, 800aa78 <strncmp+0x20>
 800aa5c:	3901      	subs	r1, #1
 800aa5e:	1884      	adds	r4, r0, r2
 800aa60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d103      	bne.n	800aa74 <strncmp+0x1c>
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d001      	beq.n	800aa74 <strncmp+0x1c>
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	d1f5      	bne.n	800aa60 <strncmp+0x8>
 800aa74:	1ad0      	subs	r0, r2, r3
 800aa76:	bd10      	pop	{r4, pc}
 800aa78:	4610      	mov	r0, r2
 800aa7a:	e7fc      	b.n	800aa76 <strncmp+0x1e>

0800aa7c <_sbrk_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4d06      	ldr	r5, [pc, #24]	@ (800aa98 <_sbrk_r+0x1c>)
 800aa80:	2300      	movs	r3, #0
 800aa82:	4604      	mov	r4, r0
 800aa84:	4608      	mov	r0, r1
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	f7f6 ff60 	bl	800194c <_sbrk>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_sbrk_r+0x1a>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_sbrk_r+0x1a>
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	20000510 	.word	0x20000510

0800aa9c <memcpy>:
 800aa9c:	440a      	add	r2, r1
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaa4:	d100      	bne.n	800aaa8 <memcpy+0xc>
 800aaa6:	4770      	bx	lr
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aab2:	4291      	cmp	r1, r2
 800aab4:	d1f9      	bne.n	800aaaa <memcpy+0xe>
 800aab6:	bd10      	pop	{r4, pc}

0800aab8 <nan>:
 800aab8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aac0 <nan+0x8>
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	00000000 	.word	0x00000000
 800aac4:	7ff80000 	.word	0x7ff80000

0800aac8 <__assert_func>:
 800aac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaca:	4614      	mov	r4, r2
 800aacc:	461a      	mov	r2, r3
 800aace:	4b09      	ldr	r3, [pc, #36]	@ (800aaf4 <__assert_func+0x2c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4605      	mov	r5, r0
 800aad4:	68d8      	ldr	r0, [r3, #12]
 800aad6:	b954      	cbnz	r4, 800aaee <__assert_func+0x26>
 800aad8:	4b07      	ldr	r3, [pc, #28]	@ (800aaf8 <__assert_func+0x30>)
 800aada:	461c      	mov	r4, r3
 800aadc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aae0:	9100      	str	r1, [sp, #0]
 800aae2:	462b      	mov	r3, r5
 800aae4:	4905      	ldr	r1, [pc, #20]	@ (800aafc <__assert_func+0x34>)
 800aae6:	f000 fba7 	bl	800b238 <fiprintf>
 800aaea:	f000 fbb7 	bl	800b25c <abort>
 800aaee:	4b04      	ldr	r3, [pc, #16]	@ (800ab00 <__assert_func+0x38>)
 800aaf0:	e7f4      	b.n	800aadc <__assert_func+0x14>
 800aaf2:	bf00      	nop
 800aaf4:	2000001c 	.word	0x2000001c
 800aaf8:	0800bbe5 	.word	0x0800bbe5
 800aafc:	0800bbb7 	.word	0x0800bbb7
 800ab00:	0800bbaa 	.word	0x0800bbaa

0800ab04 <_calloc_r>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	fba1 5402 	umull	r5, r4, r1, r2
 800ab0a:	b93c      	cbnz	r4, 800ab1c <_calloc_r+0x18>
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	f7fe f9c3 	bl	8008e98 <_malloc_r>
 800ab12:	4606      	mov	r6, r0
 800ab14:	b928      	cbnz	r0, 800ab22 <_calloc_r+0x1e>
 800ab16:	2600      	movs	r6, #0
 800ab18:	4630      	mov	r0, r6
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	220c      	movs	r2, #12
 800ab1e:	6002      	str	r2, [r0, #0]
 800ab20:	e7f9      	b.n	800ab16 <_calloc_r+0x12>
 800ab22:	462a      	mov	r2, r5
 800ab24:	4621      	mov	r1, r4
 800ab26:	f7fd fa6e 	bl	8008006 <memset>
 800ab2a:	e7f5      	b.n	800ab18 <_calloc_r+0x14>

0800ab2c <rshift>:
 800ab2c:	6903      	ldr	r3, [r0, #16]
 800ab2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab3a:	f100 0414 	add.w	r4, r0, #20
 800ab3e:	dd45      	ble.n	800abcc <rshift+0xa0>
 800ab40:	f011 011f 	ands.w	r1, r1, #31
 800ab44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab4c:	d10c      	bne.n	800ab68 <rshift+0x3c>
 800ab4e:	f100 0710 	add.w	r7, r0, #16
 800ab52:	4629      	mov	r1, r5
 800ab54:	42b1      	cmp	r1, r6
 800ab56:	d334      	bcc.n	800abc2 <rshift+0x96>
 800ab58:	1a9b      	subs	r3, r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	1eea      	subs	r2, r5, #3
 800ab5e:	4296      	cmp	r6, r2
 800ab60:	bf38      	it	cc
 800ab62:	2300      	movcc	r3, #0
 800ab64:	4423      	add	r3, r4
 800ab66:	e015      	b.n	800ab94 <rshift+0x68>
 800ab68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab6c:	f1c1 0820 	rsb	r8, r1, #32
 800ab70:	40cf      	lsrs	r7, r1
 800ab72:	f105 0e04 	add.w	lr, r5, #4
 800ab76:	46a1      	mov	r9, r4
 800ab78:	4576      	cmp	r6, lr
 800ab7a:	46f4      	mov	ip, lr
 800ab7c:	d815      	bhi.n	800abaa <rshift+0x7e>
 800ab7e:	1a9a      	subs	r2, r3, r2
 800ab80:	0092      	lsls	r2, r2, #2
 800ab82:	3a04      	subs	r2, #4
 800ab84:	3501      	adds	r5, #1
 800ab86:	42ae      	cmp	r6, r5
 800ab88:	bf38      	it	cc
 800ab8a:	2200      	movcc	r2, #0
 800ab8c:	18a3      	adds	r3, r4, r2
 800ab8e:	50a7      	str	r7, [r4, r2]
 800ab90:	b107      	cbz	r7, 800ab94 <rshift+0x68>
 800ab92:	3304      	adds	r3, #4
 800ab94:	1b1a      	subs	r2, r3, r4
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab9c:	bf08      	it	eq
 800ab9e:	2300      	moveq	r3, #0
 800aba0:	6102      	str	r2, [r0, #16]
 800aba2:	bf08      	it	eq
 800aba4:	6143      	streq	r3, [r0, #20]
 800aba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abaa:	f8dc c000 	ldr.w	ip, [ip]
 800abae:	fa0c fc08 	lsl.w	ip, ip, r8
 800abb2:	ea4c 0707 	orr.w	r7, ip, r7
 800abb6:	f849 7b04 	str.w	r7, [r9], #4
 800abba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abbe:	40cf      	lsrs	r7, r1
 800abc0:	e7da      	b.n	800ab78 <rshift+0x4c>
 800abc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800abc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800abca:	e7c3      	b.n	800ab54 <rshift+0x28>
 800abcc:	4623      	mov	r3, r4
 800abce:	e7e1      	b.n	800ab94 <rshift+0x68>

0800abd0 <__hexdig_fun>:
 800abd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	d802      	bhi.n	800abde <__hexdig_fun+0xe>
 800abd8:	3820      	subs	r0, #32
 800abda:	b2c0      	uxtb	r0, r0
 800abdc:	4770      	bx	lr
 800abde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800abe2:	2b05      	cmp	r3, #5
 800abe4:	d801      	bhi.n	800abea <__hexdig_fun+0x1a>
 800abe6:	3847      	subs	r0, #71	@ 0x47
 800abe8:	e7f7      	b.n	800abda <__hexdig_fun+0xa>
 800abea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d801      	bhi.n	800abf6 <__hexdig_fun+0x26>
 800abf2:	3827      	subs	r0, #39	@ 0x27
 800abf4:	e7f1      	b.n	800abda <__hexdig_fun+0xa>
 800abf6:	2000      	movs	r0, #0
 800abf8:	4770      	bx	lr
	...

0800abfc <__gethex>:
 800abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac00:	b085      	sub	sp, #20
 800ac02:	468a      	mov	sl, r1
 800ac04:	9302      	str	r3, [sp, #8]
 800ac06:	680b      	ldr	r3, [r1, #0]
 800ac08:	9001      	str	r0, [sp, #4]
 800ac0a:	4690      	mov	r8, r2
 800ac0c:	1c9c      	adds	r4, r3, #2
 800ac0e:	46a1      	mov	r9, r4
 800ac10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac14:	2830      	cmp	r0, #48	@ 0x30
 800ac16:	d0fa      	beq.n	800ac0e <__gethex+0x12>
 800ac18:	eba9 0303 	sub.w	r3, r9, r3
 800ac1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac20:	f7ff ffd6 	bl	800abd0 <__hexdig_fun>
 800ac24:	4605      	mov	r5, r0
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d168      	bne.n	800acfc <__gethex+0x100>
 800ac2a:	49a0      	ldr	r1, [pc, #640]	@ (800aeac <__gethex+0x2b0>)
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	4648      	mov	r0, r9
 800ac30:	f7ff ff12 	bl	800aa58 <strncmp>
 800ac34:	4607      	mov	r7, r0
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d167      	bne.n	800ad0a <__gethex+0x10e>
 800ac3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac3e:	4626      	mov	r6, r4
 800ac40:	f7ff ffc6 	bl	800abd0 <__hexdig_fun>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d062      	beq.n	800ad0e <__gethex+0x112>
 800ac48:	4623      	mov	r3, r4
 800ac4a:	7818      	ldrb	r0, [r3, #0]
 800ac4c:	2830      	cmp	r0, #48	@ 0x30
 800ac4e:	4699      	mov	r9, r3
 800ac50:	f103 0301 	add.w	r3, r3, #1
 800ac54:	d0f9      	beq.n	800ac4a <__gethex+0x4e>
 800ac56:	f7ff ffbb 	bl	800abd0 <__hexdig_fun>
 800ac5a:	fab0 f580 	clz	r5, r0
 800ac5e:	096d      	lsrs	r5, r5, #5
 800ac60:	f04f 0b01 	mov.w	fp, #1
 800ac64:	464a      	mov	r2, r9
 800ac66:	4616      	mov	r6, r2
 800ac68:	3201      	adds	r2, #1
 800ac6a:	7830      	ldrb	r0, [r6, #0]
 800ac6c:	f7ff ffb0 	bl	800abd0 <__hexdig_fun>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d1f8      	bne.n	800ac66 <__gethex+0x6a>
 800ac74:	498d      	ldr	r1, [pc, #564]	@ (800aeac <__gethex+0x2b0>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff feed 	bl	800aa58 <strncmp>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d13f      	bne.n	800ad02 <__gethex+0x106>
 800ac82:	b944      	cbnz	r4, 800ac96 <__gethex+0x9a>
 800ac84:	1c74      	adds	r4, r6, #1
 800ac86:	4622      	mov	r2, r4
 800ac88:	4616      	mov	r6, r2
 800ac8a:	3201      	adds	r2, #1
 800ac8c:	7830      	ldrb	r0, [r6, #0]
 800ac8e:	f7ff ff9f 	bl	800abd0 <__hexdig_fun>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d1f8      	bne.n	800ac88 <__gethex+0x8c>
 800ac96:	1ba4      	subs	r4, r4, r6
 800ac98:	00a7      	lsls	r7, r4, #2
 800ac9a:	7833      	ldrb	r3, [r6, #0]
 800ac9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aca0:	2b50      	cmp	r3, #80	@ 0x50
 800aca2:	d13e      	bne.n	800ad22 <__gethex+0x126>
 800aca4:	7873      	ldrb	r3, [r6, #1]
 800aca6:	2b2b      	cmp	r3, #43	@ 0x2b
 800aca8:	d033      	beq.n	800ad12 <__gethex+0x116>
 800acaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800acac:	d034      	beq.n	800ad18 <__gethex+0x11c>
 800acae:	1c71      	adds	r1, r6, #1
 800acb0:	2400      	movs	r4, #0
 800acb2:	7808      	ldrb	r0, [r1, #0]
 800acb4:	f7ff ff8c 	bl	800abd0 <__hexdig_fun>
 800acb8:	1e43      	subs	r3, r0, #1
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b18      	cmp	r3, #24
 800acbe:	d830      	bhi.n	800ad22 <__gethex+0x126>
 800acc0:	f1a0 0210 	sub.w	r2, r0, #16
 800acc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acc8:	f7ff ff82 	bl	800abd0 <__hexdig_fun>
 800accc:	f100 3cff 	add.w	ip, r0, #4294967295
 800acd0:	fa5f fc8c 	uxtb.w	ip, ip
 800acd4:	f1bc 0f18 	cmp.w	ip, #24
 800acd8:	f04f 030a 	mov.w	r3, #10
 800acdc:	d91e      	bls.n	800ad1c <__gethex+0x120>
 800acde:	b104      	cbz	r4, 800ace2 <__gethex+0xe6>
 800ace0:	4252      	negs	r2, r2
 800ace2:	4417      	add	r7, r2
 800ace4:	f8ca 1000 	str.w	r1, [sl]
 800ace8:	b1ed      	cbz	r5, 800ad26 <__gethex+0x12a>
 800acea:	f1bb 0f00 	cmp.w	fp, #0
 800acee:	bf0c      	ite	eq
 800acf0:	2506      	moveq	r5, #6
 800acf2:	2500      	movne	r5, #0
 800acf4:	4628      	mov	r0, r5
 800acf6:	b005      	add	sp, #20
 800acf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfc:	2500      	movs	r5, #0
 800acfe:	462c      	mov	r4, r5
 800ad00:	e7b0      	b.n	800ac64 <__gethex+0x68>
 800ad02:	2c00      	cmp	r4, #0
 800ad04:	d1c7      	bne.n	800ac96 <__gethex+0x9a>
 800ad06:	4627      	mov	r7, r4
 800ad08:	e7c7      	b.n	800ac9a <__gethex+0x9e>
 800ad0a:	464e      	mov	r6, r9
 800ad0c:	462f      	mov	r7, r5
 800ad0e:	2501      	movs	r5, #1
 800ad10:	e7c3      	b.n	800ac9a <__gethex+0x9e>
 800ad12:	2400      	movs	r4, #0
 800ad14:	1cb1      	adds	r1, r6, #2
 800ad16:	e7cc      	b.n	800acb2 <__gethex+0xb6>
 800ad18:	2401      	movs	r4, #1
 800ad1a:	e7fb      	b.n	800ad14 <__gethex+0x118>
 800ad1c:	fb03 0002 	mla	r0, r3, r2, r0
 800ad20:	e7ce      	b.n	800acc0 <__gethex+0xc4>
 800ad22:	4631      	mov	r1, r6
 800ad24:	e7de      	b.n	800ace4 <__gethex+0xe8>
 800ad26:	eba6 0309 	sub.w	r3, r6, r9
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	2b07      	cmp	r3, #7
 800ad30:	dc0a      	bgt.n	800ad48 <__gethex+0x14c>
 800ad32:	9801      	ldr	r0, [sp, #4]
 800ad34:	f7fe f93c 	bl	8008fb0 <_Balloc>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	b940      	cbnz	r0, 800ad4e <__gethex+0x152>
 800ad3c:	4b5c      	ldr	r3, [pc, #368]	@ (800aeb0 <__gethex+0x2b4>)
 800ad3e:	4602      	mov	r2, r0
 800ad40:	21e4      	movs	r1, #228	@ 0xe4
 800ad42:	485c      	ldr	r0, [pc, #368]	@ (800aeb4 <__gethex+0x2b8>)
 800ad44:	f7ff fec0 	bl	800aac8 <__assert_func>
 800ad48:	3101      	adds	r1, #1
 800ad4a:	105b      	asrs	r3, r3, #1
 800ad4c:	e7ef      	b.n	800ad2e <__gethex+0x132>
 800ad4e:	f100 0a14 	add.w	sl, r0, #20
 800ad52:	2300      	movs	r3, #0
 800ad54:	4655      	mov	r5, sl
 800ad56:	469b      	mov	fp, r3
 800ad58:	45b1      	cmp	r9, r6
 800ad5a:	d337      	bcc.n	800adcc <__gethex+0x1d0>
 800ad5c:	f845 bb04 	str.w	fp, [r5], #4
 800ad60:	eba5 050a 	sub.w	r5, r5, sl
 800ad64:	10ad      	asrs	r5, r5, #2
 800ad66:	6125      	str	r5, [r4, #16]
 800ad68:	4658      	mov	r0, fp
 800ad6a:	f7fe fa13 	bl	8009194 <__hi0bits>
 800ad6e:	016d      	lsls	r5, r5, #5
 800ad70:	f8d8 6000 	ldr.w	r6, [r8]
 800ad74:	1a2d      	subs	r5, r5, r0
 800ad76:	42b5      	cmp	r5, r6
 800ad78:	dd54      	ble.n	800ae24 <__gethex+0x228>
 800ad7a:	1bad      	subs	r5, r5, r6
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f7fe fda7 	bl	80098d2 <__any_on>
 800ad84:	4681      	mov	r9, r0
 800ad86:	b178      	cbz	r0, 800ada8 <__gethex+0x1ac>
 800ad88:	1e6b      	subs	r3, r5, #1
 800ad8a:	1159      	asrs	r1, r3, #5
 800ad8c:	f003 021f 	and.w	r2, r3, #31
 800ad90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad94:	f04f 0901 	mov.w	r9, #1
 800ad98:	fa09 f202 	lsl.w	r2, r9, r2
 800ad9c:	420a      	tst	r2, r1
 800ad9e:	d003      	beq.n	800ada8 <__gethex+0x1ac>
 800ada0:	454b      	cmp	r3, r9
 800ada2:	dc36      	bgt.n	800ae12 <__gethex+0x216>
 800ada4:	f04f 0902 	mov.w	r9, #2
 800ada8:	4629      	mov	r1, r5
 800adaa:	4620      	mov	r0, r4
 800adac:	f7ff febe 	bl	800ab2c <rshift>
 800adb0:	442f      	add	r7, r5
 800adb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adb6:	42bb      	cmp	r3, r7
 800adb8:	da42      	bge.n	800ae40 <__gethex+0x244>
 800adba:	9801      	ldr	r0, [sp, #4]
 800adbc:	4621      	mov	r1, r4
 800adbe:	f7fe f937 	bl	8009030 <_Bfree>
 800adc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adc4:	2300      	movs	r3, #0
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	25a3      	movs	r5, #163	@ 0xa3
 800adca:	e793      	b.n	800acf4 <__gethex+0xf8>
 800adcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800add0:	2a2e      	cmp	r2, #46	@ 0x2e
 800add2:	d012      	beq.n	800adfa <__gethex+0x1fe>
 800add4:	2b20      	cmp	r3, #32
 800add6:	d104      	bne.n	800ade2 <__gethex+0x1e6>
 800add8:	f845 bb04 	str.w	fp, [r5], #4
 800addc:	f04f 0b00 	mov.w	fp, #0
 800ade0:	465b      	mov	r3, fp
 800ade2:	7830      	ldrb	r0, [r6, #0]
 800ade4:	9303      	str	r3, [sp, #12]
 800ade6:	f7ff fef3 	bl	800abd0 <__hexdig_fun>
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	f000 000f 	and.w	r0, r0, #15
 800adf0:	4098      	lsls	r0, r3
 800adf2:	ea4b 0b00 	orr.w	fp, fp, r0
 800adf6:	3304      	adds	r3, #4
 800adf8:	e7ae      	b.n	800ad58 <__gethex+0x15c>
 800adfa:	45b1      	cmp	r9, r6
 800adfc:	d8ea      	bhi.n	800add4 <__gethex+0x1d8>
 800adfe:	492b      	ldr	r1, [pc, #172]	@ (800aeac <__gethex+0x2b0>)
 800ae00:	9303      	str	r3, [sp, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff fe27 	bl	800aa58 <strncmp>
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d1e1      	bne.n	800add4 <__gethex+0x1d8>
 800ae10:	e7a2      	b.n	800ad58 <__gethex+0x15c>
 800ae12:	1ea9      	subs	r1, r5, #2
 800ae14:	4620      	mov	r0, r4
 800ae16:	f7fe fd5c 	bl	80098d2 <__any_on>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d0c2      	beq.n	800ada4 <__gethex+0x1a8>
 800ae1e:	f04f 0903 	mov.w	r9, #3
 800ae22:	e7c1      	b.n	800ada8 <__gethex+0x1ac>
 800ae24:	da09      	bge.n	800ae3a <__gethex+0x23e>
 800ae26:	1b75      	subs	r5, r6, r5
 800ae28:	4621      	mov	r1, r4
 800ae2a:	9801      	ldr	r0, [sp, #4]
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	f7fe fb17 	bl	8009460 <__lshift>
 800ae32:	1b7f      	subs	r7, r7, r5
 800ae34:	4604      	mov	r4, r0
 800ae36:	f100 0a14 	add.w	sl, r0, #20
 800ae3a:	f04f 0900 	mov.w	r9, #0
 800ae3e:	e7b8      	b.n	800adb2 <__gethex+0x1b6>
 800ae40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae44:	42bd      	cmp	r5, r7
 800ae46:	dd6f      	ble.n	800af28 <__gethex+0x32c>
 800ae48:	1bed      	subs	r5, r5, r7
 800ae4a:	42ae      	cmp	r6, r5
 800ae4c:	dc34      	bgt.n	800aeb8 <__gethex+0x2bc>
 800ae4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d022      	beq.n	800ae9c <__gethex+0x2a0>
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d024      	beq.n	800aea4 <__gethex+0x2a8>
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d115      	bne.n	800ae8a <__gethex+0x28e>
 800ae5e:	42ae      	cmp	r6, r5
 800ae60:	d113      	bne.n	800ae8a <__gethex+0x28e>
 800ae62:	2e01      	cmp	r6, #1
 800ae64:	d10b      	bne.n	800ae7e <__gethex+0x282>
 800ae66:	9a02      	ldr	r2, [sp, #8]
 800ae68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	2301      	movs	r3, #1
 800ae70:	6123      	str	r3, [r4, #16]
 800ae72:	f8ca 3000 	str.w	r3, [sl]
 800ae76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae78:	2562      	movs	r5, #98	@ 0x62
 800ae7a:	601c      	str	r4, [r3, #0]
 800ae7c:	e73a      	b.n	800acf4 <__gethex+0xf8>
 800ae7e:	1e71      	subs	r1, r6, #1
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7fe fd26 	bl	80098d2 <__any_on>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d1ed      	bne.n	800ae66 <__gethex+0x26a>
 800ae8a:	9801      	ldr	r0, [sp, #4]
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	f7fe f8cf 	bl	8009030 <_Bfree>
 800ae92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae94:	2300      	movs	r3, #0
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	2550      	movs	r5, #80	@ 0x50
 800ae9a:	e72b      	b.n	800acf4 <__gethex+0xf8>
 800ae9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1f3      	bne.n	800ae8a <__gethex+0x28e>
 800aea2:	e7e0      	b.n	800ae66 <__gethex+0x26a>
 800aea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1dd      	bne.n	800ae66 <__gethex+0x26a>
 800aeaa:	e7ee      	b.n	800ae8a <__gethex+0x28e>
 800aeac:	0800ba38 	.word	0x0800ba38
 800aeb0:	0800b8cd 	.word	0x0800b8cd
 800aeb4:	0800bbe6 	.word	0x0800bbe6
 800aeb8:	1e6f      	subs	r7, r5, #1
 800aeba:	f1b9 0f00 	cmp.w	r9, #0
 800aebe:	d130      	bne.n	800af22 <__gethex+0x326>
 800aec0:	b127      	cbz	r7, 800aecc <__gethex+0x2d0>
 800aec2:	4639      	mov	r1, r7
 800aec4:	4620      	mov	r0, r4
 800aec6:	f7fe fd04 	bl	80098d2 <__any_on>
 800aeca:	4681      	mov	r9, r0
 800aecc:	117a      	asrs	r2, r7, #5
 800aece:	2301      	movs	r3, #1
 800aed0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aed4:	f007 071f 	and.w	r7, r7, #31
 800aed8:	40bb      	lsls	r3, r7
 800aeda:	4213      	tst	r3, r2
 800aedc:	4629      	mov	r1, r5
 800aede:	4620      	mov	r0, r4
 800aee0:	bf18      	it	ne
 800aee2:	f049 0902 	orrne.w	r9, r9, #2
 800aee6:	f7ff fe21 	bl	800ab2c <rshift>
 800aeea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aeee:	1b76      	subs	r6, r6, r5
 800aef0:	2502      	movs	r5, #2
 800aef2:	f1b9 0f00 	cmp.w	r9, #0
 800aef6:	d047      	beq.n	800af88 <__gethex+0x38c>
 800aef8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d015      	beq.n	800af2c <__gethex+0x330>
 800af00:	2b03      	cmp	r3, #3
 800af02:	d017      	beq.n	800af34 <__gethex+0x338>
 800af04:	2b01      	cmp	r3, #1
 800af06:	d109      	bne.n	800af1c <__gethex+0x320>
 800af08:	f019 0f02 	tst.w	r9, #2
 800af0c:	d006      	beq.n	800af1c <__gethex+0x320>
 800af0e:	f8da 3000 	ldr.w	r3, [sl]
 800af12:	ea49 0903 	orr.w	r9, r9, r3
 800af16:	f019 0f01 	tst.w	r9, #1
 800af1a:	d10e      	bne.n	800af3a <__gethex+0x33e>
 800af1c:	f045 0510 	orr.w	r5, r5, #16
 800af20:	e032      	b.n	800af88 <__gethex+0x38c>
 800af22:	f04f 0901 	mov.w	r9, #1
 800af26:	e7d1      	b.n	800aecc <__gethex+0x2d0>
 800af28:	2501      	movs	r5, #1
 800af2a:	e7e2      	b.n	800aef2 <__gethex+0x2f6>
 800af2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af2e:	f1c3 0301 	rsb	r3, r3, #1
 800af32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0f0      	beq.n	800af1c <__gethex+0x320>
 800af3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af3e:	f104 0314 	add.w	r3, r4, #20
 800af42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af4a:	f04f 0c00 	mov.w	ip, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f853 2b04 	ldr.w	r2, [r3], #4
 800af54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af58:	d01b      	beq.n	800af92 <__gethex+0x396>
 800af5a:	3201      	adds	r2, #1
 800af5c:	6002      	str	r2, [r0, #0]
 800af5e:	2d02      	cmp	r5, #2
 800af60:	f104 0314 	add.w	r3, r4, #20
 800af64:	d13c      	bne.n	800afe0 <__gethex+0x3e4>
 800af66:	f8d8 2000 	ldr.w	r2, [r8]
 800af6a:	3a01      	subs	r2, #1
 800af6c:	42b2      	cmp	r2, r6
 800af6e:	d109      	bne.n	800af84 <__gethex+0x388>
 800af70:	1171      	asrs	r1, r6, #5
 800af72:	2201      	movs	r2, #1
 800af74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af78:	f006 061f 	and.w	r6, r6, #31
 800af7c:	fa02 f606 	lsl.w	r6, r2, r6
 800af80:	421e      	tst	r6, r3
 800af82:	d13a      	bne.n	800affa <__gethex+0x3fe>
 800af84:	f045 0520 	orr.w	r5, r5, #32
 800af88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af8a:	601c      	str	r4, [r3, #0]
 800af8c:	9b02      	ldr	r3, [sp, #8]
 800af8e:	601f      	str	r7, [r3, #0]
 800af90:	e6b0      	b.n	800acf4 <__gethex+0xf8>
 800af92:	4299      	cmp	r1, r3
 800af94:	f843 cc04 	str.w	ip, [r3, #-4]
 800af98:	d8d9      	bhi.n	800af4e <__gethex+0x352>
 800af9a:	68a3      	ldr	r3, [r4, #8]
 800af9c:	459b      	cmp	fp, r3
 800af9e:	db17      	blt.n	800afd0 <__gethex+0x3d4>
 800afa0:	6861      	ldr	r1, [r4, #4]
 800afa2:	9801      	ldr	r0, [sp, #4]
 800afa4:	3101      	adds	r1, #1
 800afa6:	f7fe f803 	bl	8008fb0 <_Balloc>
 800afaa:	4681      	mov	r9, r0
 800afac:	b918      	cbnz	r0, 800afb6 <__gethex+0x3ba>
 800afae:	4b1a      	ldr	r3, [pc, #104]	@ (800b018 <__gethex+0x41c>)
 800afb0:	4602      	mov	r2, r0
 800afb2:	2184      	movs	r1, #132	@ 0x84
 800afb4:	e6c5      	b.n	800ad42 <__gethex+0x146>
 800afb6:	6922      	ldr	r2, [r4, #16]
 800afb8:	3202      	adds	r2, #2
 800afba:	f104 010c 	add.w	r1, r4, #12
 800afbe:	0092      	lsls	r2, r2, #2
 800afc0:	300c      	adds	r0, #12
 800afc2:	f7ff fd6b 	bl	800aa9c <memcpy>
 800afc6:	4621      	mov	r1, r4
 800afc8:	9801      	ldr	r0, [sp, #4]
 800afca:	f7fe f831 	bl	8009030 <_Bfree>
 800afce:	464c      	mov	r4, r9
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afd8:	6122      	str	r2, [r4, #16]
 800afda:	2201      	movs	r2, #1
 800afdc:	615a      	str	r2, [r3, #20]
 800afde:	e7be      	b.n	800af5e <__gethex+0x362>
 800afe0:	6922      	ldr	r2, [r4, #16]
 800afe2:	455a      	cmp	r2, fp
 800afe4:	dd0b      	ble.n	800affe <__gethex+0x402>
 800afe6:	2101      	movs	r1, #1
 800afe8:	4620      	mov	r0, r4
 800afea:	f7ff fd9f 	bl	800ab2c <rshift>
 800afee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aff2:	3701      	adds	r7, #1
 800aff4:	42bb      	cmp	r3, r7
 800aff6:	f6ff aee0 	blt.w	800adba <__gethex+0x1be>
 800affa:	2501      	movs	r5, #1
 800affc:	e7c2      	b.n	800af84 <__gethex+0x388>
 800affe:	f016 061f 	ands.w	r6, r6, #31
 800b002:	d0fa      	beq.n	800affa <__gethex+0x3fe>
 800b004:	4453      	add	r3, sl
 800b006:	f1c6 0620 	rsb	r6, r6, #32
 800b00a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b00e:	f7fe f8c1 	bl	8009194 <__hi0bits>
 800b012:	42b0      	cmp	r0, r6
 800b014:	dbe7      	blt.n	800afe6 <__gethex+0x3ea>
 800b016:	e7f0      	b.n	800affa <__gethex+0x3fe>
 800b018:	0800b8cd 	.word	0x0800b8cd

0800b01c <L_shift>:
 800b01c:	f1c2 0208 	rsb	r2, r2, #8
 800b020:	0092      	lsls	r2, r2, #2
 800b022:	b570      	push	{r4, r5, r6, lr}
 800b024:	f1c2 0620 	rsb	r6, r2, #32
 800b028:	6843      	ldr	r3, [r0, #4]
 800b02a:	6804      	ldr	r4, [r0, #0]
 800b02c:	fa03 f506 	lsl.w	r5, r3, r6
 800b030:	432c      	orrs	r4, r5
 800b032:	40d3      	lsrs	r3, r2
 800b034:	6004      	str	r4, [r0, #0]
 800b036:	f840 3f04 	str.w	r3, [r0, #4]!
 800b03a:	4288      	cmp	r0, r1
 800b03c:	d3f4      	bcc.n	800b028 <L_shift+0xc>
 800b03e:	bd70      	pop	{r4, r5, r6, pc}

0800b040 <__match>:
 800b040:	b530      	push	{r4, r5, lr}
 800b042:	6803      	ldr	r3, [r0, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b04a:	b914      	cbnz	r4, 800b052 <__match+0x12>
 800b04c:	6003      	str	r3, [r0, #0]
 800b04e:	2001      	movs	r0, #1
 800b050:	bd30      	pop	{r4, r5, pc}
 800b052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b056:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b05a:	2d19      	cmp	r5, #25
 800b05c:	bf98      	it	ls
 800b05e:	3220      	addls	r2, #32
 800b060:	42a2      	cmp	r2, r4
 800b062:	d0f0      	beq.n	800b046 <__match+0x6>
 800b064:	2000      	movs	r0, #0
 800b066:	e7f3      	b.n	800b050 <__match+0x10>

0800b068 <__hexnan>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	680b      	ldr	r3, [r1, #0]
 800b06e:	6801      	ldr	r1, [r0, #0]
 800b070:	115e      	asrs	r6, r3, #5
 800b072:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b076:	f013 031f 	ands.w	r3, r3, #31
 800b07a:	b087      	sub	sp, #28
 800b07c:	bf18      	it	ne
 800b07e:	3604      	addne	r6, #4
 800b080:	2500      	movs	r5, #0
 800b082:	1f37      	subs	r7, r6, #4
 800b084:	4682      	mov	sl, r0
 800b086:	4690      	mov	r8, r2
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b08e:	46b9      	mov	r9, r7
 800b090:	463c      	mov	r4, r7
 800b092:	9502      	str	r5, [sp, #8]
 800b094:	46ab      	mov	fp, r5
 800b096:	784a      	ldrb	r2, [r1, #1]
 800b098:	1c4b      	adds	r3, r1, #1
 800b09a:	9303      	str	r3, [sp, #12]
 800b09c:	b342      	cbz	r2, 800b0f0 <__hexnan+0x88>
 800b09e:	4610      	mov	r0, r2
 800b0a0:	9105      	str	r1, [sp, #20]
 800b0a2:	9204      	str	r2, [sp, #16]
 800b0a4:	f7ff fd94 	bl	800abd0 <__hexdig_fun>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d151      	bne.n	800b150 <__hexnan+0xe8>
 800b0ac:	9a04      	ldr	r2, [sp, #16]
 800b0ae:	9905      	ldr	r1, [sp, #20]
 800b0b0:	2a20      	cmp	r2, #32
 800b0b2:	d818      	bhi.n	800b0e6 <__hexnan+0x7e>
 800b0b4:	9b02      	ldr	r3, [sp, #8]
 800b0b6:	459b      	cmp	fp, r3
 800b0b8:	dd13      	ble.n	800b0e2 <__hexnan+0x7a>
 800b0ba:	454c      	cmp	r4, r9
 800b0bc:	d206      	bcs.n	800b0cc <__hexnan+0x64>
 800b0be:	2d07      	cmp	r5, #7
 800b0c0:	dc04      	bgt.n	800b0cc <__hexnan+0x64>
 800b0c2:	462a      	mov	r2, r5
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f7ff ffa8 	bl	800b01c <L_shift>
 800b0cc:	4544      	cmp	r4, r8
 800b0ce:	d952      	bls.n	800b176 <__hexnan+0x10e>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f1a4 0904 	sub.w	r9, r4, #4
 800b0d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0da:	f8cd b008 	str.w	fp, [sp, #8]
 800b0de:	464c      	mov	r4, r9
 800b0e0:	461d      	mov	r5, r3
 800b0e2:	9903      	ldr	r1, [sp, #12]
 800b0e4:	e7d7      	b.n	800b096 <__hexnan+0x2e>
 800b0e6:	2a29      	cmp	r2, #41	@ 0x29
 800b0e8:	d157      	bne.n	800b19a <__hexnan+0x132>
 800b0ea:	3102      	adds	r1, #2
 800b0ec:	f8ca 1000 	str.w	r1, [sl]
 800b0f0:	f1bb 0f00 	cmp.w	fp, #0
 800b0f4:	d051      	beq.n	800b19a <__hexnan+0x132>
 800b0f6:	454c      	cmp	r4, r9
 800b0f8:	d206      	bcs.n	800b108 <__hexnan+0xa0>
 800b0fa:	2d07      	cmp	r5, #7
 800b0fc:	dc04      	bgt.n	800b108 <__hexnan+0xa0>
 800b0fe:	462a      	mov	r2, r5
 800b100:	4649      	mov	r1, r9
 800b102:	4620      	mov	r0, r4
 800b104:	f7ff ff8a 	bl	800b01c <L_shift>
 800b108:	4544      	cmp	r4, r8
 800b10a:	d936      	bls.n	800b17a <__hexnan+0x112>
 800b10c:	f1a8 0204 	sub.w	r2, r8, #4
 800b110:	4623      	mov	r3, r4
 800b112:	f853 1b04 	ldr.w	r1, [r3], #4
 800b116:	f842 1f04 	str.w	r1, [r2, #4]!
 800b11a:	429f      	cmp	r7, r3
 800b11c:	d2f9      	bcs.n	800b112 <__hexnan+0xaa>
 800b11e:	1b3b      	subs	r3, r7, r4
 800b120:	f023 0303 	bic.w	r3, r3, #3
 800b124:	3304      	adds	r3, #4
 800b126:	3401      	adds	r4, #1
 800b128:	3e03      	subs	r6, #3
 800b12a:	42b4      	cmp	r4, r6
 800b12c:	bf88      	it	hi
 800b12e:	2304      	movhi	r3, #4
 800b130:	4443      	add	r3, r8
 800b132:	2200      	movs	r2, #0
 800b134:	f843 2b04 	str.w	r2, [r3], #4
 800b138:	429f      	cmp	r7, r3
 800b13a:	d2fb      	bcs.n	800b134 <__hexnan+0xcc>
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	b91b      	cbnz	r3, 800b148 <__hexnan+0xe0>
 800b140:	4547      	cmp	r7, r8
 800b142:	d128      	bne.n	800b196 <__hexnan+0x12e>
 800b144:	2301      	movs	r3, #1
 800b146:	603b      	str	r3, [r7, #0]
 800b148:	2005      	movs	r0, #5
 800b14a:	b007      	add	sp, #28
 800b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b150:	3501      	adds	r5, #1
 800b152:	2d08      	cmp	r5, #8
 800b154:	f10b 0b01 	add.w	fp, fp, #1
 800b158:	dd06      	ble.n	800b168 <__hexnan+0x100>
 800b15a:	4544      	cmp	r4, r8
 800b15c:	d9c1      	bls.n	800b0e2 <__hexnan+0x7a>
 800b15e:	2300      	movs	r3, #0
 800b160:	f844 3c04 	str.w	r3, [r4, #-4]
 800b164:	2501      	movs	r5, #1
 800b166:	3c04      	subs	r4, #4
 800b168:	6822      	ldr	r2, [r4, #0]
 800b16a:	f000 000f 	and.w	r0, r0, #15
 800b16e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b172:	6020      	str	r0, [r4, #0]
 800b174:	e7b5      	b.n	800b0e2 <__hexnan+0x7a>
 800b176:	2508      	movs	r5, #8
 800b178:	e7b3      	b.n	800b0e2 <__hexnan+0x7a>
 800b17a:	9b01      	ldr	r3, [sp, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0dd      	beq.n	800b13c <__hexnan+0xd4>
 800b180:	f1c3 0320 	rsb	r3, r3, #32
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	40da      	lsrs	r2, r3
 800b18a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b18e:	4013      	ands	r3, r2
 800b190:	f846 3c04 	str.w	r3, [r6, #-4]
 800b194:	e7d2      	b.n	800b13c <__hexnan+0xd4>
 800b196:	3f04      	subs	r7, #4
 800b198:	e7d0      	b.n	800b13c <__hexnan+0xd4>
 800b19a:	2004      	movs	r0, #4
 800b19c:	e7d5      	b.n	800b14a <__hexnan+0xe2>

0800b19e <__ascii_mbtowc>:
 800b19e:	b082      	sub	sp, #8
 800b1a0:	b901      	cbnz	r1, 800b1a4 <__ascii_mbtowc+0x6>
 800b1a2:	a901      	add	r1, sp, #4
 800b1a4:	b142      	cbz	r2, 800b1b8 <__ascii_mbtowc+0x1a>
 800b1a6:	b14b      	cbz	r3, 800b1bc <__ascii_mbtowc+0x1e>
 800b1a8:	7813      	ldrb	r3, [r2, #0]
 800b1aa:	600b      	str	r3, [r1, #0]
 800b1ac:	7812      	ldrb	r2, [r2, #0]
 800b1ae:	1e10      	subs	r0, r2, #0
 800b1b0:	bf18      	it	ne
 800b1b2:	2001      	movne	r0, #1
 800b1b4:	b002      	add	sp, #8
 800b1b6:	4770      	bx	lr
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	e7fb      	b.n	800b1b4 <__ascii_mbtowc+0x16>
 800b1bc:	f06f 0001 	mvn.w	r0, #1
 800b1c0:	e7f8      	b.n	800b1b4 <__ascii_mbtowc+0x16>

0800b1c2 <_realloc_r>:
 800b1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c6:	4680      	mov	r8, r0
 800b1c8:	4615      	mov	r5, r2
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	b921      	cbnz	r1, 800b1d8 <_realloc_r+0x16>
 800b1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	f7fd be60 	b.w	8008e98 <_malloc_r>
 800b1d8:	b92a      	cbnz	r2, 800b1e6 <_realloc_r+0x24>
 800b1da:	f7fd fde9 	bl	8008db0 <_free_r>
 800b1de:	2400      	movs	r4, #0
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e6:	f000 f840 	bl	800b26a <_malloc_usable_size_r>
 800b1ea:	4285      	cmp	r5, r0
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	d802      	bhi.n	800b1f6 <_realloc_r+0x34>
 800b1f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b1f4:	d8f4      	bhi.n	800b1e0 <_realloc_r+0x1e>
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	f7fd fe4d 	bl	8008e98 <_malloc_r>
 800b1fe:	4607      	mov	r7, r0
 800b200:	2800      	cmp	r0, #0
 800b202:	d0ec      	beq.n	800b1de <_realloc_r+0x1c>
 800b204:	42b5      	cmp	r5, r6
 800b206:	462a      	mov	r2, r5
 800b208:	4621      	mov	r1, r4
 800b20a:	bf28      	it	cs
 800b20c:	4632      	movcs	r2, r6
 800b20e:	f7ff fc45 	bl	800aa9c <memcpy>
 800b212:	4621      	mov	r1, r4
 800b214:	4640      	mov	r0, r8
 800b216:	f7fd fdcb 	bl	8008db0 <_free_r>
 800b21a:	463c      	mov	r4, r7
 800b21c:	e7e0      	b.n	800b1e0 <_realloc_r+0x1e>

0800b21e <__ascii_wctomb>:
 800b21e:	4603      	mov	r3, r0
 800b220:	4608      	mov	r0, r1
 800b222:	b141      	cbz	r1, 800b236 <__ascii_wctomb+0x18>
 800b224:	2aff      	cmp	r2, #255	@ 0xff
 800b226:	d904      	bls.n	800b232 <__ascii_wctomb+0x14>
 800b228:	228a      	movs	r2, #138	@ 0x8a
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	4770      	bx	lr
 800b232:	700a      	strb	r2, [r1, #0]
 800b234:	2001      	movs	r0, #1
 800b236:	4770      	bx	lr

0800b238 <fiprintf>:
 800b238:	b40e      	push	{r1, r2, r3}
 800b23a:	b503      	push	{r0, r1, lr}
 800b23c:	4601      	mov	r1, r0
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	4805      	ldr	r0, [pc, #20]	@ (800b258 <fiprintf+0x20>)
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f000 f83f 	bl	800b2cc <_vfiprintf_r>
 800b24e:	b002      	add	sp, #8
 800b250:	f85d eb04 	ldr.w	lr, [sp], #4
 800b254:	b003      	add	sp, #12
 800b256:	4770      	bx	lr
 800b258:	2000001c 	.word	0x2000001c

0800b25c <abort>:
 800b25c:	b508      	push	{r3, lr}
 800b25e:	2006      	movs	r0, #6
 800b260:	f000 fa08 	bl	800b674 <raise>
 800b264:	2001      	movs	r0, #1
 800b266:	f7f6 faf9 	bl	800185c <_exit>

0800b26a <_malloc_usable_size_r>:
 800b26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26e:	1f18      	subs	r0, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfbc      	itt	lt
 800b274:	580b      	ldrlt	r3, [r1, r0]
 800b276:	18c0      	addlt	r0, r0, r3
 800b278:	4770      	bx	lr

0800b27a <__sfputc_r>:
 800b27a:	6893      	ldr	r3, [r2, #8]
 800b27c:	3b01      	subs	r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	b410      	push	{r4}
 800b282:	6093      	str	r3, [r2, #8]
 800b284:	da08      	bge.n	800b298 <__sfputc_r+0x1e>
 800b286:	6994      	ldr	r4, [r2, #24]
 800b288:	42a3      	cmp	r3, r4
 800b28a:	db01      	blt.n	800b290 <__sfputc_r+0x16>
 800b28c:	290a      	cmp	r1, #10
 800b28e:	d103      	bne.n	800b298 <__sfputc_r+0x1e>
 800b290:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b294:	f000 b932 	b.w	800b4fc <__swbuf_r>
 800b298:	6813      	ldr	r3, [r2, #0]
 800b29a:	1c58      	adds	r0, r3, #1
 800b29c:	6010      	str	r0, [r2, #0]
 800b29e:	7019      	strb	r1, [r3, #0]
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <__sfputs_r>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	4614      	mov	r4, r2
 800b2b0:	18d5      	adds	r5, r2, r3
 800b2b2:	42ac      	cmp	r4, r5
 800b2b4:	d101      	bne.n	800b2ba <__sfputs_r+0x12>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e007      	b.n	800b2ca <__sfputs_r+0x22>
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	463a      	mov	r2, r7
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7ff ffda 	bl	800b27a <__sfputc_r>
 800b2c6:	1c43      	adds	r3, r0, #1
 800b2c8:	d1f3      	bne.n	800b2b2 <__sfputs_r+0xa>
 800b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2cc <_vfiprintf_r>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	b09d      	sub	sp, #116	@ 0x74
 800b2d4:	4614      	mov	r4, r2
 800b2d6:	4698      	mov	r8, r3
 800b2d8:	4606      	mov	r6, r0
 800b2da:	b118      	cbz	r0, 800b2e4 <_vfiprintf_r+0x18>
 800b2dc:	6a03      	ldr	r3, [r0, #32]
 800b2de:	b90b      	cbnz	r3, 800b2e4 <_vfiprintf_r+0x18>
 800b2e0:	f7fc fdc4 	bl	8007e6c <__sinit>
 800b2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2e6:	07d9      	lsls	r1, r3, #31
 800b2e8:	d405      	bmi.n	800b2f6 <_vfiprintf_r+0x2a>
 800b2ea:	89ab      	ldrh	r3, [r5, #12]
 800b2ec:	059a      	lsls	r2, r3, #22
 800b2ee:	d402      	bmi.n	800b2f6 <_vfiprintf_r+0x2a>
 800b2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2f2:	f7fc ff06 	bl	8008102 <__retarget_lock_acquire_recursive>
 800b2f6:	89ab      	ldrh	r3, [r5, #12]
 800b2f8:	071b      	lsls	r3, r3, #28
 800b2fa:	d501      	bpl.n	800b300 <_vfiprintf_r+0x34>
 800b2fc:	692b      	ldr	r3, [r5, #16]
 800b2fe:	b99b      	cbnz	r3, 800b328 <_vfiprintf_r+0x5c>
 800b300:	4629      	mov	r1, r5
 800b302:	4630      	mov	r0, r6
 800b304:	f000 f938 	bl	800b578 <__swsetup_r>
 800b308:	b170      	cbz	r0, 800b328 <_vfiprintf_r+0x5c>
 800b30a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b30c:	07dc      	lsls	r4, r3, #31
 800b30e:	d504      	bpl.n	800b31a <_vfiprintf_r+0x4e>
 800b310:	f04f 30ff 	mov.w	r0, #4294967295
 800b314:	b01d      	add	sp, #116	@ 0x74
 800b316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31a:	89ab      	ldrh	r3, [r5, #12]
 800b31c:	0598      	lsls	r0, r3, #22
 800b31e:	d4f7      	bmi.n	800b310 <_vfiprintf_r+0x44>
 800b320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b322:	f7fc feef 	bl	8008104 <__retarget_lock_release_recursive>
 800b326:	e7f3      	b.n	800b310 <_vfiprintf_r+0x44>
 800b328:	2300      	movs	r3, #0
 800b32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b32c:	2320      	movs	r3, #32
 800b32e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b332:	f8cd 800c 	str.w	r8, [sp, #12]
 800b336:	2330      	movs	r3, #48	@ 0x30
 800b338:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4e8 <_vfiprintf_r+0x21c>
 800b33c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b340:	f04f 0901 	mov.w	r9, #1
 800b344:	4623      	mov	r3, r4
 800b346:	469a      	mov	sl, r3
 800b348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b34c:	b10a      	cbz	r2, 800b352 <_vfiprintf_r+0x86>
 800b34e:	2a25      	cmp	r2, #37	@ 0x25
 800b350:	d1f9      	bne.n	800b346 <_vfiprintf_r+0x7a>
 800b352:	ebba 0b04 	subs.w	fp, sl, r4
 800b356:	d00b      	beq.n	800b370 <_vfiprintf_r+0xa4>
 800b358:	465b      	mov	r3, fp
 800b35a:	4622      	mov	r2, r4
 800b35c:	4629      	mov	r1, r5
 800b35e:	4630      	mov	r0, r6
 800b360:	f7ff ffa2 	bl	800b2a8 <__sfputs_r>
 800b364:	3001      	adds	r0, #1
 800b366:	f000 80a7 	beq.w	800b4b8 <_vfiprintf_r+0x1ec>
 800b36a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b36c:	445a      	add	r2, fp
 800b36e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b370:	f89a 3000 	ldrb.w	r3, [sl]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 809f 	beq.w	800b4b8 <_vfiprintf_r+0x1ec>
 800b37a:	2300      	movs	r3, #0
 800b37c:	f04f 32ff 	mov.w	r2, #4294967295
 800b380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b384:	f10a 0a01 	add.w	sl, sl, #1
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	9307      	str	r3, [sp, #28]
 800b38c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b390:	931a      	str	r3, [sp, #104]	@ 0x68
 800b392:	4654      	mov	r4, sl
 800b394:	2205      	movs	r2, #5
 800b396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39a:	4853      	ldr	r0, [pc, #332]	@ (800b4e8 <_vfiprintf_r+0x21c>)
 800b39c:	f7f4 ff20 	bl	80001e0 <memchr>
 800b3a0:	9a04      	ldr	r2, [sp, #16]
 800b3a2:	b9d8      	cbnz	r0, 800b3dc <_vfiprintf_r+0x110>
 800b3a4:	06d1      	lsls	r1, r2, #27
 800b3a6:	bf44      	itt	mi
 800b3a8:	2320      	movmi	r3, #32
 800b3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ae:	0713      	lsls	r3, r2, #28
 800b3b0:	bf44      	itt	mi
 800b3b2:	232b      	movmi	r3, #43	@ 0x2b
 800b3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3be:	d015      	beq.n	800b3ec <_vfiprintf_r+0x120>
 800b3c0:	9a07      	ldr	r2, [sp, #28]
 800b3c2:	4654      	mov	r4, sl
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f04f 0c0a 	mov.w	ip, #10
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3d0:	3b30      	subs	r3, #48	@ 0x30
 800b3d2:	2b09      	cmp	r3, #9
 800b3d4:	d94b      	bls.n	800b46e <_vfiprintf_r+0x1a2>
 800b3d6:	b1b0      	cbz	r0, 800b406 <_vfiprintf_r+0x13a>
 800b3d8:	9207      	str	r2, [sp, #28]
 800b3da:	e014      	b.n	800b406 <_vfiprintf_r+0x13a>
 800b3dc:	eba0 0308 	sub.w	r3, r0, r8
 800b3e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	9304      	str	r3, [sp, #16]
 800b3e8:	46a2      	mov	sl, r4
 800b3ea:	e7d2      	b.n	800b392 <_vfiprintf_r+0xc6>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	1d19      	adds	r1, r3, #4
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	9103      	str	r1, [sp, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	bfbb      	ittet	lt
 800b3f8:	425b      	neglt	r3, r3
 800b3fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b3fe:	9307      	strge	r3, [sp, #28]
 800b400:	9307      	strlt	r3, [sp, #28]
 800b402:	bfb8      	it	lt
 800b404:	9204      	strlt	r2, [sp, #16]
 800b406:	7823      	ldrb	r3, [r4, #0]
 800b408:	2b2e      	cmp	r3, #46	@ 0x2e
 800b40a:	d10a      	bne.n	800b422 <_vfiprintf_r+0x156>
 800b40c:	7863      	ldrb	r3, [r4, #1]
 800b40e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b410:	d132      	bne.n	800b478 <_vfiprintf_r+0x1ac>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	1d1a      	adds	r2, r3, #4
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	9203      	str	r2, [sp, #12]
 800b41a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b41e:	3402      	adds	r4, #2
 800b420:	9305      	str	r3, [sp, #20]
 800b422:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b4f8 <_vfiprintf_r+0x22c>
 800b426:	7821      	ldrb	r1, [r4, #0]
 800b428:	2203      	movs	r2, #3
 800b42a:	4650      	mov	r0, sl
 800b42c:	f7f4 fed8 	bl	80001e0 <memchr>
 800b430:	b138      	cbz	r0, 800b442 <_vfiprintf_r+0x176>
 800b432:	9b04      	ldr	r3, [sp, #16]
 800b434:	eba0 000a 	sub.w	r0, r0, sl
 800b438:	2240      	movs	r2, #64	@ 0x40
 800b43a:	4082      	lsls	r2, r0
 800b43c:	4313      	orrs	r3, r2
 800b43e:	3401      	adds	r4, #1
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b446:	4829      	ldr	r0, [pc, #164]	@ (800b4ec <_vfiprintf_r+0x220>)
 800b448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b44c:	2206      	movs	r2, #6
 800b44e:	f7f4 fec7 	bl	80001e0 <memchr>
 800b452:	2800      	cmp	r0, #0
 800b454:	d03f      	beq.n	800b4d6 <_vfiprintf_r+0x20a>
 800b456:	4b26      	ldr	r3, [pc, #152]	@ (800b4f0 <_vfiprintf_r+0x224>)
 800b458:	bb1b      	cbnz	r3, 800b4a2 <_vfiprintf_r+0x1d6>
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	3307      	adds	r3, #7
 800b45e:	f023 0307 	bic.w	r3, r3, #7
 800b462:	3308      	adds	r3, #8
 800b464:	9303      	str	r3, [sp, #12]
 800b466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b468:	443b      	add	r3, r7
 800b46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b46c:	e76a      	b.n	800b344 <_vfiprintf_r+0x78>
 800b46e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b472:	460c      	mov	r4, r1
 800b474:	2001      	movs	r0, #1
 800b476:	e7a8      	b.n	800b3ca <_vfiprintf_r+0xfe>
 800b478:	2300      	movs	r3, #0
 800b47a:	3401      	adds	r4, #1
 800b47c:	9305      	str	r3, [sp, #20]
 800b47e:	4619      	mov	r1, r3
 800b480:	f04f 0c0a 	mov.w	ip, #10
 800b484:	4620      	mov	r0, r4
 800b486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b48a:	3a30      	subs	r2, #48	@ 0x30
 800b48c:	2a09      	cmp	r2, #9
 800b48e:	d903      	bls.n	800b498 <_vfiprintf_r+0x1cc>
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0c6      	beq.n	800b422 <_vfiprintf_r+0x156>
 800b494:	9105      	str	r1, [sp, #20]
 800b496:	e7c4      	b.n	800b422 <_vfiprintf_r+0x156>
 800b498:	fb0c 2101 	mla	r1, ip, r1, r2
 800b49c:	4604      	mov	r4, r0
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e7f0      	b.n	800b484 <_vfiprintf_r+0x1b8>
 800b4a2:	ab03      	add	r3, sp, #12
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	462a      	mov	r2, r5
 800b4a8:	4b12      	ldr	r3, [pc, #72]	@ (800b4f4 <_vfiprintf_r+0x228>)
 800b4aa:	a904      	add	r1, sp, #16
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7fb fe85 	bl	80071bc <_printf_float>
 800b4b2:	4607      	mov	r7, r0
 800b4b4:	1c78      	adds	r0, r7, #1
 800b4b6:	d1d6      	bne.n	800b466 <_vfiprintf_r+0x19a>
 800b4b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ba:	07d9      	lsls	r1, r3, #31
 800b4bc:	d405      	bmi.n	800b4ca <_vfiprintf_r+0x1fe>
 800b4be:	89ab      	ldrh	r3, [r5, #12]
 800b4c0:	059a      	lsls	r2, r3, #22
 800b4c2:	d402      	bmi.n	800b4ca <_vfiprintf_r+0x1fe>
 800b4c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4c6:	f7fc fe1d 	bl	8008104 <__retarget_lock_release_recursive>
 800b4ca:	89ab      	ldrh	r3, [r5, #12]
 800b4cc:	065b      	lsls	r3, r3, #25
 800b4ce:	f53f af1f 	bmi.w	800b310 <_vfiprintf_r+0x44>
 800b4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4d4:	e71e      	b.n	800b314 <_vfiprintf_r+0x48>
 800b4d6:	ab03      	add	r3, sp, #12
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	462a      	mov	r2, r5
 800b4dc:	4b05      	ldr	r3, [pc, #20]	@ (800b4f4 <_vfiprintf_r+0x228>)
 800b4de:	a904      	add	r1, sp, #16
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f7fc f903 	bl	80076ec <_printf_i>
 800b4e6:	e7e4      	b.n	800b4b2 <_vfiprintf_r+0x1e6>
 800b4e8:	0800bb91 	.word	0x0800bb91
 800b4ec:	0800bb9b 	.word	0x0800bb9b
 800b4f0:	080071bd 	.word	0x080071bd
 800b4f4:	0800b2a9 	.word	0x0800b2a9
 800b4f8:	0800bb97 	.word	0x0800bb97

0800b4fc <__swbuf_r>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	460e      	mov	r6, r1
 800b500:	4614      	mov	r4, r2
 800b502:	4605      	mov	r5, r0
 800b504:	b118      	cbz	r0, 800b50e <__swbuf_r+0x12>
 800b506:	6a03      	ldr	r3, [r0, #32]
 800b508:	b90b      	cbnz	r3, 800b50e <__swbuf_r+0x12>
 800b50a:	f7fc fcaf 	bl	8007e6c <__sinit>
 800b50e:	69a3      	ldr	r3, [r4, #24]
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	071a      	lsls	r2, r3, #28
 800b516:	d501      	bpl.n	800b51c <__swbuf_r+0x20>
 800b518:	6923      	ldr	r3, [r4, #16]
 800b51a:	b943      	cbnz	r3, 800b52e <__swbuf_r+0x32>
 800b51c:	4621      	mov	r1, r4
 800b51e:	4628      	mov	r0, r5
 800b520:	f000 f82a 	bl	800b578 <__swsetup_r>
 800b524:	b118      	cbz	r0, 800b52e <__swbuf_r+0x32>
 800b526:	f04f 37ff 	mov.w	r7, #4294967295
 800b52a:	4638      	mov	r0, r7
 800b52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	6922      	ldr	r2, [r4, #16]
 800b532:	1a98      	subs	r0, r3, r2
 800b534:	6963      	ldr	r3, [r4, #20]
 800b536:	b2f6      	uxtb	r6, r6
 800b538:	4283      	cmp	r3, r0
 800b53a:	4637      	mov	r7, r6
 800b53c:	dc05      	bgt.n	800b54a <__swbuf_r+0x4e>
 800b53e:	4621      	mov	r1, r4
 800b540:	4628      	mov	r0, r5
 800b542:	f7ff fa47 	bl	800a9d4 <_fflush_r>
 800b546:	2800      	cmp	r0, #0
 800b548:	d1ed      	bne.n	800b526 <__swbuf_r+0x2a>
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	60a3      	str	r3, [r4, #8]
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	6022      	str	r2, [r4, #0]
 800b556:	701e      	strb	r6, [r3, #0]
 800b558:	6962      	ldr	r2, [r4, #20]
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d004      	beq.n	800b56a <__swbuf_r+0x6e>
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	07db      	lsls	r3, r3, #31
 800b564:	d5e1      	bpl.n	800b52a <__swbuf_r+0x2e>
 800b566:	2e0a      	cmp	r6, #10
 800b568:	d1df      	bne.n	800b52a <__swbuf_r+0x2e>
 800b56a:	4621      	mov	r1, r4
 800b56c:	4628      	mov	r0, r5
 800b56e:	f7ff fa31 	bl	800a9d4 <_fflush_r>
 800b572:	2800      	cmp	r0, #0
 800b574:	d0d9      	beq.n	800b52a <__swbuf_r+0x2e>
 800b576:	e7d6      	b.n	800b526 <__swbuf_r+0x2a>

0800b578 <__swsetup_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4b29      	ldr	r3, [pc, #164]	@ (800b620 <__swsetup_r+0xa8>)
 800b57c:	4605      	mov	r5, r0
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	460c      	mov	r4, r1
 800b582:	b118      	cbz	r0, 800b58c <__swsetup_r+0x14>
 800b584:	6a03      	ldr	r3, [r0, #32]
 800b586:	b90b      	cbnz	r3, 800b58c <__swsetup_r+0x14>
 800b588:	f7fc fc70 	bl	8007e6c <__sinit>
 800b58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b590:	0719      	lsls	r1, r3, #28
 800b592:	d422      	bmi.n	800b5da <__swsetup_r+0x62>
 800b594:	06da      	lsls	r2, r3, #27
 800b596:	d407      	bmi.n	800b5a8 <__swsetup_r+0x30>
 800b598:	2209      	movs	r2, #9
 800b59a:	602a      	str	r2, [r5, #0]
 800b59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5a0:	81a3      	strh	r3, [r4, #12]
 800b5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a6:	e033      	b.n	800b610 <__swsetup_r+0x98>
 800b5a8:	0758      	lsls	r0, r3, #29
 800b5aa:	d512      	bpl.n	800b5d2 <__swsetup_r+0x5a>
 800b5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5ae:	b141      	cbz	r1, 800b5c2 <__swsetup_r+0x4a>
 800b5b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5b4:	4299      	cmp	r1, r3
 800b5b6:	d002      	beq.n	800b5be <__swsetup_r+0x46>
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f7fd fbf9 	bl	8008db0 <_free_r>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	6063      	str	r3, [r4, #4]
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f043 0308 	orr.w	r3, r3, #8
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	b94b      	cbnz	r3, 800b5f2 <__swsetup_r+0x7a>
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5e8:	d003      	beq.n	800b5f2 <__swsetup_r+0x7a>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f000 f883 	bl	800b6f8 <__smakebuf_r>
 800b5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f6:	f013 0201 	ands.w	r2, r3, #1
 800b5fa:	d00a      	beq.n	800b612 <__swsetup_r+0x9a>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	60a2      	str	r2, [r4, #8]
 800b600:	6962      	ldr	r2, [r4, #20]
 800b602:	4252      	negs	r2, r2
 800b604:	61a2      	str	r2, [r4, #24]
 800b606:	6922      	ldr	r2, [r4, #16]
 800b608:	b942      	cbnz	r2, 800b61c <__swsetup_r+0xa4>
 800b60a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b60e:	d1c5      	bne.n	800b59c <__swsetup_r+0x24>
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	0799      	lsls	r1, r3, #30
 800b614:	bf58      	it	pl
 800b616:	6962      	ldrpl	r2, [r4, #20]
 800b618:	60a2      	str	r2, [r4, #8]
 800b61a:	e7f4      	b.n	800b606 <__swsetup_r+0x8e>
 800b61c:	2000      	movs	r0, #0
 800b61e:	e7f7      	b.n	800b610 <__swsetup_r+0x98>
 800b620:	2000001c 	.word	0x2000001c

0800b624 <_raise_r>:
 800b624:	291f      	cmp	r1, #31
 800b626:	b538      	push	{r3, r4, r5, lr}
 800b628:	4605      	mov	r5, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	d904      	bls.n	800b638 <_raise_r+0x14>
 800b62e:	2316      	movs	r3, #22
 800b630:	6003      	str	r3, [r0, #0]
 800b632:	f04f 30ff 	mov.w	r0, #4294967295
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b63a:	b112      	cbz	r2, 800b642 <_raise_r+0x1e>
 800b63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b640:	b94b      	cbnz	r3, 800b656 <_raise_r+0x32>
 800b642:	4628      	mov	r0, r5
 800b644:	f000 f830 	bl	800b6a8 <_getpid_r>
 800b648:	4622      	mov	r2, r4
 800b64a:	4601      	mov	r1, r0
 800b64c:	4628      	mov	r0, r5
 800b64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b652:	f000 b817 	b.w	800b684 <_kill_r>
 800b656:	2b01      	cmp	r3, #1
 800b658:	d00a      	beq.n	800b670 <_raise_r+0x4c>
 800b65a:	1c59      	adds	r1, r3, #1
 800b65c:	d103      	bne.n	800b666 <_raise_r+0x42>
 800b65e:	2316      	movs	r3, #22
 800b660:	6003      	str	r3, [r0, #0]
 800b662:	2001      	movs	r0, #1
 800b664:	e7e7      	b.n	800b636 <_raise_r+0x12>
 800b666:	2100      	movs	r1, #0
 800b668:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b66c:	4620      	mov	r0, r4
 800b66e:	4798      	blx	r3
 800b670:	2000      	movs	r0, #0
 800b672:	e7e0      	b.n	800b636 <_raise_r+0x12>

0800b674 <raise>:
 800b674:	4b02      	ldr	r3, [pc, #8]	@ (800b680 <raise+0xc>)
 800b676:	4601      	mov	r1, r0
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	f7ff bfd3 	b.w	800b624 <_raise_r>
 800b67e:	bf00      	nop
 800b680:	2000001c 	.word	0x2000001c

0800b684 <_kill_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	@ (800b6a4 <_kill_r+0x20>)
 800b688:	2300      	movs	r3, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	f7f6 f8d3 	bl	800183c <_kill>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	d102      	bne.n	800b6a0 <_kill_r+0x1c>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	b103      	cbz	r3, 800b6a0 <_kill_r+0x1c>
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000510 	.word	0x20000510

0800b6a8 <_getpid_r>:
 800b6a8:	f7f6 b8c0 	b.w	800182c <_getpid>

0800b6ac <__swhatbuf_r>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	b096      	sub	sp, #88	@ 0x58
 800b6b8:	4615      	mov	r5, r2
 800b6ba:	461e      	mov	r6, r3
 800b6bc:	da0d      	bge.n	800b6da <__swhatbuf_r+0x2e>
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6c4:	f04f 0100 	mov.w	r1, #0
 800b6c8:	bf14      	ite	ne
 800b6ca:	2340      	movne	r3, #64	@ 0x40
 800b6cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	6031      	str	r1, [r6, #0]
 800b6d4:	602b      	str	r3, [r5, #0]
 800b6d6:	b016      	add	sp, #88	@ 0x58
 800b6d8:	bd70      	pop	{r4, r5, r6, pc}
 800b6da:	466a      	mov	r2, sp
 800b6dc:	f000 f848 	bl	800b770 <_fstat_r>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	dbec      	blt.n	800b6be <__swhatbuf_r+0x12>
 800b6e4:	9901      	ldr	r1, [sp, #4]
 800b6e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b6ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b6ee:	4259      	negs	r1, r3
 800b6f0:	4159      	adcs	r1, r3
 800b6f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6f6:	e7eb      	b.n	800b6d0 <__swhatbuf_r+0x24>

0800b6f8 <__smakebuf_r>:
 800b6f8:	898b      	ldrh	r3, [r1, #12]
 800b6fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6fc:	079d      	lsls	r5, r3, #30
 800b6fe:	4606      	mov	r6, r0
 800b700:	460c      	mov	r4, r1
 800b702:	d507      	bpl.n	800b714 <__smakebuf_r+0x1c>
 800b704:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	6123      	str	r3, [r4, #16]
 800b70c:	2301      	movs	r3, #1
 800b70e:	6163      	str	r3, [r4, #20]
 800b710:	b003      	add	sp, #12
 800b712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b714:	ab01      	add	r3, sp, #4
 800b716:	466a      	mov	r2, sp
 800b718:	f7ff ffc8 	bl	800b6ac <__swhatbuf_r>
 800b71c:	9f00      	ldr	r7, [sp, #0]
 800b71e:	4605      	mov	r5, r0
 800b720:	4639      	mov	r1, r7
 800b722:	4630      	mov	r0, r6
 800b724:	f7fd fbb8 	bl	8008e98 <_malloc_r>
 800b728:	b948      	cbnz	r0, 800b73e <__smakebuf_r+0x46>
 800b72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72e:	059a      	lsls	r2, r3, #22
 800b730:	d4ee      	bmi.n	800b710 <__smakebuf_r+0x18>
 800b732:	f023 0303 	bic.w	r3, r3, #3
 800b736:	f043 0302 	orr.w	r3, r3, #2
 800b73a:	81a3      	strh	r3, [r4, #12]
 800b73c:	e7e2      	b.n	800b704 <__smakebuf_r+0xc>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	6020      	str	r0, [r4, #0]
 800b742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	9b01      	ldr	r3, [sp, #4]
 800b74a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b74e:	b15b      	cbz	r3, 800b768 <__smakebuf_r+0x70>
 800b750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b754:	4630      	mov	r0, r6
 800b756:	f000 f81d 	bl	800b794 <_isatty_r>
 800b75a:	b128      	cbz	r0, 800b768 <__smakebuf_r+0x70>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	f043 0301 	orr.w	r3, r3, #1
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	431d      	orrs	r5, r3
 800b76c:	81a5      	strh	r5, [r4, #12]
 800b76e:	e7cf      	b.n	800b710 <__smakebuf_r+0x18>

0800b770 <_fstat_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d07      	ldr	r5, [pc, #28]	@ (800b790 <_fstat_r+0x20>)
 800b774:	2300      	movs	r3, #0
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	4611      	mov	r1, r2
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	f7f6 f8bd 	bl	80018fc <_fstat>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d102      	bne.n	800b78c <_fstat_r+0x1c>
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	b103      	cbz	r3, 800b78c <_fstat_r+0x1c>
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	bd38      	pop	{r3, r4, r5, pc}
 800b78e:	bf00      	nop
 800b790:	20000510 	.word	0x20000510

0800b794 <_isatty_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4d06      	ldr	r5, [pc, #24]	@ (800b7b0 <_isatty_r+0x1c>)
 800b798:	2300      	movs	r3, #0
 800b79a:	4604      	mov	r4, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	f7f6 f8bc 	bl	800191c <_isatty>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_isatty_r+0x1a>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_isatty_r+0x1a>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20000510 	.word	0x20000510

0800b7b4 <_init>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr

0800b7c0 <_fini>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	bf00      	nop
 800b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c6:	bc08      	pop	{r3}
 800b7c8:	469e      	mov	lr, r3
 800b7ca:	4770      	bx	lr
