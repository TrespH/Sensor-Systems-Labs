
IR_P1_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003830  08003830  00005084  2**0
                  CONTENTS
  4 .ARM          00000008  08003830  08003830  00004830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003838  08003838  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003838  08003838  00004838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800383c  0800383c  0000483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08003840  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000084  080038c4  00005084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080038c4  0000524c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089f9  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ea  00000000  00000000  0000daad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0000f398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b7  00000000  00000000  0000fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015be0  00000000  00000000  000100d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a59  00000000  00000000  00025cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854e8  00000000  00000000  0002f710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4bf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000227c  00000000  00000000  000b4c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b6eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037b4 	.word	0x080037b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080037b4 	.word	0x080037b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <DWT_Delay_Init+0x58>)
 800058a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800058e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	4a10      	ldr	r2, [pc, #64]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800059a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <DWT_Delay_Init+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005a2:	f023 0301 	bic.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ba:	bf00      	nop
    __ASM volatile ("NOP");
 80005bc:	bf00      	nop
    __ASM volatile ("NOP");
 80005be:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005c8:	2300      	movs	r3, #0
 80005ca:	e000      	b.n	80005ce <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005cc:	2301      	movs	r3, #1
    }
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000edf0 	.word	0xe000edf0
 80005dc:	e0001000 	.word	0xe0001000

080005e0 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <DWT_Delay_us+0x48>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80005ee:	f001 fc99 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <DWT_Delay_us+0x4c>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	0c9b      	lsrs	r3, r3, #18
 80005fc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000608:	bf00      	nop
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <DWT_Delay_us+0x48>)
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	429a      	cmp	r2, r3
 800061a:	d3f6      	bcc.n	800060a <DWT_Delay_us+0x2a>
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	431bde83 	.word	0x431bde83

08000630 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000634:	2201      	movs	r2, #1
 8000636:	2102      	movs	r1, #2
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <lcd_enable+0x28>)
 800063a:	f000 fff5 	bl	8001628 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800063e:	2032      	movs	r0, #50	@ 0x32
 8000640:	f7ff ffce 	bl	80005e0 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2102      	movs	r1, #2
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <lcd_enable+0x28>)
 800064a:	f000 ffed 	bl	8001628 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800064e:	2032      	movs	r0, #50	@ 0x32
 8000650:	f7ff ffc6 	bl	80005e0 <DWT_Delay_us>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400

0800065c <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000674:	4816      	ldr	r0, [pc, #88]	@ (80006d0 <lcd_write4+0x74>)
 8000676:	f000 ffd7 	bl	8001628 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	105b      	asrs	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068c:	4810      	ldr	r0, [pc, #64]	@ (80006d0 <lcd_write4+0x74>)
 800068e:	f000 ffcb 	bl	8001628 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	109b      	asrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <lcd_write4+0x74>)
 80006a6:	f000 ffbf 	bl	8001628 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	10db      	asrs	r3, r3, #3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <lcd_write4+0x74>)
 80006be:	f000 ffb3 	bl	8001628 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 80006c2:	f7ff ffb5 	bl	8000630 <lcd_enable>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400

080006d4 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	091b      	lsrs	r3, r3, #4
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffb9 	bl	800065c <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb5 	bl	800065c <lcd_write4>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <lcd_command+0x24>)
 800070c:	f000 ff8c 	bl	8001628 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffde 	bl	80006d4 <lcd_write>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020400 	.word	0x40020400

08000724 <lcd_clear>:

void lcd_clear(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff ffe7 	bl	80006fc <lcd_command>
	DWT_Delay_us(2000);
 800072e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000732:	f7ff ff55 	bl	80005e0 <DWT_Delay_us>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <lcd_data+0x24>)
 800074c:	f000 ff6c 	bl	8001628 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffbe 	bl	80006d4 <lcd_write>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020400 	.word	0x40020400

08000764 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3301      	adds	r3, #1
 8000778:	79ba      	ldrb	r2, [r7, #6]
 800077a:	3201      	adds	r2, #1
 800077c:	fb02 f303 	mul.w	r3, r2, r3
 8000780:	2b4f      	cmp	r3, #79	@ 0x4f
 8000782:	dc10      	bgt.n	80007a6 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	461a      	mov	r2, r3
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	4413      	add	r3, r2
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	b2da      	uxtb	r2, r3
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4413      	add	r3, r2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffab 	bl	80006fc <lcd_command>
	}
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fd12 	bl	80001e0 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 80007c0:	e006      	b.n	80007d0 <lcd_print+0x22>
		lcd_data(*string++);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ffb6 	bl	800073c <lcd_data>
	while (size--){
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	1e5a      	subs	r2, r3, #1
 80007d4:	60fa      	str	r2, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1f3      	bne.n	80007c2 <lcd_print+0x14>
	}
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <lcd_println+0x6c>)
 80007f2:	f107 0408 	add.w	r4, r7, #8
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	682b      	ldr	r3, [r5, #0]
 80007fe:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fced 	bl	80001e0 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	2b10      	cmp	r3, #16
 800080e:	dd0c      	ble.n	800082a <lcd_println+0x46>
		size = 16;
 8000810:	2310      	movs	r3, #16
 8000812:	61fb      	str	r3, [r7, #28]

	while (size--){
 8000814:	e009      	b.n	800082a <lcd_println+0x46>
		line[size] = string[size];
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	7819      	ldrb	r1, [r3, #0]
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	4413      	add	r3, r2
 8000826:	460a      	mov	r2, r1
 8000828:	701a      	strb	r2, [r3, #0]
	while (size--){
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	61fa      	str	r2, [r7, #28]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f0      	bne.n	8000816 <lcd_println+0x32>
	}
	setCursor(0, row);
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	4619      	mov	r1, r3
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ff93 	bl	8000764 <setCursor>
	lcd_print(line);
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffb3 	bl	80007ae <lcd_print>
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bdb0      	pop	{r4, r5, r7, pc}
 8000850:	080037cc 	.word	0x080037cc

08000854 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	b25b      	sxtb	r3, r3
 800086e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff40 	bl	80006fc <lcd_command>
	for (int i = 0; i<8; i++){
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e009      	b.n	8000896 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff56 	bl	800073c <lcd_data>
	for (int i = 0; i<8; i++){
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b07      	cmp	r3, #7
 800089a:	ddf2      	ble.n	8000882 <writeCustomChar+0x2e>
	}
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 80008ac:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <loadCustomChars+0x30>)
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff ffd0 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80008b4:	4909      	ldr	r1, [pc, #36]	@ (80008dc <loadCustomChars+0x34>)
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff ffcc 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80008bc:	4908      	ldr	r1, [pc, #32]	@ (80008e0 <loadCustomChars+0x38>)
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff ffc8 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80008c4:	4907      	ldr	r1, [pc, #28]	@ (80008e4 <loadCustomChars+0x3c>)
 80008c6:	2004      	movs	r0, #4
 80008c8:	f7ff ffc4 	bl	8000854 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80008cc:	4906      	ldr	r1, [pc, #24]	@ (80008e8 <loadCustomChars+0x40>)
 80008ce:	2005      	movs	r0, #5
 80008d0:	f7ff ffc0 	bl	8000854 <writeCustomChar>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000010 	.word	0x20000010
 80008e4:	20000018 	.word	0x20000018
 80008e8:	20000020 	.word	0x20000020

080008ec <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80008f0:	2032      	movs	r0, #50	@ 0x32
 80008f2:	f000 fb4d 	bl	8000f90 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2104      	movs	r1, #4
 80008fa:	4824      	ldr	r0, [pc, #144]	@ (800098c <lcd_initialize+0xa0>)
 80008fc:	f000 fe94 	bl	8001628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	4821      	ldr	r0, [pc, #132]	@ (800098c <lcd_initialize+0xa0>)
 8000906:	f000 fe8f 	bl	8001628 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 800090a:	f7ff fe39 	bl	8000580 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 800090e:	2003      	movs	r0, #3
 8000910:	f7ff fea4 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 8000914:	2005      	movs	r0, #5
 8000916:	f000 fb3b 	bl	8000f90 <HAL_Delay>
	lcd_write4(0x03);
 800091a:	2003      	movs	r0, #3
 800091c:	f7ff fe9e 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 8000920:	2005      	movs	r0, #5
 8000922:	f000 fb35 	bl	8000f90 <HAL_Delay>
	lcd_write4(0x03);
 8000926:	2003      	movs	r0, #3
 8000928:	f7ff fe98 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 800092c:	2005      	movs	r0, #5
 800092e:	f000 fb2f 	bl	8000f90 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fe92 	bl	800065c <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8000938:	2028      	movs	r0, #40	@ 0x28
 800093a:	f7ff fecb 	bl	80006d4 <lcd_write>
	HAL_Delay(5);
 800093e:	2005      	movs	r0, #5
 8000940:	f000 fb26 	bl	8000f90 <HAL_Delay>
	lcd_write(0x08); //display off;
 8000944:	2008      	movs	r0, #8
 8000946:	f7ff fec5 	bl	80006d4 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fec2 	bl	80006d4 <lcd_write>
	HAL_Delay(5);
 8000950:	2005      	movs	r0, #5
 8000952:	f000 fb1d 	bl	8000f90 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 8000956:	2006      	movs	r0, #6
 8000958:	f7ff febc 	bl	80006d4 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 800095c:	2201      	movs	r2, #1
 800095e:	2110      	movs	r1, #16
 8000960:	480b      	ldr	r0, [pc, #44]	@ (8000990 <lcd_initialize+0xa4>)
 8000962:	f000 fe61 	bl	8001628 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <lcd_initialize+0xa8>)
 8000968:	220c      	movs	r2, #12
 800096a:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <lcd_initialize+0xa8>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff feaf 	bl	80006d4 <lcd_write>
	lcd_write(0x02); //go home
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff feac 	bl	80006d4 <lcd_write>
	HAL_Delay(2);
 800097c:	2002      	movs	r0, #2
 800097e:	f000 fb07 	bl	8000f90 <HAL_Delay>
	loadCustomChars();
 8000982:	f7ff ff91 	bl	80008a8 <loadCustomChars>

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400
 8000990:	40020000 	.word	0x40020000
 8000994:	200000a0 	.word	0x200000a0

08000998 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2110      	movs	r1, #16
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <lcd_backlight_ON+0x14>)
 80009a2:	f000 fe41 	bl	8001628 <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40020000 	.word	0x40020000

080009b0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	sprintf(&string, "%c", size[0]);	//convert data into a char
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_UART_RxCpltCallback+0x44>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	490e      	ldr	r1, [pc, #56]	@ (80009f8 <HAL_UART_RxCpltCallback+0x48>)
 80009c0:	480e      	ldr	r0, [pc, #56]	@ (80009fc <HAL_UART_RxCpltCallback+0x4c>)
 80009c2:	f002 fa57 	bl	8002e74 <siprintf>
	lcd_clear();						// Clear the display
 80009c6:	f7ff fead 	bl	8000724 <lcd_clear>
	lcd_println(string, row);			// Print the new word
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <HAL_UART_RxCpltCallback+0x50>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	480a      	ldr	r0, [pc, #40]	@ (80009fc <HAL_UART_RxCpltCallback+0x4c>)
 80009d4:	f7ff ff06 	bl	80007e4 <lcd_println>
	memset(string, 0, sizeof(string));
 80009d8:	2208      	movs	r2, #8
 80009da:	2100      	movs	r1, #0
 80009dc:	4807      	ldr	r0, [pc, #28]	@ (80009fc <HAL_UART_RxCpltCallback+0x4c>)
 80009de:	f002 fa69 	bl	8002eb4 <memset>
	HAL_UART_Receive_IT(&huart2, size, 1); // Proceed with getting the length of the new data transmission
 80009e2:	2201      	movs	r2, #1
 80009e4:	4903      	ldr	r1, [pc, #12]	@ (80009f4 <HAL_UART_RxCpltCallback+0x44>)
 80009e6:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <HAL_UART_RxCpltCallback+0x54>)
 80009e8:	f001 fb20 	bl	800202c <HAL_UART_Receive_IT>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000ec 	.word	0x200000ec
 80009f8:	080037e0 	.word	0x080037e0
 80009fc:	200000f0 	.word	0x200000f0
 8000a00:	200000f8 	.word	0x200000f8
 8000a04:	200000a4 	.word	0x200000a4

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f000 fa4e 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f816 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f000 f8aa 	bl	8000b6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a18:	f000 f87e 	bl	8000b18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_initialize();
 8000a1c:	f7ff ff66 	bl	80008ec <lcd_initialize>
  lcd_backlight_ON();
 8000a20:	f7ff ffba 	bl	8000998 <lcd_backlight_ON>
  lcd_clear();
 8000a24:	f7ff fe7e 	bl	8000724 <lcd_clear>
  HAL_UART_Receive_IT(&huart2, size, 1); // Receive the first byte
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4903      	ldr	r1, [pc, #12]	@ (8000a38 <main+0x30>)
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <main+0x34>)
 8000a2e:	f001 fafd 	bl	800202c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a32:	bf00      	nop
 8000a34:	e7fd      	b.n	8000a32 <main+0x2a>
 8000a36:	bf00      	nop
 8000a38:	200000ec 	.word	0x200000ec
 8000a3c:	200000a4 	.word	0x200000a4

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	@ 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2230      	movs	r2, #48	@ 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fa30 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	4a28      	ldr	r2, [pc, #160]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <SystemClock_Config+0xd0>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <SystemClock_Config+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a8c:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <SystemClock_Config+0xd4>)
 8000a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <SystemClock_Config+0xd4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000abc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fdc6 	bl	800165c <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ad6:	f000 f8bf 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2102      	movs	r1, #2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 f828 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b02:	f000 f8a9 	bl	8000c58 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	@ 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <MX_USART2_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2204      	movs	r2, #4
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f001 fa1c 	bl	8001f8c <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f87d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000a4 	.word	0x200000a4
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a30      	ldr	r2, [pc, #192]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b2e      	ldr	r3, [pc, #184]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a29      	ldr	r2, [pc, #164]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b27      	ldr	r3, [pc, #156]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <MX_GPIO_Init+0xe0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2130      	movs	r1, #48	@ 0x30
 8000bf6:	4816      	ldr	r0, [pc, #88]	@ (8000c50 <MX_GPIO_Init+0xe4>)
 8000bf8:	f000 fd16 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000c02:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <MX_GPIO_Init+0xe8>)
 8000c04:	f000 fd10 	bl	8001628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000c08:	2330      	movs	r3, #48	@ 0x30
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <MX_GPIO_Init+0xe4>)
 8000c20:	f000 fb7e 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000c24:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000c28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_GPIO_Init+0xe8>)
 8000c3e:	f000 fb6f 	bl	8001320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fa68 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <HAL_UART_MspInit+0x94>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d133      	bne.n	8000d3e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_UART_MspInit+0x98>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <HAL_UART_MspInit+0x9c>)
 8000d2a:	f000 faf9 	bl	8001320 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2026      	movs	r0, #38	@ 0x26
 8000d34:	f000 fa2b 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d38:	2026      	movs	r0, #38	@ 0x26
 8000d3a:	f000 fa44 	bl	80011c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000daa:	f000 f8d1 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <USART2_IRQHandler+0x10>)
 8000dba:	f001 f95d 	bl	8002078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000a4 	.word	0x200000a4

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f002 f864 	bl	8002ec4 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20018000 	.word	0x20018000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	200000fc 	.word	0x200000fc
 8000e30:	20000250 	.word	0x20000250

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e5c:	f7ff ffea 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f002 f823 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fdbd 	bl	8000a08 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000e9c:	08003840 	.word	0x08003840
  ldr r2, =_sbss
 8000ea0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ea4:	2000024c 	.word	0x2000024c

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f94f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fec0 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f967 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f92f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000028 	.word	0x20000028
 8000f48:	20000030 	.word	0x20000030
 8000f4c:	2000002c 	.word	0x2000002c

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000030 	.word	0x20000030
 8000f74:	20000100 	.word	0x20000100

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000100 	.word	0x20000100

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000030 	.word	0x20000030

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff feb6 	bl	8000f78 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d008      	beq.n	800122c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e052      	b.n	80012d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0216 	bic.w	r2, r2, #22
 800123a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800124a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <HAL_DMA_Abort+0x62>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001258:	2b00      	cmp	r3, #0
 800125a:	d007      	beq.n	800126c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127c:	e013      	b.n	80012a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127e:	f7ff fe7b 	bl	8000f78 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b05      	cmp	r3, #5
 800128a:	d90c      	bls.n	80012a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2220      	movs	r2, #32
 8001290:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2203      	movs	r2, #3
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e015      	b.n	80012d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1e4      	bne.n	800127e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b8:	223f      	movs	r2, #63	@ 0x3f
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d004      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e00c      	b.n	8001312 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2205      	movs	r2, #5
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	e159      	b.n	80015f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800133c:	2201      	movs	r2, #1
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 8148 	bne.w	80015ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d005      	beq.n	8001372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136e:	2b02      	cmp	r3, #2
 8001370:	d130      	bne.n	80013d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 0201 	and.w	r2, r3, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d017      	beq.n	8001410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d123      	bne.n	8001464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	69b9      	ldr	r1, [r7, #24]
 8001460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0203 	and.w	r2, r3, #3
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a2 	beq.w	80015ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <HAL_GPIO_Init+0x2e8>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a56      	ldr	r2, [pc, #344]	@ (8001608 <HAL_GPIO_Init+0x2e8>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b54      	ldr	r3, [pc, #336]	@ (8001608 <HAL_GPIO_Init+0x2e8>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c2:	4a52      	ldr	r2, [pc, #328]	@ (800160c <HAL_GPIO_Init+0x2ec>)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	3302      	adds	r3, #2
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a49      	ldr	r2, [pc, #292]	@ (8001610 <HAL_GPIO_Init+0x2f0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x202>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a48      	ldr	r2, [pc, #288]	@ (8001614 <HAL_GPIO_Init+0x2f4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x1fe>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <HAL_GPIO_Init+0x2f8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x1fa>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a46      	ldr	r2, [pc, #280]	@ (800161c <HAL_GPIO_Init+0x2fc>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x1f6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a45      	ldr	r2, [pc, #276]	@ (8001620 <HAL_GPIO_Init+0x300>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x1f2>
 800150e:	2304      	movs	r3, #4
 8001510:	e008      	b.n	8001524 <HAL_GPIO_Init+0x204>
 8001512:	2307      	movs	r3, #7
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x204>
 8001516:	2303      	movs	r3, #3
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x204>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x204>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x204>
 8001522:	2300      	movs	r3, #0
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001534:	4935      	ldr	r1, [pc, #212]	@ (800160c <HAL_GPIO_Init+0x2ec>)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001566:	4a2f      	ldr	r2, [pc, #188]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800156c:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_GPIO_Init+0x304>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001590:	4a24      	ldr	r2, [pc, #144]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <HAL_GPIO_Init+0x304>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <HAL_GPIO_Init+0x304>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_GPIO_Init+0x304>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001624 <HAL_GPIO_Init+0x304>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	2b0f      	cmp	r3, #15
 80015f4:	f67f aea2 	bls.w	800133c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3724      	adds	r7, #36	@ 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40013800 	.word	0x40013800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400
 8001618:	40020800 	.word	0x40020800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40013c00 	.word	0x40013c00

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e267      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d075      	beq.n	8001766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800167a:	4b88      	ldr	r3, [pc, #544]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d00c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001686:	4b85      	ldr	r3, [pc, #532]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800168e:	2b08      	cmp	r3, #8
 8001690:	d112      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001692:	4b82      	ldr	r3, [pc, #520]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800169e:	d10b      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	4b7e      	ldr	r3, [pc, #504]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d05b      	beq.n	8001764 <HAL_RCC_OscConfig+0x108>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d157      	bne.n	8001764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e242      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x74>
 80016c2:	4b76      	ldr	r3, [pc, #472]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a75      	ldr	r2, [pc, #468]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e01d      	b.n	800170c <HAL_RCC_OscConfig+0xb0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x98>
 80016da:	4b70      	ldr	r3, [pc, #448]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6f      	ldr	r2, [pc, #444]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b6d      	ldr	r3, [pc, #436]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a6c      	ldr	r2, [pc, #432]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0xb0>
 80016f4:	4b69      	ldr	r3, [pc, #420]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a68      	ldr	r2, [pc, #416]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b66      	ldr	r3, [pc, #408]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a65      	ldr	r2, [pc, #404]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800170a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fc30 	bl	8000f78 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fc2c 	bl	8000f78 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e207      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b5b      	ldr	r3, [pc, #364]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0xc0>
 800173a:	e014      	b.n	8001766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fc1c 	bl	8000f78 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fc18 	bl	8000f78 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	@ 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1f3      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	4b51      	ldr	r3, [pc, #324]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0xe8>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001772:	4b4a      	ldr	r3, [pc, #296]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001786:	2b08      	cmp	r3, #8
 8001788:	d11c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178a:	4b44      	ldr	r3, [pc, #272]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	4b41      	ldr	r3, [pc, #260]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x152>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e1c7      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4937      	ldr	r1, [pc, #220]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	e03a      	b.n	800183a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017cc:	4b34      	ldr	r3, [pc, #208]	@ (80018a0 <HAL_RCC_OscConfig+0x244>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fbd1 	bl	8000f78 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff fbcd 	bl	8000f78 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1a8      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b28      	ldr	r3, [pc, #160]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4925      	ldr	r1, [pc, #148]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <HAL_RCC_OscConfig+0x244>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fbb0 	bl	8000f78 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff fbac 	bl	8000f78 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e187      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d036      	beq.n	80018b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <HAL_RCC_OscConfig+0x248>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fb90 	bl	8000f78 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff fb8c 	bl	8000f78 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e167      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RCC_OscConfig+0x240>)
 8001870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x200>
 800187a:	e01b      	b.n	80018b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_RCC_OscConfig+0x248>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff fb79 	bl	8000f78 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	e00e      	b.n	80018a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188a:	f7ff fb75 	bl	8000f78 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d907      	bls.n	80018a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e150      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
 800189c:	40023800 	.word	0x40023800
 80018a0:	42470000 	.word	0x42470000
 80018a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a8:	4b88      	ldr	r3, [pc, #544]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80018aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ea      	bne.n	800188a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8097 	beq.w	80019f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c6:	4b81      	ldr	r3, [pc, #516]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10f      	bne.n	80018f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b7d      	ldr	r3, [pc, #500]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	4a7c      	ldr	r2, [pc, #496]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e2:	4b7a      	ldr	r3, [pc, #488]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4b77      	ldr	r3, [pc, #476]	@ (8001ad0 <HAL_RCC_OscConfig+0x474>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d118      	bne.n	8001930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fe:	4b74      	ldr	r3, [pc, #464]	@ (8001ad0 <HAL_RCC_OscConfig+0x474>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a73      	ldr	r2, [pc, #460]	@ (8001ad0 <HAL_RCC_OscConfig+0x474>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190a:	f7ff fb35 	bl	8000f78 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7ff fb31 	bl	8000f78 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e10c      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad0 <HAL_RCC_OscConfig+0x474>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x2ea>
 8001938:	4b64      	ldr	r3, [pc, #400]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193c:	4a63      	ldr	r2, [pc, #396]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	@ 0x70
 8001944:	e01c      	b.n	8001980 <HAL_RCC_OscConfig+0x324>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x30c>
 800194e:	4b5f      	ldr	r3, [pc, #380]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001952:	4a5e      	ldr	r2, [pc, #376]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6713      	str	r3, [r2, #112]	@ 0x70
 800195a:	4b5c      	ldr	r3, [pc, #368]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195e:	4a5b      	ldr	r2, [pc, #364]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6713      	str	r3, [r2, #112]	@ 0x70
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0x324>
 8001968:	4b58      	ldr	r3, [pc, #352]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196c:	4a57      	ldr	r2, [pc, #348]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	@ 0x70
 8001974:	4b55      	ldr	r3, [pc, #340]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001978:	4a54      	ldr	r2, [pc, #336]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 800197a:	f023 0304 	bic.w	r3, r3, #4
 800197e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff faf6 	bl	8000f78 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff faf2 	bl	8000f78 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0cb      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a6:	4b49      	ldr	r3, [pc, #292]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0ee      	beq.n	8001990 <HAL_RCC_OscConfig+0x334>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fae0 	bl	8000f78 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019bc:	f7ff fadc 	bl	8000f78 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e0b5      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d2:	4b3e      	ldr	r3, [pc, #248]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ee      	bne.n	80019bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e4:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	4a38      	ldr	r2, [pc, #224]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80019ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a1 	beq.w	8001b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d05c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d141      	bne.n	8001a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_RCC_OscConfig+0x478>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fab0 	bl	8000f78 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff faac 	bl	8000f78 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e087      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a48:	019b      	lsls	r3, r3, #6
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	3b01      	subs	r3, #1
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	491b      	ldr	r1, [pc, #108]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_RCC_OscConfig+0x478>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fa85 	bl	8000f78 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff fa81 	bl	8000f78 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e05c      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x416>
 8001a90:	e054      	b.n	8001b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <HAL_RCC_OscConfig+0x478>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fa6e 	bl	8000f78 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fa6a 	bl	8000f78 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e045      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_RCC_OscConfig+0x470>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x444>
 8001abe:	e03d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e038      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_RCC_OscConfig+0x4ec>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d028      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d121      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d11a      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d111      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0cc      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b68      	ldr	r3, [pc, #416]	@ (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d90c      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b65      	ldr	r3, [pc, #404]	@ (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b63      	ldr	r3, [pc, #396]	@ (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0b8      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba0:	4b59      	ldr	r3, [pc, #356]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a58      	ldr	r2, [pc, #352]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001baa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb8:	4b53      	ldr	r3, [pc, #332]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b50      	ldr	r3, [pc, #320]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	494d      	ldr	r1, [pc, #308]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d044      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b47      	ldr	r3, [pc, #284]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d119      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e07f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e067      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b37      	ldr	r3, [pc, #220]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4934      	ldr	r1, [pc, #208]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f99c 	bl	8000f78 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f998 	bl	8000f78 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e04f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d20c      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e032      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4916      	ldr	r1, [pc, #88]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	490e      	ldr	r1, [pc, #56]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd2:	f000 f821 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	490a      	ldr	r1, [pc, #40]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	5ccb      	ldrb	r3, [r1, r3]
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f8fc 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	080037e4 	.word	0x080037e4
 8001d10:	20000028 	.word	0x20000028
 8001d14:	2000002c 	.word	0x2000002c

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d1c:	b094      	sub	sp, #80	@ 0x50
 8001d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d30:	4b79      	ldr	r3, [pc, #484]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d00d      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x40>
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	f200 80e1 	bhi.w	8001f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x34>
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d4a:	e0db      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b73      	ldr	r3, [pc, #460]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d50:	e0db      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d52:	4b73      	ldr	r3, [pc, #460]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d56:	e0d8      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d62:	4b6d      	ldr	r3, [pc, #436]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d063      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	2200      	movs	r2, #0
 8001d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d82:	2300      	movs	r3, #0
 8001d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	f04f 0000 	mov.w	r0, #0
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	0159      	lsls	r1, r3, #5
 8001d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9c:	0150      	lsls	r0, r2, #5
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4621      	mov	r1, r4
 8001da4:	1a51      	subs	r1, r2, r1
 8001da6:	6139      	str	r1, [r7, #16]
 8001da8:	4629      	mov	r1, r5
 8001daa:	eb63 0301 	sbc.w	r3, r3, r1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dbc:	4659      	mov	r1, fp
 8001dbe:	018b      	lsls	r3, r1, #6
 8001dc0:	4651      	mov	r1, sl
 8001dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dc6:	4651      	mov	r1, sl
 8001dc8:	018a      	lsls	r2, r1, #6
 8001dca:	4651      	mov	r1, sl
 8001dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8001dd0:	4659      	mov	r1, fp
 8001dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dea:	4690      	mov	r8, r2
 8001dec:	4699      	mov	r9, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	eb18 0303 	adds.w	r3, r8, r3
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	462b      	mov	r3, r5
 8001df8:	eb49 0303 	adc.w	r3, r9, r3
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	024b      	lsls	r3, r1, #9
 8001e0e:	4621      	mov	r1, r4
 8001e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e14:	4621      	mov	r1, r4
 8001e16:	024a      	lsls	r2, r1, #9
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e1e:	2200      	movs	r2, #0
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e28:	f7fe fa32 	bl	8000290 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e34:	e058      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4611      	mov	r1, r2
 8001e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e50:	4642      	mov	r2, r8
 8001e52:	464b      	mov	r3, r9
 8001e54:	f04f 0000 	mov.w	r0, #0
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	0159      	lsls	r1, r3, #5
 8001e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e62:	0150      	lsls	r0, r2, #5
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4641      	mov	r1, r8
 8001e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e6e:	4649      	mov	r1, r9
 8001e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e88:	ebb2 040a 	subs.w	r4, r2, sl
 8001e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	00eb      	lsls	r3, r5, #3
 8001e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e9e:	00e2      	lsls	r2, r4, #3
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	4643      	mov	r3, r8
 8001ea6:	18e3      	adds	r3, r4, r3
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	464b      	mov	r3, r9
 8001eac:	eb45 0303 	adc.w	r3, r5, r3
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	028b      	lsls	r3, r1, #10
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec8:	4621      	mov	r1, r4
 8001eca:	028a      	lsls	r2, r1, #10
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	61fa      	str	r2, [r7, #28]
 8001ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001edc:	f7fe f9d8 	bl	8000290 <__aeabi_uldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f02:	e002      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3750      	adds	r7, #80	@ 0x50
 8001f10:	46bd      	mov	sp, r7
 8001f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	00f42400 	.word	0x00f42400
 8001f20:	007a1200 	.word	0x007a1200

08001f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000028 	.word	0x20000028

08001f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f40:	f7ff fff0 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0a9b      	lsrs	r3, r3, #10
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4903      	ldr	r1, [pc, #12]	@ (8001f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	080037f4 	.word	0x080037f4

08001f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f68:	f7ff ffdc 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0b5b      	lsrs	r3, r3, #13
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4903      	ldr	r1, [pc, #12]	@ (8001f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	080037f4 	.word	0x080037f4

08001f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e042      	b.n	8002024 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fe7e 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fcdb 	bl	800298c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d112      	bne.n	800206c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_UART_Receive_IT+0x26>
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00b      	b.n	800206e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	461a      	mov	r2, r3
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 faba 	bl	80025dc <UART_Start_Receive_IT>
 8002068:	4603      	mov	r3, r0
 800206a:	e000      	b.n	800206e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800206c:	2302      	movs	r3, #2
  }
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0ba      	sub	sp, #232	@ 0xe8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_UART_IRQHandler+0x66>
 80020ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fb99 	bl	800280e <UART_Receive_IT>
      return;
 80020dc:	e25b      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80de 	beq.w	80022a4 <HAL_UART_IRQHandler+0x22c>
 80020e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80d1 	beq.w	80022a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_UART_IRQHandler+0xae>
 800210e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_UART_IRQHandler+0xd2>
 8002132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f043 0202 	orr.w	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800214a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_UART_IRQHandler+0xf6>
 8002156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800216e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d011      	beq.n	800219e <HAL_UART_IRQHandler+0x126>
 800217a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f043 0208 	orr.w	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 81f2 	beq.w	800258c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_UART_IRQHandler+0x14e>
 80021b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fb24 	bl	800280e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d0:	2b40      	cmp	r3, #64	@ 0x40
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_UART_IRQHandler+0x17a>
 80021ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d04f      	beq.n	8002292 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa2c 	bl	8002650 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002202:	2b40      	cmp	r3, #64	@ 0x40
 8002204:	d141      	bne.n	800228a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3314      	adds	r3, #20
 800220c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002214:	e853 3f00 	ldrex	r3, [r3]
 8002218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800221c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3314      	adds	r3, #20
 800222e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800223e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002242:	e841 2300 	strex	r3, r2, [r1]
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800224a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1d9      	bne.n	8002206 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d013      	beq.n	8002282 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225e:	4a7e      	ldr	r2, [pc, #504]	@ (8002458 <HAL_UART_IRQHandler+0x3e0>)
 8002260:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f837 	bl	80012da <HAL_DMA_Abort_IT>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800227c:	4610      	mov	r0, r2
 800227e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002280:	e00e      	b.n	80022a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f994 	bl	80025b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002288:	e00a      	b.n	80022a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f990 	bl	80025b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	e006      	b.n	80022a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f98c 	bl	80025b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800229e:	e175      	b.n	800258c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a0:	bf00      	nop
    return;
 80022a2:	e173      	b.n	800258c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 814f 	bne.w	800254c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8148 	beq.w	800254c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8141 	beq.w	800254c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ea:	2b40      	cmp	r3, #64	@ 0x40
 80022ec:	f040 80b6 	bne.w	800245c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 8145 	beq.w	8002590 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800230a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800230e:	429a      	cmp	r2, r3
 8002310:	f080 813e 	bcs.w	8002590 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800231a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002326:	f000 8088 	beq.w	800243a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002338:	e853 3f00 	ldrex	r3, [r3]
 800233c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002340:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800235a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002362:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002366:	e841 2300 	strex	r3, r2, [r1]
 800236a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1d9      	bne.n	800232a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3314      	adds	r3, #20
 8002396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800239a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800239e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80023a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023a6:	e841 2300 	strex	r3, r2, [r1]
 80023aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80023ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e1      	bne.n	8002376 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3314      	adds	r3, #20
 80023d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023de:	e841 2300 	strex	r3, r2, [r1]
 80023e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e3      	bne.n	80023b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002402:	e853 3f00 	ldrex	r3, [r3]
 8002406:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800240a:	f023 0310 	bic.w	r3, r3, #16
 800240e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800241c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800241e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002420:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002424:	e841 2300 	strex	r3, r2, [r1]
 8002428:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800242a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e3      	bne.n	80023f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fee0 	bl	80011fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002448:	b29b      	uxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8b7 	bl	80025c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002456:	e09b      	b.n	8002590 <HAL_UART_IRQHandler+0x518>
 8002458:	08002717 	.word	0x08002717
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002464:	b29b      	uxth	r3, r3
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 808e 	beq.w	8002594 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8089 	beq.w	8002594 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002498:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80024a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80024a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e3      	bne.n	8002482 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	623b      	str	r3, [r7, #32]
   return(result);
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3314      	adds	r3, #20
 80024da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024de:	633a      	str	r2, [r7, #48]	@ 0x30
 80024e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e3      	bne.n	80024ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	e853 3f00 	ldrex	r3, [r3]
 800250e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0310 	bic.w	r3, r3, #16
 8002516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002524:	61fa      	str	r2, [r7, #28]
 8002526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002528:	69b9      	ldr	r1, [r7, #24]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	e841 2300 	strex	r3, r2, [r1]
 8002530:	617b      	str	r3, [r7, #20]
   return(result);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e3      	bne.n	8002500 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800253e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f83d 	bl	80025c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800254a:	e023      	b.n	8002594 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800254c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <HAL_UART_IRQHandler+0x4f4>
 8002558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800255c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f8ea 	bl	800273e <UART_Transmit_IT>
    return;
 800256a:	e014      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800256c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <HAL_UART_IRQHandler+0x51e>
 8002578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f92a 	bl	80027de <UART_EndTransmit_IT>
    return;
 800258a:	e004      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
    return;
 800258c:	bf00      	nop
 800258e:	e002      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
      return;
 8002590:	bf00      	nop
 8002592:	e000      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
      return;
 8002594:	bf00      	nop
  }
}
 8002596:	37e8      	adds	r7, #232	@ 0xe8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2222      	movs	r2, #34	@ 0x22
 8002606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002620:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002650:	b480      	push	{r7}
 8002652:	b095      	sub	sp, #84	@ 0x54
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002678:	643a      	str	r2, [r7, #64]	@ 0x40
 800267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800267e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3314      	adds	r3, #20
 8002692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	e853 3f00 	ldrex	r3, [r3]
 800269a:	61fb      	str	r3, [r7, #28]
   return(result);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3314      	adds	r3, #20
 80026aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e5      	bne.n	800268c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d119      	bne.n	80026fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	e853 3f00 	ldrex	r3, [r3]
 80026d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 0310 	bic.w	r3, r3, #16
 80026de:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	330c      	adds	r3, #12
 80026e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026e8:	61ba      	str	r2, [r7, #24]
 80026ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ec:	6979      	ldr	r1, [r7, #20]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	e841 2300 	strex	r3, r2, [r1]
 80026f4:	613b      	str	r3, [r7, #16]
   return(result);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e5      	bne.n	80026c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800270a:	bf00      	nop
 800270c:	3754      	adds	r7, #84	@ 0x54
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff3d 	bl	80025b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b21      	cmp	r3, #33	@ 0x21
 8002750:	d13e      	bne.n	80027d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275a:	d114      	bne.n	8002786 <UART_Transmit_IT+0x48>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d110      	bne.n	8002786 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	1c9a      	adds	r2, r3, #2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	621a      	str	r2, [r3, #32]
 8002784:	e008      	b.n	8002798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	1c59      	adds	r1, r3, #1
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6211      	str	r1, [r2, #32]
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4619      	mov	r1, r3
 80027a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fecc 	bl	800259c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b08c      	sub	sp, #48	@ 0x30
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b22      	cmp	r3, #34	@ 0x22
 8002820:	f040 80ae 	bne.w	8002980 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282c:	d117      	bne.n	800285e <UART_Receive_IT+0x50>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284c:	b29a      	uxth	r2, r3
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	1c9a      	adds	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
 800285c:	e026      	b.n	80028ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002870:	d007      	beq.n	8002882 <UART_Receive_IT+0x74>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <UART_Receive_IT+0x82>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e008      	b.n	80028a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800289c:	b2da      	uxtb	r2, r3
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d15d      	bne.n	800297c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0220 	bic.w	r2, r2, #32
 80028ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	2b01      	cmp	r3, #1
 8002904:	d135      	bne.n	8002972 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	330c      	adds	r3, #12
 8002912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	613b      	str	r3, [r7, #16]
   return(result);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f023 0310 	bic.w	r3, r3, #16
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292c:	623a      	str	r2, [r7, #32]
 800292e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	69f9      	ldr	r1, [r7, #28]
 8002932:	6a3a      	ldr	r2, [r7, #32]
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	61bb      	str	r3, [r7, #24]
   return(result);
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b10      	cmp	r3, #16
 800294c:	d10a      	bne.n	8002964 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fe2a 	bl	80025c4 <HAL_UARTEx_RxEventCallback>
 8002970:	e002      	b.n	8002978 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe f81c 	bl	80009b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e002      	b.n	8002982 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3730      	adds	r7, #48	@ 0x30
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800298c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002990:	b0c0      	sub	sp, #256	@ 0x100
 8002992:	af00      	add	r7, sp, #0
 8002994:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	68d9      	ldr	r1, [r3, #12]
 80029aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	ea40 0301 	orr.w	r3, r0, r1
 80029b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029e4:	f021 010c 	bic.w	r1, r1, #12
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029f2:	430b      	orrs	r3, r1
 80029f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a06:	6999      	ldr	r1, [r3, #24]
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	ea40 0301 	orr.w	r3, r0, r1
 8002a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b8f      	ldr	r3, [pc, #572]	@ (8002c58 <UART_SetConfig+0x2cc>)
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d005      	beq.n	8002a2c <UART_SetConfig+0xa0>
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b8d      	ldr	r3, [pc, #564]	@ (8002c5c <UART_SetConfig+0x2d0>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d104      	bne.n	8002a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a2c:	f7ff fa9a 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 8002a30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a34:	e003      	b.n	8002a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a36:	f7ff fa81 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a48:	f040 810c 	bne.w	8002c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a5e:	4622      	mov	r2, r4
 8002a60:	462b      	mov	r3, r5
 8002a62:	1891      	adds	r1, r2, r2
 8002a64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a66:	415b      	adcs	r3, r3
 8002a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a6e:	4621      	mov	r1, r4
 8002a70:	eb12 0801 	adds.w	r8, r2, r1
 8002a74:	4629      	mov	r1, r5
 8002a76:	eb43 0901 	adc.w	r9, r3, r1
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a8e:	4690      	mov	r8, r2
 8002a90:	4699      	mov	r9, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	eb18 0303 	adds.w	r3, r8, r3
 8002a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	eb49 0303 	adc.w	r3, r9, r3
 8002aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aba:	460b      	mov	r3, r1
 8002abc:	18db      	adds	r3, r3, r3
 8002abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	eb42 0303 	adc.w	r3, r2, r3
 8002ac6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ad0:	f7fd fbde 	bl	8000290 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4b61      	ldr	r3, [pc, #388]	@ (8002c60 <UART_SetConfig+0x2d4>)
 8002ada:	fba3 2302 	umull	r2, r3, r3, r2
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	011c      	lsls	r4, r3, #4
 8002ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002aec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002afc:	415b      	adcs	r3, r3
 8002afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b04:	4641      	mov	r1, r8
 8002b06:	eb12 0a01 	adds.w	sl, r2, r1
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b24:	4692      	mov	sl, r2
 8002b26:	469b      	mov	fp, r3
 8002b28:	4643      	mov	r3, r8
 8002b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb4b 0303 	adc.w	r3, fp, r3
 8002b38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b50:	460b      	mov	r3, r1
 8002b52:	18db      	adds	r3, r3, r3
 8002b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b56:	4613      	mov	r3, r2
 8002b58:	eb42 0303 	adc.w	r3, r2, r3
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b66:	f7fd fb93 	bl	8000290 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <UART_SetConfig+0x2d4>)
 8002b72:	fba3 2301 	umull	r2, r3, r3, r1
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2264      	movs	r2, #100	@ 0x64
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	1acb      	subs	r3, r1, r3
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b86:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <UART_SetConfig+0x2d4>)
 8002b88:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b94:	441c      	add	r4, r3
 8002b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	1891      	adds	r1, r2, r2
 8002bae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bb0:	415b      	adcs	r3, r3
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bb8:	4641      	mov	r1, r8
 8002bba:	1851      	adds	r1, r2, r1
 8002bbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	414b      	adcs	r3, r1
 8002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bd0:	4659      	mov	r1, fp
 8002bd2:	00cb      	lsls	r3, r1, #3
 8002bd4:	4651      	mov	r1, sl
 8002bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bda:	4651      	mov	r1, sl
 8002bdc:	00ca      	lsls	r2, r1, #3
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	4642      	mov	r2, r8
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bec:	464b      	mov	r3, r9
 8002bee:	460a      	mov	r2, r1
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	18db      	adds	r3, r3, r3
 8002c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c12:	4613      	mov	r3, r2
 8002c14:	eb42 0303 	adc.w	r3, r2, r3
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c22:	f7fd fb35 	bl	8000290 <__aeabi_uldivmod>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <UART_SetConfig+0x2d4>)
 8002c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	2164      	movs	r1, #100	@ 0x64
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	3332      	adds	r3, #50	@ 0x32
 8002c3e:	4a08      	ldr	r2, [pc, #32]	@ (8002c60 <UART_SetConfig+0x2d4>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	f003 0207 	and.w	r2, r3, #7
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4422      	add	r2, r4
 8002c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c54:	e106      	b.n	8002e64 <UART_SetConfig+0x4d8>
 8002c56:	bf00      	nop
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40011400 	.word	0x40011400
 8002c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c76:	4642      	mov	r2, r8
 8002c78:	464b      	mov	r3, r9
 8002c7a:	1891      	adds	r1, r2, r2
 8002c7c:	6239      	str	r1, [r7, #32]
 8002c7e:	415b      	adcs	r3, r3
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c86:	4641      	mov	r1, r8
 8002c88:	1854      	adds	r4, r2, r1
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	eb43 0501 	adc.w	r5, r3, r1
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	00eb      	lsls	r3, r5, #3
 8002c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9e:	00e2      	lsls	r2, r4, #3
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	18e3      	adds	r3, r4, r3
 8002ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cac:	464b      	mov	r3, r9
 8002cae:	eb45 0303 	adc.w	r3, r5, r3
 8002cb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	008b      	lsls	r3, r1, #2
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cdc:	4621      	mov	r1, r4
 8002cde:	008a      	lsls	r2, r1, #2
 8002ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ce4:	f7fd fad4 	bl	8000290 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4b60      	ldr	r3, [pc, #384]	@ (8002e70 <UART_SetConfig+0x4e4>)
 8002cee:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	011c      	lsls	r4, r3, #4
 8002cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d08:	4642      	mov	r2, r8
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	1891      	adds	r1, r2, r2
 8002d0e:	61b9      	str	r1, [r7, #24]
 8002d10:	415b      	adcs	r3, r3
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d18:	4641      	mov	r1, r8
 8002d1a:	1851      	adds	r1, r2, r1
 8002d1c:	6139      	str	r1, [r7, #16]
 8002d1e:	4649      	mov	r1, r9
 8002d20:	414b      	adcs	r3, r1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d30:	4659      	mov	r1, fp
 8002d32:	00cb      	lsls	r3, r1, #3
 8002d34:	4651      	mov	r1, sl
 8002d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	00ca      	lsls	r2, r1, #3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	4642      	mov	r2, r8
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	460a      	mov	r2, r1
 8002d50:	eb42 0303 	adc.w	r3, r2, r3
 8002d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d70:	4649      	mov	r1, r9
 8002d72:	008b      	lsls	r3, r1, #2
 8002d74:	4641      	mov	r1, r8
 8002d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	008a      	lsls	r2, r1, #2
 8002d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d82:	f7fd fa85 	bl	8000290 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4b38      	ldr	r3, [pc, #224]	@ (8002e70 <UART_SetConfig+0x4e4>)
 8002d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2264      	movs	r2, #100	@ 0x64
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	1acb      	subs	r3, r1, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	@ 0x32
 8002da0:	4a33      	ldr	r2, [pc, #204]	@ (8002e70 <UART_SetConfig+0x4e4>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dac:	441c      	add	r4, r3
 8002dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002db2:	2200      	movs	r2, #0
 8002db4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002db6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002db8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dcc:	4641      	mov	r1, r8
 8002dce:	1851      	adds	r1, r2, r1
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	414b      	adcs	r3, r1
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002de4:	4659      	mov	r1, fp
 8002de6:	00cb      	lsls	r3, r1, #3
 8002de8:	4651      	mov	r1, sl
 8002dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dee:	4651      	mov	r1, sl
 8002df0:	00ca      	lsls	r2, r1, #3
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dfe:	464b      	mov	r3, r9
 8002e00:	460a      	mov	r2, r1
 8002e02:	eb42 0303 	adc.w	r3, r2, r3
 8002e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e12:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e20:	4649      	mov	r1, r9
 8002e22:	008b      	lsls	r3, r1, #2
 8002e24:	4641      	mov	r1, r8
 8002e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	008a      	lsls	r2, r1, #2
 8002e2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e32:	f7fd fa2d 	bl	8000290 <__aeabi_uldivmod>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <UART_SetConfig+0x4e4>)
 8002e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	2164      	movs	r1, #100	@ 0x64
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	3332      	adds	r3, #50	@ 0x32
 8002e4e:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <UART_SetConfig+0x4e4>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	f003 020f 	and.w	r2, r3, #15
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4422      	add	r2, r4
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e70:	51eb851f 	.word	0x51eb851f

08002e74 <siprintf>:
 8002e74:	b40e      	push	{r1, r2, r3}
 8002e76:	b500      	push	{lr}
 8002e78:	b09c      	sub	sp, #112	@ 0x70
 8002e7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e7c:	9002      	str	r0, [sp, #8]
 8002e7e:	9006      	str	r0, [sp, #24]
 8002e80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e84:	4809      	ldr	r0, [pc, #36]	@ (8002eac <siprintf+0x38>)
 8002e86:	9107      	str	r1, [sp, #28]
 8002e88:	9104      	str	r1, [sp, #16]
 8002e8a:	4909      	ldr	r1, [pc, #36]	@ (8002eb0 <siprintf+0x3c>)
 8002e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e90:	9105      	str	r1, [sp, #20]
 8002e92:	6800      	ldr	r0, [r0, #0]
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	a902      	add	r1, sp, #8
 8002e98:	f000 f994 	bl	80031c4 <_svfiprintf_r>
 8002e9c:	9b02      	ldr	r3, [sp, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	b01c      	add	sp, #112	@ 0x70
 8002ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ea8:	b003      	add	sp, #12
 8002eaa:	4770      	bx	lr
 8002eac:	20000034 	.word	0x20000034
 8002eb0:	ffff0208 	.word	0xffff0208

08002eb4 <memset>:
 8002eb4:	4402      	add	r2, r0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	@ (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000034 	.word	0x20000034

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2600      	movs	r6, #0
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f000 fc66 	bl	80037b4 <_init>
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2600      	movs	r6, #0
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08003838 	.word	0x08003838
 8002f0c:	08003838 	.word	0x08003838
 8002f10:	08003838 	.word	0x08003838
 8002f14:	0800383c 	.word	0x0800383c

08002f18 <__retarget_lock_acquire_recursive>:
 8002f18:	4770      	bx	lr

08002f1a <__retarget_lock_release_recursive>:
 8002f1a:	4770      	bx	lr

08002f1c <_free_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4605      	mov	r5, r0
 8002f20:	2900      	cmp	r1, #0
 8002f22:	d041      	beq.n	8002fa8 <_free_r+0x8c>
 8002f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f28:	1f0c      	subs	r4, r1, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bfb8      	it	lt
 8002f2e:	18e4      	addlt	r4, r4, r3
 8002f30:	f000 f8e0 	bl	80030f4 <__malloc_lock>
 8002f34:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <_free_r+0x90>)
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	b933      	cbnz	r3, 8002f48 <_free_r+0x2c>
 8002f3a:	6063      	str	r3, [r4, #4]
 8002f3c:	6014      	str	r4, [r2, #0]
 8002f3e:	4628      	mov	r0, r5
 8002f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f44:	f000 b8dc 	b.w	8003100 <__malloc_unlock>
 8002f48:	42a3      	cmp	r3, r4
 8002f4a:	d908      	bls.n	8002f5e <_free_r+0x42>
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	1821      	adds	r1, r4, r0
 8002f50:	428b      	cmp	r3, r1
 8002f52:	bf01      	itttt	eq
 8002f54:	6819      	ldreq	r1, [r3, #0]
 8002f56:	685b      	ldreq	r3, [r3, #4]
 8002f58:	1809      	addeq	r1, r1, r0
 8002f5a:	6021      	streq	r1, [r4, #0]
 8002f5c:	e7ed      	b.n	8002f3a <_free_r+0x1e>
 8002f5e:	461a      	mov	r2, r3
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b10b      	cbz	r3, 8002f68 <_free_r+0x4c>
 8002f64:	42a3      	cmp	r3, r4
 8002f66:	d9fa      	bls.n	8002f5e <_free_r+0x42>
 8002f68:	6811      	ldr	r1, [r2, #0]
 8002f6a:	1850      	adds	r0, r2, r1
 8002f6c:	42a0      	cmp	r0, r4
 8002f6e:	d10b      	bne.n	8002f88 <_free_r+0x6c>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	4401      	add	r1, r0
 8002f74:	1850      	adds	r0, r2, r1
 8002f76:	4283      	cmp	r3, r0
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	d1e0      	bne.n	8002f3e <_free_r+0x22>
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	6053      	str	r3, [r2, #4]
 8002f82:	4408      	add	r0, r1
 8002f84:	6010      	str	r0, [r2, #0]
 8002f86:	e7da      	b.n	8002f3e <_free_r+0x22>
 8002f88:	d902      	bls.n	8002f90 <_free_r+0x74>
 8002f8a:	230c      	movs	r3, #12
 8002f8c:	602b      	str	r3, [r5, #0]
 8002f8e:	e7d6      	b.n	8002f3e <_free_r+0x22>
 8002f90:	6820      	ldr	r0, [r4, #0]
 8002f92:	1821      	adds	r1, r4, r0
 8002f94:	428b      	cmp	r3, r1
 8002f96:	bf04      	itt	eq
 8002f98:	6819      	ldreq	r1, [r3, #0]
 8002f9a:	685b      	ldreq	r3, [r3, #4]
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	bf04      	itt	eq
 8002fa0:	1809      	addeq	r1, r1, r0
 8002fa2:	6021      	streq	r1, [r4, #0]
 8002fa4:	6054      	str	r4, [r2, #4]
 8002fa6:	e7ca      	b.n	8002f3e <_free_r+0x22>
 8002fa8:	bd38      	pop	{r3, r4, r5, pc}
 8002faa:	bf00      	nop
 8002fac:	20000248 	.word	0x20000248

08002fb0 <sbrk_aligned>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8002ff0 <sbrk_aligned+0x40>)
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	6831      	ldr	r1, [r6, #0]
 8002fb8:	4605      	mov	r5, r0
 8002fba:	b911      	cbnz	r1, 8002fc2 <sbrk_aligned+0x12>
 8002fbc:	f000 fba6 	bl	800370c <_sbrk_r>
 8002fc0:	6030      	str	r0, [r6, #0]
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 fba1 	bl	800370c <_sbrk_r>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	d103      	bne.n	8002fd6 <sbrk_aligned+0x26>
 8002fce:	f04f 34ff 	mov.w	r4, #4294967295
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	bd70      	pop	{r4, r5, r6, pc}
 8002fd6:	1cc4      	adds	r4, r0, #3
 8002fd8:	f024 0403 	bic.w	r4, r4, #3
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d0f8      	beq.n	8002fd2 <sbrk_aligned+0x22>
 8002fe0:	1a21      	subs	r1, r4, r0
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 fb92 	bl	800370c <_sbrk_r>
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d1f2      	bne.n	8002fd2 <sbrk_aligned+0x22>
 8002fec:	e7ef      	b.n	8002fce <sbrk_aligned+0x1e>
 8002fee:	bf00      	nop
 8002ff0:	20000244 	.word	0x20000244

08002ff4 <_malloc_r>:
 8002ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff8:	1ccd      	adds	r5, r1, #3
 8002ffa:	f025 0503 	bic.w	r5, r5, #3
 8002ffe:	3508      	adds	r5, #8
 8003000:	2d0c      	cmp	r5, #12
 8003002:	bf38      	it	cc
 8003004:	250c      	movcc	r5, #12
 8003006:	2d00      	cmp	r5, #0
 8003008:	4606      	mov	r6, r0
 800300a:	db01      	blt.n	8003010 <_malloc_r+0x1c>
 800300c:	42a9      	cmp	r1, r5
 800300e:	d904      	bls.n	800301a <_malloc_r+0x26>
 8003010:	230c      	movs	r3, #12
 8003012:	6033      	str	r3, [r6, #0]
 8003014:	2000      	movs	r0, #0
 8003016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800301a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030f0 <_malloc_r+0xfc>
 800301e:	f000 f869 	bl	80030f4 <__malloc_lock>
 8003022:	f8d8 3000 	ldr.w	r3, [r8]
 8003026:	461c      	mov	r4, r3
 8003028:	bb44      	cbnz	r4, 800307c <_malloc_r+0x88>
 800302a:	4629      	mov	r1, r5
 800302c:	4630      	mov	r0, r6
 800302e:	f7ff ffbf 	bl	8002fb0 <sbrk_aligned>
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	4604      	mov	r4, r0
 8003036:	d158      	bne.n	80030ea <_malloc_r+0xf6>
 8003038:	f8d8 4000 	ldr.w	r4, [r8]
 800303c:	4627      	mov	r7, r4
 800303e:	2f00      	cmp	r7, #0
 8003040:	d143      	bne.n	80030ca <_malloc_r+0xd6>
 8003042:	2c00      	cmp	r4, #0
 8003044:	d04b      	beq.n	80030de <_malloc_r+0xea>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	4639      	mov	r1, r7
 800304a:	4630      	mov	r0, r6
 800304c:	eb04 0903 	add.w	r9, r4, r3
 8003050:	f000 fb5c 	bl	800370c <_sbrk_r>
 8003054:	4581      	cmp	r9, r0
 8003056:	d142      	bne.n	80030de <_malloc_r+0xea>
 8003058:	6821      	ldr	r1, [r4, #0]
 800305a:	1a6d      	subs	r5, r5, r1
 800305c:	4629      	mov	r1, r5
 800305e:	4630      	mov	r0, r6
 8003060:	f7ff ffa6 	bl	8002fb0 <sbrk_aligned>
 8003064:	3001      	adds	r0, #1
 8003066:	d03a      	beq.n	80030de <_malloc_r+0xea>
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	442b      	add	r3, r5
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	f8d8 3000 	ldr.w	r3, [r8]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	bb62      	cbnz	r2, 80030d0 <_malloc_r+0xdc>
 8003076:	f8c8 7000 	str.w	r7, [r8]
 800307a:	e00f      	b.n	800309c <_malloc_r+0xa8>
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	1b52      	subs	r2, r2, r5
 8003080:	d420      	bmi.n	80030c4 <_malloc_r+0xd0>
 8003082:	2a0b      	cmp	r2, #11
 8003084:	d917      	bls.n	80030b6 <_malloc_r+0xc2>
 8003086:	1961      	adds	r1, r4, r5
 8003088:	42a3      	cmp	r3, r4
 800308a:	6025      	str	r5, [r4, #0]
 800308c:	bf18      	it	ne
 800308e:	6059      	strne	r1, [r3, #4]
 8003090:	6863      	ldr	r3, [r4, #4]
 8003092:	bf08      	it	eq
 8003094:	f8c8 1000 	streq.w	r1, [r8]
 8003098:	5162      	str	r2, [r4, r5]
 800309a:	604b      	str	r3, [r1, #4]
 800309c:	4630      	mov	r0, r6
 800309e:	f000 f82f 	bl	8003100 <__malloc_unlock>
 80030a2:	f104 000b 	add.w	r0, r4, #11
 80030a6:	1d23      	adds	r3, r4, #4
 80030a8:	f020 0007 	bic.w	r0, r0, #7
 80030ac:	1ac2      	subs	r2, r0, r3
 80030ae:	bf1c      	itt	ne
 80030b0:	1a1b      	subne	r3, r3, r0
 80030b2:	50a3      	strne	r3, [r4, r2]
 80030b4:	e7af      	b.n	8003016 <_malloc_r+0x22>
 80030b6:	6862      	ldr	r2, [r4, #4]
 80030b8:	42a3      	cmp	r3, r4
 80030ba:	bf0c      	ite	eq
 80030bc:	f8c8 2000 	streq.w	r2, [r8]
 80030c0:	605a      	strne	r2, [r3, #4]
 80030c2:	e7eb      	b.n	800309c <_malloc_r+0xa8>
 80030c4:	4623      	mov	r3, r4
 80030c6:	6864      	ldr	r4, [r4, #4]
 80030c8:	e7ae      	b.n	8003028 <_malloc_r+0x34>
 80030ca:	463c      	mov	r4, r7
 80030cc:	687f      	ldr	r7, [r7, #4]
 80030ce:	e7b6      	b.n	800303e <_malloc_r+0x4a>
 80030d0:	461a      	mov	r2, r3
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	42a3      	cmp	r3, r4
 80030d6:	d1fb      	bne.n	80030d0 <_malloc_r+0xdc>
 80030d8:	2300      	movs	r3, #0
 80030da:	6053      	str	r3, [r2, #4]
 80030dc:	e7de      	b.n	800309c <_malloc_r+0xa8>
 80030de:	230c      	movs	r3, #12
 80030e0:	6033      	str	r3, [r6, #0]
 80030e2:	4630      	mov	r0, r6
 80030e4:	f000 f80c 	bl	8003100 <__malloc_unlock>
 80030e8:	e794      	b.n	8003014 <_malloc_r+0x20>
 80030ea:	6005      	str	r5, [r0, #0]
 80030ec:	e7d6      	b.n	800309c <_malloc_r+0xa8>
 80030ee:	bf00      	nop
 80030f0:	20000248 	.word	0x20000248

080030f4 <__malloc_lock>:
 80030f4:	4801      	ldr	r0, [pc, #4]	@ (80030fc <__malloc_lock+0x8>)
 80030f6:	f7ff bf0f 	b.w	8002f18 <__retarget_lock_acquire_recursive>
 80030fa:	bf00      	nop
 80030fc:	20000240 	.word	0x20000240

08003100 <__malloc_unlock>:
 8003100:	4801      	ldr	r0, [pc, #4]	@ (8003108 <__malloc_unlock+0x8>)
 8003102:	f7ff bf0a 	b.w	8002f1a <__retarget_lock_release_recursive>
 8003106:	bf00      	nop
 8003108:	20000240 	.word	0x20000240

0800310c <__ssputs_r>:
 800310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003110:	688e      	ldr	r6, [r1, #8]
 8003112:	461f      	mov	r7, r3
 8003114:	42be      	cmp	r6, r7
 8003116:	680b      	ldr	r3, [r1, #0]
 8003118:	4682      	mov	sl, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4690      	mov	r8, r2
 800311e:	d82d      	bhi.n	800317c <__ssputs_r+0x70>
 8003120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003128:	d026      	beq.n	8003178 <__ssputs_r+0x6c>
 800312a:	6965      	ldr	r5, [r4, #20]
 800312c:	6909      	ldr	r1, [r1, #16]
 800312e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003132:	eba3 0901 	sub.w	r9, r3, r1
 8003136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800313a:	1c7b      	adds	r3, r7, #1
 800313c:	444b      	add	r3, r9
 800313e:	106d      	asrs	r5, r5, #1
 8003140:	429d      	cmp	r5, r3
 8003142:	bf38      	it	cc
 8003144:	461d      	movcc	r5, r3
 8003146:	0553      	lsls	r3, r2, #21
 8003148:	d527      	bpl.n	800319a <__ssputs_r+0x8e>
 800314a:	4629      	mov	r1, r5
 800314c:	f7ff ff52 	bl	8002ff4 <_malloc_r>
 8003150:	4606      	mov	r6, r0
 8003152:	b360      	cbz	r0, 80031ae <__ssputs_r+0xa2>
 8003154:	6921      	ldr	r1, [r4, #16]
 8003156:	464a      	mov	r2, r9
 8003158:	f000 fae8 	bl	800372c <memcpy>
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	81a3      	strh	r3, [r4, #12]
 8003168:	6126      	str	r6, [r4, #16]
 800316a:	6165      	str	r5, [r4, #20]
 800316c:	444e      	add	r6, r9
 800316e:	eba5 0509 	sub.w	r5, r5, r9
 8003172:	6026      	str	r6, [r4, #0]
 8003174:	60a5      	str	r5, [r4, #8]
 8003176:	463e      	mov	r6, r7
 8003178:	42be      	cmp	r6, r7
 800317a:	d900      	bls.n	800317e <__ssputs_r+0x72>
 800317c:	463e      	mov	r6, r7
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	4632      	mov	r2, r6
 8003182:	4641      	mov	r1, r8
 8003184:	f000 faa8 	bl	80036d8 <memmove>
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	1b9b      	subs	r3, r3, r6
 800318c:	60a3      	str	r3, [r4, #8]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	4433      	add	r3, r6
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	2000      	movs	r0, #0
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	462a      	mov	r2, r5
 800319c:	f000 fad4 	bl	8003748 <_realloc_r>
 80031a0:	4606      	mov	r6, r0
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1e0      	bne.n	8003168 <__ssputs_r+0x5c>
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	4650      	mov	r0, sl
 80031aa:	f7ff feb7 	bl	8002f1c <_free_r>
 80031ae:	230c      	movs	r3, #12
 80031b0:	f8ca 3000 	str.w	r3, [sl]
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	e7e9      	b.n	8003196 <__ssputs_r+0x8a>
	...

080031c4 <_svfiprintf_r>:
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	4698      	mov	r8, r3
 80031ca:	898b      	ldrh	r3, [r1, #12]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	b09d      	sub	sp, #116	@ 0x74
 80031d0:	4607      	mov	r7, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	d510      	bpl.n	80031fa <_svfiprintf_r+0x36>
 80031d8:	690b      	ldr	r3, [r1, #16]
 80031da:	b973      	cbnz	r3, 80031fa <_svfiprintf_r+0x36>
 80031dc:	2140      	movs	r1, #64	@ 0x40
 80031de:	f7ff ff09 	bl	8002ff4 <_malloc_r>
 80031e2:	6028      	str	r0, [r5, #0]
 80031e4:	6128      	str	r0, [r5, #16]
 80031e6:	b930      	cbnz	r0, 80031f6 <_svfiprintf_r+0x32>
 80031e8:	230c      	movs	r3, #12
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	b01d      	add	sp, #116	@ 0x74
 80031f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f6:	2340      	movs	r3, #64	@ 0x40
 80031f8:	616b      	str	r3, [r5, #20]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80031fe:	2320      	movs	r3, #32
 8003200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003204:	f8cd 800c 	str.w	r8, [sp, #12]
 8003208:	2330      	movs	r3, #48	@ 0x30
 800320a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80033a8 <_svfiprintf_r+0x1e4>
 800320e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003212:	f04f 0901 	mov.w	r9, #1
 8003216:	4623      	mov	r3, r4
 8003218:	469a      	mov	sl, r3
 800321a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800321e:	b10a      	cbz	r2, 8003224 <_svfiprintf_r+0x60>
 8003220:	2a25      	cmp	r2, #37	@ 0x25
 8003222:	d1f9      	bne.n	8003218 <_svfiprintf_r+0x54>
 8003224:	ebba 0b04 	subs.w	fp, sl, r4
 8003228:	d00b      	beq.n	8003242 <_svfiprintf_r+0x7e>
 800322a:	465b      	mov	r3, fp
 800322c:	4622      	mov	r2, r4
 800322e:	4629      	mov	r1, r5
 8003230:	4638      	mov	r0, r7
 8003232:	f7ff ff6b 	bl	800310c <__ssputs_r>
 8003236:	3001      	adds	r0, #1
 8003238:	f000 80a7 	beq.w	800338a <_svfiprintf_r+0x1c6>
 800323c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800323e:	445a      	add	r2, fp
 8003240:	9209      	str	r2, [sp, #36]	@ 0x24
 8003242:	f89a 3000 	ldrb.w	r3, [sl]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 809f 	beq.w	800338a <_svfiprintf_r+0x1c6>
 800324c:	2300      	movs	r3, #0
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003256:	f10a 0a01 	add.w	sl, sl, #1
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	9307      	str	r3, [sp, #28]
 800325e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003262:	931a      	str	r3, [sp, #104]	@ 0x68
 8003264:	4654      	mov	r4, sl
 8003266:	2205      	movs	r2, #5
 8003268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800326c:	484e      	ldr	r0, [pc, #312]	@ (80033a8 <_svfiprintf_r+0x1e4>)
 800326e:	f7fc ffbf 	bl	80001f0 <memchr>
 8003272:	9a04      	ldr	r2, [sp, #16]
 8003274:	b9d8      	cbnz	r0, 80032ae <_svfiprintf_r+0xea>
 8003276:	06d0      	lsls	r0, r2, #27
 8003278:	bf44      	itt	mi
 800327a:	2320      	movmi	r3, #32
 800327c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003280:	0711      	lsls	r1, r2, #28
 8003282:	bf44      	itt	mi
 8003284:	232b      	movmi	r3, #43	@ 0x2b
 8003286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800328a:	f89a 3000 	ldrb.w	r3, [sl]
 800328e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003290:	d015      	beq.n	80032be <_svfiprintf_r+0xfa>
 8003292:	9a07      	ldr	r2, [sp, #28]
 8003294:	4654      	mov	r4, sl
 8003296:	2000      	movs	r0, #0
 8003298:	f04f 0c0a 	mov.w	ip, #10
 800329c:	4621      	mov	r1, r4
 800329e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a2:	3b30      	subs	r3, #48	@ 0x30
 80032a4:	2b09      	cmp	r3, #9
 80032a6:	d94b      	bls.n	8003340 <_svfiprintf_r+0x17c>
 80032a8:	b1b0      	cbz	r0, 80032d8 <_svfiprintf_r+0x114>
 80032aa:	9207      	str	r2, [sp, #28]
 80032ac:	e014      	b.n	80032d8 <_svfiprintf_r+0x114>
 80032ae:	eba0 0308 	sub.w	r3, r0, r8
 80032b2:	fa09 f303 	lsl.w	r3, r9, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	46a2      	mov	sl, r4
 80032bc:	e7d2      	b.n	8003264 <_svfiprintf_r+0xa0>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	1d19      	adds	r1, r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	9103      	str	r1, [sp, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfbb      	ittet	lt
 80032ca:	425b      	neglt	r3, r3
 80032cc:	f042 0202 	orrlt.w	r2, r2, #2
 80032d0:	9307      	strge	r3, [sp, #28]
 80032d2:	9307      	strlt	r3, [sp, #28]
 80032d4:	bfb8      	it	lt
 80032d6:	9204      	strlt	r2, [sp, #16]
 80032d8:	7823      	ldrb	r3, [r4, #0]
 80032da:	2b2e      	cmp	r3, #46	@ 0x2e
 80032dc:	d10a      	bne.n	80032f4 <_svfiprintf_r+0x130>
 80032de:	7863      	ldrb	r3, [r4, #1]
 80032e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e2:	d132      	bne.n	800334a <_svfiprintf_r+0x186>
 80032e4:	9b03      	ldr	r3, [sp, #12]
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	9203      	str	r2, [sp, #12]
 80032ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032f0:	3402      	adds	r4, #2
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80033b8 <_svfiprintf_r+0x1f4>
 80032f8:	7821      	ldrb	r1, [r4, #0]
 80032fa:	2203      	movs	r2, #3
 80032fc:	4650      	mov	r0, sl
 80032fe:	f7fc ff77 	bl	80001f0 <memchr>
 8003302:	b138      	cbz	r0, 8003314 <_svfiprintf_r+0x150>
 8003304:	9b04      	ldr	r3, [sp, #16]
 8003306:	eba0 000a 	sub.w	r0, r0, sl
 800330a:	2240      	movs	r2, #64	@ 0x40
 800330c:	4082      	lsls	r2, r0
 800330e:	4313      	orrs	r3, r2
 8003310:	3401      	adds	r4, #1
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003318:	4824      	ldr	r0, [pc, #144]	@ (80033ac <_svfiprintf_r+0x1e8>)
 800331a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800331e:	2206      	movs	r2, #6
 8003320:	f7fc ff66 	bl	80001f0 <memchr>
 8003324:	2800      	cmp	r0, #0
 8003326:	d036      	beq.n	8003396 <_svfiprintf_r+0x1d2>
 8003328:	4b21      	ldr	r3, [pc, #132]	@ (80033b0 <_svfiprintf_r+0x1ec>)
 800332a:	bb1b      	cbnz	r3, 8003374 <_svfiprintf_r+0x1b0>
 800332c:	9b03      	ldr	r3, [sp, #12]
 800332e:	3307      	adds	r3, #7
 8003330:	f023 0307 	bic.w	r3, r3, #7
 8003334:	3308      	adds	r3, #8
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800333a:	4433      	add	r3, r6
 800333c:	9309      	str	r3, [sp, #36]	@ 0x24
 800333e:	e76a      	b.n	8003216 <_svfiprintf_r+0x52>
 8003340:	fb0c 3202 	mla	r2, ip, r2, r3
 8003344:	460c      	mov	r4, r1
 8003346:	2001      	movs	r0, #1
 8003348:	e7a8      	b.n	800329c <_svfiprintf_r+0xd8>
 800334a:	2300      	movs	r3, #0
 800334c:	3401      	adds	r4, #1
 800334e:	9305      	str	r3, [sp, #20]
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0c0a 	mov.w	ip, #10
 8003356:	4620      	mov	r0, r4
 8003358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800335c:	3a30      	subs	r2, #48	@ 0x30
 800335e:	2a09      	cmp	r2, #9
 8003360:	d903      	bls.n	800336a <_svfiprintf_r+0x1a6>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0c6      	beq.n	80032f4 <_svfiprintf_r+0x130>
 8003366:	9105      	str	r1, [sp, #20]
 8003368:	e7c4      	b.n	80032f4 <_svfiprintf_r+0x130>
 800336a:	fb0c 2101 	mla	r1, ip, r1, r2
 800336e:	4604      	mov	r4, r0
 8003370:	2301      	movs	r3, #1
 8003372:	e7f0      	b.n	8003356 <_svfiprintf_r+0x192>
 8003374:	ab03      	add	r3, sp, #12
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	462a      	mov	r2, r5
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <_svfiprintf_r+0x1f0>)
 800337c:	a904      	add	r1, sp, #16
 800337e:	4638      	mov	r0, r7
 8003380:	f3af 8000 	nop.w
 8003384:	1c42      	adds	r2, r0, #1
 8003386:	4606      	mov	r6, r0
 8003388:	d1d6      	bne.n	8003338 <_svfiprintf_r+0x174>
 800338a:	89ab      	ldrh	r3, [r5, #12]
 800338c:	065b      	lsls	r3, r3, #25
 800338e:	f53f af2d 	bmi.w	80031ec <_svfiprintf_r+0x28>
 8003392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003394:	e72c      	b.n	80031f0 <_svfiprintf_r+0x2c>
 8003396:	ab03      	add	r3, sp, #12
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	462a      	mov	r2, r5
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <_svfiprintf_r+0x1f0>)
 800339e:	a904      	add	r1, sp, #16
 80033a0:	4638      	mov	r0, r7
 80033a2:	f000 f879 	bl	8003498 <_printf_i>
 80033a6:	e7ed      	b.n	8003384 <_svfiprintf_r+0x1c0>
 80033a8:	080037fc 	.word	0x080037fc
 80033ac:	08003806 	.word	0x08003806
 80033b0:	00000000 	.word	0x00000000
 80033b4:	0800310d 	.word	0x0800310d
 80033b8:	08003802 	.word	0x08003802

080033bc <_printf_common>:
 80033bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c0:	4616      	mov	r6, r2
 80033c2:	4698      	mov	r8, r3
 80033c4:	688a      	ldr	r2, [r1, #8]
 80033c6:	690b      	ldr	r3, [r1, #16]
 80033c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bfb8      	it	lt
 80033d0:	4613      	movlt	r3, r2
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033d8:	4607      	mov	r7, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	b10a      	cbz	r2, 80033e2 <_printf_common+0x26>
 80033de:	3301      	adds	r3, #1
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	0699      	lsls	r1, r3, #26
 80033e6:	bf42      	ittt	mi
 80033e8:	6833      	ldrmi	r3, [r6, #0]
 80033ea:	3302      	addmi	r3, #2
 80033ec:	6033      	strmi	r3, [r6, #0]
 80033ee:	6825      	ldr	r5, [r4, #0]
 80033f0:	f015 0506 	ands.w	r5, r5, #6
 80033f4:	d106      	bne.n	8003404 <_printf_common+0x48>
 80033f6:	f104 0a19 	add.w	sl, r4, #25
 80033fa:	68e3      	ldr	r3, [r4, #12]
 80033fc:	6832      	ldr	r2, [r6, #0]
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	42ab      	cmp	r3, r5
 8003402:	dc26      	bgt.n	8003452 <_printf_common+0x96>
 8003404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	3b00      	subs	r3, #0
 800340c:	bf18      	it	ne
 800340e:	2301      	movne	r3, #1
 8003410:	0692      	lsls	r2, r2, #26
 8003412:	d42b      	bmi.n	800346c <_printf_common+0xb0>
 8003414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003418:	4641      	mov	r1, r8
 800341a:	4638      	mov	r0, r7
 800341c:	47c8      	blx	r9
 800341e:	3001      	adds	r0, #1
 8003420:	d01e      	beq.n	8003460 <_printf_common+0xa4>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	6922      	ldr	r2, [r4, #16]
 8003426:	f003 0306 	and.w	r3, r3, #6
 800342a:	2b04      	cmp	r3, #4
 800342c:	bf02      	ittt	eq
 800342e:	68e5      	ldreq	r5, [r4, #12]
 8003430:	6833      	ldreq	r3, [r6, #0]
 8003432:	1aed      	subeq	r5, r5, r3
 8003434:	68a3      	ldr	r3, [r4, #8]
 8003436:	bf0c      	ite	eq
 8003438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800343c:	2500      	movne	r5, #0
 800343e:	4293      	cmp	r3, r2
 8003440:	bfc4      	itt	gt
 8003442:	1a9b      	subgt	r3, r3, r2
 8003444:	18ed      	addgt	r5, r5, r3
 8003446:	2600      	movs	r6, #0
 8003448:	341a      	adds	r4, #26
 800344a:	42b5      	cmp	r5, r6
 800344c:	d11a      	bne.n	8003484 <_printf_common+0xc8>
 800344e:	2000      	movs	r0, #0
 8003450:	e008      	b.n	8003464 <_printf_common+0xa8>
 8003452:	2301      	movs	r3, #1
 8003454:	4652      	mov	r2, sl
 8003456:	4641      	mov	r1, r8
 8003458:	4638      	mov	r0, r7
 800345a:	47c8      	blx	r9
 800345c:	3001      	adds	r0, #1
 800345e:	d103      	bne.n	8003468 <_printf_common+0xac>
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003468:	3501      	adds	r5, #1
 800346a:	e7c6      	b.n	80033fa <_printf_common+0x3e>
 800346c:	18e1      	adds	r1, r4, r3
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	2030      	movs	r0, #48	@ 0x30
 8003472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003476:	4422      	add	r2, r4
 8003478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800347c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003480:	3302      	adds	r3, #2
 8003482:	e7c7      	b.n	8003414 <_printf_common+0x58>
 8003484:	2301      	movs	r3, #1
 8003486:	4622      	mov	r2, r4
 8003488:	4641      	mov	r1, r8
 800348a:	4638      	mov	r0, r7
 800348c:	47c8      	blx	r9
 800348e:	3001      	adds	r0, #1
 8003490:	d0e6      	beq.n	8003460 <_printf_common+0xa4>
 8003492:	3601      	adds	r6, #1
 8003494:	e7d9      	b.n	800344a <_printf_common+0x8e>
	...

08003498 <_printf_i>:
 8003498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	7e0f      	ldrb	r7, [r1, #24]
 800349e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034a0:	2f78      	cmp	r7, #120	@ 0x78
 80034a2:	4691      	mov	r9, r2
 80034a4:	4680      	mov	r8, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	469a      	mov	sl, r3
 80034aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034ae:	d807      	bhi.n	80034c0 <_printf_i+0x28>
 80034b0:	2f62      	cmp	r7, #98	@ 0x62
 80034b2:	d80a      	bhi.n	80034ca <_printf_i+0x32>
 80034b4:	2f00      	cmp	r7, #0
 80034b6:	f000 80d2 	beq.w	800365e <_printf_i+0x1c6>
 80034ba:	2f58      	cmp	r7, #88	@ 0x58
 80034bc:	f000 80b9 	beq.w	8003632 <_printf_i+0x19a>
 80034c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034c8:	e03a      	b.n	8003540 <_printf_i+0xa8>
 80034ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034ce:	2b15      	cmp	r3, #21
 80034d0:	d8f6      	bhi.n	80034c0 <_printf_i+0x28>
 80034d2:	a101      	add	r1, pc, #4	@ (adr r1, 80034d8 <_printf_i+0x40>)
 80034d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003545 	.word	0x08003545
 80034e0:	080034c1 	.word	0x080034c1
 80034e4:	080034c1 	.word	0x080034c1
 80034e8:	080034c1 	.word	0x080034c1
 80034ec:	080034c1 	.word	0x080034c1
 80034f0:	08003545 	.word	0x08003545
 80034f4:	080034c1 	.word	0x080034c1
 80034f8:	080034c1 	.word	0x080034c1
 80034fc:	080034c1 	.word	0x080034c1
 8003500:	080034c1 	.word	0x080034c1
 8003504:	08003645 	.word	0x08003645
 8003508:	0800356f 	.word	0x0800356f
 800350c:	080035ff 	.word	0x080035ff
 8003510:	080034c1 	.word	0x080034c1
 8003514:	080034c1 	.word	0x080034c1
 8003518:	08003667 	.word	0x08003667
 800351c:	080034c1 	.word	0x080034c1
 8003520:	0800356f 	.word	0x0800356f
 8003524:	080034c1 	.word	0x080034c1
 8003528:	080034c1 	.word	0x080034c1
 800352c:	08003607 	.word	0x08003607
 8003530:	6833      	ldr	r3, [r6, #0]
 8003532:	1d1a      	adds	r2, r3, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6032      	str	r2, [r6, #0]
 8003538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800353c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003540:	2301      	movs	r3, #1
 8003542:	e09d      	b.n	8003680 <_printf_i+0x1e8>
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	1d19      	adds	r1, r3, #4
 800354a:	6031      	str	r1, [r6, #0]
 800354c:	0606      	lsls	r6, r0, #24
 800354e:	d501      	bpl.n	8003554 <_printf_i+0xbc>
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	e003      	b.n	800355c <_printf_i+0xc4>
 8003554:	0645      	lsls	r5, r0, #25
 8003556:	d5fb      	bpl.n	8003550 <_printf_i+0xb8>
 8003558:	f9b3 5000 	ldrsh.w	r5, [r3]
 800355c:	2d00      	cmp	r5, #0
 800355e:	da03      	bge.n	8003568 <_printf_i+0xd0>
 8003560:	232d      	movs	r3, #45	@ 0x2d
 8003562:	426d      	negs	r5, r5
 8003564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003568:	4859      	ldr	r0, [pc, #356]	@ (80036d0 <_printf_i+0x238>)
 800356a:	230a      	movs	r3, #10
 800356c:	e011      	b.n	8003592 <_printf_i+0xfa>
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	0608      	lsls	r0, r1, #24
 8003574:	f853 5b04 	ldr.w	r5, [r3], #4
 8003578:	d402      	bmi.n	8003580 <_printf_i+0xe8>
 800357a:	0649      	lsls	r1, r1, #25
 800357c:	bf48      	it	mi
 800357e:	b2ad      	uxthmi	r5, r5
 8003580:	2f6f      	cmp	r7, #111	@ 0x6f
 8003582:	4853      	ldr	r0, [pc, #332]	@ (80036d0 <_printf_i+0x238>)
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	bf14      	ite	ne
 8003588:	230a      	movne	r3, #10
 800358a:	2308      	moveq	r3, #8
 800358c:	2100      	movs	r1, #0
 800358e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003592:	6866      	ldr	r6, [r4, #4]
 8003594:	60a6      	str	r6, [r4, #8]
 8003596:	2e00      	cmp	r6, #0
 8003598:	bfa2      	ittt	ge
 800359a:	6821      	ldrge	r1, [r4, #0]
 800359c:	f021 0104 	bicge.w	r1, r1, #4
 80035a0:	6021      	strge	r1, [r4, #0]
 80035a2:	b90d      	cbnz	r5, 80035a8 <_printf_i+0x110>
 80035a4:	2e00      	cmp	r6, #0
 80035a6:	d04b      	beq.n	8003640 <_printf_i+0x1a8>
 80035a8:	4616      	mov	r6, r2
 80035aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80035ae:	fb03 5711 	mls	r7, r3, r1, r5
 80035b2:	5dc7      	ldrb	r7, [r0, r7]
 80035b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035b8:	462f      	mov	r7, r5
 80035ba:	42bb      	cmp	r3, r7
 80035bc:	460d      	mov	r5, r1
 80035be:	d9f4      	bls.n	80035aa <_printf_i+0x112>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d10b      	bne.n	80035dc <_printf_i+0x144>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	07df      	lsls	r7, r3, #31
 80035c8:	d508      	bpl.n	80035dc <_printf_i+0x144>
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	6861      	ldr	r1, [r4, #4]
 80035ce:	4299      	cmp	r1, r3
 80035d0:	bfde      	ittt	le
 80035d2:	2330      	movle	r3, #48	@ 0x30
 80035d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035dc:	1b92      	subs	r2, r2, r6
 80035de:	6122      	str	r2, [r4, #16]
 80035e0:	f8cd a000 	str.w	sl, [sp]
 80035e4:	464b      	mov	r3, r9
 80035e6:	aa03      	add	r2, sp, #12
 80035e8:	4621      	mov	r1, r4
 80035ea:	4640      	mov	r0, r8
 80035ec:	f7ff fee6 	bl	80033bc <_printf_common>
 80035f0:	3001      	adds	r0, #1
 80035f2:	d14a      	bne.n	800368a <_printf_i+0x1f2>
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	b004      	add	sp, #16
 80035fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	4833      	ldr	r0, [pc, #204]	@ (80036d4 <_printf_i+0x23c>)
 8003608:	2778      	movs	r7, #120	@ 0x78
 800360a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	6831      	ldr	r1, [r6, #0]
 8003612:	061f      	lsls	r7, r3, #24
 8003614:	f851 5b04 	ldr.w	r5, [r1], #4
 8003618:	d402      	bmi.n	8003620 <_printf_i+0x188>
 800361a:	065f      	lsls	r7, r3, #25
 800361c:	bf48      	it	mi
 800361e:	b2ad      	uxthmi	r5, r5
 8003620:	6031      	str	r1, [r6, #0]
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	bf44      	itt	mi
 8003626:	f043 0320 	orrmi.w	r3, r3, #32
 800362a:	6023      	strmi	r3, [r4, #0]
 800362c:	b11d      	cbz	r5, 8003636 <_printf_i+0x19e>
 800362e:	2310      	movs	r3, #16
 8003630:	e7ac      	b.n	800358c <_printf_i+0xf4>
 8003632:	4827      	ldr	r0, [pc, #156]	@ (80036d0 <_printf_i+0x238>)
 8003634:	e7e9      	b.n	800360a <_printf_i+0x172>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	f023 0320 	bic.w	r3, r3, #32
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	e7f6      	b.n	800362e <_printf_i+0x196>
 8003640:	4616      	mov	r6, r2
 8003642:	e7bd      	b.n	80035c0 <_printf_i+0x128>
 8003644:	6833      	ldr	r3, [r6, #0]
 8003646:	6825      	ldr	r5, [r4, #0]
 8003648:	6961      	ldr	r1, [r4, #20]
 800364a:	1d18      	adds	r0, r3, #4
 800364c:	6030      	str	r0, [r6, #0]
 800364e:	062e      	lsls	r6, r5, #24
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	d501      	bpl.n	8003658 <_printf_i+0x1c0>
 8003654:	6019      	str	r1, [r3, #0]
 8003656:	e002      	b.n	800365e <_printf_i+0x1c6>
 8003658:	0668      	lsls	r0, r5, #25
 800365a:	d5fb      	bpl.n	8003654 <_printf_i+0x1bc>
 800365c:	8019      	strh	r1, [r3, #0]
 800365e:	2300      	movs	r3, #0
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	4616      	mov	r6, r2
 8003664:	e7bc      	b.n	80035e0 <_printf_i+0x148>
 8003666:	6833      	ldr	r3, [r6, #0]
 8003668:	1d1a      	adds	r2, r3, #4
 800366a:	6032      	str	r2, [r6, #0]
 800366c:	681e      	ldr	r6, [r3, #0]
 800366e:	6862      	ldr	r2, [r4, #4]
 8003670:	2100      	movs	r1, #0
 8003672:	4630      	mov	r0, r6
 8003674:	f7fc fdbc 	bl	80001f0 <memchr>
 8003678:	b108      	cbz	r0, 800367e <_printf_i+0x1e6>
 800367a:	1b80      	subs	r0, r0, r6
 800367c:	6060      	str	r0, [r4, #4]
 800367e:	6863      	ldr	r3, [r4, #4]
 8003680:	6123      	str	r3, [r4, #16]
 8003682:	2300      	movs	r3, #0
 8003684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003688:	e7aa      	b.n	80035e0 <_printf_i+0x148>
 800368a:	6923      	ldr	r3, [r4, #16]
 800368c:	4632      	mov	r2, r6
 800368e:	4649      	mov	r1, r9
 8003690:	4640      	mov	r0, r8
 8003692:	47d0      	blx	sl
 8003694:	3001      	adds	r0, #1
 8003696:	d0ad      	beq.n	80035f4 <_printf_i+0x15c>
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	079b      	lsls	r3, r3, #30
 800369c:	d413      	bmi.n	80036c6 <_printf_i+0x22e>
 800369e:	68e0      	ldr	r0, [r4, #12]
 80036a0:	9b03      	ldr	r3, [sp, #12]
 80036a2:	4298      	cmp	r0, r3
 80036a4:	bfb8      	it	lt
 80036a6:	4618      	movlt	r0, r3
 80036a8:	e7a6      	b.n	80035f8 <_printf_i+0x160>
 80036aa:	2301      	movs	r3, #1
 80036ac:	4632      	mov	r2, r6
 80036ae:	4649      	mov	r1, r9
 80036b0:	4640      	mov	r0, r8
 80036b2:	47d0      	blx	sl
 80036b4:	3001      	adds	r0, #1
 80036b6:	d09d      	beq.n	80035f4 <_printf_i+0x15c>
 80036b8:	3501      	adds	r5, #1
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	9903      	ldr	r1, [sp, #12]
 80036be:	1a5b      	subs	r3, r3, r1
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	dcf2      	bgt.n	80036aa <_printf_i+0x212>
 80036c4:	e7eb      	b.n	800369e <_printf_i+0x206>
 80036c6:	2500      	movs	r5, #0
 80036c8:	f104 0619 	add.w	r6, r4, #25
 80036cc:	e7f5      	b.n	80036ba <_printf_i+0x222>
 80036ce:	bf00      	nop
 80036d0:	0800380d 	.word	0x0800380d
 80036d4:	0800381e 	.word	0x0800381e

080036d8 <memmove>:
 80036d8:	4288      	cmp	r0, r1
 80036da:	b510      	push	{r4, lr}
 80036dc:	eb01 0402 	add.w	r4, r1, r2
 80036e0:	d902      	bls.n	80036e8 <memmove+0x10>
 80036e2:	4284      	cmp	r4, r0
 80036e4:	4623      	mov	r3, r4
 80036e6:	d807      	bhi.n	80036f8 <memmove+0x20>
 80036e8:	1e43      	subs	r3, r0, #1
 80036ea:	42a1      	cmp	r1, r4
 80036ec:	d008      	beq.n	8003700 <memmove+0x28>
 80036ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036f6:	e7f8      	b.n	80036ea <memmove+0x12>
 80036f8:	4402      	add	r2, r0
 80036fa:	4601      	mov	r1, r0
 80036fc:	428a      	cmp	r2, r1
 80036fe:	d100      	bne.n	8003702 <memmove+0x2a>
 8003700:	bd10      	pop	{r4, pc}
 8003702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800370a:	e7f7      	b.n	80036fc <memmove+0x24>

0800370c <_sbrk_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d06      	ldr	r5, [pc, #24]	@ (8003728 <_sbrk_r+0x1c>)
 8003710:	2300      	movs	r3, #0
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd fb56 	bl	8000dc8 <_sbrk>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_sbrk_r+0x1a>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_sbrk_r+0x1a>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	2000023c 	.word	0x2000023c

0800372c <memcpy>:
 800372c:	440a      	add	r2, r1
 800372e:	4291      	cmp	r1, r2
 8003730:	f100 33ff 	add.w	r3, r0, #4294967295
 8003734:	d100      	bne.n	8003738 <memcpy+0xc>
 8003736:	4770      	bx	lr
 8003738:	b510      	push	{r4, lr}
 800373a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800373e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003742:	4291      	cmp	r1, r2
 8003744:	d1f9      	bne.n	800373a <memcpy+0xe>
 8003746:	bd10      	pop	{r4, pc}

08003748 <_realloc_r>:
 8003748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374c:	4680      	mov	r8, r0
 800374e:	4615      	mov	r5, r2
 8003750:	460c      	mov	r4, r1
 8003752:	b921      	cbnz	r1, 800375e <_realloc_r+0x16>
 8003754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003758:	4611      	mov	r1, r2
 800375a:	f7ff bc4b 	b.w	8002ff4 <_malloc_r>
 800375e:	b92a      	cbnz	r2, 800376c <_realloc_r+0x24>
 8003760:	f7ff fbdc 	bl	8002f1c <_free_r>
 8003764:	2400      	movs	r4, #0
 8003766:	4620      	mov	r0, r4
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	f000 f81a 	bl	80037a4 <_malloc_usable_size_r>
 8003770:	4285      	cmp	r5, r0
 8003772:	4606      	mov	r6, r0
 8003774:	d802      	bhi.n	800377c <_realloc_r+0x34>
 8003776:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800377a:	d8f4      	bhi.n	8003766 <_realloc_r+0x1e>
 800377c:	4629      	mov	r1, r5
 800377e:	4640      	mov	r0, r8
 8003780:	f7ff fc38 	bl	8002ff4 <_malloc_r>
 8003784:	4607      	mov	r7, r0
 8003786:	2800      	cmp	r0, #0
 8003788:	d0ec      	beq.n	8003764 <_realloc_r+0x1c>
 800378a:	42b5      	cmp	r5, r6
 800378c:	462a      	mov	r2, r5
 800378e:	4621      	mov	r1, r4
 8003790:	bf28      	it	cs
 8003792:	4632      	movcs	r2, r6
 8003794:	f7ff ffca 	bl	800372c <memcpy>
 8003798:	4621      	mov	r1, r4
 800379a:	4640      	mov	r0, r8
 800379c:	f7ff fbbe 	bl	8002f1c <_free_r>
 80037a0:	463c      	mov	r4, r7
 80037a2:	e7e0      	b.n	8003766 <_realloc_r+0x1e>

080037a4 <_malloc_usable_size_r>:
 80037a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a8:	1f18      	subs	r0, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfbc      	itt	lt
 80037ae:	580b      	ldrlt	r3, [r1, r0]
 80037b0:	18c0      	addlt	r0, r0, r3
 80037b2:	4770      	bx	lr

080037b4 <_init>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	bf00      	nop
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr

080037c0 <_fini>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr
