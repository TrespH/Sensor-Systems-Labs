
11_IR_uart_to_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de0  08004de0  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  08004de0  08004de0  00005de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de8  08004de8  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dec  08004dec  00005dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08004df0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000084  08004e74  00006084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08004e74  00006344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6b2  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb8  00000000  00000000  00013766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00015620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a37  00000000  00000000  00016330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169ab  00000000  00000000  00016d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eead  00000000  00000000  0002d712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd00  00000000  00000000  0003c5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca2bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  000ca304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  000cded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d44 	.word	0x08004d44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08004d44 	.word	0x08004d44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <DWT_Delay_Init+0x58>)
 800058a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800058e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	4a10      	ldr	r2, [pc, #64]	@ (80005d8 <DWT_Delay_Init+0x58>)
 8000596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800059a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <DWT_Delay_Init+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005a2:	f023 0301 	bic.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ba:	bf00      	nop
    __ASM volatile ("NOP");
 80005bc:	bf00      	nop
    __ASM volatile ("NOP");
 80005be:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <DWT_Delay_Init+0x5c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005c8:	2300      	movs	r3, #0
 80005ca:	e000      	b.n	80005ce <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005cc:	2301      	movs	r3, #1
    }
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000edf0 	.word	0xe000edf0
 80005dc:	e0001000 	.word	0xe0001000

080005e0 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <DWT_Delay_us+0x48>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80005ee:	f001 ff03 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <DWT_Delay_us+0x4c>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	0c9b      	lsrs	r3, r3, #18
 80005fc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	fb02 f303 	mul.w	r3, r2, r3
 8000606:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000608:	bf00      	nop
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <DWT_Delay_us+0x48>)
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	429a      	cmp	r2, r3
 800061a:	d3f6      	bcc.n	800060a <DWT_Delay_us+0x2a>
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	431bde83 	.word	0x431bde83

08000630 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000634:	2201      	movs	r2, #1
 8000636:	2102      	movs	r1, #2
 8000638:	4807      	ldr	r0, [pc, #28]	@ (8000658 <lcd_enable+0x28>)
 800063a:	f001 fa5f 	bl	8001afc <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800063e:	2032      	movs	r0, #50	@ 0x32
 8000640:	f7ff ffce 	bl	80005e0 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2102      	movs	r1, #2
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <lcd_enable+0x28>)
 800064a:	f001 fa57 	bl	8001afc <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 800064e:	2032      	movs	r0, #50	@ 0x32
 8000650:	f7ff ffc6 	bl	80005e0 <DWT_Delay_us>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400

0800065c <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000674:	4816      	ldr	r0, [pc, #88]	@ (80006d0 <lcd_write4+0x74>)
 8000676:	f001 fa41 	bl	8001afc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	105b      	asrs	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068c:	4810      	ldr	r0, [pc, #64]	@ (80006d0 <lcd_write4+0x74>)
 800068e:	f001 fa35 	bl	8001afc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	109b      	asrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <lcd_write4+0x74>)
 80006a6:	f001 fa29 	bl	8001afc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	10db      	asrs	r3, r3, #3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <lcd_write4+0x74>)
 80006be:	f001 fa1d 	bl	8001afc <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 80006c2:	f7ff ffb5 	bl	8000630 <lcd_enable>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400

080006d4 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	091b      	lsrs	r3, r3, #4
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffb9 	bl	800065c <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffb5 	bl	800065c <lcd_write4>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <lcd_command+0x24>)
 800070c:	f001 f9f6 	bl	8001afc <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffde 	bl	80006d4 <lcd_write>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020400 	.word	0x40020400

08000724 <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 800072e:	2201      	movs	r2, #1
 8000730:	2104      	movs	r1, #4
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <lcd_data+0x24>)
 8000734:	f001 f9e2 	bl	8001afc <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffca 	bl	80006d4 <lcd_write>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40020400 	.word	0x40020400

0800074c <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	3301      	adds	r3, #1
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	3201      	adds	r2, #1
 8000764:	fb02 f303 	mul.w	r3, r2, r3
 8000768:	2b4f      	cmp	r3, #79	@ 0x4f
 800076a:	dc10      	bgt.n	800078e <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	461a      	mov	r2, r3
 8000770:	0092      	lsls	r2, r2, #2
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	b2da      	uxtb	r2, r3
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4413      	add	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	b25b      	sxtb	r3, r3
 8000780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffb7 	bl	80006fc <lcd_command>
	}
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fd1e 	bl	80001e0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 80007a8:	e006      	b.n	80007b8 <lcd_print+0x22>
		lcd_data(*string++);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffb6 	bl	8000724 <lcd_data>
	while (size--){
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	60fa      	str	r2, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f3      	bne.n	80007aa <lcd_print+0x14>
	}
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80007cc:	b5b0      	push	{r4, r5, r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <lcd_println+0x6c>)
 80007da:	f107 0408 	add.w	r4, r7, #8
 80007de:	461d      	mov	r5, r3
 80007e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fcf9 	bl	80001e0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	2b10      	cmp	r3, #16
 80007f6:	dd0c      	ble.n	8000812 <lcd_println+0x46>
		size = 16;
 80007f8:	2310      	movs	r3, #16
 80007fa:	61fb      	str	r3, [r7, #28]

	while (size--){
 80007fc:	e009      	b.n	8000812 <lcd_println+0x46>
		line[size] = string[size];
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	7819      	ldrb	r1, [r3, #0]
 8000806:	f107 0208 	add.w	r2, r7, #8
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	4413      	add	r3, r2
 800080e:	460a      	mov	r2, r1
 8000810:	701a      	strb	r2, [r3, #0]
	while (size--){
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	61fa      	str	r2, [r7, #28]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f0      	bne.n	80007fe <lcd_println+0x32>
	}
	setCursor(0, row);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	4619      	mov	r1, r3
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff ff93 	bl	800074c <setCursor>
	lcd_print(line);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ffb3 	bl	8000796 <lcd_print>
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bdb0      	pop	{r4, r5, r7, pc}
 8000838:	08004d5c 	.word	0x08004d5c

0800083c <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff4c 	bl	80006fc <lcd_command>
	for (int i = 0; i<8; i++){
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e009      	b.n	800087e <writeCustomChar+0x42>
		lcd_data(map[i]);	
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff56 	bl	8000724 <lcd_data>
	for (int i = 0; i<8; i++){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	3301      	adds	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2b07      	cmp	r3, #7
 8000882:	ddf2      	ble.n	800086a <writeCustomChar+0x2e>
	}
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8000894:	490a      	ldr	r1, [pc, #40]	@ (80008c0 <loadCustomChars+0x30>)
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff ffd0 	bl	800083c <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 800089c:	4909      	ldr	r1, [pc, #36]	@ (80008c4 <loadCustomChars+0x34>)
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff ffcc 	bl	800083c <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80008a4:	4908      	ldr	r1, [pc, #32]	@ (80008c8 <loadCustomChars+0x38>)
 80008a6:	2003      	movs	r0, #3
 80008a8:	f7ff ffc8 	bl	800083c <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80008ac:	4907      	ldr	r1, [pc, #28]	@ (80008cc <loadCustomChars+0x3c>)
 80008ae:	2004      	movs	r0, #4
 80008b0:	f7ff ffc4 	bl	800083c <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80008b4:	4906      	ldr	r1, [pc, #24]	@ (80008d0 <loadCustomChars+0x40>)
 80008b6:	2005      	movs	r0, #5
 80008b8:	f7ff ffc0 	bl	800083c <writeCustomChar>
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000010 	.word	0x20000010
 80008cc:	20000018 	.word	0x20000018
 80008d0:	20000020 	.word	0x20000020

080008d4 <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80008d8:	2032      	movs	r0, #50	@ 0x32
 80008da:	f000 fdc3 	bl	8001464 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2104      	movs	r1, #4
 80008e2:	4824      	ldr	r0, [pc, #144]	@ (8000974 <lcd_initialize+0xa0>)
 80008e4:	f001 f90a 	bl	8001afc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2102      	movs	r1, #2
 80008ec:	4821      	ldr	r0, [pc, #132]	@ (8000974 <lcd_initialize+0xa0>)
 80008ee:	f001 f905 	bl	8001afc <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 80008f2:	f7ff fe45 	bl	8000580 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 80008f6:	2003      	movs	r0, #3
 80008f8:	f7ff feb0 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 80008fc:	2005      	movs	r0, #5
 80008fe:	f000 fdb1 	bl	8001464 <HAL_Delay>
	lcd_write4(0x03);
 8000902:	2003      	movs	r0, #3
 8000904:	f7ff feaa 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 8000908:	2005      	movs	r0, #5
 800090a:	f000 fdab 	bl	8001464 <HAL_Delay>
	lcd_write4(0x03);
 800090e:	2003      	movs	r0, #3
 8000910:	f7ff fea4 	bl	800065c <lcd_write4>
	HAL_Delay(5);
 8000914:	2005      	movs	r0, #5
 8000916:	f000 fda5 	bl	8001464 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fe9e 	bl	800065c <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8000920:	2028      	movs	r0, #40	@ 0x28
 8000922:	f7ff fed7 	bl	80006d4 <lcd_write>
	HAL_Delay(5);
 8000926:	2005      	movs	r0, #5
 8000928:	f000 fd9c 	bl	8001464 <HAL_Delay>
	lcd_write(0x08); //display off;
 800092c:	2008      	movs	r0, #8
 800092e:	f7ff fed1 	bl	80006d4 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fece 	bl	80006d4 <lcd_write>
	HAL_Delay(5);
 8000938:	2005      	movs	r0, #5
 800093a:	f000 fd93 	bl	8001464 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 800093e:	2006      	movs	r0, #6
 8000940:	f7ff fec8 	bl	80006d4 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	480b      	ldr	r0, [pc, #44]	@ (8000978 <lcd_initialize+0xa4>)
 800094a:	f001 f8d7 	bl	8001afc <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <lcd_initialize+0xa8>)
 8000950:	220c      	movs	r2, #12
 8000952:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <lcd_initialize+0xa8>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff febb 	bl	80006d4 <lcd_write>
	lcd_write(0x02); //go home
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff feb8 	bl	80006d4 <lcd_write>
	HAL_Delay(2);
 8000964:	2002      	movs	r0, #2
 8000966:	f000 fd7d 	bl	8001464 <HAL_Delay>
	loadCustomChars();
 800096a:	f7ff ff91 	bl	8000890 <loadCustomChars>

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020400 	.word	0x40020400
 8000978:	40020000 	.word	0x40020000
 800097c:	200000a0 	.word	0x200000a0

08000980 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <lcd_backlight_ON+0x14>)
 800098a:	f001 f8b7 	bl	8001afc <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40020000 	.word	0x40020000

08000998 <UART_IR_sendByte>:
uint8_t rx_char, IR_char;
char string[16], string2[16];
int i=0, rx_flag=0;
uint8_t BaudrateFlag=0;

void UART_IR_sendByte(char byte){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Base_Start_IT(&htim3);
 80009a2:	4829      	ldr	r0, [pc, #164]	@ (8000a48 <UART_IR_sendByte+0xb0>)
 80009a4:	f001 fdac 	bl	8002500 <HAL_TIM_Base_Start_IT>
	//start bit
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); 	//output to IR led, 38 kHz
 80009a8:	2108      	movs	r1, #8
 80009aa:	4828      	ldr	r0, [pc, #160]	@ (8000a4c <UART_IR_sendByte+0xb4>)
 80009ac:	f001 fe92 	bl	80026d4 <HAL_TIM_PWM_Start>
	BaudrateFlag=0;
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <UART_IR_sendByte+0xb8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	while(BaudrateFlag==0){
 80009b6:	bf00      	nop
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <UART_IR_sendByte+0xb8>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0fb      	beq.n	80009b8 <UART_IR_sendByte+0x20>
	}
	for(int bit=0; bit<8; bit++){
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e026      	b.n	8000a14 <UART_IR_sendByte+0x7c>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80009c6:	2108      	movs	r1, #8
 80009c8:	4820      	ldr	r0, [pc, #128]	@ (8000a4c <UART_IR_sendByte+0xb4>)
 80009ca:	f001 ff33 	bl	8002834 <HAL_TIM_PWM_Stop>
		if((byte & (0x01<<bit)) == 0) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	fa42 f303 	asr.w	r3, r2, r3
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <UART_IR_sendByte+0x4e>
 80009de:	2108      	movs	r1, #8
 80009e0:	481a      	ldr	r0, [pc, #104]	@ (8000a4c <UART_IR_sendByte+0xb4>)
 80009e2:	f001 fe77 	bl	80026d4 <HAL_TIM_PWM_Start>
		if((byte & (0x01<<bit)) == 1) HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	2101      	movs	r1, #1
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d103      	bne.n	80009fe <UART_IR_sendByte+0x66>
 80009f6:	2108      	movs	r1, #8
 80009f8:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <UART_IR_sendByte+0xb4>)
 80009fa:	f001 ff1b 	bl	8002834 <HAL_TIM_PWM_Stop>
		BaudrateFlag=0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <UART_IR_sendByte+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
		while(BaudrateFlag==0){
 8000a04:	bf00      	nop
 8000a06:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <UART_IR_sendByte+0xb8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0fb      	beq.n	8000a06 <UART_IR_sendByte+0x6e>
	for(int bit=0; bit<8; bit++){
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	ddd5      	ble.n	80009c6 <UART_IR_sendByte+0x2e>
		}
	}
	//stop bit
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <UART_IR_sendByte+0xb4>)
 8000a1e:	f001 ff09 	bl	8002834 <HAL_TIM_PWM_Stop>
	BaudrateFlag=0;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <UART_IR_sendByte+0xb8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	while(BaudrateFlag==0){
 8000a28:	bf00      	nop
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <UART_IR_sendByte+0xb8>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0fb      	beq.n	8000a2a <UART_IR_sendByte+0x92>
	}
	HAL_TIM_Base_Stop_IT(&htim3);
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <UART_IR_sendByte+0xb0>)
 8000a34:	f001 fdc6 	bl	80025c4 <HAL_TIM_Base_Stop_IT>
	BaudrateFlag=0;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <UART_IR_sendByte+0xb8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000ec 	.word	0x200000ec
 8000a4c:	200000a4 	.word	0x200000a4
 8000a50:	200001f0 	.word	0x200001f0

08000a54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d102      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x16>
		BaudrateFlag=1;
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200000ec 	.word	0x200000ec
 8000a7c:	200001f0 	.word	0x200001f0

08000a80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b08 <HAL_UART_RxCpltCallback+0x88>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d112      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0x36>
		HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	491e      	ldr	r1, [pc, #120]	@ (8000b0c <HAL_UART_RxCpltCallback+0x8c>)
 8000a94:	481c      	ldr	r0, [pc, #112]	@ (8000b08 <HAL_UART_RxCpltCallback+0x88>)
 8000a96:	f002 fd7d 	bl	8003594 <HAL_UART_Receive_IT>
		snprintf(string2, sizeof(string), "IR send: %c", rx_char);
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <HAL_UART_RxCpltCallback+0x8c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <HAL_UART_RxCpltCallback+0x90>)
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	481c      	ldr	r0, [pc, #112]	@ (8000b14 <HAL_UART_RxCpltCallback+0x94>)
 8000aa4:	f003 fc9a 	bl	80043dc <sniprintf>
		lcd_println(string2, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <HAL_UART_RxCpltCallback+0x94>)
 8000aac:	f7ff fe8e 	bl	80007cc <lcd_println>
		rx_flag=1;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <HAL_UART_RxCpltCallback+0x98>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
	}
	if(huart==&huart1){
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a18      	ldr	r2, [pc, #96]	@ (8000b1c <HAL_UART_RxCpltCallback+0x9c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d11f      	bne.n	8000afe <HAL_UART_RxCpltCallback+0x7e>
		HAL_UART_Receive_IT(&huart1, &IR_char, 1);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4917      	ldr	r1, [pc, #92]	@ (8000b20 <HAL_UART_RxCpltCallback+0xa0>)
 8000ac2:	4816      	ldr	r0, [pc, #88]	@ (8000b1c <HAL_UART_RxCpltCallback+0x9c>)
 8000ac4:	f002 fd66 	bl	8003594 <HAL_UART_Receive_IT>
		//second row reset if full to show up to 16 char received one by one
		if(i==16){
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_UART_RxCpltCallback+0xa4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b10      	cmp	r3, #16
 8000ace:	d107      	bne.n	8000ae0 <HAL_UART_RxCpltCallback+0x60>
			i=0;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_UART_RxCpltCallback+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
			memset(string, 0, sizeof(string));
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <HAL_UART_RxCpltCallback+0xa8>)
 8000adc:	f003 fcb2 	bl	8004444 <memset>
		}
		string[i]=IR_char;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_UART_RxCpltCallback+0xa4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <HAL_UART_RxCpltCallback+0xa0>)
 8000ae6:	7811      	ldrb	r1, [r2, #0]
 8000ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <HAL_UART_RxCpltCallback+0xa8>)
 8000aea:	54d1      	strb	r1, [r2, r3]
		lcd_println(string, 1);
 8000aec:	2101      	movs	r1, #1
 8000aee:	480e      	ldr	r0, [pc, #56]	@ (8000b28 <HAL_UART_RxCpltCallback+0xa8>)
 8000af0:	f7ff fe6c 	bl	80007cc <lcd_println>
		i++;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <HAL_UART_RxCpltCallback+0xa4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_UART_RxCpltCallback+0xa4>)
 8000afc:	6013      	str	r3, [r2, #0]
	}
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000017c 	.word	0x2000017c
 8000b0c:	200001c4 	.word	0x200001c4
 8000b10:	08004d70 	.word	0x08004d70
 8000b14:	200001d8 	.word	0x200001d8
 8000b18:	200001ec 	.word	0x200001ec
 8000b1c:	20000134 	.word	0x20000134
 8000b20:	200001c5 	.word	0x200001c5
 8000b24:	200001e8 	.word	0x200001e8
 8000b28:	200001c8 	.word	0x200001c8

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 fc26 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f83c 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f000 f9be 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b3c:	f000 f992 	bl	8000e64 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b40:	f000 f8a2 	bl	8000c88 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b44:	f000 f964 	bl	8000e10 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b48:	f000 f914 	bl	8000d74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 8000b4c:	f7ff fec2 	bl	80008d4 <lcd_initialize>
  lcd_backlight_ON ();
 8000b50:	f7ff ff16 	bl	8000980 <lcd_backlight_ON>
  lcd_println("waiting char", 0);
 8000b54:	2100      	movs	r1, #0
 8000b56:	480f      	ldr	r0, [pc, #60]	@ (8000b94 <main+0x68>)
 8000b58:	f7ff fe38 	bl	80007cc <lcd_println>
  lcd_println("from pc", 1);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <main+0x6c>)
 8000b60:	f7ff fe34 	bl	80007cc <lcd_println>
  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 8000b64:	2201      	movs	r2, #1
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <main+0x70>)
 8000b68:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <main+0x74>)
 8000b6a:	f002 fd13 	bl	8003594 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &IR_char, 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <main+0x78>)
 8000b72:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <main+0x7c>)
 8000b74:	f002 fd0e 	bl	8003594 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx_flag==1){
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <main+0x80>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d1fb      	bne.n	8000b78 <main+0x4c>
		  rx_flag=0;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <main+0x80>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
		  UART_IR_sendByte(rx_char);	//infrared sending routine
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <main+0x70>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff04 	bl	8000998 <UART_IR_sendByte>
	  if(rx_flag==1){
 8000b90:	e7f2      	b.n	8000b78 <main+0x4c>
 8000b92:	bf00      	nop
 8000b94:	08004d7c 	.word	0x08004d7c
 8000b98:	08004d8c 	.word	0x08004d8c
 8000b9c:	200001c4 	.word	0x200001c4
 8000ba0:	2000017c 	.word	0x2000017c
 8000ba4:	200001c5 	.word	0x200001c5
 8000ba8:	20000134 	.word	0x20000134
 8000bac:	200001ec 	.word	0x200001ec

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	@ 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	2230      	movs	r2, #48	@ 0x30
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fc40 	bl	8004444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	4b29      	ldr	r3, [pc, #164]	@ (8000c80 <SystemClock_Config+0xd0>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <SystemClock_Config+0xd0>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <SystemClock_Config+0xd0>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <SystemClock_Config+0xd4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfc:	4a21      	ldr	r2, [pc, #132]	@ (8000c84 <SystemClock_Config+0xd4>)
 8000bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <SystemClock_Config+0xd4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c10:	2302      	movs	r3, #2
 8000c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c18:	2310      	movs	r3, #16
 8000c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c24:	2310      	movs	r3, #16
 8000c26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c28:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c32:	2307      	movs	r3, #7
 8000c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 ff78 	bl	8001b30 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c46:	f000 f9ad 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2102      	movs	r1, #2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 f9da 	bl	8002020 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c72:	f000 f997 	bl	8000fa4 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	@ 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	@ 0x38
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000cba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2210;
 8000ccc:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000cce:	f640 02a2 	movw	r2, #2210	@ 0x8a2
 8000cd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b25      	ldr	r3, [pc, #148]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce0:	4823      	ldr	r0, [pc, #140]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000ce2:	f001 fbbd 	bl	8002460 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cec:	f000 f95a 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	481c      	ldr	r0, [pc, #112]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000cfe:	f001 ffaf 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d08:	f000 f94c 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d0c:	4818      	ldr	r0, [pc, #96]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000d0e:	f001 fc88 	bl	8002622 <HAL_TIM_PWM_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d18:	f000 f944 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4811      	ldr	r0, [pc, #68]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000d2c:	f002 fb60 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d36:	f000 f935 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3a:	2360      	movs	r3, #96	@ 0x60
 8000d3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1105;
 8000d3e:	f240 4351 	movw	r3, #1105	@ 0x451
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2208      	movs	r2, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000d54:	f001 fec2 	bl	8002adc <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d5e:	f000 f921 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <MX_TIM2_Init+0xe8>)
 8000d64:	f000 f988 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	@ 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000a4 	.word	0x200000a4

08000d74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000d92:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <MX_TIM3_Init+0x98>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000d98:	2253      	movs	r2, #83	@ 0x53
 8000d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 416-1;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000da4:	f240 129f 	movw	r2, #415	@ 0x19f
 8000da8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000db8:	f001 fb52 	bl	8002460 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000dc2:	f000 f8ef 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000dd4:	f001 ff44 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000dde:	f000 f8e1 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <MX_TIM3_Init+0x94>)
 8000df0:	f002 fafe 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000dfa:	f000 f8d3 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000ec 	.word	0x200000ec
 8000e0c:	40000400 	.word	0x40000400

08000e10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <MX_USART1_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000e20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_USART1_UART_Init+0x4c>)
 8000e48:	f002 fb54 	bl	80034f4 <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f000 f8a7 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000134 	.word	0x20000134
 8000e60:	40011000 	.word	0x40011000

08000e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <MX_USART2_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f002 fb2a 	bl	80034f4 <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f87d 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000017c 	.word	0x2000017c
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a30      	ldr	r2, [pc, #192]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a29      	ldr	r2, [pc, #164]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a22      	ldr	r2, [pc, #136]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_GPIO_Init+0xe0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2130      	movs	r1, #48	@ 0x30
 8000f42:	4816      	ldr	r0, [pc, #88]	@ (8000f9c <MX_GPIO_Init+0xe4>)
 8000f44:	f000 fdda 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <MX_GPIO_Init+0xe8>)
 8000f50:	f000 fdd4 	bl	8001afc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000f54:	2330      	movs	r3, #48	@ 0x30
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <MX_GPIO_Init+0xe4>)
 8000f6c:	f000 fc42 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f70:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000f74:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_GPIO_Init+0xe8>)
 8000f8a:	f000 fc33 	bl	80017f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	@ 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_MspInit+0x4c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fb2c 	bl	800164c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001010:	d10e      	bne.n	8001030 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <HAL_TIM_Base_MspInit+0x70>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a15      	ldr	r2, [pc, #84]	@ (8001070 <HAL_TIM_Base_MspInit+0x70>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <HAL_TIM_Base_MspInit+0x70>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800102e:	e01a      	b.n	8001066 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <HAL_TIM_Base_MspInit+0x74>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d115      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_TIM_Base_MspInit+0x70>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <HAL_TIM_Base_MspInit+0x70>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_Base_MspInit+0x70>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	201d      	movs	r0, #29
 800105c:	f000 fb01 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001060:	201d      	movs	r0, #29
 8001062:	f000 fb1a 	bl	800169a <HAL_NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40000400 	.word	0x40000400

08001078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001098:	d11e      	bne.n	80010d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <HAL_TIM_MspPostInit+0x68>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <HAL_TIM_MspPostInit+0x68>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_TIM_MspPostInit+0x68>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <HAL_TIM_MspPostInit+0x6c>)
 80010d4:	f000 fb8e 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020400 	.word	0x40020400

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a3a      	ldr	r2, [pc, #232]	@ (80011f0 <HAL_UART_MspInit+0x108>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d135      	bne.n	8001176 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	4a38      	ldr	r2, [pc, #224]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6453      	str	r3, [r2, #68]	@ 0x44
 800111a:	4b36      	ldr	r3, [pc, #216]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b32      	ldr	r3, [pc, #200]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a31      	ldr	r2, [pc, #196]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001142:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001154:	2307      	movs	r3, #7
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4826      	ldr	r0, [pc, #152]	@ (80011f8 <HAL_UART_MspInit+0x110>)
 8001160:	f000 fb48 	bl	80017f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2025      	movs	r0, #37	@ 0x25
 800116a:	f000 fa7a 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800116e:	2025      	movs	r0, #37	@ 0x25
 8001170:	f000 fa93 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001174:	e038      	b.n	80011e8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a20      	ldr	r2, [pc, #128]	@ (80011fc <HAL_UART_MspInit+0x114>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d133      	bne.n	80011e8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a1a      	ldr	r2, [pc, #104]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 800118a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_UART_MspInit+0x10c>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b8:	230c      	movs	r3, #12
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c8:	2307      	movs	r3, #7
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4809      	ldr	r0, [pc, #36]	@ (80011f8 <HAL_UART_MspInit+0x110>)
 80011d4:	f000 fb0e 	bl	80017f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2026      	movs	r0, #38	@ 0x26
 80011de:	f000 fa40 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e2:	2026      	movs	r0, #38	@ 0x26
 80011e4:	f000 fa59 	bl	800169a <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3730      	adds	r7, #48	@ 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40004400 	.word	0x40004400

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f8e5 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <TIM3_IRQHandler+0x10>)
 8001266:	f001 fb49 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000ec 	.word	0x200000ec

08001274 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <USART1_IRQHandler+0x10>)
 800127a:	f002 f9b1 	bl	80035e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000134 	.word	0x20000134

08001288 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <USART2_IRQHandler+0x10>)
 800128e:	f002 f9a7 	bl	80035e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000017c 	.word	0x2000017c

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f003 f8c2 	bl	8004454 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20018000 	.word	0x20018000
 80012fc:	00000400 	.word	0x00000400
 8001300:	200001f4 	.word	0x200001f4
 8001304:	20000348 	.word	0x20000348

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001330:	f7ff ffea 	bl	8001308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	@ (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	@ (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800135a:	f003 f881 	bl	8004460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff fbe5 	bl	8000b2c <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001364:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001370:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 8001374:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001378:	20000344 	.word	0x20000344

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <HAL_Init+0x40>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800138e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <HAL_Init+0x40>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <HAL_Init+0x40>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f94f 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fdfc 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f967 	bl	80016b6 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f92f 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000028 	.word	0x20000028
 800141c:	20000030 	.word	0x20000030
 8001420:	2000002c 	.word	0x2000002c

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000030 	.word	0x20000030
 8001448:	200001f8 	.word	0x200001f8

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	@ (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200001f8 	.word	0x200001f8

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000030 	.word	0x20000030

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	@ (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	@ (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	@ (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	@ 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	@ 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff29 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff3e 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff8e 	bl	80015a0 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff31 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff feb6 	bl	800144c <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d008      	beq.n	8001700 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2280      	movs	r2, #128	@ 0x80
 80016f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e052      	b.n	80017a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0216 	bic.w	r2, r2, #22
 800170e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800171e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d103      	bne.n	8001730 <HAL_DMA_Abort+0x62>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0208 	bic.w	r2, r2, #8
 800173e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001750:	e013      	b.n	800177a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001752:	f7ff fe7b 	bl	800144c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b05      	cmp	r3, #5
 800175e:	d90c      	bls.n	800177a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2220      	movs	r2, #32
 8001764:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e015      	b.n	80017a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e4      	bne.n	8001752 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178c:	223f      	movs	r2, #63	@ 0x3f
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d004      	beq.n	80017cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e00c      	b.n	80017e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2205      	movs	r2, #5
 80017d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e159      	b.n	8001ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8148 	bne.w	8001abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d005      	beq.n	8001846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	2b02      	cmp	r3, #2
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d017      	beq.n	80018e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d123      	bne.n	8001938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a2 	beq.w	8001abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b57      	ldr	r3, [pc, #348]	@ (8001adc <HAL_GPIO_Init+0x2e8>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a56      	ldr	r2, [pc, #344]	@ (8001adc <HAL_GPIO_Init+0x2e8>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b54      	ldr	r3, [pc, #336]	@ (8001adc <HAL_GPIO_Init+0x2e8>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001996:	4a52      	ldr	r2, [pc, #328]	@ (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a49      	ldr	r2, [pc, #292]	@ (8001ae4 <HAL_GPIO_Init+0x2f0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x202>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a48      	ldr	r2, [pc, #288]	@ (8001ae8 <HAL_GPIO_Init+0x2f4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x1fe>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a47      	ldr	r2, [pc, #284]	@ (8001aec <HAL_GPIO_Init+0x2f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x1fa>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a46      	ldr	r2, [pc, #280]	@ (8001af0 <HAL_GPIO_Init+0x2fc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x1f6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a45      	ldr	r2, [pc, #276]	@ (8001af4 <HAL_GPIO_Init+0x300>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x1f2>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	@ (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a24      	ldr	r2, [pc, #144]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8001af8 <HAL_GPIO_Init+0x304>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f aea2 	bls.w	8001810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e267      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d075      	beq.n	8001c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b4e:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d00c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5a:	4b85      	ldr	r3, [pc, #532]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d112      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b66:	4b82      	ldr	r3, [pc, #520]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b72:	d10b      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	4b7e      	ldr	r3, [pc, #504]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d05b      	beq.n	8001c38 <HAL_RCC_OscConfig+0x108>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d157      	bne.n	8001c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e242      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x74>
 8001b96:	4b76      	ldr	r3, [pc, #472]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a75      	ldr	r2, [pc, #468]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e01d      	b.n	8001be0 <HAL_RCC_OscConfig+0xb0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x98>
 8001bae:	4b70      	ldr	r3, [pc, #448]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6d      	ldr	r3, [pc, #436]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0xb0>
 8001bc8:	4b69      	ldr	r3, [pc, #420]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a68      	ldr	r2, [pc, #416]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a65      	ldr	r2, [pc, #404]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fc30 	bl	800144c <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fc2c 	bl	800144c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e207      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b5b      	ldr	r3, [pc, #364]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xc0>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fc1c 	bl	800144c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fc18 	bl	800144c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1f3      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	4b51      	ldr	r3, [pc, #324]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0xe8>
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d063      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c46:	4b4a      	ldr	r3, [pc, #296]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c52:	4b47      	ldr	r3, [pc, #284]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d11c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5e:	4b44      	ldr	r3, [pc, #272]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d116      	bne.n	8001c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x152>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e1c7      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4937      	ldr	r1, [pc, #220]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	e03a      	b.n	8001d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca0:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <HAL_RCC_OscConfig+0x244>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fbd1 	bl	800144c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff fbcd 	bl	800144c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e1a8      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4925      	ldr	r1, [pc, #148]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e015      	b.n	8001d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_RCC_OscConfig+0x244>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fbb0 	bl	800144c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fbac 	bl	800144c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e187      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d036      	beq.n	8001d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d016      	beq.n	8001d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_RCC_OscConfig+0x248>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fb90 	bl	800144c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fb8c 	bl	800144c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e167      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_OscConfig+0x240>)
 8001d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x200>
 8001d4e:	e01b      	b.n	8001d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_OscConfig+0x248>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb79 	bl	800144c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	e00e      	b.n	8001d7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fb75 	bl	800144c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d907      	bls.n	8001d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e150      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
 8001d70:	40023800 	.word	0x40023800
 8001d74:	42470000 	.word	0x42470000
 8001d78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	4b88      	ldr	r3, [pc, #544]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ea      	bne.n	8001d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8097 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b81      	ldr	r3, [pc, #516]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10f      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	4a7c      	ldr	r2, [pc, #496]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db6:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b77      	ldr	r3, [pc, #476]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b74      	ldr	r3, [pc, #464]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a73      	ldr	r2, [pc, #460]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb35 	bl	800144c <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff fb31 	bl	800144c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e10c      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa4 <HAL_RCC_OscConfig+0x474>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2ea>
 8001e0c:	4b64      	ldr	r3, [pc, #400]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e10:	4a63      	ldr	r2, [pc, #396]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e18:	e01c      	b.n	8001e54 <HAL_RCC_OscConfig+0x324>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x30c>
 8001e22:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0x324>
 8001e3c:	4b58      	ldr	r3, [pc, #352]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e40:	4a57      	ldr	r2, [pc, #348]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e48:	4b55      	ldr	r3, [pc, #340]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a54      	ldr	r2, [pc, #336]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 0304 	bic.w	r3, r3, #4
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d015      	beq.n	8001e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff faf6 	bl	800144c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7ff faf2 	bl	800144c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e0cb      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	4b49      	ldr	r3, [pc, #292]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0ee      	beq.n	8001e64 <HAL_RCC_OscConfig+0x334>
 8001e86:	e014      	b.n	8001eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fae0 	bl	800144c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff fadc 	bl	800144c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0b5      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ee      	bne.n	8001e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb8:	4b39      	ldr	r3, [pc, #228]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	4a38      	ldr	r2, [pc, #224]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a1 	beq.w	8002010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ece:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d05c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d141      	bne.n	8001f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <HAL_RCC_OscConfig+0x478>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fab0 	bl	800144c <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff faac 	bl	800144c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e087      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	019b      	lsls	r3, r3, #6
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	3b01      	subs	r3, #1
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	491b      	ldr	r1, [pc, #108]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_RCC_OscConfig+0x478>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa85 	bl	800144c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa81 	bl	800144c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e05c      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x416>
 8001f64:	e054      	b.n	8002010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_RCC_OscConfig+0x478>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fa6e 	bl	800144c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff fa6a 	bl	800144c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e045      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_RCC_OscConfig+0x470>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x444>
 8001f92:	e03d      	b.n	8002010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e038      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_RCC_OscConfig+0x4ec>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d028      	beq.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d121      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d11a      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d111      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0cc      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d90c      	bls.n	800205c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b65      	ldr	r3, [pc, #404]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a58      	ldr	r2, [pc, #352]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800207e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a52      	ldr	r2, [pc, #328]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d044      	beq.n	8002140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d119      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d003      	beq.n	80020de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b3f      	ldr	r3, [pc, #252]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e06f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e067      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4934      	ldr	r1, [pc, #208]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002110:	f7ff f99c 	bl	800144c <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff f998 	bl	800144c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e04f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2b      	ldr	r3, [pc, #172]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d20c      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f8fc 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023c00 	.word	0x40023c00
 80021dc:	40023800 	.word	0x40023800
 80021e0:	08004d94 	.word	0x08004d94
 80021e4:	20000028 	.word	0x20000028
 80021e8:	2000002c 	.word	0x2000002c

080021ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f0:	b094      	sub	sp, #80	@ 0x50
 80021f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002204:	4b79      	ldr	r3, [pc, #484]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d00d      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x40>
 8002210:	2b08      	cmp	r3, #8
 8002212:	f200 80e1 	bhi.w	80023d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x34>
 800221a:	2b04      	cmp	r3, #4
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x3a>
 800221e:	e0db      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002224:	e0db      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002226:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800222a:	e0d8      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800222c:	4b6f      	ldr	r3, [pc, #444]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002234:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002236:	4b6d      	ldr	r3, [pc, #436]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	2200      	movs	r2, #0
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800224c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800224e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002254:	633b      	str	r3, [r7, #48]	@ 0x30
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	@ 0x34
 800225a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800225e:	4622      	mov	r2, r4
 8002260:	462b      	mov	r3, r5
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f04f 0100 	mov.w	r1, #0
 800226a:	0159      	lsls	r1, r3, #5
 800226c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002270:	0150      	lsls	r0, r2, #5
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4621      	mov	r1, r4
 8002278:	1a51      	subs	r1, r2, r1
 800227a:	6139      	str	r1, [r7, #16]
 800227c:	4629      	mov	r1, r5
 800227e:	eb63 0301 	sbc.w	r3, r3, r1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002290:	4659      	mov	r1, fp
 8002292:	018b      	lsls	r3, r1, #6
 8002294:	4651      	mov	r1, sl
 8002296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800229a:	4651      	mov	r1, sl
 800229c:	018a      	lsls	r2, r1, #6
 800229e:	4651      	mov	r1, sl
 80022a0:	ebb2 0801 	subs.w	r8, r2, r1
 80022a4:	4659      	mov	r1, fp
 80022a6:	eb63 0901 	sbc.w	r9, r3, r1
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022be:	4690      	mov	r8, r2
 80022c0:	4699      	mov	r9, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	eb18 0303 	adds.w	r3, r8, r3
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	462b      	mov	r3, r5
 80022cc:	eb49 0303 	adc.w	r3, r9, r3
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022de:	4629      	mov	r1, r5
 80022e0:	024b      	lsls	r3, r1, #9
 80022e2:	4621      	mov	r1, r4
 80022e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e8:	4621      	mov	r1, r4
 80022ea:	024a      	lsls	r2, r1, #9
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f2:	2200      	movs	r2, #0
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022fc:	f7fd ffc8 	bl	8000290 <__aeabi_uldivmod>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4613      	mov	r3, r2
 8002306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002308:	e058      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	4b38      	ldr	r3, [pc, #224]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	2200      	movs	r2, #0
 8002312:	4618      	mov	r0, r3
 8002314:	4611      	mov	r1, r2
 8002316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002324:	4642      	mov	r2, r8
 8002326:	464b      	mov	r3, r9
 8002328:	f04f 0000 	mov.w	r0, #0
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	0159      	lsls	r1, r3, #5
 8002332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002336:	0150      	lsls	r0, r2, #5
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4641      	mov	r1, r8
 800233e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002342:	4649      	mov	r1, r9
 8002344:	eb63 0b01 	sbc.w	fp, r3, r1
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800235c:	ebb2 040a 	subs.w	r4, r2, sl
 8002360:	eb63 050b 	sbc.w	r5, r3, fp
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	00eb      	lsls	r3, r5, #3
 800236e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002372:	00e2      	lsls	r2, r4, #3
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
 8002378:	4643      	mov	r3, r8
 800237a:	18e3      	adds	r3, r4, r3
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	464b      	mov	r3, r9
 8002380:	eb45 0303 	adc.w	r3, r5, r3
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4629      	mov	r1, r5
 8002394:	028b      	lsls	r3, r1, #10
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800239c:	4621      	mov	r1, r4
 800239e:	028a      	lsls	r2, r1, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a6:	2200      	movs	r2, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	61fa      	str	r2, [r7, #28]
 80023ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b0:	f7fd ff6e 	bl	8000290 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x200>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3750      	adds	r7, #80	@ 0x50
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000028 	.word	0x20000028

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	@ (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08004da4 	.word	0x08004da4

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	@ (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08004da4 	.word	0x08004da4

08002460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e041      	b.n	80024f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fdba 	bl	8001000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 fcce 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d001      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e044      	b.n	80025a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1e      	ldr	r2, [pc, #120]	@ (80025b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002542:	d013      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1a      	ldr	r2, [pc, #104]	@ (80025b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <HAL_TIM_Base_Start_IT+0xbc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x6c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d010      	beq.n	80025a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	e007      	b.n	80025a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	40014000 	.word	0x40014000

080025c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <HAL_TIM_Base_Stop_IT+0x48>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_TIM_Base_Stop_IT+0x48>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e041      	b.n	80026b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f839 	bl	80026c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4610      	mov	r0, r2
 8002662:	f000 fbed 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_TIM_PWM_Start+0x24>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e022      	b.n	800273e <HAL_TIM_PWM_Start+0x6a>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d109      	bne.n	8002712 <HAL_TIM_PWM_Start+0x3e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e015      	b.n	800273e <HAL_TIM_PWM_Start+0x6a>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d109      	bne.n	800272c <HAL_TIM_PWM_Start+0x58>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e008      	b.n	800273e <HAL_TIM_PWM_Start+0x6a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e068      	b.n	8002818 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_TIM_PWM_Start+0x82>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002754:	e013      	b.n	800277e <HAL_TIM_PWM_Start+0xaa>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d104      	bne.n	8002766 <HAL_TIM_PWM_Start+0x92>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002764:	e00b      	b.n	800277e <HAL_TIM_PWM_Start+0xaa>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Start+0xa2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002774:	e003      	b.n	800277e <HAL_TIM_PWM_Start+0xaa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fe0c 	bl	80033a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <HAL_TIM_PWM_Start+0x14c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <HAL_TIM_PWM_Start+0x14c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d018      	beq.n	80027e2 <HAL_TIM_PWM_Start+0x10e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b8:	d013      	beq.n	80027e2 <HAL_TIM_PWM_Start+0x10e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_TIM_PWM_Start+0x150>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00e      	beq.n	80027e2 <HAL_TIM_PWM_Start+0x10e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <HAL_TIM_PWM_Start+0x154>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d009      	beq.n	80027e2 <HAL_TIM_PWM_Start+0x10e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a16      	ldr	r2, [pc, #88]	@ (800282c <HAL_TIM_PWM_Start+0x158>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_TIM_PWM_Start+0x10e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <HAL_TIM_PWM_Start+0x15c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d111      	bne.n	8002806 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b06      	cmp	r3, #6
 80027f2:	d010      	beq.n	8002816 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002804:	e007      	b.n	8002816 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40010000 	.word	0x40010000
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00
 8002830:	40014000 	.word	0x40014000

08002834 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2200      	movs	r2, #0
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fdac 	bl	80033a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a29      	ldr	r2, [pc, #164]	@ (80028f8 <HAL_TIM_PWM_Stop+0xc4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d117      	bne.n	8002886 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_TIM_PWM_Stop+0x52>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_TIM_PWM_Stop+0x52>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a1a      	ldr	r2, [r3, #32]
 800288c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_TIM_PWM_Stop+0x82>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	f240 4344 	movw	r3, #1092	@ 0x444
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_TIM_PWM_Stop+0x82>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_PWM_Stop+0x92>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028c4:	e013      	b.n	80028ee <HAL_TIM_PWM_Stop+0xba>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_PWM_Stop+0xa2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d4:	e00b      	b.n	80028ee <HAL_TIM_PWM_Stop+0xba>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_PWM_Stop+0xb2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e4:	e003      	b.n	80028ee <HAL_TIM_PWM_Stop+0xba>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40010000 	.word	0x40010000

080028fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0202 	mvn.w	r2, #2
 8002930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa5b 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa4d 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fa5e 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0204 	mvn.w	r2, #4
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa35 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa27 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa38 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0208 	mvn.w	r2, #8
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa0f 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa01 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fa12 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0210 	mvn.w	r2, #16
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9e9 	bl	8002e02 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9db 	bl	8002dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9ec 	bl	8002e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0201 	mvn.w	r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd fff6 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fd2a 	bl	80034e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9bd 	bl	8002e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0220 	mvn.w	r2, #32
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fcfc 	bl	80034cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0ae      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	f200 809f 	bhi.w	8002c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002c49 	.word	0x08002c49
 8002b18:	08002c49 	.word	0x08002c49
 8002b1c:	08002c49 	.word	0x08002c49
 8002b20:	08002b85 	.word	0x08002b85
 8002b24:	08002c49 	.word	0x08002c49
 8002b28:	08002c49 	.word	0x08002c49
 8002b2c:	08002c49 	.word	0x08002c49
 8002b30:	08002bc7 	.word	0x08002bc7
 8002b34:	08002c49 	.word	0x08002c49
 8002b38:	08002c49 	.word	0x08002c49
 8002b3c:	08002c49 	.word	0x08002c49
 8002b40:	08002c07 	.word	0x08002c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fa04 	bl	8002f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6999      	ldr	r1, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	619a      	str	r2, [r3, #24]
      break;
 8002b82:	e064      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fa4a 	bl	8003024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	619a      	str	r2, [r3, #24]
      break;
 8002bc4:	e043      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fa95 	bl	80030fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0208 	orr.w	r2, r2, #8
 8002be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0204 	bic.w	r2, r2, #4
 8002bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69d9      	ldr	r1, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	61da      	str	r2, [r3, #28]
      break;
 8002c04:	e023      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fadf 	bl	80031d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	021a      	lsls	r2, r3, #8
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	61da      	str	r2, [r3, #28]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_TIM_ConfigClockSource+0x1c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0b4      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x186>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cb4:	d03e      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0xd4>
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cba:	f200 8087 	bhi.w	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc2:	f000 8086 	beq.w	8002dd2 <HAL_TIM_ConfigClockSource+0x172>
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cca:	d87f      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b70      	cmp	r3, #112	@ 0x70
 8002cce:	d01a      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0xa6>
 8002cd0:	2b70      	cmp	r3, #112	@ 0x70
 8002cd2:	d87b      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b60      	cmp	r3, #96	@ 0x60
 8002cd6:	d050      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x11a>
 8002cd8:	2b60      	cmp	r3, #96	@ 0x60
 8002cda:	d877      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b50      	cmp	r3, #80	@ 0x50
 8002cde:	d03c      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0xfa>
 8002ce0:	2b50      	cmp	r3, #80	@ 0x50
 8002ce2:	d873      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d058      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x13a>
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d86f      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b30      	cmp	r3, #48	@ 0x30
 8002cee:	d064      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002cf0:	2b30      	cmp	r3, #48	@ 0x30
 8002cf2:	d86b      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d060      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d867      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d05c      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d05a      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x15a>
 8002d04:	e062      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	f000 fb25 	bl	8003364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	609a      	str	r2, [r3, #8]
      break;
 8002d32:	e04f      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	f000 fb0e 	bl	8003364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d56:	609a      	str	r2, [r3, #8]
      break;
 8002d58:	e03c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	461a      	mov	r2, r3
 8002d68:	f000 fa82 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2150      	movs	r1, #80	@ 0x50
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fadb 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002d78:	e02c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d86:	461a      	mov	r2, r3
 8002d88:	f000 faa1 	bl	80032ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2160      	movs	r1, #96	@ 0x60
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 facb 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002d98:	e01c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 fa62 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2140      	movs	r1, #64	@ 0x40
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fabb 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002db8:	e00c      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f000 fab2 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002dca:	e003      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3a      	ldr	r2, [pc, #232]	@ (8002f3c <TIM_Base_SetConfig+0xfc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00f      	beq.n	8002e78 <TIM_Base_SetConfig+0x38>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5e:	d00b      	beq.n	8002e78 <TIM_Base_SetConfig+0x38>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a37      	ldr	r2, [pc, #220]	@ (8002f40 <TIM_Base_SetConfig+0x100>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <TIM_Base_SetConfig+0x38>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a36      	ldr	r2, [pc, #216]	@ (8002f44 <TIM_Base_SetConfig+0x104>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_Base_SetConfig+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a35      	ldr	r2, [pc, #212]	@ (8002f48 <TIM_Base_SetConfig+0x108>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d108      	bne.n	8002e8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <TIM_Base_SetConfig+0xfc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01b      	beq.n	8002eca <TIM_Base_SetConfig+0x8a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e98:	d017      	beq.n	8002eca <TIM_Base_SetConfig+0x8a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a28      	ldr	r2, [pc, #160]	@ (8002f40 <TIM_Base_SetConfig+0x100>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <TIM_Base_SetConfig+0x8a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	@ (8002f44 <TIM_Base_SetConfig+0x104>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00f      	beq.n	8002eca <TIM_Base_SetConfig+0x8a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a26      	ldr	r2, [pc, #152]	@ (8002f48 <TIM_Base_SetConfig+0x108>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <TIM_Base_SetConfig+0x8a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a25      	ldr	r2, [pc, #148]	@ (8002f4c <TIM_Base_SetConfig+0x10c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <TIM_Base_SetConfig+0x8a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <TIM_Base_SetConfig+0x110>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_Base_SetConfig+0x8a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	@ (8002f54 <TIM_Base_SetConfig+0x114>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0e      	ldr	r2, [pc, #56]	@ (8002f3c <TIM_Base_SetConfig+0xfc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d103      	bne.n	8002f10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f023 0201 	bic.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	611a      	str	r2, [r3, #16]
  }
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40014400 	.word	0x40014400
 8002f54:	40014800 	.word	0x40014800

08002f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f023 0201 	bic.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f023 0302 	bic.w	r3, r3, #2
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a1c      	ldr	r2, [pc, #112]	@ (8003020 <TIM_OC1_SetConfig+0xc8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10c      	bne.n	8002fce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0308 	bic.w	r3, r3, #8
 8002fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f023 0304 	bic.w	r3, r3, #4
 8002fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <TIM_OC1_SetConfig+0xc8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d111      	bne.n	8002ffa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	621a      	str	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40010000 	.word	0x40010000

08003024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 0210 	bic.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f023 0320 	bic.w	r3, r3, #32
 800306e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <TIM_OC2_SetConfig+0xd4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10d      	bne.n	80030a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800308a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800309e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a15      	ldr	r2, [pc, #84]	@ (80030f8 <TIM_OC2_SetConfig+0xd4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d113      	bne.n	80030d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000

080030fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <TIM_OC3_SetConfig+0xd0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10d      	bne.n	8003176 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a14      	ldr	r2, [pc, #80]	@ (80031cc <TIM_OC3_SetConfig+0xd0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d113      	bne.n	80031a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	621a      	str	r2, [r3, #32]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40010000 	.word	0x40010000

080031d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800321a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	031b      	lsls	r3, r3, #12
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a10      	ldr	r2, [pc, #64]	@ (800326c <TIM_OC4_SetConfig+0x9c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d109      	bne.n	8003244 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000

08003270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800329a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 030a 	bic.w	r3, r3, #10
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 0210 	bic.w	r2, r3, #16
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800330a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	f043 0307 	orr.w	r3, r3, #7
 8003350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800337e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	431a      	orrs	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2201      	movs	r2, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003404:	2302      	movs	r3, #2
 8003406:	e050      	b.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1c      	ldr	r2, [pc, #112]	@ (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003454:	d013      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a15      	ldr	r2, [pc, #84]	@ (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a13      	ldr	r2, [pc, #76]	@ (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10c      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4313      	orrs	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40014000 	.word	0x40014000

080034cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e042      	b.n	800358c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fde4 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	@ 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fcdb 	bl	8003ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800354c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800355c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800356c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d112      	bne.n	80035d4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_UART_Receive_IT+0x26>
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00b      	b.n	80035d6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 faba 	bl	8003b44 <UART_Start_Receive_IT>
 80035d0:	4603      	mov	r3, r0
 80035d2:	e000      	b.n	80035d6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0ba      	sub	sp, #232	@ 0xe8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800361e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_UART_IRQHandler+0x66>
 8003632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fb99 	bl	8003d76 <UART_Receive_IT>
      return;
 8003644:	e25b      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80de 	beq.w	800380c <HAL_UART_IRQHandler+0x22c>
 8003650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800365c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003660:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80d1 	beq.w	800380c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_UART_IRQHandler+0xae>
 8003676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_UART_IRQHandler+0xd2>
 800369a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_UART_IRQHandler+0xf6>
 80036be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f043 0204 	orr.w	r2, r3, #4
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d011      	beq.n	8003706 <HAL_UART_IRQHandler+0x126>
 80036e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 81f2 	beq.w	8003af4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_UART_IRQHandler+0x14e>
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fb24 	bl	8003d76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <HAL_UART_IRQHandler+0x17a>
 8003752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04f      	beq.n	80037fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa2c 	bl	8003bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376a:	2b40      	cmp	r3, #64	@ 0x40
 800376c:	d141      	bne.n	80037f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3314      	adds	r3, #20
 8003774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800378c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800379a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800379e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1d9      	bne.n	800376e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d013      	beq.n	80037ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c6:	4a7e      	ldr	r2, [pc, #504]	@ (80039c0 <HAL_UART_IRQHandler+0x3e0>)
 80037c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd ffed 	bl	80017ae <HAL_DMA_Abort_IT>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037e4:	4610      	mov	r0, r2
 80037e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	e00e      	b.n	8003808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f994 	bl	8003b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e00a      	b.n	8003808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f990 	bl	8003b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	e006      	b.n	8003808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f98c 	bl	8003b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003806:	e175      	b.n	8003af4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	bf00      	nop
    return;
 800380a:	e173      	b.n	8003af4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 814f 	bne.w	8003ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8148 	beq.w	8003ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8141 	beq.w	8003ab4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003852:	2b40      	cmp	r3, #64	@ 0x40
 8003854:	f040 80b6 	bne.w	80039c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8145 	beq.w	8003af8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003876:	429a      	cmp	r2, r3
 8003878:	f080 813e 	bcs.w	8003af8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003882:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388e:	f000 8088 	beq.w	80039a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1d9      	bne.n	8003892 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003902:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800390a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e1      	bne.n	80038de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800392a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800392c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800393e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800394c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e3      	bne.n	800391a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003984:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003986:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800398a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e3      	bne.n	8003960 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd fe96 	bl	80016ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8b7 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039be:	e09b      	b.n	8003af8 <HAL_UART_IRQHandler+0x518>
 80039c0:	08003c7f 	.word	0x08003c7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 808e 	beq.w	8003afc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8089 	beq.w	8003afc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e3      	bne.n	80039ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	623b      	str	r3, [r7, #32]
   return(result);
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e3      	bne.n	8003a22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0310 	bic.w	r3, r3, #16
 8003a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a8c:	61fa      	str	r2, [r7, #28]
 8003a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	617b      	str	r3, [r7, #20]
   return(result);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e3      	bne.n	8003a68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f83d 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ab2:	e023      	b.n	8003afc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x4f4>
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8ea 	bl	8003ca6 <UART_Transmit_IT>
    return;
 8003ad2:	e014      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <HAL_UART_IRQHandler+0x51e>
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f92a 	bl	8003d46 <UART_EndTransmit_IT>
    return;
 8003af2:	e004      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
    return;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
      return;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
      return;
 8003afc:	bf00      	nop
  }
}
 8003afe:	37e8      	adds	r7, #232	@ 0xe8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2222      	movs	r2, #34	@ 0x22
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b095      	sub	sp, #84	@ 0x54
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d119      	bne.n	8003c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 0310 	bic.w	r3, r3, #16
 8003c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c50:	61ba      	str	r2, [r7, #24]
 8003c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c72:	bf00      	nop
 8003c74:	3754      	adds	r7, #84	@ 0x54
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff ff3d 	bl	8003b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b21      	cmp	r3, #33	@ 0x21
 8003cb8:	d13e      	bne.n	8003d38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc2:	d114      	bne.n	8003cee <UART_Transmit_IT+0x48>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d110      	bne.n	8003cee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]
 8003cec:	e008      	b.n	8003d00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6211      	str	r1, [r2, #32]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fecc 	bl	8003b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b08c      	sub	sp, #48	@ 0x30
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b22      	cmp	r3, #34	@ 0x22
 8003d88:	f040 80ae 	bne.w	8003ee8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d94:	d117      	bne.n	8003dc6 <UART_Receive_IT+0x50>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dc4:	e026      	b.n	8003e14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd8:	d007      	beq.n	8003dea <UART_Receive_IT+0x74>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <UART_Receive_IT+0x82>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e008      	b.n	8003e0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4619      	mov	r1, r3
 8003e22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d15d      	bne.n	8003ee4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0220 	bic.w	r2, r2, #32
 8003e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d135      	bne.n	8003eda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	613b      	str	r3, [r7, #16]
   return(result);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e94:	623a      	str	r2, [r7, #32]
 8003e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	69f9      	ldr	r1, [r7, #28]
 8003e9a:	6a3a      	ldr	r2, [r7, #32]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d10a      	bne.n	8003ecc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fe2a 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
 8003ed8:	e002      	b.n	8003ee0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc fdd0 	bl	8000a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e002      	b.n	8003eea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3730      	adds	r7, #48	@ 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef8:	b0c0      	sub	sp, #256	@ 0x100
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	68d9      	ldr	r1, [r3, #12]
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	ea40 0301 	orr.w	r3, r0, r1
 8003f1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f4c:	f021 010c 	bic.w	r1, r1, #12
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	6999      	ldr	r1, [r3, #24]
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	ea40 0301 	orr.w	r3, r0, r1
 8003f7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b8f      	ldr	r3, [pc, #572]	@ (80041c0 <UART_SetConfig+0x2cc>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d005      	beq.n	8003f94 <UART_SetConfig+0xa0>
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80041c4 <UART_SetConfig+0x2d0>)
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d104      	bne.n	8003f9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7fe fa50 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003f98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f9c:	e003      	b.n	8003fa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f9e:	f7fe fa37 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003fa2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb0:	f040 810c 	bne.w	80041cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	462b      	mov	r3, r5
 8003fca:	1891      	adds	r1, r2, r2
 8003fcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fce:	415b      	adcs	r3, r3
 8003fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	eb12 0801 	adds.w	r8, r2, r1
 8003fdc:	4629      	mov	r1, r5
 8003fde:	eb43 0901 	adc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004004:	462b      	mov	r3, r5
 8004006:	eb49 0303 	adc.w	r3, r9, r3
 800400a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800401a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800401e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004022:	460b      	mov	r3, r1
 8004024:	18db      	adds	r3, r3, r3
 8004026:	653b      	str	r3, [r7, #80]	@ 0x50
 8004028:	4613      	mov	r3, r2
 800402a:	eb42 0303 	adc.w	r3, r2, r3
 800402e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004038:	f7fc f92a 	bl	8000290 <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4b61      	ldr	r3, [pc, #388]	@ (80041c8 <UART_SetConfig+0x2d4>)
 8004042:	fba3 2302 	umull	r2, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	011c      	lsls	r4, r3, #4
 800404a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404e:	2200      	movs	r2, #0
 8004050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004054:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	1891      	adds	r1, r2, r2
 8004062:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004064:	415b      	adcs	r3, r3
 8004066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800406c:	4641      	mov	r1, r8
 800406e:	eb12 0a01 	adds.w	sl, r2, r1
 8004072:	4649      	mov	r1, r9
 8004074:	eb43 0b01 	adc.w	fp, r3, r1
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408c:	4692      	mov	sl, r2
 800408e:	469b      	mov	fp, r3
 8004090:	4643      	mov	r3, r8
 8004092:	eb1a 0303 	adds.w	r3, sl, r3
 8004096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800409a:	464b      	mov	r3, r9
 800409c:	eb4b 0303 	adc.w	r3, fp, r3
 80040a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040b8:	460b      	mov	r3, r1
 80040ba:	18db      	adds	r3, r3, r3
 80040bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80040be:	4613      	mov	r3, r2
 80040c0:	eb42 0303 	adc.w	r3, r2, r3
 80040c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040ce:	f7fc f8df 	bl	8000290 <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <UART_SetConfig+0x2d4>)
 80040da:	fba3 2301 	umull	r2, r3, r3, r1
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2264      	movs	r2, #100	@ 0x64
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	1acb      	subs	r3, r1, r3
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040ee:	4b36      	ldr	r3, [pc, #216]	@ (80041c8 <UART_SetConfig+0x2d4>)
 80040f0:	fba3 2302 	umull	r2, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040fc:	441c      	add	r4, r3
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004108:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800410c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004118:	415b      	adcs	r3, r3
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004120:	4641      	mov	r1, r8
 8004122:	1851      	adds	r1, r2, r1
 8004124:	6339      	str	r1, [r7, #48]	@ 0x30
 8004126:	4649      	mov	r1, r9
 8004128:	414b      	adcs	r3, r1
 800412a:	637b      	str	r3, [r7, #52]	@ 0x34
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004138:	4659      	mov	r1, fp
 800413a:	00cb      	lsls	r3, r1, #3
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004142:	4651      	mov	r1, sl
 8004144:	00ca      	lsls	r2, r1, #3
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4603      	mov	r3, r0
 800414c:	4642      	mov	r2, r8
 800414e:	189b      	adds	r3, r3, r2
 8004150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004154:	464b      	mov	r3, r9
 8004156:	460a      	mov	r2, r1
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800416c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004174:	460b      	mov	r3, r1
 8004176:	18db      	adds	r3, r3, r3
 8004178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800417a:	4613      	mov	r3, r2
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800418a:	f7fc f881 	bl	8000290 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <UART_SetConfig+0x2d4>)
 8004194:	fba3 1302 	umull	r1, r3, r3, r2
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	2164      	movs	r1, #100	@ 0x64
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	3332      	adds	r3, #50	@ 0x32
 80041a6:	4a08      	ldr	r2, [pc, #32]	@ (80041c8 <UART_SetConfig+0x2d4>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	f003 0207 	and.w	r2, r3, #7
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4422      	add	r2, r4
 80041ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041bc:	e106      	b.n	80043cc <UART_SetConfig+0x4d8>
 80041be:	bf00      	nop
 80041c0:	40011000 	.word	0x40011000
 80041c4:	40011400 	.word	0x40011400
 80041c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041de:	4642      	mov	r2, r8
 80041e0:	464b      	mov	r3, r9
 80041e2:	1891      	adds	r1, r2, r2
 80041e4:	6239      	str	r1, [r7, #32]
 80041e6:	415b      	adcs	r3, r3
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ee:	4641      	mov	r1, r8
 80041f0:	1854      	adds	r4, r2, r1
 80041f2:	4649      	mov	r1, r9
 80041f4:	eb43 0501 	adc.w	r5, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	00eb      	lsls	r3, r5, #3
 8004202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	4643      	mov	r3, r8
 800420e:	18e3      	adds	r3, r4, r3
 8004210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004214:	464b      	mov	r3, r9
 8004216:	eb45 0303 	adc.w	r3, r5, r3
 800421a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800422a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800423a:	4629      	mov	r1, r5
 800423c:	008b      	lsls	r3, r1, #2
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004244:	4621      	mov	r1, r4
 8004246:	008a      	lsls	r2, r1, #2
 8004248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800424c:	f7fc f820 	bl	8000290 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4b60      	ldr	r3, [pc, #384]	@ (80043d8 <UART_SetConfig+0x4e4>)
 8004256:	fba3 2302 	umull	r2, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	011c      	lsls	r4, r3, #4
 800425e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004268:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800426c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004270:	4642      	mov	r2, r8
 8004272:	464b      	mov	r3, r9
 8004274:	1891      	adds	r1, r2, r2
 8004276:	61b9      	str	r1, [r7, #24]
 8004278:	415b      	adcs	r3, r3
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004280:	4641      	mov	r1, r8
 8004282:	1851      	adds	r1, r2, r1
 8004284:	6139      	str	r1, [r7, #16]
 8004286:	4649      	mov	r1, r9
 8004288:	414b      	adcs	r3, r1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004298:	4659      	mov	r1, fp
 800429a:	00cb      	lsls	r3, r1, #3
 800429c:	4651      	mov	r1, sl
 800429e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a2:	4651      	mov	r1, sl
 80042a4:	00ca      	lsls	r2, r1, #3
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	4642      	mov	r2, r8
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042b4:	464b      	mov	r3, r9
 80042b6:	460a      	mov	r2, r1
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042d8:	4649      	mov	r1, r9
 80042da:	008b      	lsls	r3, r1, #2
 80042dc:	4641      	mov	r1, r8
 80042de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e2:	4641      	mov	r1, r8
 80042e4:	008a      	lsls	r2, r1, #2
 80042e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042ea:	f7fb ffd1 	bl	8000290 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	4b38      	ldr	r3, [pc, #224]	@ (80043d8 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2301 	umull	r2, r3, r3, r1
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2264      	movs	r2, #100	@ 0x64
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	1acb      	subs	r3, r1, r3
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	3332      	adds	r3, #50	@ 0x32
 8004308:	4a33      	ldr	r2, [pc, #204]	@ (80043d8 <UART_SetConfig+0x4e4>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004314:	441c      	add	r4, r3
 8004316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800431a:	2200      	movs	r2, #0
 800431c:	673b      	str	r3, [r7, #112]	@ 0x70
 800431e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	415b      	adcs	r3, r3
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004334:	4641      	mov	r1, r8
 8004336:	1851      	adds	r1, r2, r1
 8004338:	6039      	str	r1, [r7, #0]
 800433a:	4649      	mov	r1, r9
 800433c:	414b      	adcs	r3, r1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800434c:	4659      	mov	r1, fp
 800434e:	00cb      	lsls	r3, r1, #3
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004356:	4651      	mov	r1, sl
 8004358:	00ca      	lsls	r2, r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4603      	mov	r3, r0
 8004360:	4642      	mov	r2, r8
 8004362:	189b      	adds	r3, r3, r2
 8004364:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004366:	464b      	mov	r3, r9
 8004368:	460a      	mov	r2, r1
 800436a:	eb42 0303 	adc.w	r3, r2, r3
 800436e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60
 800437a:	667a      	str	r2, [r7, #100]	@ 0x64
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004388:	4649      	mov	r1, r9
 800438a:	008b      	lsls	r3, r1, #2
 800438c:	4641      	mov	r1, r8
 800438e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004392:	4641      	mov	r1, r8
 8004394:	008a      	lsls	r2, r1, #2
 8004396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800439a:	f7fb ff79 	bl	8000290 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <UART_SetConfig+0x4e4>)
 80043a4:	fba3 1302 	umull	r1, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	2164      	movs	r1, #100	@ 0x64
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	3332      	adds	r3, #50	@ 0x32
 80043b6:	4a08      	ldr	r2, [pc, #32]	@ (80043d8 <UART_SetConfig+0x4e4>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4422      	add	r2, r4
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043d2:	46bd      	mov	sp, r7
 80043d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d8:	51eb851f 	.word	0x51eb851f

080043dc <sniprintf>:
 80043dc:	b40c      	push	{r2, r3}
 80043de:	b530      	push	{r4, r5, lr}
 80043e0:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <sniprintf+0x64>)
 80043e2:	1e0c      	subs	r4, r1, #0
 80043e4:	681d      	ldr	r5, [r3, #0]
 80043e6:	b09d      	sub	sp, #116	@ 0x74
 80043e8:	da08      	bge.n	80043fc <sniprintf+0x20>
 80043ea:	238b      	movs	r3, #139	@ 0x8b
 80043ec:	602b      	str	r3, [r5, #0]
 80043ee:	f04f 30ff 	mov.w	r0, #4294967295
 80043f2:	b01d      	add	sp, #116	@ 0x74
 80043f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043f8:	b002      	add	sp, #8
 80043fa:	4770      	bx	lr
 80043fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004400:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004404:	bf14      	ite	ne
 8004406:	f104 33ff 	addne.w	r3, r4, #4294967295
 800440a:	4623      	moveq	r3, r4
 800440c:	9304      	str	r3, [sp, #16]
 800440e:	9307      	str	r3, [sp, #28]
 8004410:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004414:	9002      	str	r0, [sp, #8]
 8004416:	9006      	str	r0, [sp, #24]
 8004418:	f8ad 3016 	strh.w	r3, [sp, #22]
 800441c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800441e:	ab21      	add	r3, sp, #132	@ 0x84
 8004420:	a902      	add	r1, sp, #8
 8004422:	4628      	mov	r0, r5
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	f000 f995 	bl	8004754 <_svfiprintf_r>
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	bfbc      	itt	lt
 800442e:	238b      	movlt	r3, #139	@ 0x8b
 8004430:	602b      	strlt	r3, [r5, #0]
 8004432:	2c00      	cmp	r4, #0
 8004434:	d0dd      	beq.n	80043f2 <sniprintf+0x16>
 8004436:	9b02      	ldr	r3, [sp, #8]
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	e7d9      	b.n	80043f2 <sniprintf+0x16>
 800443e:	bf00      	nop
 8004440:	20000034 	.word	0x20000034

08004444 <memset>:
 8004444:	4402      	add	r2, r0
 8004446:	4603      	mov	r3, r0
 8004448:	4293      	cmp	r3, r2
 800444a:	d100      	bne.n	800444e <memset+0xa>
 800444c:	4770      	bx	lr
 800444e:	f803 1b01 	strb.w	r1, [r3], #1
 8004452:	e7f9      	b.n	8004448 <memset+0x4>

08004454 <__errno>:
 8004454:	4b01      	ldr	r3, [pc, #4]	@ (800445c <__errno+0x8>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000034 	.word	0x20000034

08004460 <__libc_init_array>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4d0d      	ldr	r5, [pc, #52]	@ (8004498 <__libc_init_array+0x38>)
 8004464:	4c0d      	ldr	r4, [pc, #52]	@ (800449c <__libc_init_array+0x3c>)
 8004466:	1b64      	subs	r4, r4, r5
 8004468:	10a4      	asrs	r4, r4, #2
 800446a:	2600      	movs	r6, #0
 800446c:	42a6      	cmp	r6, r4
 800446e:	d109      	bne.n	8004484 <__libc_init_array+0x24>
 8004470:	4d0b      	ldr	r5, [pc, #44]	@ (80044a0 <__libc_init_array+0x40>)
 8004472:	4c0c      	ldr	r4, [pc, #48]	@ (80044a4 <__libc_init_array+0x44>)
 8004474:	f000 fc66 	bl	8004d44 <_init>
 8004478:	1b64      	subs	r4, r4, r5
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	2600      	movs	r6, #0
 800447e:	42a6      	cmp	r6, r4
 8004480:	d105      	bne.n	800448e <__libc_init_array+0x2e>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	f855 3b04 	ldr.w	r3, [r5], #4
 8004488:	4798      	blx	r3
 800448a:	3601      	adds	r6, #1
 800448c:	e7ee      	b.n	800446c <__libc_init_array+0xc>
 800448e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004492:	4798      	blx	r3
 8004494:	3601      	adds	r6, #1
 8004496:	e7f2      	b.n	800447e <__libc_init_array+0x1e>
 8004498:	08004de8 	.word	0x08004de8
 800449c:	08004de8 	.word	0x08004de8
 80044a0:	08004de8 	.word	0x08004de8
 80044a4:	08004dec 	.word	0x08004dec

080044a8 <__retarget_lock_acquire_recursive>:
 80044a8:	4770      	bx	lr

080044aa <__retarget_lock_release_recursive>:
 80044aa:	4770      	bx	lr

080044ac <_free_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4605      	mov	r5, r0
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d041      	beq.n	8004538 <_free_r+0x8c>
 80044b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b8:	1f0c      	subs	r4, r1, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bfb8      	it	lt
 80044be:	18e4      	addlt	r4, r4, r3
 80044c0:	f000 f8e0 	bl	8004684 <__malloc_lock>
 80044c4:	4a1d      	ldr	r2, [pc, #116]	@ (800453c <_free_r+0x90>)
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	b933      	cbnz	r3, 80044d8 <_free_r+0x2c>
 80044ca:	6063      	str	r3, [r4, #4]
 80044cc:	6014      	str	r4, [r2, #0]
 80044ce:	4628      	mov	r0, r5
 80044d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d4:	f000 b8dc 	b.w	8004690 <__malloc_unlock>
 80044d8:	42a3      	cmp	r3, r4
 80044da:	d908      	bls.n	80044ee <_free_r+0x42>
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	1821      	adds	r1, r4, r0
 80044e0:	428b      	cmp	r3, r1
 80044e2:	bf01      	itttt	eq
 80044e4:	6819      	ldreq	r1, [r3, #0]
 80044e6:	685b      	ldreq	r3, [r3, #4]
 80044e8:	1809      	addeq	r1, r1, r0
 80044ea:	6021      	streq	r1, [r4, #0]
 80044ec:	e7ed      	b.n	80044ca <_free_r+0x1e>
 80044ee:	461a      	mov	r2, r3
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	b10b      	cbz	r3, 80044f8 <_free_r+0x4c>
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d9fa      	bls.n	80044ee <_free_r+0x42>
 80044f8:	6811      	ldr	r1, [r2, #0]
 80044fa:	1850      	adds	r0, r2, r1
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d10b      	bne.n	8004518 <_free_r+0x6c>
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	4401      	add	r1, r0
 8004504:	1850      	adds	r0, r2, r1
 8004506:	4283      	cmp	r3, r0
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	d1e0      	bne.n	80044ce <_free_r+0x22>
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	6053      	str	r3, [r2, #4]
 8004512:	4408      	add	r0, r1
 8004514:	6010      	str	r0, [r2, #0]
 8004516:	e7da      	b.n	80044ce <_free_r+0x22>
 8004518:	d902      	bls.n	8004520 <_free_r+0x74>
 800451a:	230c      	movs	r3, #12
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	e7d6      	b.n	80044ce <_free_r+0x22>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	1821      	adds	r1, r4, r0
 8004524:	428b      	cmp	r3, r1
 8004526:	bf04      	itt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	bf04      	itt	eq
 8004530:	1809      	addeq	r1, r1, r0
 8004532:	6021      	streq	r1, [r4, #0]
 8004534:	6054      	str	r4, [r2, #4]
 8004536:	e7ca      	b.n	80044ce <_free_r+0x22>
 8004538:	bd38      	pop	{r3, r4, r5, pc}
 800453a:	bf00      	nop
 800453c:	20000340 	.word	0x20000340

08004540 <sbrk_aligned>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0f      	ldr	r6, [pc, #60]	@ (8004580 <sbrk_aligned+0x40>)
 8004544:	460c      	mov	r4, r1
 8004546:	6831      	ldr	r1, [r6, #0]
 8004548:	4605      	mov	r5, r0
 800454a:	b911      	cbnz	r1, 8004552 <sbrk_aligned+0x12>
 800454c:	f000 fba6 	bl	8004c9c <_sbrk_r>
 8004550:	6030      	str	r0, [r6, #0]
 8004552:	4621      	mov	r1, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 fba1 	bl	8004c9c <_sbrk_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d103      	bne.n	8004566 <sbrk_aligned+0x26>
 800455e:	f04f 34ff 	mov.w	r4, #4294967295
 8004562:	4620      	mov	r0, r4
 8004564:	bd70      	pop	{r4, r5, r6, pc}
 8004566:	1cc4      	adds	r4, r0, #3
 8004568:	f024 0403 	bic.w	r4, r4, #3
 800456c:	42a0      	cmp	r0, r4
 800456e:	d0f8      	beq.n	8004562 <sbrk_aligned+0x22>
 8004570:	1a21      	subs	r1, r4, r0
 8004572:	4628      	mov	r0, r5
 8004574:	f000 fb92 	bl	8004c9c <_sbrk_r>
 8004578:	3001      	adds	r0, #1
 800457a:	d1f2      	bne.n	8004562 <sbrk_aligned+0x22>
 800457c:	e7ef      	b.n	800455e <sbrk_aligned+0x1e>
 800457e:	bf00      	nop
 8004580:	2000033c 	.word	0x2000033c

08004584 <_malloc_r>:
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004588:	1ccd      	adds	r5, r1, #3
 800458a:	f025 0503 	bic.w	r5, r5, #3
 800458e:	3508      	adds	r5, #8
 8004590:	2d0c      	cmp	r5, #12
 8004592:	bf38      	it	cc
 8004594:	250c      	movcc	r5, #12
 8004596:	2d00      	cmp	r5, #0
 8004598:	4606      	mov	r6, r0
 800459a:	db01      	blt.n	80045a0 <_malloc_r+0x1c>
 800459c:	42a9      	cmp	r1, r5
 800459e:	d904      	bls.n	80045aa <_malloc_r+0x26>
 80045a0:	230c      	movs	r3, #12
 80045a2:	6033      	str	r3, [r6, #0]
 80045a4:	2000      	movs	r0, #0
 80045a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004680 <_malloc_r+0xfc>
 80045ae:	f000 f869 	bl	8004684 <__malloc_lock>
 80045b2:	f8d8 3000 	ldr.w	r3, [r8]
 80045b6:	461c      	mov	r4, r3
 80045b8:	bb44      	cbnz	r4, 800460c <_malloc_r+0x88>
 80045ba:	4629      	mov	r1, r5
 80045bc:	4630      	mov	r0, r6
 80045be:	f7ff ffbf 	bl	8004540 <sbrk_aligned>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	4604      	mov	r4, r0
 80045c6:	d158      	bne.n	800467a <_malloc_r+0xf6>
 80045c8:	f8d8 4000 	ldr.w	r4, [r8]
 80045cc:	4627      	mov	r7, r4
 80045ce:	2f00      	cmp	r7, #0
 80045d0:	d143      	bne.n	800465a <_malloc_r+0xd6>
 80045d2:	2c00      	cmp	r4, #0
 80045d4:	d04b      	beq.n	800466e <_malloc_r+0xea>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	4639      	mov	r1, r7
 80045da:	4630      	mov	r0, r6
 80045dc:	eb04 0903 	add.w	r9, r4, r3
 80045e0:	f000 fb5c 	bl	8004c9c <_sbrk_r>
 80045e4:	4581      	cmp	r9, r0
 80045e6:	d142      	bne.n	800466e <_malloc_r+0xea>
 80045e8:	6821      	ldr	r1, [r4, #0]
 80045ea:	1a6d      	subs	r5, r5, r1
 80045ec:	4629      	mov	r1, r5
 80045ee:	4630      	mov	r0, r6
 80045f0:	f7ff ffa6 	bl	8004540 <sbrk_aligned>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d03a      	beq.n	800466e <_malloc_r+0xea>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	442b      	add	r3, r5
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	bb62      	cbnz	r2, 8004660 <_malloc_r+0xdc>
 8004606:	f8c8 7000 	str.w	r7, [r8]
 800460a:	e00f      	b.n	800462c <_malloc_r+0xa8>
 800460c:	6822      	ldr	r2, [r4, #0]
 800460e:	1b52      	subs	r2, r2, r5
 8004610:	d420      	bmi.n	8004654 <_malloc_r+0xd0>
 8004612:	2a0b      	cmp	r2, #11
 8004614:	d917      	bls.n	8004646 <_malloc_r+0xc2>
 8004616:	1961      	adds	r1, r4, r5
 8004618:	42a3      	cmp	r3, r4
 800461a:	6025      	str	r5, [r4, #0]
 800461c:	bf18      	it	ne
 800461e:	6059      	strne	r1, [r3, #4]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	bf08      	it	eq
 8004624:	f8c8 1000 	streq.w	r1, [r8]
 8004628:	5162      	str	r2, [r4, r5]
 800462a:	604b      	str	r3, [r1, #4]
 800462c:	4630      	mov	r0, r6
 800462e:	f000 f82f 	bl	8004690 <__malloc_unlock>
 8004632:	f104 000b 	add.w	r0, r4, #11
 8004636:	1d23      	adds	r3, r4, #4
 8004638:	f020 0007 	bic.w	r0, r0, #7
 800463c:	1ac2      	subs	r2, r0, r3
 800463e:	bf1c      	itt	ne
 8004640:	1a1b      	subne	r3, r3, r0
 8004642:	50a3      	strne	r3, [r4, r2]
 8004644:	e7af      	b.n	80045a6 <_malloc_r+0x22>
 8004646:	6862      	ldr	r2, [r4, #4]
 8004648:	42a3      	cmp	r3, r4
 800464a:	bf0c      	ite	eq
 800464c:	f8c8 2000 	streq.w	r2, [r8]
 8004650:	605a      	strne	r2, [r3, #4]
 8004652:	e7eb      	b.n	800462c <_malloc_r+0xa8>
 8004654:	4623      	mov	r3, r4
 8004656:	6864      	ldr	r4, [r4, #4]
 8004658:	e7ae      	b.n	80045b8 <_malloc_r+0x34>
 800465a:	463c      	mov	r4, r7
 800465c:	687f      	ldr	r7, [r7, #4]
 800465e:	e7b6      	b.n	80045ce <_malloc_r+0x4a>
 8004660:	461a      	mov	r2, r3
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	42a3      	cmp	r3, r4
 8004666:	d1fb      	bne.n	8004660 <_malloc_r+0xdc>
 8004668:	2300      	movs	r3, #0
 800466a:	6053      	str	r3, [r2, #4]
 800466c:	e7de      	b.n	800462c <_malloc_r+0xa8>
 800466e:	230c      	movs	r3, #12
 8004670:	6033      	str	r3, [r6, #0]
 8004672:	4630      	mov	r0, r6
 8004674:	f000 f80c 	bl	8004690 <__malloc_unlock>
 8004678:	e794      	b.n	80045a4 <_malloc_r+0x20>
 800467a:	6005      	str	r5, [r0, #0]
 800467c:	e7d6      	b.n	800462c <_malloc_r+0xa8>
 800467e:	bf00      	nop
 8004680:	20000340 	.word	0x20000340

08004684 <__malloc_lock>:
 8004684:	4801      	ldr	r0, [pc, #4]	@ (800468c <__malloc_lock+0x8>)
 8004686:	f7ff bf0f 	b.w	80044a8 <__retarget_lock_acquire_recursive>
 800468a:	bf00      	nop
 800468c:	20000338 	.word	0x20000338

08004690 <__malloc_unlock>:
 8004690:	4801      	ldr	r0, [pc, #4]	@ (8004698 <__malloc_unlock+0x8>)
 8004692:	f7ff bf0a 	b.w	80044aa <__retarget_lock_release_recursive>
 8004696:	bf00      	nop
 8004698:	20000338 	.word	0x20000338

0800469c <__ssputs_r>:
 800469c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a0:	688e      	ldr	r6, [r1, #8]
 80046a2:	461f      	mov	r7, r3
 80046a4:	42be      	cmp	r6, r7
 80046a6:	680b      	ldr	r3, [r1, #0]
 80046a8:	4682      	mov	sl, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	4690      	mov	r8, r2
 80046ae:	d82d      	bhi.n	800470c <__ssputs_r+0x70>
 80046b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046b8:	d026      	beq.n	8004708 <__ssputs_r+0x6c>
 80046ba:	6965      	ldr	r5, [r4, #20]
 80046bc:	6909      	ldr	r1, [r1, #16]
 80046be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c2:	eba3 0901 	sub.w	r9, r3, r1
 80046c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ca:	1c7b      	adds	r3, r7, #1
 80046cc:	444b      	add	r3, r9
 80046ce:	106d      	asrs	r5, r5, #1
 80046d0:	429d      	cmp	r5, r3
 80046d2:	bf38      	it	cc
 80046d4:	461d      	movcc	r5, r3
 80046d6:	0553      	lsls	r3, r2, #21
 80046d8:	d527      	bpl.n	800472a <__ssputs_r+0x8e>
 80046da:	4629      	mov	r1, r5
 80046dc:	f7ff ff52 	bl	8004584 <_malloc_r>
 80046e0:	4606      	mov	r6, r0
 80046e2:	b360      	cbz	r0, 800473e <__ssputs_r+0xa2>
 80046e4:	6921      	ldr	r1, [r4, #16]
 80046e6:	464a      	mov	r2, r9
 80046e8:	f000 fae8 	bl	8004cbc <memcpy>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	6126      	str	r6, [r4, #16]
 80046fa:	6165      	str	r5, [r4, #20]
 80046fc:	444e      	add	r6, r9
 80046fe:	eba5 0509 	sub.w	r5, r5, r9
 8004702:	6026      	str	r6, [r4, #0]
 8004704:	60a5      	str	r5, [r4, #8]
 8004706:	463e      	mov	r6, r7
 8004708:	42be      	cmp	r6, r7
 800470a:	d900      	bls.n	800470e <__ssputs_r+0x72>
 800470c:	463e      	mov	r6, r7
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	4632      	mov	r2, r6
 8004712:	4641      	mov	r1, r8
 8004714:	f000 faa8 	bl	8004c68 <memmove>
 8004718:	68a3      	ldr	r3, [r4, #8]
 800471a:	1b9b      	subs	r3, r3, r6
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	4433      	add	r3, r6
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	2000      	movs	r0, #0
 8004726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472a:	462a      	mov	r2, r5
 800472c:	f000 fad4 	bl	8004cd8 <_realloc_r>
 8004730:	4606      	mov	r6, r0
 8004732:	2800      	cmp	r0, #0
 8004734:	d1e0      	bne.n	80046f8 <__ssputs_r+0x5c>
 8004736:	6921      	ldr	r1, [r4, #16]
 8004738:	4650      	mov	r0, sl
 800473a:	f7ff feb7 	bl	80044ac <_free_r>
 800473e:	230c      	movs	r3, #12
 8004740:	f8ca 3000 	str.w	r3, [sl]
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	e7e9      	b.n	8004726 <__ssputs_r+0x8a>
	...

08004754 <_svfiprintf_r>:
 8004754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	4698      	mov	r8, r3
 800475a:	898b      	ldrh	r3, [r1, #12]
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	b09d      	sub	sp, #116	@ 0x74
 8004760:	4607      	mov	r7, r0
 8004762:	460d      	mov	r5, r1
 8004764:	4614      	mov	r4, r2
 8004766:	d510      	bpl.n	800478a <_svfiprintf_r+0x36>
 8004768:	690b      	ldr	r3, [r1, #16]
 800476a:	b973      	cbnz	r3, 800478a <_svfiprintf_r+0x36>
 800476c:	2140      	movs	r1, #64	@ 0x40
 800476e:	f7ff ff09 	bl	8004584 <_malloc_r>
 8004772:	6028      	str	r0, [r5, #0]
 8004774:	6128      	str	r0, [r5, #16]
 8004776:	b930      	cbnz	r0, 8004786 <_svfiprintf_r+0x32>
 8004778:	230c      	movs	r3, #12
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	b01d      	add	sp, #116	@ 0x74
 8004782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004786:	2340      	movs	r3, #64	@ 0x40
 8004788:	616b      	str	r3, [r5, #20]
 800478a:	2300      	movs	r3, #0
 800478c:	9309      	str	r3, [sp, #36]	@ 0x24
 800478e:	2320      	movs	r3, #32
 8004790:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004794:	f8cd 800c 	str.w	r8, [sp, #12]
 8004798:	2330      	movs	r3, #48	@ 0x30
 800479a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004938 <_svfiprintf_r+0x1e4>
 800479e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047a2:	f04f 0901 	mov.w	r9, #1
 80047a6:	4623      	mov	r3, r4
 80047a8:	469a      	mov	sl, r3
 80047aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ae:	b10a      	cbz	r2, 80047b4 <_svfiprintf_r+0x60>
 80047b0:	2a25      	cmp	r2, #37	@ 0x25
 80047b2:	d1f9      	bne.n	80047a8 <_svfiprintf_r+0x54>
 80047b4:	ebba 0b04 	subs.w	fp, sl, r4
 80047b8:	d00b      	beq.n	80047d2 <_svfiprintf_r+0x7e>
 80047ba:	465b      	mov	r3, fp
 80047bc:	4622      	mov	r2, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	4638      	mov	r0, r7
 80047c2:	f7ff ff6b 	bl	800469c <__ssputs_r>
 80047c6:	3001      	adds	r0, #1
 80047c8:	f000 80a7 	beq.w	800491a <_svfiprintf_r+0x1c6>
 80047cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ce:	445a      	add	r2, fp
 80047d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80047d2:	f89a 3000 	ldrb.w	r3, [sl]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 809f 	beq.w	800491a <_svfiprintf_r+0x1c6>
 80047dc:	2300      	movs	r3, #0
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e6:	f10a 0a01 	add.w	sl, sl, #1
 80047ea:	9304      	str	r3, [sp, #16]
 80047ec:	9307      	str	r3, [sp, #28]
 80047ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80047f4:	4654      	mov	r4, sl
 80047f6:	2205      	movs	r2, #5
 80047f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047fc:	484e      	ldr	r0, [pc, #312]	@ (8004938 <_svfiprintf_r+0x1e4>)
 80047fe:	f7fb fcf7 	bl	80001f0 <memchr>
 8004802:	9a04      	ldr	r2, [sp, #16]
 8004804:	b9d8      	cbnz	r0, 800483e <_svfiprintf_r+0xea>
 8004806:	06d0      	lsls	r0, r2, #27
 8004808:	bf44      	itt	mi
 800480a:	2320      	movmi	r3, #32
 800480c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004810:	0711      	lsls	r1, r2, #28
 8004812:	bf44      	itt	mi
 8004814:	232b      	movmi	r3, #43	@ 0x2b
 8004816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800481a:	f89a 3000 	ldrb.w	r3, [sl]
 800481e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004820:	d015      	beq.n	800484e <_svfiprintf_r+0xfa>
 8004822:	9a07      	ldr	r2, [sp, #28]
 8004824:	4654      	mov	r4, sl
 8004826:	2000      	movs	r0, #0
 8004828:	f04f 0c0a 	mov.w	ip, #10
 800482c:	4621      	mov	r1, r4
 800482e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004832:	3b30      	subs	r3, #48	@ 0x30
 8004834:	2b09      	cmp	r3, #9
 8004836:	d94b      	bls.n	80048d0 <_svfiprintf_r+0x17c>
 8004838:	b1b0      	cbz	r0, 8004868 <_svfiprintf_r+0x114>
 800483a:	9207      	str	r2, [sp, #28]
 800483c:	e014      	b.n	8004868 <_svfiprintf_r+0x114>
 800483e:	eba0 0308 	sub.w	r3, r0, r8
 8004842:	fa09 f303 	lsl.w	r3, r9, r3
 8004846:	4313      	orrs	r3, r2
 8004848:	9304      	str	r3, [sp, #16]
 800484a:	46a2      	mov	sl, r4
 800484c:	e7d2      	b.n	80047f4 <_svfiprintf_r+0xa0>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	9103      	str	r1, [sp, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	bfbb      	ittet	lt
 800485a:	425b      	neglt	r3, r3
 800485c:	f042 0202 	orrlt.w	r2, r2, #2
 8004860:	9307      	strge	r3, [sp, #28]
 8004862:	9307      	strlt	r3, [sp, #28]
 8004864:	bfb8      	it	lt
 8004866:	9204      	strlt	r2, [sp, #16]
 8004868:	7823      	ldrb	r3, [r4, #0]
 800486a:	2b2e      	cmp	r3, #46	@ 0x2e
 800486c:	d10a      	bne.n	8004884 <_svfiprintf_r+0x130>
 800486e:	7863      	ldrb	r3, [r4, #1]
 8004870:	2b2a      	cmp	r3, #42	@ 0x2a
 8004872:	d132      	bne.n	80048da <_svfiprintf_r+0x186>
 8004874:	9b03      	ldr	r3, [sp, #12]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	9203      	str	r2, [sp, #12]
 800487c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004880:	3402      	adds	r4, #2
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004948 <_svfiprintf_r+0x1f4>
 8004888:	7821      	ldrb	r1, [r4, #0]
 800488a:	2203      	movs	r2, #3
 800488c:	4650      	mov	r0, sl
 800488e:	f7fb fcaf 	bl	80001f0 <memchr>
 8004892:	b138      	cbz	r0, 80048a4 <_svfiprintf_r+0x150>
 8004894:	9b04      	ldr	r3, [sp, #16]
 8004896:	eba0 000a 	sub.w	r0, r0, sl
 800489a:	2240      	movs	r2, #64	@ 0x40
 800489c:	4082      	lsls	r2, r0
 800489e:	4313      	orrs	r3, r2
 80048a0:	3401      	adds	r4, #1
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a8:	4824      	ldr	r0, [pc, #144]	@ (800493c <_svfiprintf_r+0x1e8>)
 80048aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048ae:	2206      	movs	r2, #6
 80048b0:	f7fb fc9e 	bl	80001f0 <memchr>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d036      	beq.n	8004926 <_svfiprintf_r+0x1d2>
 80048b8:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <_svfiprintf_r+0x1ec>)
 80048ba:	bb1b      	cbnz	r3, 8004904 <_svfiprintf_r+0x1b0>
 80048bc:	9b03      	ldr	r3, [sp, #12]
 80048be:	3307      	adds	r3, #7
 80048c0:	f023 0307 	bic.w	r3, r3, #7
 80048c4:	3308      	adds	r3, #8
 80048c6:	9303      	str	r3, [sp, #12]
 80048c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ca:	4433      	add	r3, r6
 80048cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ce:	e76a      	b.n	80047a6 <_svfiprintf_r+0x52>
 80048d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d4:	460c      	mov	r4, r1
 80048d6:	2001      	movs	r0, #1
 80048d8:	e7a8      	b.n	800482c <_svfiprintf_r+0xd8>
 80048da:	2300      	movs	r3, #0
 80048dc:	3401      	adds	r4, #1
 80048de:	9305      	str	r3, [sp, #20]
 80048e0:	4619      	mov	r1, r3
 80048e2:	f04f 0c0a 	mov.w	ip, #10
 80048e6:	4620      	mov	r0, r4
 80048e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048ec:	3a30      	subs	r2, #48	@ 0x30
 80048ee:	2a09      	cmp	r2, #9
 80048f0:	d903      	bls.n	80048fa <_svfiprintf_r+0x1a6>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0c6      	beq.n	8004884 <_svfiprintf_r+0x130>
 80048f6:	9105      	str	r1, [sp, #20]
 80048f8:	e7c4      	b.n	8004884 <_svfiprintf_r+0x130>
 80048fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80048fe:	4604      	mov	r4, r0
 8004900:	2301      	movs	r3, #1
 8004902:	e7f0      	b.n	80048e6 <_svfiprintf_r+0x192>
 8004904:	ab03      	add	r3, sp, #12
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	462a      	mov	r2, r5
 800490a:	4b0e      	ldr	r3, [pc, #56]	@ (8004944 <_svfiprintf_r+0x1f0>)
 800490c:	a904      	add	r1, sp, #16
 800490e:	4638      	mov	r0, r7
 8004910:	f3af 8000 	nop.w
 8004914:	1c42      	adds	r2, r0, #1
 8004916:	4606      	mov	r6, r0
 8004918:	d1d6      	bne.n	80048c8 <_svfiprintf_r+0x174>
 800491a:	89ab      	ldrh	r3, [r5, #12]
 800491c:	065b      	lsls	r3, r3, #25
 800491e:	f53f af2d 	bmi.w	800477c <_svfiprintf_r+0x28>
 8004922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004924:	e72c      	b.n	8004780 <_svfiprintf_r+0x2c>
 8004926:	ab03      	add	r3, sp, #12
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	462a      	mov	r2, r5
 800492c:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <_svfiprintf_r+0x1f0>)
 800492e:	a904      	add	r1, sp, #16
 8004930:	4638      	mov	r0, r7
 8004932:	f000 f879 	bl	8004a28 <_printf_i>
 8004936:	e7ed      	b.n	8004914 <_svfiprintf_r+0x1c0>
 8004938:	08004dac 	.word	0x08004dac
 800493c:	08004db6 	.word	0x08004db6
 8004940:	00000000 	.word	0x00000000
 8004944:	0800469d 	.word	0x0800469d
 8004948:	08004db2 	.word	0x08004db2

0800494c <_printf_common>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	4616      	mov	r6, r2
 8004952:	4698      	mov	r8, r3
 8004954:	688a      	ldr	r2, [r1, #8]
 8004956:	690b      	ldr	r3, [r1, #16]
 8004958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800495c:	4293      	cmp	r3, r2
 800495e:	bfb8      	it	lt
 8004960:	4613      	movlt	r3, r2
 8004962:	6033      	str	r3, [r6, #0]
 8004964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004968:	4607      	mov	r7, r0
 800496a:	460c      	mov	r4, r1
 800496c:	b10a      	cbz	r2, 8004972 <_printf_common+0x26>
 800496e:	3301      	adds	r3, #1
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	0699      	lsls	r1, r3, #26
 8004976:	bf42      	ittt	mi
 8004978:	6833      	ldrmi	r3, [r6, #0]
 800497a:	3302      	addmi	r3, #2
 800497c:	6033      	strmi	r3, [r6, #0]
 800497e:	6825      	ldr	r5, [r4, #0]
 8004980:	f015 0506 	ands.w	r5, r5, #6
 8004984:	d106      	bne.n	8004994 <_printf_common+0x48>
 8004986:	f104 0a19 	add.w	sl, r4, #25
 800498a:	68e3      	ldr	r3, [r4, #12]
 800498c:	6832      	ldr	r2, [r6, #0]
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	42ab      	cmp	r3, r5
 8004992:	dc26      	bgt.n	80049e2 <_printf_common+0x96>
 8004994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004998:	6822      	ldr	r2, [r4, #0]
 800499a:	3b00      	subs	r3, #0
 800499c:	bf18      	it	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	0692      	lsls	r2, r2, #26
 80049a2:	d42b      	bmi.n	80049fc <_printf_common+0xb0>
 80049a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049a8:	4641      	mov	r1, r8
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c8      	blx	r9
 80049ae:	3001      	adds	r0, #1
 80049b0:	d01e      	beq.n	80049f0 <_printf_common+0xa4>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	f003 0306 	and.w	r3, r3, #6
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	bf02      	ittt	eq
 80049be:	68e5      	ldreq	r5, [r4, #12]
 80049c0:	6833      	ldreq	r3, [r6, #0]
 80049c2:	1aed      	subeq	r5, r5, r3
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	bf0c      	ite	eq
 80049c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049cc:	2500      	movne	r5, #0
 80049ce:	4293      	cmp	r3, r2
 80049d0:	bfc4      	itt	gt
 80049d2:	1a9b      	subgt	r3, r3, r2
 80049d4:	18ed      	addgt	r5, r5, r3
 80049d6:	2600      	movs	r6, #0
 80049d8:	341a      	adds	r4, #26
 80049da:	42b5      	cmp	r5, r6
 80049dc:	d11a      	bne.n	8004a14 <_printf_common+0xc8>
 80049de:	2000      	movs	r0, #0
 80049e0:	e008      	b.n	80049f4 <_printf_common+0xa8>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4652      	mov	r2, sl
 80049e6:	4641      	mov	r1, r8
 80049e8:	4638      	mov	r0, r7
 80049ea:	47c8      	blx	r9
 80049ec:	3001      	adds	r0, #1
 80049ee:	d103      	bne.n	80049f8 <_printf_common+0xac>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	3501      	adds	r5, #1
 80049fa:	e7c6      	b.n	800498a <_printf_common+0x3e>
 80049fc:	18e1      	adds	r1, r4, r3
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	2030      	movs	r0, #48	@ 0x30
 8004a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a06:	4422      	add	r2, r4
 8004a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a10:	3302      	adds	r3, #2
 8004a12:	e7c7      	b.n	80049a4 <_printf_common+0x58>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4622      	mov	r2, r4
 8004a18:	4641      	mov	r1, r8
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	47c8      	blx	r9
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d0e6      	beq.n	80049f0 <_printf_common+0xa4>
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7d9      	b.n	80049da <_printf_common+0x8e>
	...

08004a28 <_printf_i>:
 8004a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	7e0f      	ldrb	r7, [r1, #24]
 8004a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a30:	2f78      	cmp	r7, #120	@ 0x78
 8004a32:	4691      	mov	r9, r2
 8004a34:	4680      	mov	r8, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	469a      	mov	sl, r3
 8004a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a3e:	d807      	bhi.n	8004a50 <_printf_i+0x28>
 8004a40:	2f62      	cmp	r7, #98	@ 0x62
 8004a42:	d80a      	bhi.n	8004a5a <_printf_i+0x32>
 8004a44:	2f00      	cmp	r7, #0
 8004a46:	f000 80d2 	beq.w	8004bee <_printf_i+0x1c6>
 8004a4a:	2f58      	cmp	r7, #88	@ 0x58
 8004a4c:	f000 80b9 	beq.w	8004bc2 <_printf_i+0x19a>
 8004a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a58:	e03a      	b.n	8004ad0 <_printf_i+0xa8>
 8004a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a5e:	2b15      	cmp	r3, #21
 8004a60:	d8f6      	bhi.n	8004a50 <_printf_i+0x28>
 8004a62:	a101      	add	r1, pc, #4	@ (adr r1, 8004a68 <_printf_i+0x40>)
 8004a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a68:	08004ac1 	.word	0x08004ac1
 8004a6c:	08004ad5 	.word	0x08004ad5
 8004a70:	08004a51 	.word	0x08004a51
 8004a74:	08004a51 	.word	0x08004a51
 8004a78:	08004a51 	.word	0x08004a51
 8004a7c:	08004a51 	.word	0x08004a51
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004a51 	.word	0x08004a51
 8004a88:	08004a51 	.word	0x08004a51
 8004a8c:	08004a51 	.word	0x08004a51
 8004a90:	08004a51 	.word	0x08004a51
 8004a94:	08004bd5 	.word	0x08004bd5
 8004a98:	08004aff 	.word	0x08004aff
 8004a9c:	08004b8f 	.word	0x08004b8f
 8004aa0:	08004a51 	.word	0x08004a51
 8004aa4:	08004a51 	.word	0x08004a51
 8004aa8:	08004bf7 	.word	0x08004bf7
 8004aac:	08004a51 	.word	0x08004a51
 8004ab0:	08004aff 	.word	0x08004aff
 8004ab4:	08004a51 	.word	0x08004a51
 8004ab8:	08004a51 	.word	0x08004a51
 8004abc:	08004b97 	.word	0x08004b97
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	1d1a      	adds	r2, r3, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6032      	str	r2, [r6, #0]
 8004ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e09d      	b.n	8004c10 <_printf_i+0x1e8>
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	1d19      	adds	r1, r3, #4
 8004ada:	6031      	str	r1, [r6, #0]
 8004adc:	0606      	lsls	r6, r0, #24
 8004ade:	d501      	bpl.n	8004ae4 <_printf_i+0xbc>
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	e003      	b.n	8004aec <_printf_i+0xc4>
 8004ae4:	0645      	lsls	r5, r0, #25
 8004ae6:	d5fb      	bpl.n	8004ae0 <_printf_i+0xb8>
 8004ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	da03      	bge.n	8004af8 <_printf_i+0xd0>
 8004af0:	232d      	movs	r3, #45	@ 0x2d
 8004af2:	426d      	negs	r5, r5
 8004af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004af8:	4859      	ldr	r0, [pc, #356]	@ (8004c60 <_printf_i+0x238>)
 8004afa:	230a      	movs	r3, #10
 8004afc:	e011      	b.n	8004b22 <_printf_i+0xfa>
 8004afe:	6821      	ldr	r1, [r4, #0]
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	0608      	lsls	r0, r1, #24
 8004b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b08:	d402      	bmi.n	8004b10 <_printf_i+0xe8>
 8004b0a:	0649      	lsls	r1, r1, #25
 8004b0c:	bf48      	it	mi
 8004b0e:	b2ad      	uxthmi	r5, r5
 8004b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b12:	4853      	ldr	r0, [pc, #332]	@ (8004c60 <_printf_i+0x238>)
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	bf14      	ite	ne
 8004b18:	230a      	movne	r3, #10
 8004b1a:	2308      	moveq	r3, #8
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b22:	6866      	ldr	r6, [r4, #4]
 8004b24:	60a6      	str	r6, [r4, #8]
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	bfa2      	ittt	ge
 8004b2a:	6821      	ldrge	r1, [r4, #0]
 8004b2c:	f021 0104 	bicge.w	r1, r1, #4
 8004b30:	6021      	strge	r1, [r4, #0]
 8004b32:	b90d      	cbnz	r5, 8004b38 <_printf_i+0x110>
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	d04b      	beq.n	8004bd0 <_printf_i+0x1a8>
 8004b38:	4616      	mov	r6, r2
 8004b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b42:	5dc7      	ldrb	r7, [r0, r7]
 8004b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b48:	462f      	mov	r7, r5
 8004b4a:	42bb      	cmp	r3, r7
 8004b4c:	460d      	mov	r5, r1
 8004b4e:	d9f4      	bls.n	8004b3a <_printf_i+0x112>
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d10b      	bne.n	8004b6c <_printf_i+0x144>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	07df      	lsls	r7, r3, #31
 8004b58:	d508      	bpl.n	8004b6c <_printf_i+0x144>
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	6861      	ldr	r1, [r4, #4]
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	bfde      	ittt	le
 8004b62:	2330      	movle	r3, #48	@ 0x30
 8004b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b6c:	1b92      	subs	r2, r2, r6
 8004b6e:	6122      	str	r2, [r4, #16]
 8004b70:	f8cd a000 	str.w	sl, [sp]
 8004b74:	464b      	mov	r3, r9
 8004b76:	aa03      	add	r2, sp, #12
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f7ff fee6 	bl	800494c <_printf_common>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d14a      	bne.n	8004c1a <_printf_i+0x1f2>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	b004      	add	sp, #16
 8004b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	f043 0320 	orr.w	r3, r3, #32
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	4833      	ldr	r0, [pc, #204]	@ (8004c64 <_printf_i+0x23c>)
 8004b98:	2778      	movs	r7, #120	@ 0x78
 8004b9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	6831      	ldr	r1, [r6, #0]
 8004ba2:	061f      	lsls	r7, r3, #24
 8004ba4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ba8:	d402      	bmi.n	8004bb0 <_printf_i+0x188>
 8004baa:	065f      	lsls	r7, r3, #25
 8004bac:	bf48      	it	mi
 8004bae:	b2ad      	uxthmi	r5, r5
 8004bb0:	6031      	str	r1, [r6, #0]
 8004bb2:	07d9      	lsls	r1, r3, #31
 8004bb4:	bf44      	itt	mi
 8004bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8004bba:	6023      	strmi	r3, [r4, #0]
 8004bbc:	b11d      	cbz	r5, 8004bc6 <_printf_i+0x19e>
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	e7ac      	b.n	8004b1c <_printf_i+0xf4>
 8004bc2:	4827      	ldr	r0, [pc, #156]	@ (8004c60 <_printf_i+0x238>)
 8004bc4:	e7e9      	b.n	8004b9a <_printf_i+0x172>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	f023 0320 	bic.w	r3, r3, #32
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	e7f6      	b.n	8004bbe <_printf_i+0x196>
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	e7bd      	b.n	8004b50 <_printf_i+0x128>
 8004bd4:	6833      	ldr	r3, [r6, #0]
 8004bd6:	6825      	ldr	r5, [r4, #0]
 8004bd8:	6961      	ldr	r1, [r4, #20]
 8004bda:	1d18      	adds	r0, r3, #4
 8004bdc:	6030      	str	r0, [r6, #0]
 8004bde:	062e      	lsls	r6, r5, #24
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	d501      	bpl.n	8004be8 <_printf_i+0x1c0>
 8004be4:	6019      	str	r1, [r3, #0]
 8004be6:	e002      	b.n	8004bee <_printf_i+0x1c6>
 8004be8:	0668      	lsls	r0, r5, #25
 8004bea:	d5fb      	bpl.n	8004be4 <_printf_i+0x1bc>
 8004bec:	8019      	strh	r1, [r3, #0]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	4616      	mov	r6, r2
 8004bf4:	e7bc      	b.n	8004b70 <_printf_i+0x148>
 8004bf6:	6833      	ldr	r3, [r6, #0]
 8004bf8:	1d1a      	adds	r2, r3, #4
 8004bfa:	6032      	str	r2, [r6, #0]
 8004bfc:	681e      	ldr	r6, [r3, #0]
 8004bfe:	6862      	ldr	r2, [r4, #4]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4630      	mov	r0, r6
 8004c04:	f7fb faf4 	bl	80001f0 <memchr>
 8004c08:	b108      	cbz	r0, 8004c0e <_printf_i+0x1e6>
 8004c0a:	1b80      	subs	r0, r0, r6
 8004c0c:	6060      	str	r0, [r4, #4]
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	2300      	movs	r3, #0
 8004c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c18:	e7aa      	b.n	8004b70 <_printf_i+0x148>
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	4632      	mov	r2, r6
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4640      	mov	r0, r8
 8004c22:	47d0      	blx	sl
 8004c24:	3001      	adds	r0, #1
 8004c26:	d0ad      	beq.n	8004b84 <_printf_i+0x15c>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	d413      	bmi.n	8004c56 <_printf_i+0x22e>
 8004c2e:	68e0      	ldr	r0, [r4, #12]
 8004c30:	9b03      	ldr	r3, [sp, #12]
 8004c32:	4298      	cmp	r0, r3
 8004c34:	bfb8      	it	lt
 8004c36:	4618      	movlt	r0, r3
 8004c38:	e7a6      	b.n	8004b88 <_printf_i+0x160>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	4649      	mov	r1, r9
 8004c40:	4640      	mov	r0, r8
 8004c42:	47d0      	blx	sl
 8004c44:	3001      	adds	r0, #1
 8004c46:	d09d      	beq.n	8004b84 <_printf_i+0x15c>
 8004c48:	3501      	adds	r5, #1
 8004c4a:	68e3      	ldr	r3, [r4, #12]
 8004c4c:	9903      	ldr	r1, [sp, #12]
 8004c4e:	1a5b      	subs	r3, r3, r1
 8004c50:	42ab      	cmp	r3, r5
 8004c52:	dcf2      	bgt.n	8004c3a <_printf_i+0x212>
 8004c54:	e7eb      	b.n	8004c2e <_printf_i+0x206>
 8004c56:	2500      	movs	r5, #0
 8004c58:	f104 0619 	add.w	r6, r4, #25
 8004c5c:	e7f5      	b.n	8004c4a <_printf_i+0x222>
 8004c5e:	bf00      	nop
 8004c60:	08004dbd 	.word	0x08004dbd
 8004c64:	08004dce 	.word	0x08004dce

08004c68 <memmove>:
 8004c68:	4288      	cmp	r0, r1
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	eb01 0402 	add.w	r4, r1, r2
 8004c70:	d902      	bls.n	8004c78 <memmove+0x10>
 8004c72:	4284      	cmp	r4, r0
 8004c74:	4623      	mov	r3, r4
 8004c76:	d807      	bhi.n	8004c88 <memmove+0x20>
 8004c78:	1e43      	subs	r3, r0, #1
 8004c7a:	42a1      	cmp	r1, r4
 8004c7c:	d008      	beq.n	8004c90 <memmove+0x28>
 8004c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c86:	e7f8      	b.n	8004c7a <memmove+0x12>
 8004c88:	4402      	add	r2, r0
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	428a      	cmp	r2, r1
 8004c8e:	d100      	bne.n	8004c92 <memmove+0x2a>
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9a:	e7f7      	b.n	8004c8c <memmove+0x24>

08004c9c <_sbrk_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	@ (8004cb8 <_sbrk_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fc faf8 	bl	800129c <_sbrk>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_sbrk_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_sbrk_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20000334 	.word	0x20000334

08004cbc <memcpy>:
 8004cbc:	440a      	add	r2, r1
 8004cbe:	4291      	cmp	r1, r2
 8004cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc4:	d100      	bne.n	8004cc8 <memcpy+0xc>
 8004cc6:	4770      	bx	lr
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd2:	4291      	cmp	r1, r2
 8004cd4:	d1f9      	bne.n	8004cca <memcpy+0xe>
 8004cd6:	bd10      	pop	{r4, pc}

08004cd8 <_realloc_r>:
 8004cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cdc:	4680      	mov	r8, r0
 8004cde:	4615      	mov	r5, r2
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	b921      	cbnz	r1, 8004cee <_realloc_r+0x16>
 8004ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce8:	4611      	mov	r1, r2
 8004cea:	f7ff bc4b 	b.w	8004584 <_malloc_r>
 8004cee:	b92a      	cbnz	r2, 8004cfc <_realloc_r+0x24>
 8004cf0:	f7ff fbdc 	bl	80044ac <_free_r>
 8004cf4:	2400      	movs	r4, #0
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cfc:	f000 f81a 	bl	8004d34 <_malloc_usable_size_r>
 8004d00:	4285      	cmp	r5, r0
 8004d02:	4606      	mov	r6, r0
 8004d04:	d802      	bhi.n	8004d0c <_realloc_r+0x34>
 8004d06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d0a:	d8f4      	bhi.n	8004cf6 <_realloc_r+0x1e>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f7ff fc38 	bl	8004584 <_malloc_r>
 8004d14:	4607      	mov	r7, r0
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0ec      	beq.n	8004cf4 <_realloc_r+0x1c>
 8004d1a:	42b5      	cmp	r5, r6
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	4621      	mov	r1, r4
 8004d20:	bf28      	it	cs
 8004d22:	4632      	movcs	r2, r6
 8004d24:	f7ff ffca 	bl	8004cbc <memcpy>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f7ff fbbe 	bl	80044ac <_free_r>
 8004d30:	463c      	mov	r4, r7
 8004d32:	e7e0      	b.n	8004cf6 <_realloc_r+0x1e>

08004d34 <_malloc_usable_size_r>:
 8004d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d38:	1f18      	subs	r0, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bfbc      	itt	lt
 8004d3e:	580b      	ldrlt	r3, [r1, r0]
 8004d40:	18c0      	addlt	r0, r0, r3
 8004d42:	4770      	bx	lr

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
