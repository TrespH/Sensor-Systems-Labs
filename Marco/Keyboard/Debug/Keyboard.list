
Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003fd4  08003fd4  00004fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004024  08004024  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004024  08004024  00005024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800402c  0800402c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800402c  0800402c  0000502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004030  08004030  00005030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004034  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000006c  080040a0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080040a0  0000632c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd0f  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001caa  00000000  00000000  00012dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00014a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099b  00000000  00000000  00015698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a0a  00000000  00000000  00016033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e051  00000000  00000000  0002ba3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd78  00000000  00000000  00039a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  000c584c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c910c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003fbc 	.word	0x08003fbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003fbc 	.word	0x08003fbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

	if(htim == &htim2)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a74      	ldr	r2, [pc, #464]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800057c:	4293      	cmp	r3, r2
 800057e:	f040 80e1 	bne.w	8000744 <HAL_TIM_PeriodElapsedCallback+0x1d4>
	{
		// ---------- Row Pins reading -------------- //

		//Reading operation before the setting of the column

		if(HAL_GPIO_ReadPin(PIN_R0) == GPIO_PIN_SET)
 8000582:	2108      	movs	r1, #8
 8000584:	4872      	ldr	r0, [pc, #456]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000586:	f000 ff5f 	bl	8001448 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d107      	bne.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			keypress[4*column_index] = 0;
 8000590:	4b70      	ldr	r3, [pc, #448]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4a70      	ldr	r2, [pc, #448]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000598:	2100      	movs	r1, #0
 800059a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800059e:	e009      	b.n	80005b4 <HAL_TIM_PeriodElapsedCallback+0x44>
		}
		else
		{
			keypress[4*column_index]++; //A "software filter", if this value is bigger than 2 is not a debounce phenomena
 80005a0:	4b6c      	ldr	r3, [pc, #432]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4a6c      	ldr	r2, [pc, #432]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ac:	3201      	adds	r2, #1
 80005ae:	496a      	ldr	r1, [pc, #424]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}


		if(HAL_GPIO_ReadPin(PIN_R1) == GPIO_PIN_SET)
 80005b4:	2104      	movs	r1, #4
 80005b6:	4866      	ldr	r0, [pc, #408]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80005b8:	f000 ff46 	bl	8001448 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d108      	bne.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			keypress[4*column_index+1] = 0;
 80005c2:	4b64      	ldr	r3, [pc, #400]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a63      	ldr	r2, [pc, #396]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80005d2:	e00a      	b.n	80005ea <HAL_TIM_PeriodElapsedCallback+0x7a>
		}
		else
		{
			keypress[4*column_index+1]++;
 80005d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	3301      	adds	r3, #1
 80005dc:	4a5e      	ldr	r2, [pc, #376]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e2:	3201      	adds	r2, #1
 80005e4:	495c      	ldr	r1, [pc, #368]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if(HAL_GPIO_ReadPin(PIN_R2) == GPIO_PIN_SET)
 80005ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ee:	4858      	ldr	r0, [pc, #352]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80005f0:	f000 ff2a 	bl	8001448 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d108      	bne.n	800060c <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			keypress[4*column_index+2] = 0;
 80005fa:	4b56      	ldr	r3, [pc, #344]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	3302      	adds	r3, #2
 8000602:	4a55      	ldr	r2, [pc, #340]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000604:	2100      	movs	r1, #0
 8000606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800060a:	e00a      	b.n	8000622 <HAL_TIM_PeriodElapsedCallback+0xb2>
		}
		else
		{
			keypress[4*column_index+2]++;
 800060c:	4b51      	ldr	r3, [pc, #324]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	3302      	adds	r3, #2
 8000614:	4a50      	ldr	r2, [pc, #320]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000616:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061a:	3201      	adds	r2, #1
 800061c:	494e      	ldr	r1, [pc, #312]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if(HAL_GPIO_ReadPin(PIN_R3) == GPIO_PIN_SET)
 8000622:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000626:	484a      	ldr	r0, [pc, #296]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000628:	f000 ff0e 	bl	8001448 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d108      	bne.n	8000644 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			keypress[4*column_index+3] = 0;
 8000632:	4b48      	ldr	r3, [pc, #288]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	3303      	adds	r3, #3
 800063a:	4a47      	ldr	r2, [pc, #284]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800063c:	2100      	movs	r1, #0
 800063e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000642:	e00a      	b.n	800065a <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else
		{
			keypress[4*column_index+3]++;
 8000644:	4b43      	ldr	r3, [pc, #268]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	3303      	adds	r3, #3
 800064c:	4a42      	ldr	r2, [pc, #264]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800064e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000652:	3201      	adds	r2, #1
 8000654:	4940      	ldr	r1, [pc, #256]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		// --------------------------------------- //

		column_index = (++column_index) % 4;
 800065a:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a3c      	ldr	r2, [pc, #240]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b3b      	ldr	r3, [pc, #236]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	425a      	negs	r2, r3
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	f002 0203 	and.w	r2, r2, #3
 8000672:	bf58      	it	pl
 8000674:	4253      	negpl	r3, r2
 8000676:	4a37      	ldr	r2, [pc, #220]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000678:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(PIN_C0, (column_index == 0)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800067a:	4b36      	ldr	r3, [pc, #216]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf0c      	ite	eq
 8000682:	2301      	moveq	r3, #1
 8000684:	2300      	movne	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800068e:	4830      	ldr	r0, [pc, #192]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000690:	f000 fef2 	bl	8001478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_C1, (column_index == 1)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000694:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	bf0c      	ite	eq
 800069c:	2301      	moveq	r3, #1
 800069e:	2300      	movne	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006a8:	4829      	ldr	r0, [pc, #164]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006aa:	f000 fee5 	bl	8001478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_C2, (column_index == 2)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	bf0c      	ite	eq
 80006b6:	2301      	moveq	r3, #1
 80006b8:	2300      	movne	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c2:	4823      	ldr	r0, [pc, #140]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006c4:	f000 fed8 	bl	8001478 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIN_C3, (column_index == 3)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	bf0c      	ite	eq
 80006d0:	2301      	moveq	r3, #1
 80006d2:	2300      	movne	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006dc:	481c      	ldr	r0, [pc, #112]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006de:	f000 fecb 	bl	8001478 <HAL_GPIO_WritePin>

		for(int i = 0; i < 16; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e02a      	b.n	800073e <HAL_TIM_PeriodElapsedCallback+0x1ce>
		{
			if(keypress[i] > DEBOUNCE_TIME)
 80006e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d91c      	bls.n	800072e <HAL_TIM_PeriodElapsedCallback+0x1be>
			{
				if(ack[i] == 0)
 80006f4:	4a19      	ldr	r2, [pc, #100]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d11b      	bne.n	8000738 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				{
					int string_length = snprintf(string, sizeof(string), "%c\n", map[i]);
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4a16      	ldr	r2, [pc, #88]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800070a:	2140      	movs	r1, #64	@ 0x40
 800070c:	4816      	ldr	r0, [pc, #88]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800070e:	f002 ffa1 	bl	8003654 <sniprintf>
 8000712:	60b8      	str	r0, [r7, #8]
					HAL_UART_Transmit(&huart2, string, string_length, 1); //Do not use DMA because if we press 2 contemporary buttons the second is discarded and print only one
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	b29a      	uxth	r2, r3
 8000718:	2301      	movs	r3, #1
 800071a:	4913      	ldr	r1, [pc, #76]	@ (8000768 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800071c:	4813      	ldr	r0, [pc, #76]	@ (800076c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800071e:	f001 ffe7 	bl	80026f0 <HAL_UART_Transmit>

					ack[i] = 1;
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2101      	movs	r1, #1
 8000728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800072c:	e004      	b.n	8000738 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				}
			}
			else
			{
				ack[i] = 0;
 800072e:	4a0b      	ldr	r2, [pc, #44]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2100      	movs	r1, #0
 8000734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < 16; i++)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	ddd1      	ble.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
		}

	}

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000088 	.word	0x20000088
 8000750:	40020800 	.word	0x40020800
 8000754:	20000198 	.word	0x20000198
 8000758:	20000118 	.word	0x20000118
 800075c:	20000158 	.word	0x20000158
 8000760:	20000000 	.word	0x20000000
 8000764:	08003fd4 	.word	0x08003fd4
 8000768:	2000019c 	.word	0x2000019c
 800076c:	200000d0 	.word	0x200000d0

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 face 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f80e 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 f8ee 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000780:	f000 f8c2 	bl	8000908 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000784:	f000 f874 	bl	8000870 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <main+0x24>)
 800078a:	f001 fb77 	bl	8001e7c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078e:	bf00      	nop
 8000790:	e7fd      	b.n	800078e <main+0x1e>
 8000792:	bf00      	nop
 8000794:	20000088 	.word	0x20000088

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	@ 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 ff88 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <SystemClock_Config+0xd0>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	4a28      	ldr	r2, [pc, #160]	@ (8000868 <SystemClock_Config+0xd0>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80007cc:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <SystemClock_Config+0xd0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b23      	ldr	r3, [pc, #140]	@ (800086c <SystemClock_Config+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007e4:	4a21      	ldr	r2, [pc, #132]	@ (800086c <SystemClock_Config+0xd4>)
 80007e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <SystemClock_Config+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800080c:	2310      	movs	r3, #16
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000810:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000814:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000816:	2304      	movs	r3, #4
 8000818:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800081a:	2307      	movs	r3, #7
 800081c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fe42 	bl	80014ac <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800082e:	f000 f917 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f8a4 	bl	800199c <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085a:	f000 f901 	bl	8000a60 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	@ 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <MX_TIM2_Init+0x94>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_TIM2_Init+0x94>)
 8000896:	2253      	movs	r2, #83	@ 0x53
 8000898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <MX_TIM2_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000 - 1;
 80008a0:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_TIM2_Init+0x94>)
 80008a2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_TIM2_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_TIM2_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	@ (8000904 <MX_TIM2_Init+0x94>)
 80008b6:	f001 fa91 	bl	8001ddc <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f8ce 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_TIM2_Init+0x94>)
 80008d2:	f001 fc25 	bl	8002120 <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f8c0 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_TIM2_Init+0x94>)
 80008ee:	f001 fe2d 	bl	800254c <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f8b2 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000088 	.word	0x20000088

08000908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <MX_USART2_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000940:	f001 fe86 	bl	8002650 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f000 f889 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000d0 	.word	0x200000d0
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a36      	ldr	r2, [pc, #216]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b30      	ldr	r3, [pc, #192]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a2f      	ldr	r2, [pc, #188]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a28      	ldr	r2, [pc, #160]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a21      	ldr	r2, [pc, #132]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_GPIO_Init+0xf8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	481c      	ldr	r0, [pc, #112]	@ (8000a58 <MX_GPIO_Init+0xfc>)
 80009e8:	f000 fd46 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80009f2:	481a      	ldr	r0, [pc, #104]	@ (8000a5c <MX_GPIO_Init+0x100>)
 80009f4:	f000 fd40 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 80009f8:	f243 030c 	movw	r3, #12300	@ 0x300c
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <MX_GPIO_Init+0x100>)
 8000a0e:	f000 fb97 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a12:	2320      	movs	r3, #32
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <MX_GPIO_Init+0xfc>)
 8000a2a:	f000 fb89 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a2e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_GPIO_Init+0x100>)
 8000a48:	f000 fb7a 	bl	8001140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020800 	.word	0x40020800

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <Error_Handler+0x8>

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aaa:	2007      	movs	r0, #7
 8000aac:	f000 fa74 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000acc:	d115      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	201c      	movs	r0, #28
 8000af0:	f000 fa5d 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af4:	201c      	movs	r0, #28
 8000af6:	f000 fa76 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <HAL_UART_MspInit+0x94>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d133      	bne.n	8000b92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b62:	230c      	movs	r3, #12
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <HAL_UART_MspInit+0x9c>)
 8000b7e:	f000 fadf 	bl	8001140 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2026      	movs	r0, #38	@ 0x26
 8000b88:	f000 fa11 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	2026      	movs	r0, #38	@ 0x26
 8000b8e:	f000 fa2a 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 f8db 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <TIM2_IRQHandler+0x10>)
 8000c0e:	f001 f997 	bl	8001f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000088 	.word	0x20000088

08000c1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <USART2_IRQHandler+0x10>)
 8000c22:	f001 fdf1 	bl	8002808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000d0 	.word	0x200000d0

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f002 fd34 	bl	80036cc <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20018000 	.word	0x20018000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	200001dc 	.word	0x200001dc
 8000c98:	20000330 	.word	0x20000330

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 fcf3 	bl	80036d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fd3d 	bl	8000770 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d04:	08004034 	.word	0x08004034
  ldr r2, =_sbss
 8000d08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d0c:	2000032c 	.word	0x2000032c

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f92b 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe90 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f943 	bl	8001002 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f90b 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000010 	.word	0x20000010
 8000db0:	20000018 	.word	0x20000018
 8000db4:	20000014 	.word	0x20000014

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	200001e0 	.word	0x200001e0

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200001e0 	.word	0x200001e0

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	@ (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff3e 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff31 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa2 	bl	8000f54 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff feda 	bl	8000de0 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d008      	beq.n	800104c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2280      	movs	r2, #128	@ 0x80
 800103e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e052      	b.n	80010f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0216 	bic.w	r2, r2, #22
 800105a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800106a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d103      	bne.n	800107c <HAL_DMA_Abort+0x62>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0208 	bic.w	r2, r2, #8
 800108a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800109c:	e013      	b.n	80010c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800109e:	f7ff fe9f 	bl	8000de0 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d90c      	bls.n	80010c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2220      	movs	r2, #32
 80010b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e015      	b.n	80010f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1e4      	bne.n	800109e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d8:	223f      	movs	r2, #63	@ 0x3f
 80010da:	409a      	lsls	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d004      	beq.n	8001118 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e00c      	b.n	8001132 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2205      	movs	r2, #5
 800111c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e159      	b.n	8001410 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8148 	bne.w	800140a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a2 	beq.w	800140a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b57      	ldr	r3, [pc, #348]	@ (8001428 <HAL_GPIO_Init+0x2e8>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a56      	ldr	r2, [pc, #344]	@ (8001428 <HAL_GPIO_Init+0x2e8>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b54      	ldr	r3, [pc, #336]	@ (8001428 <HAL_GPIO_Init+0x2e8>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a52      	ldr	r2, [pc, #328]	@ (800142c <HAL_GPIO_Init+0x2ec>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a49      	ldr	r2, [pc, #292]	@ (8001430 <HAL_GPIO_Init+0x2f0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x202>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a48      	ldr	r2, [pc, #288]	@ (8001434 <HAL_GPIO_Init+0x2f4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x1fe>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a47      	ldr	r2, [pc, #284]	@ (8001438 <HAL_GPIO_Init+0x2f8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x1fa>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a46      	ldr	r2, [pc, #280]	@ (800143c <HAL_GPIO_Init+0x2fc>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x1f6>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a45      	ldr	r2, [pc, #276]	@ (8001440 <HAL_GPIO_Init+0x300>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x1f2>
 800132e:	2304      	movs	r3, #4
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001332:	2307      	movs	r3, #7
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x204>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x204>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001354:	4935      	ldr	r1, [pc, #212]	@ (800142c <HAL_GPIO_Init+0x2ec>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001362:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <HAL_GPIO_Init+0x304>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001386:	4a2f      	ldr	r2, [pc, #188]	@ (8001444 <HAL_GPIO_Init+0x304>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <HAL_GPIO_Init+0x304>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b0:	4a24      	ldr	r2, [pc, #144]	@ (8001444 <HAL_GPIO_Init+0x304>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b6:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <HAL_GPIO_Init+0x304>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013da:	4a1a      	ldr	r2, [pc, #104]	@ (8001444 <HAL_GPIO_Init+0x304>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_GPIO_Init+0x304>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001404:	4a0f      	ldr	r2, [pc, #60]	@ (8001444 <HAL_GPIO_Init+0x304>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f aea2 	bls.w	800115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	@ 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40013c00 	.word	0x40013c00

08001448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e001      	b.n	800146a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e267      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d075      	beq.n	80015b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ca:	4b88      	ldr	r3, [pc, #544]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d00c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b85      	ldr	r3, [pc, #532]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d112      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4b82      	ldr	r3, [pc, #520]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ee:	d10b      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	4b7e      	ldr	r3, [pc, #504]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d05b      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d157      	bne.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e242      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001510:	d106      	bne.n	8001520 <HAL_RCC_OscConfig+0x74>
 8001512:	4b76      	ldr	r3, [pc, #472]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a75      	ldr	r2, [pc, #468]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01d      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b70      	ldr	r3, [pc, #448]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6f      	ldr	r2, [pc, #444]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b6d      	ldr	r3, [pc, #436]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6c      	ldr	r2, [pc, #432]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0xb0>
 8001544:	4b69      	ldr	r3, [pc, #420]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a68      	ldr	r2, [pc, #416]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b66      	ldr	r3, [pc, #408]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a65      	ldr	r2, [pc, #404]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fc3c 	bl	8000de0 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fc38 	bl	8000de0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e207      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0xc0>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fc28 	bl	8000de0 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fc24 	bl	8000de0 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1f3      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	4b51      	ldr	r3, [pc, #324]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d063      	beq.n	800168a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015c2:	4b4a      	ldr	r3, [pc, #296]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b47      	ldr	r3, [pc, #284]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d11c      	bne.n	8001614 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b44      	ldr	r3, [pc, #272]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d116      	bne.n	8001614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	4b41      	ldr	r3, [pc, #260]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_RCC_OscConfig+0x152>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e1c7      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4937      	ldr	r1, [pc, #220]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	e03a      	b.n	800168a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <HAL_RCC_OscConfig+0x244>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fbdd 	bl	8000de0 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fbd9 	bl	8000de0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1a8      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4925      	ldr	r1, [pc, #148]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_OscConfig+0x244>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fbbc 	bl	8000de0 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fbb8 	bl	8000de0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e187      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d036      	beq.n	8001704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d016      	beq.n	80016cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_RCC_OscConfig+0x248>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fb9c 	bl	8000de0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fb98 	bl	8000de0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e167      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_RCC_OscConfig+0x240>)
 80016c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x200>
 80016ca:	e01b      	b.n	8001704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_RCC_OscConfig+0x248>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fb85 	bl	8000de0 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	e00e      	b.n	80016f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fb81 	bl	8000de0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d907      	bls.n	80016f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e150      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470000 	.word	0x42470000
 80016f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	4b88      	ldr	r3, [pc, #544]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ea      	bne.n	80016da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8097 	beq.w	8001840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b81      	ldr	r3, [pc, #516]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b7d      	ldr	r3, [pc, #500]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a7c      	ldr	r2, [pc, #496]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b7a      	ldr	r3, [pc, #488]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	4b77      	ldr	r3, [pc, #476]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d118      	bne.n	8001780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174e:	4b74      	ldr	r3, [pc, #464]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a73      	ldr	r2, [pc, #460]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175a:	f7ff fb41 	bl	8000de0 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001762:	f7ff fb3d 	bl	8000de0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e10c      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x474>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x2ea>
 8001788:	4b64      	ldr	r3, [pc, #400]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178c:	4a63      	ldr	r2, [pc, #396]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	@ 0x70
 8001794:	e01c      	b.n	80017d0 <HAL_RCC_OscConfig+0x324>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x30c>
 800179e:	4b5f      	ldr	r3, [pc, #380]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	4a5e      	ldr	r2, [pc, #376]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017aa:	4b5c      	ldr	r3, [pc, #368]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ae:	4a5b      	ldr	r2, [pc, #364]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0x324>
 80017b8:	4b58      	ldr	r3, [pc, #352]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a57      	ldr	r2, [pc, #348]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c4:	4b55      	ldr	r3, [pc, #340]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c8:	4a54      	ldr	r2, [pc, #336]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d015      	beq.n	8001804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fb02 	bl	8000de0 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fafe 	bl	8000de0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0cb      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	4b49      	ldr	r3, [pc, #292]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0ee      	beq.n	80017e0 <HAL_RCC_OscConfig+0x334>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff faec 	bl	8000de0 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fae8 	bl	8000de0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0b5      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ee      	bne.n	800180c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001834:	4b39      	ldr	r3, [pc, #228]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	4a38      	ldr	r2, [pc, #224]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a1 	beq.w	800198c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800184a:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b08      	cmp	r3, #8
 8001854:	d05c      	beq.n	8001910 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d141      	bne.n	80018e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fabc 	bl	8000de0 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fab8 	bl	8000de0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e087      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b27      	ldr	r3, [pc, #156]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	3b01      	subs	r3, #1
 80018a4:	041b      	lsls	r3, r3, #16
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	491b      	ldr	r1, [pc, #108]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_RCC_OscConfig+0x478>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fa91 	bl	8000de0 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fa8d 	bl	8000de0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e05c      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x416>
 80018e0:	e054      	b.n	800198c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <HAL_RCC_OscConfig+0x478>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff fa7a 	bl	8000de0 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff fa76 	bl	8000de0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e045      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_RCC_OscConfig+0x470>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
 800190e:	e03d      	b.n	800198c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e038      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000
 8001924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x4ec>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d028      	beq.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d121      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d11a      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800195e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	4293      	cmp	r3, r2
 8001962:	d111      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0cc      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b68      	ldr	r3, [pc, #416]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d90c      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b65      	ldr	r3, [pc, #404]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a58      	ldr	r2, [pc, #352]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d044      	beq.n	8001abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d119      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e06f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e067      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4934      	ldr	r1, [pc, #208]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f9a8 	bl	8000de0 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f9a4 	bl	8000de0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e04f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d20c      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	490a      	ldr	r1, [pc, #40]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f908 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08003fd8 	.word	0x08003fd8
 8001b60:	20000010 	.word	0x20000010
 8001b64:	20000014 	.word	0x20000014

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b6c:	b094      	sub	sp, #80	@ 0x50
 8001b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b80:	4b79      	ldr	r3, [pc, #484]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	f200 80e1 	bhi.w	8001d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x34>
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9a:	e0db      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b73      	ldr	r3, [pc, #460]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba0:	e0db      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba2:	4b73      	ldr	r3, [pc, #460]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba6:	e0d8      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	099b      	lsrs	r3, r3, #6
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bda:	4622      	mov	r2, r4
 8001bdc:	462b      	mov	r3, r5
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1a51      	subs	r1, r2, r1
 8001bf6:	6139      	str	r1, [r7, #16]
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	4651      	mov	r1, sl
 8001c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c16:	4651      	mov	r1, sl
 8001c18:	018a      	lsls	r2, r1, #6
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c20:	4659      	mov	r1, fp
 8001c22:	eb63 0901 	sbc.w	r9, r3, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	eb18 0303 	adds.w	r3, r8, r3
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	462b      	mov	r3, r5
 8001c48:	eb49 0303 	adc.w	r3, r9, r3
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	024b      	lsls	r3, r1, #9
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c64:	4621      	mov	r1, r4
 8001c66:	024a      	lsls	r2, r1, #9
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c6e:	2200      	movs	r2, #0
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c78:	f7fe fb02 	bl	8000280 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c84:	e058      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c86:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	4611      	mov	r1, r2
 8001c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca0:	4642      	mov	r2, r8
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0159      	lsls	r1, r3, #5
 8001cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb2:	0150      	lsls	r0, r2, #5
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4641      	mov	r1, r8
 8001cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	00eb      	lsls	r3, r5, #3
 8001cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cee:	00e2      	lsls	r2, r4, #3
 8001cf0:	4614      	mov	r4, r2
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	4643      	mov	r3, r8
 8001cf6:	18e3      	adds	r3, r4, r3
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	464b      	mov	r3, r9
 8001cfc:	eb45 0303 	adc.w	r3, r5, r3
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0e:	4629      	mov	r1, r5
 8001d10:	028b      	lsls	r3, r1, #10
 8001d12:	4621      	mov	r1, r4
 8001d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d18:	4621      	mov	r1, r4
 8001d1a:	028a      	lsls	r2, r1, #10
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d22:	2200      	movs	r2, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	61fa      	str	r2, [r7, #28]
 8001d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d2c:	f7fe faa8 	bl	8000280 <__aeabi_uldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4613      	mov	r3, r2
 8001d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	3301      	adds	r3, #1
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d52:	e002      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3750      	adds	r7, #80	@ 0x50
 8001d60:	46bd      	mov	sp, r7
 8001d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	007a1200 	.word	0x007a1200

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000010 	.word	0x20000010

08001d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d90:	f7ff fff0 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	4903      	ldr	r1, [pc, #12]	@ (8001db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08003fe8 	.word	0x08003fe8

08001db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db8:	f7ff ffdc 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0b5b      	lsrs	r3, r3, #13
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4903      	ldr	r1, [pc, #12]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	08003fe8 	.word	0x08003fe8

08001ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e041      	b.n	8001e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fe5a 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3304      	adds	r3, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f000 fa70 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d001      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e044      	b.n	8001f1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xb0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d018      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ebe:	d013      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f30 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <HAL_TIM_Base_Start_IT+0xbc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a16      	ldr	r2, [pc, #88]	@ (8001f3c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d010      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0a:	e007      	b.n	8001f1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40014000 	.word	0x40014000

08001f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0202 	mvn.w	r2, #2
 8001f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f999 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f98b 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f99c 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d020      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0204 	mvn.w	r2, #4
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f973 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f965 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f976 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d020      	beq.n	800203c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f94d 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f93f 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f950 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0210 	mvn.w	r2, #16
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2208      	movs	r2, #8
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f927 	bl	80022c2 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f919 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f92a 	bl	80022d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0201 	mvn.w	r2, #1
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fa62 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fab6 	bl	800263c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8fb 	bl	80022ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0220 	mvn.w	r2, #32
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fa88 	bl	8002628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_TIM_ConfigClockSource+0x1c>
 8002138:	2302      	movs	r3, #2
 800213a:	e0b4      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x186>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800215a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002174:	d03e      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800217a:	f200 8087 	bhi.w	800228c <HAL_TIM_ConfigClockSource+0x16c>
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002182:	f000 8086 	beq.w	8002292 <HAL_TIM_ConfigClockSource+0x172>
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800218a:	d87f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 800218c:	2b70      	cmp	r3, #112	@ 0x70
 800218e:	d01a      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002190:	2b70      	cmp	r3, #112	@ 0x70
 8002192:	d87b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 8002194:	2b60      	cmp	r3, #96	@ 0x60
 8002196:	d050      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x11a>
 8002198:	2b60      	cmp	r3, #96	@ 0x60
 800219a:	d877      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 800219c:	2b50      	cmp	r3, #80	@ 0x50
 800219e:	d03c      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xfa>
 80021a0:	2b50      	cmp	r3, #80	@ 0x50
 80021a2:	d873      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021a4:	2b40      	cmp	r3, #64	@ 0x40
 80021a6:	d058      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x13a>
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d86f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b30      	cmp	r3, #48	@ 0x30
 80021ae:	d064      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021b0:	2b30      	cmp	r3, #48	@ 0x30
 80021b2:	d86b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d060      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d867      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05c      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d05a      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x15a>
 80021c4:	e062      	b.n	800228c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021d6:	f000 f999 	bl	800250c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80021e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	609a      	str	r2, [r3, #8]
      break;
 80021f2:	e04f      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002204:	f000 f982 	bl	800250c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002216:	609a      	str	r2, [r3, #8]
      break;
 8002218:	e03c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	461a      	mov	r2, r3
 8002228:	f000 f8f6 	bl	8002418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2150      	movs	r1, #80	@ 0x50
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f94f 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002238:	e02c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002246:	461a      	mov	r2, r3
 8002248:	f000 f915 	bl	8002476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2160      	movs	r1, #96	@ 0x60
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f93f 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002258:	e01c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002266:	461a      	mov	r2, r3
 8002268:	f000 f8d6 	bl	8002418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2140      	movs	r1, #64	@ 0x40
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f92f 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002278:	e00c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f000 f926 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 800228a:	e003      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e000      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3a      	ldr	r2, [pc, #232]	@ (80023fc <TIM_Base_SetConfig+0xfc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00f      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800231e:	d00b      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a37      	ldr	r2, [pc, #220]	@ (8002400 <TIM_Base_SetConfig+0x100>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d007      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a36      	ldr	r2, [pc, #216]	@ (8002404 <TIM_Base_SetConfig+0x104>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d003      	beq.n	8002338 <TIM_Base_SetConfig+0x38>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <TIM_Base_SetConfig+0x108>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d108      	bne.n	800234a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800233e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2b      	ldr	r2, [pc, #172]	@ (80023fc <TIM_Base_SetConfig+0xfc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01b      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002358:	d017      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a28      	ldr	r2, [pc, #160]	@ (8002400 <TIM_Base_SetConfig+0x100>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <TIM_Base_SetConfig+0x104>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00f      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a26      	ldr	r2, [pc, #152]	@ (8002408 <TIM_Base_SetConfig+0x108>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00b      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a25      	ldr	r2, [pc, #148]	@ (800240c <TIM_Base_SetConfig+0x10c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <TIM_Base_SetConfig+0x110>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <TIM_Base_SetConfig+0x114>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d108      	bne.n	800239c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <TIM_Base_SetConfig+0xfc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d103      	bne.n	80023d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f023 0201 	bic.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
  }
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40010000 	.word	0x40010000
 8002400:	40000400 	.word	0x40000400
 8002404:	40000800 	.word	0x40000800
 8002408:	40000c00 	.word	0x40000c00
 800240c:	40014000 	.word	0x40014000
 8002410:	40014400 	.word	0x40014400
 8002414:	40014800 	.word	0x40014800

08002418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f023 030a 	bic.w	r3, r3, #10
 8002454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	621a      	str	r2, [r3, #32]
}
 800246a:	bf00      	nop
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002476:	b480      	push	{r7}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f023 0210 	bic.w	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	031b      	lsls	r3, r3, #12
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	621a      	str	r2, [r3, #32]
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f043 0307 	orr.w	r3, r3, #7
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	021a      	lsls	r2, r3, #8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	431a      	orrs	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e050      	b.n	8002606 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d018      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b0:	d013      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00e      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a16      	ldr	r2, [pc, #88]	@ (800261c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a15      	ldr	r2, [pc, #84]	@ (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a13      	ldr	r2, [pc, #76]	@ (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10c      	bne.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40010000 	.word	0x40010000
 8002618:	40000400 	.word	0x40000400
 800261c:	40000800 	.word	0x40000800
 8002620:	40000c00 	.word	0x40000c00
 8002624:	40014000 	.word	0x40014000

08002628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e042      	b.n	80026e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fa46 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	@ 0x24
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fd69 	bl	800316c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b20      	cmp	r3, #32
 800270e:	d175      	bne.n	80027fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_UART_Transmit+0x2c>
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e06e      	b.n	80027fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2221      	movs	r2, #33	@ 0x21
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800272e:	f7fe fb57 	bl	8000de0 <HAL_GetTick>
 8002732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002748:	d108      	bne.n	800275c <HAL_UART_Transmit+0x6c>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d104      	bne.n	800275c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	e003      	b.n	8002764 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002764:	e02e      	b.n	80027c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	2180      	movs	r1, #128	@ 0x80
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fb05 	bl	8002d80 <UART_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e03a      	b.n	80027fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800279c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	3302      	adds	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e007      	b.n	80027b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3301      	adds	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1cb      	bne.n	8002766 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2140      	movs	r1, #64	@ 0x40
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fad1 	bl	8002d80 <UART_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e006      	b.n	80027fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0ba      	sub	sp, #232	@ 0xe8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800283a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_UART_IRQHandler+0x66>
 800285a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fbc2 	bl	8002ff0 <UART_Receive_IT>
      return;
 800286c:	e25b      	b.n	8002d26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800286e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80de 	beq.w	8002a34 <HAL_UART_IRQHandler+0x22c>
 8002878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002888:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80d1 	beq.w	8002a34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_UART_IRQHandler+0xae>
 800289e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_UART_IRQHandler+0xd2>
 80028c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_UART_IRQHandler+0xf6>
 80028e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d011      	beq.n	800292e <HAL_UART_IRQHandler+0x126>
 800290a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f043 0208 	orr.w	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 81f2 	beq.w	8002d1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_UART_IRQHandler+0x14e>
 8002944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fb4d 	bl	8002ff0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002960:	2b40      	cmp	r3, #64	@ 0x40
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <HAL_UART_IRQHandler+0x17a>
 800297a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d04f      	beq.n	8002a22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa55 	bl	8002e32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d141      	bne.n	8002a1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3314      	adds	r3, #20
 800299c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3314      	adds	r3, #20
 80029be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1d9      	bne.n	8002996 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d013      	beq.n	8002a12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ee:	4a7e      	ldr	r2, [pc, #504]	@ (8002be8 <HAL_UART_IRQHandler+0x3e0>)
 80029f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fb7f 	bl	80010fa <HAL_DMA_Abort_IT>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a10:	e00e      	b.n	8002a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f99e 	bl	8002d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e00a      	b.n	8002a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f99a 	bl	8002d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a20:	e006      	b.n	8002a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f996 	bl	8002d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a2e:	e175      	b.n	8002d1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	bf00      	nop
    return;
 8002a32:	e173      	b.n	8002d1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f040 814f 	bne.w	8002cdc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8148 	beq.w	8002cdc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8141 	beq.w	8002cdc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7a:	2b40      	cmp	r3, #64	@ 0x40
 8002a7c:	f040 80b6 	bne.w	8002bec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8145 	beq.w	8002d20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	f080 813e 	bcs.w	8002d20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab6:	f000 8088 	beq.w	8002bca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ae6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002aea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1d9      	bne.n	8002aba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3314      	adds	r3, #20
 8002b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e1      	bne.n	8002b06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3314      	adds	r3, #20
 8002b48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e3      	bne.n	8002b42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9a:	f023 0310 	bic.w	r3, r3, #16
 8002b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002bac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e3      	bne.n	8002b88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fa28 	bl	800101a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8c1 	bl	8002d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be6:	e09b      	b.n	8002d20 <HAL_UART_IRQHandler+0x518>
 8002be8:	08002ef9 	.word	0x08002ef9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 808e 	beq.w	8002d24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8089 	beq.w	8002d24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c36:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e3      	bne.n	8002c12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	623b      	str	r3, [r7, #32]
   return(result);
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e3      	bne.n	8002c4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0310 	bic.w	r3, r3, #16
 8002ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002cb4:	61fa      	str	r2, [r7, #28]
 8002cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	69b9      	ldr	r1, [r7, #24]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e3      	bne.n	8002c90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f847 	bl	8002d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cda:	e023      	b.n	8002d24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <HAL_UART_IRQHandler+0x4f4>
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f913 	bl	8002f20 <UART_Transmit_IT>
    return;
 8002cfa:	e014      	b.n	8002d26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <HAL_UART_IRQHandler+0x51e>
 8002d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f953 	bl	8002fc0 <UART_EndTransmit_IT>
    return;
 8002d1a:	e004      	b.n	8002d26 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d1c:	bf00      	nop
 8002d1e:	e002      	b.n	8002d26 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d24:	bf00      	nop
  }
}
 8002d26:	37e8      	adds	r7, #232	@ 0xe8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d90:	e03b      	b.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d037      	beq.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fe f821 	bl	8000de0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e03a      	b.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d023      	beq.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b80      	cmp	r3, #128	@ 0x80
 8002dc6:	d020      	beq.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b40      	cmp	r3, #64	@ 0x40
 8002dcc:	d01d      	beq.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d116      	bne.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f81d 	bl	8002e32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00f      	b.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4013      	ands	r3, r2
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d0b4      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b095      	sub	sp, #84	@ 0x54
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e5      	bne.n	8002e3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3314      	adds	r3, #20
 8002e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d119      	bne.n	8002ede <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f023 0310 	bic.w	r3, r3, #16
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eca:	61ba      	str	r2, [r7, #24]
 8002ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e5      	bne.n	8002eaa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002eec:	bf00      	nop
 8002eee:	3754      	adds	r7, #84	@ 0x54
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff1e 	bl	8002d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b21      	cmp	r3, #33	@ 0x21
 8002f32:	d13e      	bne.n	8002fb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3c:	d114      	bne.n	8002f68 <UART_Transmit_IT+0x48>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d110      	bne.n	8002f68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	621a      	str	r2, [r3, #32]
 8002f66:	e008      	b.n	8002f7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	1c59      	adds	r1, r3, #1
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6211      	str	r1, [r2, #32]
 8002f72:	781a      	ldrb	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4619      	mov	r1, r3
 8002f88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fea3 	bl	8002d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	@ 0x30
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b22      	cmp	r3, #34	@ 0x22
 8003002:	f040 80ae 	bne.w	8003162 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300e:	d117      	bne.n	8003040 <UART_Receive_IT+0x50>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d113      	bne.n	8003040 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302e:	b29a      	uxth	r2, r3
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
 800303e:	e026      	b.n	800308e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003052:	d007      	beq.n	8003064 <UART_Receive_IT+0x74>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <UART_Receive_IT+0x82>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e008      	b.n	8003084 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800307e:	b2da      	uxtb	r2, r3
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4619      	mov	r1, r3
 800309c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d15d      	bne.n	800315e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0220 	bic.w	r2, r2, #32
 80030b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d135      	bne.n	8003154 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	613b      	str	r3, [r7, #16]
   return(result);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	623a      	str	r2, [r7, #32]
 8003110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003112:	69f9      	ldr	r1, [r7, #28]
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	61bb      	str	r3, [r7, #24]
   return(result);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e5      	bne.n	80030ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b10      	cmp	r3, #16
 800312e:	d10a      	bne.n	8003146 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fe0b 	bl	8002d68 <HAL_UARTEx_RxEventCallback>
 8003152:	e002      	b.n	800315a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fdf3 	bl	8002d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e002      	b.n	8003164 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3730      	adds	r7, #48	@ 0x30
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b0c0      	sub	sp, #256	@ 0x100
 8003172:	af00      	add	r7, sp, #0
 8003174:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	68d9      	ldr	r1, [r3, #12]
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	ea40 0301 	orr.w	r3, r0, r1
 8003194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031c4:	f021 010c 	bic.w	r1, r1, #12
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031d2:	430b      	orrs	r3, r1
 80031d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e6:	6999      	ldr	r1, [r3, #24]
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	ea40 0301 	orr.w	r3, r0, r1
 80031f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003438 <UART_SetConfig+0x2cc>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d005      	beq.n	800320c <UART_SetConfig+0xa0>
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b8d      	ldr	r3, [pc, #564]	@ (800343c <UART_SetConfig+0x2d0>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d104      	bne.n	8003216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800320c:	f7fe fdd2 	bl	8001db4 <HAL_RCC_GetPCLK2Freq>
 8003210:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003214:	e003      	b.n	800321e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003216:	f7fe fdb9 	bl	8001d8c <HAL_RCC_GetPCLK1Freq>
 800321a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003228:	f040 810c 	bne.w	8003444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800322c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003230:	2200      	movs	r2, #0
 8003232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003236:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800323a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800323e:	4622      	mov	r2, r4
 8003240:	462b      	mov	r3, r5
 8003242:	1891      	adds	r1, r2, r2
 8003244:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003246:	415b      	adcs	r3, r3
 8003248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800324a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800324e:	4621      	mov	r1, r4
 8003250:	eb12 0801 	adds.w	r8, r2, r1
 8003254:	4629      	mov	r1, r5
 8003256:	eb43 0901 	adc.w	r9, r3, r1
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326e:	4690      	mov	r8, r2
 8003270:	4699      	mov	r9, r3
 8003272:	4623      	mov	r3, r4
 8003274:	eb18 0303 	adds.w	r3, r8, r3
 8003278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800327c:	462b      	mov	r3, r5
 800327e:	eb49 0303 	adc.w	r3, r9, r3
 8003282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800329a:	460b      	mov	r3, r1
 800329c:	18db      	adds	r3, r3, r3
 800329e:	653b      	str	r3, [r7, #80]	@ 0x50
 80032a0:	4613      	mov	r3, r2
 80032a2:	eb42 0303 	adc.w	r3, r2, r3
 80032a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80032a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032b0:	f7fc ffe6 	bl	8000280 <__aeabi_uldivmod>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4b61      	ldr	r3, [pc, #388]	@ (8003440 <UART_SetConfig+0x2d4>)
 80032ba:	fba3 2302 	umull	r2, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	011c      	lsls	r4, r3, #4
 80032c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	1891      	adds	r1, r2, r2
 80032da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032dc:	415b      	adcs	r3, r3
 80032de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032e4:	4641      	mov	r1, r8
 80032e6:	eb12 0a01 	adds.w	sl, r2, r1
 80032ea:	4649      	mov	r1, r9
 80032ec:	eb43 0b01 	adc.w	fp, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003304:	4692      	mov	sl, r2
 8003306:	469b      	mov	fp, r3
 8003308:	4643      	mov	r3, r8
 800330a:	eb1a 0303 	adds.w	r3, sl, r3
 800330e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003312:	464b      	mov	r3, r9
 8003314:	eb4b 0303 	adc.w	r3, fp, r3
 8003318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003328:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800332c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003330:	460b      	mov	r3, r1
 8003332:	18db      	adds	r3, r3, r3
 8003334:	643b      	str	r3, [r7, #64]	@ 0x40
 8003336:	4613      	mov	r3, r2
 8003338:	eb42 0303 	adc.w	r3, r2, r3
 800333c:	647b      	str	r3, [r7, #68]	@ 0x44
 800333e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003346:	f7fc ff9b 	bl	8000280 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4611      	mov	r1, r2
 8003350:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <UART_SetConfig+0x2d4>)
 8003352:	fba3 2301 	umull	r2, r3, r3, r1
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2264      	movs	r2, #100	@ 0x64
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	1acb      	subs	r3, r1, r3
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003366:	4b36      	ldr	r3, [pc, #216]	@ (8003440 <UART_SetConfig+0x2d4>)
 8003368:	fba3 2302 	umull	r2, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003374:	441c      	add	r4, r3
 8003376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003380:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003388:	4642      	mov	r2, r8
 800338a:	464b      	mov	r3, r9
 800338c:	1891      	adds	r1, r2, r2
 800338e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003390:	415b      	adcs	r3, r3
 8003392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003398:	4641      	mov	r1, r8
 800339a:	1851      	adds	r1, r2, r1
 800339c:	6339      	str	r1, [r7, #48]	@ 0x30
 800339e:	4649      	mov	r1, r9
 80033a0:	414b      	adcs	r3, r1
 80033a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033b0:	4659      	mov	r1, fp
 80033b2:	00cb      	lsls	r3, r1, #3
 80033b4:	4651      	mov	r1, sl
 80033b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ba:	4651      	mov	r1, sl
 80033bc:	00ca      	lsls	r2, r1, #3
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	4642      	mov	r2, r8
 80033c6:	189b      	adds	r3, r3, r2
 80033c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033cc:	464b      	mov	r3, r9
 80033ce:	460a      	mov	r2, r1
 80033d0:	eb42 0303 	adc.w	r3, r2, r3
 80033d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033ec:	460b      	mov	r3, r1
 80033ee:	18db      	adds	r3, r3, r3
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033f2:	4613      	mov	r3, r2
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003402:	f7fc ff3d 	bl	8000280 <__aeabi_uldivmod>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <UART_SetConfig+0x2d4>)
 800340c:	fba3 1302 	umull	r1, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	2164      	movs	r1, #100	@ 0x64
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	3332      	adds	r3, #50	@ 0x32
 800341e:	4a08      	ldr	r2, [pc, #32]	@ (8003440 <UART_SetConfig+0x2d4>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	f003 0207 	and.w	r2, r3, #7
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4422      	add	r2, r4
 8003432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003434:	e106      	b.n	8003644 <UART_SetConfig+0x4d8>
 8003436:	bf00      	nop
 8003438:	40011000 	.word	0x40011000
 800343c:	40011400 	.word	0x40011400
 8003440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003448:	2200      	movs	r2, #0
 800344a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800344e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003456:	4642      	mov	r2, r8
 8003458:	464b      	mov	r3, r9
 800345a:	1891      	adds	r1, r2, r2
 800345c:	6239      	str	r1, [r7, #32]
 800345e:	415b      	adcs	r3, r3
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
 8003462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003466:	4641      	mov	r1, r8
 8003468:	1854      	adds	r4, r2, r1
 800346a:	4649      	mov	r1, r9
 800346c:	eb43 0501 	adc.w	r5, r3, r1
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	00eb      	lsls	r3, r5, #3
 800347a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800347e:	00e2      	lsls	r2, r4, #3
 8003480:	4614      	mov	r4, r2
 8003482:	461d      	mov	r5, r3
 8003484:	4643      	mov	r3, r8
 8003486:	18e3      	adds	r3, r4, r3
 8003488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800348c:	464b      	mov	r3, r9
 800348e:	eb45 0303 	adc.w	r3, r5, r3
 8003492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034b2:	4629      	mov	r1, r5
 80034b4:	008b      	lsls	r3, r1, #2
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034bc:	4621      	mov	r1, r4
 80034be:	008a      	lsls	r2, r1, #2
 80034c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034c4:	f7fc fedc 	bl	8000280 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4b60      	ldr	r3, [pc, #384]	@ (8003650 <UART_SetConfig+0x4e4>)
 80034ce:	fba3 2302 	umull	r2, r3, r3, r2
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	011c      	lsls	r4, r3, #4
 80034d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034e8:	4642      	mov	r2, r8
 80034ea:	464b      	mov	r3, r9
 80034ec:	1891      	adds	r1, r2, r2
 80034ee:	61b9      	str	r1, [r7, #24]
 80034f0:	415b      	adcs	r3, r3
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f8:	4641      	mov	r1, r8
 80034fa:	1851      	adds	r1, r2, r1
 80034fc:	6139      	str	r1, [r7, #16]
 80034fe:	4649      	mov	r1, r9
 8003500:	414b      	adcs	r3, r1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003510:	4659      	mov	r1, fp
 8003512:	00cb      	lsls	r3, r1, #3
 8003514:	4651      	mov	r1, sl
 8003516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351a:	4651      	mov	r1, sl
 800351c:	00ca      	lsls	r2, r1, #3
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	4603      	mov	r3, r0
 8003524:	4642      	mov	r2, r8
 8003526:	189b      	adds	r3, r3, r2
 8003528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800352c:	464b      	mov	r3, r9
 800352e:	460a      	mov	r2, r1
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003542:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003550:	4649      	mov	r1, r9
 8003552:	008b      	lsls	r3, r1, #2
 8003554:	4641      	mov	r1, r8
 8003556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355a:	4641      	mov	r1, r8
 800355c:	008a      	lsls	r2, r1, #2
 800355e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003562:	f7fc fe8d 	bl	8000280 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4611      	mov	r1, r2
 800356c:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <UART_SetConfig+0x4e4>)
 800356e:	fba3 2301 	umull	r2, r3, r3, r1
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2264      	movs	r2, #100	@ 0x64
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	1acb      	subs	r3, r1, r3
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	3332      	adds	r3, #50	@ 0x32
 8003580:	4a33      	ldr	r2, [pc, #204]	@ (8003650 <UART_SetConfig+0x4e4>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800358c:	441c      	add	r4, r3
 800358e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003592:	2200      	movs	r2, #0
 8003594:	673b      	str	r3, [r7, #112]	@ 0x70
 8003596:	677a      	str	r2, [r7, #116]	@ 0x74
 8003598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	415b      	adcs	r3, r3
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ac:	4641      	mov	r1, r8
 80035ae:	1851      	adds	r1, r2, r1
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	4649      	mov	r1, r9
 80035b4:	414b      	adcs	r3, r1
 80035b6:	607b      	str	r3, [r7, #4]
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035c4:	4659      	mov	r1, fp
 80035c6:	00cb      	lsls	r3, r1, #3
 80035c8:	4651      	mov	r1, sl
 80035ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ce:	4651      	mov	r1, sl
 80035d0:	00ca      	lsls	r2, r1, #3
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	4642      	mov	r2, r8
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035de:	464b      	mov	r3, r9
 80035e0:	460a      	mov	r2, r1
 80035e2:	eb42 0303 	adc.w	r3, r2, r3
 80035e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80035f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003600:	4649      	mov	r1, r9
 8003602:	008b      	lsls	r3, r1, #2
 8003604:	4641      	mov	r1, r8
 8003606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800360a:	4641      	mov	r1, r8
 800360c:	008a      	lsls	r2, r1, #2
 800360e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003612:	f7fc fe35 	bl	8000280 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <UART_SetConfig+0x4e4>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	@ 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	3332      	adds	r3, #50	@ 0x32
 800362e:	4a08      	ldr	r2, [pc, #32]	@ (8003650 <UART_SetConfig+0x4e4>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 020f 	and.w	r2, r3, #15
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4422      	add	r2, r4
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800364a:	46bd      	mov	sp, r7
 800364c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003650:	51eb851f 	.word	0x51eb851f

08003654 <sniprintf>:
 8003654:	b40c      	push	{r2, r3}
 8003656:	b530      	push	{r4, r5, lr}
 8003658:	4b17      	ldr	r3, [pc, #92]	@ (80036b8 <sniprintf+0x64>)
 800365a:	1e0c      	subs	r4, r1, #0
 800365c:	681d      	ldr	r5, [r3, #0]
 800365e:	b09d      	sub	sp, #116	@ 0x74
 8003660:	da08      	bge.n	8003674 <sniprintf+0x20>
 8003662:	238b      	movs	r3, #139	@ 0x8b
 8003664:	602b      	str	r3, [r5, #0]
 8003666:	f04f 30ff 	mov.w	r0, #4294967295
 800366a:	b01d      	add	sp, #116	@ 0x74
 800366c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003670:	b002      	add	sp, #8
 8003672:	4770      	bx	lr
 8003674:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003678:	f8ad 3014 	strh.w	r3, [sp, #20]
 800367c:	bf14      	ite	ne
 800367e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003682:	4623      	moveq	r3, r4
 8003684:	9304      	str	r3, [sp, #16]
 8003686:	9307      	str	r3, [sp, #28]
 8003688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800368c:	9002      	str	r0, [sp, #8]
 800368e:	9006      	str	r0, [sp, #24]
 8003690:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003694:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003696:	ab21      	add	r3, sp, #132	@ 0x84
 8003698:	a902      	add	r1, sp, #8
 800369a:	4628      	mov	r0, r5
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	f000 f995 	bl	80039cc <_svfiprintf_r>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	bfbc      	itt	lt
 80036a6:	238b      	movlt	r3, #139	@ 0x8b
 80036a8:	602b      	strlt	r3, [r5, #0]
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d0dd      	beq.n	800366a <sniprintf+0x16>
 80036ae:	9b02      	ldr	r3, [sp, #8]
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e7d9      	b.n	800366a <sniprintf+0x16>
 80036b6:	bf00      	nop
 80036b8:	2000001c 	.word	0x2000001c

080036bc <memset>:
 80036bc:	4402      	add	r2, r0
 80036be:	4603      	mov	r3, r0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <__errno>:
 80036cc:	4b01      	ldr	r3, [pc, #4]	@ (80036d4 <__errno+0x8>)
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	2000001c 	.word	0x2000001c

080036d8 <__libc_init_array>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	4d0d      	ldr	r5, [pc, #52]	@ (8003710 <__libc_init_array+0x38>)
 80036dc:	4c0d      	ldr	r4, [pc, #52]	@ (8003714 <__libc_init_array+0x3c>)
 80036de:	1b64      	subs	r4, r4, r5
 80036e0:	10a4      	asrs	r4, r4, #2
 80036e2:	2600      	movs	r6, #0
 80036e4:	42a6      	cmp	r6, r4
 80036e6:	d109      	bne.n	80036fc <__libc_init_array+0x24>
 80036e8:	4d0b      	ldr	r5, [pc, #44]	@ (8003718 <__libc_init_array+0x40>)
 80036ea:	4c0c      	ldr	r4, [pc, #48]	@ (800371c <__libc_init_array+0x44>)
 80036ec:	f000 fc66 	bl	8003fbc <_init>
 80036f0:	1b64      	subs	r4, r4, r5
 80036f2:	10a4      	asrs	r4, r4, #2
 80036f4:	2600      	movs	r6, #0
 80036f6:	42a6      	cmp	r6, r4
 80036f8:	d105      	bne.n	8003706 <__libc_init_array+0x2e>
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003700:	4798      	blx	r3
 8003702:	3601      	adds	r6, #1
 8003704:	e7ee      	b.n	80036e4 <__libc_init_array+0xc>
 8003706:	f855 3b04 	ldr.w	r3, [r5], #4
 800370a:	4798      	blx	r3
 800370c:	3601      	adds	r6, #1
 800370e:	e7f2      	b.n	80036f6 <__libc_init_array+0x1e>
 8003710:	0800402c 	.word	0x0800402c
 8003714:	0800402c 	.word	0x0800402c
 8003718:	0800402c 	.word	0x0800402c
 800371c:	08004030 	.word	0x08004030

08003720 <__retarget_lock_acquire_recursive>:
 8003720:	4770      	bx	lr

08003722 <__retarget_lock_release_recursive>:
 8003722:	4770      	bx	lr

08003724 <_free_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4605      	mov	r5, r0
 8003728:	2900      	cmp	r1, #0
 800372a:	d041      	beq.n	80037b0 <_free_r+0x8c>
 800372c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003730:	1f0c      	subs	r4, r1, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	bfb8      	it	lt
 8003736:	18e4      	addlt	r4, r4, r3
 8003738:	f000 f8e0 	bl	80038fc <__malloc_lock>
 800373c:	4a1d      	ldr	r2, [pc, #116]	@ (80037b4 <_free_r+0x90>)
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	b933      	cbnz	r3, 8003750 <_free_r+0x2c>
 8003742:	6063      	str	r3, [r4, #4]
 8003744:	6014      	str	r4, [r2, #0]
 8003746:	4628      	mov	r0, r5
 8003748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800374c:	f000 b8dc 	b.w	8003908 <__malloc_unlock>
 8003750:	42a3      	cmp	r3, r4
 8003752:	d908      	bls.n	8003766 <_free_r+0x42>
 8003754:	6820      	ldr	r0, [r4, #0]
 8003756:	1821      	adds	r1, r4, r0
 8003758:	428b      	cmp	r3, r1
 800375a:	bf01      	itttt	eq
 800375c:	6819      	ldreq	r1, [r3, #0]
 800375e:	685b      	ldreq	r3, [r3, #4]
 8003760:	1809      	addeq	r1, r1, r0
 8003762:	6021      	streq	r1, [r4, #0]
 8003764:	e7ed      	b.n	8003742 <_free_r+0x1e>
 8003766:	461a      	mov	r2, r3
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	b10b      	cbz	r3, 8003770 <_free_r+0x4c>
 800376c:	42a3      	cmp	r3, r4
 800376e:	d9fa      	bls.n	8003766 <_free_r+0x42>
 8003770:	6811      	ldr	r1, [r2, #0]
 8003772:	1850      	adds	r0, r2, r1
 8003774:	42a0      	cmp	r0, r4
 8003776:	d10b      	bne.n	8003790 <_free_r+0x6c>
 8003778:	6820      	ldr	r0, [r4, #0]
 800377a:	4401      	add	r1, r0
 800377c:	1850      	adds	r0, r2, r1
 800377e:	4283      	cmp	r3, r0
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	d1e0      	bne.n	8003746 <_free_r+0x22>
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	6053      	str	r3, [r2, #4]
 800378a:	4408      	add	r0, r1
 800378c:	6010      	str	r0, [r2, #0]
 800378e:	e7da      	b.n	8003746 <_free_r+0x22>
 8003790:	d902      	bls.n	8003798 <_free_r+0x74>
 8003792:	230c      	movs	r3, #12
 8003794:	602b      	str	r3, [r5, #0]
 8003796:	e7d6      	b.n	8003746 <_free_r+0x22>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	1821      	adds	r1, r4, r0
 800379c:	428b      	cmp	r3, r1
 800379e:	bf04      	itt	eq
 80037a0:	6819      	ldreq	r1, [r3, #0]
 80037a2:	685b      	ldreq	r3, [r3, #4]
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	bf04      	itt	eq
 80037a8:	1809      	addeq	r1, r1, r0
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	6054      	str	r4, [r2, #4]
 80037ae:	e7ca      	b.n	8003746 <_free_r+0x22>
 80037b0:	bd38      	pop	{r3, r4, r5, pc}
 80037b2:	bf00      	nop
 80037b4:	20000328 	.word	0x20000328

080037b8 <sbrk_aligned>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4e0f      	ldr	r6, [pc, #60]	@ (80037f8 <sbrk_aligned+0x40>)
 80037bc:	460c      	mov	r4, r1
 80037be:	6831      	ldr	r1, [r6, #0]
 80037c0:	4605      	mov	r5, r0
 80037c2:	b911      	cbnz	r1, 80037ca <sbrk_aligned+0x12>
 80037c4:	f000 fba6 	bl	8003f14 <_sbrk_r>
 80037c8:	6030      	str	r0, [r6, #0]
 80037ca:	4621      	mov	r1, r4
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 fba1 	bl	8003f14 <_sbrk_r>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	d103      	bne.n	80037de <sbrk_aligned+0x26>
 80037d6:	f04f 34ff 	mov.w	r4, #4294967295
 80037da:	4620      	mov	r0, r4
 80037dc:	bd70      	pop	{r4, r5, r6, pc}
 80037de:	1cc4      	adds	r4, r0, #3
 80037e0:	f024 0403 	bic.w	r4, r4, #3
 80037e4:	42a0      	cmp	r0, r4
 80037e6:	d0f8      	beq.n	80037da <sbrk_aligned+0x22>
 80037e8:	1a21      	subs	r1, r4, r0
 80037ea:	4628      	mov	r0, r5
 80037ec:	f000 fb92 	bl	8003f14 <_sbrk_r>
 80037f0:	3001      	adds	r0, #1
 80037f2:	d1f2      	bne.n	80037da <sbrk_aligned+0x22>
 80037f4:	e7ef      	b.n	80037d6 <sbrk_aligned+0x1e>
 80037f6:	bf00      	nop
 80037f8:	20000324 	.word	0x20000324

080037fc <_malloc_r>:
 80037fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003800:	1ccd      	adds	r5, r1, #3
 8003802:	f025 0503 	bic.w	r5, r5, #3
 8003806:	3508      	adds	r5, #8
 8003808:	2d0c      	cmp	r5, #12
 800380a:	bf38      	it	cc
 800380c:	250c      	movcc	r5, #12
 800380e:	2d00      	cmp	r5, #0
 8003810:	4606      	mov	r6, r0
 8003812:	db01      	blt.n	8003818 <_malloc_r+0x1c>
 8003814:	42a9      	cmp	r1, r5
 8003816:	d904      	bls.n	8003822 <_malloc_r+0x26>
 8003818:	230c      	movs	r3, #12
 800381a:	6033      	str	r3, [r6, #0]
 800381c:	2000      	movs	r0, #0
 800381e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038f8 <_malloc_r+0xfc>
 8003826:	f000 f869 	bl	80038fc <__malloc_lock>
 800382a:	f8d8 3000 	ldr.w	r3, [r8]
 800382e:	461c      	mov	r4, r3
 8003830:	bb44      	cbnz	r4, 8003884 <_malloc_r+0x88>
 8003832:	4629      	mov	r1, r5
 8003834:	4630      	mov	r0, r6
 8003836:	f7ff ffbf 	bl	80037b8 <sbrk_aligned>
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	4604      	mov	r4, r0
 800383e:	d158      	bne.n	80038f2 <_malloc_r+0xf6>
 8003840:	f8d8 4000 	ldr.w	r4, [r8]
 8003844:	4627      	mov	r7, r4
 8003846:	2f00      	cmp	r7, #0
 8003848:	d143      	bne.n	80038d2 <_malloc_r+0xd6>
 800384a:	2c00      	cmp	r4, #0
 800384c:	d04b      	beq.n	80038e6 <_malloc_r+0xea>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	4639      	mov	r1, r7
 8003852:	4630      	mov	r0, r6
 8003854:	eb04 0903 	add.w	r9, r4, r3
 8003858:	f000 fb5c 	bl	8003f14 <_sbrk_r>
 800385c:	4581      	cmp	r9, r0
 800385e:	d142      	bne.n	80038e6 <_malloc_r+0xea>
 8003860:	6821      	ldr	r1, [r4, #0]
 8003862:	1a6d      	subs	r5, r5, r1
 8003864:	4629      	mov	r1, r5
 8003866:	4630      	mov	r0, r6
 8003868:	f7ff ffa6 	bl	80037b8 <sbrk_aligned>
 800386c:	3001      	adds	r0, #1
 800386e:	d03a      	beq.n	80038e6 <_malloc_r+0xea>
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	442b      	add	r3, r5
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	f8d8 3000 	ldr.w	r3, [r8]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	bb62      	cbnz	r2, 80038d8 <_malloc_r+0xdc>
 800387e:	f8c8 7000 	str.w	r7, [r8]
 8003882:	e00f      	b.n	80038a4 <_malloc_r+0xa8>
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	1b52      	subs	r2, r2, r5
 8003888:	d420      	bmi.n	80038cc <_malloc_r+0xd0>
 800388a:	2a0b      	cmp	r2, #11
 800388c:	d917      	bls.n	80038be <_malloc_r+0xc2>
 800388e:	1961      	adds	r1, r4, r5
 8003890:	42a3      	cmp	r3, r4
 8003892:	6025      	str	r5, [r4, #0]
 8003894:	bf18      	it	ne
 8003896:	6059      	strne	r1, [r3, #4]
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	bf08      	it	eq
 800389c:	f8c8 1000 	streq.w	r1, [r8]
 80038a0:	5162      	str	r2, [r4, r5]
 80038a2:	604b      	str	r3, [r1, #4]
 80038a4:	4630      	mov	r0, r6
 80038a6:	f000 f82f 	bl	8003908 <__malloc_unlock>
 80038aa:	f104 000b 	add.w	r0, r4, #11
 80038ae:	1d23      	adds	r3, r4, #4
 80038b0:	f020 0007 	bic.w	r0, r0, #7
 80038b4:	1ac2      	subs	r2, r0, r3
 80038b6:	bf1c      	itt	ne
 80038b8:	1a1b      	subne	r3, r3, r0
 80038ba:	50a3      	strne	r3, [r4, r2]
 80038bc:	e7af      	b.n	800381e <_malloc_r+0x22>
 80038be:	6862      	ldr	r2, [r4, #4]
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	bf0c      	ite	eq
 80038c4:	f8c8 2000 	streq.w	r2, [r8]
 80038c8:	605a      	strne	r2, [r3, #4]
 80038ca:	e7eb      	b.n	80038a4 <_malloc_r+0xa8>
 80038cc:	4623      	mov	r3, r4
 80038ce:	6864      	ldr	r4, [r4, #4]
 80038d0:	e7ae      	b.n	8003830 <_malloc_r+0x34>
 80038d2:	463c      	mov	r4, r7
 80038d4:	687f      	ldr	r7, [r7, #4]
 80038d6:	e7b6      	b.n	8003846 <_malloc_r+0x4a>
 80038d8:	461a      	mov	r2, r3
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	42a3      	cmp	r3, r4
 80038de:	d1fb      	bne.n	80038d8 <_malloc_r+0xdc>
 80038e0:	2300      	movs	r3, #0
 80038e2:	6053      	str	r3, [r2, #4]
 80038e4:	e7de      	b.n	80038a4 <_malloc_r+0xa8>
 80038e6:	230c      	movs	r3, #12
 80038e8:	6033      	str	r3, [r6, #0]
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 f80c 	bl	8003908 <__malloc_unlock>
 80038f0:	e794      	b.n	800381c <_malloc_r+0x20>
 80038f2:	6005      	str	r5, [r0, #0]
 80038f4:	e7d6      	b.n	80038a4 <_malloc_r+0xa8>
 80038f6:	bf00      	nop
 80038f8:	20000328 	.word	0x20000328

080038fc <__malloc_lock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	@ (8003904 <__malloc_lock+0x8>)
 80038fe:	f7ff bf0f 	b.w	8003720 <__retarget_lock_acquire_recursive>
 8003902:	bf00      	nop
 8003904:	20000320 	.word	0x20000320

08003908 <__malloc_unlock>:
 8003908:	4801      	ldr	r0, [pc, #4]	@ (8003910 <__malloc_unlock+0x8>)
 800390a:	f7ff bf0a 	b.w	8003722 <__retarget_lock_release_recursive>
 800390e:	bf00      	nop
 8003910:	20000320 	.word	0x20000320

08003914 <__ssputs_r>:
 8003914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	688e      	ldr	r6, [r1, #8]
 800391a:	461f      	mov	r7, r3
 800391c:	42be      	cmp	r6, r7
 800391e:	680b      	ldr	r3, [r1, #0]
 8003920:	4682      	mov	sl, r0
 8003922:	460c      	mov	r4, r1
 8003924:	4690      	mov	r8, r2
 8003926:	d82d      	bhi.n	8003984 <__ssputs_r+0x70>
 8003928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800392c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003930:	d026      	beq.n	8003980 <__ssputs_r+0x6c>
 8003932:	6965      	ldr	r5, [r4, #20]
 8003934:	6909      	ldr	r1, [r1, #16]
 8003936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800393a:	eba3 0901 	sub.w	r9, r3, r1
 800393e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003942:	1c7b      	adds	r3, r7, #1
 8003944:	444b      	add	r3, r9
 8003946:	106d      	asrs	r5, r5, #1
 8003948:	429d      	cmp	r5, r3
 800394a:	bf38      	it	cc
 800394c:	461d      	movcc	r5, r3
 800394e:	0553      	lsls	r3, r2, #21
 8003950:	d527      	bpl.n	80039a2 <__ssputs_r+0x8e>
 8003952:	4629      	mov	r1, r5
 8003954:	f7ff ff52 	bl	80037fc <_malloc_r>
 8003958:	4606      	mov	r6, r0
 800395a:	b360      	cbz	r0, 80039b6 <__ssputs_r+0xa2>
 800395c:	6921      	ldr	r1, [r4, #16]
 800395e:	464a      	mov	r2, r9
 8003960:	f000 fae8 	bl	8003f34 <memcpy>
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800396a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800396e:	81a3      	strh	r3, [r4, #12]
 8003970:	6126      	str	r6, [r4, #16]
 8003972:	6165      	str	r5, [r4, #20]
 8003974:	444e      	add	r6, r9
 8003976:	eba5 0509 	sub.w	r5, r5, r9
 800397a:	6026      	str	r6, [r4, #0]
 800397c:	60a5      	str	r5, [r4, #8]
 800397e:	463e      	mov	r6, r7
 8003980:	42be      	cmp	r6, r7
 8003982:	d900      	bls.n	8003986 <__ssputs_r+0x72>
 8003984:	463e      	mov	r6, r7
 8003986:	6820      	ldr	r0, [r4, #0]
 8003988:	4632      	mov	r2, r6
 800398a:	4641      	mov	r1, r8
 800398c:	f000 faa8 	bl	8003ee0 <memmove>
 8003990:	68a3      	ldr	r3, [r4, #8]
 8003992:	1b9b      	subs	r3, r3, r6
 8003994:	60a3      	str	r3, [r4, #8]
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	4433      	add	r3, r6
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	2000      	movs	r0, #0
 800399e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a2:	462a      	mov	r2, r5
 80039a4:	f000 fad4 	bl	8003f50 <_realloc_r>
 80039a8:	4606      	mov	r6, r0
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d1e0      	bne.n	8003970 <__ssputs_r+0x5c>
 80039ae:	6921      	ldr	r1, [r4, #16]
 80039b0:	4650      	mov	r0, sl
 80039b2:	f7ff feb7 	bl	8003724 <_free_r>
 80039b6:	230c      	movs	r3, #12
 80039b8:	f8ca 3000 	str.w	r3, [sl]
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c2:	81a3      	strh	r3, [r4, #12]
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	e7e9      	b.n	800399e <__ssputs_r+0x8a>
	...

080039cc <_svfiprintf_r>:
 80039cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d0:	4698      	mov	r8, r3
 80039d2:	898b      	ldrh	r3, [r1, #12]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	b09d      	sub	sp, #116	@ 0x74
 80039d8:	4607      	mov	r7, r0
 80039da:	460d      	mov	r5, r1
 80039dc:	4614      	mov	r4, r2
 80039de:	d510      	bpl.n	8003a02 <_svfiprintf_r+0x36>
 80039e0:	690b      	ldr	r3, [r1, #16]
 80039e2:	b973      	cbnz	r3, 8003a02 <_svfiprintf_r+0x36>
 80039e4:	2140      	movs	r1, #64	@ 0x40
 80039e6:	f7ff ff09 	bl	80037fc <_malloc_r>
 80039ea:	6028      	str	r0, [r5, #0]
 80039ec:	6128      	str	r0, [r5, #16]
 80039ee:	b930      	cbnz	r0, 80039fe <_svfiprintf_r+0x32>
 80039f0:	230c      	movs	r3, #12
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	b01d      	add	sp, #116	@ 0x74
 80039fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fe:	2340      	movs	r3, #64	@ 0x40
 8003a00:	616b      	str	r3, [r5, #20]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a06:	2320      	movs	r3, #32
 8003a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a10:	2330      	movs	r3, #48	@ 0x30
 8003a12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bb0 <_svfiprintf_r+0x1e4>
 8003a16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a1a:	f04f 0901 	mov.w	r9, #1
 8003a1e:	4623      	mov	r3, r4
 8003a20:	469a      	mov	sl, r3
 8003a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a26:	b10a      	cbz	r2, 8003a2c <_svfiprintf_r+0x60>
 8003a28:	2a25      	cmp	r2, #37	@ 0x25
 8003a2a:	d1f9      	bne.n	8003a20 <_svfiprintf_r+0x54>
 8003a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a30:	d00b      	beq.n	8003a4a <_svfiprintf_r+0x7e>
 8003a32:	465b      	mov	r3, fp
 8003a34:	4622      	mov	r2, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f7ff ff6b 	bl	8003914 <__ssputs_r>
 8003a3e:	3001      	adds	r0, #1
 8003a40:	f000 80a7 	beq.w	8003b92 <_svfiprintf_r+0x1c6>
 8003a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a46:	445a      	add	r2, fp
 8003a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 809f 	beq.w	8003b92 <_svfiprintf_r+0x1c6>
 8003a54:	2300      	movs	r3, #0
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a5e:	f10a 0a01 	add.w	sl, sl, #1
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	9307      	str	r3, [sp, #28]
 8003a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a6c:	4654      	mov	r4, sl
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a74:	484e      	ldr	r0, [pc, #312]	@ (8003bb0 <_svfiprintf_r+0x1e4>)
 8003a76:	f7fc fbb3 	bl	80001e0 <memchr>
 8003a7a:	9a04      	ldr	r2, [sp, #16]
 8003a7c:	b9d8      	cbnz	r0, 8003ab6 <_svfiprintf_r+0xea>
 8003a7e:	06d0      	lsls	r0, r2, #27
 8003a80:	bf44      	itt	mi
 8003a82:	2320      	movmi	r3, #32
 8003a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a88:	0711      	lsls	r1, r2, #28
 8003a8a:	bf44      	itt	mi
 8003a8c:	232b      	movmi	r3, #43	@ 0x2b
 8003a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a92:	f89a 3000 	ldrb.w	r3, [sl]
 8003a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a98:	d015      	beq.n	8003ac6 <_svfiprintf_r+0xfa>
 8003a9a:	9a07      	ldr	r2, [sp, #28]
 8003a9c:	4654      	mov	r4, sl
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f04f 0c0a 	mov.w	ip, #10
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aaa:	3b30      	subs	r3, #48	@ 0x30
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d94b      	bls.n	8003b48 <_svfiprintf_r+0x17c>
 8003ab0:	b1b0      	cbz	r0, 8003ae0 <_svfiprintf_r+0x114>
 8003ab2:	9207      	str	r2, [sp, #28]
 8003ab4:	e014      	b.n	8003ae0 <_svfiprintf_r+0x114>
 8003ab6:	eba0 0308 	sub.w	r3, r0, r8
 8003aba:	fa09 f303 	lsl.w	r3, r9, r3
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	46a2      	mov	sl, r4
 8003ac4:	e7d2      	b.n	8003a6c <_svfiprintf_r+0xa0>
 8003ac6:	9b03      	ldr	r3, [sp, #12]
 8003ac8:	1d19      	adds	r1, r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	9103      	str	r1, [sp, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfbb      	ittet	lt
 8003ad2:	425b      	neglt	r3, r3
 8003ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ad8:	9307      	strge	r3, [sp, #28]
 8003ada:	9307      	strlt	r3, [sp, #28]
 8003adc:	bfb8      	it	lt
 8003ade:	9204      	strlt	r2, [sp, #16]
 8003ae0:	7823      	ldrb	r3, [r4, #0]
 8003ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ae4:	d10a      	bne.n	8003afc <_svfiprintf_r+0x130>
 8003ae6:	7863      	ldrb	r3, [r4, #1]
 8003ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aea:	d132      	bne.n	8003b52 <_svfiprintf_r+0x186>
 8003aec:	9b03      	ldr	r3, [sp, #12]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	9203      	str	r2, [sp, #12]
 8003af4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003af8:	3402      	adds	r4, #2
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003bc0 <_svfiprintf_r+0x1f4>
 8003b00:	7821      	ldrb	r1, [r4, #0]
 8003b02:	2203      	movs	r2, #3
 8003b04:	4650      	mov	r0, sl
 8003b06:	f7fc fb6b 	bl	80001e0 <memchr>
 8003b0a:	b138      	cbz	r0, 8003b1c <_svfiprintf_r+0x150>
 8003b0c:	9b04      	ldr	r3, [sp, #16]
 8003b0e:	eba0 000a 	sub.w	r0, r0, sl
 8003b12:	2240      	movs	r2, #64	@ 0x40
 8003b14:	4082      	lsls	r2, r0
 8003b16:	4313      	orrs	r3, r2
 8003b18:	3401      	adds	r4, #1
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b20:	4824      	ldr	r0, [pc, #144]	@ (8003bb4 <_svfiprintf_r+0x1e8>)
 8003b22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b26:	2206      	movs	r2, #6
 8003b28:	f7fc fb5a 	bl	80001e0 <memchr>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d036      	beq.n	8003b9e <_svfiprintf_r+0x1d2>
 8003b30:	4b21      	ldr	r3, [pc, #132]	@ (8003bb8 <_svfiprintf_r+0x1ec>)
 8003b32:	bb1b      	cbnz	r3, 8003b7c <_svfiprintf_r+0x1b0>
 8003b34:	9b03      	ldr	r3, [sp, #12]
 8003b36:	3307      	adds	r3, #7
 8003b38:	f023 0307 	bic.w	r3, r3, #7
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	9303      	str	r3, [sp, #12]
 8003b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b42:	4433      	add	r3, r6
 8003b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b46:	e76a      	b.n	8003a1e <_svfiprintf_r+0x52>
 8003b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	2001      	movs	r0, #1
 8003b50:	e7a8      	b.n	8003aa4 <_svfiprintf_r+0xd8>
 8003b52:	2300      	movs	r3, #0
 8003b54:	3401      	adds	r4, #1
 8003b56:	9305      	str	r3, [sp, #20]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f04f 0c0a 	mov.w	ip, #10
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b64:	3a30      	subs	r2, #48	@ 0x30
 8003b66:	2a09      	cmp	r2, #9
 8003b68:	d903      	bls.n	8003b72 <_svfiprintf_r+0x1a6>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0c6      	beq.n	8003afc <_svfiprintf_r+0x130>
 8003b6e:	9105      	str	r1, [sp, #20]
 8003b70:	e7c4      	b.n	8003afc <_svfiprintf_r+0x130>
 8003b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b76:	4604      	mov	r4, r0
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e7f0      	b.n	8003b5e <_svfiprintf_r+0x192>
 8003b7c:	ab03      	add	r3, sp, #12
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	462a      	mov	r2, r5
 8003b82:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <_svfiprintf_r+0x1f0>)
 8003b84:	a904      	add	r1, sp, #16
 8003b86:	4638      	mov	r0, r7
 8003b88:	f3af 8000 	nop.w
 8003b8c:	1c42      	adds	r2, r0, #1
 8003b8e:	4606      	mov	r6, r0
 8003b90:	d1d6      	bne.n	8003b40 <_svfiprintf_r+0x174>
 8003b92:	89ab      	ldrh	r3, [r5, #12]
 8003b94:	065b      	lsls	r3, r3, #25
 8003b96:	f53f af2d 	bmi.w	80039f4 <_svfiprintf_r+0x28>
 8003b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b9c:	e72c      	b.n	80039f8 <_svfiprintf_r+0x2c>
 8003b9e:	ab03      	add	r3, sp, #12
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	462a      	mov	r2, r5
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <_svfiprintf_r+0x1f0>)
 8003ba6:	a904      	add	r1, sp, #16
 8003ba8:	4638      	mov	r0, r7
 8003baa:	f000 f879 	bl	8003ca0 <_printf_i>
 8003bae:	e7ed      	b.n	8003b8c <_svfiprintf_r+0x1c0>
 8003bb0:	08003ff0 	.word	0x08003ff0
 8003bb4:	08003ffa 	.word	0x08003ffa
 8003bb8:	00000000 	.word	0x00000000
 8003bbc:	08003915 	.word	0x08003915
 8003bc0:	08003ff6 	.word	0x08003ff6

08003bc4 <_printf_common>:
 8003bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	4616      	mov	r6, r2
 8003bca:	4698      	mov	r8, r3
 8003bcc:	688a      	ldr	r2, [r1, #8]
 8003bce:	690b      	ldr	r3, [r1, #16]
 8003bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bfb8      	it	lt
 8003bd8:	4613      	movlt	r3, r2
 8003bda:	6033      	str	r3, [r6, #0]
 8003bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003be0:	4607      	mov	r7, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	b10a      	cbz	r2, 8003bea <_printf_common+0x26>
 8003be6:	3301      	adds	r3, #1
 8003be8:	6033      	str	r3, [r6, #0]
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	0699      	lsls	r1, r3, #26
 8003bee:	bf42      	ittt	mi
 8003bf0:	6833      	ldrmi	r3, [r6, #0]
 8003bf2:	3302      	addmi	r3, #2
 8003bf4:	6033      	strmi	r3, [r6, #0]
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	f015 0506 	ands.w	r5, r5, #6
 8003bfc:	d106      	bne.n	8003c0c <_printf_common+0x48>
 8003bfe:	f104 0a19 	add.w	sl, r4, #25
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	6832      	ldr	r2, [r6, #0]
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	42ab      	cmp	r3, r5
 8003c0a:	dc26      	bgt.n	8003c5a <_printf_common+0x96>
 8003c0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	3b00      	subs	r3, #0
 8003c14:	bf18      	it	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	0692      	lsls	r2, r2, #26
 8003c1a:	d42b      	bmi.n	8003c74 <_printf_common+0xb0>
 8003c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c20:	4641      	mov	r1, r8
 8003c22:	4638      	mov	r0, r7
 8003c24:	47c8      	blx	r9
 8003c26:	3001      	adds	r0, #1
 8003c28:	d01e      	beq.n	8003c68 <_printf_common+0xa4>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	6922      	ldr	r2, [r4, #16]
 8003c2e:	f003 0306 	and.w	r3, r3, #6
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf02      	ittt	eq
 8003c36:	68e5      	ldreq	r5, [r4, #12]
 8003c38:	6833      	ldreq	r3, [r6, #0]
 8003c3a:	1aed      	subeq	r5, r5, r3
 8003c3c:	68a3      	ldr	r3, [r4, #8]
 8003c3e:	bf0c      	ite	eq
 8003c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c44:	2500      	movne	r5, #0
 8003c46:	4293      	cmp	r3, r2
 8003c48:	bfc4      	itt	gt
 8003c4a:	1a9b      	subgt	r3, r3, r2
 8003c4c:	18ed      	addgt	r5, r5, r3
 8003c4e:	2600      	movs	r6, #0
 8003c50:	341a      	adds	r4, #26
 8003c52:	42b5      	cmp	r5, r6
 8003c54:	d11a      	bne.n	8003c8c <_printf_common+0xc8>
 8003c56:	2000      	movs	r0, #0
 8003c58:	e008      	b.n	8003c6c <_printf_common+0xa8>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	4652      	mov	r2, sl
 8003c5e:	4641      	mov	r1, r8
 8003c60:	4638      	mov	r0, r7
 8003c62:	47c8      	blx	r9
 8003c64:	3001      	adds	r0, #1
 8003c66:	d103      	bne.n	8003c70 <_printf_common+0xac>
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c70:	3501      	adds	r5, #1
 8003c72:	e7c6      	b.n	8003c02 <_printf_common+0x3e>
 8003c74:	18e1      	adds	r1, r4, r3
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	2030      	movs	r0, #48	@ 0x30
 8003c7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c7e:	4422      	add	r2, r4
 8003c80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c88:	3302      	adds	r3, #2
 8003c8a:	e7c7      	b.n	8003c1c <_printf_common+0x58>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4622      	mov	r2, r4
 8003c90:	4641      	mov	r1, r8
 8003c92:	4638      	mov	r0, r7
 8003c94:	47c8      	blx	r9
 8003c96:	3001      	adds	r0, #1
 8003c98:	d0e6      	beq.n	8003c68 <_printf_common+0xa4>
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7d9      	b.n	8003c52 <_printf_common+0x8e>
	...

08003ca0 <_printf_i>:
 8003ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	7e0f      	ldrb	r7, [r1, #24]
 8003ca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ca8:	2f78      	cmp	r7, #120	@ 0x78
 8003caa:	4691      	mov	r9, r2
 8003cac:	4680      	mov	r8, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	469a      	mov	sl, r3
 8003cb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cb6:	d807      	bhi.n	8003cc8 <_printf_i+0x28>
 8003cb8:	2f62      	cmp	r7, #98	@ 0x62
 8003cba:	d80a      	bhi.n	8003cd2 <_printf_i+0x32>
 8003cbc:	2f00      	cmp	r7, #0
 8003cbe:	f000 80d2 	beq.w	8003e66 <_printf_i+0x1c6>
 8003cc2:	2f58      	cmp	r7, #88	@ 0x58
 8003cc4:	f000 80b9 	beq.w	8003e3a <_printf_i+0x19a>
 8003cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cd0:	e03a      	b.n	8003d48 <_printf_i+0xa8>
 8003cd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cd6:	2b15      	cmp	r3, #21
 8003cd8:	d8f6      	bhi.n	8003cc8 <_printf_i+0x28>
 8003cda:	a101      	add	r1, pc, #4	@ (adr r1, 8003ce0 <_printf_i+0x40>)
 8003cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ce0:	08003d39 	.word	0x08003d39
 8003ce4:	08003d4d 	.word	0x08003d4d
 8003ce8:	08003cc9 	.word	0x08003cc9
 8003cec:	08003cc9 	.word	0x08003cc9
 8003cf0:	08003cc9 	.word	0x08003cc9
 8003cf4:	08003cc9 	.word	0x08003cc9
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003cc9 	.word	0x08003cc9
 8003d00:	08003cc9 	.word	0x08003cc9
 8003d04:	08003cc9 	.word	0x08003cc9
 8003d08:	08003cc9 	.word	0x08003cc9
 8003d0c:	08003e4d 	.word	0x08003e4d
 8003d10:	08003d77 	.word	0x08003d77
 8003d14:	08003e07 	.word	0x08003e07
 8003d18:	08003cc9 	.word	0x08003cc9
 8003d1c:	08003cc9 	.word	0x08003cc9
 8003d20:	08003e6f 	.word	0x08003e6f
 8003d24:	08003cc9 	.word	0x08003cc9
 8003d28:	08003d77 	.word	0x08003d77
 8003d2c:	08003cc9 	.word	0x08003cc9
 8003d30:	08003cc9 	.word	0x08003cc9
 8003d34:	08003e0f 	.word	0x08003e0f
 8003d38:	6833      	ldr	r3, [r6, #0]
 8003d3a:	1d1a      	adds	r2, r3, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6032      	str	r2, [r6, #0]
 8003d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e09d      	b.n	8003e88 <_printf_i+0x1e8>
 8003d4c:	6833      	ldr	r3, [r6, #0]
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	1d19      	adds	r1, r3, #4
 8003d52:	6031      	str	r1, [r6, #0]
 8003d54:	0606      	lsls	r6, r0, #24
 8003d56:	d501      	bpl.n	8003d5c <_printf_i+0xbc>
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	e003      	b.n	8003d64 <_printf_i+0xc4>
 8003d5c:	0645      	lsls	r5, r0, #25
 8003d5e:	d5fb      	bpl.n	8003d58 <_printf_i+0xb8>
 8003d60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	da03      	bge.n	8003d70 <_printf_i+0xd0>
 8003d68:	232d      	movs	r3, #45	@ 0x2d
 8003d6a:	426d      	negs	r5, r5
 8003d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d70:	4859      	ldr	r0, [pc, #356]	@ (8003ed8 <_printf_i+0x238>)
 8003d72:	230a      	movs	r3, #10
 8003d74:	e011      	b.n	8003d9a <_printf_i+0xfa>
 8003d76:	6821      	ldr	r1, [r4, #0]
 8003d78:	6833      	ldr	r3, [r6, #0]
 8003d7a:	0608      	lsls	r0, r1, #24
 8003d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d80:	d402      	bmi.n	8003d88 <_printf_i+0xe8>
 8003d82:	0649      	lsls	r1, r1, #25
 8003d84:	bf48      	it	mi
 8003d86:	b2ad      	uxthmi	r5, r5
 8003d88:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d8a:	4853      	ldr	r0, [pc, #332]	@ (8003ed8 <_printf_i+0x238>)
 8003d8c:	6033      	str	r3, [r6, #0]
 8003d8e:	bf14      	ite	ne
 8003d90:	230a      	movne	r3, #10
 8003d92:	2308      	moveq	r3, #8
 8003d94:	2100      	movs	r1, #0
 8003d96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d9a:	6866      	ldr	r6, [r4, #4]
 8003d9c:	60a6      	str	r6, [r4, #8]
 8003d9e:	2e00      	cmp	r6, #0
 8003da0:	bfa2      	ittt	ge
 8003da2:	6821      	ldrge	r1, [r4, #0]
 8003da4:	f021 0104 	bicge.w	r1, r1, #4
 8003da8:	6021      	strge	r1, [r4, #0]
 8003daa:	b90d      	cbnz	r5, 8003db0 <_printf_i+0x110>
 8003dac:	2e00      	cmp	r6, #0
 8003dae:	d04b      	beq.n	8003e48 <_printf_i+0x1a8>
 8003db0:	4616      	mov	r6, r2
 8003db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003db6:	fb03 5711 	mls	r7, r3, r1, r5
 8003dba:	5dc7      	ldrb	r7, [r0, r7]
 8003dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dc0:	462f      	mov	r7, r5
 8003dc2:	42bb      	cmp	r3, r7
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	d9f4      	bls.n	8003db2 <_printf_i+0x112>
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d10b      	bne.n	8003de4 <_printf_i+0x144>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	07df      	lsls	r7, r3, #31
 8003dd0:	d508      	bpl.n	8003de4 <_printf_i+0x144>
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	6861      	ldr	r1, [r4, #4]
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	bfde      	ittt	le
 8003dda:	2330      	movle	r3, #48	@ 0x30
 8003ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003de4:	1b92      	subs	r2, r2, r6
 8003de6:	6122      	str	r2, [r4, #16]
 8003de8:	f8cd a000 	str.w	sl, [sp]
 8003dec:	464b      	mov	r3, r9
 8003dee:	aa03      	add	r2, sp, #12
 8003df0:	4621      	mov	r1, r4
 8003df2:	4640      	mov	r0, r8
 8003df4:	f7ff fee6 	bl	8003bc4 <_printf_common>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d14a      	bne.n	8003e92 <_printf_i+0x1f2>
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	b004      	add	sp, #16
 8003e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	f043 0320 	orr.w	r3, r3, #32
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	4833      	ldr	r0, [pc, #204]	@ (8003edc <_printf_i+0x23c>)
 8003e10:	2778      	movs	r7, #120	@ 0x78
 8003e12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	6831      	ldr	r1, [r6, #0]
 8003e1a:	061f      	lsls	r7, r3, #24
 8003e1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e20:	d402      	bmi.n	8003e28 <_printf_i+0x188>
 8003e22:	065f      	lsls	r7, r3, #25
 8003e24:	bf48      	it	mi
 8003e26:	b2ad      	uxthmi	r5, r5
 8003e28:	6031      	str	r1, [r6, #0]
 8003e2a:	07d9      	lsls	r1, r3, #31
 8003e2c:	bf44      	itt	mi
 8003e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e32:	6023      	strmi	r3, [r4, #0]
 8003e34:	b11d      	cbz	r5, 8003e3e <_printf_i+0x19e>
 8003e36:	2310      	movs	r3, #16
 8003e38:	e7ac      	b.n	8003d94 <_printf_i+0xf4>
 8003e3a:	4827      	ldr	r0, [pc, #156]	@ (8003ed8 <_printf_i+0x238>)
 8003e3c:	e7e9      	b.n	8003e12 <_printf_i+0x172>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f023 0320 	bic.w	r3, r3, #32
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	e7f6      	b.n	8003e36 <_printf_i+0x196>
 8003e48:	4616      	mov	r6, r2
 8003e4a:	e7bd      	b.n	8003dc8 <_printf_i+0x128>
 8003e4c:	6833      	ldr	r3, [r6, #0]
 8003e4e:	6825      	ldr	r5, [r4, #0]
 8003e50:	6961      	ldr	r1, [r4, #20]
 8003e52:	1d18      	adds	r0, r3, #4
 8003e54:	6030      	str	r0, [r6, #0]
 8003e56:	062e      	lsls	r6, r5, #24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	d501      	bpl.n	8003e60 <_printf_i+0x1c0>
 8003e5c:	6019      	str	r1, [r3, #0]
 8003e5e:	e002      	b.n	8003e66 <_printf_i+0x1c6>
 8003e60:	0668      	lsls	r0, r5, #25
 8003e62:	d5fb      	bpl.n	8003e5c <_printf_i+0x1bc>
 8003e64:	8019      	strh	r1, [r3, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	6123      	str	r3, [r4, #16]
 8003e6a:	4616      	mov	r6, r2
 8003e6c:	e7bc      	b.n	8003de8 <_printf_i+0x148>
 8003e6e:	6833      	ldr	r3, [r6, #0]
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	6032      	str	r2, [r6, #0]
 8003e74:	681e      	ldr	r6, [r3, #0]
 8003e76:	6862      	ldr	r2, [r4, #4]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7fc f9b0 	bl	80001e0 <memchr>
 8003e80:	b108      	cbz	r0, 8003e86 <_printf_i+0x1e6>
 8003e82:	1b80      	subs	r0, r0, r6
 8003e84:	6060      	str	r0, [r4, #4]
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	6123      	str	r3, [r4, #16]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e90:	e7aa      	b.n	8003de8 <_printf_i+0x148>
 8003e92:	6923      	ldr	r3, [r4, #16]
 8003e94:	4632      	mov	r2, r6
 8003e96:	4649      	mov	r1, r9
 8003e98:	4640      	mov	r0, r8
 8003e9a:	47d0      	blx	sl
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d0ad      	beq.n	8003dfc <_printf_i+0x15c>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	079b      	lsls	r3, r3, #30
 8003ea4:	d413      	bmi.n	8003ece <_printf_i+0x22e>
 8003ea6:	68e0      	ldr	r0, [r4, #12]
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	bfb8      	it	lt
 8003eae:	4618      	movlt	r0, r3
 8003eb0:	e7a6      	b.n	8003e00 <_printf_i+0x160>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4632      	mov	r2, r6
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	4640      	mov	r0, r8
 8003eba:	47d0      	blx	sl
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d09d      	beq.n	8003dfc <_printf_i+0x15c>
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	68e3      	ldr	r3, [r4, #12]
 8003ec4:	9903      	ldr	r1, [sp, #12]
 8003ec6:	1a5b      	subs	r3, r3, r1
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	dcf2      	bgt.n	8003eb2 <_printf_i+0x212>
 8003ecc:	e7eb      	b.n	8003ea6 <_printf_i+0x206>
 8003ece:	2500      	movs	r5, #0
 8003ed0:	f104 0619 	add.w	r6, r4, #25
 8003ed4:	e7f5      	b.n	8003ec2 <_printf_i+0x222>
 8003ed6:	bf00      	nop
 8003ed8:	08004001 	.word	0x08004001
 8003edc:	08004012 	.word	0x08004012

08003ee0 <memmove>:
 8003ee0:	4288      	cmp	r0, r1
 8003ee2:	b510      	push	{r4, lr}
 8003ee4:	eb01 0402 	add.w	r4, r1, r2
 8003ee8:	d902      	bls.n	8003ef0 <memmove+0x10>
 8003eea:	4284      	cmp	r4, r0
 8003eec:	4623      	mov	r3, r4
 8003eee:	d807      	bhi.n	8003f00 <memmove+0x20>
 8003ef0:	1e43      	subs	r3, r0, #1
 8003ef2:	42a1      	cmp	r1, r4
 8003ef4:	d008      	beq.n	8003f08 <memmove+0x28>
 8003ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003efe:	e7f8      	b.n	8003ef2 <memmove+0x12>
 8003f00:	4402      	add	r2, r0
 8003f02:	4601      	mov	r1, r0
 8003f04:	428a      	cmp	r2, r1
 8003f06:	d100      	bne.n	8003f0a <memmove+0x2a>
 8003f08:	bd10      	pop	{r4, pc}
 8003f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f12:	e7f7      	b.n	8003f04 <memmove+0x24>

08003f14 <_sbrk_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d06      	ldr	r5, [pc, #24]	@ (8003f30 <_sbrk_r+0x1c>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc fe86 	bl	8000c30 <_sbrk>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_sbrk_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_sbrk_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	2000031c 	.word	0x2000031c

08003f34 <memcpy>:
 8003f34:	440a      	add	r2, r1
 8003f36:	4291      	cmp	r1, r2
 8003f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f3c:	d100      	bne.n	8003f40 <memcpy+0xc>
 8003f3e:	4770      	bx	lr
 8003f40:	b510      	push	{r4, lr}
 8003f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f4a:	4291      	cmp	r1, r2
 8003f4c:	d1f9      	bne.n	8003f42 <memcpy+0xe>
 8003f4e:	bd10      	pop	{r4, pc}

08003f50 <_realloc_r>:
 8003f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f54:	4680      	mov	r8, r0
 8003f56:	4615      	mov	r5, r2
 8003f58:	460c      	mov	r4, r1
 8003f5a:	b921      	cbnz	r1, 8003f66 <_realloc_r+0x16>
 8003f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f60:	4611      	mov	r1, r2
 8003f62:	f7ff bc4b 	b.w	80037fc <_malloc_r>
 8003f66:	b92a      	cbnz	r2, 8003f74 <_realloc_r+0x24>
 8003f68:	f7ff fbdc 	bl	8003724 <_free_r>
 8003f6c:	2400      	movs	r4, #0
 8003f6e:	4620      	mov	r0, r4
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f74:	f000 f81a 	bl	8003fac <_malloc_usable_size_r>
 8003f78:	4285      	cmp	r5, r0
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	d802      	bhi.n	8003f84 <_realloc_r+0x34>
 8003f7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f82:	d8f4      	bhi.n	8003f6e <_realloc_r+0x1e>
 8003f84:	4629      	mov	r1, r5
 8003f86:	4640      	mov	r0, r8
 8003f88:	f7ff fc38 	bl	80037fc <_malloc_r>
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0ec      	beq.n	8003f6c <_realloc_r+0x1c>
 8003f92:	42b5      	cmp	r5, r6
 8003f94:	462a      	mov	r2, r5
 8003f96:	4621      	mov	r1, r4
 8003f98:	bf28      	it	cs
 8003f9a:	4632      	movcs	r2, r6
 8003f9c:	f7ff ffca 	bl	8003f34 <memcpy>
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	f7ff fbbe 	bl	8003724 <_free_r>
 8003fa8:	463c      	mov	r4, r7
 8003faa:	e7e0      	b.n	8003f6e <_realloc_r+0x1e>

08003fac <_malloc_usable_size_r>:
 8003fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb0:	1f18      	subs	r0, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bfbc      	itt	lt
 8003fb6:	580b      	ldrlt	r3, [r1, r0]
 8003fb8:	18c0      	addlt	r0, r0, r3
 8003fba:	4770      	bx	lr

08003fbc <_init>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr

08003fc8 <_fini>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr
